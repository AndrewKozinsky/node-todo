!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=110)}([function(e,t,n){"use strict";e.exports=n(68)},function(e,t,n){"use strict";var r=n(25),i="object"==typeof self&&self&&self.Object===Object&&self,o=r.a||i||Function("return this")();t.a=o},function(e,t,n){"use strict";t.a=function(e,t){}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(20))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";(function(e){var r=n(25),i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===i&&r.a.process,u=function(){try{var e=o&&o.require&&o.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();t.a=u}).call(this,n(21)(e))},function(e,t,n){"use strict";var r=Array.isArray,i=Object.keys,o=Object.prototype.hasOwnProperty,a="undefined"!=typeof Element;e.exports=function(e,t){try{return function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){var u,l,c,s=r(t),f=r(n);if(s&&f){if((l=t.length)!=n.length)return!1;for(u=l;0!=u--;)if(!e(t[u],n[u]))return!1;return!0}if(s!=f)return!1;var d=t instanceof Date,p=n instanceof Date;if(d!=p)return!1;if(d&&p)return t.getTime()==n.getTime();var h=t instanceof RegExp,v=n instanceof RegExp;if(h!=v)return!1;if(h&&v)return t.toString()==n.toString();var m=i(t);if((l=m.length)!==i(n).length)return!1;for(u=l;0!=u--;)if(!o.call(n,m[u]))return!1;if(a&&t instanceof Element&&n instanceof Element)return t===n;for(u=l;0!=u--;)if(!("_owner"===(c=m[u])&&t.$$typeof||e(t[c],n[c])))return!1;return!0}return t!=t&&n!=n}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i)||-2146828260===e.number)return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},function(e,t,n){"use strict";function r(e){this._maxSize=e,this.clear()}r.prototype.clear=function(){this._size=0,this._values=Object.create(null)},r.prototype.get=function(e){return this._values[e]},r.prototype.set=function(e,t){return this._size>=this._maxSize&&this.clear(),e in this._values||this._size++,this._values[e]=t};var i=/[^.^\]^[]+|(?=\[\]|\.\.)/g,o=/^\d+$/,a=/^\d/,u=/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,l=/^\s*(['"]?)(.*?)(\1)\s*$/,c=new r(512),s=new r(512),f=new r(512);function d(e){return c.get(e)||c.set(e,p(e).map((function(e){return e.replace(l,"$2")})))}function p(e){return e.match(i)}function h(e){return"string"==typeof e&&e&&-1!==["'",'"'].indexOf(e.charAt(0))}function v(e){return!h(e)&&(function(e){return e.match(a)&&!e.match(o)}(e)||function(e){return u.test(e)}(e))}e.exports={Cache:r,split:p,normalizePath:d,setter:function(e){var t=d(e);return s.get(e)||s.set(e,(function(e,n){for(var r=0,i=t.length;r<i-1;)e=e[t[r++]];e[t[r]]=n}))},getter:function(e,t){var n=d(e);return f.get(e)||f.set(e,(function(e){for(var r=0,i=n.length;r<i;){if(null==e&&t)return;e=e[n[r++]]}return e}))},join:function(e){return e.reduce((function(e,t){return e+(h(t)||o.test(t)?"["+t+"]":(e?".":"")+t)}),"")},forEach:function(e,t,n){!function(e,t,n){var r,i,o,a,u=e.length;for(i=0;i<u;i++)(r=e[i])&&(v(r)&&(r='"'+r+'"'),a=h(r),o=!a&&/^\d+$/.test(r),t.call(n,r,a,o,i,e))}(Array.isArray(e)?e:p(e),t,n)}}},function(e,t,n){"use strict";var r=n(24),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),v=l(n),m=0;m<a.length;++m){var y=a[m];if(!(o[y]||r&&r[y]||v&&v[y]||u&&u[y])){var b=d(n,y);try{c(t,y,b)}catch(e){}}}}return t}},function(e,t,n){var r=n(16),i=n(17),o=n(30);e.exports=r?function(e,t,n){return i.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){"use strict";(function(e){var r=n(1),i=n(64),o="object"==typeof exports&&exports&&!exports.nodeType&&exports,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===o?r.a.Buffer:void 0,l=(u?u.isBuffer:void 0)||i.a;t.a=l}).call(this,n(21)(e))},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){e.exports=n(72)()},function(e,t,n){"use strict";function r(e){return Array.prototype.slice.apply(e)}function i(e){this.status="pending",this._continuations=[],this._parent=null,this._paused=!1,e&&e.call(this,this._continueWith.bind(this),this._failWith.bind(this))}function o(e){return e&&"function"==typeof e.then}function a(e){return e}if(i.prototype={then:function(e,t){var n=i.unresolved()._setParent(this);if(this._isRejected()){if(this._paused)return this._continuations.push({promise:n,nextFn:e,catchFn:t}),n;if(t)try{var r=t(this._error);return o(r)?(this._chainPromiseData(r,n),n):i.resolve(r)._setParent(this)}catch(e){return i.reject(e)._setParent(this)}return i.reject(this._error)._setParent(this)}return this._continuations.push({promise:n,nextFn:e,catchFn:t}),this._runResolutions(),n},catch:function(e){if(this._isResolved())return i.resolve(this._data)._setParent(this);var t=i.unresolved()._setParent(this);return this._continuations.push({promise:t,catchFn:e}),this._runRejections(),t},finally:function(e){var t=!1;function n(n,r){if(!t){t=!0,e||(e=a);var i=e(n);return o(i)?i.then((function(){if(r)throw r;return n})):n}}return this.then((function(e){return n(e)})).catch((function(e){return n(null,e)}))},pause:function(){return this._paused=!0,this},resume:function(){var e=this._findFirstPaused();return e&&(e._paused=!1,e._runResolutions(),e._runRejections()),this},_findAncestry:function(){return this._continuations.reduce((function(e,t){if(t.promise){var n={promise:t.promise,children:t.promise._findAncestry()};e.push(n)}return e}),[])},_setParent:function(e){if(this._parent)throw new Error("parent already set");return this._parent=e,this},_continueWith:function(e){var t=this._findFirstPending();t&&(t._data=e,t._setResolved())},_findFirstPending:function(){return this._findFirstAncestor((function(e){return e._isPending&&e._isPending()}))},_findFirstPaused:function(){return this._findFirstAncestor((function(e){return e._paused}))},_findFirstAncestor:function(e){for(var t,n=this;n;)e(n)&&(t=n),n=n._parent;return t},_failWith:function(e){var t=this._findFirstPending();t&&(t._error=e,t._setRejected())},_takeContinuations:function(){return this._continuations.splice(0,this._continuations.length)},_runRejections:function(){if(!this._paused&&this._isRejected()){var e=this._error,t=this._takeContinuations(),n=this;t.forEach((function(t){if(t.catchFn)try{var r=t.catchFn(e);n._handleUserFunctionResult(r,t.promise)}catch(e){t.promise.reject(e)}else t.promise.reject(e)}))}},_runResolutions:function(){if(!this._paused&&this._isResolved()&&!this._isPending()){var e=this._takeContinuations();if(o(this._data))return this._handleWhenResolvedDataIsPromise(this._data);var t=this._data,n=this;e.forEach((function(e){if(e.nextFn)try{var r=e.nextFn(t);n._handleUserFunctionResult(r,e.promise)}catch(t){n._handleResolutionError(t,e)}else e.promise&&e.promise.resolve(t)}))}},_handleResolutionError:function(e,t){if(this._setRejected(),t.catchFn)try{return void t.catchFn(e)}catch(t){e=t}t.promise&&t.promise.reject(e)},_handleWhenResolvedDataIsPromise:function(e){var t=this;return e.then((function(e){t._data=e,t._runResolutions()})).catch((function(e){t._error=e,t._setRejected(),t._runRejections()}))},_handleUserFunctionResult:function(e,t){o(e)?this._chainPromiseData(e,t):t.resolve(e)},_chainPromiseData:function(e,t){e.then((function(e){t.resolve(e)})).catch((function(e){t.reject(e)}))},_setResolved:function(){this.status="resolved",this._paused||this._runResolutions()},_setRejected:function(){this.status="rejected",this._paused||this._runRejections()},_isPending:function(){return"pending"===this.status},_isResolved:function(){return"resolved"===this.status},_isRejected:function(){return"rejected"===this.status}},i.resolve=function(e){return new i((function(t,n){o(e)?e.then((function(e){t(e)})).catch((function(e){n(e)})):t(e)}))},i.reject=function(e){return new i((function(t,n){n(e)}))},i.unresolved=function(){return new i((function(e,t){this.resolve=e,this.reject=t}))},i.all=function(){var e=r(arguments);return Array.isArray(e[0])&&(e=e[0]),e.length?new i((function(t,n){var r=[],o=0,a=!1;e.forEach((function(u,l){i.resolve(u).then((function(n){r[l]=n,(o+=1)===e.length&&t(r)})).catch((function(e){!function(e){a||(a=!0,n(e))}(e)}))}))})):i.resolve([])},Promise===i)throw new Error("Please use SynchronousPromise.installGlobally() to install globally");var u=Promise;i.installGlobally=function(e){if(Promise===i)return e;var t=function(e){if(void 0===e||e.__patched)return e;var t=e;return(e=function(){t.apply(this,r(arguments))}).__patched=!0,e}(e);return Promise=i,t},i.uninstallGlobally=function(){Promise===i&&(Promise=u)},e.exports={SynchronousPromise:i}},function(e,t,n){var r=n(4),i=n(43),o=n(5),a=n(48),u=n(49),l=n(80),c=i("wks"),s=r.Symbol,f=l?s:s&&s.withoutSetter||a;e.exports=function(e){return o(c,e)||(u&&o(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},function(e,t,n){var r=n(12);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,n){var r=n(16),i=n(45),o=n(19),a=n(47),u=Object.defineProperty;t.f=r?u:function(e,t,n){if(o(e),t=a(t,!0),o(n),i)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(18);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(77),i=n(42);e.exports=function(e){return r(i(e))}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(69)},function(e,t,n){"use strict";e.exports=n(74)},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(20))},function(e,t,n){e.exports={wrapper:"_2_x7IFNcafebDONBSz1Iju",leftPart:"SaJaCLmn9kxvmuyrXMtvb",rightPart:"_2KY1b1AyQpW5mEnTFNBUU_"}},function(e,t,n){var r=n(4),i=n(75),o=n(76),a=n(10),u=n(15),l=u("iterator"),c=u("toStringTag"),s=o.values;for(var f in i){var d=r[f],p=d&&d.prototype;if(p){if(p[l]!==s)try{a(p,l,s)}catch(e){p[l]=s}if(p[c]||a(p,c,f),i[f])for(var h in o)if(p[h]!==o[h])try{a(p,h,o[h])}catch(e){p[h]=o[h]}}}},function(e,t){e.exports=!1},function(e,t,n){var r=n(4),i=n(10);e.exports=function(e,t){try{i(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){var r=n(43),i=n(48),o=r("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,t){e.exports={}},function(e,t,n){"use strict";(function(e,r){var i,o=n(61);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(o.a)(i);t.a=a}).call(this,n(20),n(21)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),i=n.n(r),o=n(3),a=n(13),u=n.n(a),l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=i.a.createContext||function(e,t){var n,i,a,s="__create-react-context-"+((l[a="__global_unique_id__"]=(l[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(o.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,i=e.value;((o=r)===(a=i)?0!==o||1/o==1/a:o!=o&&a!=a)?n=0:(n="function"==typeof t?t(r,i):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var o,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=u.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(o.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((i={})[s]=u.a.object,i),{Provider:f,Consumer:d}};t.a=s}).call(this,n(20))},function(e,t,n){var r=n(104);e.exports=p,e.exports.parse=o,e.exports.compile=function(e,t){return u(o(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],m=n[3],y=n[4],b=n[5],g=n[6],w=n[7];u&&(r.push(u),u="");var x=null!=v&&null!=h&&h!==v,E="+"===g||"*"===g,_="?"===g||"*"===g,k=n[2]||s,S=y||b;r.push({name:m||o++,prefix:v||"",delimiter:k,optional:_,repeat:E,partial:x,asterisk:!!w,pattern:S?c(S):w?".*":"[^"+l(k)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",f(t)));return function(t,i){for(var o="",u=t||{},l=(i||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(o+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');o+=s.prefix+f}}else o+=s}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return i||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=o?"$":i&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(p(e[i],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(o(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";e.exports=n(107)},function(e,t,n){e.exports={h2:"mXJvmu94EyuzqweEat4Zx",h3:"_3IW-rYdXSKkO4BLymEcAO3"}},function(e,t,n){e.exports={indent_2:"_38zgwEYJ0bYr_z8w23PFi3",indent_3:"_39MQwV6Lqvobbetrq9iylx"}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)o.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(28),i=n(44);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(4),i=n(29),o=r["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=o},function(e,t,n){var r=n(16),i=n(12),o=n(46);e.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(4),i=n(18),o=r.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var r=n(18);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(12);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){var r,i=n(19),o=n(81),a=n(32),u=n(31),l=n(86),c=n(46),s=n(33),f=s("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=c("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};u[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(d.prototype=i(e),n=new d,d.prototype=null,n[f]=e):n=h(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(5),i=n(22),o=n(83).indexOf,a=n(31);e.exports=function(e,t){var n,u=i(e),l=0,c=[];for(n in u)!r(a,n)&&r(u,n)&&c.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~o(c,n)||c.push(n));return c}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(87),i=n(4),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e])||o(i[e]):r[e]&&r[e][t]||i[e]&&i[e][t]}},function(e,t,n){var r,i,o,a=n(88),u=n(4),l=n(18),c=n(10),s=n(5),f=n(33),d=n(31),p=u.WeakMap;if(a){var h=new p,v=h.get,m=h.has,y=h.set;r=function(e,t){return y.call(h,e,t),t},i=function(e){return v.call(h,e)||{}},o=function(e){return m.call(h,e)}}else{var b=f("state");d[b]=!0,r=function(e,t){return c(e,b,t),t},i=function(e){return s(e,b)?e[b]:{}},o=function(e){return s(e,b)}}e.exports={set:r,get:i,has:o,enforce:function(e){return o(e)?i(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(44),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return i.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(16),i=n(91),o=n(30),a=n(22),u=n(47),l=n(5),c=n(45),s=Object.getOwnPropertyDescriptor;t.f=r?s:function(e,t){if(e=a(e),t=u(t,!0),c)try{return s(e,t)}catch(e){}if(l(e,t))return o(!i.f.call(e,t),e[t])}},function(e,t,n){var r=n(4),i=n(10),o=n(5),a=n(29),u=n(55),l=n(54),c=l.get,s=l.enforce,f=String(String).split("String");(e.exports=function(e,t,n,u){var l=!!u&&!!u.unsafe,c=!!u&&!!u.enumerable,d=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof t||o(n,"name")||i(n,"name",t),s(n).source=f.join("string"==typeof t?t:"")),e!==r?(l?!d&&e[t]&&(c=!0):delete e[t],c?e[t]=n:i(e,t,n)):c?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||u(this)}))},function(e,t,n){"use strict";var r,i,o,a=n(59),u=n(10),l=n(5),c=n(15),s=n(28),f=c("iterator"),d=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(r=i):d=!0),null==r&&(r={}),s||l(r,f)||u(r,f,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(e,t,n){var r=n(5),i=n(98),o=n(33),a=n(99),u=o("IE_PROTO"),l=Object.prototype;e.exports=a?Object.getPrototypeOf:function(e){return e=i(e),r(e,u)?e[u]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,t,n){var r=n(17).f,i=n(5),o=n(15)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports={app:"_1rqI0PWhW7Yv3U4XmkXwSx"}},function(e,t,n){e.exports={wrapper:"_2Pz3mPjw_up4scId8a446B"}},function(e,t,n){"use strict";t.a=function(){return!1}},function(e,t,n){"use strict";(function(e){var r=n(1),i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===i?r.a.Buffer:void 0,u=a?a.allocUnsafe:void 0;t.a=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(21)(e))},function(e,t,n){e.exports={bottomPart:"_8EKsxpFBehJ8CM_99Gf9k"}},function(e,t){function n(e,t){var n=e.length,r=new Array(n),i={},o=n,a=function(e){for(var t=new Map,n=0,r=e.length;n<r;n++){var i=e[n];t.has(i[0])||t.set(i[0],new Set),t.has(i[1])||t.set(i[1],new Set),t.get(i[0]).add(i[1])}return t}(t),u=function(e){for(var t=new Map,n=0,r=e.length;n<r;n++)t.set(e[n],n);return t}(e);for(t.forEach((function(e){if(!u.has(e[0])||!u.has(e[1]))throw new Error("Unknown node. There is an unknown node in the supplied edges.")}));o--;)i[o]||l(e[o],o,new Set);return r;function l(e,t,o){if(o.has(e)){var c;try{c=", node was:"+JSON.stringify(e)}catch(e){c=""}throw new Error("Cyclic dependency"+c)}if(!u.has(e))throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: "+JSON.stringify(e));if(!i[t]){i[t]=!0;var s=a.get(e)||new Set;if(t=(s=Array.from(s)).length){o.add(e);do{var f=s[--t];l(f,u.get(f),o)}while(t);o.delete(e)}r[--n]=e}}}e.exports=function(e){return n(function(e){for(var t=new Set,n=0,r=e.length;n<r;n++){var i=e[n];t.add(i[0]),t.add(i[1])}return Array.from(t)}(e),e)},e.exports.array=n},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(41),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function x(){}function E(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},x.prototype=w.prototype;var _=E.prototype=new x;_.constructor=E,r(_,w.prototype),_.isPureReactComponent=!0;var k={current:null},S=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)S.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:k.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var P=/\/+/g,F=[];function j(e,t,n,r){if(F.length){var i=F.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>F.length&&F.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+N(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+N(u=t[c],c);l+=e(u,s,r,i)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+N(u,c++),r,i);else if("object"===u)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function M(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(P,"$&/")+"/"),R(e,I,t=j(t,o,r,i)),A(t)}var z={current:null};function L(){var e=z.current;if(null===e)throw Error(y(321));return e}var U={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:k,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,D,t=j(null,null,t,n)),A(t)},count:function(e){return R(e,(function(){return null}),null)},toArray:function(e){var t=[];return M(e,t,null,(function(e){return e})),t},only:function(e){if(!C(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=u,t.Profiler=c,t.PureComponent=E,t.StrictMode=l,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=k.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)S.call(t,s)&&!T.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(41),o=n(70);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,d={onError:function(e){l=!0,c=e}};function p(e,t,n,r,i,o,a,s,f){l=!1,c=null,u.apply(d,arguments)}var h=null,v=null,m=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=m(n),function(e,t,n,r,i,o,u,d,h){if(p.apply(this,arguments),l){if(!l)throw Error(a(198));var v=c;l=!1,c=null,s||(s=!0,f=v)}}(r,t,void 0,e),e.currentTarget=null}var b=null,g={};function w(){if(b)for(var e in g){var t=g[e],n=b.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!E[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in E[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,l=r;if(_.hasOwnProperty(l))throw Error(a(99,l));_[l]=o;var c=o.phasedRegistrationNames;if(c){for(i in c)c.hasOwnProperty(i)&&x(c[i],u,l);i=!0}else o.registrationName?(x(o.registrationName,u,l),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function x(e,t,n){if(k[e])throw Error(a(100,e));k[e]=t,S[e]=t.eventTypes[n].dependencies}var E=[],_={},k={},S={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!g.hasOwnProperty(t)||g[t]!==r){if(g[t])throw Error(a(102,t));g[t]=r,n=!0}}n&&w()}var O=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),C=null,P=null,F=null;function j(e){if(e=v(e)){if("function"!=typeof C)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),C(e.stateNode,e.type,t))}}function A(e){P?F?F.push(e):F=[e]:P=e}function R(){if(P){var e=P,t=F;if(F=P=null,j(e),t)for(e=0;e<t.length;e++)j(t[e])}}function N(e,t){return e(t)}function D(e,t,n,r,i){return e(t,n,r,i)}function I(){}var M=N,z=!1,L=!1;function U(){null===P&&null===F||(I(),R())}function $(e,t,n){if(L)return e(t,n);L=!0;try{return M(e,t,n)}finally{L=!1,U()}}var V=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,W=Object.prototype.hasOwnProperty,B={},H={};function q(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var Q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){Q[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];Q[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Q[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Q[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){Q[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Q[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Q[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Q[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Q[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,Y);Q[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,Y);Q[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,Y);Q[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),Q.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var G=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function X(e,t,n,r){var i=Q.hasOwnProperty(t)?Q[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!W.call(H,e)||!W.call(B,e)&&(V.test(e)?H[e]=!0:(B[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}G.hasOwnProperty("ReactCurrentDispatcher")||(G.ReactCurrentDispatcher={current:null}),G.hasOwnProperty("ReactCurrentBatchConfig")||(G.ReactCurrentBatchConfig={suspense:null});var Z=/^(.*)[\\\/]/,J="function"==typeof Symbol&&Symbol.for,ee=J?Symbol.for("react.element"):60103,te=J?Symbol.for("react.portal"):60106,ne=J?Symbol.for("react.fragment"):60107,re=J?Symbol.for("react.strict_mode"):60108,ie=J?Symbol.for("react.profiler"):60114,oe=J?Symbol.for("react.provider"):60109,ae=J?Symbol.for("react.context"):60110,ue=J?Symbol.for("react.concurrent_mode"):60111,le=J?Symbol.for("react.forward_ref"):60112,ce=J?Symbol.for("react.suspense"):60113,se=J?Symbol.for("react.suspense_list"):60120,fe=J?Symbol.for("react.memo"):60115,de=J?Symbol.for("react.lazy"):60116,pe=J?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function ve(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function me(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return me(e.type);case pe:return me(e.render);case de:if(e=1===e._status?e._result:null)return me(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=me(e.type);n=null,r&&(n=me(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(Z,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function be(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ge(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=ge(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function xe(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ge(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function Ee(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _e(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=be(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function ke(e,t){null!=(t=t.checked)&&X(e,"checked",t,!1)}function Se(e,t){ke(e,t);var n=be(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,be(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ce(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+be(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function Fe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function je(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:be(n)}}function Ae(e,t){var n=be(t.value),r=be(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Re(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ne="http://www.w3.org/1999/xhtml",De="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Me(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Le=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ve={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},We={},Be={};function He(e){if(We[e])return We[e];if(!Ve[e])return e;var t,n=Ve[e];for(t in n)if(n.hasOwnProperty(t)&&t in Be)return We[e]=n[t];return e}O&&(Be=document.createElement("div").style,"AnimationEvent"in window||(delete Ve.animationend.animation,delete Ve.animationiteration.animation,delete Ve.animationstart.animation),"TransitionEvent"in window||delete Ve.transitionend.transition);var qe=He("animationend"),Qe=He("animationiteration"),Ke=He("animationstart"),Ye=He("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Xe=new("function"==typeof WeakMap?WeakMap:Map);function Ze(e){var t=Xe.get(e);return void 0===t&&(t=new Map,Xe.set(e,t)),t}function Je(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Je(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Je(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tt(i),e;if(o===r)return tt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(it(e,at),ot)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!O)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var i=st.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=On(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=lt(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<E.length;l++){var c=E[l];c&&(c=c.extractEvents(r,t,o,i,a))&&(u=rt(u,c))}ut(u)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&Qt(e,t)}n.set(e,null)}}var vt,mt,yt,bt=!1,gt=[],wt=null,xt=null,Et=null,_t=new Map,kt=new Map,St=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ot="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ct(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Pt(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":xt=null;break;case"mouseover":case"mouseout":Et=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":kt.delete(t.pointerId)}}function Ft(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Ct(t,n,r,i,o),null!==t&&(null!==(t=Cn(t))&&mt(t)),e):(e.eventSystemFlags|=r,e)}function jt(e){var t=On(e.target);if(null!==t){var n=Je(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function At(e){if(null!==e.blockedOn)return!1;var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Cn(t);return null!==n&&mt(n),e.blockedOn=t,!1}return!0}function Rt(e,t,n){At(e)&&n.delete(t)}function Nt(){for(bt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=Cn(e.blockedOn))&&vt(e);break}var t=Zt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==wt&&At(wt)&&(wt=null),null!==xt&&At(xt)&&(xt=null),null!==Et&&At(Et)&&(Et=null),_t.forEach(Rt),kt.forEach(Rt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,bt||(bt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Nt)))}function It(e){function t(t){return Dt(t,e)}if(0<gt.length){Dt(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Dt(wt,e),null!==xt&&Dt(xt,e),null!==Et&&Dt(Et,e),_t.forEach(t),kt.forEach(t),n=0;n<St.length;n++)(r=St[n]).blockedOn===e&&(r.blockedOn=null);for(;0<St.length&&null===(n=St[0]).blockedOn;)jt(n),null===n.blockedOn&&St.shift()}var Mt={},zt=new Map,Lt=new Map,Ut=["abort","abort",qe,"animationEnd",Qe,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function $t(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Lt.set(r,t),zt.set(r,o),Mt[i]=o}}$t("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),$t("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),$t(Ut,2);for(var Vt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Vt.length;Wt++)Lt.set(Vt[Wt],0);var Bt=o.unstable_UserBlockingPriority,Ht=o.unstable_runWithPriority,qt=!0;function Qt(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Xt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){z||I();var i=Xt,o=z;z=!0;try{D(i,e,t,n,r)}finally{(z=o)||U()}}function Gt(e,t,n,r){Ht(Bt,Xt.bind(null,e,t,n,r))}function Xt(e,t,n,r){if(qt)if(0<gt.length&&-1<Tt.indexOf(e))e=Ct(null,e,t,n,r),gt.push(e);else{var i=Zt(e,t,n,r);if(null===i)Pt(e,r);else if(-1<Tt.indexOf(e))e=Ct(i,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return wt=Ft(wt,e,t,n,r,i),!0;case"dragenter":return xt=Ft(xt,e,t,n,r,i),!0;case"mouseover":return Et=Ft(Et,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return _t.set(o,Ft(_t.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,kt.set(o,Ft(kt.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Pt(e,r),e=dt(e,r,null,t);try{$(pt,e)}finally{ft(e)}}}}function Zt(e,t,n,r){if(null!==(n=On(n=lt(r)))){var i=Je(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=et(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{$(pt,e)}finally{ft(e)}return null}var Jt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Jt.hasOwnProperty(e)&&Jt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Jt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Jt[t]=Jt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=Ne;function ln(e,t){var n=Ze(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=S[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vn=null,mn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function bn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function xn(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function En(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var _n=Math.random().toString(36).slice(2),kn="__reactInternalInstance$"+_n,Sn="__reactEventHandlers$"+_n,Tn="__reactContainere$"+_n;function On(e){var t=e[kn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[kn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=En(e);null!==e;){if(n=e[kn])return n;e=En(e)}return t}n=(e=n).parentNode}return null}function Cn(e){return!(e=e[kn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Pn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function Fn(e){return e[Sn]||null}function jn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function An(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Rn(e,t,n){(t=An(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Nn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=jn(t);for(t=n.length;0<t--;)Rn(n[t],"captured",e);for(t=0;t<n.length;t++)Rn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=An(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function Mn(e){it(e,Nn)}var zn=null,Ln=null,Un=null;function $n(){if(Un)return Un;var e,t,n=Ln,r=n.length,i="value"in zn?zn.value:zn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Un=i.slice(e,1<t?1-t:void 0)}function Vn(){return!0}function Wn(){return!1}function Bn(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Vn:Wn,this.isPropagationStopped=Wn,this}function Hn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Qn(e){e.eventPool=[],e.getPooled=Hn,e.release=qn}i(Bn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vn)},persist:function(){this.isPersistent=Vn},isPersistent:Wn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Wn,this._dispatchInstances=this._dispatchListeners=null}}),Bn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Bn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Qn(n),n},Qn(Bn);var Kn=Bn.extend({data:null}),Yn=Bn.extend({data:null}),Gn=[9,13,27,32],Xn=O&&"CompositionEvent"in window,Zn=null;O&&"documentMode"in document&&(Zn=document.documentMode);var Jn=O&&"TextEvent"in window&&!Zn,er=O&&(!Xn||Zn&&8<Zn&&11>=Zn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==Gn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Xn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ar?ir(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ar||o!==nr.compositionStart?o===nr.compositionEnd&&ar&&(i=$n()):(Ln="value"in(zn=r)?zn.value:zn.textContent,ar=!0)),o=Kn.getPooled(o,t,n,r),i?o.data=i:null!==(i=or(n))&&(o.data=i),Mn(o),i=o):i=null,(e=Jn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Xn&&ir(e,t)?(e=$n(),Un=Ln=zn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,Mn(t)):t=null,null===i?t:null===t?i:[i,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Bn.getPooled(sr.change,e,t,n)).type="change",A(n),Mn(e),e}var dr=null,pr=null;function hr(e){ut(e)}function vr(e){if(xe(Pn(e)))return e}function mr(e,t){if("change"===e)return t}var yr=!1;function br(){dr&&(dr.detachEvent("onpropertychange",gr),pr=dr=null)}function gr(e){if("value"===e.propertyName&&vr(pr))if(e=fr(pr,e,lt(e)),z)ut(e);else{z=!0;try{N(hr,e)}finally{z=!1,U()}}}function wr(e,t,n){"focus"===e?(br(),pr=n,(dr=t).attachEvent("onpropertychange",gr)):"blur"===e&&br()}function xr(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vr(pr)}function Er(e,t){if("click"===e)return vr(t)}function _r(e,t){if("input"===e||"change"===e)return vr(t)}O&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var kr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var i=t?Pn(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=mr;else if(cr(i))if(yr)a=_r;else{a=xr;var u=wr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=Er);if(a&&(a=a(e,t)))return fr(a,n,r);u&&u(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Oe(i,"number",i.value)}},Sr=Bn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Or(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Cr(){return Or}var Pr=0,Fr=0,jr=!1,Ar=!1,Rr=Sr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Cr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Pr;return Pr=e.screenX,jr?"mousemove"===e.type?e.screenX-t:0:(jr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=Fr;return Fr=e.screenY,Ar?"mousemove"===e.type?e.screenY-t:0:(Ar=!0,0)}}),Nr=Rr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:Dr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?On(t):null)&&(t!==Je(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Rr,l=Dr.mouseLeave,c=Dr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Nr,l=Dr.pointerLeave,c=Dr.pointerEnter,s="pointer");if(e=null==a?o:Pn(a),o=null==t?o:Pn(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=jn(e))a++;for(e=0,t=c;t;t=jn(t))e++;for(;0<a-e;)u=jn(u),a--;for(;0<e-a;)c=jn(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=jn(u),c=jn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=jn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=jn(s);for(s=0;s<u.length;s++)Dn(u[s],"bubbled",l);for(s=r.length;0<s--;)Dn(r[s],"captured",n);return 0==(64&i)?[l]:[l,n]}};var Mr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Lr(e,t){if(Mr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!Mr(e[n[r]],t[n[r]]))return!1;return!0}var Ur=O&&"documentMode"in document&&11>=document.documentMode,$r={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Vr=null,Wr=null,Br=null,Hr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Hr||null==Vr||Vr!==sn(n)?null:("selectionStart"in(n=Vr)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Br&&Lr(Br,n)?null:(Br=n,(e=Bn.getPooled($r.select,Wr,e,t)).type="select",e.target=Vr,Mn(e),e))}var Qr={eventTypes:$r,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Ze(i),o=S.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?Pn(t):window,e){case"focus":(cr(i)||"true"===i.contentEditable)&&(Vr=i,Wr=t,Br=null);break;case"blur":Br=Wr=Vr=null;break;case"mousedown":Hr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Hr=!1,qr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return qr(n,r)}return null}},Kr=Bn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=Bn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Gr=Sr.extend({relatedTarget:null});function Xr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Zr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Jr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=Sr.extend({key:function(e){if(e.key){var t=Zr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Xr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Jr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Cr,charCode:function(e){return"keypress"===e.type?Xr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Xr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Rr.extend({dataTransfer:null}),ni=Sr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Cr}),ri=Bn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Rr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oi={eventTypes:Mt,extractEvents:function(e,t,n,r){var i=zt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Xr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=Gr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Rr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case qe:case Qe:case Ke:e=Kr;break;case Ye:e=ri;break;case"scroll":e=Sr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Nr;break;default:e=Bn}return Mn(t=e.getPooled(i,t,n,r)),t}};if(b)throw Error(a(101));b=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=Fn,v=Cn,m=Pn,T({SimpleEventPlugin:oi,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:kr,SelectEventPlugin:Qr,BeforeInputEventPlugin:ur});var ai=[],ui=-1;function li(e){0>ui||(e.current=ai[ui],ai[ui]=null,ui--)}function ci(e,t){ui++,ai[ui]=e.current,e.current=t}var si={},fi={current:si},di={current:!1},pi=si;function hi(e,t){var n=e.type.contextTypes;if(!n)return si;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function vi(e){return null!=(e=e.childContextTypes)}function mi(){li(di),li(fi)}function yi(e,t,n){if(fi.current!==si)throw Error(a(168));ci(fi,t),ci(di,n)}function bi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,me(t)||"Unknown",o));return i({},n,{},r)}function gi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||si,pi=fi.current,ci(fi,e),ci(di,di.current),!0}function wi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,li(di),li(fi),ci(fi,e)):li(di),ci(di,n)}var xi=o.unstable_runWithPriority,Ei=o.unstable_scheduleCallback,_i=o.unstable_cancelCallback,ki=o.unstable_requestPaint,Si=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Oi=o.unstable_ImmediatePriority,Ci=o.unstable_UserBlockingPriority,Pi=o.unstable_NormalPriority,Fi=o.unstable_LowPriority,ji=o.unstable_IdlePriority,Ai={},Ri=o.unstable_shouldYield,Ni=void 0!==ki?ki:function(){},Di=null,Ii=null,Mi=!1,zi=Si(),Li=1e4>zi?Si:function(){return Si()-zi};function Ui(){switch(Ti()){case Oi:return 99;case Ci:return 98;case Pi:return 97;case Fi:return 96;case ji:return 95;default:throw Error(a(332))}}function $i(e){switch(e){case 99:return Oi;case 98:return Ci;case 97:return Pi;case 96:return Fi;case 95:return ji;default:throw Error(a(332))}}function Vi(e,t){return e=$i(e),xi(e,t)}function Wi(e,t,n){return e=$i(e),Ei(e,t,n)}function Bi(e){return null===Di?(Di=[e],Ii=Ei(Oi,qi)):Di.push(e),Ai}function Hi(){if(null!==Ii){var e=Ii;Ii=null,_i(e)}qi()}function qi(){if(!Mi&&null!==Di){Mi=!0;var e=0;try{var t=Di;Vi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Di=null}catch(t){throw null!==Di&&(Di=Di.slice(e+1)),Ei(Oi,Hi),t}finally{Mi=!1}}}function Qi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ki(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yi={current:null},Gi=null,Xi=null,Zi=null;function Ji(){Zi=Xi=Gi=null}function eo(e){var t=Yi.current;li(Yi),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Gi=e,Zi=Xi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(Fa=!0),e.firstContext=null)}function ro(e,t){if(Zi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Zi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xi){if(null===Gi)throw Error(a(308));Xi=t,Gi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Xi=Xi.next=t;return e._currentValue}var io=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function uo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function lo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function co(e,t){var n=e.alternate;null!==n&&ao(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function so(e,t,n,r){var o=e.updateQueue;io=!1;var a=o.baseQueue,u=o.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,o.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=u))}if(null!==a){l=a.next;var c=o.baseState,s=0,f=null,d=null,p=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var v={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=v,f=c):p=p.next=v,u>s&&(s=u)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),ol(u,h.suspenseConfig);e:{var m=e,y=h;switch(u=t,v=n,y.tag){case 1:if("function"==typeof(m=y.payload)){c=m.call(v,c,u);break e}c=m;break e;case 3:m.effectTag=-4097&m.effectTag|64;case 0:if(null==(u="function"==typeof(m=y.payload)?m.call(v,c,u):m))break e;c=i({},c,u);break e;case 2:io=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=o.effects)?o.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=o.shared.pending))break;h=a.next=u.next,u.next=l,o.baseQueue=a=u,o.shared.pending=null}}null===p?f=c:p.next=d,o.baseState=f,o.baseQueue=p,al(s),e.expirationTime=s,e.memoizedState=c}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var po=G.ReactCurrentBatchConfig,ho=(new r.Component).refs;function vo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var mo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Je(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),i=po.suspense;(i=uo(r=Qu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),lo(e,i),Ku(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),i=po.suspense;(i=uo(r=Qu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),lo(e,i),Ku(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=qu(),r=po.suspense;(r=uo(n=Qu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),lo(e,r),Ku(e,n)}};function yo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Lr(n,r)||!Lr(i,o))}function bo(e,t,n){var r=!1,i=si,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=vi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?hi(e,i):si),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mo.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ho,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=vi(t)?pi:fi.current,i.context=hi(e,o)),so(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(vo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&mo.enqueueReplaceState(i,i.state,null),so(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var xo=Array.isArray;function Eo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function _o(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function ko(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Tl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Pl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=Eo(e,t,n),r.return=e,r):((r=Ol(n.type,n.key,n.props,null,e.mode,r)).ref=Eo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Fl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Cl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Pl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Ol(t.type,t.key,t.props,null,e.mode,n)).ref=Eo(e,null,t),n.return=e,n;case te:return(t=Fl(t,e.mode,n)).return=e,t}if(xo(t)||ve(t))return(t=Cl(t,e.mode,n,null)).return=e,t;_o(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case te:return n.key===i?s(e,t,n,r):null}if(xo(n)||ve(n))return null!==i?null:f(e,t,n,r,null);_o(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(xo(r)||ve(r))return f(t,e=e.get(n)||null,r,i,null);_o(t,r)}return null}function v(i,a,u,l){for(var c=null,s=null,f=a,v=a=0,m=null;null!==f&&v<u.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var y=p(i,f,u[v],l);if(null===y){null===f&&(f=m);break}e&&f&&null===y.alternate&&t(i,f),a=o(y,a,v),null===s?c=y:s.sibling=y,s=y,f=m}if(v===u.length)return n(i,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(i,u[v],l))&&(a=o(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);v<u.length;v++)null!==(m=h(f,i,v,u[v],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=o(m,a,v),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(i,e)})),c}function m(i,u,l,c){var s=ve(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,v=u,m=u=0,y=null,b=l.next();null!==v&&!b.done;m++,b=l.next()){v.index>m?(y=v,v=null):y=v.sibling;var g=p(i,v,b.value,c);if(null===g){null===v&&(v=y);break}e&&v&&null===g.alternate&&t(i,v),u=o(g,u,m),null===f?s=g:f.sibling=g,f=g,v=y}if(b.done)return n(i,v),s;if(null===v){for(;!b.done;m++,b=l.next())null!==(b=d(i,b.value,c))&&(u=o(b,u,m),null===f?s=b:f.sibling=b,f=b);return s}for(v=r(i,v);!b.done;m++,b=l.next())null!==(b=h(v,i,m,b.value,c))&&(e&&null!==b.alternate&&v.delete(null===b.key?m:b.key),u=o(b,u,m),null===f?s=b:f.sibling=b,f=b);return e&&v.forEach((function(e){return t(i,e)})),s}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case ee:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(o.type===ne){n(e,c.sibling),(r=i(c,o.props.children)).return=e,e=r;break e}break;default:if(c.elementType===o.type){n(e,c.sibling),(r=i(c,o.props)).ref=Eo(e,c,o),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}o.type===ne?((r=Cl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Ol(o.type,o.key,o.props,null,e.mode,l)).ref=Eo(e,r,o),l.return=e,e=l)}return u(e);case te:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Fl(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Pl(o,e.mode,l)).return=e,e=r),u(e);if(xo(o))return v(e,r,o,l);if(ve(o))return m(e,r,o,l);if(s&&_o(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var So=ko(!0),To=ko(!1),Oo={},Co={current:Oo},Po={current:Oo},Fo={current:Oo};function jo(e){if(e===Oo)throw Error(a(174));return e}function Ao(e,t){switch(ci(Fo,t),ci(Po,e),ci(Co,Oo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Me(null,"");break;default:t=Me(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}li(Co),ci(Co,t)}function Ro(){li(Co),li(Po),li(Fo)}function No(e){jo(Fo.current);var t=jo(Co.current),n=Me(t,e.type);t!==n&&(ci(Po,e),ci(Co,n))}function Do(e){Po.current===e&&(li(Co),li(Po))}var Io={current:0};function Mo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function zo(e,t){return{responder:e,props:t}}var Lo=G.ReactCurrentDispatcher,Uo=G.ReactCurrentBatchConfig,$o=0,Vo=null,Wo=null,Bo=null,Ho=!1;function qo(){throw Error(a(321))}function Qo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Mr(e[n],t[n]))return!1;return!0}function Ko(e,t,n,r,i,o){if($o=o,Vo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Lo.current=null===e||null===e.memoizedState?ya:ba,e=n(r,i),t.expirationTime===$o){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,Bo=Wo=null,t.updateQueue=null,Lo.current=ga,e=n(r,i)}while(t.expirationTime===$o)}if(Lo.current=ma,t=null!==Wo&&null!==Wo.next,$o=0,Bo=Wo=Vo=null,Ho=!1,t)throw Error(a(300));return e}function Yo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Bo?Vo.memoizedState=Bo=e:Bo=Bo.next=e,Bo}function Go(){if(null===Wo){var e=Vo.alternate;e=null!==e?e.memoizedState:null}else e=Wo.next;var t=null===Bo?Vo.memoizedState:Bo.next;if(null!==t)Bo=t,Wo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Wo=e).memoizedState,baseState:Wo.baseState,baseQueue:Wo.baseQueue,queue:Wo.queue,next:null},null===Bo?Vo.memoizedState=Bo=e:Bo=Bo.next=e}return Bo}function Xo(e,t){return"function"==typeof t?t(e):t}function Zo(e){var t=Go(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Wo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var u=i.next;i.next=o.next,o.next=u}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=u=o=null,c=i;do{var s=c.expirationTime;if(s<$o){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,o=r):l=l.next=f,s>Vo.expirationTime&&(Vo.expirationTime=s,al(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),ol(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=u,Mr(r,t.memoizedState)||(Fa=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Jo(e){var t=Go(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var u=i=i.next;do{o=e(o,u.action),u=u.next}while(u!==i);Mr(o,t.memoizedState)||(Fa=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ea(e){var t=Yo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Xo,lastRenderedState:e}).dispatch=va.bind(null,Vo,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Vo.updateQueue)?(t={lastEffect:null},Vo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Go().memoizedState}function ra(e,t,n,r){var i=Yo();Vo.effectTag|=e,i.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function ia(e,t,n,r){var i=Go();r=void 0===r?null:r;var o=void 0;if(null!==Wo){var a=Wo.memoizedState;if(o=a.destroy,null!==r&&Qo(r,a.deps))return void ta(t,n,o,r)}Vo.effectTag|=e,i.memoizedState=ta(1|t,n,o,r)}function oa(e,t){return ra(516,4,e,t)}function aa(e,t){return ia(516,4,e,t)}function ua(e,t){return ia(4,2,e,t)}function la(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ca(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,la.bind(null,t,e),n)}function sa(){}function fa(e,t){return Yo().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=Ui();Vi(98>r?98:r,(function(){e(!0)})),Vi(97<r?97:r,(function(){var r=Uo.suspense;Uo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Uo.suspense=r}}))}function va(e,t,n){var r=qu(),i=po.suspense;i={expirationTime:r=Qu(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Vo||null!==o&&o===Vo)Ho=!0,i.expirationTime=$o,Vo.expirationTime=$o;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=o(a,n);if(i.eagerReducer=o,i.eagerState=u,Mr(u,a))return}catch(e){}Ku(e,r)}}var ma={readContext:ro,useCallback:qo,useContext:qo,useEffect:qo,useImperativeHandle:qo,useLayoutEffect:qo,useMemo:qo,useReducer:qo,useRef:qo,useState:qo,useDebugValue:qo,useResponder:qo,useDeferredValue:qo,useTransition:qo},ya={readContext:ro,useCallback:fa,useContext:ro,useEffect:oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,la.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Yo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Yo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,Vo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Yo().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=ea(e),r=n[0],i=n[1];return oa((function(){var n=Uo.suspense;Uo.suspense=void 0===t?null:t;try{i(e)}finally{Uo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Zo,useRef:na,useState:function(){return Zo(Xo)},useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=Zo(Xo),r=n[0],i=n[1];return aa((function(){var n=Uo.suspense;Uo.suspense=void 0===t?null:t;try{i(e)}finally{Uo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zo(Xo),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ga={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Jo,useRef:na,useState:function(){return Jo(Xo)},useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=Jo(Xo),r=n[0],i=n[1];return aa((function(){var n=Uo.suspense;Uo.suspense=void 0===t?null:t;try{i(e)}finally{Uo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Jo(Xo),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},wa=null,xa=null,Ea=!1;function _a(e,t){var n=kl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function ka(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function Sa(e){if(Ea){var t=xa;if(t){var n=t;if(!ka(e,t)){if(!(t=xn(n.nextSibling))||!ka(e,t))return e.effectTag=-1025&e.effectTag|2,Ea=!1,void(wa=e);_a(wa,n)}wa=e,xa=xn(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,Ea=!1,wa=e}}function Ta(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Oa(e){if(e!==wa)return!1;if(!Ea)return Ta(e),Ea=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!bn(t,e.memoizedProps))for(t=xa;t;)_a(e,t),t=xn(t.nextSibling);if(Ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){xa=xn(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}xa=null}}else xa=wa?xn(e.stateNode.nextSibling):null;return!0}function Ca(){xa=wa=null,Ea=!1}var Pa=G.ReactCurrentOwner,Fa=!1;function ja(e,t,n,r){t.child=null===e?To(t,null,n,r):So(t,e.child,n,r)}function Aa(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=Ko(e,t,n,r,o,i),null===e||Fa?(t.effectTag|=1,ja(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Ra(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Sl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ol(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Na(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Lr)(i,r)&&e.ref===t.ref)?Ka(e,t,o):(t.effectTag|=1,(e=Tl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Na(e,t,n,r,i,o){return null!==e&&Lr(e.memoizedProps,r)&&e.ref===t.ref&&(Fa=!1,i<o)?(t.expirationTime=e.expirationTime,Ka(e,t,o)):Ia(e,t,n,r,o)}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ia(e,t,n,r,i){var o=vi(n)?pi:fi.current;return o=hi(t,o),no(t,i),n=Ko(e,t,n,r,o,i),null===e||Fa?(t.effectTag|=1,ja(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Ma(e,t,n,r,i){if(vi(n)){var o=!0;gi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),bo(t,n,r),wo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=ro(c):c=hi(t,c=vi(n)?pi:fi.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&go(t,a,r,c),io=!1;var d=t.memoizedState;a.state=d,so(t,r,a,i),l=t.memoizedState,u!==r||d!==l||di.current||io?("function"==typeof s&&(vo(t,n,s,r),l=t.memoizedState),(u=io||yo(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ao(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Ki(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=ro(c):c=hi(t,c=vi(n)?pi:fi.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&go(t,a,r,c),io=!1,l=t.memoizedState,a.state=l,so(t,r,a,i),d=t.memoizedState,u!==r||l!==d||di.current||io?("function"==typeof s&&(vo(t,n,s,r),d=t.memoizedState),(s=io||yo(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return za(e,t,n,r,o,i)}function za(e,t,n,r,i,o){Da(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&wi(t,n,!1),Ka(e,t,o);r=t.stateNode,Pa.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=So(t,e.child,null,o),t.child=So(t,null,u,o)):ja(e,t,u,o),t.memoizedState=r.state,i&&wi(t,n,!0),t.child}function La(e){var t=e.stateNode;t.pendingContext?yi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yi(0,t.context,!1),Ao(e,t.containerInfo)}var Ua,$a,Va,Wa={dehydrated:null,retryTime:0};function Ba(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Io.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),ci(Io,1&a),null===e){if(void 0!==o.fallback&&Sa(t),u){if(u=o.fallback,(o=Cl(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Cl(u,i,n,null)).return=t,o.sibling=n,t.memoizedState=Wa,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=To(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,u){if(o=o.fallback,(n=Tl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=Tl(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Wa,t.child=n,i}return n=So(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=o.fallback,(o=Cl(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Cl(u,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Wa,t.child=o,n}return t.memoizedState=null,t.child=So(t,e,o.children,n)}function Ha(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function qa(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function Qa(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(ja(e,t,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ha(e,n);else if(19===e.tag)Ha(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ci(Io,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Mo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),qa(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Mo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}qa(t,!0,n,null,o,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ka(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&al(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ya(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ga(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vi(t.type)&&mi(),null;case 3:return Ro(),li(di),li(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Oa(t)||(t.effectTag|=4),null;case 5:Do(t),n=jo(Fo.current);var o=t.type;if(null!==e&&null!=t.stateNode)$a(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=jo(Co.current),Oa(t)){r=t.stateNode,o=t.type;var u=t.memoizedProps;switch(r[kn]=t,r[Sn]=u,o){case"iframe":case"object":case"embed":Qt("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)Qt(Ge[e],r);break;case"source":Qt("error",r);break;case"img":case"image":case"link":Qt("error",r),Qt("load",r);break;case"form":Qt("reset",r),Qt("submit",r);break;case"details":Qt("toggle",r);break;case"input":_e(r,u),Qt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Qt("invalid",r),ln(n,"onChange");break;case"textarea":je(r,u),Qt("invalid",r),ln(n,"onChange")}for(var l in on(o,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):k.hasOwnProperty(l)&&null!=c&&ln(n,l)}switch(o){case"input":we(r),Te(r,u,!0);break;case"textarea":we(r),Re(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===un&&(e=Ie(o)),e===un?"script"===o?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(o,{is:r.is}):(e=l.createElement(o),"select"===o&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,o),e[kn]=t,e[Sn]=r,Ua(e,t),t.stateNode=e,l=an(o,r),o){case"iframe":case"object":case"embed":Qt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ge.length;c++)Qt(Ge[c],e);c=r;break;case"source":Qt("error",e),c=r;break;case"img":case"image":case"link":Qt("error",e),Qt("load",e),c=r;break;case"form":Qt("reset",e),Qt("submit",e),c=r;break;case"details":Qt("toggle",e),c=r;break;case"input":_e(e,r),c=Ee(e,r),Qt("invalid",e),ln(n,"onChange");break;case"option":c=Ce(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=i({},r,{value:void 0}),Qt("invalid",e),ln(n,"onChange");break;case"textarea":je(e,r),c=Fe(e,r),Qt("invalid",e),ln(n,"onChange");break;default:c=r}on(o,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Le(e,f):"children"===u?"string"==typeof f?("textarea"!==o||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?null!=f&&ln(n,u):null!=f&&X(e,u,f,l))}switch(o){case"input":we(e),Te(e,r,!1);break;case"textarea":we(e),Re(e);break;case"option":null!=r.value&&e.setAttribute("value",""+be(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Va(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=jo(Fo.current),jo(Co.current),Oa(t)?(n=t.stateNode,r=t.memoizedProps,n[kn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[kn]=t,t.stateNode=n)}return null;case 13:return li(Io),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Oa(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?Ou===wu&&(Ou=xu):(Ou!==wu&&Ou!==xu||(Ou=Eu),0!==Au&&null!==ku&&(Rl(ku,Tu),Nl(ku,Au)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ro(),null;case 10:return eo(t),null;case 17:return vi(t.type)&&mi(),null;case 19:if(li(Io),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(u=r.rendering)){if(o)Ya(r,!1);else if(Ou!==wu||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Mo(u))){for(t.effectTag|=64,Ya(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,u=e.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return ci(Io,1&Io.current|2),t.child}u=u.sibling}}else{if(!o)if(null!==(e=Mo(u))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ya(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Li()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Ya(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Li()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Li(),n.sibling=null,t=Io.current,ci(Io,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Xa(e){switch(e.tag){case 1:vi(e.type)&&mi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ro(),li(di),li(fi),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Do(e),null;case 13:return li(Io),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return li(Io),null;case 4:return Ro(),null;case 10:return eo(e),null;default:return null}}function Za(e,t){return{value:e,source:t,stack:ye(t)}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(jo(Co.current),e=null,n){case"input":a=Ee(c,a),r=Ee(c,r),e=[];break;case"option":a=Ce(c,a),r=Ce(c,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=Fe(c,a),r=Fe(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(u in on(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(k.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(k.hasOwnProperty(u)?(null!=s&&ln(o,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Va=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Ja="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&me(n.type),t=t.value,null!==e&&1===e.tag&&me(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){bl(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ki(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function iu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void iu(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ki(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function au(e,t,n){switch("function"==typeof El&&El(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){bl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){bl(e,t)}}(t,n);break;case 5:tu(t);break;case 4:su(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function cu(e){e:{for(var t=e.return;null!==t;){if(lu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||lu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function su(e,t,n){for(var r,i,o=t,u=!1;;){if(!u){u=o.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}u=u.return}u=!0}if(5===o.tag||6===o.tag){e:for(var l=e,c=o,s=n,f=c;;)if(au(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,c=o.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(au(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(u=!1)}o.sibling.return=o.return,o=o.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Sn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&ke(n,r),an(e,i),t=an(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?nn(n,l):"dangerouslySetInnerHTML"===u?Le(n,l):"children"===u?Ue(n,l):X(n,u,l,t)}switch(e){case"input":Se(n,r);break;case"textarea":Ae(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Nu=Li()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void du(t);case 19:return void du(t);case 17:return}throw Error(a(163))}function du(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Ja),t.forEach((function(t){var r=wl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=uo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Iu||(Iu=!0,Mu=r),eu(e,t)},n}function vu(e,t,n){(n=uo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return eu(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zu?zu=new Set([this]):zu.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var mu,yu=Math.ceil,bu=G.ReactCurrentDispatcher,gu=G.ReactCurrentOwner,wu=0,xu=3,Eu=4,_u=0,ku=null,Su=null,Tu=0,Ou=wu,Cu=null,Pu=1073741823,Fu=1073741823,ju=null,Au=0,Ru=!1,Nu=0,Du=null,Iu=!1,Mu=null,zu=null,Lu=!1,Uu=null,$u=90,Vu=null,Wu=0,Bu=null,Hu=0;function qu(){return 0!=(48&_u)?1073741821-(Li()/10|0):0!==Hu?Hu:Hu=1073741821-(Li()/10|0)}function Qu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ui();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&_u))return Tu;if(null!==n)e=Qi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Qi(e,150,100);break;case 97:case 96:e=Qi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==ku&&e===Tu&&--e,e}function Ku(e,t){if(50<Wu)throw Wu=0,Bu=null,Error(a(185));if(null!==(e=Yu(e,t))){var n=Ui();1073741823===t?0!=(8&_u)&&0==(48&_u)?Ju(e):(Xu(e),0===_u&&Hi()):Xu(e),0==(4&_u)||98!==n&&99!==n||(null===Vu?Vu=new Map([[e,t]]):(void 0===(n=Vu.get(e))||n>t)&&Vu.set(e,t))}}function Yu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(ku===i&&(al(t),Ou===Eu&&Rl(i,Tu)),Nl(i,t)),i}function Gu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Al(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Xu(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Bi(Ju.bind(null,e));else{var t=Gu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=qu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Ai&&_i(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Bi(Ju.bind(null,e)):Wi(r,Zu.bind(null,e),{timeout:10*(1073741821-t)-Li()}),e.callbackNode=t}}}function Zu(e,t){if(Hu=0,t)return Dl(e,t=qu()),Xu(e),null;var n=Gu(e);if(0!==n){if(t=e.callbackNode,0!=(48&_u))throw Error(a(327));if(vl(),e===ku&&n===Tu||nl(e,n),null!==Su){var r=_u;_u|=16;for(var i=il();;)try{ll();break}catch(t){rl(e,t)}if(Ji(),_u=r,bu.current=i,1===Ou)throw t=Cu,nl(e,n),Rl(e,n),Xu(e),t;if(null===Su)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ou,ku=null,r){case wu:case 1:throw Error(a(345));case 2:Dl(e,2<n?2:n);break;case xu:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),1073741823===Pu&&10<(i=Nu+500-Li())){if(Ru){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(o=Gu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=gn(dl.bind(null,e),i);break}dl(e);break;case Eu:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),Ru&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(i=Gu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==Fu?r=10*(1073741821-Fu)-Li():1073741823===Pu?r=0:(r=10*(1073741821-Pu)-5e3,0>(r=(i=Li())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=gn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==Pu&&null!==ju){o=Pu;var u=ju;if(0>=(r=0|u.busyMinDurationMs)?r=0:(i=0|u.busyDelayMs,r=(o=Li()-(10*(1073741821-o)-(0|u.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Rl(e,n),e.timeoutHandle=gn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(a(329))}if(Xu(e),e.callbackNode===t)return Zu.bind(null,e)}}return null}function Ju(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&_u))throw Error(a(327));if(vl(),e===ku&&t===Tu||nl(e,t),null!==Su){var n=_u;_u|=16;for(var r=il();;)try{ul();break}catch(t){rl(e,t)}if(Ji(),_u=n,bu.current=r,1===Ou)throw n=Cu,nl(e,t),Rl(e,t),Xu(e),n;if(null!==Su)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,ku=null,dl(e),Xu(e)}return null}function el(e,t){var n=_u;_u|=1;try{return e(t)}finally{0===(_u=n)&&Hi()}}function tl(e,t){var n=_u;_u&=-2,_u|=8;try{return e(t)}finally{0===(_u=n)&&Hi()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==Su)for(n=Su.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mi();break;case 3:Ro(),li(di),li(fi);break;case 5:Do(r);break;case 4:Ro();break;case 13:case 19:li(Io);break;case 10:eo(r)}n=n.return}ku=e,Su=Tl(e.current,null),Tu=t,Ou=wu,Cu=null,Fu=Pu=1073741823,ju=null,Au=0,Ru=!1}function rl(e,t){for(;;){try{if(Ji(),Lo.current=ma,Ho)for(var n=Vo.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if($o=0,Bo=Wo=Vo=null,Ho=!1,null===Su||null===Su.return)return Ou=1,Cu=t,Su=null;e:{var i=e,o=Su.return,a=Su,u=t;if(t=Tu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Io.current),f=o;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(d){var v=f.updateQueue;if(null===v){var m=new Set;m.add(l),f.updateQueue=m}else v.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=uo(1073741823,null);y.tag=2,lo(a,y)}a.expirationTime=1073741823;break e}u=void 0,a=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new pu,u=new Set,b.set(l,u)):void 0===(u=b.get(l))&&(u=new Set,b.set(l,u)),!u.has(a)){u.add(a);var g=gl.bind(null,i,l,a);l.then(g,g)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((me(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(a))}5!==Ou&&(Ou=2),u=Za(u,a),f=o;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,co(f,hu(f,l,t));break e;case 1:l=u;var w=f.type,x=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==x&&"function"==typeof x.componentDidCatch&&(null===zu||!zu.has(x)))){f.effectTag|=4096,f.expirationTime=t,co(f,vu(f,l,t));break e}}f=f.return}while(null!==f)}Su=sl(Su)}catch(e){t=e;continue}break}}function il(){var e=bu.current;return bu.current=ma,null===e?ma:e}function ol(e,t){e<Pu&&2<e&&(Pu=e),null!==t&&e<Fu&&2<e&&(Fu=e,ju=t)}function al(e){e>Au&&(Au=e)}function ul(){for(;null!==Su;)Su=cl(Su)}function ll(){for(;null!==Su&&!Ri();)Su=cl(Su)}function cl(e){var t=mu(e.alternate,e,Tu);return e.memoizedProps=e.pendingProps,null===t&&(t=sl(e)),gu.current=null,t}function sl(e){Su=e;do{var t=Su.alternate;if(e=Su.return,0==(2048&Su.effectTag)){if(t=Ga(t,Su,Tu),1===Tu||1!==Su.childExpirationTime){for(var n=0,r=Su.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}Su.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=Su.firstEffect),null!==Su.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=Su.firstEffect),e.lastEffect=Su.lastEffect),1<Su.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=Su:e.firstEffect=Su,e.lastEffect=Su))}else{if(null!==(t=Xa(Su)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=Su.sibling))return t;Su=e}while(null!==Su);return Ou===wu&&(Ou=5),null}function fl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=Ui();return Vi(99,pl.bind(null,e,t)),null}function pl(e,t){do{vl()}while(null!==Uu);if(0!=(48&_u))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===ku&&(Su=ku=null,Tu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=_u;_u|=32,gu.current=null,vn=qt;var u=pn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,v=0,m=0,y=u,b=null;t:for(;;){for(var g;y!==l||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(h=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(g=y.firstChild);)b=y,y=g;for(;;){if(y===u)break t;if(b===l&&++v===s&&(p=d),b===f&&++m===c&&(h=d),null!==(g=y.nextSibling))break;b=(y=b).parentNode}y=g}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;mn={activeElementDetached:null,focusedElem:u,selectionRange:l},qt=!1,Du=i;do{try{hl()}catch(e){if(null===Du)throw Error(a(330));bl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=i;do{try{for(u=e,l=t;null!==Du;){var w=Du.effectTag;if(16&w&&Ue(Du.stateNode,""),128&w){var x=Du.alternate;if(null!==x){var E=x.ref;null!==E&&("function"==typeof E?E(null):E.current=null)}}switch(1038&w){case 2:cu(Du),Du.effectTag&=-3;break;case 6:cu(Du),Du.effectTag&=-3,fu(Du.alternate,Du);break;case 1024:Du.effectTag&=-1025;break;case 1028:Du.effectTag&=-1025,fu(Du.alternate,Du);break;case 4:fu(Du.alternate,Du);break;case 8:su(u,s=Du,l),uu(s)}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));bl(Du,e),Du=Du.nextEffect}}while(null!==Du);if(E=mn,x=pn(),w=E.focusedElem,l=E.selectionRange,x!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==l&&hn(w)&&(x=l.start,void 0===(E=l.end)&&(E=x),"selectionStart"in w?(w.selectionStart=x,w.selectionEnd=Math.min(E,w.value.length)):(E=(x=w.ownerDocument||document)&&x.defaultView||window).getSelection&&(E=E.getSelection(),s=w.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!E.extend&&u>l&&(s=l,l=u,u=s),s=dn(w,u),f=dn(w,l),s&&f&&(1!==E.rangeCount||E.anchorNode!==s.node||E.anchorOffset!==s.offset||E.focusNode!==f.node||E.focusOffset!==f.offset)&&((x=x.createRange()).setStart(s.node,s.offset),E.removeAllRanges(),u>l?(E.addRange(x),E.extend(f.node,f.offset)):(x.setEnd(f.node,f.offset),E.addRange(x))))),x=[];for(E=w;E=E.parentNode;)1===E.nodeType&&x.push({element:E,left:E.scrollLeft,top:E.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<x.length;w++)(E=x[w]).element.scrollLeft=E.left,E.element.scrollTop=E.top}qt=!!vn,mn=vn=null,e.current=n,Du=i;do{try{for(w=e;null!==Du;){var _=Du.effectTag;if(36&_&&ou(w,Du.alternate,Du),128&_){x=void 0;var k=Du.ref;if(null!==k){var S=Du.stateNode;switch(Du.tag){case 5:x=S;break;default:x=S}"function"==typeof k?k(x):k.current=x}}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));bl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=null,Ni(),_u=o}else e.current=n;if(Lu)Lu=!1,Uu=e,$u=t;else for(Du=i;null!==Du;)t=Du.nextEffect,Du.nextEffect=null,Du=t;if(0===(t=e.firstPendingTime)&&(zu=null),1073741823===t?e===Bu?Wu++:(Wu=0,Bu=e):Wu=0,"function"==typeof xl&&xl(n.stateNode,r),Xu(e),Iu)throw Iu=!1,e=Mu,Mu=null,e;return 0!=(8&_u)||Hi(),null}function hl(){for(;null!==Du;){var e=Du.effectTag;0!=(256&e)&&nu(Du.alternate,Du),0==(512&e)||Lu||(Lu=!0,Wi(97,(function(){return vl(),null}))),Du=Du.nextEffect}}function vl(){if(90!==$u){var e=97<$u?97:$u;return $u=90,Vi(e,ml)}}function ml(){if(null===Uu)return!1;var e=Uu;if(Uu=null,0!=(48&_u))throw Error(a(331));var t=_u;for(_u|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),iu(5,n)}}catch(t){if(null===e)throw Error(a(330));bl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return _u=t,Hi(),!0}function yl(e,t,n){lo(e,t=hu(e,t=Za(n,t),1073741823)),null!==(e=Yu(e,1073741823))&&Xu(e)}function bl(e,t){if(3===e.tag)yl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zu||!zu.has(r))){lo(n,e=vu(n,e=Za(t,e),1073741823)),null!==(n=Yu(n,1073741823))&&Xu(n);break}}n=n.return}}function gl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),ku===e&&Tu===n?Ou===Eu||Ou===xu&&1073741823===Pu&&Li()-Nu<500?nl(e,Tu):Ru=!0:Al(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Xu(e)))}function wl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Qu(t=qu(),e,null)),null!==(e=Yu(e,t))&&Xu(e)}mu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)Fa=!0;else{if(r<n){switch(Fa=!1,t.tag){case 3:La(t),Ca();break;case 5:if(No(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&gi(t);break;case 4:Ao(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,ci(Yi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ba(e,t,n):(ci(Io,1&Io.current),null!==(t=Ka(e,t,n))?t.sibling:null);ci(Io,1&Io.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Qa(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),ci(Io,Io.current),!r)return null}return Ka(e,t,n)}Fa=!1}}else Fa=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=hi(t,fi.current),no(t,n),i=Ko(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vi(r)){var o=!0;gi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,oo(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&vo(t,r,u,e),i.updater=mo,t.stateNode=i,i._reactInternalFiber=t,wo(t,r,e,n),t=za(null,t,r,!0,o,n)}else t.tag=0,ja(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return Sl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(i),e=Ki(i,e),o){case 0:t=Ia(null,t,i,e,n);break e;case 1:t=Ma(null,t,i,e,n);break e;case 11:t=Aa(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Ki(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ia(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ma(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 3:if(La(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,ao(e,t),so(t,r,null,n),(r=t.memoizedState.element)===i)Ca(),t=Ka(e,t,n);else{if((i=t.stateNode.hydrate)&&(xa=xn(t.stateNode.containerInfo.firstChild),wa=t,i=Ea=!0),i)for(n=To(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else ja(e,t,r,n),Ca();t=t.child}return t;case 5:return No(t),null===e&&Sa(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,bn(r,i)?u=null:null!==o&&bn(r,o)&&(t.effectTag|=16),Da(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(ja(e,t,u,n),t=t.child),t;case 6:return null===e&&Sa(t),null;case 13:return Ba(e,t,n);case 4:return Ao(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=So(t,null,r,n):ja(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Aa(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 7:return ja(e,t,t.pendingProps,n),t.child;case 8:case 12:return ja(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,u=t.memoizedProps,o=i.value;var l=t.type._context;if(ci(Yi,l._currentValue),l._currentValue=o,null!==u)if(l=u.value,0===(o=Mr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!di.current){t=Ka(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===l.tag&&((s=uo(n,null)).tag=2,lo(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),to(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}ja(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,ja(e,t,r,n),t.child;case 14:return o=Ki(i=t.type,t.pendingProps),Ra(e,t,i,o=Ki(i.type,o),r,n);case 15:return Na(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ki(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(r)?(e=!0,gi(t)):e=!1,no(t,n),bo(t,r,i),wo(t,r,i,n),za(null,t,r,!0,e,n);case 19:return Qa(e,t,n)}throw Error(a(156,t.tag))};var xl=null,El=null;function _l(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function kl(e,t,n,r){return new _l(e,t,n,r)}function Sl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tl(e,t){var n=e.alternate;return null===n?((n=kl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ol(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)Sl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Cl(n.children,i,o,t);case ue:u=8,i|=7;break;case re:u=8,i|=1;break;case ie:return(e=kl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case ce:return(e=kl(13,n,t,i)).type=ce,e.elementType=ce,e.expirationTime=o,e;case se:return(e=kl(19,n,t,i)).elementType=se,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case de:u=16,r=null;break e;case pe:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=kl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Cl(e,t,n,r){return(e=kl(7,e,r,t)).expirationTime=n,e}function Pl(e,t,n){return(e=kl(6,e,null,t)).expirationTime=n,e}function Fl(e,t,n){return(t=kl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function jl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Al(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Rl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Nl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Dl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Il(e,t,n,r){var i=t.current,o=qu(),u=po.suspense;o=Qu(o,i,u);e:if(n){t:{if(Je(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(vi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vi(c)){n=bi(n,c,l);break e}}n=l}else n=si;return null===t.context?t.context=n:t.pendingContext=n,(t=uo(o,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),lo(i,t),Ku(i,o),o}function Ml(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Ll(e,t){zl(e,t),(e=e.alternate)&&zl(e,t)}function Ul(e,t,n){var r=new jl(e,t,n=null!=n&&!0===n.hydrate),i=kl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,oo(i),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Ze(t);Tt.forEach((function(e){ht(e,t,n)})),Ot.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function $l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Vl(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var u=i;i=function(){var e=Ml(a);u.call(e)}}Il(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ul(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Ml(a);l.call(e)}}tl((function(){Il(t,a,e,i)}))}return Ml(a)}function Wl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$l(t))throw Error(a(200));return Wl(e,t,null,n)}Ul.prototype.render=function(e){Il(e,this._internalRoot,null,null)},Ul.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Il(null,e,null,(function(){t[Tn]=null}))},vt=function(e){if(13===e.tag){var t=Qi(qu(),150,100);Ku(e,t),Ll(e,t)}},mt=function(e){13===e.tag&&(Ku(e,3),Ll(e,3))},yt=function(e){if(13===e.tag){var t=qu();Ku(e,t=Qu(t,e,null)),Ll(e,t)}},C=function(e,t,n){switch(t){case"input":if(Se(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=Fn(r);if(!i)throw Error(a(90));xe(r),Se(r,i)}}}break;case"textarea":Ae(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},N=el,D=function(e,t,n,r,i){var o=_u;_u|=4;try{return Vi(98,e.bind(null,t,n,r,i))}finally{0===(_u=o)&&Hi()}},I=function(){0==(49&_u)&&(function(){if(null!==Vu){var e=Vu;Vu=null,e.forEach((function(e,t){Dl(t,e),Xu(t)})),Hi()}}(),vl())},M=function(e,t){var n=_u;_u|=2;try{return e(t)}finally{0===(_u=n)&&Hi()}};var Hl,ql,Ql={Events:[Cn,Pn,Fn,T,_,Mn,function(e){it(e,In)},A,R,Xt,ut,vl,{current:!1}]};ql=(Hl={findFiberByHostInstance:On,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);xl=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},El=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Hl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:G.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return ql?ql(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ql,t.createPortal=Bl,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&_u))throw Error(a(187));var n=_u;_u|=1;try{return Vi(99,e.bind(null,t))}finally{_u=n,Hi()}},t.hydrate=function(e,t,n){if(!$l(t))throw Error(a(200));return Vl(null,e,t,!0,n)},t.render=function(e,t,n){if(!$l(t))throw Error(a(200));return Vl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!$l(e))throw Error(a(40));return!!e._reactRootContainer&&(tl((function(){Vl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return Bl(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!$l(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Vl(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(71)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var b=!1,g=null,w=-1,x=5,E=0;a=function(){return t.unstable_now()>=E},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,k=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();E=e+x;try{g(!0,e)?k.postMessage(null):(b=!1,g=null)}catch(e){throw k.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,k.postMessage(null))},i=function(e,n){w=h((function(){e(t.unstable_now())}),n)},o=function(){v(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<C(i,t)))break e;e[r]=t,e[n]=i,n=r}}function T(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>C(a,n))void 0!==l&&0>C(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],F=[],j=1,A=null,R=3,N=!1,D=!1,I=!1;function M(e){for(var t=T(F);null!==t;){if(null===t.callback)O(F);else{if(!(t.startTime<=e))break;O(F),t.sortIndex=t.expirationTime,S(P,t)}t=T(F)}}function z(e){if(I=!1,M(e),!D)if(null!==T(P))D=!0,r(L);else{var t=T(F);null!==t&&i(z,t.startTime-e)}}function L(e,n){D=!1,I&&(I=!1,o()),N=!0;var r=R;try{for(M(n),A=T(P);null!==A&&(!(A.expirationTime>n)||e&&!a());){var u=A.callback;if(null!==u){A.callback=null,R=A.priorityLevel;var l=u(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?A.callback=l:A===T(P)&&O(P),M(n)}else O(P);A=T(P)}if(null!==A)var c=!0;else{var s=T(F);null!==s&&i(z,s.startTime-n),c=!1}return c}finally{A=null,R=r,N=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||N||(D=!0,r(L))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return T(P)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=$,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;return e={id:j++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,S(F,e),null===T(P)&&e===T(F)&&(I?o():I=!0,i(z,l-u))):(e.sortIndex=a,S(P,e),D||N||(D=!0,r(L))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();M(e);var n=T(P);return n!==A&&null!==A&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<A.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},function(e,t,n){"use strict";var r=n(73);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,x=r?Symbol.for("react.scope"):60119;function E(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case m:case c:return e;default:return t}}case o:return t}}}function _(e){return E(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return _(e)||E(e)===f},t.isConcurrentMode=_,t.isContextConsumer=function(e){return E(e)===s},t.isContextProvider=function(e){return E(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return E(e)===p},t.isFragment=function(e){return E(e)===a},t.isLazy=function(e){return E(e)===y},t.isMemo=function(e){return E(e)===m},t.isPortal=function(e){return E(e)===o},t.isProfiler=function(e){return E(e)===l},t.isStrictMode=function(e){return E(e)===u},t.isSuspense=function(e){return E(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===g||e.$$typeof===w||e.$$typeof===x||e.$$typeof===b)},t.typeOf=E},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){"use strict";var r=n(22),i=n(79),o=n(34),a=n(54),u=n(89),l=a.set,c=a.getterFor("Array Iterator");e.exports=u(Array,"Array",(function(e,t){l(this,{type:"Array Iterator",target:r(e),index:0,kind:t})}),(function(){var e=c(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(e,t,n){var r=n(12),i=n(78),o="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?o.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(15),i=n(50),o=n(17),a=r("unscopables"),u=Array.prototype;null==u[a]&&o.f(u,a,{configurable:!0,value:i(null)}),e.exports=function(e){u[a][e]=!0}},function(e,t,n){var r=n(49);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r=n(16),i=n(17),o=n(19),a=n(82);e.exports=r?Object.defineProperties:function(e,t){o(e);for(var n,r=a(t),u=r.length,l=0;u>l;)i.f(e,n=r[l++],t[n]);return e}},function(e,t,n){var r=n(51),i=n(32);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(22),i=n(84),o=n(85),a=function(e){return function(t,n,a){var u,l=r(t),c=i(l.length),s=o(a,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t,n){var r=n(52),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){var r=n(52),i=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?i(n+t,0):o(n,t)}},function(e,t,n){var r=n(53);e.exports=r("document","documentElement")},function(e,t,n){var r=n(4);e.exports=r},function(e,t,n){var r=n(4),i=n(55),o=r.WeakMap;e.exports="function"==typeof o&&/native code/.test(i(o))},function(e,t,n){"use strict";var r=n(90),i=n(97),o=n(59),a=n(100),u=n(60),l=n(10),c=n(57),s=n(15),f=n(28),d=n(34),p=n(58),h=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,m=s("iterator"),y=function(){return this};e.exports=function(e,t,n,s,p,b,g){i(n,t,s);var w,x,E,_=function(e){if(e===p&&C)return C;if(!v&&e in T)return T[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},k=t+" Iterator",S=!1,T=e.prototype,O=T[m]||T["@@iterator"]||p&&T[p],C=!v&&O||_(p),P="Array"==t&&T.entries||O;if(P&&(w=o(P.call(new e)),h!==Object.prototype&&w.next&&(f||o(w)===h||(a?a(w,h):"function"!=typeof w[m]&&l(w,m,y)),u(w,k,!0,!0),f&&(d[k]=y))),"values"==p&&O&&"values"!==O.name&&(S=!0,C=function(){return O.call(this)}),f&&!g||T[m]===C||l(T,m,C),d[t]=C,p)if(x={values:_("values"),keys:b?C:_("keys"),entries:_("entries")},g)for(E in x)(v||S||!(E in T))&&c(T,E,x[E]);else r({target:t,proto:!0,forced:v||S},x);return x}},function(e,t,n){var r=n(4),i=n(56).f,o=n(10),a=n(57),u=n(29),l=n(92),c=n(96);e.exports=function(e,t){var n,s,f,d,p,h=e.target,v=e.global,m=e.stat;if(n=v?r:m?r[h]||u(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=i(n,s))&&p.value:n[s],!c(v?s:h+(m?".":"#")+s,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&o(d,"sham",!0),a(n,s,d,e)}}},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);t.f=o?function(e){var t=i(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(5),i=n(93),o=n(56),a=n(17);e.exports=function(e,t){for(var n=i(t),u=a.f,l=o.f,c=0;c<n.length;c++){var s=n[c];r(e,s)||u(e,s,l(t,s))}}},function(e,t,n){var r=n(53),i=n(94),o=n(95),a=n(19);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(a(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(51),i=n(32).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(12),i=/#|\.prototype\./,o=function(e,t){var n=u[a(e)];return n==c||n!=l&&("function"==typeof t?r(t):!!t)},a=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},u=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},function(e,t,n){"use strict";var r=n(58).IteratorPrototype,i=n(50),o=n(30),a=n(60),u=n(34),l=function(){return this};e.exports=function(e,t,n){var c=t+" Iterator";return e.prototype=i(r,{next:o(1,n)}),a(e,c,!1,!0),u[c]=l,e}},function(e,t,n){var r=n(42);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(12);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,n){var r=n(19),i=n(101);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,o){return r(n),i(o),t?e.call(n,o):n.__proto__=o,n}}():void 0)},function(e,t,n){var r=n(18);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,t,n){},function(e,t,n){},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){},function(e,t,n){e.exports={spinner:"_30ANbCjpV2zhLyM_E5J342"}},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,u;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var b=!1,g=null,w=-1,x=5,E=0;a=function(){return t.unstable_now()>=E},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):x=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,k=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();E=e+x;try{g(!0,e)?k.postMessage(null):(b=!1,g=null)}catch(e){throw k.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,k.postMessage(null))},i=function(e,n){w=h((function(){e(t.unstable_now())}),n)},o=function(){v(w),w=-1}}function S(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),i=e[r];if(!(void 0!==i&&0<C(i,t)))break e;e[r]=t,e[n]=i,n=r}}function T(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>C(a,n))void 0!==l&&0>C(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],F=[],j=1,A=null,R=3,N=!1,D=!1,I=!1;function M(e){for(var t=T(F);null!==t;){if(null===t.callback)O(F);else{if(!(t.startTime<=e))break;O(F),t.sortIndex=t.expirationTime,S(P,t)}t=T(F)}}function z(e){if(I=!1,M(e),!D)if(null!==T(P))D=!0,r(L);else{var t=T(F);null!==t&&i(z,t.startTime-e)}}function L(e,n){D=!1,I&&(I=!1,o()),N=!0;var r=R;try{for(M(n),A=T(P);null!==A&&(!(A.expirationTime>n)||e&&!a());){var u=A.callback;if(null!==u){A.callback=null,R=A.priorityLevel;var l=u(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?A.callback=l:A===T(P)&&O(P),M(n)}else O(P);A=T(P)}if(null!==A)var c=!0;else{var s=T(F);null!==s&&i(z,s.startTime-n),c=!1}return c}finally{A=null,R=r,N=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;return e={id:j++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,S(F,e),null===T(P)&&e===T(F)&&(I?o():I=!0,i(z,l-u))):(e.sortIndex=a,S(P,e),D||N||(D=!0,r(L))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();M(e);var n=T(P);return n!==A&&null!==A&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<A.expirationTime||a()},t.unstable_requestPaint=$,t.unstable_continueExecution=function(){D||N||(D=!0,r(L))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return T(P)},t.unstable_Profiling=null},function(e,t,n){},function(e,t,n){},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(23),a=n.n(o),u=(n(13),i.a.createContext(null));var l=function(e){e()},c={notify:function(){}};function s(){var e=l,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}var f=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=s())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var d=function(e){var t=e.store,n=e.context,o=e.children,a=Object(r.useMemo)((function(){var e=new f(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,l]);var c=n||u;return i.a.createElement(c.Provider,{value:a},o)};function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function h(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var v=n(9),m=n.n(v),y=(n(24),"undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect);var b=n(35),g=function(){return Math.random().toString(36).substring(7).split("").join(".")},w={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function x(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function E(){return Object(r.useContext)(u)}function _(e){void 0===e&&(e=u);var t=e===u?E:function(){return Object(r.useContext)(e)};return function(){return t().store}}var k=_();function S(e){void 0===e&&(e=u);var t=e===u?k:_(e);return function(){return t().dispatch}}var T=S(),O=function(e,t){return e===t};function C(e){void 0===e&&(e=u);var t=e===u?E:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=O);var i=t();return function(e,t,n,i){var o,a=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new f(n,i)}),[n,i]),l=Object(r.useRef)(),c=Object(r.useRef)(),s=Object(r.useRef)();try{o=e!==c.current||l.current?e(n.getState()):s.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return y((function(){c.current=e,s.current=o,l.current=void 0})),y((function(){function e(){try{var e=c.current(n.getState());if(t(e,s.current))return;s.current=e}catch(e){l.current=e}a({})}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),o}(e,n,i.store,i.subscription)}}var P,F=C();P=o.unstable_batchedUpdates,l=P;n(27);const j={user:{name:null,email:null},notes:[]};var A=function e(t,n,r){var i;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var o=t,a=n,u=[],l=u,c=!1;function s(){l===u&&(l=u.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,s();var n=l.indexOf(e);l.splice(n,1),u=null}}}function p(e){if(!x(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,a=o(a,e)}finally{c=!1}for(var t=u=l,n=0;n<t.length;n++){(0,t[n])()}return e}function h(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,p({type:w.REPLACE})}function v(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[b.a]=function(){return this},e}return p({type:w.INIT}),(i={dispatch:p,subscribe:d,getState:f,replaceReducer:h})[b.a]=v,i}((function(e=j,t){switch(t.type){case"SET_USER":return function(e,t){const n={...e},r={...n.user};return r.name=t.name,r.email=t.email,n.user=r,n}(e,t);case"ADD_NOTE":return function(e,t){const n={...e},r=[...n.notes],i={text:t.text,important:!1};return r.unshift(i),n.notes=r,n}(e,t);default:return e}})),R=(n(102),n(103),n(62)),N=n.n(R),D=n(3);function I(e){return"/"===e.charAt(0)}function M(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}var z=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],i=t&&t.split("/")||[],o=e&&I(e),a=t&&I(t),u=o||a;if(e&&I(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var l=i[i.length-1];n="."===l||".."===l||""===l}else n=!1;for(var c=0,s=i.length;s>=0;s--){var f=i[s];"."===f?M(i,s):".."===f?(M(i,s),c++):c&&(M(i,s),c--)}if(!u)for(;c--;c)i.unshift("..");!u||""===i[0]||i[0]&&I(i[0])||i.unshift("");var d=i.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};function L(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var U=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=L(t),i=L(n);return r!==t||i!==n?e(r,i):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var $=function(e,t){if(!e)throw new Error("Invariant failed")};function V(e){return"/"===e.charAt(0)?e:"/"+e}function W(e){return"/"===e.charAt(0)?e.substr(1):e}function B(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function H(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function q(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function Q(e,t,n,r){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=p({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),r?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=z(i.pathname,r.pathname)):i.pathname=r.pathname:i.pathname||(i.pathname="/"),i}function K(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,i):i(!0):i(!1!==o)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var Y=!("undefined"==typeof window||!window.document||!window.document.createElement);function G(e,t){t(window.confirm(e))}function X(){try{return window.history.state||{}}catch(e){return{}}}function Z(e){void 0===e&&(e={}),Y||$(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,a=o.forceRefresh,u=void 0!==a&&a,l=o.getUserConfirmation,c=void 0===l?G:l,s=o.keyLength,f=void 0===s?6:s,d=e.basename?H(V(e.basename)):"";function h(e){var t=e||{},n=t.key,r=t.state,i=window.location,o=i.pathname+i.search+i.hash;return d&&(o=B(o,d)),Q(o,r,n)}function v(){return Math.random().toString(36).substr(2,f)}var m=K();function y(e){p(P,e),P.length=n.length,m.notifyListeners(P.location,P.action)}function b(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||x(h(e.state))}function g(){x(h(X()))}var w=!1;function x(e){if(w)w=!1,y();else{m.confirmTransitionTo(e,"POP",c,(function(t){t?y({action:"POP",location:e}):function(e){var t=P.location,n=_.indexOf(t.key);-1===n&&(n=0);var r=_.indexOf(e.key);-1===r&&(r=0);var i=n-r;i&&(w=!0,S(i))}(e)}))}}var E=h(X()),_=[E.key];function k(e){return d+q(e)}function S(e){n.go(e)}var T=0;function O(e){1===(T+=e)&&1===e?(window.addEventListener("popstate",b),i&&window.addEventListener("hashchange",g)):0===T&&(window.removeEventListener("popstate",b),i&&window.removeEventListener("hashchange",g))}var C=!1;var P={length:n.length,action:"POP",location:E,createHref:k,push:function(e,t){var i=Q(e,t,v(),P.location);m.confirmTransitionTo(i,"PUSH",c,(function(e){if(e){var t=k(i),o=i.key,a=i.state;if(r)if(n.pushState({key:o,state:a},null,t),u)window.location.href=t;else{var l=_.indexOf(P.location.key),c=_.slice(0,l+1);c.push(i.key),_=c,y({action:"PUSH",location:i})}else window.location.href=t}}))},replace:function(e,t){var i=Q(e,t,v(),P.location);m.confirmTransitionTo(i,"REPLACE",c,(function(e){if(e){var t=k(i),o=i.key,a=i.state;if(r)if(n.replaceState({key:o,state:a},null,t),u)window.location.replace(t);else{var l=_.indexOf(P.location.key);-1!==l&&(_[l]=i.key),y({action:"REPLACE",location:i})}else window.location.replace(t)}}))},go:S,goBack:function(){S(-1)},goForward:function(){S(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return C||(O(1),C=!0),function(){return C&&(C=!1,O(-1)),t()}},listen:function(e){var t=m.appendListener(e);return O(1),function(){O(-1),t()}}};return P}var J={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+W(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:W,decodePath:V},slash:{encodePath:V,decodePath:V}};function ee(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function te(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function ne(e){window.location.replace(ee(window.location.href)+"#"+e)}function re(e){void 0===e&&(e={}),Y||$(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,i=void 0===r?G:r,o=n.hashType,a=void 0===o?"slash":o,u=e.basename?H(V(e.basename)):"",l=J[a],c=l.encodePath,s=l.decodePath;function f(){var e=s(te());return u&&(e=B(e,u)),Q(e)}var d=K();function h(e){p(T,e),T.length=t.length,d.notifyListeners(T.location,T.action)}var v=!1,m=null;function y(){var e,t,n=te(),r=c(n);if(n!==r)ne(r);else{var o=f(),a=T.location;if(!v&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===q(o))return;m=null,function(e){if(v)v=!1,h();else{d.confirmTransitionTo(e,"POP",i,(function(t){t?h({action:"POP",location:e}):function(e){var t=T.location,n=x.lastIndexOf(q(t));-1===n&&(n=0);var r=x.lastIndexOf(q(e));-1===r&&(r=0);var i=n-r;i&&(v=!0,E(i))}(e)}))}}(o)}}var b=te(),g=c(b);b!==g&&ne(g);var w=f(),x=[q(w)];function E(e){t.go(e)}var _=0;function k(e){1===(_+=e)&&1===e?window.addEventListener("hashchange",y):0===_&&window.removeEventListener("hashchange",y)}var S=!1;var T={length:t.length,action:"POP",location:w,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=ee(window.location.href)),n+"#"+c(u+q(e))},push:function(e,t){var n=Q(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"PUSH",i,(function(e){if(e){var t=q(n),r=c(u+t);if(te()!==r){m=t,function(e){window.location.hash=e}(r);var i=x.lastIndexOf(q(T.location)),o=x.slice(0,i+1);o.push(t),x=o,h({action:"PUSH",location:n})}else h()}}))},replace:function(e,t){var n=Q(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"REPLACE",i,(function(e){if(e){var t=q(n),r=c(u+t);te()!==r&&(m=t,ne(r));var i=x.indexOf(q(T.location));-1!==i&&(x[i]=t),h({action:"REPLACE",location:n})}}))},go:E,goBack:function(){E(-1)},goForward:function(){E(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return S||(k(1),S=!0),function(){return S&&(S=!1,k(-1)),t()}},listen:function(e){var t=d.appendListener(e);return k(1),function(){k(-1),t()}}};return T}function ie(e,t,n){return Math.min(Math.max(e,t),n)}function oe(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,i=void 0===r?["/"]:r,o=t.initialIndex,a=void 0===o?0:o,u=t.keyLength,l=void 0===u?6:u,c=K();function s(e){p(y,e),y.length=y.entries.length,c.notifyListeners(y.location,y.action)}function f(){return Math.random().toString(36).substr(2,l)}var d=ie(a,0,i.length-1),h=i.map((function(e){return Q(e,void 0,"string"==typeof e?f():e.key||f())})),v=q;function m(e){var t=ie(y.index+e,0,y.entries.length-1),r=y.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?s({action:"POP",location:r,index:t}):s()}))}var y={length:h.length,action:"POP",location:h[d],index:d,entries:h,createHref:v,push:function(e,t){var r=Q(e,t,f(),y.location);c.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=Q(e,t,f(),y.location);c.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(y.entries[y.index]=r,s({action:"REPLACE",location:r}))}))},go:m,goBack:function(){m(-1)},goForward:function(){m(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return y}var ae=n(36),ue=n(37),le=n.n(ue),ce=function(e){var t=Object(ae.a)();return t.displayName=e,t}("Router-History"),se=function(e){var t=Object(ae.a)();return t.displayName=e,t}("Router"),fe=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(D.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement(se.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(ce.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);i.a.Component;var de=function(e){function t(){return e.apply(this,arguments)||this}Object(D.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(i.a.Component);var pe={},he=0;function ve(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(pe[e])return pe[e];var t=le.a.compile(e);return he<1e4&&(pe[e]=t,he++),t}(e)(t,{pretty:!0})}function me(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return i.a.createElement(se.Consumer,null,(function(e){e||$(!1);var r=e.history,a=e.staticContext,u=o?r.push:r.replace,l=Q(t?"string"==typeof n?ve(n,t.params):p({},n,{pathname:ve(n.pathname,t.params)}):n);return a?(u(l),null):i.a.createElement(de,{onMount:function(){u(l)},onUpdate:function(e,t){var n,r,i=Q(t.to);n=i,r=p({},l,{key:i.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&U(n.state,r.state)||u(l)},to:n})}))}var ye={},be=0;function ge(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,o=void 0!==i&&i,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ye[n]||(ye[n]={});if(r[e])return r[e];var i=[],o={regexp:le()(e,i,t),keys:i};return be<1e4&&(r[e]=o,be++),o}(n,{end:o,strict:u,sensitive:c}),i=r.regexp,a=r.keys,l=i.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return o&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var we=function(e){function t(){return e.apply(this,arguments)||this}return Object(D.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(se.Consumer,null,(function(t){t||$(!1);var n=e.props.location||t.location,r=p({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?ge(n.pathname,e.props):t.match}),o=e.props,a=o.children,u=o.component,l=o.render;return Array.isArray(a)&&0===a.length&&(a=null),i.a.createElement(se.Provider,{value:r},r.match?a?"function"==typeof a?a(r):a:u?i.a.createElement(u,r):l?l(r):null:"function"==typeof a?a(r):null)}))},t}(i.a.Component);function xe(e){return"/"===e.charAt(0)?e:"/"+e}function Ee(e,t){if(!e)return t;var n=xe(e);return 0!==t.pathname.indexOf(n)?t:p({},t,{pathname:t.pathname.substr(n.length)})}function _e(e){return"string"==typeof e?e:q(e)}function ke(e){return function(){$(!1)}}function Se(){}i.a.Component;var Te=function(e){function t(){return e.apply(this,arguments)||this}return Object(D.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(se.Consumer,null,(function(t){t||$(!1);var n,r,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?ge(o.pathname,p({},e.props,{path:a})):t.match}})),r?i.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.a.Component);var Oe=i.a.useContext;function Ce(e){var t=Oe(se).location,n=Oe(se).match;return e?ge(t.pathname,e):n}var Pe=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).history=Z(t.props),t}return Object(D.a)(t,e),t.prototype.render=function(){return i.a.createElement(fe,{history:this.history,children:this.props.children})},t}(i.a.Component);i.a.Component;var Fe=function(e,t){return"function"==typeof e?e(t):e},je=function(e,t){return"string"==typeof e?Q(e,null,null,t):e},Ae=function(e){return e},Re=i.a.forwardRef;void 0===Re&&(Re=Ae);var Ne=Re((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,a=h(e,["innerRef","navigate","onClick"]),u=a.target,l=p({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=Ae!==Re&&t||n,i.a.createElement("a",l)}));var De=Re((function(e,t){var n=e.component,r=void 0===n?Ne:n,o=e.replace,a=e.to,u=e.innerRef,l=h(e,["component","replace","to","innerRef"]);return i.a.createElement(se.Consumer,null,(function(e){e||$(!1);var n=e.history,c=je(Fe(a,e.location),e.location),s=c?n.createHref(c):"",f=p({},l,{href:s,navigate:function(){var t=Fe(a,e.location);(o?n.replace:n.push)(t)}});return Ae!==Re?f.ref=t||u:f.innerRef=u,i.a.createElement(r,f)}))})),Ie=function(e){return e},Me=i.a.forwardRef;void 0===Me&&(Me=Ie);Me((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,a=void 0===o?"active":o,u=e.activeStyle,l=e.className,c=e.exact,s=e.isActive,f=e.location,d=e.sensitive,v=e.strict,m=e.style,y=e.to,b=e.innerRef,g=h(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return i.a.createElement(se.Consumer,null,(function(e){e||$(!1);var n=f||e.location,o=je(Fe(y,n),n),h=o.pathname,w=h&&h.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),x=w?ge(n.pathname,{path:w,exact:c,sensitive:d,strict:v}):null,E=!!(s?s(x,n):x),_=E?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(l,a):l,k=E?p({},m,{},u):m,S=p({"aria-current":E&&r||null,className:_,style:k,to:o},g);return Ie!==Me?S.ref=t||b:S.innerRef=b,i.a.createElement(De,S)}))}));var ze=function(){const{name:e}=F(e=>e.user);return e?i.a.createElement(me,{to:"/notes"}):i.a.createElement(me,{to:"/enter"})};n(105),n(106);var Le=function(e){const{text:t="Text didn't pass",i:n,counter:r,disabled:o=!1}=e,a={};a.type=e.type?e.type:"button",e.href&&delete a.type;let u="btn";e.mode1&&(u+=" btn--mode-1"),e.mode2&&(u+=" btn--mode-2"),a.className=u,e.href&&(a.to=e.href),o&&(a.disabled=!0),n&&(a.key=n);const l=[function(e){if(!e)return null;if("spinner"===e)return i.a.createElement("div",{className:"btnSpinnerWrapper",key:"h"},i.a.createElement("div",{className:"btnSpinner"},i.a.createElement("div",null)));let t="btn__sign ";switch(e){case"person":t+="btn__sign--person";break;case"exit":t+="btn__sign--exit";break;case"check-all":t+="btn__sign--check-all";break;case"sun":t+="btn__sign--sun";break;case"close":t+="btn__sign--close"}return i.a.createElement("span",{className:t,key:"a"})}(e.sign),t,i.a.createElement("span",{className:"btn__counter",key:"b"},r)];return"a"===e.tag?i.a.createElement(De,a,l):i.a.createElement("button",a,l)},Ue=n(63),$e=n.n(Ue);function Ve({label:e,to:t,i:n}){return Ce({path:t})?i.a.createElement(Le,{tag:"a",href:t,text:e,i:n}):i.a.createElement(Le,{tag:"a",href:t,text:e,mode1:!0,i:n})}var We=function(){const e=i.a.createElement(Ve,{to:"/reg",label:"Sign up",i:"1"}),t=i.a.createElement(Ve,{to:"/enter",label:"Log in",i:"2"});return i.a.createElement("nav",{className:$e.a.wrapper},t,e)},Be=n(26),He=n.n(Be);var qe=function({children:e}){return i.a.createElement("section",{className:He.a.wrapper},i.a.createElement("div",{className:He.a.leftPart}),i.a.createElement("div",{className:He.a.rightPart},e))};var Qe=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(We,null),i.a.createElement(qe,null,"Reg"))},Ke=n(7),Ye=n.n(Ke),Ge=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===Xe}(e)}(e)};var Xe="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function Ze(e,t){return!1!==t.clone&&t.isMergeableObject(e)?et((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function Je(e,t,n){return e.concat(t).map((function(e){return Ze(e,n)}))}function et(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||Je,n.isMergeableObject=n.isMergeableObject||Ge;var r=Array.isArray(t);return r===Array.isArray(e)?r?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach((function(t){r[t]=Ze(e[t],n)})),Object.keys(t).forEach((function(i){n.isMergeableObject(t[i])&&e[i]?r[i]=et(e[i],t[i],n):r[i]=Ze(t[i],n)})),r}(e,t,n):Ze(t,n)}et.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return et(e,n,t)}),{})};var tt=et,nt=n(1),rt=nt.a.Symbol,it=Object.prototype,ot=it.hasOwnProperty,at=it.toString,ut=rt?rt.toStringTag:void 0;var lt=function(e){var t=ot.call(e,ut),n=e[ut];try{e[ut]=void 0;var r=!0}catch(e){}var i=at.call(e);return r&&(t?e[ut]=n:delete e[ut]),i},ct=Object.prototype.toString;var st=function(e){return ct.call(e)},ft=rt?rt.toStringTag:void 0;var dt=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":ft&&ft in Object(e)?lt(e):st(e)};var pt=function(e,t){return function(n){return e(t(n))}},ht=pt(Object.getPrototypeOf,Object);var vt=function(e){return null!=e&&"object"==typeof e},mt=Function.prototype,yt=Object.prototype,bt=mt.toString,gt=yt.hasOwnProperty,wt=bt.call(Object);var xt=function(e){if(!vt(e)||"[object Object]"!=dt(e))return!1;var t=ht(e);if(null===t)return!0;var n=gt.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&bt.call(n)==wt};var Et=function(){this.__data__=[],this.size=0};var _t=function(e,t){return e===t||e!=e&&t!=t};var kt=function(e,t){for(var n=e.length;n--;)if(_t(e[n][0],t))return n;return-1},St=Array.prototype.splice;var Tt=function(e){var t=this.__data__,n=kt(t,e);return!(n<0)&&(n==t.length-1?t.pop():St.call(t,n,1),--this.size,!0)};var Ot=function(e){var t=this.__data__,n=kt(t,e);return n<0?void 0:t[n][1]};var Ct=function(e){return kt(this.__data__,e)>-1};var Pt=function(e,t){var n=this.__data__,r=kt(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this};function Ft(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Ft.prototype.clear=Et,Ft.prototype.delete=Tt,Ft.prototype.get=Ot,Ft.prototype.has=Ct,Ft.prototype.set=Pt;var jt=Ft;var At=function(){this.__data__=new jt,this.size=0};var Rt=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n};var Nt=function(e){return this.__data__.get(e)};var Dt=function(e){return this.__data__.has(e)};var It=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)};var Mt,zt=function(e){if(!It(e))return!1;var t=dt(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t},Lt=nt.a["__core-js_shared__"],Ut=(Mt=/[^.]+$/.exec(Lt&&Lt.keys&&Lt.keys.IE_PROTO||""))?"Symbol(src)_1."+Mt:"";var $t=function(e){return!!Ut&&Ut in e},Vt=Function.prototype.toString;var Wt=function(e){if(null!=e){try{return Vt.call(e)}catch(e){}try{return e+""}catch(e){}}return""},Bt=/^\[object .+?Constructor\]$/,Ht=Function.prototype,qt=Object.prototype,Qt=Ht.toString,Kt=qt.hasOwnProperty,Yt=RegExp("^"+Qt.call(Kt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var Gt=function(e){return!(!It(e)||$t(e))&&(zt(e)?Yt:Bt).test(Wt(e))};var Xt=function(e,t){return null==e?void 0:e[t]};var Zt=function(e,t){var n=Xt(e,t);return Gt(n)?n:void 0},Jt=Zt(nt.a,"Map"),en=Zt(Object,"create");var tn=function(){this.__data__=en?en(null):{},this.size=0};var nn=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},rn=Object.prototype.hasOwnProperty;var on=function(e){var t=this.__data__;if(en){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return rn.call(t,e)?t[e]:void 0},an=Object.prototype.hasOwnProperty;var un=function(e){var t=this.__data__;return en?void 0!==t[e]:an.call(t,e)};var ln=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=en&&void 0===t?"__lodash_hash_undefined__":t,this};function cn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}cn.prototype.clear=tn,cn.prototype.delete=nn,cn.prototype.get=on,cn.prototype.has=un,cn.prototype.set=ln;var sn=cn;var fn=function(){this.size=0,this.__data__={hash:new sn,map:new(Jt||jt),string:new sn}};var dn=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e};var pn=function(e,t){var n=e.__data__;return dn(t)?n["string"==typeof t?"string":"hash"]:n.map};var hn=function(e){var t=pn(this,e).delete(e);return this.size-=t?1:0,t};var vn=function(e){return pn(this,e).get(e)};var mn=function(e){return pn(this,e).has(e)};var yn=function(e,t){var n=pn(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};function bn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}bn.prototype.clear=fn,bn.prototype.delete=hn,bn.prototype.get=vn,bn.prototype.has=mn,bn.prototype.set=yn;var gn=bn;var wn=function(e,t){var n=this.__data__;if(n instanceof jt){var r=n.__data__;if(!Jt||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new gn(r)}return n.set(e,t),this.size=n.size,this};function xn(e){var t=this.__data__=new jt(e);this.size=t.size}xn.prototype.clear=At,xn.prototype.delete=Rt,xn.prototype.get=Nt,xn.prototype.has=Dt,xn.prototype.set=wn;var En=xn;var _n=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e},kn=function(){try{var e=Zt(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();var Sn=function(e,t,n){"__proto__"==t&&kn?kn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},Tn=Object.prototype.hasOwnProperty;var On=function(e,t,n){var r=e[t];Tn.call(e,t)&&_t(r,n)&&(void 0!==n||t in e)||Sn(e,t,n)};var Cn=function(e,t,n,r){var i=!n;n||(n={});for(var o=-1,a=t.length;++o<a;){var u=t[o],l=r?r(n[u],e[u],u,n,e):void 0;void 0===l&&(l=e[u]),i?Sn(n,u,l):On(n,u,l)}return n};var Pn=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r};var Fn=function(e){return vt(e)&&"[object Arguments]"==dt(e)},jn=Object.prototype,An=jn.hasOwnProperty,Rn=jn.propertyIsEnumerable,Nn=Fn(function(){return arguments}())?Fn:function(e){return vt(e)&&An.call(e,"callee")&&!Rn.call(e,"callee")},Dn=Array.isArray,In=n(11),Mn=/^(?:0|[1-9]\d*)$/;var zn=function(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&Mn.test(e))&&e>-1&&e%1==0&&e<t};var Ln=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991},Un={};Un["[object Float32Array]"]=Un["[object Float64Array]"]=Un["[object Int8Array]"]=Un["[object Int16Array]"]=Un["[object Int32Array]"]=Un["[object Uint8Array]"]=Un["[object Uint8ClampedArray]"]=Un["[object Uint16Array]"]=Un["[object Uint32Array]"]=!0,Un["[object Arguments]"]=Un["[object Array]"]=Un["[object ArrayBuffer]"]=Un["[object Boolean]"]=Un["[object DataView]"]=Un["[object Date]"]=Un["[object Error]"]=Un["[object Function]"]=Un["[object Map]"]=Un["[object Number]"]=Un["[object Object]"]=Un["[object RegExp]"]=Un["[object Set]"]=Un["[object String]"]=Un["[object WeakMap]"]=!1;var $n=function(e){return vt(e)&&Ln(e.length)&&!!Un[dt(e)]};var Vn=function(e){return function(t){return e(t)}},Wn=n(6),Bn=Wn.a&&Wn.a.isTypedArray,Hn=Bn?Vn(Bn):$n,qn=Object.prototype.hasOwnProperty;var Qn=function(e,t){var n=Dn(e),r=!n&&Nn(e),i=!n&&!r&&Object(In.a)(e),o=!n&&!r&&!i&&Hn(e),a=n||r||i||o,u=a?Pn(e.length,String):[],l=u.length;for(var c in e)!t&&!qn.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||zn(c,l))||u.push(c);return u},Kn=Object.prototype;var Yn=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Kn)},Gn=pt(Object.keys,Object),Xn=Object.prototype.hasOwnProperty;var Zn=function(e){if(!Yn(e))return Gn(e);var t=[];for(var n in Object(e))Xn.call(e,n)&&"constructor"!=n&&t.push(n);return t};var Jn=function(e){return null!=e&&Ln(e.length)&&!zt(e)};var er=function(e){return Jn(e)?Qn(e):Zn(e)};var tr=function(e,t){return e&&Cn(t,er(t),e)};var nr=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t},rr=Object.prototype.hasOwnProperty;var ir=function(e){if(!It(e))return nr(e);var t=Yn(e),n=[];for(var r in e)("constructor"!=r||!t&&rr.call(e,r))&&n.push(r);return n};var or=function(e){return Jn(e)?Qn(e,!0):ir(e)};var ar=function(e,t){return e&&Cn(t,or(t),e)},ur=n(65);var lr=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t};var cr=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o};var sr=function(){return[]},fr=Object.prototype.propertyIsEnumerable,dr=Object.getOwnPropertySymbols,pr=dr?function(e){return null==e?[]:(e=Object(e),cr(dr(e),(function(t){return fr.call(e,t)})))}:sr;var hr=function(e,t){return Cn(e,pr(e),t)};var vr=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e},mr=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)vr(t,pr(e)),e=ht(e);return t}:sr;var yr=function(e,t){return Cn(e,mr(e),t)};var br=function(e,t,n){var r=t(e);return Dn(e)?r:vr(r,n(e))};var gr=function(e){return br(e,er,pr)};var wr=function(e){return br(e,or,mr)},xr=Zt(nt.a,"DataView"),Er=Zt(nt.a,"Promise"),_r=Zt(nt.a,"Set"),kr=Zt(nt.a,"WeakMap"),Sr=Wt(xr),Tr=Wt(Jt),Or=Wt(Er),Cr=Wt(_r),Pr=Wt(kr),Fr=dt;(xr&&"[object DataView]"!=Fr(new xr(new ArrayBuffer(1)))||Jt&&"[object Map]"!=Fr(new Jt)||Er&&"[object Promise]"!=Fr(Er.resolve())||_r&&"[object Set]"!=Fr(new _r)||kr&&"[object WeakMap]"!=Fr(new kr))&&(Fr=function(e){var t=dt(e),n="[object Object]"==t?e.constructor:void 0,r=n?Wt(n):"";if(r)switch(r){case Sr:return"[object DataView]";case Tr:return"[object Map]";case Or:return"[object Promise]";case Cr:return"[object Set]";case Pr:return"[object WeakMap]"}return t});var jr=Fr,Ar=Object.prototype.hasOwnProperty;var Rr=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Ar.call(e,"index")&&(n.index=e.index,n.input=e.input),n},Nr=nt.a.Uint8Array;var Dr=function(e){var t=new e.constructor(e.byteLength);return new Nr(t).set(new Nr(e)),t};var Ir=function(e,t){var n=t?Dr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)},Mr=/\w*$/;var zr=function(e){var t=new e.constructor(e.source,Mr.exec(e));return t.lastIndex=e.lastIndex,t},Lr=rt?rt.prototype:void 0,Ur=Lr?Lr.valueOf:void 0;var $r=function(e){return Ur?Object(Ur.call(e)):{}};var Vr=function(e,t){var n=t?Dr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)};var Wr=function(e,t,n){var r=e.constructor;switch(t){case"[object ArrayBuffer]":return Dr(e);case"[object Boolean]":case"[object Date]":return new r(+e);case"[object DataView]":return Ir(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return Vr(e,n);case"[object Map]":return new r;case"[object Number]":case"[object String]":return new r(e);case"[object RegExp]":return zr(e);case"[object Set]":return new r;case"[object Symbol]":return $r(e)}},Br=Object.create,Hr=function(){function e(){}return function(t){if(!It(t))return{};if(Br)return Br(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();var qr=function(e){return"function"!=typeof e.constructor||Yn(e)?{}:Hr(ht(e))};var Qr=function(e){return vt(e)&&"[object Map]"==jr(e)},Kr=Wn.a&&Wn.a.isMap,Yr=Kr?Vn(Kr):Qr;var Gr=function(e){return vt(e)&&"[object Set]"==jr(e)},Xr=Wn.a&&Wn.a.isSet,Zr=Xr?Vn(Xr):Gr,Jr={};Jr["[object Arguments]"]=Jr["[object Array]"]=Jr["[object ArrayBuffer]"]=Jr["[object DataView]"]=Jr["[object Boolean]"]=Jr["[object Date]"]=Jr["[object Float32Array]"]=Jr["[object Float64Array]"]=Jr["[object Int8Array]"]=Jr["[object Int16Array]"]=Jr["[object Int32Array]"]=Jr["[object Map]"]=Jr["[object Number]"]=Jr["[object Object]"]=Jr["[object RegExp]"]=Jr["[object Set]"]=Jr["[object String]"]=Jr["[object Symbol]"]=Jr["[object Uint8Array]"]=Jr["[object Uint8ClampedArray]"]=Jr["[object Uint16Array]"]=Jr["[object Uint32Array]"]=!0,Jr["[object Error]"]=Jr["[object Function]"]=Jr["[object WeakMap]"]=!1;var ei=function e(t,n,r,i,o,a){var u,l=1&n,c=2&n,s=4&n;if(r&&(u=o?r(t,i,o,a):r(t)),void 0!==u)return u;if(!It(t))return t;var f=Dn(t);if(f){if(u=Rr(t),!l)return lr(t,u)}else{var d=jr(t),p="[object Function]"==d||"[object GeneratorFunction]"==d;if(Object(In.a)(t))return Object(ur.a)(t,l);if("[object Object]"==d||"[object Arguments]"==d||p&&!o){if(u=c||p?{}:qr(t),!l)return c?yr(t,ar(u,t)):hr(t,tr(u,t))}else{if(!Jr[d])return o?t:{};u=Wr(t,d,l)}}a||(a=new En);var h=a.get(t);if(h)return h;a.set(t,u),Zr(t)?t.forEach((function(i){u.add(e(i,n,r,i,t,a))})):Yr(t)&&t.forEach((function(i,o){u.set(o,e(i,n,r,o,t,a))}));var v=s?c?wr:gr:c?keysIn:er,m=f?void 0:v(t);return _n(m||t,(function(i,o){m&&(i=t[o=i]),On(u,o,e(i,n,r,o,t,a))})),u};var ti=function(e){return ei(e,4)};var ni=function(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i};var ri=function(e){return"symbol"==typeof e||vt(e)&&"[object Symbol]"==dt(e)};function ii(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(ii.Cache||gn),n}ii.Cache=gn;var oi=ii;var ai=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,ui=/\\(\\)?/g,li=function(e){var t=oi(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(ai,(function(e,n,r,i){t.push(r?i.replace(ui,"$1"):n||e)})),t}));var ci=function(e){if("string"==typeof e||ri(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t},si=rt?rt.prototype:void 0,fi=si?si.toString:void 0;var di=function e(t){if("string"==typeof t)return t;if(Dn(t))return ni(t,e)+"";if(ri(t))return fi?fi.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n};var pi=function(e){return null==e?"":di(e)};var hi=function(e){return Dn(e)?ni(e,ci):ri(e)?[e]:lr(li(pi(e)))},vi=n(2),mi=n(38);var yi=function(e){return ei(e,5)};function bi(){return(bi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function gi(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function wi(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}function xi(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ei=function(e){return Array.isArray(e)&&0===e.length},_i=function(e){return"function"==typeof e},ki=function(e){return null!==e&&"object"==typeof e},Si=function(e){return String(Math.floor(Number(e)))===e},Ti=function(e){return"[object String]"===Object.prototype.toString.call(e)},Oi=function(e){return 0===r.Children.count(e)},Ci=function(e){return ki(e)&&_i(e.then)};function Pi(e,t,n,r){void 0===r&&(r=0);for(var i=hi(t);e&&r<i.length;)e=e[i[r++]];return void 0===e?n:e}function Fi(e,t,n){for(var r=ti(e),i=r,o=0,a=hi(t);o<a.length-1;o++){var u=a[o],l=Pi(e,a.slice(0,o+1));if(l&&(ki(l)||Array.isArray(l)))i=i[u]=ti(l);else{var c=a[o+1];i=i[u]=Si(c)&&Number(c)>=0?[]:{}}}return(0===o?e:i)[a[o]]===n?e:(void 0===n?delete i[a[o]]:i[a[o]]=n,0===o&&void 0===n&&delete r[a[o]],r)}function ji(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var i=0,o=Object.keys(e);i<o.length;i++){var a=o[i],u=e[a];ki(u)?n.get(u)||(n.set(u,!0),r[a]=Array.isArray(u)?[]:{},ji(u,t,n,r[a])):r[a]=t}return r}var Ai=Object(r.createContext)(void 0),Ri=Ai.Provider,Ni=Ai.Consumer;function Di(){var e=Object(r.useContext)(Ai);return e||Object(vi.a)(!1),e}function Ii(e,t){switch(t.type){case"SET_VALUES":return bi({},e,{values:t.payload});case"SET_TOUCHED":return bi({},e,{touched:t.payload});case"SET_ERRORS":return Ye()(e.errors,t.payload)?e:bi({},e,{errors:t.payload});case"SET_STATUS":return bi({},e,{status:t.payload});case"SET_ISSUBMITTING":return bi({},e,{isSubmitting:t.payload});case"SET_ISVALIDATING":return bi({},e,{isValidating:t.payload});case"SET_FIELD_VALUE":return bi({},e,{values:Fi(e.values,t.payload.field,t.payload.value)});case"SET_FIELD_TOUCHED":return bi({},e,{touched:Fi(e.touched,t.payload.field,t.payload.value)});case"SET_FIELD_ERROR":return bi({},e,{errors:Fi(e.errors,t.payload.field,t.payload.value)});case"RESET_FORM":return bi({},e,{},t.payload);case"SET_FORMIK_STATE":return t.payload(e);case"SUBMIT_ATTEMPT":return bi({},e,{touched:ji(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1});case"SUBMIT_FAILURE":case"SUBMIT_SUCCESS":return bi({},e,{isSubmitting:!1});default:return e}}var Mi={},zi={};function Li(e){var t=e.validateOnChange,n=void 0===t||t,i=e.validateOnBlur,o=void 0===i||i,a=e.validateOnMount,u=void 0!==a&&a,l=e.isInitialValid,c=e.enableReinitialize,s=void 0!==c&&c,f=e.onSubmit,d=wi(e,["validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit"]),p=bi({validateOnChange:n,validateOnBlur:o,validateOnMount:u,onSubmit:f},d),h=Object(r.useRef)(p.initialValues),v=Object(r.useRef)(p.initialErrors||Mi),m=Object(r.useRef)(p.initialTouched||zi),y=Object(r.useRef)(p.initialStatus),b=Object(r.useRef)(!1),g=Object(r.useRef)({});Object(r.useEffect)((function(){0}),[]),Object(r.useEffect)((function(){return b.current=!0,function(){b.current=!1}}),[]);var w=Object(r.useReducer)(Ii,{values:p.initialValues,errors:p.initialErrors||Mi,touched:p.initialTouched||zi,status:p.initialStatus,isSubmitting:!1,isValidating:!1,submitCount:0}),x=w[0],E=w[1],_=Object(r.useCallback)((function(e,t){return new Promise((function(n,r){var i=p.validate(e,t);null==i?n(Mi):Ci(i)?i.then((function(e){n(e||Mi)}),(function(e){r(e)})):n(i)}))}),[p.validate]),k=Object(r.useCallback)((function(e,t){var n=p.validationSchema,r=_i(n)?n(t):n,i=t&&r.validateAt?r.validateAt(t,e):function(e,t,n,r){void 0===n&&(n=!1);void 0===r&&(r={});var i=function e(t){var n={};for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var i=String(r);!0===Array.isArray(t[i])?n[i]=t[i].map((function(t){return!0===Array.isArray(t)||xt(t)?e(t):""!==t?t:void 0})):xt(t[i])?n[i]=e(t[i]):n[i]=""!==t[i]?t[i]:void 0}return n}(e);return t[n?"validateSync":"validate"](i,{abortEarly:!1,context:r})}(e,r);return new Promise((function(e,t){i.then((function(){e(Mi)}),(function(n){"ValidationError"===n.name?e(function(e){var t={};if(e.inner){if(0===e.inner.length)return Fi(t,e.path,e.message);var n=e.inner,r=Array.isArray(n),i=0;for(n=r?n:n[Symbol.iterator]();;){var o;if(r){if(i>=n.length)break;o=n[i++]}else{if((i=n.next()).done)break;o=i.value}var a=o;Pi(t,a.path)||(t=Fi(t,a.path,a.message))}}return t}(n)):t(n)}))}))}),[p.validationSchema]),S=Object(r.useCallback)((function(e,t){return new Promise((function(n){return n(g.current[e].validate(t))}))}),[]),T=Object(r.useCallback)((function(e){var t=Object.keys(g.current).filter((function(e){return _i(g.current[e].validate)})),n=t.length>0?t.map((function(t){return S(t,Pi(e,t))})):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(n).then((function(e){return e.reduce((function(e,n,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===n||n&&(e=Fi(e,t[r],n)),e}),{})}))}),[S]),O=Object(r.useCallback)((function(e){return Promise.all([T(e),p.validationSchema?k(e):{},p.validate?_(e):{}]).then((function(e){var t=e[0],n=e[1],r=e[2];return tt.all([t,n,r],{arrayMerge:$i})}))}),[p.validate,p.validationSchema,T,_,k]),C=Wi((function(e){return void 0===e&&(e=x.values),Object(mi.unstable_runWithPriority)(mi.LowPriority,(function(){return O(e).then((function(e){return b.current&&E({type:"SET_ERRORS",payload:e}),e})).catch((function(e){0}))}))})),P=Wi((function(e){return void 0===e&&(e=x.values),E({type:"SET_ISVALIDATING",payload:!0}),O(e).then((function(e){return b.current&&(E({type:"SET_ISVALIDATING",payload:!1}),Ye()(x.errors,e)||E({type:"SET_ERRORS",payload:e})),e}))}));Object(r.useEffect)((function(){u&&!0===b.current&&C(h.current)}),[u,C]);var F=Object(r.useCallback)((function(e){var t=e&&e.values?e.values:h.current,n=e&&e.errors?e.errors:v.current?v.current:p.initialErrors||{},r=e&&e.touched?e.touched:m.current?m.current:p.initialTouched||{},i=e&&e.status?e.status:y.current?y.current:p.initialStatus;h.current=t,v.current=n,m.current=r,y.current=i;var o=function(){E({type:"RESET_FORM",payload:{isSubmitting:!!e&&!!e.isSubmitting,errors:n,touched:r,status:i,values:t,isValidating:!!e&&!!e.isValidating,submitCount:e&&e.submitCount&&"number"==typeof e.submitCount?e.submitCount:0}})};if(p.onReset){var a=p.onReset(x.values,Y);Ci(a)?a.then(o):o()}else o()}),[p.initialErrors,p.initialStatus,p.initialTouched]);Object(r.useEffect)((function(){s||(h.current=p.initialValues)}),[s,p.initialValues]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ye()(h.current,p.initialValues)&&(h.current=p.initialValues,F())}),[s,p.initialValues,F]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ye()(v.current,p.initialErrors)&&(v.current=p.initialErrors||Mi,E({type:"SET_ERRORS",payload:p.initialErrors||Mi}))}),[s,p.initialErrors]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ye()(m.current,p.initialTouched)&&(m.current=p.initialTouched||zi,E({type:"SET_TOUCHED",payload:p.initialTouched||zi}))}),[s,p.initialTouched]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ye()(y.current,p.initialStatus)&&(y.current=p.initialStatus,E({type:"SET_STATUS",payload:p.initialStatus}))}),[s,p.initialStatus,p.initialTouched]);var j=Wi((function(e){if(_i(g.current[e].validate)){var t=Pi(x.values,e),n=g.current[e].validate(t);return Ci(n)?(E({type:"SET_ISVALIDATING",payload:!0}),n.then((function(e){return e})).then((function(t){E({type:"SET_FIELD_ERROR",payload:{field:e,value:t}}),E({type:"SET_ISVALIDATING",payload:!1})}))):(E({type:"SET_FIELD_ERROR",payload:{field:e,value:n}}),Promise.resolve(n))}return p.validationSchema?(E({type:"SET_ISVALIDATING",payload:!0}),k(x.values,e).then((function(e){return e})).then((function(t){E({type:"SET_FIELD_ERROR",payload:{field:e,value:t[e]}}),E({type:"SET_ISVALIDATING",payload:!1})}))):Promise.resolve()})),A=Object(r.useCallback)((function(e,t){var n=t.validate;g.current[e]={validate:n}}),[]),R=Object(r.useCallback)((function(e){delete g.current[e]}),[]),N=Wi((function(e,t){return E({type:"SET_TOUCHED",payload:e}),(void 0===t?o:t)?C(x.values):Promise.resolve()})),D=Object(r.useCallback)((function(e){E({type:"SET_ERRORS",payload:e})}),[]),I=Wi((function(e,t){return E({type:"SET_VALUES",payload:e}),(void 0===t?n:t)?C(e):Promise.resolve()})),M=Object(r.useCallback)((function(e,t){E({type:"SET_FIELD_ERROR",payload:{field:e,value:t}})}),[]),z=Wi((function(e,t,r){return E({type:"SET_FIELD_VALUE",payload:{field:e,value:t}}),(void 0===r?n:r)?C(Fi(x.values,e,t)):Promise.resolve()})),L=Object(r.useCallback)((function(e,t){var n,r=t,i=e;if(!Ti(e)){e.persist&&e.persist();var o=e.target?e.target:e.currentTarget,a=o.type,u=o.name,l=o.id,c=o.value,s=o.checked,f=(o.outerHTML,o.options),d=o.multiple;r=t||(u||l),i=/number|range/.test(a)?(n=parseFloat(c),isNaN(n)?"":n):/checkbox/.test(a)?function(e,t,n){if("boolean"==typeof e)return Boolean(t);var r=[],i=!1,o=-1;if(Array.isArray(e))r=e,o=e.indexOf(n),i=o>=0;else if(!n||"true"==n||"false"==n)return Boolean(t);if(t&&n&&!i)return r.concat(n);if(!i)return r;return r.slice(0,o).concat(r.slice(o+1))}(Pi(x.values,r),s,c):d?function(e){return Array.from(e).filter((function(e){return e.selected})).map((function(e){return e.value}))}(f):c}r&&z(r,i)}),[z,x.values]),U=Wi((function(e){if(Ti(e))return function(t){return L(t,e)};L(e)})),$=Wi((function(e,t,n){return void 0===t&&(t=!0),E({type:"SET_FIELD_TOUCHED",payload:{field:e,value:t}}),(void 0===n?o:n)?C(x.values):Promise.resolve()})),V=Object(r.useCallback)((function(e,t){e.persist&&e.persist();var n=e.target,r=n.name,i=n.id,o=(n.outerHTML,t||(r||i));$(o,!0)}),[$]),W=Wi((function(e){if(Ti(e))return function(t){return V(t,e)};V(e)})),B=Object(r.useCallback)((function(e){_i(e)?E({type:"SET_FORMIK_STATE",payload:e}):E({type:"SET_FORMIK_STATE",payload:function(){return e}})}),[]),H=Object(r.useCallback)((function(e){E({type:"SET_STATUS",payload:e})}),[]),q=Object(r.useCallback)((function(e){E({type:"SET_ISSUBMITTING",payload:e})}),[]),Q=Wi((function(){return E({type:"SUBMIT_ATTEMPT"}),P().then((function(e){var t=e instanceof Error;if(!t&&0===Object.keys(e).length){var n;try{if(void 0===(n=G()))return}catch(e){throw e}return Promise.resolve(n).then((function(){b.current&&E({type:"SUBMIT_SUCCESS"})})).catch((function(e){if(b.current)throw E({type:"SUBMIT_FAILURE"}),e}))}if(b.current&&(E({type:"SUBMIT_FAILURE"}),t))throw e}))})),K=Wi((function(e){e&&e.preventDefault&&_i(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&_i(e.stopPropagation)&&e.stopPropagation(),Q().catch((function(e){console.warn("Warning: An unhandled error was caught from submitForm()",e)}))})),Y={resetForm:F,validateForm:P,validateField:j,setErrors:D,setFieldError:M,setFieldTouched:$,setFieldValue:z,setStatus:H,setSubmitting:q,setTouched:N,setValues:I,setFormikState:B,submitForm:Q},G=Wi((function(){return f(x.values,Y)})),X=Wi((function(e){e&&e.preventDefault&&_i(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&_i(e.stopPropagation)&&e.stopPropagation(),F()})),Z=Object(r.useCallback)((function(e){return{value:Pi(x.values,e),error:Pi(x.errors,e),touched:!!Pi(x.touched,e),initialValue:Pi(h.current,e),initialTouched:!!Pi(m.current,e),initialError:Pi(v.current,e)}}),[x.errors,x.touched,x.values]),J=Object(r.useCallback)((function(e){return{setValue:function(t){return z(e,t)},setTouched:function(t){return $(e,t)},setError:function(t){return M(e,t)}}}),[z,$,M]),ee=Object(r.useCallback)((function(e){var t=ki(e),n=t?e.name:e,r=Pi(x.values,n),i={name:n,value:r,onChange:U,onBlur:W};if(t){var o=e.type,a=e.value,u=e.as,l=e.multiple;"checkbox"===o?void 0===a?i.checked=!!r:(i.checked=!(!Array.isArray(r)||!~r.indexOf(a)),i.value=a):"radio"===o?(i.checked=r===a,i.value=a):"select"===u&&l&&(i.value=i.value||[],i.multiple=!0)}return i}),[W,U,x.values]),te=Object(r.useMemo)((function(){return!Ye()(h.current,x.values)}),[h.current,x.values]),ne=Object(r.useMemo)((function(){return void 0!==l?te?x.errors&&0===Object.keys(x.errors).length:!1!==l&&_i(l)?l(p):l:x.errors&&0===Object.keys(x.errors).length}),[l,te,x.errors,p]);return bi({},x,{initialValues:h.current,initialErrors:v.current,initialTouched:m.current,initialStatus:y.current,handleBlur:W,handleChange:U,handleReset:X,handleSubmit:K,resetForm:F,setErrors:D,setFormikState:B,setFieldTouched:$,setFieldValue:z,setFieldError:M,setStatus:H,setSubmitting:q,setTouched:N,setValues:I,submitForm:Q,validateForm:P,validateField:j,isValid:ne,dirty:te,unregisterField:R,registerField:A,getFieldProps:ee,getFieldMeta:Z,getFieldHelpers:J,validateOnBlur:o,validateOnChange:n,validateOnMount:u})}function Ui(e){var t=Li(e),n=e.component,i=e.children,o=e.render,a=e.innerRef;return Object(r.useImperativeHandle)(a,(function(){return t})),Object(r.useEffect)((function(){0}),[]),Object(r.createElement)(Ri,{value:t},n?Object(r.createElement)(n,t):o?o(t):i?_i(i)?i(t):Oi(i)?null:r.Children.only(i):null)}function $i(e,t,n){var r=e.slice();return t.forEach((function(t,i){if(void 0===r[i]){var o=!1!==n.clone&&n.isMergeableObject(t);r[i]=o?tt(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[i]=tt(e[i],t,n):-1===e.indexOf(t)&&r.push(t)})),r}var Vi="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function Wi(e){var t=Object(r.useRef)(e);return Vi((function(){t.current=e})),Object(r.useCallback)((function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.current.apply(void 0,n)}),[])}var Bi=Object(r.forwardRef)((function(e,t){var n=e.action,i=wi(e,["action"]),o=n||"#",a=Di(),u=a.handleReset,l=a.handleSubmit;return Object(r.createElement)("form",Object.assign({onSubmit:l,ref:t,onReset:u,action:o},i))}));function Hi(e){var t=function(t){return Object(r.createElement)(Ni,null,(function(n){return n||Object(vi.a)(!1),Object(r.createElement)(e,Object.assign({},t,{formik:n}))}))},n=e.displayName||e.name||e.constructor&&e.constructor.name||"Component";return t.WrappedComponent=e,t.displayName="FormikConnect("+n+")",m()(t,e)}Bi.displayName="Form";var qi=function(e,t,n){var r=Qi(e);return r.splice(t,0,n),r},Qi=function(e){if(e){if(Array.isArray(e))return[].concat(e);var t=Object.keys(e).map((function(e){return parseInt(e)})).reduce((function(e,t){return t>e?t:e}),0);return Array.from(bi({},e,{length:t+1}))}return[]},Ki=function(e){function t(t){var n;return(n=e.call(this,t)||this).updateArrayField=function(e,t,r){var i=n.props,o=i.name;(0,i.formik.setFormikState)((function(n){var i="function"==typeof r?r:e,a="function"==typeof t?t:e,u=Fi(n.values,o,e(Pi(n.values,o))),l=r?i(Pi(n.errors,o)):void 0,c=t?a(Pi(n.touched,o)):void 0;return Ei(l)&&(l=void 0),Ei(c)&&(c=void 0),bi({},n,{values:u,errors:r?Fi(n.errors,o,l):n.errors,touched:t?Fi(n.touched,o,c):n.touched})}))},n.push=function(e){return n.updateArrayField((function(t){return[].concat(Qi(t),[yi(e)])}),!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Qi(e),i=r[t];return r[t]=r[n],r[n]=i,r}(n,e,t)}),!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Qi(e),i=r[t];return r.splice(t,1),r.splice(n,0,i),r}(n,e,t)}),!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField((function(n){return qi(n,e,t)}),(function(t){return qi(t,e,null)}),(function(t){return qi(t,e,null)}))},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Qi(e);return r[t]=n,r}(n,e,t)}),!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField((function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n})),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(xi(n)),n.pop=n.pop.bind(xi(n)),n}gi(t,e);var n=t.prototype;return n.componentDidUpdate=function(e){!Ye()(Pi(e.formik.values,e.name),Pi(this.props.formik.values,this.props.name))&&this.props.formik.validateOnChange&&this.props.formik.validateForm(this.props.formik.values)},n.remove=function(e){var t;return this.updateArrayField((function(n){var r=n?Qi(n):[];return t||(t=r[e]),_i(r.splice)&&r.splice(e,1),r}),!0,!0),t},n.pop=function(){var e;return this.updateArrayField((function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n}),!0,!0),e},n.render=function(){var e={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},t=this.props,n=t.component,i=t.render,o=t.children,a=t.name,u=bi({},e,{form:wi(t.formik,["validate","validationSchema"]),name:a});return n?Object(r.createElement)(n,u):i?i(u):o?"function"==typeof o?o(u):Oi(o)?null:r.Children.only(o):null},t}(r.Component);Ki.defaultProps={validateOnChange:!0};r.Component,r.Component;var Yi=n(66),Gi=n.n(Yi),Xi=n(39),Zi=n.n(Xi);var Ji=function(e){const{tag:t="h2",type:n="h2",text:r}=e,o=t;let a="";return"h2"===n&&(a+=Zi.a.h2),"h3"===n&&(a+=Zi.a.h3),i.a.createElement(o,{className:a},r)};n(108);var eo=function(e){const{text:t="Error message didn't passed",indent:n}=e;let r="error";return 1*n==1&&(r+=" error--padding-1"),1*n==2&&(r+=" error--padding-2"),1*n==3&&(r+=" error--padding-3"),i.a.createElement("p",{className:r},t)};function to(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var no=Object.prototype.hasOwnProperty;var ro=function(e,t){return null!=e&&no.call(e,t)},io=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,oo=/^\w*$/;var ao=function(e,t){if(Dn(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ri(e))||(oo.test(e)||!io.test(e)||null!=t&&e in Object(t))};var uo=function(e,t){return Dn(e)?e:ao(e,t)?[e]:li(pi(e))};var lo=function(e,t,n){for(var r=-1,i=(t=uo(t,e)).length,o=!1;++r<i;){var a=ci(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Ln(i)&&zn(a,i)&&(Dn(e)||Nn(e))};var co=function(e,t){return null!=e&&lo(e,t,ro)};var so=function(e,t){return ei(e,5,t="function"==typeof t?t:void 0)};var fo=function(e){return"string"==typeof e||!Dn(e)&&vt(e)&&"[object String]"==dt(e)};var po=function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n};var ho=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n};var vo=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n};var mo=function(e){return e.split("")},yo=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");var bo=function(e){return yo.test(e)},go="[\\ud800-\\udfff]",wo="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",xo="\\ud83c[\\udffb-\\udfff]",Eo="[^\\ud800-\\udfff]",_o="(?:\\ud83c[\\udde6-\\uddff]){2}",ko="[\\ud800-\\udbff][\\udc00-\\udfff]",So="(?:"+wo+"|"+xo+")"+"?",To="[\\ufe0e\\ufe0f]?"+So+("(?:\\u200d(?:"+[Eo,_o,ko].join("|")+")[\\ufe0e\\ufe0f]?"+So+")*"),Oo="(?:"+[Eo+wo+"?",wo,_o,ko,go].join("|")+")",Co=RegExp(xo+"(?="+xo+")|"+Oo+To,"g");var Po=function(e){return e.match(Co)||[]};var Fo=function(e){return bo(e)?Po(e):mo(e)};var jo=function(e,t){return ni(t,(function(t){return e[t]}))};var Ao=function(e){return null==e?[]:jo(e,er(e))},Ro=rt?rt.iterator:void 0;var No=function(e){if(!e)return[];if(Jn(e))return fo(e)?Fo(e):lr(e);if(Ro&&e[Ro])return po(e[Ro]());var t=jr(e);return("[object Map]"==t?ho:"[object Set]"==t?vo:Ao)(e)},Do=Object.prototype.toString,Io=Error.prototype.toString,Mo=RegExp.prototype.toString,zo="undefined"!=typeof Symbol?Symbol.prototype.toString:function(){return""},Lo=/^Symbol\((.*)\)(.*)$/;function Uo(e,t){if(void 0===t&&(t=!1),null==e||!0===e||!1===e)return""+e;var n=typeof e;if("number"===n)return function(e){return e!=+e?"NaN":0===e&&1/e<0?"-0":""+e}(e);if("string"===n)return t?'"'+e+'"':e;if("function"===n)return"[Function "+(e.name||"anonymous")+"]";if("symbol"===n)return zo.call(e).replace(Lo,"Symbol($1)");var r=Do.call(e).slice(8,-1);return"Date"===r?isNaN(e.getTime())?""+e:e.toISOString(e):"Error"===r||e instanceof Error?"["+Io.call(e)+"]":"RegExp"===r?Mo.call(e):null}function $o(e,t){var n=Uo(e,t);return null!==n?n:JSON.stringify(e,(function(e,n){var r=Uo(this[e],t);return null!==r?r:n}),2)}var Vo={default:"${path} is invalid",required:"${path} is a required field",oneOf:"${path} must be one of the following values: ${values}",notOneOf:"${path} must not be one of the following values: ${values}",notType:function(e){var t=e.path,n=e.type,r=e.value,i=e.originalValue,o=null!=i&&i!==r,a=t+" must be a `"+n+"` type, but the final value was: `"+$o(r,!0)+"`"+(o?" (cast from the value `"+$o(i,!0)+"`).":".");return null===r&&(a+='\n If "null" is intended as an empty value be sure to mark the schema as `.nullable()`'),a},defined:"${path} must be defined"},Wo={length:"${path} must be exactly ${length} characters",min:"${path} must be at least ${min} characters",max:"${path} must be at most ${max} characters",matches:'${path} must match the following: "${regex}"',email:"${path} must be a valid email",url:"${path} must be a valid URL",trim:"${path} must be a trimmed string",lowercase:"${path} must be a lowercase string",uppercase:"${path} must be a upper case string"},Bo={min:"${path} must be greater than or equal to ${min}",max:"${path} must be less than or equal to ${max}",lessThan:"${path} must be less than ${less}",moreThan:"${path} must be greater than ${more}",notEqual:"${path} must be not equal to ${notEqual}",positive:"${path} must be a positive number",negative:"${path} must be a negative number",integer:"${path} must be an integer"},Ho={min:"${path} field must be later than ${min}",max:"${path} field must be at earlier than ${max}"},qo={noUnknown:"${path} field has unspecified keys: ${unknown}"},Qo={min:"${path} field must have at least ${min} items",max:"${path} field must have less than or equal to ${max} items"},Ko=function(e){return e&&e.__isYupSchema__},Yo=function(){function e(e,t){if(this.refs=e,"function"!=typeof t){if(!co(t,"is"))throw new TypeError("`is:` is required for `when()` conditions");if(!t.then&&!t.otherwise)throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");var n=t.is,r=t.then,i=t.otherwise,o="function"==typeof n?n:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.every((function(e){return e===n}))};this.fn=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=t.pop(),u=t.pop(),l=o.apply(void 0,t)?r:i;if(l)return"function"==typeof l?l(u):u.concat(l.resolve(a))}}else this.fn=t}return e.prototype.resolve=function(e,t){var n=this.refs.map((function(e){return e.getValue(t)})),r=this.fn.apply(e,n.concat(e,t));if(void 0===r||r===e)return e;if(!Ko(r))throw new TypeError("conditions must return a schema object");return r.resolve(t)},e}(),Go=n(14),Xo=/\$\{\s*(\w+)\s*\}/g,Zo=function(e){return function(t){return e.replace(Xo,(function(e,n){return $o(t[n])}))}};function Jo(e,t,n,r){var i=this;this.name="ValidationError",this.value=t,this.path=n,this.type=r,this.errors=[],this.inner=[],e&&[].concat(e).forEach((function(e){i.errors=i.errors.concat(e.errors||e),e.inner&&(i.inner=i.inner.concat(e.inner.length?e.inner:e))})),this.message=this.errors.length>1?this.errors.length+" errors occurred":this.errors[0],Error.captureStackTrace&&Error.captureStackTrace(this,Jo)}Jo.prototype=Object.create(Error.prototype),Jo.prototype.constructor=Jo,Jo.isError=function(e){return e&&"ValidationError"===e.name},Jo.formatError=function(e,t){"string"==typeof e&&(e=Zo(e));var n=function(t){return t.path=t.label||t.path||"this","function"==typeof e?e(t):e};return 1===arguments.length?n:n(t)};var ea=function(e){return e?Go.SynchronousPromise:Promise};function ta(e,t){return e?null:function(e){return t.push(e),e.value}}function na(e){var t=e.validations,n=e.value,r=e.path,i=e.sync,o=e.errors,a=e.sort;return o=function(e){return void 0===e&&(e=[]),e.inner&&e.inner.length?e.inner:[].concat(e)}(o),function(e,t){var n=ea(t);return n.all(e.map((function(e){return n.resolve(e).then((function(e){return{fulfilled:!0,value:e}}),(function(e){return{fulfilled:!1,value:e}}))})))}(t,i).then((function(e){var t=e.filter((function(e){return!e.fulfilled})).reduce((function(e,t){var n=t.value;if(!Jo.isError(n))throw n;return e.concat(n)}),[]);if(a&&t.sort(a),(o=t.concat(o)).length)throw new Jo(o,n,r);return n}))}function ra(e){var t,n,r,i=e.endEarly,o=h(e,["endEarly"]);return i?(t=o.validations,n=o.value,r=o.sync,ea(r).all(t).catch((function(e){throw"ValidationError"===e.name&&(e.value=n),e})).then((function(){return n}))):na(o)}var ia=function(e){return"[object Object]"===Object.prototype.toString.call(e)};var oa=function(e){return function(t,n,r){for(var i=-1,o=Object(t),a=r(t),u=a.length;u--;){var l=a[e?u:++i];if(!1===n(o[l],l,o))break}return t}}();var aa=function(e,t){return e&&oa(e,t,er)};var ua=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this};var la=function(e){return this.__data__.has(e)};function ca(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new gn;++t<n;)this.add(e[t])}ca.prototype.add=ca.prototype.push=ua,ca.prototype.has=la;var sa=ca;var fa=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1};var da=function(e,t){return e.has(t)};var pa=function(e,t,n,r,i,o){var a=1&n,u=e.length,l=t.length;if(u!=l&&!(a&&l>u))return!1;var c=o.get(e);if(c&&o.get(t))return c==t;var s=-1,f=!0,d=2&n?new sa:void 0;for(o.set(e,t),o.set(t,e);++s<u;){var p=e[s],h=t[s];if(r)var v=a?r(h,p,s,t,e,o):r(p,h,s,e,t,o);if(void 0!==v){if(v)continue;f=!1;break}if(d){if(!fa(t,(function(e,t){if(!da(d,t)&&(p===e||i(p,e,n,r,o)))return d.push(t)}))){f=!1;break}}else if(p!==h&&!i(p,h,n,r,o)){f=!1;break}}return o.delete(e),o.delete(t),f},ha=rt?rt.prototype:void 0,va=ha?ha.valueOf:void 0;var ma=function(e,t,n,r,i,o,a){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!o(new Nr(e),new Nr(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return _t(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var u=ho;case"[object Set]":var l=1&r;if(u||(u=vo),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=2,a.set(e,t);var s=pa(u(e),u(t),r,i,o,a);return a.delete(e),s;case"[object Symbol]":if(va)return va.call(e)==va.call(t)}return!1},ya=Object.prototype.hasOwnProperty;var ba=function(e,t,n,r,i,o){var a=1&n,u=gr(e),l=u.length;if(l!=gr(t).length&&!a)return!1;for(var c=l;c--;){var s=u[c];if(!(a?s in t:ya.call(t,s)))return!1}var f=o.get(e);if(f&&o.get(t))return f==t;var d=!0;o.set(e,t),o.set(t,e);for(var p=a;++c<l;){var h=e[s=u[c]],v=t[s];if(r)var m=a?r(v,h,s,t,e,o):r(h,v,s,e,t,o);if(!(void 0===m?h===v||i(h,v,n,r,o):m)){d=!1;break}p||(p="constructor"==s)}if(d&&!p){var y=e.constructor,b=t.constructor;y==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(d=!1)}return o.delete(e),o.delete(t),d},ga=Object.prototype.hasOwnProperty;var wa=function(e,t,n,r,i,o){var a=Dn(e),u=Dn(t),l=a?"[object Array]":jr(e),c=u?"[object Array]":jr(t),s="[object Object]"==(l="[object Arguments]"==l?"[object Object]":l),f="[object Object]"==(c="[object Arguments]"==c?"[object Object]":c),d=l==c;if(d&&Object(In.a)(e)){if(!Object(In.a)(t))return!1;a=!0,s=!1}if(d&&!s)return o||(o=new En),a||Hn(e)?pa(e,t,n,r,i,o):ma(e,t,l,n,r,i,o);if(!(1&n)){var p=s&&ga.call(e,"__wrapped__"),h=f&&ga.call(t,"__wrapped__");if(p||h){var v=p?e.value():e,m=h?t.value():t;return o||(o=new En),i(v,m,n,r,o)}}return!!d&&(o||(o=new En),ba(e,t,n,r,i,o))};var xa=function e(t,n,r,i,o){return t===n||(null==t||null==n||!vt(t)&&!vt(n)?t!=t&&n!=n:wa(t,n,r,i,e,o))};var Ea=function(e,t,n,r){var i=n.length,o=i,a=!r;if(null==e)return!o;for(e=Object(e);i--;){var u=n[i];if(a&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++i<o;){var l=(u=n[i])[0],c=e[l],s=u[1];if(a&&u[2]){if(void 0===c&&!(l in e))return!1}else{var f=new En;if(r)var d=r(c,s,l,e,t,f);if(!(void 0===d?xa(s,c,3,r,f):d))return!1}}return!0};var _a=function(e){return e==e&&!It(e)};var ka=function(e){for(var t=er(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,_a(i)]}return t};var Sa=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}};var Ta=function(e){var t=ka(e);return 1==t.length&&t[0][2]?Sa(t[0][0],t[0][1]):function(n){return n===e||Ea(n,e,t)}};var Oa=function(e,t){for(var n=0,r=(t=uo(t,e)).length;null!=e&&n<r;)e=e[ci(t[n++])];return n&&n==r?e:void 0};var Ca=function(e,t,n){var r=null==e?void 0:Oa(e,t);return void 0===r?n:r};var Pa=function(e,t){return null!=e&&t in Object(e)};var Fa=function(e,t){return null!=e&&lo(e,t,Pa)};var ja=function(e,t){return ao(e)&&_a(t)?Sa(ci(e),t):function(n){var r=Ca(n,e);return void 0===r&&r===t?Fa(n,e):xa(t,r,3)}};var Aa=function(e){return e};var Ra=function(e){return function(t){return null==t?void 0:t[e]}};var Na=function(e){return function(t){return Oa(t,e)}};var Da=function(e){return ao(e)?Ra(ci(e)):Na(e)};var Ia=function(e){return"function"==typeof e?e:null==e?Aa:"object"==typeof e?Dn(e)?ja(e[0],e[1]):Ta(e):Da(e)};var Ma=function(e,t){var n={};return t=Ia(t,3),aa(e,(function(e,r,i){Sn(n,r,t(e,r,i))})),n},za=n(8),La="$",Ua=".",$a=function(){function e(e,t){if(void 0===t&&(t={}),"string"!=typeof e)throw new TypeError("ref must be a string, got: "+e);if(this.key=e.trim(),""===e)throw new TypeError("ref must be a non-empty string");this.isContext=this.key[0]===La,this.isValue=this.key[0]===Ua,this.isSibling=!this.isContext&&!this.isValue;var n=this.isContext?La:this.isValue?Ua:"";this.path=this.key.slice(n.length),this.getter=this.path&&Object(za.getter)(this.path,!0),this.map=t.map}var t=e.prototype;return t.getValue=function(e){var t=this.isContext?e.context:this.isValue?e.value:e.parent;return this.getter&&(t=this.getter(t||{})),this.map&&(t=this.map(t)),t},t.cast=function(e,t){return this.getValue(p({},t,{value:e}))},t.resolve=function(){return this},t.describe=function(){return{type:"ref",key:this.key}},t.toString=function(){return"Ref("+this.key+")"},e.isRef=function(e){return e&&e.__isYupRef},e}();$a.prototype.__isYupRef=!0;var Va=Jo.formatError;function Wa(e){var t=e.value,n=e.label,r=e.resolve,i=e.originalValue,o=h(e,["value","label","resolve","originalValue"]);return function(e){var a=void 0===e?{}:e,u=a.path,l=void 0===u?o.path:u,c=a.message,s=void 0===c?o.message:c,f=a.type,d=void 0===f?o.name:f,h=a.params;return h=p({path:l,value:t,originalValue:i,label:n},function(e,t,n){return Ma(p({},e,{},t),n)}(o.params,h,r)),p(new Jo(Va(s,h),t,l,d),{params:h})}}function Ba(e){var t=e.name,n=e.message,r=e.test,i=e.params;function o(e){var o=e.value,a=e.path,u=e.label,l=e.options,c=e.originalValue,s=e.sync,f=h(e,["value","path","label","options","originalValue","sync"]),d=l.parent,v=function(e){return $a.isRef(e)?e.getValue({value:o,parent:d,context:l.context}):e},m=Wa({message:n,path:a,value:o,originalValue:c,params:i,label:u,resolve:v,name:t}),y=p({path:a,parent:d,type:t,createError:m,resolve:v,options:l},f);return function(e,t,n,r){var i,o=e.call(t,n);if(!r)return Promise.resolve(o);if((i=o)&&"function"==typeof i.then&&"function"==typeof i.catch)throw new Error('Validation test of type: "'+t.type+'" returned a Promise during a synchronous validate. This test will finish after the validate call has returned');return Go.SynchronousPromise.resolve(o)}(r,y,o,s).then((function(e){if(Jo.isError(e))throw e;if(!e)throw m()}))}return o.OPTIONS=e,o}function Ha(e,t,n,r){var i,o,a;return void 0===r&&(r=n),t?(Object(za.forEach)(t,(function(u,l,c){var s=l?function(e){return e.substr(0,e.length-1).substr(1)}(u):u;if((e=e.resolve({context:r,parent:i,value:n})).innerType){var f=c?parseInt(s,10):0;if(n&&f>=n.length)throw new Error("Yup.reach cannot resolve an array item at index: "+u+", in the path: "+t+". because there is no value at that index. ");i=n,n=n&&n[f],e=e.innerType}if(!c){if(!e.fields||!e.fields[s])throw new Error("The schema does not contain the path: "+t+". (failed at: "+a+' which is a type: "'+e._type+'")');i=n,n=n&&n[s],e=e.fields[s]}o=s,a=l?"["+u+"]":"."+u})),{schema:e,parent:i,parentPath:o}):{parent:i,parentPath:t,schema:e}}var qa=function(){function e(){this.list=new Set,this.refs=new Map}var t,n,r,i=e.prototype;return i.describe=function(){var e=[],t=this.list,n=Array.isArray(t),r=0;for(t=n?t:t[Symbol.iterator]();;){var i;if(n){if(r>=t.length)break;i=t[r++]}else{if((r=t.next()).done)break;i=r.value}var o=i;e.push(o)}var a=this.refs,u=Array.isArray(a),l=0;for(a=u?a:a[Symbol.iterator]();;){var c;if(u){if(l>=a.length)break;c=a[l++]}else{if((l=a.next()).done)break;c=l.value}var s=c[1];e.push(s.describe())}return e},i.toArray=function(){return No(this.list).concat(No(this.refs.values()))},i.add=function(e){$a.isRef(e)?this.refs.set(e.key,e):this.list.add(e)},i.delete=function(e){$a.isRef(e)?this.refs.delete(e.key):this.list.delete(e)},i.has=function(e,t){if(this.list.has(e))return!0;for(var n,r=this.refs.values();!(n=r.next()).done;)if(t(n.value)===e)return!0;return!1},i.clone=function(){var t=new e;return t.list=new Set(this.list),t.refs=new Map(this.refs),t},i.merge=function(e,t){var n=this.clone();return e.list.forEach((function(e){return n.add(e)})),e.refs.forEach((function(e){return n.add(e)})),t.list.forEach((function(e){return n.delete(e)})),t.refs.forEach((function(e){return n.delete(e)})),n},t=e,(n=[{key:"size",get:function(){return this.list.size+this.refs.size}}])&&to(t.prototype,n),r&&to(t,r),e}();function Qa(e){var t=this;if(void 0===e&&(e={}),!(this instanceof Qa))return new Qa;this._deps=[],this._conditions=[],this._options={abortEarly:!0,recursive:!0},this._exclusive=Object.create(null),this._whitelist=new qa,this._blacklist=new qa,this.tests=[],this.transforms=[],this.withMutation((function(){t.typeError(Vo.notType)})),co(e,"default")&&(this._defaultDefault=e.default),this.type=e.type||"mixed",this._type=e.type||"mixed"}for(var Ka=Qa.prototype={__isYupSchema__:!0,constructor:Qa,clone:function(){var e=this;return this._mutate?this:so(this,(function(t){if(Ko(t)&&t!==e)return t}))},label:function(e){var t=this.clone();return t._label=e,t},meta:function(e){if(0===arguments.length)return this._meta;var t=this.clone();return t._meta=p(t._meta||{},e),t},withMutation:function(e){var t=this._mutate;this._mutate=!0;var n=e(this);return this._mutate=t,n},concat:function(e){if(!e||e===this)return this;if(e._type!==this._type&&"mixed"!==this._type)throw new TypeError("You cannot `concat()` schema's of different types: "+this._type+" and "+e._type);var t=function e(t,n){for(var r in n)if(co(n,r)){var i=n[r],o=t[r];if(void 0===o)t[r]=i;else{if(o===i)continue;Ko(o)?Ko(i)&&(t[r]=i.concat(o)):ia(o)?ia(i)&&(t[r]=e(o,i)):Array.isArray(o)&&Array.isArray(i)&&(t[r]=i.concat(o))}}return t}(e.clone(),this);return co(e,"_default")&&(t._default=e._default),t.tests=this.tests,t._exclusive=this._exclusive,t._whitelist=this._whitelist.merge(e._whitelist,e._blacklist),t._blacklist=this._blacklist.merge(e._blacklist,e._whitelist),t.withMutation((function(t){e.tests.forEach((function(e){t.test(e.OPTIONS)}))})),t},isType:function(e){return!(!this._nullable||null!==e)||(!this._typeCheck||this._typeCheck(e))},resolve:function(e){var t=this;if(t._conditions.length){var n=t._conditions;(t=t.clone())._conditions=[],t=(t=n.reduce((function(t,n){return n.resolve(t,e)}),t)).resolve(e)}return t},cast:function(e,t){void 0===t&&(t={});var n=this.resolve(p({},t,{value:e})),r=n._cast(e,t);if(void 0!==e&&!1!==t.assert&&!0!==n.isType(r)){var i=$o(e),o=$o(r);throw new TypeError("The value of "+(t.path||"field")+' could not be cast to a value that satisfies the schema type: "'+n._type+'". \n\nattempted value: '+i+" \n"+(o!==i?"result of cast: "+o:""))}return r},_cast:function(e){var t=this,n=void 0===e?e:this.transforms.reduce((function(n,r){return r.call(t,n,e)}),e);return void 0===n&&co(this,"_default")&&(n=this.default()),n},_validate:function(e,t){var n=this;void 0===t&&(t={});var r=e,i=null!=t.originalValue?t.originalValue:e,o=this._option("strict",t),a=this._option("abortEarly",t),u=t.sync,l=t.path,c=this._label;o||(r=this._cast(r,p({assert:!1},t)));var s={value:r,path:l,schema:this,options:t,label:c,originalValue:i,sync:u};t.from&&(s.from=t.from);var f=[];return this._typeError&&f.push(this._typeError(s)),this._whitelistError&&f.push(this._whitelistError(s)),this._blacklistError&&f.push(this._blacklistError(s)),ra({validations:f,endEarly:a,value:r,path:l,sync:u}).then((function(e){return ra({path:l,sync:u,value:e,endEarly:a,validations:n.tests.map((function(e){return e(s)}))})}))},validate:function(e,t){return void 0===t&&(t={}),this.resolve(p({},t,{value:e}))._validate(e,t)},validateSync:function(e,t){var n,r;if(void 0===t&&(t={}),this.resolve(p({},t,{value:e}))._validate(e,p({},t,{sync:!0})).then((function(e){return n=e})).catch((function(e){return r=e})),r)throw r;return n},isValid:function(e,t){return this.validate(e,t).then((function(){return!0})).catch((function(e){if("ValidationError"===e.name)return!1;throw e}))},isValidSync:function(e,t){try{return this.validateSync(e,t),!0}catch(e){if("ValidationError"===e.name)return!1;throw e}},getDefault:function(e){return void 0===e&&(e={}),this.resolve(e).default()},default:function(e){if(0===arguments.length){var t=co(this,"_default")?this._default:this._defaultDefault;return"function"==typeof t?t.call(this):so(t)}var n=this.clone();return n._default=e,n},strict:function(e){void 0===e&&(e=!0);var t=this.clone();return t._options.strict=e,t},_isPresent:function(e){return null!=e},required:function(e){return void 0===e&&(e=Vo.required),this.test({message:e,name:"required",exclusive:!0,test:function(e){return this.schema._isPresent(e)}})},notRequired:function(){var e=this.clone();return e.tests=e.tests.filter((function(e){return"required"!==e.OPTIONS.name})),e},nullable:function(e){void 0===e&&(e=!0);var t=this.clone();return t._nullable=e,t},transform:function(e){var t=this.clone();return t.transforms.push(e),t},test:function(){var e;if(void 0===(e=1===arguments.length?"function"==typeof(arguments.length<=0?void 0:arguments[0])?{test:arguments.length<=0?void 0:arguments[0]}:arguments.length<=0?void 0:arguments[0]:2===arguments.length?{name:arguments.length<=0?void 0:arguments[0],test:arguments.length<=1?void 0:arguments[1]}:{name:arguments.length<=0?void 0:arguments[0],message:arguments.length<=1?void 0:arguments[1],test:arguments.length<=2?void 0:arguments[2]}).message&&(e.message=Vo.default),"function"!=typeof e.test)throw new TypeError("`test` is a required parameters");var t=this.clone(),n=Ba(e),r=e.exclusive||e.name&&!0===t._exclusive[e.name];if(e.exclusive&&!e.name)throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");return t._exclusive[e.name]=!!e.exclusive,t.tests=t.tests.filter((function(t){if(t.OPTIONS.name===e.name){if(r)return!1;if(t.OPTIONS.test===n.OPTIONS.test)return!1}return!0})),t.tests.push(n),t},when:function(e,t){1===arguments.length&&(t=e,e=".");var n=this.clone(),r=[].concat(e).map((function(e){return new $a(e)}));return r.forEach((function(e){e.isSibling&&n._deps.push(e.key)})),n._conditions.push(new Yo(r,t)),n},typeError:function(e){var t=this.clone();return t._typeError=Ba({message:e,name:"typeError",test:function(e){return!(void 0!==e&&!this.schema.isType(e))||this.createError({params:{type:this.schema._type}})}}),t},oneOf:function(e,t){void 0===t&&(t=Vo.oneOf);var n=this.clone();return e.forEach((function(e){n._whitelist.add(e),n._blacklist.delete(e)})),n._whitelistError=Ba({message:t,name:"oneOf",test:function(e){if(void 0===e)return!0;var t=this.schema._whitelist;return!!t.has(e,this.resolve)||this.createError({params:{values:t.toArray().join(", ")}})}}),n},notOneOf:function(e,t){void 0===t&&(t=Vo.notOneOf);var n=this.clone();return e.forEach((function(e){n._blacklist.add(e),n._whitelist.delete(e)})),n._blacklistError=Ba({message:t,name:"notOneOf",test:function(e){var t=this.schema._blacklist;return!t.has(e,this.resolve)||this.createError({params:{values:t.toArray().join(", ")}})}}),n},strip:function(e){void 0===e&&(e=!0);var t=this.clone();return t._strip=e,t},_option:function(e,t){return co(t,e)?t[e]:this._options[e]},describe:function(){var e=this.clone(),t={type:e._type,meta:e._meta,label:e._label,tests:e.tests.map((function(e){return{name:e.OPTIONS.name,params:e.OPTIONS.params}})).filter((function(e,t,n){return n.findIndex((function(t){return t.name===e.name}))===t}))};return e._whitelist.size&&(t.oneOf=e._whitelist.describe()),e._blacklist.size&&(t.notOneOf=e._blacklist.describe()),t},defined:function(e){return void 0===e&&(e=Vo.defined),this.nullable().test({message:e,name:"defined",exclusive:!0,test:function(e){return void 0!==e}})}},Ya=function(){var e=Xa[Ga];Ka[e+"At"]=function(t,n,r){void 0===r&&(r={});var i=Ha(this,t,n,r.context),o=i.parent,a=i.parentPath;return i.schema[e](o&&o[a],p({},r,{parent:o,path:t}))}},Ga=0,Xa=["validate","validateSync"];Ga<Xa.length;Ga++)Ya();for(var Za=0,Ja=["equals","is"];Za<Ja.length;Za++){Ka[Ja[Za]]=Ka.oneOf}for(var eu=0,tu=["not","nope"];eu<tu.length;eu++){Ka[tu[eu]]=Ka.notOneOf}function nu(e,t,n){e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),p(e.prototype,n)}Ka.optional=Ka.notRequired;function ru(){var e=this;if(!(this instanceof ru))return new ru;Qa.call(this,{type:"boolean"}),this.withMutation((function(){e.transform((function(e){if(!this.isType(e)){if(/^(true|1)$/i.test(e))return!0;if(/^(false|0)$/i.test(e))return!1}return e}))}))}nu(ru,Qa,{_typeCheck:function(e){return e instanceof Boolean&&(e=e.valueOf()),"boolean"==typeof e}});var iu=function(e){return null==e},ou=/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,au=/^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,uu=function(e){return iu(e)||e===e.trim()};function lu(){var e=this;if(!(this instanceof lu))return new lu;Qa.call(this,{type:"string"}),this.withMutation((function(){e.transform((function(e){return this.isType(e)?e:null!=e&&e.toString?e.toString():e}))}))}nu(lu,Qa,{_typeCheck:function(e){return e instanceof String&&(e=e.valueOf()),"string"==typeof e},_isPresent:function(e){return Qa.prototype._isPresent.call(this,e)&&e.length>0},length:function(e,t){return void 0===t&&(t=Wo.length),this.test({message:t,name:"length",exclusive:!0,params:{length:e},test:function(t){return iu(t)||t.length===this.resolve(e)}})},min:function(e,t){return void 0===t&&(t=Wo.min),this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return iu(t)||t.length>=this.resolve(e)}})},max:function(e,t){return void 0===t&&(t=Wo.max),this.test({name:"max",exclusive:!0,message:t,params:{max:e},test:function(t){return iu(t)||t.length<=this.resolve(e)}})},matches:function(e,t){var n,r,i=!1;return t&&("object"==typeof t?(i=t.excludeEmptyString,n=t.message,r=t.name):n=t),this.test({name:r||"matches",message:n||Wo.matches,params:{regex:e},test:function(t){return iu(t)||""===t&&i||-1!==t.search(e)}})},email:function(e){return void 0===e&&(e=Wo.email),this.matches(ou,{name:"email",message:e,excludeEmptyString:!0})},url:function(e){return void 0===e&&(e=Wo.url),this.matches(au,{name:"url",message:e,excludeEmptyString:!0})},ensure:function(){return this.default("").transform((function(e){return null===e?"":e}))},trim:function(e){return void 0===e&&(e=Wo.trim),this.transform((function(e){return null!=e?e.trim():e})).test({message:e,name:"trim",test:uu})},lowercase:function(e){return void 0===e&&(e=Wo.lowercase),this.transform((function(e){return iu(e)?e:e.toLowerCase()})).test({message:e,name:"string_case",exclusive:!0,test:function(e){return iu(e)||e===e.toLowerCase()}})},uppercase:function(e){return void 0===e&&(e=Wo.uppercase),this.transform((function(e){return iu(e)?e:e.toUpperCase()})).test({message:e,name:"string_case",exclusive:!0,test:function(e){return iu(e)||e===e.toUpperCase()}})}});nu((function e(){var t=this;if(!(this instanceof e))return new e;Qa.call(this,{type:"number"}),this.withMutation((function(){t.transform((function(e){var t=e;if("string"==typeof t){if(""===(t=t.replace(/\s/g,"")))return NaN;t=+t}return this.isType(t)?t:parseFloat(t)}))}))}),Qa,{_typeCheck:function(e){return e instanceof Number&&(e=e.valueOf()),"number"==typeof e&&!function(e){return e!=+e}(e)},min:function(e,t){return void 0===t&&(t=Bo.min),this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return iu(t)||t>=this.resolve(e)}})},max:function(e,t){return void 0===t&&(t=Bo.max),this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(t){return iu(t)||t<=this.resolve(e)}})},lessThan:function(e,t){return void 0===t&&(t=Bo.lessThan),this.test({message:t,name:"max",exclusive:!0,params:{less:e},test:function(t){return iu(t)||t<this.resolve(e)}})},moreThan:function(e,t){return void 0===t&&(t=Bo.moreThan),this.test({message:t,name:"min",exclusive:!0,params:{more:e},test:function(t){return iu(t)||t>this.resolve(e)}})},positive:function(e){return void 0===e&&(e=Bo.positive),this.moreThan(0,e)},negative:function(e){return void 0===e&&(e=Bo.negative),this.lessThan(0,e)},integer:function(e){return void 0===e&&(e=Bo.integer),this.test({name:"integer",message:e,test:function(e){return iu(e)||Number.isInteger(e)}})},truncate:function(){return this.transform((function(e){return iu(e)?e:0|e}))},round:function(e){var t=["ceil","floor","round","trunc"];if("trunc"===(e=e&&e.toLowerCase()||"round"))return this.truncate();if(-1===t.indexOf(e.toLowerCase()))throw new TypeError("Only valid options for round() are: "+t.join(", "));return this.transform((function(t){return iu(t)?t:Math[e](t)}))}});var cu=/^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;var su=new Date("");function fu(){var e=this;if(!(this instanceof fu))return new fu;Qa.call(this,{type:"date"}),this.withMutation((function(){e.transform((function(e){return this.isType(e)?e:(e=function(e){var t,n,r=[1,4,5,6,7,10,11],i=0;if(n=cu.exec(e)){for(var o,a=0;o=r[a];++a)n[o]=+n[o]||0;n[2]=(+n[2]||1)-1,n[3]=+n[3]||1,n[7]=n[7]?String(n[7]).substr(0,3):0,void 0!==n[8]&&""!==n[8]||void 0!==n[9]&&""!==n[9]?("Z"!==n[8]&&void 0!==n[9]&&(i=60*n[10]+n[11],"+"===n[9]&&(i=0-i)),t=Date.UTC(n[1],n[2],n[3],n[4],n[5]+i,n[6],n[7])):t=+new Date(n[1],n[2],n[3],n[4],n[5],n[6],n[7])}else t=Date.parse?Date.parse(e):NaN;return t}(e),isNaN(e)?su:new Date(e))}))}))}function du(e,t){return t||(t=e.slice(0)),e.raw=t,e}nu(fu,Qa,{_typeCheck:function(e){return t=e,"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(e.getTime());var t},min:function(e,t){void 0===t&&(t=Ho.min);var n=e;if(!$a.isRef(n)&&(n=this.cast(e),!this._typeCheck(n)))throw new TypeError("`min` must be a Date or a value that can be `cast()` to a Date");return this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(e){return iu(e)||e>=this.resolve(n)}})},max:function(e,t){void 0===t&&(t=Ho.max);var n=e;if(!$a.isRef(n)&&(n=this.cast(e),!this._typeCheck(n)))throw new TypeError("`max` must be a Date or a value that can be `cast()` to a Date");return this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(e){return iu(e)||e<=this.resolve(n)}})}});var pu=function(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n};var hu=function(e){return function(t){return null==e?void 0:e[t]}}({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),vu=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,mu=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");var yu=function(e){return(e=pi(e))&&e.replace(vu,hu).replace(mu,"")},bu=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;var gu=function(e){return e.match(bu)||[]},wu=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;var xu=function(e){return wu.test(e)},Eu="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",_u="["+Eu+"]",ku="\\d+",Su="[\\u2700-\\u27bf]",Tu="[a-z\\xdf-\\xf6\\xf8-\\xff]",Ou="[^\\ud800-\\udfff"+Eu+ku+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",Cu="(?:\\ud83c[\\udde6-\\uddff]){2}",Pu="[\\ud800-\\udbff][\\udc00-\\udfff]",Fu="[A-Z\\xc0-\\xd6\\xd8-\\xde]",ju="(?:"+Tu+"|"+Ou+")",Au="(?:"+Fu+"|"+Ou+")",Ru="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",Nu="[\\ufe0e\\ufe0f]?"+Ru+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",Cu,Pu].join("|")+")[\\ufe0e\\ufe0f]?"+Ru+")*"),Du="(?:"+[Su,Cu,Pu].join("|")+")"+Nu,Iu=RegExp([Fu+"?"+Tu+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[_u,Fu,"$"].join("|")+")",Au+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[_u,Fu+ju,"$"].join("|")+")",Fu+"?"+ju+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Fu+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",ku,Du].join("|"),"g");var Mu=function(e){return e.match(Iu)||[]};var zu=function(e,t,n){return e=pi(e),void 0===(t=n?void 0:t)?xu(e)?Mu(e):gu(e):e.match(t)||[]},Lu=RegExp("['’]","g");var Uu=function(e){return function(t){return pu(zu(yu(t).replace(Lu,"")),e,"")}},$u=Uu((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var Vu=function(e,t,n){var r=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var o=Array(i);++r<i;)o[r]=e[r+t];return o};var Wu=function(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:Vu(e,t,n)};var Bu=function(e){return function(t){t=pi(t);var n=bo(t)?Fo(t):void 0,r=n?n[0]:t.charAt(0),i=n?Wu(n,1).join(""):t.slice(1);return r[e]()+i}}("toUpperCase");var Hu=function(e){return Bu(pi(e).toLowerCase())},qu=Uu((function(e,t,n){return t=t.toLowerCase(),e+(n?Hu(t):t)}));var Qu=function(e,t){var n={};return t=Ia(t,3),aa(e,(function(e,r,i){Sn(n,t(e,r,i),e)})),n},Ku=n(67),Yu=n.n(Ku);function Gu(e,t){void 0===t&&(t=[]);var n=[],r=[];function i(e,i){var o=Object(za.split)(e)[0];~r.indexOf(o)||r.push(o),~t.indexOf(i+"-"+o)||n.push([i,o])}for(var o in e)if(co(e,o)){var a=e[o];~r.indexOf(o)||r.push(o),$a.isRef(a)&&a.isSibling?i(a.path,o):Ko(a)&&a._deps&&a._deps.forEach((function(e){return i(e,o)}))}return Yu.a.array(r,n).reverse()}function Xu(e,t){var n=1/0;return e.some((function(e,r){if(-1!==t.path.indexOf(e))return n=r,!0})),n}function Zu(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=e.reduce((function(e,t){var r=n.shift();return e+(null==r?"":r)+t}));return i.replace(/^\./,"")}function Ju(){var e=du(["",'["','"]']);return Ju=function(){return e},e}function el(){var e=du(["",".",""]);return el=function(){return e},e}function tl(){var e=du(["",".",""]);return tl=function(){return e},e}var nl=function(e){return"[object Object]"===Object.prototype.toString.call(e)};function rl(e){var t=this;if(!(this instanceof rl))return new rl(e);Qa.call(this,{type:"object",default:function(){var e=this;if(this._nodes.length){var t={};return this._nodes.forEach((function(n){t[n]=e.fields[n].default?e.fields[n].default():void 0})),t}}}),this.fields=Object.create(null),this._nodes=[],this._excludedEdges=[],this.withMutation((function(){t.transform((function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e=null}return this.isType(e)?e:null})),e&&t.shape(e)}))}function il(){var e=du(["","[","]"]);return il=function(){return e},e}function ol(){var e=du(["","[","]"]);return ol=function(){return e},e}nu(rl,Qa,{_typeCheck:function(e){return nl(e)||"function"==typeof e},_cast:function(e,t){var n=this;void 0===t&&(t={});var r=Qa.prototype._cast.call(this,e,t);if(void 0===r)return this.default();if(!this._typeCheck(r))return r;var i=this.fields,o=!0===this._option("stripUnknown",t),a=this._nodes.concat(Object.keys(r).filter((function(e){return-1===n._nodes.indexOf(e)}))),u={},l=p({},t,{parent:u,__validating:t.__validating||!1}),c=!1;return a.forEach((function(e){var n=i[e],a=co(r,e);if(n){var s,f=n._options&&n._options.strict;if(l.path=Zu(tl(),t.path,e),l.value=r[e],!0===(n=n.resolve(l))._strip)return void(c=c||e in r);void 0!==(s=t.__validating&&f?r[e]:n.cast(r[e],l))&&(u[e]=s)}else a&&!o&&(u[e]=r[e]);u[e]!==r[e]&&(c=!0)})),c?u:r},_validate:function(e,t){var n,r,i=this;void 0===t&&(t={});var o=t.sync,a=[],u=null!=t.originalValue?t.originalValue:e,l=[{schema:this,value:u}].concat(t.from||[]);return n=this._option("abortEarly",t),r=this._option("recursive",t),t=p({},t,{__validating:!0,originalValue:u,from:l}),Qa.prototype._validate.call(this,e,t).catch(ta(n,a)).then((function(e){if(!r||!nl(e)){if(a.length)throw a[0];return e}l=u?[].concat(l):[{schema:i,value:u||e}].concat(t.from||[]),u=u||e;var c,s,f=i._nodes.map((function(n){var r=-1===n.indexOf(".")?Zu(el(),t.path,n):Zu(Ju(),t.path,n),a=i.fields[n],c=p({},t,{path:r,from:l,parent:e,originalValue:u[n]});return a&&a.validate?(c.strict=!0,a.validate(e[n],c)):function(e){return e?Go.SynchronousPromise:Promise}(o).resolve(!0)}));return ra({sync:o,validations:f,value:e,errors:a,endEarly:n,path:t.path,sort:(c=i.fields,s=Object.keys(c),function(e,t){return Xu(s,e)-Xu(s,t)})})}))},concat:function(e){var t=Qa.prototype.concat.call(this,e);return t._nodes=Gu(t.fields,t._excludedEdges),t},shape:function(e,t){void 0===t&&(t=[]);var n=this.clone(),r=p(n.fields,e);if(n.fields=r,t.length){Array.isArray(t[0])||(t=[t]);var i=t.map((function(e){return e[0]+"-"+e[1]}));n._excludedEdges=n._excludedEdges.concat(i)}return n._nodes=Gu(r,n._excludedEdges),n},from:function(e,t,n){var r=Object(za.getter)(e,!0);return this.transform((function(i){if(null==i)return i;var o=i;return co(i,e)&&(o=p({},i),n||delete o[e],o[t]=r(i)),o}))},noUnknown:function(e,t){void 0===e&&(e=!0),void 0===t&&(t=qo.noUnknown),"string"==typeof e&&(t=e,e=!0);var n=this.test({name:"noUnknown",exclusive:!0,message:t,test:function(t){if(null==t)return!0;var n=function(e,t){var n=Object.keys(e.fields);return Object.keys(t).filter((function(e){return-1===n.indexOf(e)}))}(this.schema,t);return!e||0===n.length||this.createError({params:{unknown:n.join(", ")}})}});return n._options.stripUnknown=e,n},unknown:function(e,t){return void 0===e&&(e=!0),void 0===t&&(t=qo.noUnknown),this.noUnknown(!e,t)},transformKeys:function(e){return this.transform((function(t){return t&&Qu(t,(function(t,n){return e(n)}))}))},camelCase:function(){return this.transformKeys(qu)},snakeCase:function(){return this.transformKeys($u)},constantCase:function(){return this.transformKeys((function(e){return $u(e).toUpperCase()}))},describe:function(){var e=Qa.prototype.describe.call(this);return e.fields=Ma(this.fields,(function(e){return e.describe()})),e}});function al(e){var t=this;if(!(this instanceof al))return new al(e);Qa.call(this,{type:"array"}),this._subType=void 0,this.innerType=void 0,this.withMutation((function(){t.transform((function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e=null}return this.isType(e)?e:null})),e&&t.of(e)}))}nu(al,Qa,{_typeCheck:function(e){return Array.isArray(e)},_cast:function(e,t){var n=this,r=Qa.prototype._cast.call(this,e,t);if(!this._typeCheck(r)||!this.innerType)return r;var i=!1,o=r.map((function(e,r){var o=n.innerType.cast(e,p({},t,{path:Zu(ol(),t.path,r)}));return o!==e&&(i=!0),o}));return i?o:r},_validate:function(e,t){var n=this;void 0===t&&(t={});var r=[],i=t.sync,o=t.path,a=this.innerType,u=this._option("abortEarly",t),l=this._option("recursive",t),c=null!=t.originalValue?t.originalValue:e;return Qa.prototype._validate.call(this,e,t).catch(ta(u,r)).then((function(e){if(!l||!a||!n._typeCheck(e)){if(r.length)throw r[0];return e}c=c||e;var s=e.map((function(n,r){var i=Zu(il(),t.path,r),o=p({},t,{path:i,strict:!0,parent:e,index:r,originalValue:c[r]});return!a.validate||a.validate(n,o)}));return ra({sync:i,path:o,value:e,errors:r,endEarly:u,validations:s})}))},_isPresent:function(e){return Qa.prototype._isPresent.call(this,e)&&e.length>0},of:function(e){var t=this.clone();if(!1!==e&&!Ko(e))throw new TypeError("`array.of()` sub-schema must be a valid yup schema, or `false` to negate a current sub-schema. not: "+$o(e));return t._subType=e,t.innerType=e,t},min:function(e,t){return t=t||Qo.min,this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return iu(t)||t.length>=this.resolve(e)}})},max:function(e,t){return t=t||Qo.max,this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(t){return iu(t)||t.length<=this.resolve(e)}})},ensure:function(){var e=this;return this.default((function(){return[]})).transform((function(t,n){return e._typeCheck(t)?t:null==n?[]:[].concat(n)}))},compact:function(e){var t=e?function(t,n,r){return!e(t,n,r)}:function(e){return!!e};return this.transform((function(e){return null!=e?e.filter(t):e}))},describe:function(){var e=Qa.prototype.describe.call(this);return this.innerType&&(e.innerType=this.innerType.describe()),e}});var ul=function(){function e(e){this._resolve=function(t,n){var r=e(t,n);if(!Ko(r))throw new TypeError("lazy() functions must return a valid schema");return r.resolve(n)}}var t=e.prototype;return t.resolve=function(e){return this._resolve(e.value,e)},t.cast=function(e,t){return this._resolve(e,t).cast(e,t)},t.validate=function(e,t){return this._resolve(e,t).validate(e,t)},t.validateSync=function(e,t){return this._resolve(e,t).validateSync(e,t)},t.validateAt=function(e,t,n){return this._resolve(t,n).validateAt(e,t,n)},t.validateSyncAt=function(e,t,n){return this._resolve(t,n).validateSyncAt(e,t,n)},e}();ul.prototype.__isYupSchema__=!0;const ll=location.host.startsWith("localhost");var cl={isDevelopment:ll,serverOrigin:ll?location.protocol+"//"+location.hostname+":3000":location.protocol+location.host},sl=n(40),fl=n.n(sl);var dl=function(e){const{children:t,indent:n}=e;let r="";return 1*n==2&&(r+=fl.a.indent_2),1*n==3&&(r+=fl.a.indent_3),i.a.createElement("div",{className:r},t)};n(109);function pl(){return(pl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var hl=function({label:e,...t}){const[n,o]=function(e){var t=Di(),n=t.getFieldProps,i=t.getFieldMeta,o=t.getFieldHelpers,a=t.registerField,u=t.unregisterField,l=ki(e)?e:{name:e},c=l.name,s=l.validate;return Object(r.useEffect)((function(){return c&&a(c,{validate:s}),function(){c&&u(c)}}),[a,u,c,s]),c||Object(vi.a)(!1),[n(l),i(c),o(c)]}(t);let[a,u]=function(e){if(!e)return[null,void 0];const t="key-"+Math.round(1e4*Math.random());return[i.a.createElement("label",{className:"input-label",htmlFor:t},e),t]}(e),l="text-input";return"search"===t.type&&(l+=" text-input--search"),i.a.createElement(i.a.Fragment,null,a,i.a.createElement("input",pl({className:l},n,{type:t.type,id:u,placeholder:t.placeholder,autoComplete:t.autoComplete,disabled:t.disabled})),o.touched&&o.error?i.a.createElement(eo,{text:o.error,indent:1}):null)};const vl={email:"",password:""},ml=rl({email:lu().required("This field is required").email("Invalid email address"),password:lu().required("This field is required").min(4,"Must be 4 characters or more")});function yl({formik:e}){const t={text:"Submit",type:"submit"};return e.isValid&&e.dirty&&!e.isSubmitting||(t.disabled=!0),e.isSubmitting&&(t.sign="spinner"),i.a.createElement(Le,t)}var bl=function(){const e=T();let[t,n]=Object(r.useState)(null),o=t?i.a.createElement(eo,{text:t,indent:"1"}):null;const{name:a}=F(e=>e.user);return a?i.a.createElement(me,{to:"/notes"}):i.a.createElement("div",null,i.a.createElement(Ji,{text:"Log in"}),i.a.createElement(Ui,{initialValues:vl,validationSchema:ml,onSubmit:t=>async function(e,t,n){const{serverOrigin:r,isDevelopment:i}=cl,o=r+"/api/v1/users/login",a={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},u=await fetch(o,a).then(e=>e.json()).then(e=>e).catch(e=>console.log(e));if("success"===u.status){const e=u.data.user;i&&localStorage.setItem("authToken",u.token),n((l=e.name,c=e.email,{type:"SET_USER",name:l,email:c}))}else t(u.message);var l,c}(t,n,e)},e=>function(e,t){let n=e.isSubmitting;return i.a.createElement(Bi,{onChange:()=>t(null)},i.a.createElement(dl,{indent:"2"},i.a.createElement(hl,{label:"Email",type:"email",name:"email",disabled:n,autoComplete:"email"})),i.a.createElement(dl,{indent:"2"},i.a.createElement(hl,{label:"Password",type:"password",name:"password",disabled:n,autoComplete:"current-password"})),i.a.createElement(yl,{formik:e}))}(e,n)),o,i.a.createElement("div",{className:Gi.a.bottomPart},i.a.createElement("p",null,"Are you a new user? ",i.a.createElement(De,{to:"/reg"},"Sign up.")),i.a.createElement("p",null,"Don't remember password? ",i.a.createElement(De,{to:"/password-reset"},"Reset password."))))};var gl=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(We,null),i.a.createElement(qe,null,i.a.createElement(bl,null)))};var wl=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(We,null),"PasswordReset")};var xl=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(We,null),"changePassword")};var El=function(){return F(e=>e.user).name};var _l=function(){return"UserPage"};var kl=()=>i.a.createElement(Pe,null,i.a.createElement("div",{className:N.a.app},i.a.createElement(Te,null,i.a.createElement(we,{path:"/",exact:!0},i.a.createElement(ze,null)),i.a.createElement(we,{path:"/reg"},i.a.createElement(Qe,null)),i.a.createElement(we,{path:"/enter"},i.a.createElement(gl,null)),i.a.createElement(we,{path:"/password-reset"},i.a.createElement(wl,null)),i.a.createElement(we,{path:"/change-password"},i.a.createElement(xl,null)),i.a.createElement(we,{path:"/notes"},i.a.createElement(El,null)),i.a.createElement(we,{path:"/user"},i.a.createElement(_l,null)))));a.a.render(i.a.createElement(d,{store:A},i.a.createElement(kl,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rpbnktd2FybmluZy9kaXN0L3Rpbnktd2FybmluZy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mYXN0LWNvbXBhcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWV4cHIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZmFpbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bmNocm9ub3VzLXByb21pc2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kZXNjcmlwdG9ycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9hbi1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vKHdlYnBhY2spL2J1aWxkaW4vaGFybW9ueS1tb2R1bGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1kb20vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2ZyZWVHbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lcnMvYXV0aFNwbGl0Q29udGFpbmVyL2Nzcy9hdXRoU3BsaXRDb250YWluZXIuc2Nzcz8yNzlkIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtaWsvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2Zvcm1IZWFkZXIvY3NzL2Zvcm1IZWFkZXIuc2Nzcz8yMWM3Iiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtQ29udGFpbmVycy9maWVsZHNEaXZpZGVyV3JhcHBlci9jc3MvZmllbGRzRGV2aWRlcldyYXBwZXIuc2Nzcz9mMjY1Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvYXBwL2Nzcy9hcHAuc2Nzcz8zY2Y2Iiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy90b3BOYXZFbnRyYW5jZS9jc3MvdG9wTmF2aWdhdGlvbi5zY3NzPzM3ZGIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9lbnRlci9jb21wb25lbnRzL2VudGVyRm9ybS9jc3MvZm9ybS5zY3NzPzlhYjQiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RvcG9zb3J0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC9janMvcmVhY3QucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWRvbS9janMvcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zY2hlZHVsZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2ZhY3RvcnlXaXRoVGhyb3dpbmdTaGltcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcHJvcC10eXBlcy9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LWlzL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5Lml0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY2xhc3NvZi1yYXcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FkZC10by11bnNjb3BhYmxlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydGllcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWtleXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2FycmF5LWluY2x1ZGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1sZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWFic29sdXRlLWluZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9odG1sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9wYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtd2Vhay1tYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZXhwb3J0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vd24ta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLWZvcmNlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1vYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2NvcnJlY3QtcHJvdG90eXBlLWdldHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL2lzYXJyYXkvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy9idXR0b24vY3NzL3NwaW5uZXIuc2Nzcz85NjZmIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtaWsvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9jb21wb25lbnRzL0NvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL2JhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy91dGlscy9TdWJzY3JpcHRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvUHJvdmlkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL3VzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlZHV4L2VzL3JlZHV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VSZWR1eENvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VEaXNwYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvc3RvcmUvc3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9zdG9yZS9yZWR1Y2Vycy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVzb2x2ZS1wYXRobmFtZS9lc20vcmVzb2x2ZS1wYXRobmFtZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdmFsdWUtZXF1YWwvZXNtL3ZhbHVlLWVxdWFsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy90aW55LWludmFyaWFudC9kaXN0L3RpbnktaW52YXJpYW50LmVzbS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvaGlzdG9yeS9lc20vaGlzdG9yeS5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9IaXN0b3J5Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9jcmVhdGVOYW1lQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9Sb3V0ZXJDb250ZXh0LmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL1JvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9NZW1vcnlSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvTGlmZWN5Y2xlLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL2dlbmVyYXRlUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9SZWRpcmVjdC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9tYXRjaFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvUm91dGUuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvU3RhdGljUm91dGVyLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL1N3aXRjaC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9ob29rcy5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9Ccm93c2VyUm91dGVyLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL0hhc2hSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvdXRpbHMvbG9jYXRpb25VdGlscy5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9MaW5rLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL05hdkxpbmsuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9tYWluL21haW5QYWdlLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvYnV0dG9uL2J1dHRvbi5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2J1dHRvbi9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvdG9wTmF2RW50cmFuY2UvdG9wTmF2RW50cmFuY2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL3RvcE5hdkVudHJhbmNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9jb250YWluZXJzL2F1dGhTcGxpdENvbnRhaW5lci9hdXRoU3BsaXRDb250YWluZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lcnMvYXV0aFNwbGl0Q29udGFpbmVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvcmVnL3JlZ1BhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnbkluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weVN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldEFsbEtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVEYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVJlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVR5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lQnlUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUNsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWVtb2l6ZUNhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jbG9uZURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL0Zvcm1pa0NvbnRleHQudHN4Iiwid2VicGFjazovLy8uLi9zcmMvRm9ybWlrLnRzeCIsIndlYnBhY2s6Ly8vLi4vc3JjL0Zvcm0udHN4Iiwid2VicGFjazovLy8uLi9zcmMvY29ubmVjdC50c3giLCJ3ZWJwYWNrOi8vLy4uL3NyYy9GaWVsZEFycmF5LnRzeCIsIndlYnBhY2s6Ly8vLi4vc3JjL0Vycm9yTWVzc2FnZS50c3giLCJ3ZWJwYWNrOi8vLy4uL3NyYy9GYXN0RmllbGQudHN4Iiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZm9ybUhlYWRlci9mb3JtSGVhZGVyLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZm9ybUhlYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2Vycm9yL2Vycm9yLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZXJyb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2Nsb25lRGVlcFdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pdGVyYXRvclRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FzY2lpVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNVbmljb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3VuaWNvZGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0cmluZ1RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL3ByaW50VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL2lzU2NoZW1hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvQ29uZGl0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvVmFsaWRhdGlvbkVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9ydW5WYWxpZGF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL3V0aWwvcHJlcGVuZERlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU2V0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlTb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VxdWFsQXJyYXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZXF1YWxPYmplY3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWF0Y2hEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VNYXRjaGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUhhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaGFzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUl0ZXJhdGVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWFwVmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvUmVmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9jcmVhdGVWYWxpZGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9yZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL21peGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL2Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL2lzQWJzZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9pc29kYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVByb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVidXJyTGV0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZGVidXJyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FzY2lpV29yZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzVW5pY29kZVdvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdW5pY29kZVdvcmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvd29yZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQ29tcG91bmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3NuYWtlQ2FzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlU2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2FzdFNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZUNhc2VGaXJzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3VwcGVyRmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2FtZWxDYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWFwS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL3V0aWwvc29ydEZpZWxkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL3V0aWwvc29ydEJ5S2V5T3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL21ha2VQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy9MYXp5LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvYnJvd3NlckNvbmZpZy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUNvbnRhaW5lcnMvZmllbGRzRGl2aWRlcldyYXBwZXIvZmllbGRzRGl2aWRlcldyYXBwZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2Zvcm1Db250YWluZXJzL2ZpZWxkc0RpdmlkZXJXcmFwcGVyL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvdGV4dElucHV0L3RleHRJbnB1dC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL3RleHRJbnB1dC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi4vc3JjL0ZpZWxkLnRzeCIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2VudGVyL2NvbXBvbmVudHMvZW50ZXJGb3JtL3Jlc291cmNlcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2VudGVyL2NvbXBvbmVudHMvZW50ZXJGb3JtL2VudGVyRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2VudGVyL2NvbXBvbmVudHMvZW50ZXJGb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvc3RvcmUvYWN0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2VudGVyL2VudGVyUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL3Bhc3N3b3JkUmVzZXQvcGFzc3dvcmRSZXNldFBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9jaGFuZ2VQYXNzd29yZC9jaGFuZ2VQYXNzd29yZFBhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9ub3Rlcy9ub3Rlc1BhZ2UuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy91c2VyL3VzZXJQYWdlLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9hcHAvYXBwLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9hcHAvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9pbmRleC5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsInJlcXVpcmUiLCJmcmVlU2VsZiIsInNlbGYiLCJyb290IiwiZnJlZUdsb2JhbCIsIkZ1bmN0aW9uIiwid2FybmluZyIsImNvbmRpdGlvbiIsIm1lc3NhZ2UiLCJfaW5oZXJpdHNMb29zZSIsInN1YkNsYXNzIiwic3VwZXJDbGFzcyIsImNvbnN0cnVjdG9yIiwiX19wcm90b19fIiwiY2hlY2siLCJpdCIsIk1hdGgiLCJnbG9iYWxUaGlzIiwid2luZG93IiwiZ2xvYmFsIiwiZnJlZUV4cG9ydHMiLCJub2RlVHlwZSIsImZyZWVNb2R1bGUiLCJmcmVlUHJvY2VzcyIsInByb2Nlc3MiLCJub2RlVXRpbCIsInR5cGVzIiwiYmluZGluZyIsImUiLCJpc0FycmF5IiwiQXJyYXkiLCJrZXlMaXN0Iiwia2V5cyIsImhhc1Byb3AiLCJoYXNFbGVtZW50VHlwZSIsIkVsZW1lbnQiLCJhIiwiYiIsImVxdWFsIiwibGVuZ3RoIiwiYXJyQSIsImFyckIiLCJkYXRlQSIsIkRhdGUiLCJkYXRlQiIsImdldFRpbWUiLCJyZWdleHBBIiwiUmVnRXhwIiwicmVnZXhwQiIsInRvU3RyaW5nIiwiJCR0eXBlb2YiLCJlcnJvciIsIm1hdGNoIiwibnVtYmVyIiwiY29uc29sZSIsIndhcm4iLCJDYWNoZSIsIm1heFNpemUiLCJ0aGlzIiwiX21heFNpemUiLCJjbGVhciIsIl9zaXplIiwiX3ZhbHVlcyIsInNldCIsIlNQTElUX1JFR0VYIiwiRElHSVRfUkVHRVgiLCJMRUFEX0RJR0lUX1JFR0VYIiwiU1BFQ19DSEFSX1JFR0VYIiwiQ0xFQU5fUVVPVEVTX1JFR0VYIiwicGF0aENhY2hlIiwic2V0Q2FjaGUiLCJnZXRDYWNoZSIsIm5vcm1hbGl6ZVBhdGgiLCJwYXRoIiwic3BsaXQiLCJtYXAiLCJwYXJ0IiwicmVwbGFjZSIsImlzUXVvdGVkIiwic3RyIiwiaW5kZXhPZiIsImNoYXJBdCIsInNob3VsZEJlUXVvdGVkIiwiaGFzTGVhZGluZ051bWJlciIsInRlc3QiLCJoYXNTcGVjaWFsQ2hhcnMiLCJzZXR0ZXIiLCJwYXJ0cyIsImRhdGEiLCJpbmRleCIsImxlbiIsInNhZmUiLCJqb2luIiwic2VnbWVudHMiLCJyZWR1Y2UiLCJmb3JFYWNoIiwiY2IiLCJ0aGlzQXJnIiwiaXRlciIsImlkeCIsImlzQnJhY2tldCIsInJlYWN0SXMiLCJSRUFDVF9TVEFUSUNTIiwiY2hpbGRDb250ZXh0VHlwZXMiLCJjb250ZXh0VHlwZSIsImNvbnRleHRUeXBlcyIsImRlZmF1bHRQcm9wcyIsImRpc3BsYXlOYW1lIiwiZ2V0RGVmYXVsdFByb3BzIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yIiwiZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzIiwibWl4aW5zIiwicHJvcFR5cGVzIiwidHlwZSIsIktOT1dOX1NUQVRJQ1MiLCJjYWxsZXIiLCJjYWxsZWUiLCJhcmd1bWVudHMiLCJhcml0eSIsIk1FTU9fU1RBVElDUyIsImNvbXBhcmUiLCJUWVBFX1NUQVRJQ1MiLCJnZXRTdGF0aWNzIiwiY29tcG9uZW50IiwiaXNNZW1vIiwiRm9yd2FyZFJlZiIsInJlbmRlciIsIk1lbW8iLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0UHJvdG90eXBlT2YiLCJvYmplY3RQcm90b3R5cGUiLCJob2lzdE5vblJlYWN0U3RhdGljcyIsInRhcmdldENvbXBvbmVudCIsInNvdXJjZUNvbXBvbmVudCIsImJsYWNrbGlzdCIsImluaGVyaXRlZENvbXBvbmVudCIsImNvbmNhdCIsInRhcmdldFN0YXRpY3MiLCJzb3VyY2VTdGF0aWNzIiwiZGVzY3JpcHRvciIsIkRFU0NSSVBUT1JTIiwiZGVmaW5lUHJvcGVydHlNb2R1bGUiLCJjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IiLCJmIiwiQnVmZmVyIiwidW5kZWZpbmVkIiwiaXNCdWZmZXIiLCJzdHViRmFsc2UiLCJleGVjIiwibWFrZUFycmF5RnJvbSIsIm9iaiIsInNsaWNlIiwiYXBwbHkiLCJTeW5jaHJvbm91c1Byb21pc2UiLCJoYW5kbGVyIiwic3RhdHVzIiwiX2NvbnRpbnVhdGlvbnMiLCJfcGFyZW50IiwiX3BhdXNlZCIsIl9jb250aW51ZVdpdGgiLCJfZmFpbFdpdGgiLCJsb29rc0xpa2VBUHJvbWlzZSIsInRoZW4iLCJwYXNzVGhyb3VnaCIsIm5leHRGbiIsImNhdGNoRm4iLCJuZXh0IiwidW5yZXNvbHZlZCIsIl9zZXRQYXJlbnQiLCJfaXNSZWplY3RlZCIsInB1c2giLCJwcm9taXNlIiwiY2F0Y2hSZXN1bHQiLCJfZXJyb3IiLCJfY2hhaW5Qcm9taXNlRGF0YSIsInJlc29sdmUiLCJyZWplY3QiLCJfcnVuUmVzb2x1dGlvbnMiLCJjYXRjaCIsIl9pc1Jlc29sdmVkIiwiX2RhdGEiLCJfcnVuUmVqZWN0aW9ucyIsImZpbmFsbHkiLCJjYWxsYmFjayIsInJhbiIsInJ1bkZpbmFsbHkiLCJyZXN1bHQiLCJlcnIiLCJjYWxsYmFja1Jlc3VsdCIsInBhdXNlIiwicmVzdW1lIiwiZmlyc3RQYXVzZWQiLCJfZmluZEZpcnN0UGF1c2VkIiwiX2ZpbmRBbmNlc3RyeSIsImFjYyIsImN1ciIsIm5vZGUiLCJjaGlsZHJlbiIsInBhcmVudCIsIkVycm9yIiwiZmlyc3RQZW5kaW5nIiwiX2ZpbmRGaXJzdFBlbmRpbmciLCJfc2V0UmVzb2x2ZWQiLCJfZmluZEZpcnN0QW5jZXN0b3IiLCJfaXNQZW5kaW5nIiwibWF0Y2hpbmciLCJmaXJzdFJlamVjdGVkIiwiX3NldFJlamVjdGVkIiwiX3Rha2VDb250aW51YXRpb25zIiwic3BsaWNlIiwiY29udGludWF0aW9ucyIsImNvbnQiLCJfaGFuZGxlVXNlckZ1bmN0aW9uUmVzdWx0IiwiX2hhbmRsZVdoZW5SZXNvbHZlZERhdGFJc1Byb21pc2UiLCJfaGFuZGxlUmVzb2x1dGlvbkVycm9yIiwiY29udGludWF0aW9uIiwiZTIiLCJuZXh0U3luY2hyb25vdXNQcm9taXNlIiwicHJvbWlzZURhdGEiLCJuZXdEYXRhIiwibmV3RXJyb3IiLCJuZXdSZXN1bHQiLCJhbGwiLCJhcmdzIiwiYWxsRGF0YSIsIm51bVJlc29sdmVkIiwicmVqZWN0ZWQiLCJhcmciLCJ0aGlzUmVzdWx0IiwiZG9SZWplY3QiLCJQcm9taXNlIiwiUmVhbFByb21pc2UiLCJpbnN0YWxsR2xvYmFsbHkiLCJfX2F3YWl0ZXIiLCJfX3BhdGNoZWQiLCJvcmlnaW5hbEF3YWl0ZXIiLCJwYXRjaEF3YWl0ZXJJZlJlcXVpcmVkIiwidW5pbnN0YWxsR2xvYmFsbHkiLCJzaGFyZWQiLCJoYXMiLCJ1aWQiLCJOQVRJVkVfU1lNQk9MIiwiVVNFX1NZTUJPTF9BU19VSUQiLCJXZWxsS25vd25TeW1ib2xzU3RvcmUiLCJjcmVhdGVXZWxsS25vd25TeW1ib2wiLCJ3aXRob3V0U2V0dGVyIiwiZmFpbHMiLCJJRThfRE9NX0RFRklORSIsImFuT2JqZWN0IiwidG9QcmltaXRpdmUiLCJuYXRpdmVEZWZpbmVQcm9wZXJ0eSIsIk8iLCJQIiwiQXR0cmlidXRlcyIsIlR5cGVFcnJvciIsImlzT2JqZWN0IiwiU3RyaW5nIiwiZyIsIm9yaWdpbmFsTW9kdWxlIiwid2VicGFja1BvbHlmaWxsIiwiSW5kZXhlZE9iamVjdCIsInJlcXVpcmVPYmplY3RDb2VyY2libGUiLCJjaGVja0RDRSIsIl9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXyIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5Iiwid2VsbEtub3duU3ltYm9sIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIk1FVEhPRF9OQU1FIiwiYml0bWFwIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJwb255ZmlsbCIsImNvbW1vbmpzR2xvYmFsIiwiY3JlYXRlRXZlbnRFbWl0dGVyIiwiaGFuZGxlcnMiLCJvbiIsIm9mZiIsImZpbHRlciIsImgiLCJuZXdWYWx1ZSIsImNoYW5nZWRCaXRzIiwiUmVhY3QiLCJjcmVhdGVDb250ZXh0IiwiZGVmYXVsdFZhbHVlIiwiY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfUHJvdmlkZXIkY2hpbGRDb250ZXgiLCJfQ29uc3VtZXIkY29udGV4dFR5cGUiLCJjb250ZXh0UHJvcCIsIlByb3ZpZGVyIiwiX0NvbXBvbmVudCIsIl90aGlzIiwiZW1pdHRlciIsInByb3BzIiwiX3Byb3RvIiwiZ2V0Q2hpbGRDb250ZXh0IiwiX3JlZiIsImNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJuZXh0UHJvcHMiLCJvbGRWYWx1ZSIsIngiLCJ5IiwiQ29tcG9uZW50IiwiUHJvcFR5cGVzIiwiaXNSZXF1aXJlZCIsIkNvbnN1bWVyIiwiX0NvbXBvbmVudDIiLCJfdGhpczIiLCJzdGF0ZSIsImdldFZhbHVlIiwib25VcGRhdGUiLCJvYnNlcnZlZEJpdHMiLCJzZXRTdGF0ZSIsIl9wcm90bzIiLCJjb21wb25lbnREaWRNb3VudCIsImNvbnRleHQiLCJjb21wb25lbnRXaWxsVW5tb3VudCIsImlzYXJyYXkiLCJwYXRoVG9SZWdleHAiLCJwYXJzZSIsImNvbXBpbGUiLCJvcHRpb25zIiwidG9rZW5zVG9GdW5jdGlvbiIsInRva2Vuc1RvUmVnRXhwIiwiUEFUSF9SRUdFWFAiLCJyZXMiLCJ0b2tlbnMiLCJkZWZhdWx0RGVsaW1pdGVyIiwiZGVsaW1pdGVyIiwiZXNjYXBlZCIsIm9mZnNldCIsInByZWZpeCIsImNhcHR1cmUiLCJncm91cCIsIm1vZGlmaWVyIiwiYXN0ZXJpc2siLCJwYXJ0aWFsIiwicmVwZWF0Iiwib3B0aW9uYWwiLCJwYXR0ZXJuIiwiZXNjYXBlR3JvdXAiLCJlc2NhcGVTdHJpbmciLCJzdWJzdHIiLCJlbmNvZGVVUklDb21wb25lbnRQcmV0dHkiLCJlbmNvZGVVUkkiLCJjaGFyQ29kZUF0IiwidG9VcHBlckNhc2UiLCJtYXRjaGVzIiwiZmxhZ3MiLCJvcHRzIiwiZW5jb2RlIiwicHJldHR5IiwiZW5jb2RlVVJJQ29tcG9uZW50IiwidG9rZW4iLCJzZWdtZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImoiLCJhdHRhY2hLZXlzIiwicmUiLCJzZW5zaXRpdmUiLCJzdHJpY3QiLCJlbmQiLCJyb3V0ZSIsImVuZHNXaXRoRGVsaW1pdGVyIiwiZ3JvdXBzIiwic291cmNlIiwicmVnZXhwVG9SZWdleHAiLCJhcnJheVRvUmVnZXhwIiwic3RyaW5nVG9SZWdleHAiLCJwcm9wSXNFbnVtZXJhYmxlIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJ0b09iamVjdCIsInZhbCIsImFzc2lnbiIsInRlc3QxIiwidGVzdDIiLCJmcm9tQ2hhckNvZGUiLCJ0ZXN0MyIsImxldHRlciIsInNob3VsZFVzZU5hdGl2ZSIsInRhcmdldCIsImZyb20iLCJzeW1ib2xzIiwidG8iLCJJU19QVVJFIiwic3RvcmUiLCJ2ZXJzaW9uIiwiY29weXJpZ2h0Iiwic2V0R2xvYmFsIiwiY3JlYXRlRWxlbWVudCIsImRvY3VtZW50IiwiRVhJU1RTIiwiaW5wdXQiLCJQUkVGRVJSRURfU1RSSU5HIiwiZm4iLCJ2YWx1ZU9mIiwiaWQiLCJwb3N0Zml4IiwicmFuZG9tIiwiYWN0aXZlWERvY3VtZW50IiwiZGVmaW5lUHJvcGVydGllcyIsImVudW1CdWdLZXlzIiwiaGlkZGVuS2V5cyIsImh0bWwiLCJkb2N1bWVudENyZWF0ZUVsZW1lbnQiLCJzaGFyZWRLZXkiLCJJRV9QUk9UTyIsIkVtcHR5Q29uc3RydWN0b3IiLCJzY3JpcHRUYWciLCJjb250ZW50IiwiTFQiLCJOdWxsUHJvdG9PYmplY3QiLCJkb21haW4iLCJBY3RpdmVYT2JqZWN0IiwiaWZyYW1lRG9jdW1lbnQiLCJpZnJhbWUiLCJ3cml0ZSIsImNsb3NlIiwidGVtcCIsInBhcmVudFdpbmRvdyIsIk51bGxQcm90b09iamVjdFZpYUFjdGl2ZVgiLCJzdHlsZSIsImRpc3BsYXkiLCJhcHBlbmRDaGlsZCIsInNyYyIsImNvbnRlbnRXaW5kb3ciLCJvcGVuIiwiRiIsIlByb3BlcnRpZXMiLCJ0b0luZGV4ZWRPYmplY3QiLCJuYW1lcyIsImNlaWwiLCJmbG9vciIsImFyZ3VtZW50IiwiaXNOYU4iLCJhRnVuY3Rpb24iLCJ2YXJpYWJsZSIsIm5hbWVzcGFjZSIsIm1ldGhvZCIsIk5BVElWRV9XRUFLX01BUCIsIm9iamVjdEhhcyIsIldlYWtNYXAiLCJ3bWdldCIsIndtaGFzIiwid21zZXQiLCJtZXRhZGF0YSIsIlNUQVRFIiwiZW5mb3JjZSIsImdldHRlckZvciIsIlRZUEUiLCJmdW5jdGlvblRvU3RyaW5nIiwiaW5zcGVjdFNvdXJjZSIsInByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlIiwibmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwiSW50ZXJuYWxTdGF0ZU1vZHVsZSIsImdldEludGVybmFsU3RhdGUiLCJlbmZvcmNlSW50ZXJuYWxTdGF0ZSIsIlRFTVBMQVRFIiwidW5zYWZlIiwic2ltcGxlIiwibm9UYXJnZXRHZXQiLCJJdGVyYXRvclByb3RvdHlwZSIsIlByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSIsImFycmF5SXRlcmF0b3IiLCJCVUdHWV9TQUZBUklfSVRFUkFUT1JTIiwiQ09SUkVDVF9QUk9UT1RZUEVfR0VUVEVSIiwiT2JqZWN0UHJvdG90eXBlIiwiVEFHIiwiU1RBVElDIiwic3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsIiwib2JzZXJ2YWJsZSIsImFsbG9jVW5zYWZlIiwiY2xvbmVCdWZmZXIiLCJidWZmZXIiLCJpc0RlZXAiLCJjb3B5IiwidG9wb3NvcnQiLCJub2RlcyIsImVkZ2VzIiwiY3Vyc29yIiwic29ydGVkIiwidmlzaXRlZCIsIm91dGdvaW5nRWRnZXMiLCJhcnIiLCJNYXAiLCJlZGdlIiwiU2V0IiwiYWRkIiwibWFrZU91dGdvaW5nRWRnZXMiLCJub2Rlc0hhc2giLCJtYWtlTm9kZXNIYXNoIiwidmlzaXQiLCJwcmVkZWNlc3NvcnMiLCJub2RlUmVwIiwib3V0Z29pbmciLCJjaGlsZCIsImRlbGV0ZSIsInVuaXF1ZU5vZGVzIiwiYXJyYXkiLCJmb3IiLCJxIiwidSIsInYiLCJ3IiwieiIsIkEiLCJCIiwiaXRlcmF0b3IiLCJDIiwiRCIsImlzTW91bnRlZCIsImVucXVldWVGb3JjZVVwZGF0ZSIsImVucXVldWVSZXBsYWNlU3RhdGUiLCJlbnF1ZXVlU2V0U3RhdGUiLCJFIiwicmVmcyIsInVwZGF0ZXIiLCJHIiwiSCIsImlzUmVhY3RDb21wb25lbnQiLCJmb3JjZVVwZGF0ZSIsIkkiLCJpc1B1cmVSZWFjdENvbXBvbmVudCIsIkoiLCJjdXJyZW50IiwiSyIsIkwiLCJyZWYiLCJfX3NlbGYiLCJfX3NvdXJjZSIsIk0iLCJrIiwiX293bmVyIiwiUSIsIlIiLCJwb3AiLCJrZXlQcmVmaXgiLCJmdW5jIiwiY291bnQiLCJTIiwiViIsIlQiLCJVIiwiZG9uZSIsImVzY2FwZSIsIlciLCJhYSIsIlgiLCJOIiwiWSIsIloiLCJiYSIsIlJlYWN0Q3VycmVudERpc3BhdGNoZXIiLCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZyIsInN1c3BlbnNlIiwiUmVhY3RDdXJyZW50T3duZXIiLCJJc1NvbWVSZW5kZXJlckFjdGluZyIsIkNoaWxkcmVuIiwidG9BcnJheSIsIm9ubHkiLCJGcmFnbWVudCIsIlByb2ZpbGVyIiwiUHVyZUNvbXBvbmVudCIsIlN0cmljdE1vZGUiLCJTdXNwZW5zZSIsIl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEIiwiY2xvbmVFbGVtZW50IiwiX2NhbGN1bGF0ZUNoYW5nZWRCaXRzIiwiX2N1cnJlbnRWYWx1ZSIsIl9jdXJyZW50VmFsdWUyIiwiX3RocmVhZENvdW50IiwiX2NvbnRleHQiLCJjcmVhdGVGYWN0b3J5IiwiY3JlYXRlUmVmIiwiZm9yd2FyZFJlZiIsImlzVmFsaWRFbGVtZW50IiwibGF6eSIsIl9jdG9yIiwiX3N0YXR1cyIsIl9yZXN1bHQiLCJtZW1vIiwidXNlQ2FsbGJhY2siLCJ1c2VDb250ZXh0IiwidXNlRGVidWdWYWx1ZSIsInVzZUVmZmVjdCIsInVzZUltcGVyYXRpdmVIYW5kbGUiLCJ1c2VMYXlvdXRFZmZlY3QiLCJ1c2VNZW1vIiwidXNlUmVkdWNlciIsInVzZVJlZiIsInVzZVN0YXRlIiwib25FcnJvciIsImRhIiwiZWEiLCJmYSIsImhhIiwiaWEiLCJqYSIsImxhIiwibWEiLCJuYSIsIm9hIiwiY3VycmVudFRhcmdldCIsImthIiwicGEiLCJxYSIsInJhIiwic2EiLCJleHRyYWN0RXZlbnRzIiwiZXZlbnRUeXBlcyIsInRhIiwicGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMiLCJ1YSIsInJlZ2lzdHJhdGlvbk5hbWUiLCJ2YSIsIndhIiwiZGVwZW5kZW5jaWVzIiwieGEiLCJ5YSIsInphIiwiQWEiLCJCYSIsIkNhIiwic3RhdGVOb2RlIiwiRGEiLCJFYSIsIkZhIiwiR2EiLCJIYSIsIklhIiwiSmEiLCJLYSIsIkxhIiwiTWEiLCJOYSIsIk9hIiwiUGEiLCJRYSIsImFjY2VwdHNCb29sZWFucyIsImF0dHJpYnV0ZU5hbWUiLCJhdHRyaWJ1dGVOYW1lc3BhY2UiLCJtdXN0VXNlUHJvcGVydHkiLCJwcm9wZXJ0eU5hbWUiLCJzYW5pdGl6ZVVSTCIsInRvTG93ZXJDYXNlIiwiVWEiLCJWYSIsInhsaW5rSHJlZiIsIldhIiwiWGEiLCJTYSIsIlRhIiwiUmEiLCJyZW1vdmVBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGUiLCJzZXRBdHRyaWJ1dGVOUyIsIllhIiwiWmEiLCIkYSIsImFiIiwiYmIiLCJkYiIsImViIiwiZmIiLCJnYiIsImhiIiwiaWIiLCJqYiIsImtiIiwibGIiLCJtYiIsIm5iIiwicGIiLCJxYiIsInRhZyIsIl9kZWJ1Z093bmVyIiwiX2RlYnVnU291cmNlIiwiZmlsZU5hbWUiLCJsaW5lTnVtYmVyIiwicmV0dXJuIiwicmIiLCJzYiIsIm5vZGVOYW1lIiwieGIiLCJfdmFsdWVUcmFja2VyIiwic2V0VmFsdWUiLCJzdG9wVHJhY2tpbmciLCJ0YiIsInliIiwiY2hlY2tlZCIsInpiIiwiZGVmYXVsdENoZWNrZWQiLCJfd3JhcHBlclN0YXRlIiwiaW5pdGlhbENoZWNrZWQiLCJBYiIsImluaXRpYWxWYWx1ZSIsImNvbnRyb2xsZWQiLCJCYiIsIkNiIiwiRGIiLCJFYiIsIm93bmVyRG9jdW1lbnQiLCJhY3RpdmVFbGVtZW50IiwiR2IiLCJGYiIsIkhiIiwic2VsZWN0ZWQiLCJkZWZhdWx0U2VsZWN0ZWQiLCJkaXNhYmxlZCIsIkliIiwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwiLCJKYiIsIktiIiwiTGIiLCJ0ZXh0Q29udGVudCIsIk1iIiwiTmIiLCJPYiIsIlBiIiwiUWIiLCJNU0FwcCIsImV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uIiwibmFtZXNwYWNlVVJJIiwiaW5uZXJIVE1MIiwiZmlyc3RDaGlsZCIsInJlbW92ZUNoaWxkIiwiUmIiLCJsYXN0Q2hpbGQiLCJub2RlVmFsdWUiLCJTYiIsIlRiIiwiYW5pbWF0aW9uZW5kIiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiVWIiLCJWYiIsIldiIiwiYW5pbWF0aW9uIiwidHJhbnNpdGlvbiIsIlhiIiwiWWIiLCJaYiIsIiRiIiwiYWMiLCJiYyIsImNjIiwiZGMiLCJhbHRlcm5hdGUiLCJlZmZlY3RUYWciLCJlYyIsIm1lbW9pemVkU3RhdGUiLCJkZWh5ZHJhdGVkIiwiZmMiLCJoYyIsInNpYmxpbmciLCJnYyIsImljIiwiamMiLCJrYyIsImxjIiwiX2Rpc3BhdGNoTGlzdGVuZXJzIiwiX2Rpc3BhdGNoSW5zdGFuY2VzIiwiaXNQcm9wYWdhdGlvblN0b3BwZWQiLCJpc1BlcnNpc3RlbnQiLCJyZWxlYXNlIiwibWMiLCJuYyIsInNyY0VsZW1lbnQiLCJjb3JyZXNwb25kaW5nVXNlRWxlbWVudCIsInBhcmVudE5vZGUiLCJvYyIsInBjIiwicWMiLCJ0b3BMZXZlbFR5cGUiLCJuYXRpdmVFdmVudCIsInRhcmdldEluc3QiLCJhbmNlc3RvcnMiLCJyYyIsImV2ZW50U3lzdGVtRmxhZ3MiLCJzYyIsImNvbnRhaW5lckluZm8iLCJ0YyIsInVjIiwidmMiLCJ3YyIsInhjIiwieWMiLCJ6YyIsIkFjIiwiQmMiLCJDYyIsIkRjIiwiRWMiLCJGYyIsIkdjIiwiSGMiLCJJYyIsIktjIiwiYmxvY2tlZE9uIiwiY29udGFpbmVyIiwiTGMiLCJwb2ludGVySWQiLCJNYyIsIk5jIiwiUGMiLCJ1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkiLCJwcmlvcml0eSIsImh5ZHJhdGUiLCJRYyIsIlJjIiwiU2MiLCJUYyIsInNoaWZ0IiwiVWMiLCJ1bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrIiwidW5zdGFibGVfTm9ybWFsUHJpb3JpdHkiLCJWYyIsIldjIiwiWWMiLCJaYyIsIiRjIiwiYWQiLCJidWJibGVkIiwiY2FwdHVyZWQiLCJldmVudFByaW9yaXR5IiwiYmQiLCJjZCIsImRkIiwidW5zdGFibGVfVXNlckJsb2NraW5nUHJpb3JpdHkiLCJlZCIsImZkIiwiZ2QiLCJoZCIsImFkZEV2ZW50TGlzdGVuZXIiLCJPYyIsImpkIiwiYW5pbWF0aW9uSXRlcmF0aW9uQ291bnQiLCJib3JkZXJJbWFnZU91dHNldCIsImJvcmRlckltYWdlU2xpY2UiLCJib3JkZXJJbWFnZVdpZHRoIiwiYm94RmxleCIsImJveEZsZXhHcm91cCIsImJveE9yZGluYWxHcm91cCIsImNvbHVtbkNvdW50IiwiY29sdW1ucyIsImZsZXgiLCJmbGV4R3JvdyIsImZsZXhQb3NpdGl2ZSIsImZsZXhTaHJpbmsiLCJmbGV4TmVnYXRpdmUiLCJmbGV4T3JkZXIiLCJncmlkQXJlYSIsImdyaWRSb3ciLCJncmlkUm93RW5kIiwiZ3JpZFJvd1NwYW4iLCJncmlkUm93U3RhcnQiLCJncmlkQ29sdW1uIiwiZ3JpZENvbHVtbkVuZCIsImdyaWRDb2x1bW5TcGFuIiwiZ3JpZENvbHVtblN0YXJ0IiwiZm9udFdlaWdodCIsImxpbmVDbGFtcCIsImxpbmVIZWlnaHQiLCJvcGFjaXR5Iiwib3JkZXIiLCJvcnBoYW5zIiwidGFiU2l6ZSIsIndpZG93cyIsInpJbmRleCIsInpvb20iLCJmaWxsT3BhY2l0eSIsImZsb29kT3BhY2l0eSIsInN0b3BPcGFjaXR5Iiwic3Ryb2tlRGFzaGFycmF5Iiwic3Ryb2tlRGFzaG9mZnNldCIsInN0cm9rZU1pdGVybGltaXQiLCJzdHJva2VPcGFjaXR5Iiwic3Ryb2tlV2lkdGgiLCJrZCIsImxkIiwidHJpbSIsIm1kIiwic2V0UHJvcGVydHkiLCJzdWJzdHJpbmciLCJuZCIsIm1lbnVpdGVtIiwiYXJlYSIsImJhc2UiLCJiciIsImNvbCIsImVtYmVkIiwiaHIiLCJpbWciLCJrZXlnZW4iLCJsaW5rIiwibWV0YSIsInBhcmFtIiwidHJhY2siLCJ3YnIiLCJvZCIsInBkIiwiaXMiLCJxZCIsInJkIiwic2QiLCJ0ZCIsImJvZHkiLCJ1ZCIsInZkIiwibmV4dFNpYmxpbmciLCJ4ZCIsIkhUTUxJRnJhbWVFbGVtZW50IiwibG9jYXRpb24iLCJocmVmIiwieWQiLCJjb250ZW50RWRpdGFibGUiLCJEZCIsIkVkIiwiRmQiLCJhdXRvRm9jdXMiLCJHZCIsIl9faHRtbCIsIkhkIiwic2V0VGltZW91dCIsIklkIiwiY2xlYXJUaW1lb3V0IiwiSmQiLCJLZCIsInByZXZpb3VzU2libGluZyIsIkxkIiwiTWQiLCJOZCIsIk9kIiwiUGQiLCJRZCIsIlJkIiwiU2QiLCJUZCIsImRpc3BhdGNoQ29uZmlnIiwiVWQiLCJfdGFyZ2V0SW5zdCIsIlZkIiwiV2QiLCJYZCIsIllkIiwiWmQiLCIkZCIsImFlIiwiYmUiLCJjZSIsIkludGVyZmFjZSIsImlzRGVmYXVsdFByZXZlbnRlZCIsImRlZmF1bHRQcmV2ZW50ZWQiLCJyZXR1cm5WYWx1ZSIsImVlIiwiZXZlbnRQb29sIiwiZmUiLCJkZXN0cnVjdG9yIiwiZGUiLCJnZXRQb29sZWQiLCJwcmV2ZW50RGVmYXVsdCIsInN0b3BQcm9wYWdhdGlvbiIsImNhbmNlbEJ1YmJsZSIsInBlcnNpc3QiLCJldmVudFBoYXNlIiwiYnViYmxlcyIsImNhbmNlbGFibGUiLCJ0aW1lU3RhbXAiLCJub3ciLCJpc1RydXN0ZWQiLCJleHRlbmQiLCJnZSIsImhlIiwiaWUiLCJqZSIsImtlIiwiZG9jdW1lbnRNb2RlIiwibGUiLCJtZSIsIm5lIiwib2UiLCJiZWZvcmVJbnB1dCIsImNvbXBvc2l0aW9uRW5kIiwiY29tcG9zaXRpb25TdGFydCIsImNvbXBvc2l0aW9uVXBkYXRlIiwicGUiLCJxZSIsImtleUNvZGUiLCJkZXRhaWwiLCJzZSIsInZlIiwibG9jYWxlIiwid2hpY2giLCJ0ZSIsImN0cmxLZXkiLCJhbHRLZXkiLCJtZXRhS2V5IiwiY2hhciIsInVlIiwid2UiLCJjb2xvciIsImRhdGUiLCJkYXRldGltZSIsImVtYWlsIiwibW9udGgiLCJwYXNzd29yZCIsInJhbmdlIiwic2VhcmNoIiwidGVsIiwidGV4dCIsInRpbWUiLCJ1cmwiLCJ3ZWVrIiwieGUiLCJ5ZSIsImNoYW5nZSIsInplIiwiQWUiLCJCZSIsIkNlIiwiRGUiLCJFZSIsIkZlIiwiR2UiLCJkZXRhY2hFdmVudCIsIkhlIiwiSWUiLCJhdHRhY2hFdmVudCIsIkplIiwiS2UiLCJMZSIsIk1lIiwiX2lzSW5wdXRFdmVudFN1cHBvcnRlZCIsIk5lIiwidmlldyIsIk9lIiwiQWx0IiwiQ29udHJvbCIsIk1ldGEiLCJTaGlmdCIsIlBlIiwiZ2V0TW9kaWZpZXJTdGF0ZSIsIlFlIiwiUmUiLCJTZSIsIlRlIiwiVWUiLCJWZSIsInNjcmVlblgiLCJzY3JlZW5ZIiwiY2xpZW50WCIsImNsaWVudFkiLCJwYWdlWCIsInBhZ2VZIiwic2hpZnRLZXkiLCJidXR0b24iLCJidXR0b25zIiwicmVsYXRlZFRhcmdldCIsImZyb21FbGVtZW50IiwidG9FbGVtZW50IiwibW92ZW1lbnRYIiwibW92ZW1lbnRZIiwiV2UiLCJ3aWR0aCIsImhlaWdodCIsInByZXNzdXJlIiwidGFuZ2VudGlhbFByZXNzdXJlIiwidGlsdFgiLCJ0aWx0WSIsInR3aXN0IiwicG9pbnRlclR5cGUiLCJpc1ByaW1hcnkiLCJYZSIsIm1vdXNlRW50ZXIiLCJtb3VzZUxlYXZlIiwicG9pbnRlckVudGVyIiwicG9pbnRlckxlYXZlIiwiWWUiLCJkZWZhdWx0VmlldyIsIiRlIiwiYWYiLCJiZiIsImNmIiwiZGYiLCJzZWxlY3QiLCJlZiIsImZmIiwiZ2YiLCJoZiIsImpmIiwic3RhcnQiLCJzZWxlY3Rpb25TdGFydCIsInNlbGVjdGlvbkVuZCIsImFuY2hvck5vZGUiLCJnZXRTZWxlY3Rpb24iLCJhbmNob3JPZmZzZXQiLCJmb2N1c05vZGUiLCJmb2N1c09mZnNldCIsImtmIiwib25TZWxlY3QiLCJsZiIsImFuaW1hdGlvbk5hbWUiLCJlbGFwc2VkVGltZSIsInBzZXVkb0VsZW1lbnQiLCJtZiIsImNsaXBib2FyZERhdGEiLCJuZiIsIm9mIiwiY2hhckNvZGUiLCJwZiIsIkVzYyIsIlNwYWNlYmFyIiwiTGVmdCIsIlVwIiwiUmlnaHQiLCJEb3duIiwiRGVsIiwiV2luIiwiTWVudSIsIkFwcHMiLCJTY3JvbGwiLCJNb3pQcmludGFibGVLZXkiLCJxZiIsIjgiLCI5IiwiMTIiLCIxMyIsIjE2IiwiMTciLCIxOCIsIjE5IiwiMjAiLCIyNyIsIjMyIiwiMzMiLCIzNCIsIjM1IiwiMzYiLCIzNyIsIjM4IiwiMzkiLCI0MCIsIjQ1IiwiNDYiLCIxMTIiLCIxMTMiLCIxMTQiLCIxMTUiLCIxMTYiLCIxMTciLCIxMTgiLCIxMTkiLCIxMjAiLCIxMjEiLCIxMjIiLCIxMjMiLCIxNDQiLCIxNDUiLCIyMjQiLCJyZiIsInNmIiwiZGF0YVRyYW5zZmVyIiwidGYiLCJ0b3VjaGVzIiwidGFyZ2V0VG91Y2hlcyIsImNoYW5nZWRUb3VjaGVzIiwidWYiLCJ2ZiIsImRlbHRhWCIsIndoZWVsRGVsdGFYIiwiZGVsdGFZIiwid2hlZWxEZWx0YVkiLCJ3aGVlbERlbHRhIiwiZGVsdGFaIiwiZGVsdGFNb2RlIiwid2YiLCJTaW1wbGVFdmVudFBsdWdpbiIsIkVudGVyTGVhdmVFdmVudFBsdWdpbiIsIkNoYW5nZUV2ZW50UGx1Z2luIiwiU2VsZWN0RXZlbnRQbHVnaW4iLCJCZWZvcmVJbnB1dEV2ZW50UGx1Z2luIiwieWYiLCJ6ZiIsIkFmIiwiQmYiLCJDZiIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dCIsIkRmIiwiRWYiLCJGZiIsIkdmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQiLCJIZiIsIklmIiwiSmYiLCJLZiIsInVuc3RhYmxlX2NhbmNlbENhbGxiYWNrIiwiTGYiLCJ1bnN0YWJsZV9yZXF1ZXN0UGFpbnQiLCJNZiIsInVuc3RhYmxlX25vdyIsIk5mIiwidW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwiLCJPZiIsInVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5IiwiUGYiLCJRZiIsIlJmIiwidW5zdGFibGVfTG93UHJpb3JpdHkiLCJTZiIsInVuc3RhYmxlX0lkbGVQcmlvcml0eSIsIlRmIiwiVWYiLCJ1bnN0YWJsZV9zaG91bGRZaWVsZCIsIlZmIiwiV2YiLCJYZiIsIllmIiwiWmYiLCIkZiIsImFnIiwiYmciLCJjZyIsImRnIiwiZWciLCJmZyIsImdnIiwiaGciLCJpZyIsImpnIiwia2ciLCJsZyIsIm1nIiwibmciLCJvZyIsInBnIiwiY2hpbGRFeHBpcmF0aW9uVGltZSIsInFnIiwiZmlyc3RDb250ZXh0IiwiZXhwaXJhdGlvblRpbWUiLCJyZyIsInNnIiwicmVzcG9uZGVycyIsInRnIiwidWciLCJ1cGRhdGVRdWV1ZSIsImJhc2VTdGF0ZSIsImJhc2VRdWV1ZSIsInBlbmRpbmciLCJlZmZlY3RzIiwidmciLCJ3ZyIsInN1c3BlbnNlQ29uZmlnIiwicGF5bG9hZCIsInhnIiwieWciLCJ6ZyIsImNhIiwiQWciLCJCZyIsIkNnIiwiRGciLCJFZyIsIkZnIiwiSmciLCJfcmVhY3RJbnRlcm5hbEZpYmVyIiwiR2ciLCJIZyIsIklnIiwiS2ciLCJzaG91bGRDb21wb25lbnRVcGRhdGUiLCJMZyIsIk1nIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMiLCJOZyIsImdldFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCIsImNvbXBvbmVudFdpbGxNb3VudCIsIk9nIiwiUGciLCJfc3RyaW5nUmVmIiwiUWciLCJSZyIsImxhc3RFZmZlY3QiLCJuZXh0RWZmZWN0IiwiZmlyc3RFZmZlY3QiLCJTZyIsIlRnIiwiZWxlbWVudFR5cGUiLCJVZyIsImltcGxlbWVudGF0aW9uIiwiVmciLCJXZyIsIlhnIiwiWWciLCJaZyIsIiRnIiwiYWgiLCJiaCIsImNoIiwiZGgiLCJkb2N1bWVudEVsZW1lbnQiLCJ0YWdOYW1lIiwiZWgiLCJmaCIsImdoIiwiaGgiLCJtZW1vaXplZFByb3BzIiwicmV2ZWFsT3JkZXIiLCJpaCIsInJlc3BvbmRlciIsImpoIiwia2giLCJsaCIsIm1oIiwibmgiLCJvaCIsInBoIiwicWgiLCJyaCIsInNoIiwidGgiLCJxdWV1ZSIsInVoIiwidmgiLCJ3aCIsImxhc3RSZW5kZXJlZFJlZHVjZXIiLCJhY3Rpb24iLCJlYWdlclJlZHVjZXIiLCJlYWdlclN0YXRlIiwibGFzdFJlbmRlcmVkU3RhdGUiLCJkaXNwYXRjaCIsInhoIiwieWgiLCJ6aCIsIkFoIiwiZGVzdHJveSIsImRlcHMiLCJCaCIsIkNoIiwiRGgiLCJFaCIsIkZoIiwiR2giLCJIaCIsIkloIiwiSmgiLCJLaCIsIkxoIiwiTWgiLCJOaCIsInJlYWRDb250ZXh0IiwidXNlUmVzcG9uZGVyIiwidXNlRGVmZXJyZWRWYWx1ZSIsInVzZVRyYW5zaXRpb24iLCJPaCIsIlBoIiwiUWgiLCJSaCIsIlNoIiwiVGgiLCJwZW5kaW5nUHJvcHMiLCJVaCIsIlZoIiwiV2giLCJYaCIsIlloIiwiWmgiLCIkaCIsImFpIiwiYmkiLCJjaSIsImRpIiwiZWkiLCJmaSIsIlVOU0FGRV9jb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50V2lsbFVwZGF0ZSIsImNvbXBvbmVudERpZFVwZGF0ZSIsImdpIiwiaGkiLCJwZW5kaW5nQ29udGV4dCIsIm5pIiwicGkiLCJxaSIsImlpIiwicmV0cnlUaW1lIiwiamkiLCJmYWxsYmFjayIsInVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrIiwia2kiLCJsaSIsImlzQmFja3dhcmRzIiwicmVuZGVyaW5nIiwicmVuZGVyaW5nU3RhcnRUaW1lIiwibGFzdCIsInRhaWwiLCJ0YWlsRXhwaXJhdGlvbiIsInRhaWxNb2RlIiwibWkiLCJyaSIsInNpIiwid2FzTXVsdGlwbGUiLCJtdWx0aXBsZSIsIm9uQ2xpY2siLCJvbmNsaWNrIiwic2l6ZSIsImNyZWF0ZUVsZW1lbnROUyIsImNyZWF0ZVRleHROb2RlIiwidGkiLCJ1aSIsInZpIiwid2kiLCJ4aSIsInlpIiwiemkiLCJBaSIsInN0YWNrIiwiQmkiLCJXZWFrU2V0IiwiQ2kiLCJGaSIsIkVpIiwiR2kiLCJfX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZSIsIkhpIiwiSWkiLCJKaSIsImZvY3VzIiwiS2kiLCJMaSIsIkRpIiwiTWkiLCJOaSIsIk9pIiwiUGkiLCJRaSIsImluc3RhbmNlIiwiaW5zZXJ0QmVmb3JlIiwiX3JlYWN0Um9vdENvbnRhaW5lciIsIlJpIiwiU2kiLCJUaSIsIlVpIiwiVmkiLCJXaSIsIlhpIiwiZWxlbWVudCIsIllpIiwiWmkiLCIkaSIsImNvbXBvbmVudERpZENhdGNoIiwiYWoiLCJjb21wb25lbnRTdGFjayIsIlJqIiwiYmoiLCJjaiIsImRqIiwia2oiLCJsaiIsIm1qIiwibmoiLCJvaiIsInFqIiwicmoiLCJzaiIsInRqIiwidWoiLCJ2aiIsIndqIiwidGltZW91dE1zIiwieGoiLCJ5aiIsInpqIiwibGFzdEV4cGlyZWRUaW1lIiwiQWoiLCJmaXJzdFBlbmRpbmdUaW1lIiwibGFzdFBpbmdlZFRpbWUiLCJuZXh0S25vd25QZW5kaW5nTGV2ZWwiLCJjYWxsYmFja0V4cGlyYXRpb25UaW1lIiwiY2FsbGJhY2tQcmlvcml0eSIsImNhbGxiYWNrTm9kZSIsIkJqIiwidGltZW91dCIsIkNqIiwiRGoiLCJFaiIsIkZqIiwiR2oiLCJIaiIsImZpbmlzaGVkV29yayIsImZpbmlzaGVkRXhwaXJhdGlvblRpbWUiLCJsYXN0U3VzcGVuZGVkVGltZSIsIklqIiwidGltZW91dEhhbmRsZSIsIkpqIiwiYnVzeU1pbkR1cmF0aW9uTXMiLCJidXN5RGVsYXlNcyIsIktqIiwiTWoiLCJOaiIsInBpbmdDYWNoZSIsIk9qIiwidWIiLCJQaiIsIlhjIiwiUWoiLCJTaiIsImZpcnN0U3VzcGVuZGVkVGltZSIsInJhbmdlQ291bnQiLCJ3YiIsImFjdGl2ZUVsZW1lbnREZXRhY2hlZCIsImZvY3VzZWRFbGVtIiwic2VsZWN0aW9uUmFuZ2UiLCJUaiIsIndkIiwiY29udGFpbnMiLCJjb21wYXJlRG9jdW1lbnRQb3NpdGlvbiIsIm1pbiIsImNyZWF0ZVJhbmdlIiwic2V0U3RhcnQiLCJyZW1vdmVBbGxSYW5nZXMiLCJhZGRSYW5nZSIsInNldEVuZCIsImxlZnQiLCJzY3JvbGxMZWZ0IiwidG9wIiwic2Nyb2xsVG9wIiwidmIiLCJVaiIsIlZqIiwiV2oiLCJoaWRkZW4iLCJkZWZhdWx0Iiwib2IiLCJYaiIsInVuc3RhYmxlX29ic2VydmVkQml0cyIsIlpqIiwicGVuZGluZ0NoaWxkcmVuIiwiYWsiLCJiayIsImNrIiwiZGsiLCJlayIsImZrIiwiSmMiLCJfaW50ZXJuYWxSb290IiwiZ2siLCJpayIsImhhc0F0dHJpYnV0ZSIsImhrIiwiamsiLCJrayIsInVubW91bnQiLCJxdWVyeVNlbGVjdG9yQWxsIiwiZm9ybSIsIkxqIiwibGsiLCJFdmVudHMiLCJmaW5kRmliZXJCeUhvc3RJbnN0YW5jZSIsImJ1bmRsZVR5cGUiLCJyZW5kZXJlclBhY2thZ2VOYW1lIiwiaXNEaXNhYmxlZCIsInN1cHBvcnRzRmliZXIiLCJpbmplY3QiLCJvbkNvbW1pdEZpYmVyUm9vdCIsIm9uQ29tbWl0RmliZXJVbm1vdW50IiwiWWoiLCJvdmVycmlkZUhvb2tTdGF0ZSIsIm92ZXJyaWRlUHJvcHMiLCJzZXRTdXNwZW5zZUhhbmRsZXIiLCJzY2hlZHVsZVVwZGF0ZSIsImN1cnJlbnREaXNwYXRjaGVyUmVmIiwiZmluZEhvc3RJbnN0YW5jZUJ5RmliZXIiLCJmaW5kSG9zdEluc3RhbmNlc0ZvclJlZnJlc2giLCJzY2hlZHVsZVJlZnJlc2giLCJzY2hlZHVsZVJvb3QiLCJzZXRSZWZyZXNoSGFuZGxlciIsImdldEN1cnJlbnRGaWJlciIsImNyZWF0ZVBvcnRhbCIsImZpbmRET01Ob2RlIiwiZmx1c2hTeW5jIiwidW5tb3VudENvbXBvbmVudEF0Tm9kZSIsInVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIiwidW5zdGFibGVfY3JlYXRlUG9ydGFsIiwidW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXIiLCJNZXNzYWdlQ2hhbm5lbCIsInVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlIiwicGVyZm9ybWFuY2UiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInBvcnQyIiwicG9ydDEiLCJvbm1lc3NhZ2UiLCJwb3N0TWVzc2FnZSIsInNvcnRJbmRleCIsInN0YXJ0VGltZSIsInByaW9yaXR5TGV2ZWwiLCJ1bnN0YWJsZV9Qcm9maWxpbmciLCJ1bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbiIsInVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlIiwidW5zdGFibGVfbmV4dCIsInVuc3RhYmxlX3BhdXNlRXhlY3V0aW9uIiwiZGVsYXkiLCJ1bnN0YWJsZV93cmFwQ2FsbGJhY2siLCJSZWFjdFByb3BUeXBlc1NlY3JldCIsImVtcHR5RnVuY3Rpb24iLCJlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0IiwicmVzZXRXYXJuaW5nQ2FjaGUiLCJzaGltIiwicHJvcE5hbWUiLCJjb21wb25lbnROYW1lIiwicHJvcEZ1bGxOYW1lIiwic2VjcmV0IiwiZ2V0U2hpbSIsIlJlYWN0UHJvcFR5cGVzIiwiYm9vbCIsInN0cmluZyIsInN5bWJvbCIsImFueSIsImFycmF5T2YiLCJpbnN0YW5jZU9mIiwib2JqZWN0T2YiLCJvbmVPZiIsIm9uZU9mVHlwZSIsInNoYXBlIiwiZXhhY3QiLCJjaGVja1Byb3BUeXBlcyIsIkFzeW5jTW9kZSIsIkNvbmN1cnJlbnRNb2RlIiwiQ29udGV4dENvbnN1bWVyIiwiQ29udGV4dFByb3ZpZGVyIiwiTGF6eSIsIlBvcnRhbCIsImlzQXN5bmNNb2RlIiwiaXNDb25jdXJyZW50TW9kZSIsImlzQ29udGV4dENvbnN1bWVyIiwiaXNDb250ZXh0UHJvdmlkZXIiLCJpc0VsZW1lbnQiLCJpc0ZvcndhcmRSZWYiLCJpc0ZyYWdtZW50IiwiaXNMYXp5IiwiaXNQb3J0YWwiLCJpc1Byb2ZpbGVyIiwiaXNTdHJpY3RNb2RlIiwiaXNTdXNwZW5zZSIsImlzVmFsaWRFbGVtZW50VHlwZSIsInR5cGVPZiIsIkNTU1J1bGVMaXN0IiwiQ1NTU3R5bGVEZWNsYXJhdGlvbiIsIkNTU1ZhbHVlTGlzdCIsIkNsaWVudFJlY3RMaXN0IiwiRE9NUmVjdExpc3QiLCJET01TdHJpbmdMaXN0IiwiRE9NVG9rZW5MaXN0IiwiRGF0YVRyYW5zZmVySXRlbUxpc3QiLCJGaWxlTGlzdCIsIkhUTUxBbGxDb2xsZWN0aW9uIiwiSFRNTENvbGxlY3Rpb24iLCJIVE1MRm9ybUVsZW1lbnQiLCJIVE1MU2VsZWN0RWxlbWVudCIsIk1lZGlhTGlzdCIsIk1pbWVUeXBlQXJyYXkiLCJOYW1lZE5vZGVNYXAiLCJOb2RlTGlzdCIsIlBhaW50UmVxdWVzdExpc3QiLCJQbHVnaW4iLCJQbHVnaW5BcnJheSIsIlNWR0xlbmd0aExpc3QiLCJTVkdOdW1iZXJMaXN0IiwiU1ZHUGF0aFNlZ0xpc3QiLCJTVkdQb2ludExpc3QiLCJTVkdTdHJpbmdMaXN0IiwiU1ZHVHJhbnNmb3JtTGlzdCIsIlNvdXJjZUJ1ZmZlckxpc3QiLCJTdHlsZVNoZWV0TGlzdCIsIlRleHRUcmFja0N1ZUxpc3QiLCJUZXh0VHJhY2tMaXN0IiwiVG91Y2hMaXN0IiwiYWRkVG9VbnNjb3BhYmxlcyIsIkl0ZXJhdG9ycyIsImRlZmluZUl0ZXJhdG9yIiwic2V0SW50ZXJuYWxTdGF0ZSIsIml0ZXJhdGVkIiwia2luZCIsIkFyZ3VtZW50cyIsImNsYXNzb2YiLCJVTlNDT1BBQkxFUyIsIkFycmF5UHJvdG90eXBlIiwic2hhbSIsIm9iamVjdEtleXMiLCJpbnRlcm5hbE9iamVjdEtleXMiLCJ0b0xlbmd0aCIsInRvQWJzb2x1dGVJbmRleCIsImNyZWF0ZU1ldGhvZCIsIklTX0lOQ0xVREVTIiwiJHRoaXMiLCJlbCIsImZyb21JbmRleCIsImluY2x1ZGVzIiwidG9JbnRlZ2VyIiwibWF4IiwiaW50ZWdlciIsImdldEJ1aWx0SW4iLCIkIiwiY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvciIsInNldFByb3RvdHlwZU9mIiwic2V0VG9TdHJpbmdUYWciLCJyZWRlZmluZSIsIkl0ZXJhdG9yc0NvcmUiLCJyZXR1cm5UaGlzIiwiSXRlcmFibGUiLCJOQU1FIiwiSXRlcmF0b3JDb25zdHJ1Y3RvciIsIkRFRkFVTFQiLCJJU19TRVQiLCJGT1JDRUQiLCJDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUiLCJtZXRob2RzIiwiS0VZIiwiZ2V0SXRlcmF0aW9uTWV0aG9kIiwiS0lORCIsImRlZmF1bHRJdGVyYXRvciIsIkl0ZXJhYmxlUHJvdG90eXBlIiwiSU5DT1JSRUNUX1ZBTFVFU19OQU1FIiwibmF0aXZlSXRlcmF0b3IiLCJhbnlOYXRpdmVJdGVyYXRvciIsImVudHJpZXMiLCJwcm90byIsImZvcmNlZCIsImNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMiLCJpc0ZvcmNlZCIsInRhcmdldFByb3BlcnR5Iiwic291cmNlUHJvcGVydHkiLCJUQVJHRVQiLCJHTE9CQUwiLCJzdGF0IiwibmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUiLCJOQVNIT1JOX0JVRyIsIjEiLCJvd25LZXlzIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZSIsImdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZSIsInJlcGxhY2VtZW50IiwiZmVhdHVyZSIsImRldGVjdGlvbiIsIm5vcm1hbGl6ZSIsIlBPTFlGSUxMIiwiTkFUSVZFIiwiYVBvc3NpYmxlUHJvdG90eXBlIiwiQ09SUkVDVF9TRVRURVIiLCJSZWFjdFJlZHV4Q29udGV4dCIsImJhdGNoIiwibnVsbExpc3RlbmVycyIsIm5vdGlmeSIsImNyZWF0ZUxpc3RlbmVyQ29sbGVjdGlvbiIsImZpcnN0IiwibGlzdGVuZXIiLCJsaXN0ZW5lcnMiLCJzdWJzY3JpYmUiLCJpc1N1YnNjcmliZWQiLCJwcmV2IiwiU3Vic2NyaXB0aW9uIiwicGFyZW50U3ViIiwidW5zdWJzY3JpYmUiLCJoYW5kbGVDaGFuZ2VXcmFwcGVyIiwiYWRkTmVzdGVkU3ViIiwidHJ5U3Vic2NyaWJlIiwibm90aWZ5TmVzdGVkU3VicyIsIm9uU3RhdGVDaGFuZ2UiLCJCb29sZWFuIiwidHJ5VW5zdWJzY3JpYmUiLCJjb250ZXh0VmFsdWUiLCJzdWJzY3JpcHRpb24iLCJwcmV2aW91c1N0YXRlIiwiZ2V0U3RhdGUiLCJDb250ZXh0IiwiX2V4dGVuZHMiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImV4Y2x1ZGVkIiwic291cmNlS2V5cyIsInVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QiLCJyYW5kb21TdHJpbmciLCJBY3Rpb25UeXBlcyIsIklOSVQiLCJSRVBMQUNFIiwiUFJPQkVfVU5LTk9XTl9BQ1RJT04iLCJpc1BsYWluT2JqZWN0IiwidXNlUmVkdXhDb250ZXh0IiwiY3JlYXRlU3RvcmVIb29rIiwidXNlRGVmYXVsdFJlZHV4Q29udGV4dCIsInVzZVN0b3JlIiwiY3JlYXRlRGlzcGF0Y2hIb29rIiwidXNlRGVmYXVsdFN0b3JlIiwidXNlRGlzcGF0Y2giLCJyZWZFcXVhbGl0eSIsImNyZWF0ZVNlbGVjdG9ySG9vayIsInNlbGVjdG9yIiwiZXF1YWxpdHlGbiIsIl91c2VSZWR1eENvbnRleHQiLCJjb250ZXh0U3ViIiwic2VsZWN0ZWRTdGF0ZSIsImZvcmNlUmVuZGVyIiwibGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvciIsImxhdGVzdFNlbGVjdG9yIiwibGF0ZXN0U2VsZWN0ZWRTdGF0ZSIsImNoZWNrRm9yVXBkYXRlcyIsIm5ld1NlbGVjdGVkU3RhdGUiLCJ1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbiIsIm5ld0JhdGNoIiwidXNlU2VsZWN0b3IiLCJpbmljaWFsU3RhdGUiLCJ1c2VyIiwibm90ZXMiLCJjcmVhdGVTdG9yZSIsInJlZHVjZXIiLCJwcmVsb2FkZWRTdGF0ZSIsImVuaGFuY2VyIiwiX3JlZjIiLCJjdXJyZW50UmVkdWNlciIsImN1cnJlbnRTdGF0ZSIsImN1cnJlbnRMaXN0ZW5lcnMiLCJuZXh0TGlzdGVuZXJzIiwiaXNEaXNwYXRjaGluZyIsImVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMiLCJyZXBsYWNlUmVkdWNlciIsIm5leHRSZWR1Y2VyIiwib3V0ZXJTdWJzY3JpYmUiLCJvYnNlcnZlciIsIm9ic2VydmVTdGF0ZSIsIiQkb2JzZXJ2YWJsZSIsImNvcHlTdGF0ZSIsImNvcHlVc2VyIiwic2V0VXNlciIsImNvcHlOb3RlcyIsIm5ld05vdGUiLCJpbXBvcnRhbnQiLCJ1bnNoaWZ0IiwiYWRkTm90ZSIsImlzQWJzb2x1dGUiLCJwYXRobmFtZSIsInNwbGljZU9uZSIsImxpc3QiLCJyZXNvbHZlUGF0aG5hbWUiLCJoYXNUcmFpbGluZ1NsYXNoIiwidG9QYXJ0cyIsImZyb21QYXJ0cyIsImlzVG9BYnMiLCJpc0Zyb21BYnMiLCJtdXN0RW5kQWJzIiwidXAiLCJ2YWx1ZUVxdWFsIiwiZXZlcnkiLCJpdGVtIiwiYVZhbHVlIiwiYlZhbHVlIiwiaW52YXJpYW50IiwiYWRkTGVhZGluZ1NsYXNoIiwic3RyaXBMZWFkaW5nU2xhc2giLCJzdHJpcEJhc2VuYW1lIiwiaGFzQmFzZW5hbWUiLCJzdHJpcFRyYWlsaW5nU2xhc2giLCJjcmVhdGVQYXRoIiwiaGFzaCIsImNyZWF0ZUxvY2F0aW9uIiwiY3VycmVudExvY2F0aW9uIiwiaGFzaEluZGV4Iiwic2VhcmNoSW5kZXgiLCJwYXJzZVBhdGgiLCJkZWNvZGVVUkkiLCJVUklFcnJvciIsImNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyIiwicHJvbXB0Iiwic2V0UHJvbXB0IiwibmV4dFByb21wdCIsImNvbmZpcm1UcmFuc2l0aW9uVG8iLCJnZXRVc2VyQ29uZmlybWF0aW9uIiwiYXBwZW5kTGlzdGVuZXIiLCJpc0FjdGl2ZSIsIm5vdGlmeUxpc3RlbmVycyIsIl9sZW4iLCJfa2V5IiwiY2FuVXNlRE9NIiwiZ2V0Q29uZmlybWF0aW9uIiwiY29uZmlybSIsImdldEhpc3RvcnlTdGF0ZSIsImhpc3RvcnkiLCJjcmVhdGVCcm93c2VySGlzdG9yeSIsImdsb2JhbEhpc3RvcnkiLCJjYW5Vc2VIaXN0b3J5IiwibmF2aWdhdG9yIiwidXNlckFnZW50IiwibmVlZHNIYXNoQ2hhbmdlTGlzdGVuZXIiLCJfcHJvcHMiLCJfcHJvcHMkZm9yY2VSZWZyZXNoIiwiZm9yY2VSZWZyZXNoIiwiX3Byb3BzJGdldFVzZXJDb25maXJtIiwiX3Byb3BzJGtleUxlbmd0aCIsImtleUxlbmd0aCIsImJhc2VuYW1lIiwiZ2V0RE9NTG9jYXRpb24iLCJoaXN0b3J5U3RhdGUiLCJfd2luZG93JGxvY2F0aW9uIiwiY3JlYXRlS2V5IiwidHJhbnNpdGlvbk1hbmFnZXIiLCJuZXh0U3RhdGUiLCJoYW5kbGVQb3BTdGF0ZSIsImV2ZW50IiwiaXNFeHRyYW5lb3VzUG9wc3RhdGVFdmVudCIsImhhbmRsZVBvcCIsImhhbmRsZUhhc2hDaGFuZ2UiLCJmb3JjZU5leHRQb3AiLCJvayIsImZyb21Mb2NhdGlvbiIsInRvTG9jYXRpb24iLCJ0b0luZGV4IiwiYWxsS2V5cyIsImRlbHRhIiwiZ28iLCJyZXZlcnRQb3AiLCJpbml0aWFsTG9jYXRpb24iLCJjcmVhdGVIcmVmIiwibGlzdGVuZXJDb3VudCIsImNoZWNrRE9NTGlzdGVuZXJzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImlzQmxvY2tlZCIsInB1c2hTdGF0ZSIsInByZXZJbmRleCIsIm5leHRLZXlzIiwicmVwbGFjZVN0YXRlIiwiZ29CYWNrIiwiZ29Gb3J3YXJkIiwiYmxvY2siLCJ1bmJsb2NrIiwibGlzdGVuIiwidW5saXN0ZW4iLCJIYXNoUGF0aENvZGVycyIsImhhc2hiYW5nIiwiZW5jb2RlUGF0aCIsImRlY29kZVBhdGgiLCJub3NsYXNoIiwic2xhc2giLCJzdHJpcEhhc2giLCJnZXRIYXNoUGF0aCIsInJlcGxhY2VIYXNoUGF0aCIsImNyZWF0ZUhhc2hIaXN0b3J5IiwiX3Byb3BzJGhhc2hUeXBlIiwiaGFzaFR5cGUiLCJfSGFzaFBhdGhDb2RlcnMkaGFzaFQiLCJpZ25vcmVQYXRoIiwiZW5jb2RlZFBhdGgiLCJwcmV2TG9jYXRpb24iLCJhbGxQYXRocyIsImxhc3RJbmRleE9mIiwiYmFzZVRhZyIsInF1ZXJ5U2VsZWN0b3IiLCJnZXRBdHRyaWJ1dGUiLCJwdXNoSGFzaFBhdGgiLCJuZXh0UGF0aHMiLCJjbGFtcCIsImxvd2VyQm91bmQiLCJ1cHBlckJvdW5kIiwiY3JlYXRlTWVtb3J5SGlzdG9yeSIsIl9wcm9wcyRpbml0aWFsRW50cmllcyIsImluaXRpYWxFbnRyaWVzIiwiX3Byb3BzJGluaXRpYWxJbmRleCIsImluaXRpYWxJbmRleCIsImVudHJ5IiwibmV4dEluZGV4IiwibmV4dEVudHJpZXMiLCJjYW5HbyIsImhpc3RvcnlDb250ZXh0IiwiY3JlYXRlTmFtZWRDb250ZXh0IiwiUm91dGVyIiwiY29tcHV0ZVJvb3RNYXRjaCIsInBhcmFtcyIsImlzRXhhY3QiLCJfcGVuZGluZ0xvY2F0aW9uIiwiUm91dGVyQ29udGV4dCIsInN0YXRpY0NvbnRleHQiLCJIaXN0b3J5Q29udGV4dCIsIkxpZmVjeWNsZSIsIm9uTW91bnQiLCJwcmV2UHJvcHMiLCJvblVubW91bnQiLCJjYWNoZSIsImNhY2hlQ291bnQiLCJnZW5lcmF0ZVBhdGgiLCJnZW5lcmF0b3IiLCJjb21waWxlUGF0aCIsIlJlZGlyZWN0IiwiY29tcHV0ZWRNYXRjaCIsIm1hdGNoUGF0aCIsIm1hdGNoZWQiLCJjYWNoZUtleSIsInJlZ2V4cCIsIlJvdXRlIiwiY3JlYXRlVVJMIiwic3RhdGljSGFuZGxlciIsIm1ldGhvZE5hbWUiLCJub29wIiwiU3dpdGNoIiwidXNlUm91dGVNYXRjaCIsIkJyb3dzZXJSb3V0ZXIiLCJjcmVhdGVIaXN0b3J5IiwicmVzb2x2ZVRvTG9jYXRpb24iLCJub3JtYWxpemVUb0xvY2F0aW9uIiwiZm9yd2FyZFJlZlNoaW0iLCJMaW5rQW5jaG9yIiwiaW5uZXJSZWYiLCJuYXZpZ2F0ZSIsInJlc3QiLCJleCIsImlzTW9kaWZpZWRFdmVudCIsImZvcndhcmRlZFJlZiIsIkxpbmsiLCJhcmlhQ3VycmVudCIsImFjdGl2ZUNsYXNzTmFtZSIsImFjdGl2ZVN0eWxlIiwiY2xhc3NOYW1lUHJvcCIsImNsYXNzTmFtZSIsImlzQWN0aXZlUHJvcCIsImxvY2F0aW9uUHJvcCIsInN0eWxlUHJvcCIsImVzY2FwZWRQYXRoIiwiY2xhc3NuYW1lcyIsImpvaW5DbGFzc25hbWVzIiwiTWFpblBhZ2UiLCJCdXR0b24iLCJjb3VudGVyIiwiYXR0cnMiLCJjbHMiLCJtb2RlMSIsIm1vZGUyIiwiaW5uZXJDb250ZW50IiwiY3JlYXRlU2lnbiIsInNpZ24iLCJUb3BOYXZMaW5rIiwibGFiZWwiLCJUb3BOYXZFbnRyYW5jZSIsIlRvcE5hdmlnYXRpb24iLCJyZWdCdG4iLCJlbnRlckJ0biIsIndyYXBwZXIiLCJBdXRoU3BsaXRDb250YWluZXIiLCJsZWZ0UGFydCIsInJpZ2h0UGFydCIsIlJlZ1BhZ2UiLCJpc01lcmdlYWJsZU9iamVjdCIsImlzTm9uTnVsbE9iamVjdCIsInN0cmluZ1ZhbHVlIiwiUkVBQ1RfRUxFTUVOVF9UWVBFIiwiaXNSZWFjdEVsZW1lbnQiLCJpc1NwZWNpYWwiLCJjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCIsImNsb25lIiwiZGVlcG1lcmdlIiwiZGVmYXVsdEFycmF5TWVyZ2UiLCJhcnJheU1lcmdlIiwic291cmNlSXNBcnJheSIsImRlc3RpbmF0aW9uIiwibWVyZ2VPYmplY3QiLCJkZWVwbWVyZ2VfMSIsIm9iamVjdFByb3RvIiwibmF0aXZlT2JqZWN0VG9TdHJpbmciLCJzeW1Ub1N0cmluZ1RhZyIsImdldFJhd1RhZyIsImlzT3duIiwidW5tYXNrZWQiLCJvYmplY3RUb1N0cmluZyIsImJhc2VHZXRUYWciLCJvdmVyQXJnIiwidHJhbnNmb3JtIiwiZ2V0UHJvdG90eXBlIiwiaXNPYmplY3RMaWtlIiwiZnVuY1Byb3RvIiwiZnVuY1RvU3RyaW5nIiwib2JqZWN0Q3RvclN0cmluZyIsIkN0b3IiLCJsaXN0Q2FjaGVDbGVhciIsIl9fZGF0YV9fIiwiZXEiLCJvdGhlciIsImFzc29jSW5kZXhPZiIsImxpc3RDYWNoZURlbGV0ZSIsImxpc3RDYWNoZUdldCIsImxpc3RDYWNoZUhhcyIsImxpc3RDYWNoZVNldCIsIkxpc3RDYWNoZSIsInN0YWNrQ2xlYXIiLCJzdGFja0RlbGV0ZSIsInN0YWNrR2V0Iiwic3RhY2tIYXMiLCJpc0Z1bmN0aW9uIiwiY29yZUpzRGF0YSIsIm1hc2tTcmNLZXkiLCJpc01hc2tlZCIsInRvU291cmNlIiwicmVJc0hvc3RDdG9yIiwicmVJc05hdGl2ZSIsImJhc2VJc05hdGl2ZSIsImdldE5hdGl2ZSIsIm5hdGl2ZUNyZWF0ZSIsImhhc2hDbGVhciIsImhhc2hEZWxldGUiLCJoYXNoR2V0IiwiaGFzaEhhcyIsImhhc2hTZXQiLCJIYXNoIiwibWFwQ2FjaGVDbGVhciIsImlzS2V5YWJsZSIsImdldE1hcERhdGEiLCJtYXBDYWNoZURlbGV0ZSIsIm1hcENhY2hlR2V0IiwibWFwQ2FjaGVIYXMiLCJtYXBDYWNoZVNldCIsIk1hcENhY2hlIiwic3RhY2tTZXQiLCJwYWlycyIsIkxBUkdFX0FSUkFZX1NJWkUiLCJTdGFjayIsImFycmF5RWFjaCIsIml0ZXJhdGVlIiwiYmFzZUFzc2lnblZhbHVlIiwiYXNzaWduVmFsdWUiLCJvYmpWYWx1ZSIsImNvcHlPYmplY3QiLCJjdXN0b21pemVyIiwiaXNOZXciLCJiYXNlVGltZXMiLCJiYXNlSXNBcmd1bWVudHMiLCJpc0FyZ3VtZW50cyIsInJlSXNVaW50IiwiaXNJbmRleCIsImlzTGVuZ3RoIiwidHlwZWRBcnJheVRhZ3MiLCJiYXNlSXNUeXBlZEFycmF5IiwiYmFzZVVuYXJ5Iiwibm9kZUlzVHlwZWRBcnJheSIsImlzVHlwZWRBcnJheSIsImFycmF5TGlrZUtleXMiLCJpbmhlcml0ZWQiLCJpc0FyciIsImlzQXJnIiwiaXNCdWZmIiwiaXNUeXBlIiwic2tpcEluZGV4ZXMiLCJpc1Byb3RvdHlwZSIsIm5hdGl2ZUtleXMiLCJiYXNlS2V5cyIsImlzQXJyYXlMaWtlIiwiYmFzZUFzc2lnbiIsIm5hdGl2ZUtleXNJbiIsImJhc2VLZXlzSW4iLCJpc1Byb3RvIiwia2V5c0luIiwiYmFzZUFzc2lnbkluIiwiY29weUFycmF5IiwiYXJyYXlGaWx0ZXIiLCJwcmVkaWNhdGUiLCJyZXNJbmRleCIsInN0dWJBcnJheSIsIm5hdGl2ZUdldFN5bWJvbHMiLCJnZXRTeW1ib2xzIiwiY29weVN5bWJvbHMiLCJhcnJheVB1c2giLCJnZXRTeW1ib2xzSW4iLCJjb3B5U3ltYm9sc0luIiwiYmFzZUdldEFsbEtleXMiLCJrZXlzRnVuYyIsInN5bWJvbHNGdW5jIiwiZ2V0QWxsS2V5cyIsImdldEFsbEtleXNJbiIsIkRhdGFWaWV3IiwiZGF0YVZpZXdDdG9yU3RyaW5nIiwibWFwQ3RvclN0cmluZyIsInByb21pc2VDdG9yU3RyaW5nIiwic2V0Q3RvclN0cmluZyIsIndlYWtNYXBDdG9yU3RyaW5nIiwiZ2V0VGFnIiwiQXJyYXlCdWZmZXIiLCJjdG9yU3RyaW5nIiwiaW5pdENsb25lQXJyYXkiLCJVaW50OEFycmF5IiwiY2xvbmVBcnJheUJ1ZmZlciIsImFycmF5QnVmZmVyIiwiYnl0ZUxlbmd0aCIsImNsb25lRGF0YVZpZXciLCJkYXRhVmlldyIsImJ5dGVPZmZzZXQiLCJyZUZsYWdzIiwiY2xvbmVSZWdFeHAiLCJsYXN0SW5kZXgiLCJzeW1ib2xQcm90byIsInN5bWJvbFZhbHVlT2YiLCJjbG9uZVN5bWJvbCIsImNsb25lVHlwZWRBcnJheSIsInR5cGVkQXJyYXkiLCJpbml0Q2xvbmVCeVRhZyIsIm9iamVjdENyZWF0ZSIsImJhc2VDcmVhdGUiLCJpbml0Q2xvbmVPYmplY3QiLCJiYXNlSXNNYXAiLCJub2RlSXNNYXAiLCJpc01hcCIsImJhc2VJc1NldCIsIm5vZGVJc1NldCIsImlzU2V0IiwiY2xvbmVhYmxlVGFncyIsImJhc2VDbG9uZSIsImJpdG1hc2siLCJpc0ZsYXQiLCJpc0Z1bGwiLCJpc0Z1bmMiLCJzdGFja2VkIiwic3ViVmFsdWUiLCJhcnJheU1hcCIsImlzU3ltYm9sIiwibWVtb2l6ZSIsInJlc29sdmVyIiwibWVtb2l6ZWQiLCJtZW1vaXplQ2FwcGVkIiwicmVQcm9wTmFtZSIsInJlRXNjYXBlQ2hhciIsInN0cmluZ1RvUGF0aCIsInF1b3RlIiwic3ViU3RyaW5nIiwidG9LZXkiLCJzeW1ib2xUb1N0cmluZyIsImJhc2VUb1N0cmluZyIsInRvUGF0aCIsImNsb25lRGVlcCIsIkNMT05FX0RFRVBfRkxBRyIsImlzRW1wdHlBcnJheSIsImlzSW50ZWdlciIsIk51bWJlciIsImlzU3RyaW5nIiwiaXNFbXB0eUNoaWxkcmVuIiwiaXNQcm9taXNlIiwiZ2V0SW4iLCJkZWYiLCJzZXRJbiIsInJlc1ZhbCIsInBhdGhBcnJheSIsImN1cnJlbnRQYXRoIiwiY3VycmVudE9iaiIsIm5leHRQYXRoIiwic2V0TmVzdGVkT2JqZWN0VmFsdWVzIiwicmVzcG9uc2UiLCJGb3JtaWtDb250ZXh0IiwiRm9ybWlrUHJvdmlkZXIiLCJGb3JtaWtDb25zdW1lciIsInVzZUZvcm1pa0NvbnRleHQiLCJmb3JtaWsiLCJmb3JtaWtSZWR1Y2VyIiwibXNnIiwidG91Y2hlZCIsImlzRXF1YWwiLCJlcnJvcnMiLCJpc1N1Ym1pdHRpbmciLCJpc1ZhbGlkYXRpbmciLCJzdWJtaXRDb3VudCIsImVtcHR5RXJyb3JzIiwiZW1wdHlUb3VjaGVkIiwidXNlRm9ybWlrIiwidmFsaWRhdGVPbkNoYW5nZSIsInZhbGlkYXRlT25CbHVyIiwidmFsaWRhdGVPbk1vdW50IiwiaXNJbml0aWFsVmFsaWQiLCJlbmFibGVSZWluaXRpYWxpemUiLCJvblN1Ym1pdCIsImluaXRpYWxWYWx1ZXMiLCJpbml0aWFsRXJyb3JzIiwiaW5pdGlhbFRvdWNoZWQiLCJpbml0aWFsU3RhdHVzIiwiZmllbGRSZWdpc3RyeSIsInJ1blZhbGlkYXRlSGFuZGxlciIsIm1heWJlUHJvbWlzZWRFcnJvcnMiLCJhY3R1YWxFeGNlcHRpb24iLCJydW5WYWxpZGF0aW9uU2NoZW1hIiwidmFsaWRhdGlvblNjaGVtYSIsInNjaGVtYSIsImZpZWxkIiwic3luYyIsInZhbGlkYXRlRGF0YSIsInByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbiIsImFib3J0RWFybHkiLCJ2YWxpZGF0ZVl1cFNjaGVtYSIsInl1cEVycm9yIiwieXVwVG9Gb3JtRXJyb3JzIiwicnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb24iLCJydW5GaWVsZExldmVsVmFsaWRhdGlvbnMiLCJmaWVsZEtleXNXaXRoVmFsaWRhdGlvbiIsImZpZWxkVmFsaWRhdGlvbnMiLCJmaWVsZEVycm9yc0xpc3QiLCJjdXJyIiwicnVuQWxsVmFsaWRhdGlvbnMiLCJmaWVsZEVycm9ycyIsInNjaGVtYUVycm9ycyIsInZhbGlkYXRlRXJyb3JzIiwidmFsaWRhdGVGb3JtV2l0aExvd1ByaW9yaXR5IiwidXNlRXZlbnRDYWxsYmFjayIsImNvbWJpbmVkRXJyb3JzIiwidmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSIsInJlc2V0Rm9ybSIsImRpc3BhdGNoRm4iLCJtYXliZVByb21pc2VkT25SZXNldCIsInZhbGlkYXRlRmllbGQiLCJtYXliZVByb21pc2UiLCJyZWdpc3RlckZpZWxkIiwidmFsaWRhdGUiLCJ1bnJlZ2lzdGVyRmllbGQiLCJzZXRUb3VjaGVkIiwic2hvdWxkVmFsaWRhdGUiLCJzZXRFcnJvcnMiLCJzZXRWYWx1ZXMiLCJzZXRGaWVsZEVycm9yIiwic2V0RmllbGRWYWx1ZSIsImV4ZWN1dGVDaGFuZ2UiLCJldmVudE9yVGV4dFZhbHVlIiwibWF5YmVQYXRoIiwicGFyc2VkIiwicGFyc2VGbG9hdCIsImN1cnJlbnRWYWx1ZSIsImN1cnJlbnRBcnJheU9mVmFsdWVzIiwiaXNWYWx1ZUluQXJyYXkiLCJ2YWx1ZVByb3AiLCJnZXRWYWx1ZUZvckNoZWNrYm94IiwiZ2V0U2VsZWN0ZWRWYWx1ZXMiLCJoYW5kbGVDaGFuZ2UiLCJzZXRGaWVsZFRvdWNoZWQiLCJleGVjdXRlQmx1ciIsIm91dGVySFRNTCIsImhhbmRsZUJsdXIiLCJzZXRGb3JtaWtTdGF0ZSIsInN0YXRlT3JDYiIsInNldFN0YXR1cyIsInNldFN1Ym1pdHRpbmciLCJzdWJtaXRGb3JtIiwiaXNJbnN0YW5jZU9mRXJyb3IiLCJwcm9taXNlT3JVbmRlZmluZWQiLCJleGVjdXRlU3VibWl0IiwiX2Vycm9ycyIsImhhbmRsZVN1Ym1pdCIsInJlYXNvbiIsImltcGVyYXRpdmVNZXRob2RzIiwidmFsaWRhdGVGb3JtIiwiaGFuZGxlUmVzZXQiLCJnZXRGaWVsZE1ldGEiLCJpbml0aWFsRXJyb3IiLCJnZXRGaWVsZEhlbHBlcnMiLCJzZXRFcnJvciIsImdldEZpZWxkUHJvcHMiLCJpc0FuT2JqZWN0IiwibmFtZU9yT3B0aW9ucyIsInZhbHVlU3RhdGUiLCJvbkNoYW5nZSIsIm9uQmx1ciIsImRpcnR5IiwiaXNWYWxpZCIsIkZvcm1payIsImZvcm1pa2JhZyIsInNob3VsZENsb25lIiwiRm9ybSIsIl9hY3Rpb24iLCJvblJlc2V0IiwiY29ubmVjdCIsIkNvbXAiLCJjb21wb25lbnREaXNwbGF5TmFtZSIsImluc2VydCIsImNvcHlBcnJheUxpa2UiLCJhcnJheUxpa2UiLCJtYXhJbmRleCIsInBhcnNlSW50IiwiRmllbGRBcnJheUlubmVyIiwidXBkYXRlQXJyYXlGaWVsZCIsInVwZGF0ZUVycm9ycyIsImFsdGVyRXJyb3JzIiwidXBkYXRlVG91Y2hlZCIsImFsdGVyVG91Y2hlZCIsInByZXZTdGF0ZSIsImZpZWxkRXJyb3IiLCJmaWVsZFRvdWNoZWQiLCJoYW5kbGVQdXNoIiwic3dhcCIsImluZGV4QSIsImhhbmRsZVN3YXAiLCJtb3ZlIiwiaGFuZGxlTW92ZSIsImhhbmRsZUluc2VydCIsImhhbmRsZVJlcGxhY2UiLCJoYW5kbGVVbnNoaWZ0IiwiaGFuZGxlUmVtb3ZlIiwicmVtb3ZlIiwidG1wIiwiYXJyYXlIZWxwZXJzIiwicmVzdE9mRm9ybWlrIiwiRm9ybUhlYWRlciIsIlRhZyIsImgyIiwiaDMiLCJpbmRlbnQiLCJfZGVmaW5lUHJvcGVydGllcyIsImJhc2VIYXMiLCJyZUlzRGVlcFByb3AiLCJyZUlzUGxhaW5Qcm9wIiwiaXNLZXkiLCJjYXN0UGF0aCIsImhhc1BhdGgiLCJoYXNGdW5jIiwiY2xvbmVEZWVwV2l0aCIsIml0ZXJhdG9yVG9BcnJheSIsIm1hcFRvQXJyYXkiLCJzZXRUb0FycmF5IiwiYXNjaWlUb0FycmF5IiwicmVIYXNVbmljb2RlIiwiaGFzVW5pY29kZSIsInJzQXN0cmFsIiwicnNDb21ibyIsInJzRml0eiIsInJzTm9uQXN0cmFsIiwicnNSZWdpb25hbCIsInJzU3VyclBhaXIiLCJyZU9wdE1vZCIsInJzU2VxIiwicnNTeW1ib2wiLCJyZVVuaWNvZGUiLCJ1bmljb2RlVG9BcnJheSIsInN0cmluZ1RvQXJyYXkiLCJiYXNlVmFsdWVzIiwic3ltSXRlcmF0b3IiLCJlcnJvclRvU3RyaW5nIiwicmVnRXhwVG9TdHJpbmciLCJTWU1CT0xfUkVHRVhQIiwicHJpbnRTaW1wbGVWYWx1ZSIsInF1b3RlU3RyaW5ncyIsInByaW50TnVtYmVyIiwidG9JU09TdHJpbmciLCJwcmludFZhbHVlIiwibWl4ZWQiLCJyZXF1aXJlZCIsIm5vdE9uZU9mIiwibm90VHlwZSIsIm9yaWdpbmFsVmFsdWUiLCJpc0Nhc3QiLCJkZWZpbmVkIiwibG93ZXJjYXNlIiwidXBwZXJjYXNlIiwibGVzc1RoYW4iLCJtb3JlVGhhbiIsIm5vdEVxdWFsIiwicG9zaXRpdmUiLCJuZWdhdGl2ZSIsIm5vVW5rbm93biIsIl9faXNZdXBTY2hlbWFfXyIsIkNvbmRpdGlvbiIsIm90aGVyd2lzZSIsIl9sZW4yIiwiX2tleTIiLCJicmFuY2giLCJpc1NjaGVtYSIsInN0clJlZyIsIl8iLCJWYWxpZGF0aW9uRXJyb3IiLCJpbm5lciIsImNhcHR1cmVTdGFja1RyYWNlIiwiaXNFcnJvciIsImZvcm1hdEVycm9yIiwicHJvcGFnYXRlRXJyb3JzIiwiZW5kRWFybHkiLCJjb2xsZWN0RXJyb3JzIiwidmFsaWRhdGlvbnMiLCJzb3J0IiwidW53cmFwRXJyb3IiLCJwcm9taXNlcyIsImZ1bGZpbGxlZCIsInNldHRsZWQiLCJyZXN1bHRzIiwibmVzdGVkRXJyb3JzIiwicnVuVmFsaWRhdGlvbnMiLCJfcmVmMyIsImNyZWF0ZUJhc2VGb3IiLCJiYXNlRm9yIiwiZnJvbVJpZ2h0IiwiaXRlcmFibGUiLCJiYXNlRm9yT3duIiwic2V0Q2FjaGVBZGQiLCJzZXRDYWNoZUhhcyIsIlNldENhY2hlIiwiYXJyYXlTb21lIiwiY2FjaGVIYXMiLCJlcXVhbEFycmF5cyIsImVxdWFsRnVuYyIsImlzUGFydGlhbCIsImFyckxlbmd0aCIsIm90aExlbmd0aCIsInNlZW4iLCJhcnJWYWx1ZSIsIm90aFZhbHVlIiwiY29tcGFyZWQiLCJvdGhJbmRleCIsImVxdWFsQnlUYWciLCJjb252ZXJ0IiwiZXF1YWxPYmplY3RzIiwib2JqUHJvcHMiLCJvYmpMZW5ndGgiLCJza2lwQ3RvciIsIm9iakN0b3IiLCJvdGhDdG9yIiwiYmFzZUlzRXF1YWxEZWVwIiwib2JqSXNBcnIiLCJvdGhJc0FyciIsIm9ialRhZyIsIm90aFRhZyIsIm9iaklzT2JqIiwib3RoSXNPYmoiLCJpc1NhbWVUYWciLCJvYmpJc1dyYXBwZWQiLCJvdGhJc1dyYXBwZWQiLCJvYmpVbndyYXBwZWQiLCJvdGhVbndyYXBwZWQiLCJiYXNlSXNFcXVhbCIsImJhc2VJc01hdGNoIiwibWF0Y2hEYXRhIiwibm9DdXN0b21pemVyIiwic3JjVmFsdWUiLCJDT01QQVJFX1BBUlRJQUxfRkxBRyIsImlzU3RyaWN0Q29tcGFyYWJsZSIsImdldE1hdGNoRGF0YSIsIm1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIiwiYmFzZU1hdGNoZXMiLCJiYXNlR2V0IiwiYmFzZUhhc0luIiwiaGFzSW4iLCJiYXNlTWF0Y2hlc1Byb3BlcnR5IiwiaWRlbnRpdHkiLCJiYXNlUHJvcGVydHkiLCJiYXNlUHJvcGVydHlEZWVwIiwiYmFzZUl0ZXJhdGVlIiwibWFwVmFsdWVzIiwicHJlZml4ZXMiLCJSZWZlcmVuY2UiLCJpc0NvbnRleHQiLCJpc1ZhbHVlIiwiaXNTaWJsaW5nIiwiY2FzdCIsImRlc2NyaWJlIiwiaXNSZWYiLCJfX2lzWXVwUmVmIiwiY3JlYXRlRXJyb3JGYWN0b3J5IiwiX3RlbXAiLCJfcmVmMiRwYXRoIiwiX3JlZjIkbWVzc2FnZSIsIl9yZWYyJHR5cGUiLCJvbGRQYXJhbXMiLCJuZXdQYXJhbXMiLCJyZXNvbHZlUGFyYW1zIiwiY3JlYXRlVmFsaWRhdGlvbiIsIlJlZiIsImNyZWF0ZUVycm9yIiwiY3R4IiwidGVzdEZuIiwicnVuVGVzdCIsInZhbGlkT3JFcnJvciIsIk9QVElPTlMiLCJsYXN0UGFydCIsImxhc3RQYXJ0RGVidWciLCJfcGFydCIsImlubmVyVHlwZSIsImZpZWxkcyIsIl90eXBlIiwicGFyZW50UGF0aCIsIlJlZlNldCIsIkNvbnN0cnVjdG9yIiwicHJvdG9Qcm9wcyIsInN0YXRpY1Byb3BzIiwiZGVzY3JpcHRpb24iLCJfaXRlcmF0b3IiLCJfaXNBcnJheSIsIl9pIiwiX2l0ZXJhdG9yMiIsIl9pc0FycmF5MiIsIl9pMiIsIl90b0FycmF5IiwibWVyZ2UiLCJuZXdJdGVtcyIsInJlbW92ZUl0ZW1zIiwiU2NoZW1hVHlwZSIsIl9kZXBzIiwiX2NvbmRpdGlvbnMiLCJfb3B0aW9ucyIsInJlY3Vyc2l2ZSIsIl9leGNsdXNpdmUiLCJfd2hpdGVsaXN0IiwiX2JsYWNrbGlzdCIsInRlc3RzIiwidHJhbnNmb3JtcyIsIndpdGhNdXRhdGlvbiIsInR5cGVFcnJvciIsIl9kZWZhdWx0RGVmYXVsdCIsIl9tdXRhdGUiLCJfbGFiZWwiLCJfbWV0YSIsImJlZm9yZSIsInByZXBlbmREZWVwIiwic291cmNlVmFsIiwidGFyZ2V0VmFsIiwiX2RlZmF1bHQiLCJfbnVsbGFibGUiLCJfdHlwZUNoZWNrIiwiY29uZGl0aW9ucyIsInJlc29sdmVkU2NoZW1hIiwiX2Nhc3QiLCJhc3NlcnQiLCJmb3JtYXR0ZWRWYWx1ZSIsImZvcm1hdHRlZFJlc3VsdCIsInJhd1ZhbHVlIiwiX3RoaXMzIiwiX3ZhbGlkYXRlIiwiX3ZhbHVlIiwiX3RoaXM0IiwiaXNTdHJpY3QiLCJfb3B0aW9uIiwidmFsaWRhdGlvblBhcmFtcyIsImluaXRpYWxUZXN0cyIsIl90eXBlRXJyb3IiLCJfd2hpdGVsaXN0RXJyb3IiLCJfYmxhY2tsaXN0RXJyb3IiLCJ2YWxpZGF0ZVN5bmMiLCJpc1ZhbGlkU3luYyIsImdldERlZmF1bHQiLCJfaXNQcmVzZW50IiwiZXhjbHVzaXZlIiwibm90UmVxdWlyZWQiLCJudWxsYWJsZSIsImlzTnVsbGFibGUiLCJpc0V4Y2x1c2l2ZSIsIndoZW4iLCJkZXAiLCJlbnVtcyIsInZhbGlkcyIsImludmFsaWRzIiwic3RyaXAiLCJfc3RyaXAiLCJvdmVycmlkZXMiLCJmaW5kSW5kZXgiLCJfbG9vcCIsIl9hcnIiLCJfaTMiLCJfZ2V0SW4iLCJfaTQiLCJfYXJyMiIsIl9pNSIsIl9hcnIzIiwiaW5oZXJpdHMiLCJjdG9yIiwic3VwZXJDdG9yIiwic3BlYyIsIkJvb2xlYW5TY2hlbWEiLCJNaXhlZFNjaGVtYSIsInJFbWFpbCIsInJVcmwiLCJpc1RyaW1tZWQiLCJpc0Fic2VudCIsIlN0cmluZ1NjaGVtYSIsIl9sZW5ndGgiLCJfbWluIiwiX21heCIsInJlZ2V4IiwiZXhjbHVkZUVtcHR5U3RyaW5nIiwiZW5zdXJlIiwiTnVtYmVyU2NoZW1hIiwiTmFOIiwibGVzcyIsIm1vcmUiLCJ0cnVuY2F0ZSIsInJvdW5kIiwiYXZhaWwiLCJpc29SZWciLCJpbnZhbGlkRGF0ZSIsIkRhdGVTY2hlbWEiLCJ0aW1lc3RhbXAiLCJzdHJ1Y3QiLCJudW1lcmljS2V5cyIsIm1pbnV0ZXNPZmZzZXQiLCJVVEMiLCJpc29QYXJzZSIsIl90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZSIsInN0cmluZ3MiLCJyYXciLCJsaW1pdCIsImFycmF5UmVkdWNlIiwiYWNjdW11bGF0b3IiLCJpbml0QWNjdW0iLCJiYXNlUHJvcGVydHlPZiIsImRlYnVyckxldHRlciIsInJlTGF0aW4iLCJyZUNvbWJvTWFyayIsImRlYnVyciIsInJlQXNjaWlXb3JkIiwiYXNjaWlXb3JkcyIsInJlSGFzVW5pY29kZVdvcmQiLCJoYXNVbmljb2RlV29yZCIsInJzQnJlYWtSYW5nZSIsInJzTWF0aE9wUmFuZ2UiLCJyc0JyZWFrIiwicnNEaWdpdHMiLCJyc0RpbmdiYXQiLCJyc0xvd2VyIiwicnNNaXNjIiwicnNVcHBlciIsInJzTWlzY0xvd2VyIiwicnNNaXNjVXBwZXIiLCJyc01vZGlmaWVyIiwicnNFbW9qaSIsInJlVW5pY29kZVdvcmQiLCJ1bmljb2RlV29yZHMiLCJ3b3JkcyIsImd1YXJkIiwicmVBcG9zIiwiY3JlYXRlQ29tcG91bmRlciIsInNuYWtlQ2FzZSIsIndvcmQiLCJiYXNlU2xpY2UiLCJjYXN0U2xpY2UiLCJjcmVhdGVDYXNlRmlyc3QiLCJ1cHBlckZpcnN0Iiwic3RyU3ltYm9scyIsImNociIsInRyYWlsaW5nIiwiY2FwaXRhbGl6ZSIsImNhbWVsQ2FzZSIsIm1hcEtleXMiLCJzb3J0RmllbGRzIiwiZXhjbHVkZXMiLCJhZGROb2RlIiwiZGVwUGF0aCIsInJldmVyc2UiLCJJbmZpbml0eSIsInNvbWUiLCJtYWtlUGF0aCIsIl90ZW1wbGF0ZU9iamVjdDMiLCJfdGVtcGxhdGVPYmplY3QyIiwiX3RlbXBsYXRlT2JqZWN0IiwiT2JqZWN0U2NoZW1hIiwiX25vZGVzIiwiZGZ0IiwiX2V4Y2x1ZGVkRWRnZXMiLCJpbnRlcm1lZGlhdGVWYWx1ZSIsImlubmVyT3B0aW9ucyIsIl9fdmFsaWRhdGluZyIsImlzQ2hhbmdlZCIsInByb3AiLCJleGlzdHMiLCJmaWVsZFZhbHVlIiwiX2Zyb20iLCJhbGlhcyIsImZyb21HZXR0ZXIiLCJuZXdPYmoiLCJub0FsbG93IiwidW5rbm93bktleXMiLCJrbm93biIsInVua25vd24iLCJzdHJpcFVua25vd24iLCJhbGxvdyIsInRyYW5zZm9ybUtleXMiLCJfY2FtZWxDYXNlIiwiX3NuYWtlQ2FzZSIsImNvbnN0YW50Q2FzZSIsIkFycmF5U2NoZW1hIiwiX3N1YlR5cGUiLCJfb3B0cyIsImNhc3RBcnJheSIsImNhc3RFbGVtZW50Iiwib3JpZ2luYWwiLCJjb21wYWN0IiwicmVqZWN0b3IiLCJtYXBGbiIsIl9yZXNvbHZlIiwidmFsaWRhdGVBdCIsInZhbGlkYXRlU3luY0F0IiwiaXNEZXZlbG9wbWVudCIsImhvc3QiLCJzdGFydHNXaXRoIiwic2VydmVyT3JpZ2luIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsIkZpZWxkc0RpdmlkZXJXcmFwcGVyIiwiaW5kZW50XzIiLCJpbmRlbnRfMyIsIlRleHRJbnB1dCIsInByb3BzT3JGaWVsZE5hbWUiLCJmaWVsZE5hbWUiLCJ2YWxpZGF0ZUZuIiwidXNlRmllbGQiLCJsYWJlbEVsIiwicmFuZG9tU3RyIiwiaHRtbEZvciIsImNyZWF0ZUxhYmVsIiwicGxhY2Vob2xkZXIiLCJhdXRvQ29tcGxldGUiLCJZdXAiLCJTdWJtaXRCdG4iLCJFbnRlckZvcm0iLCJzZXJ2ZXJFcnJUZXh0Iiwic2V0U2VydmVyRXJyIiwic2VydmVyRXJyb3IiLCJhc3luYyIsImJyb3dzZXJDb25maWciLCJhcGlVcmwiLCJoZWFkZXJzIiwic2VydmVyUmVzIiwiZmV0Y2giLCJqc29uIiwibG9nIiwidXNlckRhdGEiLCJsb2NhbFN0b3JhZ2UiLCJzZXRJdGVtIiwib25TdWJtaXRIYW5kbGVyIiwiY3JlYXRlRm9ybSIsImJvdHRvbVBhcnQiLCJFbnRlclBhZ2UiLCJQYXNzd29yZFJlc2V0UGFnZSIsIkNoYW5nZVBhc3N3b3JkUGFnZSIsIk5vdGVzUGFnZSIsIlVzZXJQYWdlIiwiQXBwIiwiYXBwIiwiUmVhY3RET00iLCJnZXRFbGVtZW50QnlJZCJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxHQUMzQ1osRUFBb0JhLEVBQUVYLEVBQVNTLElBQ2xDRyxPQUFPQyxlQUFlYixFQUFTUyxFQUFNLENBQUVLLFlBQVksRUFBTUMsSUFBS0wsS0FLaEVaLEVBQW9Ca0IsRUFBSSxTQUFTaEIsR0FDWCxvQkFBWGlCLFFBQTBCQSxPQUFPQyxhQUMxQ04sT0FBT0MsZUFBZWIsRUFBU2lCLE9BQU9DLFlBQWEsQ0FBRUMsTUFBTyxXQUU3RFAsT0FBT0MsZUFBZWIsRUFBUyxhQUFjLENBQUVtQixPQUFPLEtBUXZEckIsRUFBb0JzQixFQUFJLFNBQVNELEVBQU9FLEdBRXZDLEdBRFUsRUFBUEEsSUFBVUYsRUFBUXJCLEVBQW9CcUIsSUFDL0IsRUFBUEUsRUFBVSxPQUFPRixFQUNwQixHQUFXLEVBQVBFLEdBQThCLGlCQUFWRixHQUFzQkEsR0FBU0EsRUFBTUcsV0FBWSxPQUFPSCxFQUNoRixJQUFJSSxFQUFLWCxPQUFPWSxPQUFPLE1BR3ZCLEdBRkExQixFQUFvQmtCLEVBQUVPLEdBQ3RCWCxPQUFPQyxlQUFlVSxFQUFJLFVBQVcsQ0FBRVQsWUFBWSxFQUFNSyxNQUFPQSxJQUN0RCxFQUFQRSxHQUE0QixpQkFBVEYsRUFBbUIsSUFBSSxJQUFJTSxLQUFPTixFQUFPckIsRUFBb0JVLEVBQUVlLEVBQUlFLEVBQUssU0FBU0EsR0FBTyxPQUFPTixFQUFNTSxJQUFRQyxLQUFLLEtBQU1ELElBQzlJLE9BQU9GLEdBSVJ6QixFQUFvQjZCLEVBQUksU0FBUzFCLEdBQ2hDLElBQUlTLEVBQVNULEdBQVVBLEVBQU9xQixXQUM3QixXQUF3QixPQUFPckIsRUFBZ0IsU0FDL0MsV0FBOEIsT0FBT0EsR0FFdEMsT0FEQUgsRUFBb0JVLEVBQUVFLEVBQVEsSUFBS0EsR0FDNUJBLEdBSVJaLEVBQW9CYSxFQUFJLFNBQVNpQixFQUFRQyxHQUFZLE9BQU9qQixPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUt1QixFQUFRQyxJQUd6Ry9CLEVBQW9Ca0MsRUFBSSxHQUlqQmxDLEVBQW9CQSxFQUFvQm1DLEVBQUksSywrQkMvRW5EaEMsRUFBT0QsUUFBVWtDLEVBQVEsSyw2QkNIM0IsWUFHSUMsRUFBMEIsaUJBQVJDLE1BQW9CQSxNQUFRQSxLQUFLeEIsU0FBV0EsUUFBVXdCLEtBR3hFQyxFQUFPQyxLQUFjSCxHQUFZSSxTQUFTLGNBQVRBLEdBRXRCRixPLDZCQ1dBRyxJQWxCZixTQUFpQkMsRUFBV0MsTSw2QkNEYixTQUFTQyxFQUFlQyxFQUFVQyxHQUMvQ0QsRUFBU2QsVUFBWWxCLE9BQU9ZLE9BQU9xQixFQUFXZixXQUM5Q2MsRUFBU2QsVUFBVWdCLFlBQWNGLEVBQ2pDQSxFQUFTRyxVQUFZRixFQUh2QixtQyxpQkNBQSxnQkFBSUcsRUFBUSxTQUFVQyxHQUNwQixPQUFPQSxHQUFNQSxFQUFHQyxNQUFRQSxNQUFRRCxHQUlsQ2hELEVBQU9ELFFBRUxnRCxFQUEyQixpQkFBZEcsWUFBMEJBLGFBQ3ZDSCxFQUF1QixpQkFBVkksUUFBc0JBLFNBQ25DSixFQUFxQixpQkFBUlosTUFBb0JBLE9BQ2pDWSxFQUF1QixpQkFBVkssR0FBc0JBLElBRW5DZCxTQUFTLGNBQVRBLEssZ0NDWkYsSUFBSVIsRUFBaUIsR0FBR0EsZUFFeEI5QixFQUFPRCxRQUFVLFNBQVVpRCxFQUFJeEIsR0FDN0IsT0FBT00sRUFBZTFCLEtBQUs0QyxFQUFJeEIsSyw4QkNIakMsd0JBR0k2QixFQUFnQyxpQkFBWHRELFNBQXVCQSxVQUFZQSxRQUFRdUQsVUFBWXZELFFBRzVFd0QsRUFBYUYsR0FBZ0MsaUJBQVZyRCxHQUFzQkEsSUFBV0EsRUFBT3NELFVBQVl0RCxFQU12RndELEVBSGdCRCxHQUFjQSxFQUFXeEQsVUFBWXNELEdBR3RCaEIsSUFBV29CLFFBRzFDQyxFQUFZLFdBQ2QsSUFFRSxJQUFJQyxFQUFRSixHQUFjQSxFQUFXdEIsU0FBV3NCLEVBQVd0QixRQUFRLFFBQVEwQixNQUUzRSxPQUFJQSxHQUtHSCxHQUFlQSxFQUFZSSxTQUFXSixFQUFZSSxRQUFRLFFBQ2pFLE1BQU9DLEtBWEssR0FjREgsUSxrREMzQmYsSUFBSUksRUFBVUMsTUFBTUQsUUFDaEJFLEVBQVVyRCxPQUFPc0QsS0FDakJDLEVBQVV2RCxPQUFPa0IsVUFBVUMsZUFDM0JxQyxFQUFvQyxvQkFBWkMsUUF3RTVCcEUsRUFBT0QsUUFBVSxTQUF1QnNFLEVBQUdDLEdBQ3pDLElBQ0UsT0F4RUosU0FBU0MsRUFBTUYsRUFBR0MsR0FFaEIsR0FBSUQsSUFBTUMsRUFBRyxPQUFPLEVBRXBCLEdBQUlELEdBQUtDLEdBQWlCLGlCQUFMRCxHQUE2QixpQkFBTEMsRUFBZSxDQUMxRCxJQUVJckUsRUFDQXVFLEVBQ0FoRCxFQUpBaUQsRUFBT1gsRUFBUU8sR0FDZkssRUFBT1osRUFBUVEsR0FLbkIsR0FBSUcsR0FBUUMsRUFBTSxDQUVoQixJQURBRixFQUFTSCxFQUFFRyxTQUNHRixFQUFFRSxPQUFRLE9BQU8sRUFDL0IsSUFBS3ZFLEVBQUl1RSxFQUFnQixHQUFSdkUsS0FDZixJQUFLc0UsRUFBTUYsRUFBRXBFLEdBQUlxRSxFQUFFckUsSUFBSyxPQUFPLEVBQ2pDLE9BQU8sRUFHVCxHQUFJd0UsR0FBUUMsRUFBTSxPQUFPLEVBRXpCLElBQUlDLEVBQVFOLGFBQWFPLEtBQ3JCQyxFQUFRUCxhQUFhTSxLQUN6QixHQUFJRCxHQUFTRSxFQUFPLE9BQU8sRUFDM0IsR0FBSUYsR0FBU0UsRUFBTyxPQUFPUixFQUFFUyxXQUFhUixFQUFFUSxVQUU1QyxJQUFJQyxFQUFVVixhQUFhVyxPQUN2QkMsRUFBVVgsYUFBYVUsT0FDM0IsR0FBSUQsR0FBV0UsRUFBUyxPQUFPLEVBQy9CLEdBQUlGLEdBQVdFLEVBQVMsT0FBT1osRUFBRWEsWUFBY1osRUFBRVksV0FFakQsSUFBSWpCLEVBQU9ELEVBQVFLLEdBR25CLElBRkFHLEVBQVNQLEVBQUtPLFVBRUNSLEVBQVFNLEdBQUdFLE9BQ3hCLE9BQU8sRUFFVCxJQUFLdkUsRUFBSXVFLEVBQWdCLEdBQVJ2RSxLQUNmLElBQUtpRSxFQUFROUQsS0FBS2tFLEVBQUdMLEVBQUtoRSxJQUFLLE9BQU8sRUFLeEMsR0FBSWtFLEdBQWtCRSxhQUFhRCxTQUFXRSxhQUFhRixRQUN6RCxPQUFPQyxJQUFNQyxFQUdmLElBQUtyRSxFQUFJdUUsRUFBZ0IsR0FBUnZFLEtBRWYsS0FBWSxZQURadUIsRUFBTXlDLEVBQUtoRSxLQUNhb0UsRUFBRWMsVUFRbkJaLEVBQU1GLEVBQUU3QyxHQUFNOEMsRUFBRTlDLEtBQU8sT0FBTyxFQU12QyxPQUFPLEVBR1QsT0FBTzZDLEdBQU1BLEdBQUtDLEdBQU1BLEVBTWZDLENBQU1GLEVBQUdDLEdBQ2hCLE1BQU9jLEdBQ1AsR0FBS0EsRUFBTTNDLFNBQVcyQyxFQUFNM0MsUUFBUTRDLE1BQU0sc0JBQTJDLGFBQWxCRCxFQUFNRSxPQU92RSxPQURBQyxRQUFRQyxLQUFLLG1FQUFvRUosRUFBTTVFLEtBQU00RSxFQUFNM0MsVUFDNUYsRUFHVCxNQUFNMkMsSyw2QkN0RlYsU0FBU0ssRUFBTUMsR0FDYkMsS0FBS0MsU0FBV0YsRUFDaEJDLEtBQUtFLFFBRVBKLEVBQU01RCxVQUFVZ0UsTUFBUSxXQUN0QkYsS0FBS0csTUFBUSxFQUNiSCxLQUFLSSxRQUFVcEYsT0FBT1ksT0FBTyxPQUUvQmtFLEVBQU01RCxVQUFVZixJQUFNLFNBQVNVLEdBQzdCLE9BQU9tRSxLQUFLSSxRQUFRdkUsSUFFdEJpRSxFQUFNNUQsVUFBVW1FLElBQU0sU0FBU3hFLEVBQUtOLEdBSWxDLE9BSEF5RSxLQUFLRyxPQUFTSCxLQUFLQyxVQUFZRCxLQUFLRSxRQUM5QnJFLEtBQU9tRSxLQUFLSSxTQUFVSixLQUFLRyxRQUV6QkgsS0FBS0ksUUFBUXZFLEdBQU9OLEdBRzlCLElBQUkrRSxFQUFjLDRCQUNoQkMsRUFBYyxRQUNkQyxFQUFtQixNQUNuQkMsRUFBa0IseUNBQ2xCQyxFQUFxQiwyQkFHbkJDLEVBQVksSUFBSWIsRUFGRCxLQUdqQmMsRUFBVyxJQUFJZCxFQUhFLEtBSWpCZSxFQUFXLElBQUlmLEVBSkUsS0ErRG5CLFNBQVNnQixFQUFjQyxHQUNyQixPQUNFSixFQUFVeEYsSUFBSTRGLElBQ2RKLEVBQVVOLElBQ1JVLEVBQ0FDLEVBQU1ELEdBQU1FLEtBQUksU0FBU0MsR0FDdkIsT0FBT0EsRUFBS0MsUUFBUVQsRUFBb0IsVUFNaEQsU0FBU00sRUFBTUQsR0FDYixPQUFPQSxFQUFLckIsTUFBTVksR0EwQnBCLFNBQVNjLEVBQVNDLEdBQ2hCLE1BQ2lCLGlCQUFSQSxHQUFvQkEsSUFBOEMsSUFBdkMsQ0FBQyxJQUFLLEtBQUtDLFFBQVFELEVBQUlFLE9BQU8sSUFZcEUsU0FBU0MsRUFBZU4sR0FDdEIsT0FBUUUsRUFBU0YsS0FUbkIsU0FBMEJBLEdBQ3hCLE9BQU9BLEVBQUt4QixNQUFNYyxLQUFzQlUsRUFBS3hCLE1BQU1hLEdBUXhCa0IsQ0FBaUJQLElBTDlDLFNBQXlCQSxHQUN2QixPQUFPVCxFQUFnQmlCLEtBQUtSLEdBSXlCUyxDQUFnQlQsSUE3R3ZFN0csRUFBT0QsUUFBVSxDQUNmMEYsTUFBT0EsRUFFUGtCLE1BQU9BLEVBRVBGLGNBQWVBLEVBRWZjLE9BQVEsU0FBU2IsR0FDZixJQUFJYyxFQUFRZixFQUFjQyxHQUUxQixPQUNFSCxFQUFTekYsSUFBSTRGLElBQ2JILEVBQVNQLElBQUlVLEdBQU0sU0FBZ0JlLEVBQU12RyxHQUd2QyxJQUZBLElBQUl3RyxFQUFRLEVBQ1ZDLEVBQU1ILEVBQU1oRCxPQUNQa0QsRUFBUUMsRUFBTSxHQUNuQkYsRUFBT0EsRUFBS0QsRUFBTUUsTUFFcEJELEVBQUtELEVBQU1FLElBQVV4RyxNQUszQlQsT0FBUSxTQUFTaUcsRUFBTWtCLEdBQ3JCLElBQUlKLEVBQVFmLEVBQWNDLEdBQzFCLE9BQ0VGLEVBQVMxRixJQUFJNEYsSUFDYkYsRUFBU1IsSUFBSVUsR0FBTSxTQUFnQmUsR0FHakMsSUFGQSxJQUFJQyxFQUFRLEVBQ1ZDLEVBQU1ILEVBQU1oRCxPQUNQa0QsRUFBUUMsR0FBSyxDQUNsQixHQUFZLE1BQVJGLEdBQWlCRyxFQUNoQixPQURzQkgsRUFBT0EsRUFBS0QsRUFBTUUsTUFHL0MsT0FBT0QsTUFLYkksS0FBTSxTQUFTQyxHQUNiLE9BQU9BLEVBQVNDLFFBQU8sU0FBU3JCLEVBQU1HLEdBQ3BDLE9BQ0VILEdBQ0NLLEVBQVNGLElBQVNYLEVBQVltQixLQUFLUixHQUNoQyxJQUFNQSxFQUFPLEtBQ1pILEVBQU8sSUFBTSxJQUFNRyxLQUV6QixLQUdMbUIsUUFBUyxTQUFTdEIsRUFBTXVCLEVBQUlDLElBcUI5QixTQUFpQlYsRUFBT1csRUFBTUQsR0FDNUIsSUFDRXJCLEVBQ0F1QixFQUNBdEUsRUFDQXVFLEVBSkVWLEVBQU1ILEVBQU1oRCxPQU1oQixJQUFLNEQsRUFBTSxFQUFHQSxFQUFNVCxFQUFLUyxLQUN2QnZCLEVBQU9XLEVBQU1ZLE1BR1BqQixFQUFlTixLQUNqQkEsRUFBTyxJQUFNQSxFQUFPLEtBR3RCd0IsRUFBWXRCLEVBQVNGLEdBQ3JCL0MsR0FBV3VFLEdBQWEsUUFBUWhCLEtBQUtSLEdBRXJDc0IsRUFBSy9ILEtBQUs4SCxFQUFTckIsRUFBTXdCLEVBQVd2RSxFQUFTc0UsRUFBS1osSUF0Q3BEUSxDQUFRakUsTUFBTUQsUUFBUTRDLEdBQVFBLEVBQU9DLEVBQU1ELEdBQU91QixFQUFJQyxNLDZCQ3JGMUQsSUFBSUksRUFBVXJHLEVBQVEsSUFNbEJzRyxFQUFnQixDQUNsQkMsbUJBQW1CLEVBQ25CQyxhQUFhLEVBQ2JDLGNBQWMsRUFDZEMsY0FBYyxFQUNkQyxhQUFhLEVBQ2JDLGlCQUFpQixFQUNqQkMsMEJBQTBCLEVBQzFCQywwQkFBMEIsRUFDMUJDLFFBQVEsRUFDUkMsV0FBVyxFQUNYQyxNQUFNLEdBRUpDLEVBQWdCLENBQ2xCM0ksTUFBTSxFQUNOZ0UsUUFBUSxFQUNSM0MsV0FBVyxFQUNYdUgsUUFBUSxFQUNSQyxRQUFRLEVBQ1JDLFdBQVcsRUFDWEMsT0FBTyxHQVNMQyxFQUFlLENBQ2pCLFVBQVksRUFDWkMsU0FBUyxFQUNUZCxjQUFjLEVBQ2RDLGFBQWEsRUFDYkssV0FBVyxFQUNYQyxNQUFNLEdBRUpRLEVBQWUsR0FJbkIsU0FBU0MsRUFBV0MsR0FFbEIsT0FBSXRCLEVBQVF1QixPQUFPRCxHQUNWSixFQUlGRSxFQUFhRSxFQUFTLFdBQWlCckIsRUFWaERtQixFQUFhcEIsRUFBUXdCLFlBaEJLLENBQ3hCLFVBQVksRUFDWkMsUUFBUSxFQUNScEIsY0FBYyxFQUNkQyxhQUFhLEVBQ2JLLFdBQVcsR0FZYlMsRUFBYXBCLEVBQVEwQixNQUFRUixFQVk3QixJQUFJNUksRUFBaUJELE9BQU9DLGVBQ3hCcUosRUFBc0J0SixPQUFPc0osb0JBQzdCQyxFQUF3QnZKLE9BQU91SixzQkFDL0JDLEVBQTJCeEosT0FBT3dKLHlCQUNsQ0MsRUFBaUJ6SixPQUFPeUosZUFDeEJDLEVBQWtCMUosT0FBT2tCLFVBc0M3QjdCLEVBQU9ELFFBckNQLFNBQVN1SyxFQUFxQkMsRUFBaUJDLEVBQWlCQyxHQUM5RCxHQUErQixpQkFBcEJELEVBQThCLENBRXZDLEdBQUlILEVBQWlCLENBQ25CLElBQUlLLEVBQXFCTixFQUFlSSxHQUVwQ0UsR0FBc0JBLElBQXVCTCxHQUMvQ0MsRUFBcUJDLEVBQWlCRyxFQUFvQkQsR0FJOUQsSUFBSXhHLEVBQU9nRyxFQUFvQk8sR0FFM0JOLElBQ0ZqRyxFQUFPQSxFQUFLMEcsT0FBT1QsRUFBc0JNLEtBTTNDLElBSEEsSUFBSUksRUFBZ0JqQixFQUFXWSxHQUMzQk0sRUFBZ0JsQixFQUFXYSxHQUV0QnZLLEVBQUksRUFBR0EsRUFBSWdFLEVBQUtPLFNBQVV2RSxFQUFHLENBQ3BDLElBQUl1QixFQUFNeUMsRUFBS2hFLEdBRWYsS0FBS2tKLEVBQWMzSCxJQUFVaUosR0FBYUEsRUFBVWpKLElBQVdxSixHQUFpQkEsRUFBY3JKLElBQVdvSixHQUFpQkEsRUFBY3BKLElBQU8sQ0FDN0ksSUFBSXNKLEVBQWFYLEVBQXlCSyxFQUFpQmhKLEdBRTNELElBRUVaLEVBQWUySixFQUFpQi9JLEVBQUtzSixHQUNyQyxNQUFPakgsT0FLZixPQUFPMEcsSSxnQkNuR1QsSUFBSVEsRUFBYzlJLEVBQVEsSUFDdEIrSSxFQUF1Qi9JLEVBQVEsSUFDL0JnSixFQUEyQmhKLEVBQVEsSUFFdkNqQyxFQUFPRCxRQUFVZ0wsRUFBYyxTQUFVcEosRUFBUUgsRUFBS04sR0FDcEQsT0FBTzhKLEVBQXFCRSxFQUFFdkosRUFBUUgsRUFBS3lKLEVBQXlCLEVBQUcvSixLQUNyRSxTQUFVUyxFQUFRSCxFQUFLTixHQUV6QixPQURBUyxFQUFPSCxHQUFPTixFQUNQUyxJLDhCQ1JULCtCQUlJMEIsRUFBZ0MsaUJBQVh0RCxTQUF1QkEsVUFBWUEsUUFBUXVELFVBQVl2RCxRQUc1RXdELEVBQWFGLEdBQWdDLGlCQUFWckQsR0FBc0JBLElBQVdBLEVBQU9zRCxVQUFZdEQsRUFNdkZtTCxFQUhnQjVILEdBQWNBLEVBQVd4RCxVQUFZc0QsRUFHNUJqQixJQUFLK0ksWUFBU0MsRUFzQnZDQyxHQW5CaUJGLEVBQVNBLEVBQU9FLGNBQVdELElBbUJmRSxJQUVsQkQsUSxtQ0NyQ2ZyTCxFQUFPRCxRQUFVLFNBQVV3TCxHQUN6QixJQUNFLFFBQVNBLElBQ1QsTUFBT25HLEdBQ1AsT0FBTyxLLGdCQ2FUcEYsRUFBT0QsUUFBVWtDLEVBQVEsR0FBUkEsSSw2QkNmbkIsU0FBU3VKLEVBQWNDLEdBQ3JCLE9BQU8xSCxNQUFNbEMsVUFBVTZKLE1BQU1DLE1BQU1GLEdBT3JDLFNBQVNHLEVBQW1CQyxHQUMxQmxHLEtBQUttRyxPQUxLLFVBTVZuRyxLQUFLb0csZUFBaUIsR0FDdEJwRyxLQUFLcUcsUUFBVSxLQUNmckcsS0FBS3NHLFNBQVUsRUFDWEosR0FDRkEsRUFBUXpMLEtBQ051RixLQUNBQSxLQUFLdUcsY0FBY3pLLEtBQUtrRSxNQUN4QkEsS0FBS3dHLFVBQVUxSyxLQUFLa0UsT0FLMUIsU0FBU3lHLEVBQWtCWCxHQUN6QixPQUFPQSxHQUE2QixtQkFBZEEsRUFBSVksS0FHNUIsU0FBU0MsRUFBWXBMLEdBQ25CLE9BQU9BLEVBZ1VULEdBN1RBMEssRUFBbUIvSixVQUFZLENBQzdCd0ssS0FBTSxTQUFVRSxFQUFRQyxHQUN0QixJQUFJQyxFQUFPYixFQUFtQmMsYUFBYUMsV0FBV2hILE1BQ3RELEdBQUlBLEtBQUtpSCxjQUFlLENBQ3RCLEdBQUlqSCxLQUFLc0csUUFNUCxPQUxBdEcsS0FBS29HLGVBQWVjLEtBQUssQ0FDdkJDLFFBQVNMLEVBQ1RGLE9BQVFBLEVBQ1JDLFFBQVNBLElBRUpDLEVBRVQsR0FBSUQsRUFDRixJQUNFLElBQUlPLEVBQWNQLEVBQVE3RyxLQUFLcUgsUUFDL0IsT0FBSVosRUFBa0JXLElBQ3BCcEgsS0FBS3NILGtCQUFrQkYsRUFBYU4sR0FDN0JBLEdBRUFiLEVBQW1Cc0IsUUFBUUgsR0FBYUosV0FBV2hILE1BRTVELE1BQU85QixHQUNQLE9BQU8rSCxFQUFtQnVCLE9BQU90SixHQUFHOEksV0FBV2hILE1BR25ELE9BQU9pRyxFQUFtQnVCLE9BQU94SCxLQUFLcUgsUUFBUUwsV0FBV2hILE1BUTNELE9BTkFBLEtBQUtvRyxlQUFlYyxLQUFLLENBQ3ZCQyxRQUFTTCxFQUNURixPQUFRQSxFQUNSQyxRQUFTQSxJQUVYN0csS0FBS3lILGtCQUNFWCxHQUVUWSxNQUFPLFNBQVV4QixHQUNmLEdBQUlsRyxLQUFLMkgsY0FDUCxPQUFPMUIsRUFBbUJzQixRQUFRdkgsS0FBSzRILE9BQU9aLFdBQVdoSCxNQUUzRCxJQUFJOEcsRUFBT2IsRUFBbUJjLGFBQWFDLFdBQVdoSCxNQU10RCxPQUxBQSxLQUFLb0csZUFBZWMsS0FBSyxDQUN2QkMsUUFBU0wsRUFDVEQsUUFBU1gsSUFFWGxHLEtBQUs2SCxpQkFDRWYsR0FFVGdCLFFBQVMsU0FBU0MsR0FDaEIsSUFBSUMsR0FBTSxFQUNWLFNBQVNDLEVBQVdDLEVBQVFDLEdBQzFCLElBQUtILEVBQUssQ0FDUkEsR0FBTSxFQUNERCxJQUNIQSxFQUFXcEIsR0FFYixJQUFJeUIsRUFBaUJMLEVBQVNHLEdBQzlCLE9BQUl6QixFQUFrQjJCLEdBQ2JBLEVBQWUxQixNQUFLLFdBQ3pCLEdBQUl5QixFQUNGLE1BQU1BLEVBRVIsT0FBT0QsS0FHRkEsR0FJYixPQUFPbEksS0FDSjBHLE1BQUssU0FBU3dCLEdBQ2IsT0FBT0QsRUFBV0MsTUFFbkJSLE9BQU0sU0FBU1MsR0FDZCxPQUFPRixFQUFXLEtBQU1FLE9BRzlCRSxNQUFPLFdBRUwsT0FEQXJJLEtBQUtzRyxTQUFVLEVBQ1J0RyxNQUVUc0ksT0FBUSxXQUNOLElBQUlDLEVBQWN2SSxLQUFLd0ksbUJBTXZCLE9BTElELElBQ0ZBLEVBQVlqQyxTQUFVLEVBQ3RCaUMsRUFBWWQsa0JBQ1pjLEVBQVlWLGtCQUVQN0gsTUFFVHlJLGNBQWUsV0FDYixPQUFPekksS0FBS29HLGVBQWVoRSxRQUFPLFNBQVVzRyxFQUFLQyxHQUMvQyxHQUFJQSxFQUFJeEIsUUFBUyxDQUNmLElBQUl5QixFQUFPLENBQ1R6QixRQUFTd0IsRUFBSXhCLFFBQ2IwQixTQUFVRixFQUFJeEIsUUFBUXNCLGlCQUV4QkMsRUFBSXhCLEtBQUswQixHQUVYLE9BQU9GLElBQ04sS0FFTDFCLFdBQVksU0FBVThCLEdBQ3BCLEdBQUk5SSxLQUFLcUcsUUFDUCxNQUFNLElBQUkwQyxNQUFNLHNCQUdsQixPQURBL0ksS0FBS3FHLFFBQVV5QyxFQUNSOUksTUFFVHVHLGNBQWUsU0FBVXpFLEdBQ3ZCLElBQUlrSCxFQUFlaEosS0FBS2lKLG9CQUNwQkQsSUFDRkEsRUFBYXBCLE1BQVE5RixFQUNyQmtILEVBQWFFLGlCQUdqQkQsa0JBQW1CLFdBQ2pCLE9BQU9qSixLQUFLbUosb0JBQW1CLFNBQVV6SCxHQUN2QyxPQUFPQSxFQUFLMEgsWUFBYzFILEVBQUswSCxpQkFHbkNaLGlCQUFrQixXQUNoQixPQUFPeEksS0FBS21KLG9CQUFtQixTQUFVekgsR0FDdkMsT0FBT0EsRUFBSzRFLFlBR2hCNkMsbUJBQW9CLFNBQVVFLEdBRzVCLElBRkEsSUFDSW5CLEVBREF4RyxFQUFPMUIsS0FFSjBCLEdBQ0QySCxFQUFTM0gsS0FDWHdHLEVBQVN4RyxHQUVYQSxFQUFPQSxFQUFLMkUsUUFFZCxPQUFPNkIsR0FFVDFCLFVBQVcsU0FBVS9HLEdBQ25CLElBQUk2SixFQUFnQnRKLEtBQUtpSixvQkFDckJLLElBQ0ZBLEVBQWNqQyxPQUFTNUgsRUFDdkI2SixFQUFjQyxpQkFHbEJDLG1CQUFvQixXQUNsQixPQUFPeEosS0FBS29HLGVBQWVxRCxPQUFPLEVBQUd6SixLQUFLb0csZUFBZXZILFNBRTNEZ0osZUFBZ0IsV0FDZCxJQUFJN0gsS0FBS3NHLFNBQVl0RyxLQUFLaUgsY0FBMUIsQ0FHQSxJQUNFeEgsRUFBUU8sS0FBS3FILE9BQ2JxQyxFQUFnQjFKLEtBQUt3SixxQkFDckJoTixFQUFPd0QsS0FDVDBKLEVBQWNySCxTQUFRLFNBQVVzSCxHQUM5QixHQUFJQSxFQUFLOUMsUUFDUCxJQUNFLElBQUlPLEVBQWN1QyxFQUFLOUMsUUFBUXBILEdBQy9CakQsRUFBS29OLDBCQUEwQnhDLEVBQWF1QyxFQUFLeEMsU0FDakQsTUFBT2pKLEdBQ1B5TCxFQUFLeEMsUUFBUUssT0FBT3RKLFFBR3RCeUwsRUFBS3hDLFFBQVFLLE9BQU8vSCxRQUkxQmdJLGdCQUFpQixXQUNmLElBQUl6SCxLQUFLc0csU0FBWXRHLEtBQUsySCxnQkFBaUIzSCxLQUFLb0osYUFBaEQsQ0FHQSxJQUFJTSxFQUFnQjFKLEtBQUt3SixxQkFDekIsR0FBSS9DLEVBQWtCekcsS0FBSzRILE9BQ3pCLE9BQU81SCxLQUFLNkosaUNBQWlDN0osS0FBSzRILE9BRXBELElBQUk5RixFQUFPOUIsS0FBSzRILE1BQ1pwTCxFQUFPd0QsS0FDWDBKLEVBQWNySCxTQUFRLFNBQVVzSCxHQUM5QixHQUFJQSxFQUFLL0MsT0FDUCxJQUNFLElBQUlzQixFQUFTeUIsRUFBSy9DLE9BQU85RSxHQUN6QnRGLEVBQUtvTiwwQkFBMEIxQixFQUFReUIsRUFBS3hDLFNBQzVDLE1BQU9qSixHQUNQMUIsRUFBS3NOLHVCQUF1QjVMLEVBQUd5TCxRQUV4QkEsRUFBS3hDLFNBQ2R3QyxFQUFLeEMsUUFBUUksUUFBUXpGLFFBSTNCZ0ksdUJBQXdCLFNBQVU1TCxFQUFHNkwsR0FFbkMsR0FEQS9KLEtBQUt1SixlQUNEUSxFQUFhbEQsUUFDZixJQUVFLFlBREFrRCxFQUFhbEQsUUFBUTNJLEdBRXJCLE1BQU84TCxHQUNQOUwsRUFBSThMLEVBR0pELEVBQWE1QyxTQUNmNEMsRUFBYTVDLFFBQVFLLE9BQU90SixJQUdoQzJMLGlDQUFrQyxTQUFVL0gsR0FDMUMsSUFBSXRGLEVBQU93RCxLQUNYLE9BQU84QixFQUFLNEUsTUFBSyxTQUFVd0IsR0FDekIxTCxFQUFLb0wsTUFBUU0sRUFDYjFMLEVBQUtpTCxxQkFDSkMsT0FBTSxTQUFVakksR0FDakJqRCxFQUFLNkssT0FBUzVILEVBQ2RqRCxFQUFLK00sZUFDTC9NLEVBQUtxTCxxQkFHVCtCLDBCQUEyQixTQUFVOUgsRUFBTW1JLEdBQ3JDeEQsRUFBa0IzRSxHQUNwQjlCLEtBQUtzSCxrQkFBa0J4RixFQUFNbUksR0FFN0JBLEVBQXVCMUMsUUFBUXpGLElBR25Dd0Ysa0JBQW1CLFNBQVU0QyxFQUFhRCxHQUN4Q0MsRUFBWXhELE1BQUssU0FBVXlELEdBQ3pCRixFQUF1QjFDLFFBQVE0QyxNQUM5QnpDLE9BQU0sU0FBVTBDLEdBQ2pCSCxFQUF1QnpDLE9BQU80QyxPQUdsQ2xCLGFBQWMsV0FDWmxKLEtBQUttRyxPQS9QSSxXQWdRSm5HLEtBQUtzRyxTQUNSdEcsS0FBS3lILG1CQUdUOEIsYUFBYyxXQUNadkosS0FBS21HLE9BcFFJLFdBcVFKbkcsS0FBS3NHLFNBQ1J0RyxLQUFLNkgsa0JBR1R1QixXQUFZLFdBQ1YsTUE1UVEsWUE0UURwSixLQUFLbUcsUUFFZHdCLFlBQWEsV0FDWCxNQTlRUyxhQThRRjNILEtBQUttRyxRQUVkYyxZQUFhLFdBQ1gsTUFoUlMsYUFnUkZqSCxLQUFLbUcsU0FJaEJGLEVBQW1Cc0IsUUFBVSxTQUFVVyxHQUNyQyxPQUFPLElBQUlqQyxHQUFtQixTQUFVc0IsRUFBU0MsR0FDM0NmLEVBQWtCeUIsR0FDcEJBLEVBQU94QixNQUFLLFNBQVUyRCxHQUNwQjlDLEVBQVE4QyxNQUNQM0MsT0FBTSxTQUFVakksR0FDakIrSCxFQUFPL0gsTUFHVDhILEVBQVFXLE9BS2RqQyxFQUFtQnVCLE9BQVMsU0FBVVUsR0FDcEMsT0FBTyxJQUFJakMsR0FBbUIsU0FBVXNCLEVBQVNDLEdBQy9DQSxFQUFPVSxPQUlYakMsRUFBbUJjLFdBQWEsV0FDOUIsT0FBTyxJQUFJZCxHQUFtQixTQUFVc0IsRUFBU0MsR0FDL0N4SCxLQUFLdUgsUUFBVUEsRUFDZnZILEtBQUt3SCxPQUFTQSxNQUlsQnZCLEVBQW1CcUUsSUFBTSxXQUN2QixJQUFJQyxFQUFPMUUsRUFBY2xDLFdBSXpCLE9BSEl2RixNQUFNRCxRQUFRb00sRUFBSyxNQUNyQkEsRUFBT0EsRUFBSyxJQUVUQSxFQUFLMUwsT0FHSCxJQUFJb0gsR0FBbUIsU0FBVXNCLEVBQVNDLEdBQy9DLElBQ0VnRCxFQUFVLEdBQ1ZDLEVBQWMsRUFNZEMsR0FBVyxFQVFiSCxFQUFLbEksU0FBUSxTQUFVc0ksRUFBS2xJLEdBQzFCd0QsRUFBbUJzQixRQUFRb0QsR0FBS2pFLE1BQUssU0FBVWtFLEdBQzdDSixFQUFRL0gsR0FBT21JLEdBQ2ZILEdBQWUsS0FmS0YsRUFBSzFMLFFBQ3ZCMEksRUFBUWlELE1BZ0JUOUMsT0FBTSxTQUFVUyxJQVpSLFNBQVVBLEdBQ2Z1QyxJQUdKQSxHQUFXLEVBQ1hsRCxFQUFPVyxJQVFQMEMsQ0FBUzFDLFlBekJObEMsRUFBbUJzQixRQUFRLEtBZ0NsQ3VELFVBQVk3RSxFQUNkLE1BQU0sSUFBSThDLE1BQU0sdUVBRWxCLElBQUlnQyxFQUFjRCxRQUNsQjdFLEVBQW1CK0UsZ0JBQWtCLFNBQVNDLEdBQzVDLEdBQUlILFVBQVk3RSxFQUNkLE9BQU9nRixFQUVULElBQUkvQyxFQVdOLFNBQWdDK0MsR0FDOUIsUUFBMEIsSUFBZkEsR0FBOEJBLEVBQVVDLFVBQ2pELE9BQU9ELEVBRVQsSUFBSUUsRUFBa0JGLEVBTXRCLE9BTEFBLEVBQVksV0FFVkUsRUFBZ0JuRixNQUFNaEcsS0FBTTZGLEVBQWNsQyxjQUVsQ3VILFdBQVksRUFDZkQsRUFyQk1HLENBQXVCSCxHQUVwQyxPQURBSCxRQUFVN0UsRUFDSGlDLEdBR1RqQyxFQUFtQm9GLGtCQUFvQixXQUNqQ1AsVUFBWTdFLElBQ2Q2RSxRQUFVQyxJQWtCZDFRLEVBQU9ELFFBQVUsQ0FDZjZMLG1CQUFvQkEsSSxnQkMvWHRCLElBQUl4SSxFQUFTbkIsRUFBUSxHQUNqQmdQLEVBQVNoUCxFQUFRLElBQ2pCaVAsRUFBTWpQLEVBQVEsR0FDZGtQLEVBQU1sUCxFQUFRLElBQ2RtUCxFQUFnQm5QLEVBQVEsSUFDeEJvUCxFQUFvQnBQLEVBQVEsSUFFNUJxUCxFQUF3QkwsRUFBTyxPQUMvQmpRLEVBQVNvQyxFQUFPcEMsT0FDaEJ1USxFQUF3QkYsRUFBb0JyUSxFQUFTQSxHQUFVQSxFQUFPd1EsZUFBaUJMLEVBRTNGblIsRUFBT0QsUUFBVSxTQUFVUyxHQUl2QixPQUhHMFEsRUFBSUksRUFBdUI5USxLQUMxQjRRLEdBQWlCRixFQUFJbFEsRUFBUVIsR0FBTzhRLEVBQXNCOVEsR0FBUVEsRUFBT1IsR0FDeEU4USxFQUFzQjlRLEdBQVErUSxFQUFzQixVQUFZL1EsSUFDOUQ4USxFQUFzQjlRLEssZ0JDZmpDLElBQUlpUixFQUFReFAsRUFBUSxJQUdwQmpDLEVBQU9ELFNBQVcwUixHQUFNLFdBQ3RCLE9BQThFLEdBQXZFOVEsT0FBT0MsZUFBZSxHQUFJLEVBQUcsQ0FBRUUsSUFBSyxXQUFjLE9BQU8sS0FBUSxPLGdCQ0oxRSxJQUFJaUssRUFBYzlJLEVBQVEsSUFDdEJ5UCxFQUFpQnpQLEVBQVEsSUFDekIwUCxFQUFXMVAsRUFBUSxJQUNuQjJQLEVBQWMzUCxFQUFRLElBRXRCNFAsRUFBdUJsUixPQUFPQyxlQUlsQ2IsRUFBUW1MLEVBQUlILEVBQWM4RyxFQUF1QixTQUF3QkMsRUFBR0MsRUFBR0MsR0FJN0UsR0FIQUwsRUFBU0csR0FDVEMsRUFBSUgsRUFBWUcsR0FBRyxHQUNuQkosRUFBU0ssR0FDTE4sRUFBZ0IsSUFDbEIsT0FBT0csRUFBcUJDLEVBQUdDLEVBQUdDLEdBQ2xDLE1BQU81TSxJQUNULEdBQUksUUFBUzRNLEdBQWMsUUFBU0EsRUFBWSxNQUFNQyxVQUFVLDJCQUVoRSxNQURJLFVBQVdELElBQVlGLEVBQUVDLEdBQUtDLEVBQVc5USxPQUN0QzRRLEksY0NsQlQ5UixFQUFPRCxRQUFVLFNBQVVpRCxHQUN6QixNQUFxQixpQkFBUEEsRUFBeUIsT0FBUEEsRUFBNEIsbUJBQVBBLEksZ0JDRHZELElBQUlrUCxFQUFXalEsRUFBUSxJQUV2QmpDLEVBQU9ELFFBQVUsU0FBVWlELEdBQ3pCLElBQUtrUCxFQUFTbFAsR0FDWixNQUFNaVAsVUFBVUUsT0FBT25QLEdBQU0scUJBQzdCLE9BQU9BLEksY0NMWCxJQUFJb1AsRUFHSkEsRUFBSyxXQUNKLE9BQU96TSxLQURILEdBSUwsSUFFQ3lNLEVBQUlBLEdBQUssSUFBSTlQLFNBQVMsY0FBYixHQUNSLE1BQU91QixHQUVjLGlCQUFYVixTQUFxQmlQLEVBQUlqUCxRQU9yQ25ELEVBQU9ELFFBQVVxUyxHLGNDbkJqQnBTLEVBQU9ELFFBQVUsU0FBU3NTLEdBQ3pCLElBQUtBLEVBQWVDLGdCQUFpQixDQUNwQyxJQUFJdFMsRUFBU1csT0FBT1ksT0FBTzhRLEdBRXRCclMsRUFBT3dPLFdBQVV4TyxFQUFPd08sU0FBVyxJQUN4QzdOLE9BQU9DLGVBQWVaLEVBQVEsU0FBVSxDQUN2Q2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0UsS0FHaEJTLE9BQU9DLGVBQWVaLEVBQVEsS0FBTSxDQUNuQ2EsWUFBWSxFQUNaQyxJQUFLLFdBQ0osT0FBT2QsRUFBT0MsS0FHaEJVLE9BQU9DLGVBQWVaLEVBQVEsVUFBVyxDQUN4Q2EsWUFBWSxJQUViYixFQUFPc1MsZ0JBQWtCLEVBRTFCLE9BQU90UyxJLGdCQ3JCUixJQUFJdVMsRUFBZ0J0USxFQUFRLElBQ3hCdVEsRUFBeUJ2USxFQUFRLElBRXJDakMsRUFBT0QsUUFBVSxTQUFVaUQsR0FDekIsT0FBT3VQLEVBQWNDLEVBQXVCeFAsTSw4QkNIOUMsU0FBU3lQLElBRVAsR0FDNEMsb0JBQW5DQyxnQ0FDNEMsbUJBQTVDQSwrQkFBK0JELFNBRnhDLENBTUloUCxFQVVKLElBRUVpUCwrQkFBK0JELFNBQVNBLEdBQ3hDLE1BQU8zRSxHQUdQdkksUUFBUUgsTUFBTTBJLEtBT2hCMkUsR0FDQXpTLEVBQU9ELFFBQVVrQyxFQUFRLEssNkJDL0J6QmpDLEVBQU9ELFFBQVVrQyxFQUFRLEssOEJDSDNCLFlBQ0EsSUFBSUksRUFBOEIsaUJBQVZlLEdBQXNCQSxHQUFVQSxFQUFPekMsU0FBV0EsUUFBVXlDLEVBRXJFZixRLGtDQ0ZmckMsRUFBT0QsUUFBVSxDQUFDLFFBQVUsMEJBQTBCLFNBQVcsd0JBQXdCLFVBQVksNEIsZ0JDRHJHLElBQUlxRCxFQUFTbkIsRUFBUSxHQUNqQjBRLEVBQWUxUSxFQUFRLElBQ3ZCMlEsRUFBdUIzUSxFQUFRLElBQy9CNFEsRUFBOEI1USxFQUFRLElBQ3RDNlEsRUFBa0I3USxFQUFRLElBRTFCOFEsRUFBV0QsRUFBZ0IsWUFDM0JFLEVBQWdCRixFQUFnQixlQUNoQ0csRUFBY0wsRUFBcUJNLE9BRXZDLElBQUssSUFBSUMsS0FBbUJSLEVBQWMsQ0FDeEMsSUFBSVMsRUFBYWhRLEVBQU8rUCxHQUNwQkUsRUFBc0JELEdBQWNBLEVBQVd2UixVQUNuRCxHQUFJd1IsRUFBcUIsQ0FFdkIsR0FBSUEsRUFBb0JOLEtBQWNFLEVBQWEsSUFDakRKLEVBQTRCUSxFQUFxQk4sRUFBVUUsR0FDM0QsTUFBTzdOLEdBQ1BpTyxFQUFvQk4sR0FBWUUsRUFLbEMsR0FIS0ksRUFBb0JMLElBQ3ZCSCxFQUE0QlEsRUFBcUJMLEVBQWVHLEdBRTlEUixFQUFhUSxHQUFrQixJQUFLLElBQUlHLEtBQWVWLEVBRXpELEdBQUlTLEVBQW9CQyxLQUFpQlYsRUFBcUJVLEdBQWMsSUFDMUVULEVBQTRCUSxFQUFxQkMsRUFBYVYsRUFBcUJVLElBQ25GLE1BQU9sTyxHQUNQaU8sRUFBb0JDLEdBQWVWLEVBQXFCVSxPLGNDNUJoRXRULEVBQU9ELFNBQVUsRyxnQkNBakIsSUFBSXFELEVBQVNuQixFQUFRLEdBQ2pCNFEsRUFBOEI1USxFQUFRLElBRTFDakMsRUFBT0QsUUFBVSxTQUFVeUIsRUFBS04sR0FDOUIsSUFDRTJSLEVBQTRCelAsRUFBUTVCLEVBQUtOLEdBQ3pDLE1BQU9rRSxHQUNQaEMsRUFBTzVCLEdBQU9OLEVBQ2QsT0FBT0EsSSxjQ1JYbEIsRUFBT0QsUUFBVSxTQUFVd1QsRUFBUXJTLEdBQ2pDLE1BQU8sQ0FDTEwsYUFBdUIsRUFBVDBTLEdBQ2RDLGVBQXlCLEVBQVRELEdBQ2hCRSxXQUFxQixFQUFURixHQUNaclMsTUFBT0EsSyxjQ0xYbEIsRUFBT0QsUUFBVSxJLGNDQ2pCQyxFQUFPRCxRQUFVLENBQ2YsY0FDQSxpQkFDQSxnQkFDQSx1QkFDQSxpQkFDQSxXQUNBLFksZ0JDUkYsSUFBSWtSLEVBQVNoUCxFQUFRLElBQ2pCa1AsRUFBTWxQLEVBQVEsSUFFZGdDLEVBQU9nTixFQUFPLFFBRWxCalIsRUFBT0QsUUFBVSxTQUFVeUIsR0FDekIsT0FBT3lDLEVBQUt6QyxLQUFTeUMsRUFBS3pDLEdBQU8yUCxFQUFJM1AsTSxjQ052Q3hCLEVBQU9ELFFBQVUsSSw4QkNBakIsa0JBR0lxQyxFQUhKLFFBTUVBLEVBRGtCLG9CQUFURCxLQUNGQSxLQUNvQixvQkFBWGdCLE9BQ1RBLFlBQ29CLElBQVhDLEVBQ1RBLEVBRUFwRCxFQUtULElBQUk2TixFQUFTNkYsWUFBU3RSLEdBQ1B5TCxRLHlEQ2xCZix3REFNSThGLEVBQXVDLG9CQUFmelEsV0FBNkJBLFdBQStCLG9CQUFYQyxPQUF5QkEsWUFBMkIsSUFBWEMsRUFBeUJBLEVBQVMsR0FleEosU0FBU3dRLEVBQW1CMVMsR0FDMUIsSUFBSTJTLEVBQVcsR0FDZixNQUFPLENBQ0xDLEdBQUksU0FBWWpJLEdBQ2RnSSxFQUFTaEgsS0FBS2hCLElBRWhCa0ksSUFBSyxTQUFhbEksR0FDaEJnSSxFQUFXQSxFQUFTRyxRQUFPLFNBQVVDLEdBQ25DLE9BQU9BLElBQU1wSSxNQUdqQi9LLElBQUssV0FDSCxPQUFPSSxHQUVUOEUsSUFBSyxTQUFha08sRUFBVUMsR0FDMUJqVCxFQUFRZ1QsRUFDUkwsRUFBUzdMLFNBQVEsU0FBVTZELEdBQ3pCLE9BQU9BLEVBQVEzSyxFQUFPaVQsUUF1STlCLElBQUl6TSxFQUFRME0sSUFBTUMsZUE3SGxCLFNBQTRCQyxFQUFjQyxHQUN4QyxJQUFJQyxFQUF1QkMsRUF4Q3ZCalQsRUEwQ0FrVCxFQUFjLDRCQXpDWGYsRUFESG5TLEVBQU0seUJBQ29CbVMsRUFBZW5TLElBQVEsR0FBSyxHQXlDSSxNQUUxRG1ULEVBQXdCLFNBQVVDLEdBR3BDLFNBQVNELElBQ1AsSUFBSUUsRUFJSixPQUZBQSxFQUFRRCxFQUFXakosTUFBTWhHLEtBQU0yRCxZQUFjM0QsTUFDdkNtUCxRQUFVbEIsRUFBbUJpQixFQUFNRSxNQUFNN1QsT0FDeEMyVCxFQVBUblMsWUFBZWlTLEVBQVVDLEdBVXpCLElBQUlJLEVBQVNMLEVBQVM5UyxVQW9DdEIsT0FsQ0FtVCxFQUFPQyxnQkFBa0IsV0FDdkIsSUFBSUMsRUFFSixPQUFPQSxFQUFPLElBQVNSLEdBQWUvTyxLQUFLbVAsUUFBU0ksR0FHdERGLEVBQU9HLDBCQUE0QixTQUFtQ0MsR0FDcEUsR0FBSXpQLEtBQUtvUCxNQUFNN1QsUUFBVWtVLEVBQVVsVSxNQUFPLENBQ3hDLElBRUlpVCxFQUZBa0IsRUFBVzFQLEtBQUtvUCxNQUFNN1QsTUFDdEJnVCxFQUFXa0IsRUFBVWxVLFFBOURmb1UsRUFpRUdELE1BakVBRSxFQWlFVXJCLEdBL0RkLElBQU5vQixHQUFXLEVBQUlBLEdBQU0sRUFBSUMsRUFFekJELEdBQU1BLEdBQUtDLEdBQU1BLEdBOERsQnBCLEVBQWMsR0FFZEEsRUFBOEMsbUJBQXpCSSxFQUFzQ0EsRUFBcUJjLEVBQVVuQixHQTVFeEUsV0FvRkUsS0FGcEJDLEdBQWUsSUFHYnhPLEtBQUttUCxRQUFROU8sSUFBSW9QLEVBQVVsVSxNQUFPaVQsSUE3RTlDLElBQWtCbUIsRUFBR0MsR0FtRmpCUCxFQUFPakwsT0FBUyxXQUNkLE9BQU9wRSxLQUFLb1AsTUFBTXZHLFVBR2JtRyxFQS9DbUIsQ0FnRDFCYSxhQUVGYixFQUFTbk0sb0JBQXFCZ00sRUFBd0IsSUFBMEJFLEdBQWVlLElBQVU5VCxPQUFPK1QsV0FBWWxCLEdBRTVILElBQUltQixFQUF3QixTQUFVQyxHQUdwQyxTQUFTRCxJQUNQLElBQUlFLEVBaUJKLE9BZkFBLEVBQVNELEVBQVlqSyxNQUFNaEcsS0FBTTJELFlBQWMzRCxNQUN4Q21RLE1BQVEsQ0FDYjVVLE1BQU8yVSxFQUFPRSxZQUdoQkYsRUFBT0csU0FBVyxTQUFVOUIsRUFBVUMsR0FHQyxLQUZJLEVBQXRCMEIsRUFBT0ksY0FFTjlCLElBQ2xCMEIsRUFBT0ssU0FBUyxDQUNkaFYsTUFBTzJVLEVBQU9FLGNBS2JGLEVBcEJUblQsWUFBZWlULEVBQVVDLEdBdUJ6QixJQUFJTyxFQUFVUixFQUFTOVQsVUFrQ3ZCLE9BaENBc1UsRUFBUWhCLDBCQUE0QixTQUFtQ0MsR0FDckUsSUFBSWEsRUFBZWIsRUFBVWEsYUFDN0J0USxLQUFLc1EsYUFBZUEsUUFoSUUsV0FnSTRFQSxHQUdwR0UsRUFBUUMsa0JBQW9CLFdBQ3RCelEsS0FBSzBRLFFBQVEzQixJQUNmL08sS0FBSzBRLFFBQVEzQixHQUFhWixHQUFHbk8sS0FBS3FRLFVBR3BDLElBQUlDLEVBQWV0USxLQUFLb1AsTUFBTWtCLGFBQzlCdFEsS0FBS3NRLGFBQWVBLFFBeklFLFdBeUk0RUEsR0FHcEdFLEVBQVFHLHFCQUF1QixXQUN6QjNRLEtBQUswUSxRQUFRM0IsSUFDZi9PLEtBQUswUSxRQUFRM0IsR0FBYVgsSUFBSXBPLEtBQUtxUSxXQUl2Q0csRUFBUUosU0FBVyxXQUNqQixPQUFJcFEsS0FBSzBRLFFBQVEzQixHQUNSL08sS0FBSzBRLFFBQVEzQixHQUFhNVQsTUFFMUJ3VCxHQUlYNkIsRUFBUXBNLE9BQVMsV0FDZixPQXBIYXlFLEVBb0hJN0ksS0FBS29QLE1BQU12RyxTQW5IekJ6SyxNQUFNRCxRQUFRMEssR0FBWUEsRUFBUyxHQUFLQSxHQW1ITDdJLEtBQUttUSxNQUFNNVUsT0FwSHZELElBQW1Cc04sR0F1SFJtSCxFQTFEbUIsQ0EyRDFCSCxhQUdGLE9BREFHLEVBQVNqTixlQUFnQitMLEVBQXdCLElBQTBCQyxHQUFlZSxJQUFVOVQsT0FBUThTLEdBQ3JHLENBQ0xFLFNBQVVBLEVBQ1ZnQixTQUFVQSxJQU1Dak8sUSxrQ0MvS2YsSUFBSTZPLEVBQVV0VSxFQUFRLEtBS3RCakMsRUFBT0QsUUFBVXlXLEVBQ2pCeFcsRUFBT0QsUUFBUTBXLE1BQVFBLEVBQ3ZCelcsRUFBT0QsUUFBUTJXLFFBc0dmLFNBQWtCMVAsRUFBSzJQLEdBQ3JCLE9BQU9DLEVBQWlCSCxFQUFNelAsRUFBSzJQLEdBQVVBLElBdEcvQzNXLEVBQU9ELFFBQVE2VyxpQkFBbUJBLEVBQ2xDNVcsRUFBT0QsUUFBUThXLGVBQWlCQSxFQU9oQyxJQUFJQyxFQUFjLElBQUk5UixPQUFPLENBRzNCLFVBT0EsMEdBQ0E2QyxLQUFLLEtBQU0sS0FTYixTQUFTNE8sRUFBT3pQLEVBQUsyUCxHQVFuQixJQVBBLElBS0lJLEVBTEFDLEVBQVMsR0FDVHhWLEVBQU0sRUFDTmtHLEVBQVEsRUFDUmhCLEVBQU8sR0FDUHVRLEVBQW1CTixHQUFXQSxFQUFRTyxXQUFhLElBR2YsT0FBaENILEVBQU1ELEVBQVl2TCxLQUFLdkUsS0FBZSxDQUM1QyxJQUFJM0csRUFBSTBXLEVBQUksR0FDUkksRUFBVUosRUFBSSxHQUNkSyxFQUFTTCxFQUFJclAsTUFLakIsR0FKQWhCLEdBQVFNLEVBQUkwRSxNQUFNaEUsRUFBTzBQLEdBQ3pCMVAsRUFBUTBQLEVBQVMvVyxFQUFFbUUsT0FHZjJTLEVBQ0Z6USxHQUFReVEsRUFBUSxPQURsQixDQUtBLElBQUkxSyxFQUFPekYsRUFBSVUsR0FDWDJQLEVBQVNOLEVBQUksR0FDYnZXLEVBQU91VyxFQUFJLEdBQ1hPLEVBQVVQLEVBQUksR0FDZFEsRUFBUVIsRUFBSSxHQUNaUyxFQUFXVCxFQUFJLEdBQ2ZVLEVBQVdWLEVBQUksR0FHZnJRLElBQ0ZzUSxFQUFPbkssS0FBS25HLEdBQ1pBLEVBQU8sSUFHVCxJQUFJZ1IsRUFBb0IsTUFBVkwsR0FBMEIsTUFBUjVLLEdBQWdCQSxJQUFTNEssRUFDckRNLEVBQXNCLE1BQWJILEdBQWlDLE1BQWJBLEVBQzdCSSxFQUF3QixNQUFiSixHQUFpQyxNQUFiQSxFQUMvQk4sRUFBWUgsRUFBSSxJQUFNRSxFQUN0QlksRUFBVVAsR0FBV0MsRUFFekJQLEVBQU9uSyxLQUFLLENBQ1ZyTSxLQUFNQSxHQUFRZ0IsSUFDZDZWLE9BQVFBLEdBQVUsR0FDbEJILFVBQVdBLEVBQ1hVLFNBQVVBLEVBQ1ZELE9BQVFBLEVBQ1JELFFBQVNBLEVBQ1RELFdBQVlBLEVBQ1pJLFFBQVNBLEVBQVVDLEVBQVlELEdBQVlKLEVBQVcsS0FBTyxLQUFPTSxFQUFhYixHQUFhLFNBY2xHLE9BVEl4UCxFQUFRVixFQUFJeEMsU0FDZGtDLEdBQVFNLEVBQUlnUixPQUFPdFEsSUFJakJoQixHQUNGc1EsRUFBT25LLEtBQUtuRyxHQUdQc1EsRUFvQlQsU0FBU2lCLEVBQTBCalIsR0FDakMsT0FBT2tSLFVBQVVsUixHQUFLRixRQUFRLFdBQVcsU0FBVXhHLEdBQ2pELE1BQU8sSUFBTUEsRUFBRTZYLFdBQVcsR0FBR2pULFNBQVMsSUFBSWtULGlCQW1COUMsU0FBU3hCLEVBQWtCSSxFQUFRTCxHQUtqQyxJQUhBLElBQUkwQixFQUFVLElBQUl0VSxNQUFNaVQsRUFBT3hTLFFBR3RCdkUsRUFBSSxFQUFHQSxFQUFJK1csRUFBT3hTLE9BQVF2RSxJQUNSLGlCQUFkK1csRUFBTy9XLEtBQ2hCb1ksRUFBUXBZLEdBQUssSUFBSStFLE9BQU8sT0FBU2dTLEVBQU8vVyxHQUFHNFgsUUFBVSxLQUFNUyxFQUFNM0IsS0FJckUsT0FBTyxTQUFVbEwsRUFBSzhNLEdBTXBCLElBTEEsSUFBSTdSLEVBQU8sR0FDUGUsRUFBT2dFLEdBQU8sR0FFZCtNLEdBRFVELEdBQVEsSUFDREUsT0FBU1IsRUFBMkJTLG1CQUVoRHpZLEVBQUksRUFBR0EsRUFBSStXLEVBQU94UyxPQUFRdkUsSUFBSyxDQUN0QyxJQUFJMFksRUFBUTNCLEVBQU8vVyxHQUVuQixHQUFxQixpQkFBVjBZLEVBQVgsQ0FNQSxJQUNJQyxFQURBMVgsRUFBUXVHLEVBQUtrUixFQUFNblksTUFHdkIsR0FBYSxNQUFUVSxFQUFlLENBQ2pCLEdBQUl5WCxFQUFNZixTQUFVLENBRWRlLEVBQU1qQixVQUNSaFIsR0FBUWlTLEVBQU10QixRQUdoQixTQUVBLE1BQU0sSUFBSXBGLFVBQVUsYUFBZTBHLEVBQU1uWSxLQUFPLG1CQUlwRCxHQUFJK1YsRUFBUXJWLEdBQVosQ0FDRSxJQUFLeVgsRUFBTWhCLE9BQ1QsTUFBTSxJQUFJMUYsVUFBVSxhQUFlMEcsRUFBTW5ZLEtBQU8sa0NBQW9DcVksS0FBS0MsVUFBVTVYLEdBQVMsS0FHOUcsR0FBcUIsSUFBakJBLEVBQU1zRCxPQUFjLENBQ3RCLEdBQUltVSxFQUFNZixTQUNSLFNBRUEsTUFBTSxJQUFJM0YsVUFBVSxhQUFlMEcsRUFBTW5ZLEtBQU8scUJBSXBELElBQUssSUFBSXVZLEVBQUksRUFBR0EsRUFBSTdYLEVBQU1zRCxPQUFRdVUsSUFBSyxDQUdyQyxHQUZBSCxFQUFVSixFQUFPdFgsRUFBTTZYLEtBRWxCVixFQUFRcFksR0FBR29ILEtBQUt1UixHQUNuQixNQUFNLElBQUkzRyxVQUFVLGlCQUFtQjBHLEVBQU1uWSxLQUFPLGVBQWlCbVksRUFBTWQsUUFBVSxvQkFBc0JnQixLQUFLQyxVQUFVRixHQUFXLEtBR3ZJbFMsSUFBZSxJQUFOcVMsRUFBVUosRUFBTXRCLE9BQVNzQixFQUFNekIsV0FBYTBCLE9BcEJ6RCxDQTRCQSxHQUZBQSxFQUFVRCxFQUFNbEIsU0E1RWJTLFVBNEV1Q2hYLEdBNUV4QjRGLFFBQVEsU0FBUyxTQUFVeEcsR0FDL0MsTUFBTyxJQUFNQSxFQUFFNlgsV0FBVyxHQUFHalQsU0FBUyxJQUFJa1QsaUJBMkVXSSxFQUFPdFgsSUFFckRtWCxFQUFRcFksR0FBR29ILEtBQUt1UixHQUNuQixNQUFNLElBQUkzRyxVQUFVLGFBQWUwRyxFQUFNblksS0FBTyxlQUFpQm1ZLEVBQU1kLFFBQVUsb0JBQXNCZSxFQUFVLEtBR25IbFMsR0FBUWlTLEVBQU10QixPQUFTdUIsUUFyRHJCbFMsR0FBUWlTLEVBd0RaLE9BQU9qUyxHQVVYLFNBQVNxUixFQUFjL1EsR0FDckIsT0FBT0EsRUFBSUYsUUFBUSw2QkFBOEIsUUFTbkQsU0FBU2dSLEVBQWFQLEdBQ3BCLE9BQU9BLEVBQU16USxRQUFRLGdCQUFpQixRQVV4QyxTQUFTa1MsRUFBWUMsRUFBSWhWLEdBRXZCLE9BREFnVixFQUFHaFYsS0FBT0EsRUFDSGdWLEVBU1QsU0FBU1gsRUFBTzNCLEdBQ2QsT0FBT0EsR0FBV0EsRUFBUXVDLFVBQVksR0FBSyxJQXdFN0MsU0FBU3JDLEVBQWdCRyxFQUFRL1MsRUFBTTBTLEdBQ2hDSixFQUFRdFMsS0FDWDBTLEVBQWtDMVMsR0FBUTBTLEVBQzFDMVMsRUFBTyxJQVVULElBTEEsSUFBSWtWLEdBRkp4QyxFQUFVQSxHQUFXLElBRUF3QyxPQUNqQkMsR0FBc0IsSUFBaEJ6QyxFQUFReUMsSUFDZEMsRUFBUSxHQUdIcFosRUFBSSxFQUFHQSxFQUFJK1csRUFBT3hTLE9BQVF2RSxJQUFLLENBQ3RDLElBQUkwWSxFQUFRM0IsRUFBTy9XLEdBRW5CLEdBQXFCLGlCQUFWMFksRUFDVFUsR0FBU3RCLEVBQWFZLE9BQ2pCLENBQ0wsSUFBSXRCLEVBQVNVLEVBQWFZLEVBQU10QixRQUM1QkMsRUFBVSxNQUFRcUIsRUFBTWQsUUFBVSxJQUV0QzVULEVBQUs0SSxLQUFLOEwsR0FFTkEsRUFBTWhCLFNBQ1JMLEdBQVcsTUFBUUQsRUFBU0MsRUFBVSxNQWF4QytCLEdBTkkvQixFQUpBcUIsRUFBTWYsU0FDSGUsRUFBTWpCLFFBR0NMLEVBQVMsSUFBTUMsRUFBVSxLQUZ6QixNQUFRRCxFQUFTLElBQU1DLEVBQVUsTUFLbkNELEVBQVMsSUFBTUMsRUFBVSxLQU96QyxJQUFJSixFQUFZYSxFQUFhcEIsRUFBUU8sV0FBYSxLQUM5Q29DLEVBQW9CRCxFQUFNM04sT0FBT3dMLEVBQVUxUyxVQUFZMFMsRUFrQjNELE9BWktpQyxJQUNIRSxHQUFTQyxFQUFvQkQsRUFBTTNOLE1BQU0sR0FBSXdMLEVBQVUxUyxRQUFVNlUsR0FBUyxNQUFRbkMsRUFBWSxXQUk5Rm1DLEdBREVELEVBQ08sSUFJQUQsR0FBVUcsRUFBb0IsR0FBSyxNQUFRcEMsRUFBWSxNQUczRDhCLEVBQVcsSUFBSWhVLE9BQU8sSUFBTXFVLEVBQU9mLEVBQU0zQixJQUFXMVMsR0FlN0QsU0FBU3VTLEVBQWM5UCxFQUFNekMsRUFBTTBTLEdBUWpDLE9BUEtKLEVBQVF0UyxLQUNYMFMsRUFBa0MxUyxHQUFRMFMsRUFDMUMxUyxFQUFPLElBR1QwUyxFQUFVQSxHQUFXLEdBRWpCalEsYUFBZ0IxQixPQWxKdEIsU0FBeUIwQixFQUFNekMsR0FFN0IsSUFBSXNWLEVBQVM3UyxFQUFLOFMsT0FBT25VLE1BQU0sYUFFL0IsR0FBSWtVLEVBQ0YsSUFBSyxJQUFJdFosRUFBSSxFQUFHQSxFQUFJc1osRUFBTy9VLE9BQVF2RSxJQUNqQ2dFLEVBQUs0SSxLQUFLLENBQ1JyTSxLQUFNUCxFQUNOb1gsT0FBUSxLQUNSSCxVQUFXLEtBQ1hVLFVBQVUsRUFDVkQsUUFBUSxFQUNSRCxTQUFTLEVBQ1RELFVBQVUsRUFDVkksUUFBUyxPQUtmLE9BQU9tQixFQUFXdFMsRUFBTXpDLEdBZ0lmd1YsQ0FBZS9TLEVBQTZCekMsR0FHakRzUyxFQUFRN1AsR0F4SGQsU0FBd0JBLEVBQU16QyxFQUFNMFMsR0FHbEMsSUFGQSxJQUFJblAsRUFBUSxHQUVIdkgsRUFBSSxFQUFHQSxFQUFJeUcsRUFBS2xDLE9BQVF2RSxJQUMvQnVILEVBQU1xRixLQUFLMkosRUFBYTlQLEVBQUt6RyxHQUFJZ0UsRUFBTTBTLEdBQVM2QyxRQUtsRCxPQUFPUixFQUZNLElBQUloVSxPQUFPLE1BQVF3QyxFQUFNSyxLQUFLLEtBQU8sSUFBS3lRLEVBQU0zQixJQUVuQzFTLEdBZ0hqQnlWLENBQXFDaFQsRUFBOEJ6QyxFQUFPMFMsR0FyR3JGLFNBQXlCalEsRUFBTXpDLEVBQU0wUyxHQUNuQyxPQUFPRSxFQUFlSixFQUFNL1AsRUFBTWlRLEdBQVUxUyxFQUFNMFMsR0F1RzNDZ0QsQ0FBc0NqVCxFQUE4QnpDLEVBQU8wUyxLLDZCQ3JhbEYzVyxFQUFPRCxRQUFVa0MsRUFBUSxNLGdCQ0YzQmpDLEVBQU9ELFFBQVUsQ0FBQyxHQUFLLHdCQUF3QixHQUFLLDRCLGdCQ0FwREMsRUFBT0QsUUFBVSxDQUFDLFNBQVcsMEJBQTBCLFNBQVcsNEI7Ozs7O0VDT2xFLElBQUltSyxFQUF3QnZKLE9BQU91SixzQkFDL0JwSSxFQUFpQm5CLE9BQU9rQixVQUFVQyxlQUNsQzhYLEVBQW1CalosT0FBT2tCLFVBQVVnWSxxQkFFeEMsU0FBU0MsRUFBU0MsR0FDakIsR0FBSUEsUUFDSCxNQUFNLElBQUk5SCxVQUFVLHlEQUdyQixPQUFPdFIsT0FBT29aLEdBK0NmL1osRUFBT0QsUUE1Q1AsV0FDQyxJQUNDLElBQUtZLE9BQU9xWixPQUNYLE9BQU8sRUFNUixJQUFJQyxFQUFRLElBQUk5SCxPQUFPLE9BRXZCLEdBREE4SCxFQUFNLEdBQUssS0FDa0MsTUFBekN0WixPQUFPc0osb0JBQW9CZ1EsR0FBTyxHQUNyQyxPQUFPLEVBS1IsSUFEQSxJQUFJQyxFQUFRLEdBQ0hqYSxFQUFJLEVBQUdBLEVBQUksR0FBSUEsSUFDdkJpYSxFQUFNLElBQU0vSCxPQUFPZ0ksYUFBYWxhLElBQU1BLEVBS3ZDLEdBQXdCLGVBSFhVLE9BQU9zSixvQkFBb0JpUSxHQUFPdFQsS0FBSSxTQUFVbEYsR0FDNUQsT0FBT3dZLEVBQU14WSxNQUVIbUcsS0FBSyxJQUNmLE9BQU8sRUFJUixJQUFJdVMsRUFBUSxHQUlaLE1BSEEsdUJBQXVCelQsTUFBTSxJQUFJcUIsU0FBUSxTQUFVcVMsR0FDbERELEVBQU1DLEdBQVVBLEtBR2YseUJBREUxWixPQUFPc0QsS0FBS3RELE9BQU9xWixPQUFPLEdBQUlJLElBQVF2UyxLQUFLLElBTTlDLE1BQU9pRyxHQUVSLE9BQU8sR0FJUXdNLEdBQW9CM1osT0FBT3FaLE9BQVMsU0FBVU8sRUFBUWYsR0FLdEUsSUFKQSxJQUFJZ0IsRUFFQUMsRUFEQUMsRUFBS1osRUFBU1MsR0FHVHZZLEVBQUksRUFBR0EsRUFBSXNILFVBQVU5RSxPQUFReEMsSUFBSyxDQUcxQyxJQUFLLElBQUlSLEtBRlRnWixFQUFPN1osT0FBTzJJLFVBQVV0SCxJQUduQkYsRUFBZTFCLEtBQUtvYSxFQUFNaFosS0FDN0JrWixFQUFHbFosR0FBT2daLEVBQUtoWixJQUlqQixHQUFJMEksRUFBdUIsQ0FDMUJ1USxFQUFVdlEsRUFBc0JzUSxHQUNoQyxJQUFLLElBQUl2YSxFQUFJLEVBQUdBLEVBQUl3YSxFQUFRalcsT0FBUXZFLElBQy9CMlosRUFBaUJ4WixLQUFLb2EsRUFBTUMsRUFBUXhhLE1BQ3ZDeWEsRUFBR0QsRUFBUXhhLElBQU11YSxFQUFLQyxFQUFReGEsTUFNbEMsT0FBT3lhLEksY0N0RlIxYSxFQUFPRCxRQUFVLFNBQVVpRCxHQUN6QixHQUFVb0ksTUFBTnBJLEVBQWlCLE1BQU1pUCxVQUFVLHdCQUEwQmpQLEdBQy9ELE9BQU9BLEksZ0JDSlQsSUFBSTJYLEVBQVUxWSxFQUFRLElBQ2xCMlksRUFBUTNZLEVBQVEsS0FFbkJqQyxFQUFPRCxRQUFVLFNBQVV5QixFQUFLTixHQUMvQixPQUFPMFosRUFBTXBaLEtBQVNvWixFQUFNcFosUUFBaUI0SixJQUFWbEssRUFBc0JBLEVBQVEsTUFDaEUsV0FBWSxJQUFJMkwsS0FBSyxDQUN0QmdPLFFBQVMsUUFDVHpaLEtBQU11WixFQUFVLE9BQVMsU0FDekJHLFVBQVcsMEMsZ0JDUmIsSUFBSTFYLEVBQVNuQixFQUFRLEdBQ2pCOFksRUFBWTlZLEVBQVEsSUFHcEIyWSxFQUFReFgsRUFEQyx1QkFDaUIyWCxFQURqQixxQkFDbUMsSUFFaEQvYSxFQUFPRCxRQUFVNmEsRyxnQkNOakIsSUFBSTdQLEVBQWM5SSxFQUFRLElBQ3RCd1AsRUFBUXhQLEVBQVEsSUFDaEIrWSxFQUFnQi9ZLEVBQVEsSUFHNUJqQyxFQUFPRCxTQUFXZ0wsSUFBZ0IwRyxHQUFNLFdBQ3RDLE9BRVEsR0FGRDlRLE9BQU9DLGVBQWVvYSxFQUFjLE9BQVEsSUFBSyxDQUN0RGxhLElBQUssV0FBYyxPQUFPLEtBQ3pCdUQsTSxnQkNSTCxJQUFJakIsRUFBU25CLEVBQVEsR0FDakJpUSxFQUFXalEsRUFBUSxJQUVuQmdaLEVBQVc3WCxFQUFPNlgsU0FFbEJDLEVBQVNoSixFQUFTK0ksSUFBYS9JLEVBQVMrSSxFQUFTRCxlQUVyRGhiLEVBQU9ELFFBQVUsU0FBVWlELEdBQ3pCLE9BQU9rWSxFQUFTRCxFQUFTRCxjQUFjaFksR0FBTSxLLGdCQ1IvQyxJQUFJa1AsRUFBV2pRLEVBQVEsSUFNdkJqQyxFQUFPRCxRQUFVLFNBQVVvYixFQUFPQyxHQUNoQyxJQUFLbEosRUFBU2lKLEdBQVEsT0FBT0EsRUFDN0IsSUFBSUUsRUFBSXRCLEVBQ1IsR0FBSXFCLEdBQW9ELG1CQUF4QkMsRUFBS0YsRUFBTWpXLFlBQTRCZ04sRUFBUzZILEVBQU1zQixFQUFHamIsS0FBSythLElBQVMsT0FBT3BCLEVBQzlHLEdBQW1DLG1CQUF2QnNCLEVBQUtGLEVBQU1HLFdBQTJCcEosRUFBUzZILEVBQU1zQixFQUFHamIsS0FBSythLElBQVMsT0FBT3BCLEVBQ3pGLElBQUtxQixHQUFvRCxtQkFBeEJDLEVBQUtGLEVBQU1qVyxZQUE0QmdOLEVBQVM2SCxFQUFNc0IsRUFBR2piLEtBQUsrYSxJQUFTLE9BQU9wQixFQUMvRyxNQUFNOUgsVUFBVSw2QyxjQ1psQixJQUFJc0osRUFBSyxFQUNMQyxFQUFVdlksS0FBS3dZLFNBRW5CemIsRUFBT0QsUUFBVSxTQUFVeUIsR0FDekIsTUFBTyxVQUFZMlEsWUFBZS9HLElBQVI1SixFQUFvQixHQUFLQSxHQUFPLFFBQVUrWixFQUFLQyxHQUFTdFcsU0FBUyxNLGdCQ0o3RixJQUFJdU0sRUFBUXhQLEVBQVEsSUFFcEJqQyxFQUFPRCxVQUFZWSxPQUFPdUosd0JBQTBCdUgsR0FBTSxXQUd4RCxPQUFRVSxPQUFPblIsYyxnQkNMakIsSUFtREkwYSxFQW5EQS9KLEVBQVcxUCxFQUFRLElBQ25CMFosRUFBbUIxWixFQUFRLElBQzNCMlosRUFBYzNaLEVBQVEsSUFDdEI0WixFQUFhNVosRUFBUSxJQUNyQjZaLEVBQU83WixFQUFRLElBQ2Y4WixFQUF3QjlaLEVBQVEsSUFDaEMrWixFQUFZL1osRUFBUSxJQU1wQmdhLEVBQVdELEVBQVUsWUFFckJFLEVBQW1CLGFBRW5CQyxFQUFZLFNBQVVDLEdBQ3hCLE1BQU9DLFdBQW1CRCxFQUFuQkMsY0FtQ0xDLEVBQWtCLFdBQ3BCLElBRUVaLEVBQWtCVCxTQUFTc0IsUUFBVSxJQUFJQyxjQUFjLFlBQ3ZELE1BQU9wWCxJQTFCb0IsSUFJekJxWCxFQUZBQyxFQXlCSkosRUFBa0JaLEVBcENZLFNBQVVBLEdBQ3hDQSxFQUFnQmlCLE1BQU1SLEVBQVUsS0FDaENULEVBQWdCa0IsUUFDaEIsSUFBSUMsRUFBT25CLEVBQWdCb0IsYUFBYW5jLE9BRXhDLE9BREErYSxFQUFrQixLQUNYbUIsRUErQjZCRSxDQUEwQnJCLEtBekIxRGdCLEVBQVNYLEVBQXNCLFdBRzVCaUIsTUFBTUMsUUFBVSxPQUN2Qm5CLEVBQUtvQixZQUFZUixHQUVqQkEsRUFBT1MsSUFBTWhMLE9BTEosZ0JBTVRzSyxFQUFpQkMsRUFBT1UsY0FBY25DLFVBQ3ZCb0MsT0FDZlosRUFBZUUsTUFBTVIsRUFBVSxzQkFDL0JNLEVBQWVHLFFBQ1JILEVBQWVhLEdBZ0J0QixJQURBLElBQUk5WSxFQUFTb1gsRUFBWXBYLE9BQ2xCQSxZQUFpQjhYLEVBQWUsVUFBWVYsRUFBWXBYLElBQy9ELE9BQU84WCxLQUdUVCxFQUFXSSxJQUFZLEVBSXZCamMsRUFBT0QsUUFBVVksT0FBT1ksUUFBVSxTQUFnQnVRLEVBQUd5TCxHQUNuRCxJQUFJMVAsRUFRSixPQVBVLE9BQU5pRSxHQUNGb0ssRUFBZ0IsVUFBY3ZLLEVBQVNHLEdBQ3ZDakUsRUFBUyxJQUFJcU8sRUFDYkEsRUFBZ0IsVUFBYyxLQUU5QnJPLEVBQU9vTyxHQUFZbkssR0FDZGpFLEVBQVN5TyxTQUNNbFIsSUFBZm1TLEVBQTJCMVAsRUFBUzhOLEVBQWlCOU4sRUFBUTBQLEssZ0JDNUV0RSxJQUFJck0sRUFBTWpQLEVBQVEsR0FDZHViLEVBQWtCdmIsRUFBUSxJQUMxQmdGLEVBQVVoRixFQUFRLElBQStCZ0YsUUFDakQ0VSxFQUFhNVosRUFBUSxJQUV6QmpDLEVBQU9ELFFBQVUsU0FBVTRCLEVBQVE4YixHQUNqQyxJQUdJamMsRUFIQXNRLEVBQUkwTCxFQUFnQjdiLEdBQ3BCMUIsRUFBSSxFQUNKNE4sRUFBUyxHQUViLElBQUtyTSxLQUFPc1EsR0FBSVosRUFBSTJLLEVBQVlyYSxJQUFRMFAsRUFBSVksRUFBR3RRLElBQVFxTSxFQUFPaEIsS0FBS3JMLEdBRW5FLEtBQU9pYyxFQUFNalosT0FBU3ZFLEdBQU9pUixFQUFJWSxFQUFHdFEsRUFBTWljLEVBQU14ZCxTQUM3Q2dILEVBQVE0RyxFQUFRck0sSUFBUXFNLEVBQU9oQixLQUFLckwsSUFFdkMsT0FBT3FNLEksY0NmVCxJQUFJNlAsRUFBT3phLEtBQUt5YSxLQUNaQyxFQUFRMWEsS0FBSzBhLE1BSWpCM2QsRUFBT0QsUUFBVSxTQUFVNmQsR0FDekIsT0FBT0MsTUFBTUQsR0FBWUEsR0FBWSxHQUFLQSxFQUFXLEVBQUlELEVBQVFELEdBQU1FLEssZ0JDTnpFLElBQUlsWCxFQUFPekUsRUFBUSxJQUNmbUIsRUFBU25CLEVBQVEsR0FFakI2YixFQUFZLFNBQVVDLEdBQ3hCLE1BQTBCLG1CQUFaQSxFQUF5QkEsT0FBVzNTLEdBR3BEcEwsRUFBT0QsUUFBVSxTQUFVaWUsRUFBV0MsR0FDcEMsT0FBTzNVLFVBQVU5RSxPQUFTLEVBQUlzWixFQUFVcFgsRUFBS3NYLEtBQWVGLEVBQVUxYSxFQUFPNGEsSUFDekV0WCxFQUFLc1gsSUFBY3RYLEVBQUtzWCxHQUFXQyxJQUFXN2EsRUFBTzRhLElBQWM1YSxFQUFPNGEsR0FBV0MsSyxnQkNUM0YsSUFTSWpZLEVBQUtsRixFQUFLb1EsRUFUVmdOLEVBQWtCamMsRUFBUSxJQUMxQm1CLEVBQVNuQixFQUFRLEdBQ2pCaVEsRUFBV2pRLEVBQVEsSUFDbkI0USxFQUE4QjVRLEVBQVEsSUFDdENrYyxFQUFZbGMsRUFBUSxHQUNwQitaLEVBQVkvWixFQUFRLElBQ3BCNFosRUFBYTVaLEVBQVEsSUFFckJtYyxFQUFVaGIsRUFBT2diLFFBZ0JyQixHQUFJRixFQUFpQixDQUNuQixJQUFJdEQsRUFBUSxJQUFJd0QsRUFDWkMsRUFBUXpELEVBQU05WixJQUNkd2QsRUFBUTFELEVBQU0xSixJQUNkcU4sRUFBUTNELEVBQU01VSxJQUNsQkEsRUFBTSxTQUFVaEQsRUFBSXdiLEdBRWxCLE9BREFELEVBQU1uZSxLQUFLd2EsRUFBTzVYLEVBQUl3YixHQUNmQSxHQUVUMWQsRUFBTSxTQUFVa0MsR0FDZCxPQUFPcWIsRUFBTWplLEtBQUt3YSxFQUFPNVgsSUFBTyxJQUVsQ2tPLEVBQU0sU0FBVWxPLEdBQ2QsT0FBT3NiLEVBQU1sZSxLQUFLd2EsRUFBTzVYLFFBRXRCLENBQ0wsSUFBSXliLEVBQVF6QyxFQUFVLFNBQ3RCSCxFQUFXNEMsSUFBUyxFQUNwQnpZLEVBQU0sU0FBVWhELEVBQUl3YixHQUVsQixPQURBM0wsRUFBNEI3UCxFQUFJeWIsRUFBT0QsR0FDaENBLEdBRVQxZCxFQUFNLFNBQVVrQyxHQUNkLE9BQU9tYixFQUFVbmIsRUFBSXliLEdBQVN6YixFQUFHeWIsR0FBUyxJQUU1Q3ZOLEVBQU0sU0FBVWxPLEdBQ2QsT0FBT21iLEVBQVVuYixFQUFJeWIsSUFJekJ6ZSxFQUFPRCxRQUFVLENBQ2ZpRyxJQUFLQSxFQUNMbEYsSUFBS0EsRUFDTG9RLElBQUtBLEVBQ0x3TixRQS9DWSxTQUFVMWIsR0FDdEIsT0FBT2tPLEVBQUlsTyxHQUFNbEMsRUFBSWtDLEdBQU1nRCxFQUFJaEQsRUFBSSxLQStDbkMyYixVQTVDYyxTQUFVQyxHQUN4QixPQUFPLFNBQVU1YixHQUNmLElBQUk4UyxFQUNKLElBQUs1RCxFQUFTbFAsS0FBUThTLEVBQVFoVixFQUFJa0MsSUFBS2tHLE9BQVMwVixFQUM5QyxNQUFNM00sVUFBVSwwQkFBNEIyTSxFQUFPLGFBQ25ELE9BQU85SSxNLGdCQ3BCYixJQUFJOEUsRUFBUTNZLEVBQVEsSUFFaEI0YyxFQUFtQnZjLFNBQVM0QyxTQUdFLG1CQUF2QjBWLEVBQU1rRSxnQkFDZmxFLEVBQU1rRSxjQUFnQixTQUFVOWIsR0FDOUIsT0FBTzZiLEVBQWlCemUsS0FBSzRDLEtBSWpDaEQsRUFBT0QsUUFBVTZhLEVBQU1rRSxlLGdCQ1h2QixJQUFJL1QsRUFBYzlJLEVBQVEsSUFDdEI4YyxFQUE2QjljLEVBQVEsSUFDckNnSixFQUEyQmhKLEVBQVEsSUFDbkN1YixFQUFrQnZiLEVBQVEsSUFDMUIyUCxFQUFjM1AsRUFBUSxJQUN0QmlQLEVBQU1qUCxFQUFRLEdBQ2R5UCxFQUFpQnpQLEVBQVEsSUFFekIrYyxFQUFpQ3JlLE9BQU93Six5QkFJNUNwSyxFQUFRbUwsRUFBSUgsRUFBY2lVLEVBQWlDLFNBQWtDbE4sRUFBR0MsR0FHOUYsR0FGQUQsRUFBSTBMLEVBQWdCMUwsR0FDcEJDLEVBQUlILEVBQVlHLEdBQUcsR0FDZkwsRUFBZ0IsSUFDbEIsT0FBT3NOLEVBQStCbE4sRUFBR0MsR0FDekMsTUFBTzNNLElBQ1QsR0FBSThMLEVBQUlZLEVBQUdDLEdBQUksT0FBTzlHLEdBQTBCOFQsRUFBMkI3VCxFQUFFOUssS0FBSzBSLEVBQUdDLEdBQUlELEVBQUVDLE0sZ0JDbEI3RixJQUFJM08sRUFBU25CLEVBQVEsR0FDakI0USxFQUE4QjVRLEVBQVEsSUFDdENpUCxFQUFNalAsRUFBUSxHQUNkOFksRUFBWTlZLEVBQVEsSUFDcEI2YyxFQUFnQjdjLEVBQVEsSUFDeEJnZCxFQUFzQmhkLEVBQVEsSUFFOUJpZCxFQUFtQkQsRUFBb0JuZSxJQUN2Q3FlLEVBQXVCRixFQUFvQlAsUUFDM0NVLEVBQVdqTixPQUFPQSxRQUFReEwsTUFBTSxXQUVuQzNHLEVBQU9ELFFBQVUsU0FBVStSLEVBQUd0USxFQUFLTixFQUFPeVYsR0FDekMsSUFBSTBJLElBQVMxSSxLQUFZQSxFQUFRMEksT0FDN0JDLElBQVMzSSxLQUFZQSxFQUFROVYsV0FDN0IwZSxJQUFjNUksS0FBWUEsRUFBUTRJLFlBQ2xCLG1CQUFUcmUsSUFDUyxpQkFBUE0sR0FBb0IwUCxFQUFJaFEsRUFBTyxTQUFTMlIsRUFBNEIzUixFQUFPLE9BQVFNLEdBQzlGMmQsRUFBcUJqZSxHQUFPc1ksT0FBUzRGLEVBQVN2WCxLQUFtQixpQkFBUHJHLEVBQWtCQSxFQUFNLEtBRWhGc1EsSUFBTTFPLEdBSUVpYyxHQUVBRSxHQUFlek4sRUFBRXRRLEtBQzNCOGQsR0FBUyxVQUZGeE4sRUFBRXRRLEdBSVA4ZCxFQUFReE4sRUFBRXRRLEdBQU9OLEVBQ2hCMlIsRUFBNEJmLEVBQUd0USxFQUFLTixJQVRuQ29lLEVBQVF4TixFQUFFdFEsR0FBT04sRUFDaEI2WixFQUFVdlosRUFBS04sS0FVckJvQixTQUFTVCxVQUFXLFlBQVksV0FDakMsTUFBc0IsbUJBQVI4RCxNQUFzQnVaLEVBQWlCdlosTUFBTTZULFFBQVVzRixFQUFjblosVSw2QkMvQnJGLElBYUk2WixFQUFtQkMsRUFBbUNDLEVBYnREdFYsRUFBaUJuSSxFQUFRLElBQ3pCNFEsRUFBOEI1USxFQUFRLElBQ3RDaVAsRUFBTWpQLEVBQVEsR0FDZDZRLEVBQWtCN1EsRUFBUSxJQUMxQjBZLEVBQVUxWSxFQUFRLElBRWxCOFEsRUFBV0QsRUFBZ0IsWUFDM0I2TSxHQUF5QixFQVF6QixHQUFHMWIsT0FHQyxTQUZOeWIsRUFBZ0IsR0FBR3piLFNBSWpCd2IsRUFBb0NyVixFQUFlQSxFQUFlc1YsT0FDeEIvZSxPQUFPa0IsWUFBVzJkLEVBQW9CQyxHQUhsREUsR0FBeUIsR0FPbEN2VSxNQUFyQm9VLElBQWdDQSxFQUFvQixJQUduRDdFLEdBQVl6SixFQUFJc08sRUFBbUJ6TSxJQUN0Q0YsRUFBNEIyTSxFQUFtQnpNLEdBcEJoQyxXQUFjLE9BQU9wTixRQXVCdEMzRixFQUFPRCxRQUFVLENBQ2Z5ZixrQkFBbUJBLEVBQ25CRyx1QkFBd0JBLEksZ0JDbkMxQixJQUFJek8sRUFBTWpQLEVBQVEsR0FDZDZYLEVBQVc3WCxFQUFRLElBQ25CK1osRUFBWS9aLEVBQVEsSUFDcEIyZCxFQUEyQjNkLEVBQVEsSUFFbkNnYSxFQUFXRCxFQUFVLFlBQ3JCNkQsRUFBa0JsZixPQUFPa0IsVUFJN0I3QixFQUFPRCxRQUFVNmYsRUFBMkJqZixPQUFPeUosZUFBaUIsU0FBVTBILEdBRTVFLE9BREFBLEVBQUlnSSxFQUFTaEksR0FDVFosRUFBSVksRUFBR21LLEdBQWtCbkssRUFBRW1LLEdBQ0gsbUJBQWpCbkssRUFBRWpQLGFBQTZCaVAsYUFBYUEsRUFBRWpQLFlBQ2hEaVAsRUFBRWpQLFlBQVloQixVQUNkaVEsYUFBYW5SLE9BQVNrZixFQUFrQixPLGdCQ2ZuRCxJQUFJamYsRUFBaUJxQixFQUFRLElBQXVDaUosRUFDaEVnRyxFQUFNalAsRUFBUSxHQUdkK1EsRUFGa0IvUSxFQUFRLEdBRVY2USxDQUFnQixlQUVwQzlTLEVBQU9ELFFBQVUsU0FBVWlELEVBQUk4YyxFQUFLQyxHQUM5Qi9jLElBQU9rTyxFQUFJbE8sRUFBSytjLEVBQVMvYyxFQUFLQSxFQUFHbkIsVUFBV21SLElBQzlDcFMsRUFBZW9DLEVBQUlnUSxFQUFlLENBQUVRLGNBQWMsRUFBTXRTLE1BQU80ZSxNLDZCQ1JwRCxTQUFTRSxFQUF5QjVkLEdBQ2hELElBQUl5TCxFQUNBN00sRUFBU29CLEVBQUtwQixPQWFsQixNQVhzQixtQkFBWEEsRUFDTkEsRUFBT2lmLFdBQ1ZwUyxFQUFTN00sRUFBT2lmLFlBRWhCcFMsRUFBUzdNLEVBQU8sY0FDaEJBLEVBQU9pZixXQUFhcFMsR0FHckJBLEVBQVMsZUFHSEEsRUFmUixtQyxnQkNDQTdOLEVBQU9ELFFBQVUsQ0FBQyxJQUFNLDRCLGdCQ0F4QkMsRUFBT0QsUUFBVSxDQUFDLFFBQVUsNEIsNkJDZ0JidUwsSUFKZixXQUNFLE9BQU8sSSw4QkNkVCx1QkFHSWpJLEVBQWdDLGlCQUFYdEQsU0FBdUJBLFVBQVlBLFFBQVF1RCxVQUFZdkQsUUFHNUV3RCxFQUFhRixHQUFnQyxpQkFBVnJELEdBQXNCQSxJQUFXQSxFQUFPc0QsVUFBWXRELEVBTXZGbUwsRUFIZ0I1SCxHQUFjQSxFQUFXeEQsVUFBWXNELEVBRzVCakIsSUFBSytJLFlBQVNDLEVBQ3ZDOFUsRUFBYy9VLEVBQVNBLEVBQU8rVSxpQkFBYzlVLEVBcUJqQytVLElBWGYsU0FBcUJDLEVBQVFDLEdBQzNCLEdBQUlBLEVBQ0YsT0FBT0QsRUFBTzFVLFFBRWhCLElBQUlsSCxFQUFTNGIsRUFBTzViLE9BQ2hCcUosRUFBU3FTLEVBQWNBLEVBQVkxYixHQUFVLElBQUk0YixFQUFPdmQsWUFBWTJCLEdBR3hFLE9BREE0YixFQUFPRSxLQUFLelMsR0FDTEEsSyxxQ0M5QlQ3TixFQUFPRCxRQUFVLENBQUMsV0FBYSwyQixjQ2EvQixTQUFTd2dCLEVBQVNDLEVBQU9DLEdBQ3ZCLElBQUlDLEVBQVNGLEVBQU1oYyxPQUNmbWMsRUFBUyxJQUFJNWMsTUFBTTJjLEdBQ25CRSxFQUFVLEdBQ1YzZ0IsRUFBSXlnQixFQUVKRyxFQTRETixTQUEyQkMsR0FFekIsSUFEQSxJQUFJTCxFQUFRLElBQUlNLElBQ1A5Z0IsRUFBSSxFQUFHMEgsRUFBTW1aLEVBQUl0YyxPQUFRdkUsRUFBSTBILEVBQUsxSCxJQUFLLENBQzlDLElBQUkrZ0IsRUFBT0YsRUFBSTdnQixHQUNWd2dCLEVBQU12UCxJQUFJOFAsRUFBSyxLQUFLUCxFQUFNemEsSUFBSWdiLEVBQUssR0FBSSxJQUFJQyxLQUMzQ1IsRUFBTXZQLElBQUk4UCxFQUFLLEtBQUtQLEVBQU16YSxJQUFJZ2IsRUFBSyxHQUFJLElBQUlDLEtBQ2hEUixFQUFNM2YsSUFBSWtnQixFQUFLLElBQUlFLElBQUlGLEVBQUssSUFFOUIsT0FBT1AsRUFwRWFVLENBQWtCVixHQUNsQ1csRUFzRU4sU0FBdUJOLEdBRXJCLElBREEsSUFBSS9KLEVBQU0sSUFBSWdLLElBQ0w5Z0IsRUFBSSxFQUFHMEgsRUFBTW1aLEVBQUl0YyxPQUFRdkUsRUFBSTBILEVBQUsxSCxJQUN6QzhXLEVBQUkvUSxJQUFJOGEsRUFBSTdnQixHQUFJQSxHQUVsQixPQUFPOFcsRUEzRVNzSyxDQUFjYixHQVM5QixJQU5BQyxFQUFNelksU0FBUSxTQUFTZ1osR0FDckIsSUFBS0ksRUFBVWxRLElBQUk4UCxFQUFLLE1BQVFJLEVBQVVsUSxJQUFJOFAsRUFBSyxJQUNqRCxNQUFNLElBQUl0UyxNQUFNLG9FQUliek8sS0FDQTJnQixFQUFRM2dCLElBQUlxaEIsRUFBTWQsRUFBTXZnQixHQUFJQSxFQUFHLElBQUlnaEIsS0FHMUMsT0FBT04sRUFFUCxTQUFTVyxFQUFNL1MsRUFBTXRPLEVBQUdzaEIsR0FDdEIsR0FBR0EsRUFBYXJRLElBQUkzQyxHQUFPLENBQ3pCLElBQUlpVCxFQUNKLElBQ0VBLEVBQVUsY0FBZ0IzSSxLQUFLQyxVQUFVdkssR0FDekMsTUFBTTFLLEdBQ04yZCxFQUFVLEdBRVosTUFBTSxJQUFJOVMsTUFBTSxvQkFBc0I4UyxHQUd4QyxJQUFLSixFQUFVbFEsSUFBSTNDLEdBQ2pCLE1BQU0sSUFBSUcsTUFBTSwrRUFBK0VtSyxLQUFLQyxVQUFVdkssSUFHaEgsSUFBSXFTLEVBQVEzZ0IsR0FBWixDQUNBMmdCLEVBQVEzZ0IsSUFBSyxFQUViLElBQUl3aEIsRUFBV1osRUFBYy9mLElBQUl5TixJQUFTLElBQUkwUyxJQUc5QyxHQUFJaGhCLEdBRkp3aEIsRUFBVzFkLE1BQU15VyxLQUFLaUgsSUFFTGpkLE9BQVEsQ0FDdkIrYyxFQUFhTCxJQUFJM1MsR0FDakIsRUFBRyxDQUNELElBQUltVCxFQUFRRCxJQUFXeGhCLEdBQ3ZCcWhCLEVBQU1JLEVBQU9OLEVBQVV0Z0IsSUFBSTRnQixHQUFRSCxTQUM1QnRoQixHQUNUc2hCLEVBQWFJLE9BQU9wVCxHQUd0Qm9TLElBQVNELEdBQVVuUyxJQTFEdkJ2TyxFQUFPRCxRQUFVLFNBQVMwZ0IsR0FDeEIsT0FBT0YsRUE2RFQsU0FBcUJPLEdBRW5CLElBREEsSUFBSS9KLEVBQU0sSUFBSWtLLElBQ0xoaEIsRUFBSSxFQUFHMEgsRUFBTW1aLEVBQUl0YyxPQUFRdkUsRUFBSTBILEVBQUsxSCxJQUFLLENBQzlDLElBQUkrZ0IsRUFBT0YsRUFBSTdnQixHQUNmOFcsRUFBSW1LLElBQUlGLEVBQUssSUFDYmpLLEVBQUltSyxJQUFJRixFQUFLLElBRWYsT0FBT2pkLE1BQU15VyxLQUFLekQsR0FwRUY2SyxDQUFZbkIsR0FBUUEsSUFHdEN6Z0IsRUFBT0QsUUFBUThoQixNQUFRdEIsRzs7Ozs7Ozs7R0NIVixJQUFJcmdCLEVBQUUrQixFQUFRLElBQWlCUCxFQUFFLG1CQUFvQlYsUUFBUUEsT0FBTzhnQixJQUFJL2YsRUFBRUwsRUFBRVYsT0FBTzhnQixJQUFJLGlCQUFpQixNQUFNQyxFQUFFcmdCLEVBQUVWLE9BQU84Z0IsSUFBSSxnQkFBZ0IsTUFBTS9nQixFQUFFVyxFQUFFVixPQUFPOGdCLElBQUksa0JBQWtCLE1BQU0zZ0IsRUFBRU8sRUFBRVYsT0FBTzhnQixJQUFJLHFCQUFxQixNQUFNRSxFQUFFdGdCLEVBQUVWLE9BQU84Z0IsSUFBSSxrQkFBa0IsTUFBTUcsRUFBRXZnQixFQUFFVixPQUFPOGdCLElBQUksa0JBQWtCLE1BQU1JLEVBQUV4Z0IsRUFBRVYsT0FBTzhnQixJQUFJLGlCQUFpQixNQUFNeE0sRUFBRTVULEVBQUVWLE9BQU84Z0IsSUFBSSxxQkFBcUIsTUFBTXZNLEVBQUU3VCxFQUFFVixPQUFPOGdCLElBQUksa0JBQWtCLE1BQU1LLEVBQUV6Z0IsRUFBRVYsT0FBTzhnQixJQUFJLGNBQWMsTUFBTU0sRUFBRTFnQixFQUFFVixPQUFPOGdCLElBQUksY0FDeGUsTUFBTU8sRUFBRSxtQkFBb0JyaEIsUUFBUUEsT0FBT3NoQixTQUFTLFNBQVNDLEVBQUVsZSxHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUUvRCxFQUFFLEVBQUVBLEVBQUVnSixVQUFVOUUsT0FBT2xFLElBQUlnRSxHQUFHLFdBQVdvVSxtQkFBbUJwUCxVQUFVaEosSUFBSSxNQUFNLHlCQUF5QitELEVBQUUsV0FBV0MsRUFBRSxpSEFDL1AsSUFBSWtlLEVBQUUsQ0FBQ0MsVUFBVSxXQUFXLE9BQU0sR0FBSUMsbUJBQW1CLGFBQWFDLG9CQUFvQixhQUFhQyxnQkFBZ0IsY0FBY0MsRUFBRSxHQUFHLFNBQVN2RixFQUFFalosRUFBRUMsRUFBRWhFLEdBQUdxRixLQUFLb1AsTUFBTTFRLEVBQUVzQixLQUFLMFEsUUFBUS9SLEVBQUVxQixLQUFLbWQsS0FBS0QsRUFBRWxkLEtBQUtvZCxRQUFRemlCLEdBQUdraUIsRUFDcE4sU0FBU1EsS0FBNkIsU0FBU0MsRUFBRTVlLEVBQUVDLEVBQUVoRSxHQUFHcUYsS0FBS29QLE1BQU0xUSxFQUFFc0IsS0FBSzBRLFFBQVEvUixFQUFFcUIsS0FBS21kLEtBQUtELEVBQUVsZCxLQUFLb2QsUUFBUXppQixHQUFHa2lCLEVBRHNHbEYsRUFBRXpiLFVBQVVxaEIsaUJBQWlCLEdBQUc1RixFQUFFemIsVUFBVXFVLFNBQVMsU0FBUzdSLEVBQUVDLEdBQUcsR0FBRyxpQkFBa0JELEdBQUcsbUJBQW9CQSxHQUFHLE1BQU1BLEVBQUUsTUFBTXFLLE1BQU02VCxFQUFFLEtBQUs1YyxLQUFLb2QsUUFBUUgsZ0JBQWdCamQsS0FBS3RCLEVBQUVDLEVBQUUsYUFBYWdaLEVBQUV6YixVQUFVc2hCLFlBQVksU0FBUzllLEdBQUdzQixLQUFLb2QsUUFBUUwsbUJBQW1CL2MsS0FBS3RCLEVBQUUsZ0JBQ25kMmUsRUFBRW5oQixVQUFVeWIsRUFBRXpiLFVBQXNGLElBQUl1aEIsRUFBRUgsRUFBRXBoQixVQUFVLElBQUltaEIsRUFBRUksRUFBRXZnQixZQUFZb2dCLEVBQUUvaUIsRUFBRWtqQixFQUFFOUYsRUFBRXpiLFdBQVd1aEIsRUFBRUMsc0JBQXFCLEVBQUcsSUFBSUMsRUFBRSxDQUFDQyxRQUFRLE1BQU1DLEVBQUU3aUIsT0FBT2tCLFVBQVVDLGVBQWUyaEIsRUFBRSxDQUFDamlCLEtBQUksRUFBR2tpQixLQUFJLEVBQUdDLFFBQU8sRUFBR0MsVUFBUyxHQUNoUyxTQUFTQyxFQUFFeGYsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSXVELEVBQUV0RCxFQUFFLEdBQUc2UixFQUFFLEtBQUswUixFQUFFLEtBQUssR0FBRyxNQUFNeGYsRUFBRSxJQUFJVCxVQUFLLElBQVNTLEVBQUVvZixNQUFNSSxFQUFFeGYsRUFBRW9mLFVBQUssSUFBU3BmLEVBQUU5QyxNQUFNNFEsRUFBRSxHQUFHOU4sRUFBRTlDLEtBQUs4QyxFQUFFa2YsRUFBRXBqQixLQUFLa0UsRUFBRVQsS0FBSzRmLEVBQUUzaEIsZUFBZStCLEtBQUt0RCxFQUFFc0QsR0FBR1MsRUFBRVQsSUFBSSxJQUFJcUgsRUFBRTVCLFVBQVU5RSxPQUFPLEVBQUUsR0FBRyxJQUFJMEcsRUFBRTNLLEVBQUVpTyxTQUFTbE8sT0FBTyxHQUFHLEVBQUU0SyxFQUFFLENBQUMsSUFBSSxJQUFJK0ksRUFBRWxRLE1BQU1tSCxHQUFHN0ssRUFBRSxFQUFFQSxFQUFFNkssRUFBRTdLLElBQUk0VCxFQUFFNVQsR0FBR2lKLFVBQVVqSixFQUFFLEdBQUdFLEVBQUVpTyxTQUFTeUYsRUFBRSxHQUFHNVAsR0FBR0EsRUFBRXNFLGFBQWEsSUFBSTlFLEtBQUtxSCxFQUFFN0csRUFBRXNFLGtCQUFlLElBQVNwSSxFQUFFc0QsS0FBS3RELEVBQUVzRCxHQUFHcUgsRUFBRXJILElBQUksTUFBTSxDQUFDc0IsU0FBU3BELEVBQUVtSCxLQUFLN0UsRUFBRTdDLElBQUk0USxFQUFFc1IsSUFBSUksRUFBRS9PLE1BQU14VSxFQUFFd2pCLE9BQU9ULEVBQUVDLFNBQ3hVLFNBQVN6UixFQUFFek4sR0FBRyxNQUFNLGlCQUFrQkEsR0FBRyxPQUFPQSxHQUFHQSxFQUFFYyxXQUFXcEQsRUFBMEcsSUFBSWdRLEVBQUUsT0FBT2lTLEVBQUUsR0FBRyxTQUFTQyxFQUFFNWYsRUFBRUMsRUFBRWhFLEVBQUV1RCxHQUFHLEdBQUdtZ0IsRUFBRXhmLE9BQU8sQ0FBQyxJQUFJakUsRUFBRXlqQixFQUFFRSxNQUE4RCxPQUF4RDNqQixFQUFFc04sT0FBT3hKLEVBQUU5RCxFQUFFNGpCLFVBQVU3ZixFQUFFL0QsRUFBRTZqQixLQUFLOWpCLEVBQUVDLEVBQUU4VixRQUFReFMsRUFBRXRELEVBQUU4akIsTUFBTSxFQUFTOWpCLEVBQUUsTUFBTSxDQUFDc04sT0FBT3hKLEVBQUU4ZixVQUFVN2YsRUFBRThmLEtBQUs5akIsRUFBRStWLFFBQVF4UyxFQUFFd2dCLE1BQU0sR0FDNWIsU0FBU0MsRUFBRWpnQixHQUFHQSxFQUFFd0osT0FBTyxLQUFLeEosRUFBRThmLFVBQVUsS0FBSzlmLEVBQUUrZixLQUFLLEtBQUsvZixFQUFFZ1MsUUFBUSxLQUFLaFMsRUFBRWdnQixNQUFNLEVBQUUsR0FBR0wsRUFBRXhmLFFBQVF3ZixFQUFFblgsS0FBS3hJLEdBRTJGLFNBQVNrZ0IsRUFBRWxnQixFQUFFQyxFQUFFaEUsR0FBRyxPQUFPLE1BQU0rRCxFQUFFLEVBRGxPLFNBQVNtZ0IsRUFBRW5nQixFQUFFQyxFQUFFaEUsRUFBRXVELEdBQUcsSUFBSXRELFNBQVM4RCxFQUFLLGNBQWM5RCxHQUFHLFlBQVlBLElBQUU4RCxFQUFFLE1BQUssSUFBSStOLEdBQUUsRUFBRyxHQUFHLE9BQU8vTixFQUFFK04sR0FBRSxPQUFRLE9BQU83UixHQUFHLElBQUssU0FBUyxJQUFLLFNBQVM2UixHQUFFLEVBQUcsTUFBTSxJQUFLLFNBQVMsT0FBTy9OLEVBQUVjLFVBQVUsS0FBS3BELEVBQUUsS0FBS2dnQixFQUFFM1AsR0FBRSxHQUFJLEdBQUdBLEVBQUUsT0FBTzlSLEVBQUV1RCxFQUFFUSxFQUFFLEtBQUtDLEVBQUUsSUFBSW1nQixFQUFFcGdCLEVBQUUsR0FBR0MsR0FBRyxFQUF5QixHQUF2QjhOLEVBQUUsRUFBRTlOLEVBQUUsS0FBS0EsRUFBRSxJQUFJQSxFQUFFLElBQU9QLE1BQU1ELFFBQVFPLEdBQUcsSUFBSSxJQUFJeWYsRUFBRSxFQUFFQSxFQUFFemYsRUFBRUcsT0FBT3NmLElBQUksQ0FBUSxJQUFJNVksRUFBRTVHLEVBQUVtZ0IsRUFBZmxrQixFQUFFOEQsRUFBRXlmLEdBQWVBLEdBQUcxUixHQUFHb1MsRUFBRWprQixFQUFFMkssRUFBRTVLLEVBQUV1RCxRQUFRLEdBQUcsT0FBT1EsR0FBRyxpQkFBa0JBLEVBQUU2RyxFQUFFLEtBQWlDQSxFQUFFLG1CQUE3QkEsRUFBRW1YLEdBQUdoZSxFQUFFZ2UsSUFBSWhlLEVBQUUsZUFBc0M2RyxFQUFFLEtBQU0sbUJBQW9CQSxFQUFFLElBQUk3RyxFQUFFNkcsRUFBRTlLLEtBQUtpRSxHQUFHeWYsRUFDcGYsSUFBSXZqQixFQUFFOEQsRUFBRW9JLFFBQVFpWSxNQUE2QnRTLEdBQUdvUyxFQUExQmprQixFQUFFQSxFQUFFVyxNQUFNZ0ssRUFBRTVHLEVBQUVtZ0IsRUFBRWxrQixFQUFFdWpCLEtBQWN4akIsRUFBRXVELFFBQVEsR0FBRyxXQUFXdEQsRUFBRSxNQUFNRCxFQUFFLEdBQUcrRCxFQUFFcUssTUFBTTZULEVBQUUsR0FBRyxvQkFBb0JqaUIsRUFBRSxxQkFBcUJLLE9BQU9zRCxLQUFLSSxHQUFHd0QsS0FBSyxNQUFNLElBQUl2SCxFQUFFLEtBQUssT0FBTzhSLEVBQXFDb1MsQ0FBRW5nQixFQUFFLEdBQUdDLEVBQUVoRSxHQUFHLFNBQVNta0IsRUFBRXBnQixFQUFFQyxHQUFHLE1BQU0saUJBQWtCRCxHQUFHLE9BQU9BLEdBQUcsTUFBTUEsRUFBRTdDLElBSDlJLFNBQWdCNkMsR0FBRyxJQUFJQyxFQUFFLENBQUMsSUFBSSxLQUFLLElBQUksTUFBTSxNQUFNLEtBQUssR0FBR0QsR0FBR3lDLFFBQVEsU0FBUSxTQUFTekMsR0FBRyxPQUFPQyxFQUFFRCxNQUcrQ3NnQixDQUFPdGdCLEVBQUU3QyxLQUFLOEMsRUFBRVksU0FBUyxJQUFJLFNBQVMwZixFQUFFdmdCLEVBQUVDLEdBQUdELEVBQUUrZixLQUFLaGtCLEtBQUtpRSxFQUFFZ1MsUUFBUS9SLEVBQUVELEVBQUVnZ0IsU0FDeFgsU0FBU1EsRUFBR3hnQixFQUFFQyxFQUFFaEUsR0FBRyxJQUFJdUQsRUFBRVEsRUFBRXdKLE9BQU90TixFQUFFOEQsRUFBRThmLFVBQVU5ZixFQUFFQSxFQUFFK2YsS0FBS2hrQixLQUFLaUUsRUFBRWdTLFFBQVEvUixFQUFFRCxFQUFFZ2dCLFNBQVN0Z0IsTUFBTUQsUUFBUU8sR0FBR3lnQixFQUFFemdCLEVBQUVSLEVBQUV2RCxHQUFFLFNBQVMrRCxHQUFHLE9BQU9BLEtBQUksTUFBTUEsSUFBSXlOLEVBQUV6TixLQUFLQSxFQUp0SixTQUFXQSxFQUFFQyxHQUFHLE1BQU0sQ0FBQ2EsU0FBU3BELEVBQUVtSCxLQUFLN0UsRUFBRTZFLEtBQUsxSCxJQUFJOEMsRUFBRW9mLElBQUlyZixFQUFFcWYsSUFBSTNPLE1BQU0xUSxFQUFFMFEsTUFBTWdQLE9BQU8xZixFQUFFMGYsUUFJbUVnQixDQUFFMWdCLEVBQUU5RCxJQUFJOEQsRUFBRTdDLEtBQUs4QyxHQUFHQSxFQUFFOUMsTUFBTTZDLEVBQUU3QyxJQUFJLElBQUksR0FBRzZDLEVBQUU3QyxLQUFLc0YsUUFBUWlMLEVBQUUsT0FBTyxLQUFLelIsSUFBSXVELEVBQUVnSixLQUFLeEksSUFBSSxTQUFTeWdCLEVBQUV6Z0IsRUFBRUMsRUFBRWhFLEVBQUV1RCxFQUFFdEQsR0FBRyxJQUFJNlIsRUFBRSxHQUFHLE1BQU05UixJQUFJOFIsR0FBRyxHQUFHOVIsR0FBR3dHLFFBQVFpTCxFQUFFLE9BQU8sS0FBa0J3UyxFQUFFbGdCLEVBQUV3Z0IsRUFBakJ2Z0IsRUFBRTJmLEVBQUUzZixFQUFFOE4sRUFBRXZPLEVBQUV0RCxJQUFhK2pCLEVBQUVoZ0IsR0FBRyxJQUFJMGdCLEVBQUUsQ0FBQ3pCLFFBQVEsTUFBTSxTQUFTMEIsSUFBSSxJQUFJNWdCLEVBQUUyZ0IsRUFBRXpCLFFBQVEsR0FBRyxPQUFPbGYsRUFBRSxNQUFNcUssTUFBTTZULEVBQUUsTUFBTSxPQUFPbGUsRUFDeGEsSUFBSTZnQixFQUFHLENBQUNDLHVCQUF1QkgsRUFBRUksd0JBQXdCLENBQUNDLFNBQVMsTUFBTUMsa0JBQWtCaEMsRUFBRWlDLHFCQUFxQixDQUFDaEMsU0FBUSxHQUFJdkosT0FBTzlaLEdBQUdILEVBQVF5bEIsU0FBUyxDQUFDNWUsSUFBSSxTQUFTdkMsRUFBRUMsRUFBRWhFLEdBQUcsR0FBRyxNQUFNK0QsRUFBRSxPQUFPQSxFQUFFLElBQUlSLEVBQUUsR0FBbUIsT0FBaEJpaEIsRUFBRXpnQixFQUFFUixFQUFFLEtBQUtTLEVBQUVoRSxHQUFVdUQsR0FBR21FLFFBQVEsU0FBUzNELEVBQUVDLEVBQUVoRSxHQUFHLEdBQUcsTUFBTStELEVBQUUsT0FBT0EsRUFBcUJrZ0IsRUFBRWxnQixFQUFFdWdCLEVBQXZCdGdCLEVBQUUyZixFQUFFLEtBQUssS0FBSzNmLEVBQUVoRSxJQUFZZ2tCLEVBQUVoZ0IsSUFBSStmLE1BQU0sU0FBU2hnQixHQUFHLE9BQU9rZ0IsRUFBRWxnQixHQUFFLFdBQVcsT0FBTyxPQUFNLE9BQU9vaEIsUUFBUSxTQUFTcGhCLEdBQUcsSUFBSUMsRUFBRSxHQUFxQyxPQUFsQ3dnQixFQUFFemdCLEVBQUVDLEVBQUUsTUFBSyxTQUFTRCxHQUFHLE9BQU9BLEtBQVdDLEdBQUdvaEIsS0FBSyxTQUFTcmhCLEdBQUcsSUFBSXlOLEVBQUV6TixHQUFHLE1BQU1xSyxNQUFNNlQsRUFBRSxNQUFNLE9BQU9sZSxJQUM5ZXRFLEVBQVF5VixVQUFVOEgsRUFBRXZkLEVBQVE0bEIsU0FBUzVrQixFQUFFaEIsRUFBUTZsQixTQUFTNUQsRUFBRWppQixFQUFROGxCLGNBQWM1QyxFQUFFbGpCLEVBQVErbEIsV0FBVzNrQixFQUFFcEIsRUFBUWdtQixTQUFTeFEsRUFBRXhWLEVBQVFpbUIsbURBQW1EZCxFQUNyTG5sQixFQUFRa21CLGFBQWEsU0FBUzVoQixFQUFFQyxFQUFFaEUsR0FBRyxHQUFHLE1BQU8rRCxFQUFjLE1BQU1xSyxNQUFNNlQsRUFBRSxJQUFJbGUsSUFBSSxJQUFJUixFQUFFM0QsRUFBRSxHQUFHbUUsRUFBRTBRLE9BQU94VSxFQUFFOEQsRUFBRTdDLElBQUk0USxFQUFFL04sRUFBRXFmLElBQUlJLEVBQUV6ZixFQUFFMGYsT0FBTyxHQUFHLE1BQU16ZixFQUFFLENBQW9FLFFBQW5FLElBQVNBLEVBQUVvZixNQUFNdFIsRUFBRTlOLEVBQUVvZixJQUFJSSxFQUFFUixFQUFFQyxjQUFTLElBQVNqZixFQUFFOUMsTUFBTWpCLEVBQUUsR0FBRytELEVBQUU5QyxLQUFRNkMsRUFBRTZFLE1BQU03RSxFQUFFNkUsS0FBS1AsYUFBYSxJQUFJdUMsRUFBRTdHLEVBQUU2RSxLQUFLUCxhQUFhLElBQUlzTCxLQUFLM1AsRUFBRWtmLEVBQUVwakIsS0FBS2tFLEVBQUUyUCxLQUFLd1AsRUFBRTNoQixlQUFlbVMsS0FBS3BRLEVBQUVvUSxRQUFHLElBQVMzUCxFQUFFMlAsU0FBSSxJQUFTL0ksRUFBRUEsRUFBRStJLEdBQUczUCxFQUFFMlAsSUFBSSxJQUFJQSxFQUFFM0ssVUFBVTlFLE9BQU8sRUFBRSxHQUFHLElBQUl5UCxFQUFFcFEsRUFBRTJLLFNBQVNsTyxPQUFPLEdBQUcsRUFBRTJULEVBQUUsQ0FBQy9JLEVBQUVuSCxNQUFNa1EsR0FBRyxJQUFJLElBQUk1VCxFQUFFLEVBQUVBLEVBQUU0VCxFQUFFNVQsSUFBSTZLLEVBQUU3SyxHQUFHaUosVUFBVWpKLEVBQUUsR0FBR3dELEVBQUUySyxTQUFTdEQsRUFBRSxNQUFNLENBQUMvRixTQUFTcEQsRUFBRW1ILEtBQUs3RSxFQUFFNkUsS0FDeGYxSCxJQUFJakIsRUFBRW1qQixJQUFJdFIsRUFBRTJDLE1BQU1sUixFQUFFa2dCLE9BQU9ELElBQUkvakIsRUFBUXNVLGNBQWMsU0FBU2hRLEVBQUVDLEdBQThLLFlBQTNLLElBQVNBLElBQUlBLEVBQUUsT0FBTUQsRUFBRSxDQUFDYyxTQUFTK2MsRUFBRWdFLHNCQUFzQjVoQixFQUFFNmhCLGNBQWM5aEIsRUFBRStoQixlQUFlL2hCLEVBQUVnaUIsYUFBYSxFQUFFMVIsU0FBUyxLQUFLZ0IsU0FBUyxPQUFRaEIsU0FBUyxDQUFDeFAsU0FBUzhjLEVBQUVxRSxTQUFTamlCLEdBQVVBLEVBQUVzUixTQUFTdFIsR0FBR3RFLEVBQVFpYixjQUFjNkksRUFBRTlqQixFQUFRd21CLGNBQWMsU0FBU2xpQixHQUFHLElBQUlDLEVBQUV1ZixFQUFFcGlCLEtBQUssS0FBSzRDLEdBQVksT0FBVEMsRUFBRTRFLEtBQUs3RSxFQUFTQyxHQUFHdkUsRUFBUXltQixVQUFVLFdBQVcsTUFBTSxDQUFDakQsUUFBUSxPQUFPeGpCLEVBQVEwbUIsV0FBVyxTQUFTcGlCLEdBQUcsTUFBTSxDQUFDYyxTQUFTbVEsRUFBRXZMLE9BQU8xRixJQUFJdEUsRUFBUTJtQixlQUFlNVUsRUFDM2UvUixFQUFRNG1CLEtBQUssU0FBU3RpQixHQUFHLE1BQU0sQ0FBQ2MsU0FBU2lkLEVBQUV3RSxNQUFNdmlCLEVBQUV3aUIsU0FBUyxFQUFFQyxRQUFRLE9BQU8vbUIsRUFBUWduQixLQUFLLFNBQVMxaUIsRUFBRUMsR0FBRyxNQUFNLENBQUNhLFNBQVNnZCxFQUFFalosS0FBSzdFLEVBQUVvRixhQUFRLElBQVNuRixFQUFFLEtBQUtBLElBQUl2RSxFQUFRaW5CLFlBQVksU0FBUzNpQixFQUFFQyxHQUFHLE9BQU8yZ0IsSUFBSStCLFlBQVkzaUIsRUFBRUMsSUFBSXZFLEVBQVFrbkIsV0FBVyxTQUFTNWlCLEVBQUVDLEdBQUcsT0FBTzJnQixJQUFJZ0MsV0FBVzVpQixFQUFFQyxJQUFJdkUsRUFBUW1uQixjQUFjLGFBQWFubkIsRUFBUW9uQixVQUFVLFNBQVM5aUIsRUFBRUMsR0FBRyxPQUFPMmdCLElBQUlrQyxVQUFVOWlCLEVBQUVDLElBQUl2RSxFQUFRcW5CLG9CQUFvQixTQUFTL2lCLEVBQUVDLEVBQUVoRSxHQUFHLE9BQU8ya0IsSUFBSW1DLG9CQUFvQi9pQixFQUFFQyxFQUFFaEUsSUFDdGNQLEVBQVFzbkIsZ0JBQWdCLFNBQVNoakIsRUFBRUMsR0FBRyxPQUFPMmdCLElBQUlvQyxnQkFBZ0JoakIsRUFBRUMsSUFBSXZFLEVBQVF1bkIsUUFBUSxTQUFTampCLEVBQUVDLEdBQUcsT0FBTzJnQixJQUFJcUMsUUFBUWpqQixFQUFFQyxJQUFJdkUsRUFBUXduQixXQUFXLFNBQVNsakIsRUFBRUMsRUFBRWhFLEdBQUcsT0FBTzJrQixJQUFJc0MsV0FBV2xqQixFQUFFQyxFQUFFaEUsSUFBSVAsRUFBUXluQixPQUFPLFNBQVNuakIsR0FBRyxPQUFPNGdCLElBQUl1QyxPQUFPbmpCLElBQUl0RSxFQUFRMG5CLFNBQVMsU0FBU3BqQixHQUFHLE9BQU80Z0IsSUFBSXdDLFNBQVNwakIsSUFBSXRFLEVBQVE4YSxRQUFRLFc7Ozs7Ozs7O0dDWnhTLElBQUlnSyxFQUFHNWlCLEVBQVEsR0FBU1AsRUFBRU8sRUFBUSxJQUFpQmxCLEVBQUVrQixFQUFRLElBQWEsU0FBUytmLEVBQUUzZCxHQUFHLElBQUksSUFBSUMsRUFBRSx5REFBeURELEVBQUUvRCxFQUFFLEVBQUVBLEVBQUVnSixVQUFVOUUsT0FBT2xFLElBQUlnRSxHQUFHLFdBQVdvVSxtQkFBbUJwUCxVQUFVaEosSUFBSSxNQUFNLHlCQUF5QitELEVBQUUsV0FBV0MsRUFBRSxpSEFBaUgsSUFBSXVnQixFQUFHLE1BQU1uVyxNQUFNc1QsRUFBRSxNQUN4YSxTQUFTa0QsRUFBRzdnQixFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEVBQUVxSCxFQUFFa0gsRUFBRTZCLEVBQUU2UCxHQUFHLElBQUk1akIsRUFBRTZELE1BQU1sQyxVQUFVNkosTUFBTXRMLEtBQUtrSixVQUFVLEdBQUcsSUFBSWhGLEVBQUVxSCxNQUFNckwsRUFBRUosR0FBRyxNQUFNRyxHQUFHc0YsS0FBSytoQixRQUFRcm5CLElBQUksSUFBSXNuQixHQUFHLEVBQUdDLEVBQUcsS0FBS0MsR0FBRyxFQUFHQyxFQUFHLEtBQUtDLEVBQUcsQ0FBQ0wsUUFBUSxTQUFTcmpCLEdBQUdzakIsR0FBRyxFQUFHQyxFQUFHdmpCLElBQUksU0FBUzJqQixFQUFHM2pCLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsRUFBRXFILEVBQUVrSCxFQUFFNkIsRUFBRTZQLEdBQUc2RCxHQUFHLEVBQUdDLEVBQUcsS0FBSzFDLEVBQUd2WixNQUFNb2MsRUFBR3plLFdBQW1KLElBQUkyZSxFQUFHLEtBQUtDLEVBQUcsS0FBS0MsRUFBRyxLQUNoYSxTQUFTQyxFQUFHL2pCLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUU4RCxFQUFFNkUsTUFBTSxnQkFBZ0I3RSxFQUFFZ2tCLGNBQWNGLEVBQUc3bkIsR0FENkwsU0FBWStELEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsRUFBRXFILEVBQUVrSCxFQUFFNkIsRUFBRTZQLEdBQTRCLEdBQXpCa0UsRUFBR3JjLE1BQU1oRyxLQUFLMkQsV0FBY3FlLEVBQUcsQ0FBQyxJQUFHQSxFQUFnQyxNQUFNalosTUFBTXNULEVBQUUsTUFBMUMsSUFBSTloQixFQUFFMG5CLEVBQUdELEdBQUcsRUFBR0MsRUFBRyxLQUE4QkMsSUFBS0EsR0FBRyxFQUFHQyxFQUFHNW5CLElBQzlUb29CLENBQUcvbkIsRUFBRStELE9BQUUsRUFBT0QsR0FBR0EsRUFBRWdrQixjQUFjLEtBQUssSUFBSUUsRUFBRyxLQUFLQyxFQUFHLEdBQzVILFNBQVNDLElBQUssR0FBR0YsRUFBRyxJQUFJLElBQUlsa0IsS0FBS21rQixFQUFHLENBQUMsSUFBSWxrQixFQUFFa2tCLEVBQUdua0IsR0FBRy9ELEVBQUVpb0IsRUFBR3RoQixRQUFRNUMsR0FBRyxNQUFNLEVBQUUvRCxHQUFHLE1BQU1vTyxNQUFNc1QsRUFBRSxHQUFHM2QsSUFBSSxJQUFJcWtCLEVBQUdwb0IsR0FBRyxDQUFDLElBQUlnRSxFQUFFcWtCLGNBQWMsTUFBTWphLE1BQU1zVCxFQUFFLEdBQUczZCxJQUEyQixJQUFJLElBQUk5RCxLQUEvQm1vQixFQUFHcG9CLEdBQUdnRSxFQUFFaEUsRUFBRWdFLEVBQUVza0IsV0FBMEIsQ0FBQyxJQUFJL2tCLE9BQUUsRUFBV3FILEVBQUU1SyxFQUFFQyxHQUFHNlIsRUFBRTlOLEVBQUUyUCxFQUFFMVQsRUFBRSxHQUFHc29CLEVBQUcvbUIsZUFBZW1TLEdBQUcsTUFBTXZGLE1BQU1zVCxFQUFFLEdBQUcvTixJQUFJNFUsRUFBRzVVLEdBQUcvSSxFQUFFLElBQUk0WSxFQUFFNVksRUFBRTRkLHdCQUF3QixHQUFHaEYsRUFBRSxDQUFDLElBQUlqZ0IsS0FBS2lnQixFQUFFQSxFQUFFaGlCLGVBQWUrQixJQUFJa2xCLEVBQUdqRixFQUFFamdCLEdBQUd1TyxFQUFFNkIsR0FBR3BRLEdBQUUsT0FBUXFILEVBQUU4ZCxrQkFBa0JELEVBQUc3ZCxFQUFFOGQsaUJBQWlCNVcsRUFBRTZCLEdBQUdwUSxHQUFFLEdBQUlBLEdBQUUsRUFBRyxJQUFJQSxFQUFFLE1BQU02SyxNQUFNc1QsRUFBRSxHQUFHemhCLEVBQUU4RCxPQUNqYyxTQUFTMGtCLEVBQUcxa0IsRUFBRUMsRUFBRWhFLEdBQUcsR0FBRzJvQixFQUFHNWtCLEdBQUcsTUFBTXFLLE1BQU1zVCxFQUFFLElBQUkzZCxJQUFJNGtCLEVBQUc1a0IsR0FBR0MsRUFBRTRrQixFQUFHN2tCLEdBQUdDLEVBQUVza0IsV0FBV3RvQixHQUFHNm9CLGFBQWEsSUFBSVQsRUFBRyxHQUFHRyxFQUFHLEdBQUdJLEVBQUcsR0FBR0MsRUFBRyxHQUFHLFNBQVNFLEVBQUcva0IsR0FBRyxJQUFTL0QsRUFBTGdFLEdBQUUsRUFBSyxJQUFJaEUsS0FBSytELEVBQUUsR0FBR0EsRUFBRXZDLGVBQWV4QixHQUFHLENBQUMsSUFBSUMsRUFBRThELEVBQUUvRCxHQUFHLElBQUlrb0IsRUFBRzFtQixlQUFleEIsSUFBSWtvQixFQUFHbG9CLEtBQUtDLEVBQUUsQ0FBQyxHQUFHaW9CLEVBQUdsb0IsR0FBRyxNQUFNb08sTUFBTXNULEVBQUUsSUFBSTFoQixJQUFJa29CLEVBQUdsb0IsR0FBR0MsRUFBRStELEdBQUUsR0FBSUEsR0FBR21rQixJQUFLLElBQUlZLElBQUssb0JBQXFCbG1CLGFBQVEsSUFBcUJBLE9BQU84WCxlQUFVLElBQXFCOVgsT0FBTzhYLFNBQVNELGVBQWVzTyxFQUFHLEtBQUtDLEVBQUcsS0FBS0MsRUFBRyxLQUM5YSxTQUFTQyxFQUFHcGxCLEdBQUcsR0FBR0EsRUFBRTZqQixFQUFHN2pCLEdBQUcsQ0FBQyxHQUFHLG1CQUFvQmlsQixFQUFHLE1BQU01YSxNQUFNc1QsRUFBRSxNQUFNLElBQUkxZCxFQUFFRCxFQUFFcWxCLFVBQVVwbEIsSUFBSUEsRUFBRTJqQixFQUFHM2pCLEdBQUdnbEIsRUFBR2psQixFQUFFcWxCLFVBQVVybEIsRUFBRTZFLEtBQUs1RSxLQUFLLFNBQVNxbEIsRUFBR3RsQixHQUFHa2xCLEVBQUdDLEVBQUdBLEVBQUczYyxLQUFLeEksR0FBR21sQixFQUFHLENBQUNubEIsR0FBR2tsQixFQUFHbGxCLEVBQUUsU0FBU3VsQixJQUFLLEdBQUdMLEVBQUcsQ0FBQyxJQUFJbGxCLEVBQUVrbEIsRUFBR2psQixFQUFFa2xCLEVBQW9CLEdBQWpCQSxFQUFHRCxFQUFHLEtBQUtFLEVBQUdwbEIsR0FBTUMsRUFBRSxJQUFJRCxFQUFFLEVBQUVBLEVBQUVDLEVBQUVFLE9BQU9ILElBQUlvbEIsRUFBR25sQixFQUFFRCxLQUFLLFNBQVN3bEIsRUFBR3hsQixFQUFFQyxHQUFHLE9BQU9ELEVBQUVDLEdBQUcsU0FBU3dsQixFQUFHemxCLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsR0FBRyxPQUFPUSxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEdBQUcsU0FBU2ttQixLQUFNLElBQUlDLEVBQUdILEVBQUdJLEdBQUcsRUFBR0MsR0FBRyxFQUFHLFNBQVNDLElBQVEsT0FBT1osR0FBSSxPQUFPQyxJQUFHTyxJQUFLSCxLQUM5WixTQUFTUSxFQUFHL2xCLEVBQUVDLEVBQUVoRSxHQUFHLEdBQUc0cEIsRUFBRyxPQUFPN2xCLEVBQUVDLEVBQUVoRSxHQUFHNHBCLEdBQUcsRUFBRyxJQUFJLE9BQU9GLEVBQUczbEIsRUFBRUMsRUFBRWhFLEdBQWxCLFFBQTZCNHBCLEdBQUcsRUFBR0MsS0FBTSxJQUFJRSxFQUFHLDhWQUE4VkMsRUFBRzNwQixPQUFPa0IsVUFBVUMsZUFBZXlvQixFQUFHLEdBQUdDLEVBQUcsR0FFL1EsU0FBU3ZJLEVBQUU1ZCxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEVBQUVxSCxHQUFHdkYsS0FBSzhrQixnQkFBZ0IsSUFBSW5tQixHQUFHLElBQUlBLEdBQUcsSUFBSUEsRUFBRXFCLEtBQUsra0IsY0FBY25xQixFQUFFb0YsS0FBS2dsQixtQkFBbUI5bUIsRUFBRThCLEtBQUtpbEIsZ0JBQWdCdHFCLEVBQUVxRixLQUFLa2xCLGFBQWF4bUIsRUFBRXNCLEtBQUt1RCxLQUFLNUUsRUFBRXFCLEtBQUttbEIsWUFBWTVmLEVBQUUsSUFBSXFYLEVBQUUsR0FDeFosdUlBQXVJNWIsTUFBTSxLQUFLcUIsU0FBUSxTQUFTM0QsR0FBR2tlLEVBQUVsZSxHQUFHLElBQUk0ZCxFQUFFNWQsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxNQUFNLENBQUMsQ0FBQyxnQkFBZ0Isa0JBQWtCLENBQUMsWUFBWSxTQUFTLENBQUMsVUFBVSxPQUFPLENBQUMsWUFBWSxlQUFlMkQsU0FBUSxTQUFTM0QsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUdrZSxFQUFFamUsR0FBRyxJQUFJMmQsRUFBRTNkLEVBQUUsR0FBRSxFQUFHRCxFQUFFLEdBQUcsTUFBSyxNQUFNLENBQUMsa0JBQWtCLFlBQVksYUFBYSxTQUFTMkQsU0FBUSxTQUFTM0QsR0FBR2tlLEVBQUVsZSxHQUFHLElBQUk0ZCxFQUFFNWQsRUFBRSxHQUFFLEVBQUdBLEVBQUUwbUIsY0FBYyxNQUFLLE1BQzlkLENBQUMsY0FBYyw0QkFBNEIsWUFBWSxpQkFBaUIvaUIsU0FBUSxTQUFTM0QsR0FBR2tlLEVBQUVsZSxHQUFHLElBQUk0ZCxFQUFFNWQsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxNQUFNLHdOQUF3TnNDLE1BQU0sS0FBS3FCLFNBQVEsU0FBUzNELEdBQUdrZSxFQUFFbGUsR0FBRyxJQUFJNGQsRUFBRTVkLEVBQUUsR0FBRSxFQUFHQSxFQUFFMG1CLGNBQWMsTUFBSyxNQUN6WixDQUFDLFVBQVUsV0FBVyxRQUFRLFlBQVkvaUIsU0FBUSxTQUFTM0QsR0FBR2tlLEVBQUVsZSxHQUFHLElBQUk0ZCxFQUFFNWQsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxNQUFNLENBQUMsVUFBVSxZQUFZMkQsU0FBUSxTQUFTM0QsR0FBR2tlLEVBQUVsZSxHQUFHLElBQUk0ZCxFQUFFNWQsRUFBRSxHQUFFLEVBQUdBLEVBQUUsTUFBSyxNQUFNLENBQUMsT0FBTyxPQUFPLE9BQU8sUUFBUTJELFNBQVEsU0FBUzNELEdBQUdrZSxFQUFFbGUsR0FBRyxJQUFJNGQsRUFBRTVkLEVBQUUsR0FBRSxFQUFHQSxFQUFFLE1BQUssTUFBTSxDQUFDLFVBQVUsU0FBUzJELFNBQVEsU0FBUzNELEdBQUdrZSxFQUFFbGUsR0FBRyxJQUFJNGQsRUFBRTVkLEVBQUUsR0FBRSxFQUFHQSxFQUFFMG1CLGNBQWMsTUFBSyxNQUFNLElBQUlDLEVBQUcsZ0JBQWdCLFNBQVNDLEVBQUc1bUIsR0FBRyxPQUFPQSxFQUFFLEdBQUcrVCxjQUMvWCwwakNBQTBqQ3pSLE1BQU0sS0FBS3FCLFNBQVEsU0FBUzNELEdBQUcsSUFBSUMsRUFBRUQsRUFBRXlDLFFBQVFra0IsRUFDem1DQyxHQUFJMUksRUFBRWplLEdBQUcsSUFBSTJkLEVBQUUzZCxFQUFFLEdBQUUsRUFBR0QsRUFBRSxNQUFLLE1BQU0sMkVBQTJFc0MsTUFBTSxLQUFLcUIsU0FBUSxTQUFTM0QsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeUMsUUFBUWtrQixFQUFHQyxHQUFJMUksRUFBRWplLEdBQUcsSUFBSTJkLEVBQUUzZCxFQUFFLEdBQUUsRUFBR0QsRUFBRSxnQ0FBK0IsTUFBTSxDQUFDLFdBQVcsV0FBVyxhQUFhMkQsU0FBUSxTQUFTM0QsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeUMsUUFBUWtrQixFQUFHQyxHQUFJMUksRUFBRWplLEdBQUcsSUFBSTJkLEVBQUUzZCxFQUFFLEdBQUUsRUFBR0QsRUFBRSx3Q0FBdUMsTUFBTSxDQUFDLFdBQVcsZUFBZTJELFNBQVEsU0FBUzNELEdBQUdrZSxFQUFFbGUsR0FBRyxJQUFJNGQsRUFBRTVkLEVBQUUsR0FBRSxFQUFHQSxFQUFFMG1CLGNBQWMsTUFBSyxNQUNuY3hJLEVBQUUySSxVQUFVLElBQUlqSixFQUFFLFlBQVksR0FBRSxFQUFHLGFBQWEsZ0NBQStCLEdBQUksQ0FBQyxNQUFNLE9BQU8sU0FBUyxjQUFjamEsU0FBUSxTQUFTM0QsR0FBR2tlLEVBQUVsZSxHQUFHLElBQUk0ZCxFQUFFNWQsRUFBRSxHQUFFLEVBQUdBLEVBQUUwbUIsY0FBYyxNQUFLLE1BQU0sSUFBSUksRUFBR3RHLEVBQUdtQixtREFDbk0sU0FBU29GLEVBQUcvbUIsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcsSUFBSXNELEVBQUUwZSxFQUFFemdCLGVBQWV3QyxHQUFHaWUsRUFBRWplLEdBQUcsTUFBVyxPQUFPVCxFQUFFLElBQUlBLEVBQUVxRixNQUFLM0ksSUFBTyxFQUFFK0QsRUFBRUUsU0FBUyxNQUFNRixFQUFFLElBQUksTUFBTUEsRUFBRSxNQUFJLE1BQU1BLEVBQUUsSUFBSSxNQUFNQSxFQUFFLFFBUG5KLFNBQVlELEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLEdBQUcsTUFBTytELEdBRG9GLFNBQVlELEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLEdBQUcsT0FBT0QsR0FBRyxJQUFJQSxFQUFFNEksS0FBSyxPQUFNLEVBQUcsY0FBYzVFLEdBQUcsSUFBSyxXQUFXLElBQUssU0FBUyxPQUFNLEVBQUcsSUFBSyxVQUFVLE9BQUcvRCxJQUFjLE9BQU9ELEdBQVNBLEVBQUVtcUIsZ0JBQW1ELFdBQW5DcG1CLEVBQUVBLEVBQUUwbUIsY0FBY3JmLE1BQU0sRUFBRSxLQUFzQixVQUFVckgsR0FBRSxRQUFRLE9BQU0sR0FDblRnbkIsQ0FBR2huQixFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBR0EsRUFBRSxPQUFNLEVBQUcsR0FBRyxPQUFPRCxFQUFFLE9BQU9BLEVBQUU0SSxNQUFNLEtBQUssRUFBRSxPQUFPNUUsRUFBRSxLQUFLLEVBQUUsT0FBTSxJQUFLQSxFQUFFLEtBQUssRUFBRSxPQUFPdVosTUFBTXZaLEdBQUcsS0FBSyxFQUFFLE9BQU91WixNQUFNdlosSUFBSSxFQUFFQSxFQUFFLE9BQU0sRUFPckRnbkIsQ0FBR2huQixFQUFFaEUsRUFBRXVELEVBQUV0RCxLQUFLRCxFQUFFLE1BQU1DLEdBQUcsT0FBT3NELEVBUmhNLFNBQVlRLEdBQUcsUUFBR2ltQixFQUFHbHFCLEtBQUtvcUIsRUFBR25tQixLQUFlaW1CLEVBQUdscUIsS0FBS21xQixFQUFHbG1CLEtBQWVnbUIsRUFBR2hqQixLQUFLaEQsR0FBVW1tQixFQUFHbm1CLElBQUcsR0FBR2ttQixFQUFHbG1CLElBQUcsR0FBUyxJQVFrRmtuQixDQUFHam5CLEtBQUssT0FBT2hFLEVBQUUrRCxFQUFFbW5CLGdCQUFnQmxuQixHQUFHRCxFQUFFb25CLGFBQWFubkIsRUFBRSxHQUFHaEUsSUFBSXVELEVBQUUrbUIsZ0JBQWdCdm1CLEVBQUVSLEVBQUVnbkIsY0FBYyxPQUFPdnFCLEVBQUUsSUFBSXVELEVBQUVxRixNQUFRLEdBQUc1SSxHQUFHZ0UsRUFBRVQsRUFBRTZtQixjQUFjbnFCLEVBQUVzRCxFQUFFOG1CLG1CQUFtQixPQUFPcnFCLEVBQUUrRCxFQUFFbW5CLGdCQUFnQmxuQixJQUFhaEUsRUFBRSxLQUFYdUQsRUFBRUEsRUFBRXFGLE9BQWMsSUFBSXJGLElBQUcsSUFBS3ZELEVBQUUsR0FBRyxHQUFHQSxFQUFFQyxFQUFFOEQsRUFBRXFuQixlQUFlbnJCLEVBQUUrRCxFQUFFaEUsR0FBRytELEVBQUVvbkIsYUFBYW5uQixFQUFFaEUsTUFEdE82cUIsRUFBR3JwQixlQUFlLDRCQUE0QnFwQixFQUFHaEcsdUJBQXVCLENBQUM1QixRQUFRLE9BQU80SCxFQUFHcnBCLGVBQWUsNkJBQTZCcXBCLEVBQUcvRix3QkFBd0IsQ0FBQ0MsU0FBUyxPQUVsYSxJQUFJc0csRUFBRyxjQUFjOUksRUFBRSxtQkFBb0I3aEIsUUFBUUEsT0FBTzhnQixJQUFJOEosR0FBRy9JLEVBQUU3aEIsT0FBTzhnQixJQUFJLGlCQUFpQixNQUFNK0osR0FBR2hKLEVBQUU3aEIsT0FBTzhnQixJQUFJLGdCQUFnQixNQUFNZ0ssR0FBR2pKLEVBQUU3aEIsT0FBTzhnQixJQUFJLGtCQUFrQixNQUFNaUssR0FBR2xKLEVBQUU3aEIsT0FBTzhnQixJQUFJLHFCQUFxQixNQUFNN1osR0FBRzRhLEVBQUU3aEIsT0FBTzhnQixJQUFJLGtCQUFrQixNQUFNa0ssR0FBR25KLEVBQUU3aEIsT0FBTzhnQixJQUFJLGtCQUFrQixNQUFNbUssR0FBR3BKLEVBQUU3aEIsT0FBTzhnQixJQUFJLGlCQUFpQixNQUFNb0ssR0FBR3JKLEVBQUU3aEIsT0FBTzhnQixJQUFJLHlCQUF5QixNQUFNcUssR0FBR3RKLEVBQUU3aEIsT0FBTzhnQixJQUFJLHFCQUFxQixNQUFNc0ssR0FBR3ZKLEVBQUU3aEIsT0FBTzhnQixJQUFJLGtCQUFrQixNQUFNdUssR0FBR3hKLEVBQUU3aEIsT0FBTzhnQixJQUFJLHVCQUN2ZSxNQUFNd0ssR0FBR3pKLEVBQUU3aEIsT0FBTzhnQixJQUFJLGNBQWMsTUFBTXlLLEdBQUcxSixFQUFFN2hCLE9BQU84Z0IsSUFBSSxjQUFjLE1BQU0wSyxHQUFHM0osRUFBRTdoQixPQUFPOGdCLElBQUksZUFBZSxNQUFNMkssR0FBRyxtQkFBb0J6ckIsUUFBUUEsT0FBT3NoQixTQUFTLFNBQVNvSyxHQUFHcm9CLEdBQUcsT0FBRyxPQUFPQSxHQUFHLGlCQUFrQkEsRUFBUyxLQUF3QyxtQkFBbkNBLEVBQUVvb0IsSUFBSXBvQixFQUFFb29CLEtBQUtwb0IsRUFBRSxlQUEwQ0EsRUFBRSxLQUN6UixTQUFTc29CLEdBQUd0b0IsR0FBRyxHQUFHLE1BQU1BLEVBQUUsT0FBTyxLQUFLLEdBQUcsbUJBQW9CQSxFQUFFLE9BQU9BLEVBQUV1RSxhQUFhdkUsRUFBRTdELE1BQU0sS0FBSyxHQUFHLGlCQUFrQjZELEVBQUUsT0FBT0EsRUFBRSxPQUFPQSxHQUFHLEtBQUt5bkIsR0FBRyxNQUFNLFdBQVcsS0FBS0QsR0FBRyxNQUFNLFNBQVMsS0FBSzVqQixHQUFHLE1BQU0sV0FBVyxLQUFLOGpCLEdBQUcsTUFBTSxhQUFhLEtBQUtLLEdBQUcsTUFBTSxXQUFXLEtBQUtDLEdBQUcsTUFBTSxlQUFlLEdBQUcsaUJBQWtCaG9CLEVBQUUsT0FBT0EsRUFBRWMsVUFBVSxLQUFLOG1CLEdBQUcsTUFBTSxtQkFBbUIsS0FBS0QsR0FBRyxNQUFNLG1CQUFtQixLQUFLRyxHQUFHLElBQUk3bkIsRUFBRUQsRUFBRTBGLE9BQW1DLE9BQTVCekYsRUFBRUEsRUFBRXNFLGFBQWF0RSxFQUFFOUQsTUFBTSxHQUFVNkQsRUFBRXVFLGNBQWMsS0FBS3RFLEVBQUUsY0FBY0EsRUFBRSxJQUNuZixjQUFjLEtBQUtnb0IsR0FBRyxPQUFPSyxHQUFHdG9CLEVBQUU2RSxNQUFNLEtBQUtzakIsR0FBRyxPQUFPRyxHQUFHdG9CLEVBQUUwRixRQUFRLEtBQUt3aUIsR0FBRyxHQUFHbG9CLEVBQUUsSUFBSUEsRUFBRXdpQixRQUFReGlCLEVBQUV5aUIsUUFBUSxLQUFLLE9BQU82RixHQUFHdG9CLEdBQUcsT0FBTyxLQUFLLFNBQVN1b0IsR0FBR3ZvQixHQUFHLElBQUlDLEVBQUUsR0FBRyxFQUFFLENBQUNELEVBQUUsT0FBT0EsRUFBRXdvQixLQUFLLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxFQUFFLElBQUl2c0IsRUFBRSxHQUFHLE1BQU0rRCxFQUFFLFFBQVEsSUFBSTlELEVBQUU4RCxFQUFFeW9CLFlBQVlqcEIsRUFBRVEsRUFBRTBvQixhQUFhN2hCLEVBQUV5aEIsR0FBR3RvQixFQUFFNkUsTUFBTTVJLEVBQUUsS0FBS0MsSUFBSUQsRUFBRXFzQixHQUFHcHNCLEVBQUUySSxPQUFPM0ksRUFBRTJLLEVBQUVBLEVBQUUsR0FBR3JILEVBQUVxSCxFQUFFLFFBQVFySCxFQUFFbXBCLFNBQVNsbUIsUUFBUTZrQixFQUFHLElBQUksSUFBSTluQixFQUFFb3BCLFdBQVcsSUFBSTNzQixJQUFJNEssRUFBRSxnQkFBZ0I1SyxFQUFFLEtBQUtBLEVBQUUsYUFBYUMsR0FBRyxXQUFXMkssRUFBRTVHLEdBQUdoRSxFQUFFK0QsRUFBRUEsRUFBRTZvQixhQUFhN29CLEdBQUcsT0FBT0MsRUFDamUsU0FBUzZvQixHQUFHOW9CLEdBQUcsY0FBY0EsR0FBRyxJQUFLLFVBQVUsSUFBSyxTQUFTLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxZQUFZLE9BQU9BLEVBQUUsUUFBUSxNQUFNLElBQUksU0FBUytvQixHQUFHL29CLEdBQUcsSUFBSUMsRUFBRUQsRUFBRTZFLEtBQUssT0FBTzdFLEVBQUVBLEVBQUVncEIsV0FBVyxVQUFVaHBCLEVBQUUwbUIsZ0JBQWdCLGFBQWF6bUIsR0FBRyxVQUFVQSxHQUV6TixTQUFTZ3BCLEdBQUdqcEIsR0FBR0EsRUFBRWtwQixnQkFBZ0JscEIsRUFBRWtwQixjQUR2RCxTQUFZbHBCLEdBQUcsSUFBSUMsRUFBRThvQixHQUFHL29CLEdBQUcsVUFBVSxRQUFRL0QsRUFBRUssT0FBT3dKLHlCQUF5QjlGLEVBQUV4QixZQUFZaEIsVUFBVXlDLEdBQUcvRCxFQUFFLEdBQUc4RCxFQUFFQyxHQUFHLElBQUlELEVBQUV2QyxlQUFld0MsU0FBSSxJQUFxQmhFLEdBQUcsbUJBQW9CQSxFQUFFUSxLQUFLLG1CQUFvQlIsRUFBRTBGLElBQUksQ0FBQyxJQUFJbkMsRUFBRXZELEVBQUVRLElBQUlvSyxFQUFFNUssRUFBRTBGLElBQWlMLE9BQTdLckYsT0FBT0MsZUFBZXlELEVBQUVDLEVBQUUsQ0FBQ2tQLGNBQWEsRUFBRzFTLElBQUksV0FBVyxPQUFPK0MsRUFBRXpELEtBQUt1RixPQUFPSyxJQUFJLFNBQVMzQixHQUFHOUQsRUFBRSxHQUFHOEQsRUFBRTZHLEVBQUU5SyxLQUFLdUYsS0FBS3RCLE1BQU0xRCxPQUFPQyxlQUFleUQsRUFBRUMsRUFBRSxDQUFDekQsV0FBV1AsRUFBRU8sYUFBbUIsQ0FBQ2tWLFNBQVMsV0FBVyxPQUFPeFYsR0FBR2l0QixTQUFTLFNBQVNucEIsR0FBRzlELEVBQUUsR0FBRzhELEdBQUdvcEIsYUFBYSxXQUFXcHBCLEVBQUVrcEIsY0FDeGYsWUFBWWxwQixFQUFFQyxNQUF1RG9wQixDQUFHcnBCLElBQUksU0FBU3NwQixHQUFHdHBCLEdBQUcsSUFBSUEsRUFBRSxPQUFNLEVBQUcsSUFBSUMsRUFBRUQsRUFBRWtwQixjQUFjLElBQUlqcEIsRUFBRSxPQUFNLEVBQUcsSUFBSWhFLEVBQUVnRSxFQUFFeVIsV0FBZXhWLEVBQUUsR0FBcUQsT0FBbEQ4RCxJQUFJOUQsRUFBRTZzQixHQUFHL29CLEdBQUdBLEVBQUV1cEIsUUFBUSxPQUFPLFFBQVF2cEIsRUFBRW5ELFFBQU9tRCxFQUFFOUQsS0FBYUQsSUFBR2dFLEVBQUVrcEIsU0FBU25wQixJQUFHLEdBQU8sU0FBU3dwQixHQUFHeHBCLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUVnRSxFQUFFc3BCLFFBQVEsT0FBT2xzQixFQUFFLEdBQUc0QyxFQUFFLENBQUN3cEIsb0JBQWUsRUFBT3haLGtCQUFhLEVBQU9wVCxXQUFNLEVBQU8wc0IsUUFBUSxNQUFNdHRCLEVBQUVBLEVBQUUrRCxFQUFFMHBCLGNBQWNDLGlCQUN6WSxTQUFTQyxHQUFHNXBCLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUsTUFBTWdFLEVBQUVnUSxhQUFhLEdBQUdoUSxFQUFFZ1EsYUFBYS9ULEVBQUUsTUFBTStELEVBQUVzcEIsUUFBUXRwQixFQUFFc3BCLFFBQVF0cEIsRUFBRXdwQixlQUFleHRCLEVBQUU2c0IsR0FBRyxNQUFNN29CLEVBQUVwRCxNQUFNb0QsRUFBRXBELE1BQU1aLEdBQUcrRCxFQUFFMHBCLGNBQWMsQ0FBQ0MsZUFBZXp0QixFQUFFMnRCLGFBQWE1dEIsRUFBRTZ0QixXQUFXLGFBQWE3cEIsRUFBRTRFLE1BQU0sVUFBVTVFLEVBQUU0RSxLQUFLLE1BQU01RSxFQUFFc3BCLFFBQVEsTUFBTXRwQixFQUFFcEQsT0FBTyxTQUFTa3RCLEdBQUcvcEIsRUFBRUMsR0FBZSxPQUFaQSxFQUFFQSxFQUFFc3BCLFVBQWlCeEMsRUFBRy9tQixFQUFFLFVBQVVDLEdBQUUsR0FDalUsU0FBUytwQixHQUFHaHFCLEVBQUVDLEdBQUc4cEIsR0FBRy9wQixFQUFFQyxHQUFHLElBQUloRSxFQUFFNnNCLEdBQUc3b0IsRUFBRXBELE9BQU9YLEVBQUUrRCxFQUFFNEUsS0FBSyxHQUFHLE1BQU01SSxFQUFLLFdBQVdDLEdBQU0sSUFBSUQsR0FBRyxLQUFLK0QsRUFBRW5ELE9BQU9tRCxFQUFFbkQsT0FBT1osS0FBRStELEVBQUVuRCxNQUFNLEdBQUdaLEdBQU8rRCxFQUFFbkQsUUFBUSxHQUFHWixJQUFJK0QsRUFBRW5ELE1BQU0sR0FBR1osUUFBUSxHQUFHLFdBQVdDLEdBQUcsVUFBVUEsRUFBOEIsWUFBM0I4RCxFQUFFbW5CLGdCQUFnQixTQUFnQmxuQixFQUFFeEMsZUFBZSxTQUFTd3NCLEdBQUdqcUIsRUFBRUMsRUFBRTRFLEtBQUs1SSxHQUFHZ0UsRUFBRXhDLGVBQWUsaUJBQWlCd3NCLEdBQUdqcUIsRUFBRUMsRUFBRTRFLEtBQUtpa0IsR0FBRzdvQixFQUFFZ1EsZUFBZSxNQUFNaFEsRUFBRXNwQixTQUFTLE1BQU10cEIsRUFBRXdwQixpQkFBaUJ6cEIsRUFBRXlwQixpQkFBaUJ4cEIsRUFBRXdwQixnQkFDblosU0FBU1MsR0FBR2xxQixFQUFFQyxFQUFFaEUsR0FBRyxHQUFHZ0UsRUFBRXhDLGVBQWUsVUFBVXdDLEVBQUV4QyxlQUFlLGdCQUFnQixDQUFDLElBQUl2QixFQUFFK0QsRUFBRTRFLEtBQUssS0FBSyxXQUFXM0ksR0FBRyxVQUFVQSxRQUFHLElBQVMrRCxFQUFFcEQsT0FBTyxPQUFPb0QsRUFBRXBELE9BQU8sT0FBT29ELEVBQUUsR0FBR0QsRUFBRTBwQixjQUFjRyxhQUFhNXRCLEdBQUdnRSxJQUFJRCxFQUFFbkQsUUFBUW1ELEVBQUVuRCxNQUFNb0QsR0FBR0QsRUFBRWlRLGFBQWFoUSxFQUFXLE1BQVRoRSxFQUFFK0QsRUFBRTdELFFBQWM2RCxFQUFFN0QsS0FBSyxJQUFJNkQsRUFBRXlwQixpQkFBaUJ6cEIsRUFBRTBwQixjQUFjQyxlQUFlLEtBQUsxdEIsSUFBSStELEVBQUU3RCxLQUFLRixHQUN2VixTQUFTZ3VCLEdBQUdqcUIsRUFBRUMsRUFBRWhFLEdBQU0sV0FBV2dFLEdBQUdELEVBQUVtcUIsY0FBY0MsZ0JBQWdCcHFCLElBQUUsTUFBTS9ELEVBQUUrRCxFQUFFaVEsYUFBYSxHQUFHalEsRUFBRTBwQixjQUFjRyxhQUFhN3BCLEVBQUVpUSxlQUFlLEdBQUdoVSxJQUFJK0QsRUFBRWlRLGFBQWEsR0FBR2hVLElBQXdGLFNBQVNvdUIsR0FBR3JxQixFQUFFQyxHQUE2RCxPQUExREQsRUFBRTNDLEVBQUUsQ0FBQzhNLGNBQVMsR0FBUWxLLElBQU1BLEVBQWxJLFNBQVlELEdBQUcsSUFBSUMsRUFBRSxHQUF1RCxPQUFwRHVnQixFQUFHVyxTQUFTeGQsUUFBUTNELEdBQUUsU0FBU0EsR0FBRyxNQUFNQSxJQUFJQyxHQUFHRCxNQUFZQyxFQUFpRHFxQixDQUFHcnFCLEVBQUVrSyxhQUFVbkssRUFBRW1LLFNBQVNsSyxHQUFTRCxFQUNqVixTQUFTdXFCLEdBQUd2cUIsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQWUsR0FBWjhELEVBQUVBLEVBQUVzUyxRQUFXclMsRUFBRSxDQUFDQSxFQUFFLEdBQUcsSUFBSSxJQUFJVCxFQUFFLEVBQUVBLEVBQUV2RCxFQUFFa0UsT0FBT1gsSUFBSVMsRUFBRSxJQUFJaEUsRUFBRXVELEtBQUksRUFBRyxJQUFJdkQsRUFBRSxFQUFFQSxFQUFFK0QsRUFBRUcsT0FBT2xFLElBQUl1RCxFQUFFUyxFQUFFeEMsZUFBZSxJQUFJdUMsRUFBRS9ELEdBQUdZLE9BQU9tRCxFQUFFL0QsR0FBR3V1QixXQUFXaHJCLElBQUlRLEVBQUUvRCxHQUFHdXVCLFNBQVNockIsR0FBR0EsR0FBR3RELElBQUk4RCxFQUFFL0QsR0FBR3d1QixpQkFBZ0IsT0FBUSxDQUFtQixJQUFsQnh1QixFQUFFLEdBQUc2c0IsR0FBRzdzQixHQUFHZ0UsRUFBRSxLQUFTVCxFQUFFLEVBQUVBLEVBQUVRLEVBQUVHLE9BQU9YLElBQUksQ0FBQyxHQUFHUSxFQUFFUixHQUFHM0MsUUFBUVosRUFBaUQsT0FBOUMrRCxFQUFFUixHQUFHZ3JCLFVBQVMsT0FBR3R1QixJQUFJOEQsRUFBRVIsR0FBR2lyQixpQkFBZ0IsSUFBVyxPQUFPeHFCLEdBQUdELEVBQUVSLEdBQUdrckIsV0FBV3pxQixFQUFFRCxFQUFFUixJQUFJLE9BQU9TLElBQUlBLEVBQUV1cUIsVUFBUyxJQUNwWSxTQUFTRyxHQUFHM3FCLEVBQUVDLEdBQUcsR0FBRyxNQUFNQSxFQUFFMnFCLHdCQUF3QixNQUFNdmdCLE1BQU1zVCxFQUFFLEtBQUssT0FBT3RnQixFQUFFLEdBQUc0QyxFQUFFLENBQUNwRCxXQUFNLEVBQU9vVCxrQkFBYSxFQUFPOUYsU0FBUyxHQUFHbkssRUFBRTBwQixjQUFjRyxlQUFlLFNBQVNnQixHQUFHN3FCLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUVnRSxFQUFFcEQsTUFBTSxHQUFHLE1BQU1aLEVBQUUsQ0FBK0IsR0FBOUJBLEVBQUVnRSxFQUFFa0ssU0FBU2xLLEVBQUVBLEVBQUVnUSxhQUFnQixNQUFNaFUsRUFBRSxDQUFDLEdBQUcsTUFBTWdFLEVBQUUsTUFBTW9LLE1BQU1zVCxFQUFFLEtBQUssR0FBR2plLE1BQU1ELFFBQVF4RCxHQUFHLENBQUMsS0FBSyxHQUFHQSxFQUFFa0UsUUFBUSxNQUFNa0ssTUFBTXNULEVBQUUsS0FBSzFoQixFQUFFQSxFQUFFLEdBQUdnRSxFQUFFaEUsRUFBRSxNQUFNZ0UsSUFBSUEsRUFBRSxJQUFJaEUsRUFBRWdFLEVBQUVELEVBQUUwcEIsY0FBYyxDQUFDRyxhQUFhZixHQUFHN3NCLElBQy9ZLFNBQVM2dUIsR0FBRzlxQixFQUFFQyxHQUFHLElBQUloRSxFQUFFNnNCLEdBQUc3b0IsRUFBRXBELE9BQU9YLEVBQUU0c0IsR0FBRzdvQixFQUFFZ1EsY0FBYyxNQUFNaFUsS0FBSUEsRUFBRSxHQUFHQSxLQUFNK0QsRUFBRW5ELFFBQVFtRCxFQUFFbkQsTUFBTVosR0FBRyxNQUFNZ0UsRUFBRWdRLGNBQWNqUSxFQUFFaVEsZUFBZWhVLElBQUkrRCxFQUFFaVEsYUFBYWhVLElBQUksTUFBTUMsSUFBSThELEVBQUVpUSxhQUFhLEdBQUcvVCxHQUFHLFNBQVM2dUIsR0FBRy9xQixHQUFHLElBQUlDLEVBQUVELEVBQUVnckIsWUFBWS9xQixJQUFJRCxFQUFFMHBCLGNBQWNHLGNBQWMsS0FBSzVwQixHQUFHLE9BQU9BLElBQUlELEVBQUVuRCxNQUFNb0QsR0FBRyxJQUFJZ3JCLEdBQVMsK0JBQVRBLEdBQXdGLDZCQUM5WCxTQUFTQyxHQUFHbHJCLEdBQUcsT0FBT0EsR0FBRyxJQUFLLE1BQU0sTUFBTSw2QkFBNkIsSUFBSyxPQUFPLE1BQU0scUNBQXFDLFFBQVEsTUFBTSxnQ0FBZ0MsU0FBU21yQixHQUFHbnJCLEVBQUVDLEdBQUcsT0FBTyxNQUFNRCxHQUFHLGlDQUFpQ0EsRUFBRWtyQixHQUFHanJCLEdBQUcsK0JBQStCRCxHQUFHLGtCQUFrQkMsRUFBRSwrQkFBK0JELEVBQzNVLElBQUlvckIsR0FBR0MsR0FBRyxTQUFTcnJCLEdBQUcsTUFBTSxvQkFBcUJzckIsT0FBT0EsTUFBTUMsd0JBQXdCLFNBQVN0ckIsRUFBRWhFLEVBQUVDLEVBQUVzRCxHQUFHOHJCLE1BQU1DLHlCQUF3QixXQUFXLE9BQU92ckIsRUFBRUMsRUFBRWhFLE9BQVUrRCxFQUE1SixFQUErSixTQUFTQSxFQUFFQyxHQUFHLEdBQUdELEVBQUV3ckIsZUFBZVAsSUFBUSxjQUFjanJCLEVBQUVBLEVBQUV5ckIsVUFBVXhyQixNQUFNLENBQTJGLEtBQTFGbXJCLEdBQUdBLElBQUl4VSxTQUFTRCxjQUFjLFFBQVU4VSxVQUFVLFFBQVF4ckIsRUFBRWdYLFVBQVVwVyxXQUFXLFNBQWFaLEVBQUVtckIsR0FBR00sV0FBVzFyQixFQUFFMHJCLFlBQVkxckIsRUFBRTJyQixZQUFZM3JCLEVBQUUwckIsWUFBWSxLQUFLenJCLEVBQUV5ckIsWUFBWTFyQixFQUFFNlksWUFBWTVZLEVBQUV5ckIsZ0JBQ2piLFNBQVNFLEdBQUc1ckIsRUFBRUMsR0FBRyxHQUFHQSxFQUFFLENBQUMsSUFBSWhFLEVBQUUrRCxFQUFFMHJCLFdBQVcsR0FBR3p2QixHQUFHQSxJQUFJK0QsRUFBRTZyQixXQUFXLElBQUk1dkIsRUFBRWdELFNBQXdCLFlBQWRoRCxFQUFFNnZCLFVBQVU3ckIsR0FBVUQsRUFBRWdyQixZQUFZL3FCLEVBQUUsU0FBUzhyQixHQUFHL3JCLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUsR0FBa0YsT0FBL0VBLEVBQUUrRCxFQUFFMG1CLGVBQWV6bUIsRUFBRXltQixjQUFjenFCLEVBQUUsU0FBUytELEdBQUcsU0FBU0MsRUFBRWhFLEVBQUUsTUFBTStELEdBQUcsTUFBTUMsRUFBU2hFLEVBQUUsSUFBSSt2QixHQUFHLENBQUNDLGFBQWFGLEdBQUcsWUFBWSxnQkFBZ0JHLG1CQUFtQkgsR0FBRyxZQUFZLHNCQUFzQkksZUFBZUosR0FBRyxZQUFZLGtCQUFrQkssY0FBY0wsR0FBRyxhQUFhLGtCQUFrQk0sR0FBRyxHQUFHQyxHQUFHLEdBQzFNLFNBQVNDLEdBQUd2c0IsR0FBRyxHQUFHcXNCLEdBQUdyc0IsR0FBRyxPQUFPcXNCLEdBQUdyc0IsR0FBRyxJQUFJZ3NCLEdBQUdoc0IsR0FBRyxPQUFPQSxFQUFFLElBQVkvRCxFQUFSZ0UsRUFBRStyQixHQUFHaHNCLEdBQUssSUFBSS9ELEtBQUtnRSxFQUFFLEdBQUdBLEVBQUV4QyxlQUFleEIsSUFBSUEsS0FBS3F3QixHQUFHLE9BQU9ELEdBQUdyc0IsR0FBR0MsRUFBRWhFLEdBQUcsT0FBTytELEVBQTlYZ2xCLElBQUtzSCxHQUFHMVYsU0FBU0QsY0FBYyxPQUFPZ0MsTUFBTSxtQkFBbUI3WixnQkFBZ0JrdEIsR0FBR0MsYUFBYU8saUJBQWlCUixHQUFHRSxtQkFBbUJNLGlCQUFpQlIsR0FBR0csZUFBZUssV0FBVyxvQkFBb0IxdEIsZUFBZWt0QixHQUFHSSxjQUFjSyxZQUN4TyxJQUFJQyxHQUFHSCxHQUFHLGdCQUFnQkksR0FBR0osR0FBRyxzQkFBc0JLLEdBQUdMLEdBQUcsa0JBQWtCTSxHQUFHTixHQUFHLGlCQUFpQk8sR0FBRyxzTkFBc054cUIsTUFBTSxLQUFLeXFCLEdBQUcsSUFBSyxtQkFBb0JoVCxRQUFRQSxRQUFRMkMsS0FBSyxTQUFTc1EsR0FBR2h0QixHQUFHLElBQUlDLEVBQUU4c0IsR0FBR3R3QixJQUFJdUQsR0FBdUMsWUFBcEMsSUFBU0MsSUFBSUEsRUFBRSxJQUFJeWMsSUFBSXFRLEdBQUdwckIsSUFBSTNCLEVBQUVDLElBQVdBLEVBQ3BjLFNBQVNndEIsR0FBR2p0QixHQUFHLElBQUlDLEVBQUVELEVBQUUvRCxFQUFFK0QsRUFBRSxHQUFHQSxFQUFFa3RCLFVBQVUsS0FBS2p0QixFQUFFNG9CLFFBQVE1b0IsRUFBRUEsRUFBRTRvQixXQUFXLENBQUM3b0IsRUFBRUMsRUFBRSxHQUFPLElBQWlCLE1BQXJCQSxFQUFFRCxHQUFTbXRCLGFBQWtCbHhCLEVBQUVnRSxFQUFFNG9CLFFBQVE3b0IsRUFBRUMsRUFBRTRvQixhQUFhN29CLEdBQUcsT0FBTyxJQUFJQyxFQUFFdW9CLElBQUl2c0IsRUFBRSxLQUFLLFNBQVNteEIsR0FBR3B0QixHQUFHLEdBQUcsS0FBS0EsRUFBRXdvQixJQUFJLENBQUMsSUFBSXZvQixFQUFFRCxFQUFFcXRCLGNBQXNFLEdBQXhELE9BQU9wdEIsSUFBa0IsUUFBZEQsRUFBRUEsRUFBRWt0QixhQUFxQmp0QixFQUFFRCxFQUFFcXRCLGdCQUFtQixPQUFPcHRCLEVBQUUsT0FBT0EsRUFBRXF0QixXQUFXLE9BQU8sS0FBSyxTQUFTQyxHQUFHdnRCLEdBQUcsR0FBR2l0QixHQUFHanRCLEtBQUtBLEVBQUUsTUFBTXFLLE1BQU1zVCxFQUFFLE1BRWhLLFNBQVM2UCxHQUFHeHRCLEdBQVcsS0FBUkEsRUFEdE4sU0FBWUEsR0FBRyxJQUFJQyxFQUFFRCxFQUFFa3RCLFVBQVUsSUFBSWp0QixFQUFFLENBQVMsR0FBRyxRQUFYQSxFQUFFZ3RCLEdBQUdqdEIsSUFBZSxNQUFNcUssTUFBTXNULEVBQUUsTUFBTSxPQUFPMWQsSUFBSUQsRUFBRSxLQUFLQSxFQUFFLElBQUksSUFBSS9ELEVBQUUrRCxFQUFFOUQsRUFBRStELElBQUksQ0FBQyxJQUFJVCxFQUFFdkQsRUFBRTRzQixPQUFPLEdBQUcsT0FBT3JwQixFQUFFLE1BQU0sSUFBSXFILEVBQUVySCxFQUFFMHRCLFVBQVUsR0FBRyxPQUFPcm1CLEVBQUUsQ0FBWSxHQUFHLFFBQWQzSyxFQUFFc0QsRUFBRXFwQixRQUFtQixDQUFDNXNCLEVBQUVDLEVBQUUsU0FBUyxNQUFNLEdBQUdzRCxFQUFFNmQsUUFBUXhXLEVBQUV3VyxNQUFNLENBQUMsSUFBSXhXLEVBQUVySCxFQUFFNmQsTUFBTXhXLEdBQUcsQ0FBQyxHQUFHQSxJQUFJNUssRUFBRSxPQUFPc3hCLEdBQUcvdEIsR0FBR1EsRUFBRSxHQUFHNkcsSUFBSTNLLEVBQUUsT0FBT3F4QixHQUFHL3RCLEdBQUdTLEVBQUU0RyxFQUFFQSxFQUFFNG1CLFFBQVEsTUFBTXBqQixNQUFNc1QsRUFBRSxNQUFPLEdBQUcxaEIsRUFBRTRzQixTQUFTM3NCLEVBQUUyc0IsT0FBTzVzQixFQUFFdUQsRUFBRXRELEVBQUUySyxNQUFNLENBQUMsSUFBSSxJQUFJa0gsR0FBRSxFQUFHNkIsRUFBRXBRLEVBQUU2ZCxNQUFNek4sR0FBRyxDQUFDLEdBQUdBLElBQUkzVCxFQUFFLENBQUM4UixHQUFFLEVBQUc5UixFQUFFdUQsRUFBRXRELEVBQUUySyxFQUFFLE1BQU0sR0FBRytJLElBQUkxVCxFQUFFLENBQUM2UixHQUFFLEVBQUc3UixFQUFFc0QsRUFBRXZELEVBQUU0SyxFQUFFLE1BQU0rSSxFQUFFQSxFQUFFNmQsUUFBUSxJQUFJMWYsRUFBRSxDQUFDLElBQUk2QixFQUFFL0ksRUFBRXdXLE1BQU16TixHQUFHLENBQUMsR0FBR0EsSUFDNWYzVCxFQUFFLENBQUM4UixHQUFFLEVBQUc5UixFQUFFNEssRUFBRTNLLEVBQUVzRCxFQUFFLE1BQU0sR0FBR29RLElBQUkxVCxFQUFFLENBQUM2UixHQUFFLEVBQUc3UixFQUFFMkssRUFBRTVLLEVBQUV1RCxFQUFFLE1BQU1vUSxFQUFFQSxFQUFFNmQsUUFBUSxJQUFJMWYsRUFBRSxNQUFNMUQsTUFBTXNULEVBQUUsT0FBUSxHQUFHMWhCLEVBQUVpeEIsWUFBWWh4QixFQUFFLE1BQU1tTyxNQUFNc1QsRUFBRSxNQUFPLEdBQUcsSUFBSTFoQixFQUFFdXNCLElBQUksTUFBTW5lLE1BQU1zVCxFQUFFLE1BQU0sT0FBTzFoQixFQUFFb3BCLFVBQVVuRyxVQUFVampCLEVBQUUrRCxFQUFFQyxFQUFtQnl0QixDQUFHMXRCLElBQVMsT0FBTyxLQUFLLElBQUksSUFBSUMsRUFBRUQsSUFBSSxDQUFDLEdBQUcsSUFBSUMsRUFBRXVvQixLQUFLLElBQUl2b0IsRUFBRXVvQixJQUFJLE9BQU92b0IsRUFBRSxHQUFHQSxFQUFFb2QsTUFBTXBkLEVBQUVvZCxNQUFNd0wsT0FBTzVvQixFQUFFQSxFQUFFQSxFQUFFb2QsVUFBVSxDQUFDLEdBQUdwZCxJQUFJRCxFQUFFLE1BQU0sTUFBTUMsRUFBRXd0QixTQUFTLENBQUMsSUFBSXh0QixFQUFFNG9CLFFBQVE1b0IsRUFBRTRvQixTQUFTN29CLEVBQUUsT0FBTyxLQUFLQyxFQUFFQSxFQUFFNG9CLE9BQU81b0IsRUFBRXd0QixRQUFRNUUsT0FBTzVvQixFQUFFNG9CLE9BQU81b0IsRUFBRUEsRUFBRXd0QixTQUFTLE9BQU8sS0FDNWMsU0FBU0UsR0FBRzN0QixFQUFFQyxHQUFHLEdBQUcsTUFBTUEsRUFBRSxNQUFNb0ssTUFBTXNULEVBQUUsS0FBSyxPQUFHLE1BQU0zZCxFQUFTQyxFQUFLUCxNQUFNRCxRQUFRTyxHQUFPTixNQUFNRCxRQUFRUSxJQUFVRCxFQUFFd0ksS0FBS2xCLE1BQU10SCxFQUFFQyxHQUFHRCxJQUFFQSxFQUFFd0ksS0FBS3ZJLEdBQVVELEdBQVNOLE1BQU1ELFFBQVFRLEdBQUcsQ0FBQ0QsR0FBR3NHLE9BQU9yRyxHQUFHLENBQUNELEVBQUVDLEdBQUcsU0FBUzJ0QixHQUFHNXRCLEVBQUVDLEVBQUVoRSxHQUFHeUQsTUFBTUQsUUFBUU8sR0FBR0EsRUFBRTJELFFBQVExRCxFQUFFaEUsR0FBRytELEdBQUdDLEVBQUVsRSxLQUFLRSxFQUFFK0QsR0FBRyxJQUFJNnRCLEdBQUcsS0FDL1EsU0FBU0MsR0FBRzl0QixHQUFHLEdBQUdBLEVBQUUsQ0FBQyxJQUFJQyxFQUFFRCxFQUFFK3RCLG1CQUFtQjl4QixFQUFFK0QsRUFBRWd1QixtQkFBbUIsR0FBR3R1QixNQUFNRCxRQUFRUSxHQUFHLElBQUksSUFBSS9ELEVBQUUsRUFBRUEsRUFBRStELEVBQUVFLFNBQVNILEVBQUVpdUIsdUJBQXVCL3hCLElBQUk2bkIsRUFBRy9qQixFQUFFQyxFQUFFL0QsR0FBR0QsRUFBRUMsU0FBUytELEdBQUc4akIsRUFBRy9qQixFQUFFQyxFQUFFaEUsR0FBRytELEVBQUUrdEIsbUJBQW1CLEtBQUsvdEIsRUFBRWd1QixtQkFBbUIsS0FBS2h1QixFQUFFa3VCLGdCQUFnQmx1QixFQUFFeEIsWUFBWTJ2QixRQUFRbnVCLElBQUksU0FBU291QixHQUFHcHVCLEdBQXdDLEdBQXJDLE9BQU9BLElBQUk2dEIsR0FBR0YsR0FBR0UsR0FBRzd0QixJQUFJQSxFQUFFNnRCLEdBQUdBLEdBQUcsS0FBUTd0QixFQUFFLENBQVUsR0FBVDR0QixHQUFHNXRCLEVBQUU4dEIsSUFBT0QsR0FBRyxNQUFNeGpCLE1BQU1zVCxFQUFFLEtBQUssR0FBRzZGLEVBQUcsTUFBTXhqQixFQUFFeWpCLEVBQUdELEdBQUcsRUFBR0MsRUFBRyxLQUFLempCLEdBQzlZLFNBQVNxdUIsR0FBR3J1QixHQUE2RixPQUExRkEsRUFBRUEsRUFBRWtXLFFBQVFsVyxFQUFFc3VCLFlBQVl4dkIsUUFBU3l2QiwwQkFBMEJ2dUIsRUFBRUEsRUFBRXV1Qix5QkFBZ0MsSUFBSXZ1QixFQUFFZixTQUFTZSxFQUFFd3VCLFdBQVd4dUIsRUFBRSxTQUFTeXVCLEdBQUd6dUIsR0FBRyxJQUFJZ2xCLEVBQUcsT0FBTSxFQUFZLElBQUkva0IsR0FBYkQsRUFBRSxLQUFLQSxLQUFhNFcsU0FBcUcsT0FBNUYzVyxLQUFJQSxFQUFFMlcsU0FBU0QsY0FBYyxRQUFTeVEsYUFBYXBuQixFQUFFLFdBQVdDLEVBQUUsbUJBQW9CQSxFQUFFRCxJQUFXQyxFQUFFLElBQUl5dUIsR0FBRyxHQUFHLFNBQVNDLEdBQUczdUIsR0FBR0EsRUFBRTR1QixhQUFhLEtBQUs1dUIsRUFBRTZ1QixZQUFZLEtBQUs3dUIsRUFBRTh1QixXQUFXLEtBQUs5dUIsRUFBRSt1QixVQUFVNXVCLE9BQU8sRUFBRSxHQUFHdXVCLEdBQUd2dUIsUUFBUXV1QixHQUFHbG1CLEtBQUt4SSxHQUM1YSxTQUFTZ3ZCLEdBQUdodkIsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcsR0FBR3d5QixHQUFHdnVCLE9BQU8sQ0FBQyxJQUFJWCxFQUFFa3ZCLEdBQUc3TyxNQUEyRSxPQUFyRXJnQixFQUFFb3ZCLGFBQWE1dUIsRUFBRVIsRUFBRXl2QixpQkFBaUIveUIsRUFBRXNELEVBQUVxdkIsWUFBWTV1QixFQUFFVCxFQUFFc3ZCLFdBQVc3eUIsRUFBU3VELEVBQUUsTUFBTSxDQUFDb3ZCLGFBQWE1dUIsRUFBRWl2QixpQkFBaUIveUIsRUFBRTJ5QixZQUFZNXVCLEVBQUU2dUIsV0FBVzd5QixFQUFFOHlCLFVBQVUsSUFDOU0sU0FBU0csR0FBR2x2QixHQUFHLElBQUlDLEVBQUVELEVBQUU4dUIsV0FBVzd5QixFQUFFZ0UsRUFBRSxFQUFFLENBQUMsSUFBSWhFLEVBQUUsQ0FBQytELEVBQUUrdUIsVUFBVXZtQixLQUFLdk0sR0FBRyxNQUFNLElBQUlDLEVBQUVELEVBQUUsR0FBRyxJQUFJQyxFQUFFc3NCLElBQUl0c0IsRUFBRUEsRUFBRW1wQixVQUFVOEosa0JBQWtCLENBQUMsS0FBS2p6QixFQUFFMnNCLFFBQVEzc0IsRUFBRUEsRUFBRTJzQixPQUFPM3NCLEVBQUUsSUFBSUEsRUFBRXNzQixJQUFJLEtBQUt0c0IsRUFBRW1wQixVQUFVOEosY0FBYyxJQUFJanpCLEVBQUUsTUFBYyxLQUFSK0QsRUFBRWhFLEVBQUV1c0IsTUFBVyxJQUFJdm9CLEdBQUdELEVBQUUrdUIsVUFBVXZtQixLQUFLdk0sR0FBR0EsRUFBRW16QixHQUFHbHpCLFNBQVNELEdBQUcsSUFBSUEsRUFBRSxFQUFFQSxFQUFFK0QsRUFBRSt1QixVQUFVNXVCLE9BQU9sRSxJQUFJLENBQUNnRSxFQUFFRCxFQUFFK3VCLFVBQVU5eUIsR0FBRyxJQUFJdUQsRUFBRTZ1QixHQUFHcnVCLEVBQUU2dUIsYUFBYTN5QixFQUFFOEQsRUFBRTR1QixhQUFhLElBQUkvbkIsRUFBRTdHLEVBQUU2dUIsWUFBWTlnQixFQUFFL04sRUFBRWl2QixpQkFBaUIsSUFBSWh6QixJQUFJOFIsR0FBRyxJQUFJLElBQUksSUFBSTZCLEVBQUUsS0FBSzZQLEVBQUUsRUFBRUEsRUFBRTRFLEVBQUdsa0IsT0FBT3NmLElBQUksQ0FBQyxJQUFJNWpCLEVBQUV3b0IsRUFBRzVFLEdBQUc1akIsSUFBSUEsRUFBRUEsRUFBRXlvQixjQUFjcG9CLEVBQUUrRCxFQUFFNEcsRUFBRXJILEVBQUV1TyxNQUFNNkIsRUFDcGYrZCxHQUFHL2QsRUFBRS9ULElBQUl1eUIsR0FBR3hlLElBQUksU0FBU3lmLEdBQUdydkIsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSUEsRUFBRTRRLElBQUk3TSxHQUFHLENBQUMsT0FBT0EsR0FBRyxJQUFLLFNBQVNzdkIsR0FBR3J2QixFQUFFLFVBQVMsR0FBSSxNQUFNLElBQUssUUFBUSxJQUFLLE9BQU9xdkIsR0FBR3J2QixFQUFFLFNBQVEsR0FBSXF2QixHQUFHcnZCLEVBQUUsUUFBTyxHQUFJaEUsRUFBRTBGLElBQUksT0FBTyxNQUFNMUYsRUFBRTBGLElBQUksUUFBUSxNQUFNLE1BQU0sSUFBSyxTQUFTLElBQUssUUFBUThzQixHQUFHenVCLElBQUlzdkIsR0FBR3J2QixFQUFFRCxHQUFFLEdBQUksTUFBTSxJQUFLLFVBQVUsSUFBSyxTQUFTLElBQUssUUFBUSxNQUFNLFNBQVMsSUFBSThzQixHQUFHbHFCLFFBQVE1QyxJQUFJaVosR0FBRWpaLEVBQUVDLEdBQUdoRSxFQUFFMEYsSUFBSTNCLEVBQUUsT0FDdFYsSUFBSXV2QixHQUFHQyxHQUFHQyxHQUFHQyxJQUFHLEVBQUdDLEdBQUcsR0FBR0MsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxJQUFJclQsSUFBSXNULEdBQUcsSUFBSXRULElBQUl1VCxHQUFHLEdBQUdDLEdBQUcsMFFBQTBRNXRCLE1BQU0sS0FBSzZ0QixHQUFHLGdIQUFnSDd0QixNQUFNLEtBQzNYLFNBQVM4dEIsR0FBR3B3QixFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEdBQUcsTUFBTSxDQUFDNndCLFVBQVVyd0IsRUFBRTR1QixhQUFhM3VCLEVBQUVndkIsaUJBQW1CLEdBQUZoekIsRUFBSzR5QixZQUFZcnZCLEVBQUU4d0IsVUFBVXAwQixHQUMxTSxTQUFTcTBCLEdBQUd2d0IsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUSxJQUFLLE9BQU80dkIsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssWUFBWUMsR0FBRyxLQUFLLE1BQU0sSUFBSyxZQUFZLElBQUssV0FBV0MsR0FBRyxLQUFLLE1BQU0sSUFBSyxjQUFjLElBQUssYUFBYUMsR0FBR3pTLE9BQU9yZCxFQUFFdXdCLFdBQVcsTUFBTSxJQUFLLG9CQUFvQixJQUFLLHFCQUFxQlIsR0FBRzFTLE9BQU9yZCxFQUFFdXdCLFlBQVksU0FBU0MsR0FBR3p3QixFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEVBQUVxSCxHQUFHLE9BQUcsT0FBTzdHLEdBQUdBLEVBQUU2dUIsY0FBY2hvQixHQUFTN0csRUFBRW93QixHQUFHbndCLEVBQUVoRSxFQUFFQyxFQUFFc0QsRUFBRXFILEdBQUcsT0FBTzVHLElBQVksUUFBUkEsRUFBRXl3QixHQUFHendCLEtBQWF1dkIsR0FBR3Z2QixJQUFJRCxJQUFFQSxFQUFFaXZCLGtCQUFrQi95QixFQUFTOEQsR0FFaGMsU0FBUzJ3QixHQUFHM3dCLEdBQUcsSUFBSUMsRUFBRW12QixHQUFHcHZCLEVBQUVrVyxRQUFRLEdBQUcsT0FBT2pXLEVBQUUsQ0FBQyxJQUFJaEUsRUFBRWd4QixHQUFHaHRCLEdBQUcsR0FBRyxPQUFPaEUsRUFBRSxHQUFXLE1BQVJnRSxFQUFFaEUsRUFBRXVzQixNQUFZLEdBQVcsUUFBUnZvQixFQUFFbXRCLEdBQUdueEIsSUFBb0YsT0FBdkUrRCxFQUFFcXdCLFVBQVVwd0IsT0FBRXZELEVBQUVrMEIseUJBQXlCNXdCLEVBQUU2d0IsVUFBUyxXQUFXcEIsR0FBR3h6QixXQUFrQixHQUFHLElBQUlnRSxHQUFHaEUsRUFBRW9wQixVQUFVeUwsUUFBOEQsWUFBckQ5d0IsRUFBRXF3QixVQUFVLElBQUlwMEIsRUFBRXVzQixJQUFJdnNCLEVBQUVvcEIsVUFBVThKLGNBQWMsTUFBYW52QixFQUFFcXdCLFVBQVUsS0FBSyxTQUFTVSxHQUFHL3dCLEdBQUcsR0FBRyxPQUFPQSxFQUFFcXdCLFVBQVUsT0FBTSxFQUFHLElBQUlwd0IsRUFBRSt3QixHQUFHaHhCLEVBQUU0dUIsYUFBYTV1QixFQUFFaXZCLGlCQUFpQmp2QixFQUFFc3dCLFVBQVV0d0IsRUFBRTZ1QixhQUFhLEdBQUcsT0FBTzV1QixFQUFFLENBQUMsSUFBSWhFLEVBQUV5MEIsR0FBR3p3QixHQUFpQyxPQUE5QixPQUFPaEUsR0FBR3V6QixHQUFHdnpCLEdBQUcrRCxFQUFFcXdCLFVBQVVwd0IsR0FBUSxFQUFHLE9BQU0sRUFDMWUsU0FBU2d4QixHQUFHanhCLEVBQUVDLEVBQUVoRSxHQUFHODBCLEdBQUcvd0IsSUFBSS9ELEVBQUVxaEIsT0FBT3JkLEdBQUcsU0FBU2l4QixLQUFLLElBQUl4QixJQUFHLEVBQUcsRUFBRUMsR0FBR3h2QixRQUFRLENBQUMsSUFBSUgsRUFBRTJ2QixHQUFHLEdBQUcsR0FBRyxPQUFPM3ZCLEVBQUVxd0IsVUFBVSxDQUFtQixRQUFsQnJ3QixFQUFFMHdCLEdBQUcxd0IsRUFBRXF3QixhQUFxQmQsR0FBR3Z2QixHQUFHLE1BQU0sSUFBSUMsRUFBRSt3QixHQUFHaHhCLEVBQUU0dUIsYUFBYTV1QixFQUFFaXZCLGlCQUFpQmp2QixFQUFFc3dCLFVBQVV0d0IsRUFBRTZ1QixhQUFhLE9BQU81dUIsRUFBRUQsRUFBRXF3QixVQUFVcHdCLEVBQUUwdkIsR0FBR3dCLFFBQVEsT0FBT3ZCLElBQUltQixHQUFHbkIsTUFBTUEsR0FBRyxNQUFNLE9BQU9DLElBQUlrQixHQUFHbEIsTUFBTUEsR0FBRyxNQUFNLE9BQU9DLElBQUlpQixHQUFHakIsTUFBTUEsR0FBRyxNQUFNQyxHQUFHcHNCLFFBQVFzdEIsSUFBSWpCLEdBQUdyc0IsUUFBUXN0QixJQUFJLFNBQVNHLEdBQUdweEIsRUFBRUMsR0FBR0QsRUFBRXF3QixZQUFZcHdCLElBQUlELEVBQUVxd0IsVUFBVSxLQUFLWCxLQUFLQSxJQUFHLEVBQUdoekIsRUFBRTIwQiwwQkFBMEIzMEIsRUFBRTQwQix3QkFBd0JKLE1BQ3plLFNBQVNLLEdBQUd2eEIsR0FBRyxTQUFTQyxFQUFFQSxHQUFHLE9BQU9teEIsR0FBR254QixFQUFFRCxHQUFHLEdBQUcsRUFBRTJ2QixHQUFHeHZCLE9BQU8sQ0FBQ2l4QixHQUFHekIsR0FBRyxHQUFHM3ZCLEdBQUcsSUFBSSxJQUFJL0QsRUFBRSxFQUFFQSxFQUFFMHpCLEdBQUd4dkIsT0FBT2xFLElBQUksQ0FBQyxJQUFJQyxFQUFFeXpCLEdBQUcxekIsR0FBR0MsRUFBRW0wQixZQUFZcndCLElBQUk5RCxFQUFFbTBCLFVBQVUsT0FBK0YsSUFBeEYsT0FBT1QsSUFBSXdCLEdBQUd4QixHQUFHNXZCLEdBQUcsT0FBTzZ2QixJQUFJdUIsR0FBR3ZCLEdBQUc3dkIsR0FBRyxPQUFPOHZCLElBQUlzQixHQUFHdEIsR0FBRzl2QixHQUFHK3ZCLEdBQUdwc0IsUUFBUTFELEdBQUcrdkIsR0FBR3JzQixRQUFRMUQsR0FBT2hFLEVBQUUsRUFBRUEsRUFBRWcwQixHQUFHOXZCLE9BQU9sRSxLQUFJQyxFQUFFK3pCLEdBQUdoMEIsSUFBS28wQixZQUFZcndCLElBQUk5RCxFQUFFbTBCLFVBQVUsTUFBTSxLQUFLLEVBQUVKLEdBQUc5dkIsUUFBaUIsUUFBUmxFLEVBQUVnMEIsR0FBRyxJQUFZSSxXQUFZTSxHQUFHMTBCLEdBQUcsT0FBT0EsRUFBRW8wQixXQUFXSixHQUFHa0IsUUFDL1gsSUFBSUssR0FBRyxHQUFHQyxHQUFHLElBQUkvVSxJQUFJZ1YsR0FBRyxJQUFJaFYsSUFBSWlWLEdBQUcsQ0FBQyxRQUFRLFFBQVFqRixHQUFHLGVBQWVDLEdBQUcscUJBQXFCQyxHQUFHLGlCQUFpQixVQUFVLFVBQVUsaUJBQWlCLGlCQUFpQixpQkFBaUIsaUJBQWlCLFVBQVUsVUFBVSxZQUFZLFlBQVksUUFBUSxRQUFRLFFBQVEsUUFBUSxvQkFBb0Isb0JBQW9CLE9BQU8sT0FBTyxhQUFhLGFBQWEsaUJBQWlCLGlCQUFpQixZQUFZLFlBQVkscUJBQXFCLHFCQUFxQixVQUFVLFVBQVUsV0FBVyxXQUFXLFVBQ3BmLFVBQVUsVUFBVSxVQUFVLFVBQVUsVUFBVSxhQUFhLGFBQWFDLEdBQUcsZ0JBQWdCLFVBQVUsV0FBVyxTQUFTK0UsR0FBRzV4QixFQUFFQyxHQUFHLElBQUksSUFBSWhFLEVBQUUsRUFBRUEsRUFBRStELEVBQUVHLE9BQU9sRSxHQUFHLEVBQUUsQ0FBQyxJQUFJQyxFQUFFOEQsRUFBRS9ELEdBQUd1RCxFQUFFUSxFQUFFL0QsRUFBRSxHQUFHNEssRUFBRSxNQUFNckgsRUFBRSxHQUFHdVUsY0FBY3ZVLEVBQUU2SCxNQUFNLElBQUlSLEVBQUUsQ0FBQzRkLHdCQUF3QixDQUFDb04sUUFBUWhyQixFQUFFaXJCLFNBQVNqckIsRUFBRSxXQUFXaWUsYUFBYSxDQUFDNW9CLEdBQUc2MUIsY0FBYzl4QixHQUFHeXhCLEdBQUcvdkIsSUFBSXpGLEVBQUUrRCxHQUFHd3hCLEdBQUc5dkIsSUFBSXpGLEVBQUUySyxHQUFHMnFCLEdBQUdoeUIsR0FBR3FILEdBQ3pWK3FCLEdBQUcsNmlCQUE2aUJ0dkIsTUFBTSxLQUFLLEdBQzNqQnN2QixHQUFHLG9SQUFvUnR2QixNQUFNLEtBQUssR0FBR3N2QixHQUFHRCxHQUFHLEdBQUcsSUFBSSxJQUFJSyxHQUFHLHFGQUFxRjF2QixNQUFNLEtBQUsydkIsR0FBRyxFQUFFQSxHQUFHRCxHQUFHN3hCLE9BQU84eEIsS0FBS1AsR0FBRy92QixJQUFJcXdCLEdBQUdDLElBQUksR0FDOWIsSUFBSUMsR0FBR3gxQixFQUFFeTFCLDhCQUE4QkMsR0FBRzExQixFQUFFazBCLHlCQUF5QnlCLElBQUcsRUFBRyxTQUFTcFosR0FBRWpaLEVBQUVDLEdBQUdxdkIsR0FBR3J2QixFQUFFRCxHQUFFLEdBQUksU0FBU3N2QixHQUFHdHZCLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUV3MUIsR0FBR2oxQixJQUFJd0QsR0FBRyxZQUFPLElBQVMvRCxFQUFFLEVBQUVBLEdBQUcsS0FBSyxFQUFFQSxFQUFFbzJCLEdBQUdsMUIsS0FBSyxLQUFLNkMsRUFBRSxFQUFFRCxHQUFHLE1BQU0sS0FBSyxFQUFFOUQsRUFBRXEyQixHQUFHbjFCLEtBQUssS0FBSzZDLEVBQUUsRUFBRUQsR0FBRyxNQUFNLFFBQVE5RCxFQUFFZ2IsR0FBRzlaLEtBQUssS0FBSzZDLEVBQUUsRUFBRUQsR0FBRy9ELEVBQUUrRCxFQUFFd3lCLGlCQUFpQnZ5QixFQUFFL0QsR0FBRSxHQUFJOEQsRUFBRXd5QixpQkFBaUJ2eUIsRUFBRS9ELEdBQUUsR0FBSSxTQUFTbzJCLEdBQUd0eUIsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcwcEIsR0FBSUYsSUFBSyxJQUFJbG1CLEVBQUUwWCxHQUFHclEsRUFBRStlLEVBQUdBLEdBQUcsRUFBRyxJQUFJSCxFQUFHam1CLEVBQUVRLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFmLFNBQTJCMHBCLEVBQUcvZSxJQUFJaWYsS0FBTSxTQUFTeU0sR0FBR3Z5QixFQUFFQyxFQUFFaEUsRUFBRUMsR0FBR2syQixHQUFHRixHQUFHaGIsR0FBRzlaLEtBQUssS0FBSzRDLEVBQUVDLEVBQUVoRSxFQUFFQyxJQUNwYyxTQUFTZ2IsR0FBR2xYLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLEdBQUdtMkIsR0FBRyxHQUFHLEVBQUUxQyxHQUFHeHZCLFNBQVMsRUFBRSt2QixHQUFHdHRCLFFBQVE1QyxHQUFHQSxFQUFFb3dCLEdBQUcsS0FBS3B3QixFQUFFQyxFQUFFaEUsRUFBRUMsR0FBR3l6QixHQUFHbm5CLEtBQUt4SSxPQUFPLENBQUMsSUFBSVIsRUFBRXd4QixHQUFHaHhCLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLEdBQUcsT0FBT3NELEVBQUUrd0IsR0FBR3Z3QixFQUFFOUQsUUFBUSxJQUFJLEVBQUVnMEIsR0FBR3R0QixRQUFRNUMsR0FBR0EsRUFBRW93QixHQUFHNXdCLEVBQUVRLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHeXpCLEdBQUdubkIsS0FBS3hJLFFBQVEsSUFUOUwsU0FBWUEsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUVzRCxHQUFHLE9BQU9TLEdBQUcsSUFBSyxRQUFRLE9BQU8ydkIsR0FBR2EsR0FBR2IsR0FBRzV2QixFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELElBQUcsRUFBRyxJQUFLLFlBQVksT0FBT3F3QixHQUFHWSxHQUFHWixHQUFHN3ZCLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsSUFBRyxFQUFHLElBQUssWUFBWSxPQUFPc3dCLEdBQUdXLEdBQUdYLEdBQUc5dkIsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUVzRCxJQUFHLEVBQUcsSUFBSyxjQUFjLElBQUlxSCxFQUFFckgsRUFBRWd4QixVQUFrRCxPQUF4Q1QsR0FBR3B1QixJQUFJa0YsRUFBRTRwQixHQUFHVixHQUFHdHpCLElBQUlvSyxJQUFJLEtBQUs3RyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEtBQVUsRUFBRyxJQUFLLG9CQUFvQixPQUFPcUgsRUFBRXJILEVBQUVneEIsVUFBVVIsR0FBR3J1QixJQUFJa0YsRUFBRTRwQixHQUFHVCxHQUFHdnpCLElBQUlvSyxJQUFJLEtBQUs3RyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEtBQUksRUFBRyxPQUFNLEVBUzdKaXpCLENBQUdqekIsRUFBRVEsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcsQ0FBQ3EwQixHQUFHdndCLEVBQUU5RCxHQUFHOEQsRUFBRWd2QixHQUFHaHZCLEVBQUU5RCxFQUFFLEtBQUsrRCxHQUFHLElBQUk4bEIsRUFBR21KLEdBQUdsdkIsR0FBVixRQUFxQjJ1QixHQUFHM3VCLE1BQ2xRLFNBQVNneEIsR0FBR2h4QixFQUFFQyxFQUFFaEUsRUFBRUMsR0FBbUIsR0FBRyxRQUFYRCxFQUFFbXpCLEdBQVZuekIsRUFBRW95QixHQUFHbnlCLEtBQXVCLENBQUMsSUFBSXNELEVBQUV5dEIsR0FBR2h4QixHQUFHLEdBQUcsT0FBT3VELEVBQUV2RCxFQUFFLFNBQVMsQ0FBQyxJQUFJNEssRUFBRXJILEVBQUVncEIsSUFBSSxHQUFHLEtBQUszaEIsRUFBRSxDQUFTLEdBQUcsUUFBWDVLLEVBQUVteEIsR0FBRzV0QixJQUFlLE9BQU92RCxFQUFFQSxFQUFFLFVBQVUsR0FBRyxJQUFJNEssRUFBRSxDQUFDLEdBQUdySCxFQUFFNmxCLFVBQVV5TCxRQUFRLE9BQU8sSUFBSXR4QixFQUFFZ3BCLElBQUlocEIsRUFBRTZsQixVQUFVOEosY0FBYyxLQUFLbHpCLEVBQUUsVUFBVXVELElBQUl2RCxJQUFJQSxFQUFFLE9BQU8rRCxFQUFFZ3ZCLEdBQUdodkIsRUFBRTlELEVBQUVELEVBQUVnRSxHQUFHLElBQUk4bEIsRUFBR21KLEdBQUdsdkIsR0FBVixRQUFxQjJ1QixHQUFHM3VCLEdBQUcsT0FBTyxLQUNwVCxJQUFJMHlCLEdBQUcsQ0FBQ0MseUJBQXdCLEVBQUdDLG1CQUFrQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLFNBQVEsRUFBR0MsY0FBYSxFQUFHQyxpQkFBZ0IsRUFBR0MsYUFBWSxFQUFHQyxTQUFRLEVBQUdDLE1BQUssRUFBR0MsVUFBUyxFQUFHQyxjQUFhLEVBQUdDLFlBQVcsRUFBR0MsY0FBYSxFQUFHQyxXQUFVLEVBQUdDLFVBQVMsRUFBR0MsU0FBUSxFQUFHQyxZQUFXLEVBQUdDLGFBQVksRUFBR0MsY0FBYSxFQUFHQyxZQUFXLEVBQUdDLGVBQWMsRUFBR0MsZ0JBQWUsRUFBR0MsaUJBQWdCLEVBQUdDLFlBQVcsRUFBR0MsV0FBVSxFQUFHQyxZQUFXLEVBQUdDLFNBQVEsRUFBR0MsT0FBTSxFQUFHQyxTQUFRLEVBQUdDLFNBQVEsRUFBR0MsUUFBTyxFQUFHQyxRQUFPLEVBQUdDLE1BQUssRUFBR0MsYUFBWSxFQUMxZkMsY0FBYSxFQUFHQyxhQUFZLEVBQUdDLGlCQUFnQixFQUFHQyxrQkFBaUIsRUFBR0Msa0JBQWlCLEVBQUdDLGVBQWMsRUFBR0MsYUFBWSxHQUFJQyxHQUFHLENBQUMsU0FBUyxLQUFLLE1BQU0sS0FBNkgsU0FBU0MsR0FBR3QxQixFQUFFQyxFQUFFaEUsR0FBRyxPQUFPLE1BQU1nRSxHQUFHLGtCQUFtQkEsR0FBRyxLQUFLQSxFQUFFLEdBQUdoRSxHQUFHLGlCQUFrQmdFLEdBQUcsSUFBSUEsR0FBR3l5QixHQUFHajFCLGVBQWV1QyxJQUFJMHlCLEdBQUcxeUIsSUFBSSxHQUFHQyxHQUFHczFCLE9BQU90MUIsRUFBRSxLQUM5WixTQUFTdTFCLEdBQUd4MUIsRUFBRUMsR0FBYSxJQUFJLElBQUloRSxLQUFsQitELEVBQUVBLEVBQUUyWSxNQUFtQjFZLEVBQUUsR0FBR0EsRUFBRXhDLGVBQWV4QixHQUFHLENBQUMsSUFBSUMsRUFBRSxJQUFJRCxFQUFFMkcsUUFBUSxNQUFNcEQsRUFBRTgxQixHQUFHcjVCLEVBQUVnRSxFQUFFaEUsR0FBR0MsR0FBRyxVQUFVRCxJQUFJQSxFQUFFLFlBQVlDLEVBQUU4RCxFQUFFeTFCLFlBQVl4NUIsRUFBRXVELEdBQUdRLEVBQUUvRCxHQUFHdUQsR0FEVGxELE9BQU9zRCxLQUFLOHlCLElBQUkvdUIsU0FBUSxTQUFTM0QsR0FBR3ExQixHQUFHMXhCLFNBQVEsU0FBUzFELEdBQUdBLEVBQUVBLEVBQUVELEVBQUU2QyxPQUFPLEdBQUdrUixjQUFjL1QsRUFBRTAxQixVQUFVLEdBQUdoRCxHQUFHenlCLEdBQUd5eUIsR0FBRzF5QixTQUNyRyxJQUFJMjFCLEdBQUd0NEIsRUFBRSxDQUFDdTRCLFVBQVMsR0FBSSxDQUFDQyxNQUFLLEVBQUdDLE1BQUssRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUdDLE9BQU0sRUFBR0MsSUFBRyxFQUFHQyxLQUFJLEVBQUdyZixPQUFNLEVBQUdzZixRQUFPLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxPQUFNLEVBQUdwaEIsUUFBTyxFQUFHcWhCLE9BQU0sRUFBR0MsS0FBSSxJQUNsVCxTQUFTQyxHQUFHMTJCLEVBQUVDLEdBQUcsR0FBR0EsRUFBRSxDQUFDLEdBQUcwMUIsR0FBRzMxQixLQUFLLE1BQU1DLEVBQUVrSyxVQUFVLE1BQU1sSyxFQUFFMnFCLHlCQUF5QixNQUFNdmdCLE1BQU1zVCxFQUFFLElBQUkzZCxFQUFFLEtBQUssR0FBRyxNQUFNQyxFQUFFMnFCLHdCQUF3QixDQUFDLEdBQUcsTUFBTTNxQixFQUFFa0ssU0FBUyxNQUFNRSxNQUFNc1QsRUFBRSxLQUFLLEdBQUssaUJBQWtCMWQsRUFBRTJxQiwyQkFBeUIsV0FBVzNxQixFQUFFMnFCLHlCQUF5QixNQUFNdmdCLE1BQU1zVCxFQUFFLEtBQU0sR0FBRyxNQUFNMWQsRUFBRTBZLE9BQU8saUJBQWtCMVksRUFBRTBZLE1BQU0sTUFBTXRPLE1BQU1zVCxFQUFFLEdBQUcsTUFDbFcsU0FBU2daLEdBQUczMkIsRUFBRUMsR0FBRyxJQUFJLElBQUlELEVBQUU0QyxRQUFRLEtBQUssTUFBTSxpQkFBa0IzQyxFQUFFMjJCLEdBQUcsT0FBTzUyQixHQUFHLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssWUFBWSxJQUFLLGdCQUFnQixJQUFLLGdCQUFnQixJQUFLLG1CQUFtQixJQUFLLGlCQUFpQixJQUFLLGdCQUFnQixPQUFNLEVBQUcsUUFBUSxPQUFNLEdBQUksSUFBSTYyQixHQUFHNUwsR0FBUSxTQUFTNkwsR0FBRzkyQixFQUFFQyxHQUF1RCxJQUFJaEUsRUFBRSt3QixHQUExRGh0QixFQUFFLElBQUlBLEVBQUVmLFVBQVUsS0FBS2UsRUFBRWYsU0FBU2UsRUFBRUEsRUFBRW1xQixlQUEwQmxxQixFQUFFNGtCLEVBQUc1a0IsR0FBRyxJQUFJLElBQUkvRCxFQUFFLEVBQUVBLEVBQUUrRCxFQUFFRSxPQUFPakUsSUFBSW16QixHQUFHcHZCLEVBQUUvRCxHQUFHOEQsRUFBRS9ELEdBQUcsU0FBUzg2QixNQUM1YSxTQUFTQyxHQUFHaDNCLEdBQXdELFFBQUcsS0FBeERBLEVBQUVBLElBQUksb0JBQXFCNFcsU0FBU0EsY0FBUyxJQUFrQyxPQUFPLEtBQUssSUFBSSxPQUFPNVcsRUFBRW9xQixlQUFlcHFCLEVBQUVpM0IsS0FBSyxNQUFNaDNCLEdBQUcsT0FBT0QsRUFBRWkzQixNQUFNLFNBQVNDLEdBQUdsM0IsR0FBRyxLQUFLQSxHQUFHQSxFQUFFMHJCLFlBQVkxckIsRUFBRUEsRUFBRTByQixXQUFXLE9BQU8xckIsRUFBRSxTQUFTbTNCLEdBQUduM0IsRUFBRUMsR0FBRyxJQUF3Qi9ELEVBQXBCRCxFQUFFaTdCLEdBQUdsM0IsR0FBTyxJQUFKQSxFQUFFLEVBQVkvRCxHQUFHLENBQUMsR0FBRyxJQUFJQSxFQUFFZ0QsU0FBUyxDQUEwQixHQUF6Qi9DLEVBQUU4RCxFQUFFL0QsRUFBRSt1QixZQUFZN3FCLE9BQVVILEdBQUdDLEdBQUcvRCxHQUFHK0QsRUFBRSxNQUFNLENBQUNpSyxLQUFLak8sRUFBRThXLE9BQU85UyxFQUFFRCxHQUFHQSxFQUFFOUQsRUFBRThELEVBQUUsQ0FBQyxLQUFLL0QsR0FBRyxDQUFDLEdBQUdBLEVBQUVtN0IsWUFBWSxDQUFDbjdCLEVBQUVBLEVBQUVtN0IsWUFBWSxNQUFNcDNCLEVBQUUvRCxFQUFFQSxFQUFFdXlCLFdBQVd2eUIsT0FBRSxFQUFPQSxFQUFFaTdCLEdBQUdqN0IsSUFDM1AsU0FBU283QixLQUFLLElBQUksSUFBSXIzQixFQUFFbEIsT0FBT21CLEVBQUUrMkIsS0FBSy8yQixhQUFhRCxFQUFFczNCLG1CQUFtQixDQUFDLElBQUksSUFBSXI3QixFQUFFLGlCQUFrQmdFLEVBQUU4WSxjQUFjd2UsU0FBU0MsS0FBSyxNQUFNdDdCLEdBQUdELEdBQUUsRUFBRyxJQUFHQSxFQUF5QixNQUFNZ0UsRUFBRSsyQixJQUEvQmgzQixFQUFFQyxFQUFFOFksZUFBZ0NuQyxVQUFVLE9BQU8zVyxFQUM1WSxTQUFTdzNCLEdBQUd6M0IsR0FBRyxJQUFJQyxFQUFFRCxHQUFHQSxFQUFFZ3BCLFVBQVVocEIsRUFBRWdwQixTQUFTdEMsY0FBYyxPQUFPem1CLElBQUksVUFBVUEsSUFBSSxTQUFTRCxFQUFFNkUsTUFBTSxXQUFXN0UsRUFBRTZFLE1BQU0sUUFBUTdFLEVBQUU2RSxNQUFNLFFBQVE3RSxFQUFFNkUsTUFBTSxhQUFhN0UsRUFBRTZFLE9BQU8sYUFBYTVFLEdBQUcsU0FBU0QsRUFBRTAzQixpQkFBaUIsSUFBbUNDLEdBQUcsS0FBS0MsR0FBRyxLQUFLLFNBQVNDLEdBQUc3M0IsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssU0FBUyxJQUFLLFFBQVEsSUFBSyxTQUFTLElBQUssV0FBVyxRQUFRQyxFQUFFNjNCLFVBQVUsT0FBTSxFQUM3WCxTQUFTQyxHQUFHLzNCLEVBQUVDLEdBQUcsTUFBTSxhQUFhRCxHQUFHLFdBQVdBLEdBQUcsYUFBYUEsR0FBRyxpQkFBa0JDLEVBQUVrSyxVQUFVLGlCQUFrQmxLLEVBQUVrSyxVQUFVLGlCQUFrQmxLLEVBQUUycUIseUJBQXlCLE9BQU8zcUIsRUFBRTJxQix5QkFBeUIsTUFBTTNxQixFQUFFMnFCLHdCQUF3Qm9OLE9BQU8sSUFBSUMsR0FBRyxtQkFBb0JDLFdBQVdBLGdCQUFXLEVBQU9DLEdBQUcsbUJBQW9CQyxhQUFhQSxrQkFBYSxFQUFPLFNBQVNDLEdBQUdyNEIsR0FBRyxLQUFLLE1BQU1BLEVBQUVBLEVBQUVBLEVBQUVvM0IsWUFBWSxDQUFDLElBQUluM0IsRUFBRUQsRUFBRWYsU0FBUyxHQUFHLElBQUlnQixHQUFHLElBQUlBLEVBQUUsTUFBTSxPQUFPRCxFQUNsYyxTQUFTczRCLEdBQUd0NEIsR0FBR0EsRUFBRUEsRUFBRXU0QixnQkFBZ0IsSUFBSSxJQUFJdDRCLEVBQUUsRUFBRUQsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRWYsU0FBUyxDQUFDLElBQUloRCxFQUFFK0QsRUFBRW9ELEtBQUssR0FGZ0osTUFFN0luSCxHQUZvSyxPQUU1SkEsR0FGb0osT0FFNUlBLEVBQU8sQ0FBQyxHQUFHLElBQUlnRSxFQUFFLE9BQU9ELEVBQUVDLFFBRjBHLE9BRWpHaEUsR0FBUWdFLElBQUlELEVBQUVBLEVBQUV1NEIsZ0JBQWdCLE9BQU8sS0FBSyxJQUFJQyxHQUFHNTVCLEtBQUt3WSxTQUFTdlcsU0FBUyxJQUFJd0csTUFBTSxHQUFHb3hCLEdBQUcsMkJBQTJCRCxHQUFHRSxHQUFHLHdCQUF3QkYsR0FBR0csR0FBRyxxQkFBcUJILEdBQ3ZULFNBQVNwSixHQUFHcHZCLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXk0QixJQUFJLEdBQUd4NEIsRUFBRSxPQUFPQSxFQUFFLElBQUksSUFBSWhFLEVBQUUrRCxFQUFFd3VCLFdBQVd2eUIsR0FBRyxDQUFDLEdBQUdnRSxFQUFFaEUsRUFBRTA4QixLQUFLMThCLEVBQUV3OEIsSUFBSSxDQUFlLEdBQWR4OEIsRUFBRWdFLEVBQUVpdEIsVUFBYSxPQUFPanRCLEVBQUVvZCxPQUFPLE9BQU9waEIsR0FBRyxPQUFPQSxFQUFFb2hCLE1BQU0sSUFBSXJkLEVBQUVzNEIsR0FBR3Q0QixHQUFHLE9BQU9BLEdBQUcsQ0FBQyxHQUFHL0QsRUFBRStELEVBQUV5NEIsSUFBSSxPQUFPeDhCLEVBQUUrRCxFQUFFczRCLEdBQUd0NEIsR0FBRyxPQUFPQyxFQUFNaEUsR0FBSitELEVBQUUvRCxHQUFNdXlCLFdBQVcsT0FBTyxLQUFLLFNBQVNrQyxHQUFHMXdCLEdBQWtCLFFBQWZBLEVBQUVBLEVBQUV5NEIsS0FBS3o0QixFQUFFMjRCLE1BQWMsSUFBSTM0QixFQUFFd29CLEtBQUssSUFBSXhvQixFQUFFd29CLEtBQUssS0FBS3hvQixFQUFFd29CLEtBQUssSUFBSXhvQixFQUFFd29CLElBQUksS0FBS3hvQixFQUFFLFNBQVM0NEIsR0FBRzU0QixHQUFHLEdBQUcsSUFBSUEsRUFBRXdvQixLQUFLLElBQUl4b0IsRUFBRXdvQixJQUFJLE9BQU94b0IsRUFBRXFsQixVQUFVLE1BQU1oYixNQUFNc1QsRUFBRSxLQUFNLFNBQVNrYixHQUFHNzRCLEdBQUcsT0FBT0EsRUFBRTA0QixLQUFLLEtBQ2xiLFNBQVNJLEdBQUc5NEIsR0FBRyxHQUFHQSxFQUFFQSxFQUFFNm9CLGFBQWE3b0IsR0FBRyxJQUFJQSxFQUFFd29CLEtBQUssT0FBT3hvQixHQUFJLEtBQzVELFNBQVMrNEIsR0FBRy80QixFQUFFQyxHQUFHLElBQUloRSxFQUFFK0QsRUFBRXFsQixVQUFVLElBQUlwcEIsRUFBRSxPQUFPLEtBQUssSUFBSUMsRUFBRTBuQixFQUFHM25CLEdBQUcsSUFBSUMsRUFBRSxPQUFPLEtBQUtELEVBQUVDLEVBQUUrRCxHQUFHRCxFQUFFLE9BQU9DLEdBQUcsSUFBSyxVQUFVLElBQUssaUJBQWlCLElBQUssZ0JBQWdCLElBQUssdUJBQXVCLElBQUssY0FBYyxJQUFLLHFCQUFxQixJQUFLLGNBQWMsSUFBSyxxQkFBcUIsSUFBSyxZQUFZLElBQUssbUJBQW1CLElBQUssZ0JBQWdCL0QsR0FBR0EsRUFBRXd1QixZQUFxQnh1QixJQUFJLFlBQWI4RCxFQUFFQSxFQUFFNkUsT0FBdUIsVUFBVTdFLEdBQUcsV0FBV0EsR0FBRyxhQUFhQSxJQUFJQSxHQUFHOUQsRUFBRSxNQUFNOEQsRUFBRSxRQUFRQSxHQUFFLEVBQUcsR0FBR0EsRUFBRSxPQUFPLEtBQUssR0FBRy9ELEdBQUcsbUJBQW9CQSxFQUFFLE1BQU1vTyxNQUFNc1QsRUFBRSxJQUNqZ0IxZCxTQUFTaEUsSUFBSSxPQUFPQSxFQUFFLFNBQVMrOEIsR0FBR2g1QixFQUFFQyxFQUFFaEUsSUFBTWdFLEVBQUU4NEIsR0FBRy80QixFQUFFL0QsRUFBRWc5QixlQUFleFUsd0JBQXdCeGtCLE9BQUloRSxFQUFFOHhCLG1CQUFtQkosR0FBRzF4QixFQUFFOHhCLG1CQUFtQjl0QixHQUFHaEUsRUFBRSt4QixtQkFBbUJMLEdBQUcxeEIsRUFBRSt4QixtQkFBbUJodUIsSUFBRyxTQUFTazVCLEdBQUdsNUIsR0FBRyxHQUFHQSxHQUFHQSxFQUFFaTVCLGVBQWV4VSx3QkFBd0IsQ0FBQyxJQUFJLElBQUl4a0IsRUFBRUQsRUFBRW01QixZQUFZbDlCLEVBQUUsR0FBR2dFLEdBQUdoRSxFQUFFdU0sS0FBS3ZJLEdBQUdBLEVBQUU2NEIsR0FBRzc0QixHQUFHLElBQUlBLEVBQUVoRSxFQUFFa0UsT0FBTyxFQUFFRixLQUFLKzRCLEdBQUcvOEIsRUFBRWdFLEdBQUcsV0FBV0QsR0FBRyxJQUFJQyxFQUFFLEVBQUVBLEVBQUVoRSxFQUFFa0UsT0FBT0YsSUFBSSs0QixHQUFHLzhCLEVBQUVnRSxHQUFHLFVBQVVELElBQ3RZLFNBQVNvNUIsR0FBR3A1QixFQUFFQyxFQUFFaEUsR0FBRytELEdBQUcvRCxHQUFHQSxFQUFFZzlCLGVBQWV0VSxtQkFBbUIxa0IsRUFBRTg0QixHQUFHLzRCLEVBQUUvRCxFQUFFZzlCLGVBQWV0VSxxQkFBcUIxb0IsRUFBRTh4QixtQkFBbUJKLEdBQUcxeEIsRUFBRTh4QixtQkFBbUI5dEIsR0FBR2hFLEVBQUUreEIsbUJBQW1CTCxHQUFHMXhCLEVBQUUreEIsbUJBQW1CaHVCLElBQUksU0FBU3E1QixHQUFHcjVCLEdBQUdBLEdBQUdBLEVBQUVpNUIsZUFBZXRVLGtCQUFrQnlVLEdBQUdwNUIsRUFBRW01QixZQUFZLEtBQUtuNUIsR0FBRyxTQUFTczVCLEdBQUd0NUIsR0FBRzR0QixHQUFHNXRCLEVBQUVrNUIsSUFBSSxJQUFJSyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsR0FBRyxLQUN4VSxTQUFTQyxLQUFLLEdBQUdELEdBQUcsT0FBT0EsR0FBRyxJQUFJejVCLEVBQWtCOUQsRUFBaEIrRCxFQUFFdTVCLEdBQUd2OUIsRUFBRWdFLEVBQUVFLE9BQVNYLEVBQUUsVUFBVSs1QixHQUFHQSxHQUFHMThCLE1BQU0wOEIsR0FBR3ZPLFlBQVlua0IsRUFBRXJILEVBQUVXLE9BQU8sSUFBSUgsRUFBRSxFQUFFQSxFQUFFL0QsR0FBR2dFLEVBQUVELEtBQUtSLEVBQUVRLEdBQUdBLEtBQUssSUFBSStOLEVBQUU5UixFQUFFK0QsRUFBRSxJQUFJOUQsRUFBRSxFQUFFQSxHQUFHNlIsR0FBRzlOLEVBQUVoRSxFQUFFQyxLQUFLc0QsRUFBRXFILEVBQUUzSyxHQUFHQSxLQUFLLE9BQU91OUIsR0FBR2o2QixFQUFFNkgsTUFBTXJILEVBQUUsRUFBRTlELEVBQUUsRUFBRUEsT0FBRSxHQUFRLFNBQVN5OUIsS0FBSyxPQUFNLEVBQUcsU0FBU0MsS0FBSyxPQUFNLEVBQ2xRLFNBQVNqYixHQUFFM2UsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQTRGLElBQUksSUFBSXNELEtBQWpHOEIsS0FBSzIzQixlQUFlajVCLEVBQUVzQixLQUFLNjNCLFlBQVlsNUIsRUFBRXFCLEtBQUt1dEIsWUFBWTV5QixFQUFFK0QsRUFBRXNCLEtBQUs5QyxZQUFZcTdCLFVBQXlCNzVCLEVBQUV2QyxlQUFlK0IsTUFBTVMsRUFBRUQsRUFBRVIsSUFBSThCLEtBQUs5QixHQUFHUyxFQUFFaEUsR0FBRyxXQUFXdUQsRUFBRThCLEtBQUs0VSxPQUFPaGEsRUFBRW9GLEtBQUs5QixHQUFHdkQsRUFBRXVELElBQWdJLE9BQTVIOEIsS0FBS3c0QixvQkFBb0IsTUFBTTc5QixFQUFFODlCLGlCQUFpQjk5QixFQUFFODlCLGtCQUFpQixJQUFLOTlCLEVBQUUrOUIsYUFBYUwsR0FBR0MsR0FBR3Q0QixLQUFLMnNCLHFCQUFxQjJMLEdBQVV0NEIsS0FHckYsU0FBUzI0QixHQUFHajZCLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLEdBQUdvRixLQUFLNDRCLFVBQVUvNUIsT0FBTyxDQUFDLElBQUlYLEVBQUU4QixLQUFLNDRCLFVBQVVyYSxNQUEyQixPQUFyQnZlLEtBQUt2RixLQUFLeUQsRUFBRVEsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQVVzRCxFQUFFLE9BQU8sSUFBSThCLEtBQUt0QixFQUFFQyxFQUFFaEUsRUFBRUMsR0FDN1gsU0FBU2krQixHQUFHbjZCLEdBQUcsS0FBS0EsYUFBYXNCLE1BQU0sTUFBTStJLE1BQU1zVCxFQUFFLE1BQU0zZCxFQUFFbzZCLGFBQWEsR0FBRzk0QixLQUFLNDRCLFVBQVUvNUIsUUFBUW1CLEtBQUs0NEIsVUFBVTF4QixLQUFLeEksR0FBRyxTQUFTcTZCLEdBQUdyNkIsR0FBR0EsRUFBRWs2QixVQUFVLEdBQUdsNkIsRUFBRXM2QixVQUFVTCxHQUFHajZCLEVBQUVtdUIsUUFBUWdNLEdBSGxMOThCLEVBQUVzaEIsR0FBRW5oQixVQUFVLENBQUMrOEIsZUFBZSxXQUFXajVCLEtBQUt5NEIsa0JBQWlCLEVBQUcsSUFBSS81QixFQUFFc0IsS0FBS3V0QixZQUFZN3VCLElBQUlBLEVBQUV1NkIsZUFBZXY2QixFQUFFdTZCLGlCQUFpQixrQkFBbUJ2NkIsRUFBRWc2QixjQUFjaDZCLEVBQUVnNkIsYUFBWSxHQUFJMTRCLEtBQUt3NEIsbUJBQW1CSCxLQUFLYSxnQkFBZ0IsV0FBVyxJQUFJeDZCLEVBQUVzQixLQUFLdXRCLFlBQVk3dUIsSUFBSUEsRUFBRXc2QixnQkFBZ0J4NkIsRUFBRXc2QixrQkFBa0Isa0JBQW1CeDZCLEVBQUV5NkIsZUFBZXo2QixFQUFFeTZCLGNBQWEsR0FBSW41QixLQUFLMnNCLHFCQUFxQjBMLEtBQUtlLFFBQVEsV0FBV3A1QixLQUFLNHNCLGFBQWF5TCxJQUFJekwsYUFBYTBMLEdBQUdRLFdBQVcsV0FBVyxJQUNwZG42QixFQUR3ZEQsRUFBRXNCLEtBQUs5QyxZQUFZcTdCLFVBQ3plLElBQUk1NUIsS0FBS0QsRUFBRXNCLEtBQUtyQixHQUFHLEtBQUtxQixLQUFLdXRCLFlBQVl2dEIsS0FBSzYzQixZQUFZNzNCLEtBQUsyM0IsZUFBZSxLQUFLMzNCLEtBQUsyc0IscUJBQXFCM3NCLEtBQUt3NEIsbUJBQW1CRixHQUFHdDRCLEtBQUswc0IsbUJBQW1CMXNCLEtBQUt5c0IsbUJBQW1CLFFBQVFwUCxHQUFFa2IsVUFBVSxDQUFDaDFCLEtBQUssS0FBS3FSLE9BQU8sS0FBSzhOLGNBQWMsV0FBVyxPQUFPLE1BQU0yVyxXQUFXLEtBQUtDLFFBQVEsS0FBS0MsV0FBVyxLQUFLQyxVQUFVLFNBQVM5NkIsR0FBRyxPQUFPQSxFQUFFODZCLFdBQVd2NkIsS0FBS3c2QixPQUFPaEIsaUJBQWlCLEtBQUtpQixVQUFVLE1BQzlZcmMsR0FBRXNjLE9BQU8sU0FBU2o3QixHQUFHLFNBQVNDLEtBQUssU0FBU2hFLElBQUksT0FBT0MsRUFBRW9MLE1BQU1oRyxLQUFLMkQsV0FBVyxJQUFJL0ksRUFBRW9GLEtBQUtyQixFQUFFekMsVUFBVXRCLEVBQUVzQixVQUFVLElBQUlnQyxFQUFFLElBQUlTLEVBQW1ILE9BQWpINUMsRUFBRW1DLEVBQUV2RCxFQUFFdUIsV0FBV3ZCLEVBQUV1QixVQUFVZ0MsRUFBRXZELEVBQUV1QixVQUFVZ0IsWUFBWXZDLEVBQUVBLEVBQUU0OUIsVUFBVXg4QixFQUFFLEdBQUduQixFQUFFMjlCLFVBQVU3NUIsR0FBRy9ELEVBQUVnL0IsT0FBTy8rQixFQUFFKytCLE9BQU9aLEdBQUdwK0IsR0FBVUEsR0FBR28rQixHQUFHMWIsSUFDdkUsSUFBSXVjLEdBQUd2YyxHQUFFc2MsT0FBTyxDQUFDNzNCLEtBQUssT0FBTyszQixHQUFHeGMsR0FBRXNjLE9BQU8sQ0FBQzczQixLQUFLLE9BQU9nNEIsR0FBRyxDQUFDLEVBQUUsR0FBRyxHQUFHLElBQUlDLEdBQUdyVyxHQUFJLHFCQUFxQmxtQixPQUFPdzhCLEdBQUcsS0FBS3RXLEdBQUksaUJBQWlCcE8sV0FBVzBrQixHQUFHMWtCLFNBQVMya0IsY0FDbFYsSUFBSUMsR0FBR3hXLEdBQUksY0FBY2xtQixTQUFTdzhCLEdBQUdHLEdBQUd6VyxLQUFNcVcsSUFBSUMsSUFBSSxFQUFFQSxJQUFJLElBQUlBLElBQUlJLEdBQUc1dEIsT0FBT2dJLGFBQWEsSUFBSTZsQixHQUFHLENBQUNDLFlBQVksQ0FBQ25YLHdCQUF3QixDQUFDb04sUUFBUSxnQkFBZ0JDLFNBQVMsd0JBQXdCaE4sYUFBYSxDQUFDLGlCQUFpQixXQUFXLFlBQVksVUFBVStXLGVBQWUsQ0FBQ3BYLHdCQUF3QixDQUFDb04sUUFBUSxtQkFBbUJDLFNBQVMsMkJBQTJCaE4sYUFBYSx1REFBdUR4aUIsTUFBTSxNQUFNdzVCLGlCQUFpQixDQUFDclgsd0JBQXdCLENBQUNvTixRQUFRLHFCQUM3ZUMsU0FBUyw2QkFBNkJoTixhQUFhLHlEQUF5RHhpQixNQUFNLE1BQU15NUIsa0JBQWtCLENBQUN0WCx3QkFBd0IsQ0FBQ29OLFFBQVEsc0JBQXNCQyxTQUFTLDhCQUE4QmhOLGFBQWEsMERBQTBEeGlCLE1BQU0sT0FBTzA1QixJQUFHLEVBQ2hVLFNBQVNDLEdBQUdqOEIsRUFBRUMsR0FBRyxPQUFPRCxHQUFHLElBQUssUUFBUSxPQUFPLElBQUlvN0IsR0FBR3g0QixRQUFRM0MsRUFBRWk4QixTQUFTLElBQUssVUFBVSxPQUFPLE1BQU1qOEIsRUFBRWk4QixRQUFRLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxPQUFPLE9BQU0sRUFBRyxRQUFRLE9BQU0sR0FBSSxTQUFTdG5CLEdBQUc1VSxHQUFjLE1BQU0saUJBQWpCQSxFQUFFQSxFQUFFbThCLFNBQWtDLFNBQVNuOEIsRUFBRUEsRUFBRW9ELEtBQUssS0FBSyxJQUFJZzVCLElBQUcsRUFFMVEsSUFBSUMsR0FBRyxDQUFDOVgsV0FBV29YLEdBQUdyWCxjQUFjLFNBQVN0a0IsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcsSUFBSXNELEVBQUUsR0FBRzY3QixHQUFHcDdCLEVBQUUsQ0FBQyxPQUFPRCxHQUFHLElBQUssbUJBQW1CLElBQUk2RyxFQUFFODBCLEdBQUdHLGlCQUFpQixNQUFNNzdCLEVBQUUsSUFBSyxpQkFBaUI0RyxFQUFFODBCLEdBQUdFLGVBQWUsTUFBTTU3QixFQUFFLElBQUssb0JBQW9CNEcsRUFBRTgwQixHQUFHSSxrQkFBa0IsTUFBTTk3QixFQUFFNEcsT0FBRSxPQUFZdTFCLEdBQUdILEdBQUdqOEIsRUFBRS9ELEtBQUs0SyxFQUFFODBCLEdBQUdFLGdCQUFnQixZQUFZNzdCLEdBQUcsTUFBTS9ELEVBQUVpZ0MsVUFBVXIxQixFQUFFODBCLEdBQUdHLGtCQUNsTCxPQURvTWoxQixHQUFHNDBCLElBQUksT0FBT3gvQixFQUFFcWdDLFNBQVNGLElBQUl2MUIsSUFBSTgwQixHQUFHRyxpQkFBaUJqMUIsSUFBSTgwQixHQUFHRSxnQkFBZ0JPLEtBQUs1OEIsRUFBRWs2QixPQUFZRixHQUFHLFVBQVJELEdBQUdyOUIsR0FBa0JxOUIsR0FBRzE4QixNQUFNMDhCLEdBQUd2TyxZQUFZb1IsSUFBRyxJQUFLdjFCLEVBQUVxMEIsR0FBR1osVUFBVXp6QixFQUN6ZjVHLEVBQUVoRSxFQUFFQyxHQUFHc0QsRUFBRXFILEVBQUV6RCxLQUFLNUQsRUFBVyxRQUFSQSxFQUFFb1YsR0FBRzNZLE1BQWM0SyxFQUFFekQsS0FBSzVELEdBQUk4NUIsR0FBR3p5QixHQUFHckgsRUFBRXFILEdBQUdySCxFQUFFLE1BQU1RLEVBQUV3N0IsR0FIdU0sU0FBWXg3QixFQUFFQyxHQUFHLE9BQU9ELEdBQUcsSUFBSyxpQkFBaUIsT0FBTzRVLEdBQUczVSxHQUFHLElBQUssV0FBVyxPQUFHLEtBQUtBLEVBQUVzOEIsTUFBYSxNQUFLUCxJQUFHLEVBQVVOLElBQUcsSUFBSyxZQUFZLE9BQU8xN0IsRUFBRUMsRUFBRW1ELFFBQVNzNEIsSUFBSU0sR0FBRyxLQUFLaDhCLEVBQUUsUUFBUSxPQUFPLE1BR2hZdzhCLENBQUd4OEIsRUFBRS9ELEdBRjlFLFNBQVkrRCxFQUFFQyxHQUFHLEdBQUdtOEIsR0FBRyxNQUFNLG1CQUFtQnA4QixJQUFJcTdCLElBQUlZLEdBQUdqOEIsRUFBRUMsSUFBSUQsRUFBRTA1QixLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQUs2QyxJQUFHLEVBQUdwOEIsR0FBRyxLQUFLLE9BQU9BLEdBQUcsSUFBSyxRQUFRLE9BQU8sS0FBSyxJQUFLLFdBQVcsS0FBS0MsRUFBRXc4QixTQUFTeDhCLEVBQUV5OEIsUUFBUXo4QixFQUFFMDhCLFVBQVUxOEIsRUFBRXc4QixTQUFTeDhCLEVBQUV5OEIsT0FBTyxDQUFDLEdBQUd6OEIsRUFBRTI4QixNQUFNLEVBQUUzOEIsRUFBRTI4QixLQUFLejhCLE9BQU8sT0FBT0YsRUFBRTI4QixLQUFLLEdBQUczOEIsRUFBRXM4QixNQUFNLE9BQU96dUIsT0FBT2dJLGFBQWE3VixFQUFFczhCLE9BQU8sT0FBTyxLQUFLLElBQUssaUJBQWlCLE9BQU9kLElBQUksT0FBT3g3QixFQUFFcThCLE9BQU8sS0FBS3I4QixFQUFFbUQsS0FBSyxRQUFRLE9BQU8sTUFFalR5NUIsQ0FBRzc4QixFQUFFL0QsTUFBS2dFLEVBQUVrN0IsR0FBR2IsVUFBVXFCLEdBQUdDLFlBQVkzN0IsRUFBRWhFLEVBQUVDLElBQUtrSCxLQUFLcEQsRUFBRXM1QixHQUFHcjVCLElBQUlBLEVBQUUsS0FBWSxPQUFPVCxFQUFFUyxFQUFFLE9BQU9BLEVBQUVULEVBQUUsQ0FBQ0EsRUFBRVMsS0FBSzY4QixHQUFHLENBQUNDLE9BQU0sRUFBR0MsTUFBSyxFQUFHQyxVQUFTLEVBQUcsa0JBQWlCLEVBQUdDLE9BQU0sRUFBR0MsT0FBTSxFQUFHbDhCLFFBQU8sRUFBR204QixVQUFTLEVBQUdDLE9BQU0sRUFBR0MsUUFBTyxFQUFHQyxLQUFJLEVBQUdDLE1BQUssRUFBR0MsTUFBSyxFQUFHQyxLQUFJLEVBQUdDLE1BQUssR0FBSSxTQUFTQyxHQUFHNTlCLEdBQUcsSUFBSUMsRUFBRUQsR0FBR0EsRUFBRWdwQixVQUFVaHBCLEVBQUVncEIsU0FBU3RDLGNBQWMsTUFBTSxVQUFVem1CLElBQUk2OEIsR0FBRzk4QixFQUFFNkUsTUFBTSxhQUFhNUUsRUFDNWIsSUFBSTQ5QixHQUFHLENBQUNDLE9BQU8sQ0FBQ3JaLHdCQUF3QixDQUFDb04sUUFBUSxXQUFXQyxTQUFTLG1CQUFtQmhOLGFBQWEsOERBQThEeGlCLE1BQU0sT0FBTyxTQUFTeTdCLEdBQUcvOUIsRUFBRUMsRUFBRWhFLEdBQThELE9BQTNEK0QsRUFBRTJlLEdBQUUyYixVQUFVdUQsR0FBR0MsT0FBTzk5QixFQUFFQyxFQUFFaEUsSUFBSzRJLEtBQUssU0FBU3lnQixFQUFHcnBCLEdBQUdxOUIsR0FBR3Q1QixHQUFVQSxFQUFFLElBQUlnK0IsR0FBRyxLQUFLQyxHQUFHLEtBQUssU0FBU0MsR0FBR2wrQixHQUFHb3VCLEdBQUdwdUIsR0FBRyxTQUFTbStCLEdBQUduK0IsR0FBZSxHQUFHc3BCLEdBQVRzUCxHQUFHNTRCLElBQVksT0FBT0EsRUFBRSxTQUFTbytCLEdBQUdwK0IsRUFBRUMsR0FBRyxHQUFHLFdBQVdELEVBQUUsT0FBT0MsRUFBRSxJQUFJbytCLElBQUcsRUFDOVksU0FBU0MsS0FBS04sS0FBS0EsR0FBR08sWUFBWSxtQkFBbUJDLElBQUlQLEdBQUdELEdBQUcsTUFBTSxTQUFTUSxHQUFHeCtCLEdBQUcsR0FBRyxVQUFVQSxFQUFFd21CLGNBQWMyWCxHQUFHRixJQUFJLEdBQUdqK0IsRUFBRSs5QixHQUFHRSxHQUFHaitCLEVBQUVxdUIsR0FBR3J1QixJQUFJNGxCLEVBQUd3SSxHQUFHcHVCLE9BQU8sQ0FBQzRsQixHQUFHLEVBQUcsSUFBSUosRUFBRzBZLEdBQUdsK0IsR0FBVixRQUFxQjRsQixHQUFHLEVBQUdFLE1BQU8sU0FBUzJZLEdBQUd6K0IsRUFBRUMsRUFBRWhFLEdBQUcsVUFBVStELEdBQUdzK0IsS0FBVUwsR0FBR2hpQyxHQUFSK2hDLEdBQUcvOUIsR0FBVXkrQixZQUFZLG1CQUFtQkYsS0FBSyxTQUFTeCtCLEdBQUdzK0IsS0FBSyxTQUFTSyxHQUFHMytCLEdBQUcsR0FBRyxvQkFBb0JBLEdBQUcsVUFBVUEsR0FBRyxZQUFZQSxFQUFFLE9BQU9tK0IsR0FBR0YsSUFBSSxTQUFTVyxHQUFHNStCLEVBQUVDLEdBQUcsR0FBRyxVQUFVRCxFQUFFLE9BQU9tK0IsR0FBR2wrQixHQUFHLFNBQVM0K0IsR0FBRzcrQixFQUFFQyxHQUFHLEdBQUcsVUFBVUQsR0FBRyxXQUFXQSxFQUFFLE9BQU9tK0IsR0FBR2wrQixHQUQvRStrQixJQUFLcVosR0FBRzVQLEdBQUcsWUFBWTdYLFNBQVMya0IsY0FBYyxFQUFFM2tCLFNBQVMya0IsZUFFMWMsSUFBSXVELEdBQUcsQ0FBQ3ZhLFdBQVdzWixHQUFHa0IsdUJBQXVCVixHQUFHL1osY0FBYyxTQUFTdGtCLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLElBQUlzRCxFQUFFUyxFQUFFMjRCLEdBQUczNEIsR0FBR25CLE9BQU8rSCxFQUFFckgsRUFBRXdwQixVQUFVeHBCLEVBQUV3cEIsU0FBU3RDLGNBQWMsR0FBRyxXQUFXN2YsR0FBRyxVQUFVQSxHQUFHLFNBQVNySCxFQUFFcUYsS0FBSyxJQUFJa0osRUFBRXF3QixRQUFRLEdBQUdSLEdBQUdwK0IsR0FBRyxHQUFHNitCLEdBQUd0d0IsRUFBRTh3QixPQUFPLENBQUM5d0IsRUFBRTR3QixHQUFHLElBQUkvdUIsRUFBRTZ1QixRQUFRNTNCLEVBQUVySCxFQUFFd3BCLFdBQVcsVUFBVW5pQixFQUFFNmYsZ0JBQWdCLGFBQWFsbkIsRUFBRXFGLE1BQU0sVUFBVXJGLEVBQUVxRixRQUFRa0osRUFBRTZ3QixJQUFJLEdBQUc3d0IsSUFBSUEsRUFBRUEsRUFBRS9OLEVBQUVDLElBQUksT0FBTzg5QixHQUFHaHdCLEVBQUU5UixFQUFFQyxHQUFHMFQsR0FBR0EsRUFBRTVQLEVBQUVSLEVBQUVTLEdBQUcsU0FBU0QsSUFBSUEsRUFBRVIsRUFBRWtxQixnQkFBZ0IxcEIsRUFBRThwQixZQUFZLFdBQVd0cUIsRUFBRXFGLE1BQU1vbEIsR0FBR3pxQixFQUFFLFNBQVNBLEVBQUUzQyxTQUFTbWlDLEdBQUdyZ0IsR0FBRXNjLE9BQU8sQ0FBQ2dFLEtBQUssS0FBSzlDLE9BQU8sT0FDcmYrQyxHQUFHLENBQUNDLElBQUksU0FBU0MsUUFBUSxVQUFVQyxLQUFLLFVBQVVDLE1BQU0sWUFBWSxTQUFTQyxHQUFHdi9CLEdBQUcsSUFBSUMsRUFBRXFCLEtBQUt1dEIsWUFBWSxPQUFPNXVCLEVBQUV1L0IsaUJBQWlCdi9CLEVBQUV1L0IsaUJBQWlCeC9CLE1BQUlBLEVBQUVrL0IsR0FBR2wvQixPQUFNQyxFQUFFRCxHQUFNLFNBQVN5L0IsS0FBSyxPQUFPRixHQUNuTSxJQUFJRyxHQUFHLEVBQUVDLEdBQUcsRUFBRUMsSUFBRyxFQUFHQyxJQUFHLEVBQUdDLEdBQUdkLEdBQUcvRCxPQUFPLENBQUM4RSxRQUFRLEtBQUtDLFFBQVEsS0FBS0MsUUFBUSxLQUFLQyxRQUFRLEtBQUtDLE1BQU0sS0FBS0MsTUFBTSxLQUFLM0QsUUFBUSxLQUFLNEQsU0FBUyxLQUFLM0QsT0FBTyxLQUFLQyxRQUFRLEtBQUs2QyxpQkFBaUJDLEdBQUdhLE9BQU8sS0FBS0MsUUFBUSxLQUFLQyxjQUFjLFNBQVN4Z0MsR0FBRyxPQUFPQSxFQUFFd2dDLGdCQUFnQnhnQyxFQUFFeWdDLGNBQWN6Z0MsRUFBRXN1QixXQUFXdHVCLEVBQUUwZ0MsVUFBVTFnQyxFQUFFeWdDLGNBQWNFLFVBQVUsU0FBUzNnQyxHQUFHLEdBQUcsY0FBY0EsRUFBRSxPQUFPQSxFQUFFMmdDLFVBQVUsSUFBSTFnQyxFQUFFeS9CLEdBQWdCLE9BQWJBLEdBQUcxL0IsRUFBRSsvQixRQUFlSCxHQUFHLGNBQWM1L0IsRUFBRTZFLEtBQUs3RSxFQUFFKy9CLFFBQVE5L0IsRUFBRSxHQUFHMi9CLElBQUcsRUFBRyxJQUFJZ0IsVUFBVSxTQUFTNWdDLEdBQUcsR0FBRyxjQUFjQSxFQUFFLE9BQU9BLEVBQUU0Z0MsVUFDM2YsSUFBSTNnQyxFQUFFMC9CLEdBQWdCLE9BQWJBLEdBQUczL0IsRUFBRWdnQyxRQUFlSCxHQUFHLGNBQWM3L0IsRUFBRTZFLEtBQUs3RSxFQUFFZ2dDLFFBQVEvL0IsRUFBRSxHQUFHNC9CLElBQUcsRUFBRyxNQUFNZ0IsR0FBR2YsR0FBRzdFLE9BQU8sQ0FBQ3pLLFVBQVUsS0FBS3NRLE1BQU0sS0FBS0MsT0FBTyxLQUFLQyxTQUFTLEtBQUtDLG1CQUFtQixLQUFLQyxNQUFNLEtBQUtDLE1BQU0sS0FBS0MsTUFBTSxLQUFLQyxZQUFZLEtBQUtDLFVBQVUsT0FBT0MsR0FBRyxDQUFDQyxXQUFXLENBQUM3YyxpQkFBaUIsZUFBZUcsYUFBYSxDQUFDLFdBQVcsY0FBYzJjLFdBQVcsQ0FBQzljLGlCQUFpQixlQUFlRyxhQUFhLENBQUMsV0FBVyxjQUFjNGMsYUFBYSxDQUFDL2MsaUJBQWlCLGlCQUFpQkcsYUFBYSxDQUFDLGFBQWEsZ0JBQWdCNmMsYUFBYSxDQUFDaGQsaUJBQWlCLGlCQUNqaEJHLGFBQWEsQ0FBQyxhQUFhLGlCQUFpQjhjLEdBQUcsQ0FBQ3JkLFdBQVdnZCxHQUFHamQsY0FBYyxTQUFTdGtCLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsR0FBRyxJQUFJcUgsRUFBRSxjQUFjN0csR0FBRyxnQkFBZ0JBLEVBQUUrTixFQUFFLGFBQWEvTixHQUFHLGVBQWVBLEVBQUUsR0FBRzZHLEdBQUcsSUFBTyxHQUFGckgsS0FBUXZELEVBQUV1a0MsZUFBZXZrQyxFQUFFd2tDLGVBQWUxeUIsSUFBSWxILEVBQUUsT0FBTyxNQUFLQSxFQUFFM0ssRUFBRTRDLFNBQVM1QyxFQUFFQSxHQUFHMkssRUFBRTNLLEVBQUVpdUIsZUFBZXRqQixFQUFFZzdCLGFBQWFoN0IsRUFBRTRSLGFBQWEzWixPQUFVaVAsSUFBTUEsRUFBRTlOLEVBQWdELFFBQTlDQSxHQUFHQSxFQUFFaEUsRUFBRXVrQyxlQUFldmtDLEVBQUV5a0MsV0FBV3RSLEdBQUdudkIsR0FBRyxRQUE4QkEsSUFBVGd0QixHQUFHaHRCLElBQWEsSUFBSUEsRUFBRXVvQixLQUFLLElBQUl2b0IsRUFBRXVvQixPQUFJdm9CLEVBQUUsT0FBVzhOLEVBQUUsS0FBSyxHQUFHQSxJQUFJOU4sRUFBRSxPQUFPLEtBQUssR0FBRyxhQUFhRCxHQUFHLGNBQ3plQSxFQUFHLElBQUl5ZixFQUFFcWdCLEdBQU9qa0MsRUFBRTBsQyxHQUFHRSxXQUFlemxDLEVBQUV1bEMsR0FBR0MsV0FBZTlqQyxFQUFFLFlBQWdCLGVBQWVzQyxHQUFHLGdCQUFnQkEsSUFBRXlmLEVBQUVvaEIsR0FBR2hsQyxFQUFFMGxDLEdBQUdJLGFBQWEzbEMsRUFBRXVsQyxHQUFHRyxhQUFhaGtDLEVBQUUsV0FBZ00sR0FBdExzQyxFQUFFLE1BQU0rTixFQUFFbEgsRUFBRSt4QixHQUFHN3FCLEdBQUdsSCxFQUFFLE1BQU01RyxFQUFFNEcsRUFBRSt4QixHQUFHMzRCLElBQUdwRSxFQUFFNGpCLEVBQUU2YSxVQUFVeitCLEVBQUVrUyxFQUFFOVIsRUFBRUMsSUFBSzJJLEtBQUtuSCxFQUFFLFFBQVE3QixFQUFFcWEsT0FBT2xXLEVBQUVuRSxFQUFFMmtDLGNBQWMzNUIsR0FBRTVLLEVBQUV3akIsRUFBRTZhLFVBQVV0K0IsRUFBRWlFLEVBQUVoRSxFQUFFQyxJQUFLMkksS0FBS25ILEVBQUUsUUFBUXpCLEVBQUVpYSxPQUFPclAsRUFBRTVLLEVBQUV1a0MsY0FBY3hnQyxFQUFNdEMsRUFBRXVDLEdBQU4vRCxFQUFFNlIsSUFBWXJRLEVBQUVzQyxFQUFFLENBQWEsSUFBUmhFLEVBQUUwQixFQUFFcVEsRUFBRSxFQUFNL04sRUFBaEJ5ZixFQUFFdmpCLEVBQWtCOEQsRUFBRUEsRUFBRTg0QixHQUFHOTRCLEdBQUcrTixJQUFRLElBQUovTixFQUFFLEVBQU1DLEVBQUVqRSxFQUFFaUUsRUFBRUEsRUFBRTY0QixHQUFHNzRCLEdBQUdELElBQUksS0FBSyxFQUFFK04sRUFBRS9OLEdBQUd5ZixFQUFFcVosR0FBR3JaLEdBQUcxUixJQUFJLEtBQUssRUFBRS9OLEVBQUUrTixHQUFHL1IsRUFBRTg4QixHQUFHOThCLEdBQUdnRSxJQUFJLEtBQUsrTixLQUFLLENBQUMsR0FBRzBSLElBQUl6akIsR0FBR3lqQixJQUFJempCLEVBQUVreEIsVUFBVSxNQUFNbHRCLEVBQzNmeWYsRUFBRXFaLEdBQUdyWixHQUFHempCLEVBQUU4OEIsR0FBRzk4QixHQUFHeWpCLEVBQUUsVUFBVUEsRUFBRSxLQUFTLElBQUp6akIsRUFBRXlqQixFQUFNQSxFQUFFLEdBQUd2akIsR0FBR0EsSUFBSUYsSUFBcUIsUUFBakIrUixFQUFFN1IsRUFBRWd4QixZQUF1Qm5mLElBQUkvUixJQUFReWpCLEVBQUVqWCxLQUFLdE0sR0FBR0EsRUFBRTQ4QixHQUFHNThCLEdBQUcsSUFBSUEsRUFBRSxHQUFHd0IsR0FBR0EsSUFBSTFCLElBQXFCLFFBQWpCK1IsRUFBRXJRLEVBQUV3dkIsWUFBdUJuZixJQUFJL1IsSUFBUUUsRUFBRXNNLEtBQUs5SyxHQUFHQSxFQUFFbzdCLEdBQUdwN0IsR0FBRyxJQUFJQSxFQUFFLEVBQUVBLEVBQUUraEIsRUFBRXRmLE9BQU96QyxJQUFJMDdCLEdBQUczWixFQUFFL2hCLEdBQUcsVUFBVTdCLEdBQUcsSUFBSTZCLEVBQUV4QixFQUFFaUUsT0FBTyxFQUFFekMsS0FBSzA3QixHQUFHbDlCLEVBQUV3QixHQUFHLFdBQVd6QixHQUFHLE9BQU8sSUFBTyxHQUFGdUQsR0FBTSxDQUFDM0QsR0FBRyxDQUFDQSxFQUFFSSxLQUFxRSxJQUFJNmxDLEdBQUcsbUJBQW9CeGxDLE9BQU9zNkIsR0FBR3Q2QixPQUFPczZCLEdBQTVHLFNBQVk1MkIsRUFBRUMsR0FBRyxPQUFPRCxJQUFJQyxJQUFJLElBQUlELEdBQUcsRUFBRUEsR0FBSSxFQUFFQyxJQUFJRCxHQUFJQSxHQUFHQyxHQUFJQSxHQUFvRDhoQyxHQUFHemxDLE9BQU9rQixVQUFVQyxlQUM3YixTQUFTdWtDLEdBQUdoaUMsRUFBRUMsR0FBRyxHQUFHNmhDLEdBQUc5aEMsRUFBRUMsR0FBRyxPQUFNLEVBQUcsR0FBRyxpQkFBa0JELEdBQUcsT0FBT0EsR0FBRyxpQkFBa0JDLEdBQUcsT0FBT0EsRUFBRSxPQUFNLEVBQUcsSUFBSWhFLEVBQUVLLE9BQU9zRCxLQUFLSSxHQUFHOUQsRUFBRUksT0FBT3NELEtBQUtLLEdBQUcsR0FBR2hFLEVBQUVrRSxTQUFTakUsRUFBRWlFLE9BQU8sT0FBTSxFQUFHLElBQUlqRSxFQUFFLEVBQUVBLEVBQUVELEVBQUVrRSxPQUFPakUsSUFBSSxJQUFJNmxDLEdBQUdobUMsS0FBS2tFLEVBQUVoRSxFQUFFQyxNQUFNNGxDLEdBQUc5aEMsRUFBRS9ELEVBQUVDLElBQUkrRCxFQUFFaEUsRUFBRUMsS0FBSyxPQUFNLEVBQUcsT0FBTSxFQUNwUSxJQUFJK2xDLEdBQUdqZCxHQUFJLGlCQUFpQnBPLFVBQVUsSUFBSUEsU0FBUzJrQixhQUFhMkcsR0FBRyxDQUFDQyxPQUFPLENBQUMxZCx3QkFBd0IsQ0FBQ29OLFFBQVEsV0FBV0MsU0FBUyxtQkFBbUJoTixhQUFhLGlGQUFpRnhpQixNQUFNLE9BQU84L0IsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUMxUixTQUFTQyxHQUFHeGlDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUVnRSxFQUFFbkIsU0FBU21CLEVBQUVBLEVBQUUyVyxTQUFTLElBQUkzVyxFQUFFaEIsU0FBU2dCLEVBQUVBLEVBQUVrcUIsY0FBYyxPQUFHb1ksSUFBSSxNQUFNSCxJQUFJQSxLQUFLcEwsR0FBRy82QixHQUFVLE1BQVUsbUJBQUxBLEVBQUVtbUMsS0FBeUIzSyxHQUFHeDdCLEdBQUdBLEVBQUUsQ0FBQ3dtQyxNQUFNeG1DLEVBQUV5bUMsZUFBZTN0QixJQUFJOVksRUFBRTBtQyxjQUF1RjFtQyxFQUFFLENBQUMybUMsWUFBM0UzbUMsR0FBR0EsRUFBRWt1QixlQUFlbHVCLEVBQUVrdUIsY0FBYzBYLGFBQWEvaUMsUUFBUStqQyxnQkFBK0JELFdBQVdFLGFBQWE3bUMsRUFBRTZtQyxhQUFhQyxVQUFVOW1DLEVBQUU4bUMsVUFBVUMsWUFBWS9tQyxFQUFFK21DLGFBQXFCVixJQUFJTixHQUFHTSxHQUFHcm1DLEdBQUcsTUFBTXFtQyxHQUFHcm1DLEdBQUUrRCxFQUFFMmUsR0FBRTJiLFVBQVU0SCxHQUFHQyxPQUFPRSxHQUFHcmlDLEVBQUVDLElBQUs0RSxLQUFLLFNBQVM3RSxFQUFFa1csT0FBT2tzQixHQUFHOUksR0FBR3Q1QixHQUFHQSxJQUMxZCxJQUFJaWpDLEdBQUcsQ0FBQzFlLFdBQVcyZCxHQUFHNWQsY0FBYyxTQUFTdGtCLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsRUFBRXFILEdBQW1FLEtBQUtBLElBQXJFckgsRUFBRXFILElBQUkzSyxFQUFFNEMsU0FBUzVDLEVBQUVBLEVBQUUwYSxTQUFTLElBQUkxYSxFQUFFK0MsU0FBUy9DLEVBQUVBLEVBQUVpdUIsaUJBQTBCLENBQUNucUIsRUFBRSxDQUFDUixFQUFFd3RCLEdBQUd4dEIsR0FBR3FILEVBQUVnZSxFQUFHcWUsU0FBUyxJQUFJLElBQUluMUIsRUFBRSxFQUFFQSxFQUFFbEgsRUFBRTFHLE9BQU80TixJQUFJLElBQUl2TyxFQUFFcU4sSUFBSWhHLEVBQUVrSCxJQUFJLENBQUN2TyxHQUFFLEVBQUcsTUFBTVEsRUFBRVIsR0FBRSxFQUFHcUgsR0FBR3JILEVBQUUsR0FBR3FILEVBQUUsT0FBTyxLQUFzQixPQUFqQnJILEVBQUVTLEVBQUUyNEIsR0FBRzM0QixHQUFHbkIsT0FBY2tCLEdBQUcsSUFBSyxTQUFXNDlCLEdBQUdwK0IsSUFBSSxTQUFTQSxFQUFFazRCLG1CQUFnQjBLLEdBQUc1aUMsRUFBRTZpQyxHQUFHcGlDLEVBQUVxaUMsR0FBRyxNQUFLLE1BQU0sSUFBSyxPQUFPQSxHQUFHRCxHQUFHRCxHQUFHLEtBQUssTUFBTSxJQUFLLFlBQVlHLElBQUcsRUFBRyxNQUFNLElBQUssY0FBYyxJQUFLLFVBQVUsSUFBSyxVQUFVLE9BQU9BLElBQUcsRUFBR0MsR0FBR3ZtQyxFQUFFQyxHQUFHLElBQUssa0JBQWtCLEdBQUcrbEMsR0FBRyxNQUN4ZixJQUFLLFVBQVUsSUFBSyxRQUFRLE9BQU9PLEdBQUd2bUMsRUFBRUMsR0FBRyxPQUFPLE9BQU9pbkMsR0FBR3hrQixHQUFFc2MsT0FBTyxDQUFDbUksY0FBYyxLQUFLQyxZQUFZLEtBQUtDLGNBQWMsT0FBT0MsR0FBRzVrQixHQUFFc2MsT0FBTyxDQUFDdUksY0FBYyxTQUFTeGpDLEdBQUcsTUFBTSxrQkFBa0JBLEVBQUVBLEVBQUV3akMsY0FBYzFrQyxPQUFPMGtDLGlCQUFpQkMsR0FBR3pFLEdBQUcvRCxPQUFPLENBQUN1RixjQUFjLE9BQU8sU0FBU2tELEdBQUcxakMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFazhCLFFBQStFLE1BQXZFLGFBQWFsOEIsRUFBZ0IsS0FBYkEsRUFBRUEsRUFBRTJqQyxXQUFnQixLQUFLMWpDLElBQUlELEVBQUUsSUFBS0EsRUFBRUMsRUFBRSxLQUFLRCxJQUFJQSxFQUFFLElBQVcsSUFBSUEsR0FBRyxLQUFLQSxFQUFFQSxFQUFFLEVBQ3hZLElBQUk0akMsR0FBRyxDQUFDQyxJQUFJLFNBQVNDLFNBQVMsSUFBSUMsS0FBSyxZQUFZQyxHQUFHLFVBQVVDLE1BQU0sYUFBYUMsS0FBSyxZQUFZQyxJQUFJLFNBQVNDLElBQUksS0FBS0MsS0FBSyxjQUFjQyxLQUFLLGNBQWNDLE9BQU8sYUFBYUMsZ0JBQWdCLGdCQUFnQkMsR0FBRyxDQUFDQyxFQUFFLFlBQVlDLEVBQUUsTUFBTUMsR0FBRyxRQUFRQyxHQUFHLFFBQVFDLEdBQUcsUUFBUUMsR0FBRyxVQUFVQyxHQUFHLE1BQU1DLEdBQUcsUUFBUUMsR0FBRyxXQUFXQyxHQUFHLFNBQVNDLEdBQUcsSUFBSUMsR0FBRyxTQUFTQyxHQUFHLFdBQVdDLEdBQUcsTUFBTUMsR0FBRyxPQUFPQyxHQUFHLFlBQVlDLEdBQUcsVUFBVUMsR0FBRyxhQUFhQyxHQUFHLFlBQVlDLEdBQUcsU0FBU0MsR0FBRyxTQUFTQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQ2hmQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxLQUFLQyxJQUFJLEtBQUtDLElBQUksS0FBS0MsSUFBSSxNQUFNQyxJQUFJLE1BQU1DLElBQUksTUFBTUMsSUFBSSxVQUFVQyxJQUFJLGFBQWFDLElBQUksUUFBUUMsR0FBRzlILEdBQUcvRCxPQUFPLENBQUM5OUIsSUFBSSxTQUFTNkMsR0FBRyxHQUFHQSxFQUFFN0MsSUFBSSxDQUFDLElBQUk4QyxFQUFFMmpDLEdBQUc1akMsRUFBRTdDLE1BQU02QyxFQUFFN0MsSUFBSSxHQUFHLGlCQUFpQjhDLEVBQUUsT0FBT0EsRUFBRSxNQUFNLGFBQWFELEVBQUU2RSxLQUFjLE1BQVI3RSxFQUFFMGpDLEdBQUcxakMsSUFBVSxRQUFROE4sT0FBT2dJLGFBQWE5VixHQUFJLFlBQVlBLEVBQUU2RSxNQUFNLFVBQVU3RSxFQUFFNkUsS0FBSzQvQixHQUFHemtDLEVBQUVrOEIsVUFBVSxlQUFlLElBQUkzRSxTQUFTLEtBQUtrRixRQUFRLEtBQUs0RCxTQUFTLEtBQUszRCxPQUFPLEtBQUtDLFFBQVEsS0FBS3JwQixPQUFPLEtBQUtncEIsT0FBTyxLQUFLa0QsaUJBQWlCQyxHQUFHa0UsU0FBUyxTQUFTM2pDLEdBQUcsTUFBTSxhQUM5ZUEsRUFBRTZFLEtBQUs2K0IsR0FBRzFqQyxHQUFHLEdBQUdrOEIsUUFBUSxTQUFTbDhCLEdBQUcsTUFBTSxZQUFZQSxFQUFFNkUsTUFBTSxVQUFVN0UsRUFBRTZFLEtBQUs3RSxFQUFFazhCLFFBQVEsR0FBR0ssTUFBTSxTQUFTdjhCLEdBQUcsTUFBTSxhQUFhQSxFQUFFNkUsS0FBSzYrQixHQUFHMWpDLEdBQUcsWUFBWUEsRUFBRTZFLE1BQU0sVUFBVTdFLEVBQUU2RSxLQUFLN0UsRUFBRWs4QixRQUFRLEtBQUs2SyxHQUFHakgsR0FBRzdFLE9BQU8sQ0FBQytMLGFBQWEsT0FBT0MsR0FBR2pJLEdBQUcvRCxPQUFPLENBQUNpTSxRQUFRLEtBQUtDLGNBQWMsS0FBS0MsZUFBZSxLQUFLMUssT0FBTyxLQUFLQyxRQUFRLEtBQUtGLFFBQVEsS0FBSzRELFNBQVMsS0FBS2IsaUJBQWlCQyxLQUFLNEgsR0FBRzFvQixHQUFFc2MsT0FBTyxDQUFDelUsYUFBYSxLQUFLNmMsWUFBWSxLQUFLQyxjQUFjLE9BQU9nRSxHQUFHeEgsR0FBRzdFLE9BQU8sQ0FBQ3NNLE9BQU8sU0FBU3ZuQyxHQUFHLE1BQU0sV0FBV0EsRUFBRUEsRUFBRXVuQyxPQUFPLGdCQUNsZnZuQyxHQUFHQSxFQUFFd25DLFlBQVksR0FBR0MsT0FBTyxTQUFTem5DLEdBQUcsTUFBTSxXQUFXQSxFQUFFQSxFQUFFeW5DLE9BQU8sZ0JBQWdCem5DLEdBQUdBLEVBQUUwbkMsWUFBWSxlQUFlMW5DLEdBQUdBLEVBQUUybkMsV0FBVyxHQUFHQyxPQUFPLEtBQUtDLFVBQVUsT0FBT0MsR0FBRyxDQUFDdmpCLFdBQVdpTixHQUFHbE4sY0FBYyxTQUFTdGtCLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLElBQUlzRCxFQUFFaXlCLEdBQUdoMUIsSUFBSXVELEdBQUcsSUFBSVIsRUFBRSxPQUFPLEtBQUssT0FBT1EsR0FBRyxJQUFLLFdBQVcsR0FBRyxJQUFJMGpDLEdBQUd6bkMsR0FBRyxPQUFPLEtBQUssSUFBSyxVQUFVLElBQUssUUFBUStELEVBQUU4bUMsR0FBRyxNQUFNLElBQUssT0FBTyxJQUFLLFFBQVE5bUMsRUFBRXlqQyxHQUFHLE1BQU0sSUFBSyxRQUFRLEdBQUcsSUFBSXhuQyxFQUFFcWtDLE9BQU8sT0FBTyxLQUFLLElBQUssV0FBVyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssWUFBWSxJQUFLLFVBQVUsSUFBSyxXQUFXLElBQUssWUFBWSxJQUFLLGNBQWN0Z0MsRUFDbmlCOC9CLEdBQUcsTUFBTSxJQUFLLE9BQU8sSUFBSyxVQUFVLElBQUssWUFBWSxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssV0FBVyxJQUFLLFlBQVksSUFBSyxPQUFPOS9CLEVBQUUrbUMsR0FBRyxNQUFNLElBQUssY0FBYyxJQUFLLFdBQVcsSUFBSyxZQUFZLElBQUssYUFBYS9tQyxFQUFFaW5DLEdBQUcsTUFBTSxLQUFLdmEsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUc1c0IsRUFBRW1qQyxHQUFHLE1BQU0sS0FBS3RXLEdBQUc3c0IsRUFBRXFuQyxHQUFHLE1BQU0sSUFBSyxTQUFTcm5DLEVBQUVnL0IsR0FBRyxNQUFNLElBQUssUUFBUWgvQixFQUFFc25DLEdBQUcsTUFBTSxJQUFLLE9BQU8sSUFBSyxNQUFNLElBQUssUUFBUXRuQyxFQUFFdWpDLEdBQUcsTUFBTSxJQUFLLG9CQUFvQixJQUFLLHFCQUFxQixJQUFLLGdCQUFnQixJQUFLLGNBQWMsSUFBSyxjQUFjLElBQUssYUFBYSxJQUFLLGNBQWMsSUFBSyxZQUFZdmpDLEVBQ3poQjZnQyxHQUFHLE1BQU0sUUFBUTdnQyxFQUFFMmUsR0FBK0IsT0FBTjJhLEdBQXZCcjVCLEVBQUVELEVBQUVzNkIsVUFBVTk2QixFQUFFUyxFQUFFaEUsRUFBRUMsSUFBZ0IrRCxJQUFJLEdBQUdpa0IsRUFBRyxNQUFNN1osTUFBTXNULEVBQUUsTUFBTXVHLEVBQUd4a0IsTUFBTWxDLFVBQVU2SixNQUFNdEwsS0FBSywwSEFBMEh1RyxNQUFNLE1BQU04aEIsSUFBZVIsRUFBR2lWLEdBQUdoVixFQUFUNk0sR0FBZTVNLEVBQUc4VSxHQUFHN1QsRUFBRyxDQUFDZ2pCLGtCQUFrQkQsR0FBR0Usc0JBQXNCcEcsR0FBR3FHLGtCQUFrQm5KLEdBQUdvSixrQkFBa0JqRixHQUFHa0YsdUJBQXVCOUwsS0FBSyxJQUFJK0wsR0FBRyxHQUFHQyxJQUFJLEVBQUUsU0FBU3pwQixHQUFFNWUsR0FBRyxFQUFFcW9DLEtBQUtyb0MsRUFBRWtmLFFBQVFrcEIsR0FBR0MsSUFBSUQsR0FBR0MsSUFBSSxLQUFLQSxNQUN0ZCxTQUFTdHBCLEdBQUUvZSxFQUFFQyxHQUFHb29DLEtBQUtELEdBQUdDLElBQUlyb0MsRUFBRWtmLFFBQVFsZixFQUFFa2YsUUFBUWpmLEVBQUUsSUFBSXFvQyxHQUFHLEdBQUdycEIsR0FBRSxDQUFDQyxRQUFRb3BCLElBQUlucEIsR0FBRSxDQUFDRCxTQUFRLEdBQUlxcEIsR0FBR0QsR0FBRyxTQUFTRSxHQUFHeG9DLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUrRCxFQUFFNkUsS0FBS1IsYUFBYSxJQUFJcEksRUFBRSxPQUFPcXNDLEdBQUcsSUFBSXBzQyxFQUFFOEQsRUFBRXFsQixVQUFVLEdBQUducEIsR0FBR0EsRUFBRXVzQyw4Q0FBOEN4b0MsRUFBRSxPQUFPL0QsRUFBRXdzQywwQ0FBMEMsSUFBUzdoQyxFQUFMckgsRUFBRSxHQUFLLElBQUlxSCxLQUFLNUssRUFBRXVELEVBQUVxSCxHQUFHNUcsRUFBRTRHLEdBQW9ILE9BQWpIM0ssS0FBSThELEVBQUVBLEVBQUVxbEIsV0FBWW9qQiw0Q0FBNEN4b0MsRUFBRUQsRUFBRTBvQywwQ0FBMENscEMsR0FBVUEsRUFBRSxTQUFTNGYsR0FBRXBmLEdBQXlCLE9BQU8sT0FBN0JBLEVBQUVBLEVBQUVtRSxtQkFDcGMsU0FBU3drQyxLQUFLL3BCLEdBQUVPLElBQUdQLEdBQUVLLElBQUcsU0FBUzJwQixHQUFHNW9DLEVBQUVDLEVBQUVoRSxHQUFHLEdBQUdnakIsR0FBRUMsVUFBVW9wQixHQUFHLE1BQU1qK0IsTUFBTXNULEVBQUUsTUFBTW9CLEdBQUVFLEdBQUVoZixHQUFHOGUsR0FBRUksR0FBRWxqQixHQUFHLFNBQVM0c0MsR0FBRzdvQyxFQUFFQyxFQUFFaEUsR0FBRyxJQUFJQyxFQUFFOEQsRUFBRXFsQixVQUFnQyxHQUF0QnJsQixFQUFFQyxFQUFFa0Usa0JBQXFCLG1CQUFvQmpJLEVBQUUwVSxnQkFBZ0IsT0FBTzNVLEVBQXdCLElBQUksSUFBSXVELEtBQTlCdEQsRUFBRUEsRUFBRTBVLGtCQUFpQyxLQUFLcFIsS0FBS1EsR0FBRyxNQUFNcUssTUFBTXNULEVBQUUsSUFBSTJLLEdBQUdyb0IsSUFBSSxVQUFVVCxJQUFJLE9BQU9uQyxFQUFFLEdBQUdwQixFQUFFLEdBQUdDLEdBQUcsU0FBUzRzQyxHQUFHOW9DLEdBQXlHLE9BQXRHQSxHQUFHQSxFQUFFQSxFQUFFcWxCLFlBQVlybEIsRUFBRStvQywyQ0FBMkNULEdBQUdDLEdBQUd0cEIsR0FBRUMsUUFBUUgsR0FBRUUsR0FBRWpmLEdBQUcrZSxHQUFFSSxHQUFFQSxHQUFFRCxVQUFlLEVBQ3BiLFNBQVM4cEIsR0FBR2hwQyxFQUFFQyxFQUFFaEUsR0FBRyxJQUFJQyxFQUFFOEQsRUFBRXFsQixVQUFVLElBQUlucEIsRUFBRSxNQUFNbU8sTUFBTXNULEVBQUUsTUFBTTFoQixHQUFHK0QsRUFBRTZvQyxHQUFHN29DLEVBQUVDLEVBQUVzb0MsSUFBSXJzQyxFQUFFNnNDLDBDQUEwQy9vQyxFQUFFNGUsR0FBRU8sSUFBR1AsR0FBRUssSUFBR0YsR0FBRUUsR0FBRWpmLElBQUk0ZSxHQUFFTyxJQUFHSixHQUFFSSxHQUFFbGpCLEdBQ3hKLElBQUlndEMsR0FBR3ZzQyxFQUFFazBCLHlCQUF5QnNZLEdBQUd4c0MsRUFBRTIwQiwwQkFBMEI4WCxHQUFHenNDLEVBQUUwc0Msd0JBQXdCQyxHQUFHM3NDLEVBQUU0c0Msc0JBQXNCQyxHQUFHN3NDLEVBQUU4c0MsYUFBYUMsR0FBRy9zQyxFQUFFZ3RDLGlDQUFpQ0MsR0FBR2p0QyxFQUFFa3RDLDJCQUEyQkMsR0FBR250QyxFQUFFeTFCLDhCQUE4QjJYLEdBQUdwdEMsRUFBRTQwQix3QkFBd0J5WSxHQUFHcnRDLEVBQUVzdEMscUJBQXFCQyxHQUFHdnRDLEVBQUV3dEMsc0JBQXNCQyxHQUFHLEdBQUdDLEdBQUcxdEMsRUFBRTJ0QyxxQkFBcUJDLFFBQUcsSUFBU2pCLEdBQUdBLEdBQUcsYUFBYWtCLEdBQUcsS0FBS0MsR0FBRyxLQUFLQyxJQUFHLEVBQUdDLEdBQUduQixLQUFLb0IsR0FBRyxJQUFJRCxHQUFHbkIsR0FBRyxXQUFXLE9BQU9BLEtBQUttQixJQUN2YyxTQUFTRSxLQUFLLE9BQU9uQixNQUFNLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLEtBQUtDLEdBQUcsT0FBTyxHQUFHLEtBQUtDLEdBQUcsT0FBTyxHQUFHLEtBQUtFLEdBQUcsT0FBTyxHQUFHLFFBQVEsTUFBTTUvQixNQUFNc1QsRUFBRSxPQUFRLFNBQVNrdEIsR0FBRzdxQyxHQUFHLE9BQU9BLEdBQUcsS0FBSyxHQUFHLE9BQU8ycEMsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0MsR0FBRyxLQUFLLEdBQUcsT0FBT0UsR0FBRyxRQUFRLE1BQU01L0IsTUFBTXNULEVBQUUsT0FBUSxTQUFTbXRCLEdBQUc5cUMsRUFBRUMsR0FBVyxPQUFSRCxFQUFFNnFDLEdBQUc3cUMsR0FBVWlwQyxHQUFHanBDLEVBQUVDLEdBQUcsU0FBUzhxQyxHQUFHL3FDLEVBQUVDLEVBQUVoRSxHQUFXLE9BQVIrRCxFQUFFNnFDLEdBQUc3cUMsR0FBVWtwQyxHQUFHbHBDLEVBQUVDLEVBQUVoRSxHQUFHLFNBQVMrdUMsR0FBR2hyQyxHQUE4QyxPQUEzQyxPQUFPdXFDLElBQUlBLEdBQUcsQ0FBQ3ZxQyxHQUFHd3FDLEdBQUd0QixHQUFHUyxHQUFHc0IsS0FBS1YsR0FBRy9oQyxLQUFLeEksR0FBVW1xQyxHQUFHLFNBQVNlLEtBQUssR0FBRyxPQUFPVixHQUFHLENBQUMsSUFBSXhxQyxFQUFFd3FDLEdBQUdBLEdBQUcsS0FBS3JCLEdBQUducEMsR0FBR2lyQyxLQUMvZSxTQUFTQSxLQUFLLElBQUlSLElBQUksT0FBT0YsR0FBRyxDQUFDRSxJQUFHLEVBQUcsSUFBSXpxQyxFQUFFLEVBQUUsSUFBSSxJQUFJQyxFQUFFc3FDLEdBQUdPLEdBQUcsSUFBRyxXQUFXLEtBQUs5cUMsRUFBRUMsRUFBRUUsT0FBT0gsSUFBSSxDQUFDLElBQUkvRCxFQUFFZ0UsRUFBRUQsR0FBRyxHQUFHL0QsRUFBRUEsR0FBRSxTQUFVLE9BQU9BLE9BQU1zdUMsR0FBRyxLQUFLLE1BQU10dUMsR0FBRyxNQUFNLE9BQU9zdUMsS0FBS0EsR0FBR0EsR0FBR2xqQyxNQUFNckgsRUFBRSxJQUFJa3BDLEdBQUdTLEdBQUd1QixJQUFJanZDLEVBQTNKLFFBQXNLd3VDLElBQUcsSUFBSyxTQUFTVSxHQUFHbnJDLEVBQUVDLEVBQUVoRSxHQUFTLE9BQU8sWUFBc0MsSUFBeEIsV0FBVytELEVBQUVDLEVBQUUsS0FBMUNoRSxHQUFHLElBQTZDLElBQU1BLEVBQUUsU0FBU212QyxHQUFHcHJDLEVBQUVDLEdBQUcsR0FBR0QsR0FBR0EsRUFBRXNFLGFBQXlDLElBQUksSUFBSXJJLEtBQW5DZ0UsRUFBRTVDLEVBQUUsR0FBRzRDLEdBQUdELEVBQUVBLEVBQUVzRSxrQkFBNEIsSUFBU3JFLEVBQUVoRSxLQUFLZ0UsRUFBRWhFLEdBQUcrRCxFQUFFL0QsSUFBSSxPQUFPZ0UsRUFBRSxJQUFJb3JDLEdBQUcsQ0FBQ25zQixRQUFRLE1BQU1vc0IsR0FBRyxLQUFLQyxHQUFHLEtBQUtDLEdBQUcsS0FBSyxTQUFTQyxLQUFLRCxHQUFHRCxHQUFHRCxHQUFHLEtBQ2xlLFNBQVNJLEdBQUcxckMsR0FBRyxJQUFJQyxFQUFFb3JDLEdBQUduc0IsUUFBUU4sR0FBRXlzQixJQUFJcnJDLEVBQUU2RSxLQUFLb2QsU0FBU0gsY0FBYzdoQixFQUFFLFNBQVMwckMsR0FBRzNyQyxFQUFFQyxHQUFHLEtBQUssT0FBT0QsR0FBRyxDQUFDLElBQUkvRCxFQUFFK0QsRUFBRWt0QixVQUFVLEdBQUdsdEIsRUFBRTRyQyxvQkFBb0IzckMsRUFBRUQsRUFBRTRyQyxvQkFBb0IzckMsRUFBRSxPQUFPaEUsR0FBR0EsRUFBRTJ2QyxvQkFBb0IzckMsSUFBSWhFLEVBQUUydkMsb0JBQW9CM3JDLE9BQVEsTUFBRyxPQUFPaEUsR0FBR0EsRUFBRTJ2QyxvQkFBb0IzckMsR0FBK0IsTUFBN0JoRSxFQUFFMnZDLG9CQUFvQjNyQyxFQUFhRCxFQUFFQSxFQUFFNm9CLFFBQVEsU0FBU2dqQixHQUFHN3JDLEVBQUVDLEdBQUdxckMsR0FBR3RyQyxFQUFFd3JDLEdBQUdELEdBQUcsS0FBc0IsUUFBakJ2ckMsRUFBRUEsRUFBRThrQixlQUF1QixPQUFPOWtCLEVBQUU4ckMsZUFBZTlyQyxFQUFFK3JDLGdCQUFnQjlyQyxJQUFJK3JDLElBQUcsR0FBSWhzQyxFQUFFOHJDLGFBQWEsTUFDbGMsU0FBU0csR0FBR2pzQyxFQUFFQyxHQUFHLEdBQUd1ckMsS0FBS3hyQyxJQUFHLElBQUtDLEdBQUcsSUFBSUEsRUFBbUcsR0FBN0YsaUJBQWtCQSxHQUFHLGFBQWFBLElBQUV1ckMsR0FBR3hyQyxFQUFFQyxFQUFFLFlBQVdBLEVBQUUsQ0FBQytSLFFBQVFoUyxFQUFFNFIsYUFBYTNSLEVBQUVtSSxLQUFLLE1BQVMsT0FBT21qQyxHQUFHLENBQUMsR0FBRyxPQUFPRCxHQUFHLE1BQU1qaEMsTUFBTXNULEVBQUUsTUFBTTR0QixHQUFHdHJDLEVBQUVxckMsR0FBR3htQixhQUFhLENBQUNpbkIsZUFBZSxFQUFFRCxhQUFhN3JDLEVBQUVpc0MsV0FBVyxXQUFXWCxHQUFHQSxHQUFHbmpDLEtBQUtuSSxFQUFFLE9BQU9ELEVBQUU4aEIsY0FBYyxJQUFJcXFCLElBQUcsRUFBRyxTQUFTQyxHQUFHcHNDLEdBQUdBLEVBQUVxc0MsWUFBWSxDQUFDQyxVQUFVdHNDLEVBQUVxdEIsY0FBY2tmLFVBQVUsS0FBSzMvQixPQUFPLENBQUM0L0IsUUFBUSxNQUFNQyxRQUFRLE1BQ3paLFNBQVNDLEdBQUcxc0MsRUFBRUMsR0FBR0QsRUFBRUEsRUFBRXFzQyxZQUFZcHNDLEVBQUVvc0MsY0FBY3JzQyxJQUFJQyxFQUFFb3NDLFlBQVksQ0FBQ0MsVUFBVXRzQyxFQUFFc3NDLFVBQVVDLFVBQVV2c0MsRUFBRXVzQyxVQUFVMy9CLE9BQU81TSxFQUFFNE0sT0FBTzYvQixRQUFRenNDLEVBQUV5c0MsVUFBVSxTQUFTRSxHQUFHM3NDLEVBQUVDLEdBQW9GLE9BQWpGRCxFQUFFLENBQUMrckMsZUFBZS9yQyxFQUFFNHNDLGVBQWUzc0MsRUFBRXVvQixJQUFJLEVBQUVxa0IsUUFBUSxLQUFLeGpDLFNBQVMsS0FBS2pCLEtBQUssT0FBZUEsS0FBS3BJLEVBQUUsU0FBUzhzQyxHQUFHOXNDLEVBQUVDLEdBQW1CLEdBQUcsUUFBbkJELEVBQUVBLEVBQUVxc0MsYUFBd0IsQ0FBWSxJQUFJcHdDLEdBQWYrRCxFQUFFQSxFQUFFNE0sUUFBZTQvQixRQUFRLE9BQU92d0MsRUFBRWdFLEVBQUVtSSxLQUFLbkksR0FBR0EsRUFBRW1JLEtBQUtuTSxFQUFFbU0sS0FBS25NLEVBQUVtTSxLQUFLbkksR0FBR0QsRUFBRXdzQyxRQUFRdnNDLEdBQ3BZLFNBQVM4c0MsR0FBRy9zQyxFQUFFQyxHQUFHLElBQUloRSxFQUFFK0QsRUFBRWt0QixVQUFVLE9BQU9qeEIsR0FBR3l3QyxHQUFHendDLEVBQUUrRCxHQUFpQyxRQUFkL0QsR0FBaEIrRCxFQUFFQSxFQUFFcXNDLGFBQWdCRSxZQUFvQnZzQyxFQUFFdXNDLFVBQVV0c0MsRUFBRW1JLEtBQUtuSSxFQUFFQSxFQUFFbUksS0FBS25JLElBQUlBLEVBQUVtSSxLQUFLbk0sRUFBRW1NLEtBQUtuTSxFQUFFbU0sS0FBS25JLEdBQ2xKLFNBQVMrc0MsR0FBR2h0QyxFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRyxJQUFJc0QsRUFBRVEsRUFBRXFzQyxZQUFZRixJQUFHLEVBQUcsSUFBSXRsQyxFQUFFckgsRUFBRStzQyxVQUFVeCtCLEVBQUV2TyxFQUFFb04sT0FBTzQvQixRQUFRLEdBQUcsT0FBT3orQixFQUFFLENBQUMsR0FBRyxPQUFPbEgsRUFBRSxDQUFDLElBQUkrSSxFQUFFL0ksRUFBRXVCLEtBQUt2QixFQUFFdUIsS0FBSzJGLEVBQUUzRixLQUFLMkYsRUFBRTNGLEtBQUt3SCxFQUFFL0ksRUFBRWtILEVBQUV2TyxFQUFFb04sT0FBTzQvQixRQUFRLEtBQW1CLFFBQWQ1OEIsRUFBRTVQLEVBQUVrdEIsYUFBcUMsUUFBaEJ0ZCxFQUFFQSxFQUFFeThCLGVBQXVCejhCLEVBQUUyOEIsVUFBVXgrQixJQUFJLEdBQUcsT0FBT2xILEVBQUUsQ0FBQytJLEVBQUUvSSxFQUFFdUIsS0FBSyxJQUFJcVgsRUFBRWpnQixFQUFFOHNDLFVBQVV6d0MsRUFBRSxFQUFFRyxFQUFFLEtBQUswQixFQUFFLEtBQUt1VCxFQUFFLEtBQUssR0FBRyxPQUFPckIsRUFBVyxJQUFSLElBQUlrTyxFQUFFbE8sSUFBSSxDQUFvQixJQUFuQjdCLEVBQUUrUCxFQUFFaXVCLGdCQUFvQjd2QyxFQUFFLENBQUMsSUFBSSt3QyxFQUFHLENBQUNsQixlQUFlanVCLEVBQUVpdUIsZUFBZWEsZUFBZTl1QixFQUFFOHVCLGVBQWVwa0IsSUFBSTFLLEVBQUUwSyxJQUFJcWtCLFFBQVEvdUIsRUFBRSt1QixRQUFReGpDLFNBQVN5VSxFQUFFelUsU0FBU2pCLEtBQUssTUFBTSxPQUFPNkksR0FBR3ZULEVBQUV1VCxFQUNuZmc4QixFQUFHanhDLEVBQUV5akIsR0FBR3hPLEVBQUVBLEVBQUU3SSxLQUFLNmtDLEVBQUdsL0IsRUFBRWxTLElBQUlBLEVBQUVrUyxPQUFPLENBQUMsT0FBT2tELElBQUlBLEVBQUVBLEVBQUU3SSxLQUFLLENBQUMyakMsZUFBZSxXQUFXYSxlQUFlOXVCLEVBQUU4dUIsZUFBZXBrQixJQUFJMUssRUFBRTBLLElBQUlxa0IsUUFBUS91QixFQUFFK3VCLFFBQVF4akMsU0FBU3lVLEVBQUV6VSxTQUFTakIsS0FBSyxPQUFPOGtDLEdBQUduL0IsRUFBRStQLEVBQUU4dUIsZ0JBQWdCNXNDLEVBQUUsQ0FBQyxJQUFJbWUsRUFBRW5lLEVBQUVsRCxFQUFFZ2hCLEVBQVcsT0FBVC9QLEVBQUU5TixFQUFFZ3RDLEVBQUdoeEMsRUFBU2EsRUFBRTByQixLQUFLLEtBQUssRUFBYyxHQUFHLG1CQUFmckssRUFBRXJoQixFQUFFK3ZDLFNBQWlDLENBQUNwdEIsRUFBRXRCLEVBQUVwaUIsS0FBS2t4QyxFQUFHeHRCLEVBQUUxUixHQUFHLE1BQU0vTixFQUFFeWYsRUFBRXRCLEVBQUUsTUFBTW5lLEVBQUUsS0FBSyxFQUFFbWUsRUFBRWdQLFdBQXVCLEtBQWJoUCxFQUFFZ1AsVUFBZ0IsR0FBRyxLQUFLLEVBQXVELEdBQUcsT0FBNUNwZixFQUFFLG1CQUFkb1EsRUFBRXJoQixFQUFFK3ZDLFNBQWdDMXVCLEVBQUVwaUIsS0FBS2t4QyxFQUFHeHRCLEVBQUUxUixHQUFHb1EsR0FBMEIsTUFBTW5lLEVBQUV5ZixFQUFFcGlCLEVBQUUsR0FBR29pQixFQUFFMVIsR0FBRyxNQUFNL04sRUFBRSxLQUFLLEVBQUVtc0MsSUFBRyxHQUFJLE9BQU9ydUIsRUFBRXpVLFdBQzVlckosRUFBRW10QixXQUFXLEdBQWUsUUFBWnBmLEVBQUV2TyxFQUFFaXRDLFNBQWlCanRDLEVBQUVpdEMsUUFBUSxDQUFDM3VCLEdBQUcvUCxFQUFFdkYsS0FBS3NWLElBQWEsR0FBRyxRQUFaQSxFQUFFQSxFQUFFMVYsT0FBa0IwVixJQUFJbE8sRUFBRSxJQUFzQixRQUFuQjdCLEVBQUV2TyxFQUFFb04sT0FBTzQvQixTQUFpQixNQUFXMXVCLEVBQUVqWCxFQUFFdUIsS0FBSzJGLEVBQUUzRixLQUFLMkYsRUFBRTNGLEtBQUt3SCxFQUFFcFEsRUFBRStzQyxVQUFVMWxDLEVBQUVrSCxFQUFFdk8sRUFBRW9OLE9BQU80L0IsUUFBUSxNQUFjLE9BQU92N0IsRUFBRWpWLEVBQUV5akIsRUFBRXhPLEVBQUU3SSxLQUFLMUssRUFBRThCLEVBQUU4c0MsVUFBVXR3QyxFQUFFd0QsRUFBRStzQyxVQUFVdDdCLEVBQUVrOEIsR0FBR3R4QyxHQUFHbUUsRUFBRStyQyxlQUFlbHdDLEVBQUVtRSxFQUFFcXRCLGNBQWM1TixHQUN4UyxTQUFTMnRCLEdBQUdwdEMsRUFBRUMsRUFBRWhFLEdBQThCLEdBQTNCK0QsRUFBRUMsRUFBRXdzQyxRQUFReHNDLEVBQUV3c0MsUUFBUSxLQUFRLE9BQU96c0MsRUFBRSxJQUFJQyxFQUFFLEVBQUVBLEVBQUVELEVBQUVHLE9BQU9GLElBQUksQ0FBQyxJQUFJL0QsRUFBRThELEVBQUVDLEdBQUdULEVBQUV0RCxFQUFFbU4sU0FBUyxHQUFHLE9BQU83SixFQUFFLENBQXlCLEdBQXhCdEQsRUFBRW1OLFNBQVMsS0FBS25OLEVBQUVzRCxFQUFFQSxFQUFFdkQsRUFBSyxtQkFBb0JDLEVBQUUsTUFBTW1PLE1BQU1zVCxFQUFFLElBQUl6aEIsSUFBSUEsRUFBRUgsS0FBS3lELEtBQUssSUFBSTZ0QyxHQUFHdm1CLEVBQUcvRix3QkFBd0J1c0IsSUFBSSxJQUFJOXNCLEVBQUdyUCxXQUFXc04sS0FBSyxTQUFTOHVCLEdBQUd2dEMsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQThCRCxFQUFFLE9BQVhBLEVBQUVBLEVBQUVDLEVBQXRCK0QsRUFBRUQsRUFBRXF0QixnQkFBOENwdEIsRUFBRTVDLEVBQUUsR0FBRzRDLEVBQUVoRSxHQUFHK0QsRUFBRXF0QixjQUFjcHhCLEVBQUUsSUFBSStELEVBQUUrckMsaUJBQWlCL3JDLEVBQUVxc0MsWUFBWUMsVUFBVXJ3QyxHQUMzWixJQUFJdXhDLEdBQUcsQ0FBQ3B2QixVQUFVLFNBQVNwZSxHQUFHLFNBQU9BLEVBQUVBLEVBQUV5dEMsc0JBQXFCeGdCLEdBQUdqdEIsS0FBS0EsR0FBTXVlLGdCQUFnQixTQUFTdmUsRUFBRUMsRUFBRWhFLEdBQUcrRCxFQUFFQSxFQUFFeXRDLG9CQUFvQixJQUFJdnhDLEVBQUV3eEMsS0FBS2x1QyxFQUFFNnRDLEdBQUdyc0IsVUFBcUJ4aEIsRUFBRW10QyxHQUFkendDLEVBQUV5eEMsR0FBR3p4QyxFQUFFOEQsRUFBRVIsR0FBVUEsSUFBS3F0QyxRQUFRNXNDLEVBQUUsTUFBU2hFLElBQWN1RCxFQUFFNkosU0FBU3BOLEdBQUc2d0MsR0FBRzlzQyxFQUFFUixHQUFHb3VDLEdBQUc1dEMsRUFBRTlELElBQUlvaUIsb0JBQW9CLFNBQVN0ZSxFQUFFQyxFQUFFaEUsR0FBRytELEVBQUVBLEVBQUV5dEMsb0JBQW9CLElBQUl2eEMsRUFBRXd4QyxLQUFLbHVDLEVBQUU2dEMsR0FBR3JzQixVQUFxQnhoQixFQUFFbXRDLEdBQWR6d0MsRUFBRXl4QyxHQUFHenhDLEVBQUU4RCxFQUFFUixHQUFVQSxJQUFLZ3BCLElBQUksRUFBRWhwQixFQUFFcXRDLFFBQVE1c0MsRUFBRSxNQUFTaEUsSUFBY3VELEVBQUU2SixTQUFTcE4sR0FBRzZ3QyxHQUFHOXNDLEVBQUVSLEdBQUdvdUMsR0FBRzV0QyxFQUFFOUQsSUFBSW1pQixtQkFBbUIsU0FBU3JlLEVBQUVDLEdBQUdELEVBQUVBLEVBQUV5dEMsb0JBQW9CLElBQUl4eEMsRUFBRXl4QyxLQUFLeHhDLEVBQUVteEMsR0FBR3JzQixVQUN2ZTlrQixFQUFFeXdDLEdBQWQxd0MsRUFBRTB4QyxHQUFHMXhDLEVBQUUrRCxFQUFFOUQsR0FBVUEsSUFBS3NzQixJQUFJLEVBQUUsTUFBU3ZvQixJQUFjL0QsRUFBRW1OLFNBQVNwSixHQUFHNnNDLEdBQUc5c0MsRUFBRTlELEdBQUcweEMsR0FBRzV0QyxFQUFFL0QsS0FBSyxTQUFTNHhDLEdBQUc3dEMsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUVzRCxFQUFFcUgsRUFBRWtILEdBQWlCLE1BQU0sbUJBQXBCL04sRUFBRUEsRUFBRXFsQixXQUFzQ3lvQixzQkFBc0I5dEMsRUFBRTh0QyxzQkFBc0I1eEMsRUFBRTJLLEVBQUVrSCxJQUFHOU4sRUFBRXpDLFlBQVd5QyxFQUFFekMsVUFBVXdoQix3QkFBc0JnakIsR0FBRy9sQyxFQUFFQyxLQUFLOGxDLEdBQUd4aUMsRUFBRXFILElBQzdRLFNBQVNrbkMsR0FBRy90QyxFQUFFQyxFQUFFaEUsR0FBRyxJQUFJQyxHQUFFLEVBQUdzRCxFQUFFOG9DLEdBQU96aEMsRUFBRTVHLEVBQUVtRSxZQUE4VyxNQUFsVyxpQkFBa0J5QyxHQUFHLE9BQU9BLEVBQUVBLEVBQUVvbEMsR0FBR3BsQyxJQUFJckgsRUFBRTRmLEdBQUVuZixHQUFHc29DLEdBQUd0cEIsR0FBRUMsUUFBeUJyWSxHQUFHM0ssRUFBRSxPQUF0QkEsRUFBRStELEVBQUVvRSxlQUF3Q21rQyxHQUFHeG9DLEVBQUVSLEdBQUc4b0MsSUFBSXJvQyxFQUFFLElBQUlBLEVBQUVoRSxFQUFFNEssR0FBRzdHLEVBQUVxdEIsY0FBYyxPQUFPcHRCLEVBQUV3UixZQUFPLElBQVN4UixFQUFFd1IsTUFBTXhSLEVBQUV3UixNQUFNLEtBQUt4UixFQUFFeWUsUUFBUTh1QixHQUFHeHRDLEVBQUVxbEIsVUFBVXBsQixFQUFFQSxFQUFFd3RDLG9CQUFvQnp0QyxFQUFFOUQsS0FBSThELEVBQUVBLEVBQUVxbEIsV0FBWW9qQiw0Q0FBNENqcEMsRUFBRVEsRUFBRTBvQywwQ0FBMEM3aEMsR0FBVTVHLEVBQzlaLFNBQVMrdEMsR0FBR2h1QyxFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRzhELEVBQUVDLEVBQUV3UixNQUFNLG1CQUFvQnhSLEVBQUU2USwyQkFBMkI3USxFQUFFNlEsMEJBQTBCN1UsRUFBRUMsR0FBRyxtQkFBb0IrRCxFQUFFZ3VDLGtDQUFrQ2h1QyxFQUFFZ3VDLGlDQUFpQ2h5QyxFQUFFQyxHQUFHK0QsRUFBRXdSLFFBQVF6UixHQUFHd3RDLEdBQUdsdkIsb0JBQW9CcmUsRUFBRUEsRUFBRXdSLE1BQU0sTUFDL1AsU0FBU3k4QixHQUFHbHVDLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLElBQUlzRCxFQUFFUSxFQUFFcWxCLFVBQVU3bEIsRUFBRWtSLE1BQU16VSxFQUFFdUQsRUFBRWlTLE1BQU16UixFQUFFcXRCLGNBQWM3dEIsRUFBRWlmLEtBQUs2dUIsR0FBR2xCLEdBQUdwc0MsR0FBRyxJQUFJNkcsRUFBRTVHLEVBQUVtRSxZQUFZLGlCQUFrQnlDLEdBQUcsT0FBT0EsRUFBRXJILEVBQUV3UyxRQUFRaTZCLEdBQUdwbEMsSUFBSUEsRUFBRXVZLEdBQUVuZixHQUFHc29DLEdBQUd0cEIsR0FBRUMsUUFBUTFmLEVBQUV3UyxRQUFRdzJCLEdBQUd4b0MsRUFBRTZHLElBQUltbUMsR0FBR2h0QyxFQUFFL0QsRUFBRXVELEVBQUV0RCxHQUFHc0QsRUFBRWlTLE1BQU16UixFQUFFcXRCLGNBQTJDLG1CQUE3QnhtQixFQUFFNUcsRUFBRXlFLDRCQUFpRDZvQyxHQUFHdnRDLEVBQUVDLEVBQUU0RyxFQUFFNUssR0FBR3VELEVBQUVpUyxNQUFNelIsRUFBRXF0QixlQUFlLG1CQUFvQnB0QixFQUFFeUUsMEJBQTBCLG1CQUFvQmxGLEVBQUUydUMseUJBQXlCLG1CQUFvQjN1QyxFQUFFNHVDLDJCQUEyQixtQkFBb0I1dUMsRUFBRTZ1QyxxQkFDdGVwdUMsRUFBRVQsRUFBRWlTLE1BQU0sbUJBQW9CalMsRUFBRTZ1QyxvQkFBb0I3dUMsRUFBRTZ1QyxxQkFBcUIsbUJBQW9CN3VDLEVBQUU0dUMsMkJBQTJCNXVDLEVBQUU0dUMsNEJBQTRCbnVDLElBQUlULEVBQUVpUyxPQUFPKzdCLEdBQUdsdkIsb0JBQW9COWUsRUFBRUEsRUFBRWlTLE1BQU0sTUFBTXU3QixHQUFHaHRDLEVBQUUvRCxFQUFFdUQsRUFBRXRELEdBQUdzRCxFQUFFaVMsTUFBTXpSLEVBQUVxdEIsZUFBZSxtQkFBb0I3dEIsRUFBRXVTLG9CQUFvQi9SLEVBQUVtdEIsV0FBVyxHQUFHLElBQUltaEIsR0FBRzV1QyxNQUFNRCxRQUMzVCxTQUFTOHVDLEdBQUd2dUMsRUFBRUMsRUFBRWhFLEdBQVcsR0FBRyxRQUFYK0QsRUFBRS9ELEVBQUVvakIsTUFBaUIsbUJBQW9CcmYsR0FBRyxpQkFBa0JBLEVBQUUsQ0FBQyxHQUFHL0QsRUFBRXlqQixPQUFPLENBQVksR0FBWHpqQixFQUFFQSxFQUFFeWpCLE9BQVksQ0FBQyxHQUFHLElBQUl6akIsRUFBRXVzQixJQUFJLE1BQU1uZSxNQUFNc1QsRUFBRSxNQUFNLElBQUl6aEIsRUFBRUQsRUFBRW9wQixVQUFVLElBQUlucEIsRUFBRSxNQUFNbU8sTUFBTXNULEVBQUUsSUFBSTNkLElBQUksSUFBSVIsRUFBRSxHQUFHUSxFQUFFLE9BQUcsT0FBT0MsR0FBRyxPQUFPQSxFQUFFb2YsS0FBSyxtQkFBb0JwZixFQUFFb2YsS0FBS3BmLEVBQUVvZixJQUFJbXZCLGFBQWFodkMsRUFBU1MsRUFBRW9mLE1BQUlwZixFQUFFLFNBQVNELEdBQUcsSUFBSUMsRUFBRS9ELEVBQUV1aUIsS0FBS3hlLElBQUlxdEMsS0FBS3J0QyxFQUFFL0QsRUFBRXVpQixLQUFLLElBQUksT0FBT3plLFNBQVNDLEVBQUVULEdBQUdTLEVBQUVULEdBQUdRLElBQUt3dUMsV0FBV2h2QyxFQUFTUyxHQUFFLEdBQUcsaUJBQWtCRCxFQUFFLE1BQU1xSyxNQUFNc1QsRUFBRSxNQUFNLElBQUkxaEIsRUFBRXlqQixPQUFPLE1BQU1yVixNQUFNc1QsRUFBRSxJQUFJM2QsSUFBSyxPQUFPQSxFQUNoZSxTQUFTeXVDLEdBQUd6dUMsRUFBRUMsR0FBRyxHQUFHLGFBQWFELEVBQUU2RSxLQUFLLE1BQU13RixNQUFNc1QsRUFBRSxHQUFHLG9CQUFvQnJoQixPQUFPa0IsVUFBVXFELFNBQVM5RSxLQUFLa0UsR0FBRyxxQkFBcUIzRCxPQUFPc0QsS0FBS0ssR0FBR3VELEtBQUssTUFBTSxJQUFJdkQsRUFBRSxLQUNwSyxTQUFTeXVDLEdBQUcxdUMsR0FBRyxTQUFTQyxFQUFFQSxFQUFFaEUsR0FBRyxHQUFHK0QsRUFBRSxDQUFDLElBQUk5RCxFQUFFK0QsRUFBRTB1QyxXQUFXLE9BQU96eUMsR0FBR0EsRUFBRTB5QyxXQUFXM3lDLEVBQUVnRSxFQUFFMHVDLFdBQVcxeUMsR0FBR2dFLEVBQUU0dUMsWUFBWTV1QyxFQUFFMHVDLFdBQVcxeUMsRUFBRUEsRUFBRTJ5QyxXQUFXLEtBQUszeUMsRUFBRWt4QixVQUFVLEdBQUcsU0FBU2x4QixFQUFFQSxFQUFFQyxHQUFHLElBQUk4RCxFQUFFLE9BQU8sS0FBSyxLQUFLLE9BQU85RCxHQUFHK0QsRUFBRWhFLEVBQUVDLEdBQUdBLEVBQUVBLEVBQUV1eEIsUUFBUSxPQUFPLEtBQUssU0FBU3Z4QixFQUFFOEQsRUFBRUMsR0FBRyxJQUFJRCxFQUFFLElBQUkwYyxJQUFJLE9BQU96YyxHQUFHLE9BQU9BLEVBQUU5QyxJQUFJNkMsRUFBRTJCLElBQUkxQixFQUFFOUMsSUFBSThDLEdBQUdELEVBQUUyQixJQUFJMUIsRUFBRW9ELE1BQU1wRCxHQUFHQSxFQUFFQSxFQUFFd3RCLFFBQVEsT0FBT3p0QixFQUFFLFNBQVNSLEVBQUVRLEVBQUVDLEdBQXNDLE9BQW5DRCxFQUFFOHVDLEdBQUc5dUMsRUFBRUMsSUFBS29ELE1BQU0sRUFBRXJELEVBQUV5dEIsUUFBUSxLQUFZenRCLEVBQUUsU0FBUzZHLEVBQUU1RyxFQUFFaEUsRUFBRUMsR0FBYSxPQUFWK0QsRUFBRW9ELE1BQU1uSCxFQUFNOEQsRUFBNEIsUUFBakI5RCxFQUFFK0QsRUFBRWl0QixZQUE2Qmh4QixFQUFFQSxFQUFFbUgsT0FBUXBILEdBQUdnRSxFQUFFa3RCLFVBQ2xmLEVBQUVseEIsR0FBR0MsR0FBRStELEVBQUVrdEIsVUFBVSxFQUFTbHhCLEdBRGthQSxFQUNoYSxTQUFTOFIsRUFBRTlOLEdBQTBDLE9BQXZDRCxHQUFHLE9BQU9DLEVBQUVpdEIsWUFBWWp0QixFQUFFa3RCLFVBQVUsR0FBVWx0QixFQUFFLFNBQVMyUCxFQUFFNVAsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcsT0FBRyxPQUFPK0QsR0FBRyxJQUFJQSxFQUFFdW9CLE1BQVd2b0IsRUFBRTh1QyxHQUFHOXlDLEVBQUUrRCxFQUFFakQsS0FBS2IsSUFBSzJzQixPQUFPN29CLEVBQUVDLEtBQUVBLEVBQUVULEVBQUVTLEVBQUVoRSxJQUFLNHNCLE9BQU83b0IsRUFBU0MsR0FBRSxTQUFTd2YsRUFBRXpmLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLE9BQUcsT0FBTytELEdBQUdBLEVBQUUrdUMsY0FBYy95QyxFQUFFNEksT0FBWTNJLEVBQUVzRCxFQUFFUyxFQUFFaEUsRUFBRXlVLFFBQVMyTyxJQUFJa3ZCLEdBQUd2dUMsRUFBRUMsRUFBRWhFLEdBQUdDLEVBQUUyc0IsT0FBTzdvQixFQUFFOUQsS0FBRUEsRUFBRSt5QyxHQUFHaHpDLEVBQUU0SSxLQUFLNUksRUFBRWtCLElBQUlsQixFQUFFeVUsTUFBTSxLQUFLMVEsRUFBRWpELEtBQUtiLElBQUttakIsSUFBSWt2QixHQUFHdnVDLEVBQUVDLEVBQUVoRSxHQUFHQyxFQUFFMnNCLE9BQU83b0IsRUFBUzlELEdBQUUsU0FBU0wsRUFBRW1FLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLE9BQUcsT0FBTytELEdBQUcsSUFBSUEsRUFBRXVvQixLQUFLdm9CLEVBQUVvbEIsVUFBVThKLGdCQUFnQmx6QixFQUFFa3pCLGVBQWVsdkIsRUFBRW9sQixVQUFVNnBCLGlCQUN0ZWp6QyxFQUFFaXpDLGlCQUFzQmp2QyxFQUFFa3ZDLEdBQUdsekMsRUFBRStELEVBQUVqRCxLQUFLYixJQUFLMnNCLE9BQU83b0IsRUFBRUMsS0FBRUEsRUFBRVQsRUFBRVMsRUFBRWhFLEVBQUVrTyxVQUFVLEtBQU0wZSxPQUFPN29CLEVBQVNDLEdBQUUsU0FBU2pFLEVBQUVnRSxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRTJLLEdBQUcsT0FBRyxPQUFPNUcsR0FBRyxJQUFJQSxFQUFFdW9CLE1BQVd2b0IsRUFBRW12QyxHQUFHbnpDLEVBQUUrRCxFQUFFakQsS0FBS2IsRUFBRTJLLElBQUtnaUIsT0FBTzdvQixFQUFFQyxLQUFFQSxFQUFFVCxFQUFFUyxFQUFFaEUsSUFBSzRzQixPQUFPN29CLEVBQVNDLEdBQUUsU0FBU3ZDLEVBQUVzQyxFQUFFQyxFQUFFaEUsR0FBRyxHQUFHLGlCQUFrQmdFLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU9BLEVBQUU4dUMsR0FBRyxHQUFHOXVDLEVBQUVELEVBQUVqRCxLQUFLZCxJQUFLNHNCLE9BQU83b0IsRUFBRUMsRUFBRSxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRWEsVUFBVSxLQUFLeW1CLEdBQUcsT0FBT3RyQixFQUFFZ3pDLEdBQUdodkMsRUFBRTRFLEtBQUs1RSxFQUFFOUMsSUFBSThDLEVBQUV5USxNQUFNLEtBQUsxUSxFQUFFakQsS0FBS2QsSUFBS29qQixJQUFJa3ZCLEdBQUd2dUMsRUFBRSxLQUFLQyxHQUFHaEUsRUFBRTRzQixPQUFPN29CLEVBQUUvRCxFQUFFLEtBQUt1ckIsR0FBRyxPQUFPdm5CLEVBQUVrdkMsR0FBR2x2QyxFQUFFRCxFQUFFakQsS0FBS2QsSUFBSzRzQixPQUFPN29CLEVBQUVDLEVBQUUsR0FBR3F1QyxHQUFHcnVDLElBQ3Zmb29CLEdBQUdwb0IsR0FBRyxPQUFPQSxFQUFFbXZDLEdBQUdudkMsRUFBRUQsRUFBRWpELEtBQUtkLEVBQUUsT0FBUTRzQixPQUFPN29CLEVBQUVDLEVBQUV3dUMsR0FBR3p1QyxFQUFFQyxHQUFHLE9BQU8sS0FBSyxTQUFTZ1IsRUFBRWpSLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLElBQUlzRCxFQUFFLE9BQU9TLEVBQUVBLEVBQUU5QyxJQUFJLEtBQUssR0FBRyxpQkFBa0JsQixHQUFHLGlCQUFrQkEsRUFBRSxPQUFPLE9BQU91RCxFQUFFLEtBQUtvUSxFQUFFNVAsRUFBRUMsRUFBRSxHQUFHaEUsRUFBRUMsR0FBRyxHQUFHLGlCQUFrQkQsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRTZFLFVBQVUsS0FBS3ltQixHQUFHLE9BQU90ckIsRUFBRWtCLE1BQU1xQyxFQUFFdkQsRUFBRTRJLE9BQU80aUIsR0FBR3pyQixFQUFFZ0UsRUFBRUMsRUFBRWhFLEVBQUV5VSxNQUFNdkcsU0FBU2pPLEVBQUVzRCxHQUFHaWdCLEVBQUV6ZixFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRyxLQUFLLEtBQUtzckIsR0FBRyxPQUFPdnJCLEVBQUVrQixNQUFNcUMsRUFBRTNELEVBQUVtRSxFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRyxLQUFLLEdBQUdveUMsR0FBR3J5QyxJQUFJb3NCLEdBQUdwc0IsR0FBRyxPQUFPLE9BQU91RCxFQUFFLEtBQUt4RCxFQUFFZ0UsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUUsTUFBTXV5QyxHQUFHenVDLEVBQUUvRCxHQUFHLE9BQU8sS0FBSyxTQUFTNmhCLEVBQUU5ZCxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEdBQUcsR0FBRyxpQkFBa0J0RCxHQUFHLGlCQUFrQkEsRUFBRSxPQUM1ZTBULEVBQUUzUCxFQURpZkQsRUFDbGdCQSxFQUFFdkQsSUFBSVIsSUFBSSxLQUFXLEdBQUdDLEVBQUVzRCxHQUFHLEdBQUcsaUJBQWtCdEQsR0FBRyxPQUFPQSxFQUFFLENBQUMsT0FBT0EsRUFBRTRFLFVBQVUsS0FBS3ltQixHQUFHLE9BQU92bkIsRUFBRUEsRUFBRXZELElBQUksT0FBT1AsRUFBRWlCLElBQUlsQixFQUFFQyxFQUFFaUIsTUFBTSxLQUFLakIsRUFBRTJJLE9BQU80aUIsR0FBR3pyQixFQUFFaUUsRUFBRUQsRUFBRTlELEVBQUV3VSxNQUFNdkcsU0FBUzNLLEVBQUV0RCxFQUFFaUIsS0FBS3NpQixFQUFFeGYsRUFBRUQsRUFBRTlELEVBQUVzRCxHQUFHLEtBQUtnb0IsR0FBRyxPQUEyQzNyQixFQUFFb0UsRUFBdENELEVBQUVBLEVBQUV2RCxJQUFJLE9BQU9QLEVBQUVpQixJQUFJbEIsRUFBRUMsRUFBRWlCLE1BQU0sS0FBV2pCLEVBQUVzRCxHQUFHLEdBQUc4dUMsR0FBR3B5QyxJQUFJbXNCLEdBQUduc0IsR0FBRyxPQUF3QkYsRUFBRWlFLEVBQW5CRCxFQUFFQSxFQUFFdkQsSUFBSVIsSUFBSSxLQUFXQyxFQUFFc0QsRUFBRSxNQUFNaXZDLEdBQUd4dUMsRUFBRS9ELEdBQUcsT0FBTyxLQUFLLFNBQVMrd0MsRUFBR3p0QyxFQUFFdU8sRUFBRTZCLEVBQUU2UCxHQUFHLElBQUksSUFBSTVqQixFQUFFLEtBQUtpQixFQUFFLEtBQUtkLEVBQUUrUixFQUFFbUQsRUFBRW5ELEVBQUUsRUFBRWdRLEVBQUUsS0FBSyxPQUFPL2hCLEdBQUdrVixFQUFFdEIsRUFBRXpQLE9BQU8rUSxJQUFJLENBQUNsVixFQUFFcUgsTUFBTTZOLEdBQUc2TSxFQUFFL2hCLEVBQUVBLEVBQUUsTUFBTStoQixFQUFFL2hCLEVBQUV5eEIsUUFBUSxJQUFJL1AsRUFBRXpNLEVBQUV6UixFQUFFeEQsRUFBRTRULEVBQUVzQixHQUFHdU8sR0FBRyxHQUFHLE9BQU8vQixFQUFFLENBQUMsT0FBTzFoQixJQUFJQSxFQUFFK2hCLEdBQUcsTUFBTS9kLEdBQ3RmaEUsR0FBRyxPQUFPMGhCLEVBQUV3UCxXQUFXanRCLEVBQUVULEVBQUV4RCxHQUFHK1IsRUFBRWxILEVBQUU2VyxFQUFFM1AsRUFBRW1ELEdBQUcsT0FBT3BVLEVBQUVqQixFQUFFNmhCLEVBQUU1Z0IsRUFBRTJ3QixRQUFRL1AsRUFBRTVnQixFQUFFNGdCLEVBQUUxaEIsRUFBRStoQixFQUFFLEdBQUc3TSxJQUFJdEIsRUFBRXpQLE9BQU8sT0FBT2xFLEVBQUV1RCxFQUFFeEQsR0FBR0gsRUFBRSxHQUFHLE9BQU9HLEVBQUUsQ0FBQyxLQUFLa1YsRUFBRXRCLEVBQUV6UCxPQUFPK1EsSUFBa0IsUUFBZGxWLEVBQUUwQixFQUFFOEIsRUFBRW9RLEVBQUVzQixHQUFHdU8sTUFBYzFSLEVBQUVsSCxFQUFFN0ssRUFBRStSLEVBQUVtRCxHQUFHLE9BQU9wVSxFQUFFakIsRUFBRUcsRUFBRWMsRUFBRTJ3QixRQUFRenhCLEVBQUVjLEVBQUVkLEdBQUcsT0FBT0gsRUFBRSxJQUFJRyxFQUFFRSxFQUFFc0QsRUFBRXhELEdBQUdrVixFQUFFdEIsRUFBRXpQLE9BQU8rUSxJQUFzQixRQUFsQjZNLEVBQUVELEVBQUU5aEIsRUFBRXdELEVBQUUwUixFQUFFdEIsRUFBRXNCLEdBQUd1TyxNQUFjemYsR0FBRyxPQUFPK2QsRUFBRW1QLFdBQVdseEIsRUFBRXNoQixPQUFPLE9BQU9TLEVBQUU1Z0IsSUFBSStULEVBQUU2TSxFQUFFNWdCLEtBQUs0USxFQUFFbEgsRUFBRWtYLEVBQUVoUSxFQUFFbUQsR0FBRyxPQUFPcFUsRUFBRWpCLEVBQUVraUIsRUFBRWpoQixFQUFFMndCLFFBQVExUCxFQUFFamhCLEVBQUVpaEIsR0FBNEMsT0FBekMvZCxHQUFHaEUsRUFBRTJILFNBQVEsU0FBUzNELEdBQUcsT0FBT0MsRUFBRVQsRUFBRVEsTUFBWW5FLEVBQUUsU0FBU3NpQixFQUFFM2UsRUFBRXVPLEVBQUU2QixFQUFFL1QsR0FBRyxJQUFJNGpCLEVBQUU0SSxHQUFHelksR0FBRyxHQUFHLG1CQUFvQjZQLEVBQUUsTUFBTXBWLE1BQU1zVCxFQUFFLE1BQ3ZlLEdBQUcsT0FEMGUvTixFQUFFNlAsRUFBRTFqQixLQUFLNlQsSUFDM2UsTUFBTXZGLE1BQU1zVCxFQUFFLE1BQU0sSUFBSSxJQUFJM2hCLEVBQUV5akIsRUFBRSxLQUFLM2lCLEVBQUVpUixFQUFFbUQsRUFBRW5ELEVBQUUsRUFBRWdRLEVBQUUsS0FBS0wsRUFBRTlOLEVBQUV4SCxPQUFPLE9BQU90TCxJQUFJNGdCLEVBQUUyQyxLQUFLblAsSUFBSXdNLEVBQUU5TixFQUFFeEgsT0FBTyxDQUFDdEwsRUFBRXVHLE1BQU02TixHQUFHNk0sRUFBRWpoQixFQUFFQSxFQUFFLE1BQU1paEIsRUFBRWpoQixFQUFFMndCLFFBQVEsSUFBSXRQLEVBQUVsTixFQUFFelIsRUFBRTFDLEVBQUU0Z0IsRUFBRTdnQixNQUFNaEIsR0FBRyxHQUFHLE9BQU9zaUIsRUFBRSxDQUFDLE9BQU9yaEIsSUFBSUEsRUFBRWloQixHQUFHLE1BQU0vZCxHQUFHbEQsR0FBRyxPQUFPcWhCLEVBQUUrTyxXQUFXanRCLEVBQUVULEVBQUUxQyxHQUFHaVIsRUFBRWxILEVBQUVzWCxFQUFFcFEsRUFBRW1ELEdBQUcsT0FBT2xWLEVBQUV5akIsRUFBRXRCLEVBQUVuaUIsRUFBRXl4QixRQUFRdFAsRUFBRW5pQixFQUFFbWlCLEVBQUVyaEIsRUFBRWloQixFQUFFLEdBQUdMLEVBQUUyQyxLQUFLLE9BQU9wa0IsRUFBRXVELEVBQUUxQyxHQUFHMmlCLEVBQUUsR0FBRyxPQUFPM2lCLEVBQUUsQ0FBQyxNQUFNNGdCLEVBQUUyQyxLQUFLblAsSUFBSXdNLEVBQUU5TixFQUFFeEgsT0FBd0IsUUFBakJzVixFQUFFaGdCLEVBQUU4QixFQUFFa2UsRUFBRTdnQixNQUFNaEIsTUFBY2tTLEVBQUVsSCxFQUFFNlcsRUFBRTNQLEVBQUVtRCxHQUFHLE9BQU9sVixFQUFFeWpCLEVBQUUvQixFQUFFMWhCLEVBQUV5eEIsUUFBUS9QLEVBQUUxaEIsRUFBRTBoQixHQUFHLE9BQU8rQixFQUFFLElBQUkzaUIsRUFBRVosRUFBRXNELEVBQUUxQyxJQUFJNGdCLEVBQUUyQyxLQUFLblAsSUFBSXdNLEVBQUU5TixFQUFFeEgsT0FBNEIsUUFBckJzVixFQUFFSSxFQUFFaGhCLEVBQUUwQyxFQUFFMFIsRUFBRXdNLEVBQUU3Z0IsTUFBTWhCLE1BQWNtRSxHQUFHLE9BQ2hmMGQsRUFBRXdQLFdBQVdwd0IsRUFBRXdnQixPQUFPLE9BQU9JLEVBQUV2Z0IsSUFBSStULEVBQUV3TSxFQUFFdmdCLEtBQUs0USxFQUFFbEgsRUFBRTZXLEVBQUUzUCxFQUFFbUQsR0FBRyxPQUFPbFYsRUFBRXlqQixFQUFFL0IsRUFBRTFoQixFQUFFeXhCLFFBQVEvUCxFQUFFMWhCLEVBQUUwaEIsR0FBNEMsT0FBekMxZCxHQUFHbEQsRUFBRTZHLFNBQVEsU0FBUzNELEdBQUcsT0FBT0MsRUFBRVQsRUFBRVEsTUFBWXlmLEVBQUUsT0FBTyxTQUFTemYsRUFBRTlELEVBQUUySyxFQUFFK0ksR0FBRyxJQUFJNlAsRUFBRSxpQkFBa0I1WSxHQUFHLE9BQU9BLEdBQUdBLEVBQUVoQyxPQUFPNGlCLElBQUksT0FBTzVnQixFQUFFMUosSUFBSXNpQixJQUFJNVksRUFBRUEsRUFBRTZKLE1BQU12RyxVQUFVLElBQUl0TyxFQUFFLGlCQUFrQmdMLEdBQUcsT0FBT0EsRUFBRSxHQUFHaEwsRUFBRSxPQUFPZ0wsRUFBRS9GLFVBQVUsS0FBS3ltQixHQUFHdm5CLEVBQUUsQ0FBUyxJQUFSbkUsRUFBRWdMLEVBQUUxSixJQUFRc2lCLEVBQUV2akIsRUFBRSxPQUFPdWpCLEdBQUcsQ0FBQyxHQUFHQSxFQUFFdGlCLE1BQU10QixFQUFFLENBQUMsT0FBTzRqQixFQUFFK0ksS0FBSyxLQUFLLEVBQUUsR0FBRzNoQixFQUFFaEMsT0FBTzRpQixHQUFHLENBQUN4ckIsRUFBRStELEVBQUV5ZixFQUFFZ08sVUFBU3Z4QixFQUFFc0QsRUFBRWlnQixFQUFFNVksRUFBRTZKLE1BQU12RyxXQUFZMGUsT0FBTzdvQixFQUFFQSxFQUFFOUQsRUFBRSxNQUFNOEQsRUFBRSxNQUFNLFFBQVEsR0FBR3lmLEVBQUV1dkIsY0FBY25vQyxFQUFFaEMsS0FBSyxDQUFDNUksRUFBRStELEVBQ3JmeWYsRUFBRWdPLFVBQVN2eEIsRUFBRXNELEVBQUVpZ0IsRUFBRTVZLEVBQUU2SixRQUFTMk8sSUFBSWt2QixHQUFHdnVDLEVBQUV5ZixFQUFFNVksR0FBRzNLLEVBQUUyc0IsT0FBTzdvQixFQUFFQSxFQUFFOUQsRUFBRSxNQUFNOEQsR0FBRy9ELEVBQUUrRCxFQUFFeWYsR0FBRyxNQUFXeGYsRUFBRUQsRUFBRXlmLEdBQUdBLEVBQUVBLEVBQUVnTyxRQUFRNW1CLEVBQUVoQyxPQUFPNGlCLEtBQUl2ckIsRUFBRWt6QyxHQUFHdm9DLEVBQUU2SixNQUFNdkcsU0FBU25LLEVBQUVqRCxLQUFLNlMsRUFBRS9JLEVBQUUxSixNQUFPMHJCLE9BQU83b0IsRUFBRUEsRUFBRTlELEtBQUkwVCxFQUFFcS9CLEdBQUdwb0MsRUFBRWhDLEtBQUtnQyxFQUFFMUosSUFBSTBKLEVBQUU2SixNQUFNLEtBQUsxUSxFQUFFakQsS0FBSzZTLElBQUt5UCxJQUFJa3ZCLEdBQUd2dUMsRUFBRTlELEVBQUUySyxHQUFHK0ksRUFBRWlaLE9BQU83b0IsRUFBRUEsRUFBRTRQLEdBQUcsT0FBTzdCLEVBQUUvTixHQUFHLEtBQUt3bkIsR0FBR3huQixFQUFFLENBQUMsSUFBSXlmLEVBQUU1WSxFQUFFMUosSUFBSSxPQUFPakIsR0FBRyxDQUFDLEdBQUdBLEVBQUVpQixNQUFNc2lCLEVBQVgsQ0FBYSxHQUFHLElBQUl2akIsRUFBRXNzQixLQUFLdHNCLEVBQUVtcEIsVUFBVThKLGdCQUFnQnRvQixFQUFFc29CLGVBQWVqekIsRUFBRW1wQixVQUFVNnBCLGlCQUFpQnJvQyxFQUFFcW9DLGVBQWUsQ0FBQ2p6QyxFQUFFK0QsRUFBRTlELEVBQUV1eEIsVUFBU3Z4QixFQUFFc0QsRUFBRXRELEVBQUUySyxFQUFFc0QsVUFBVSxLQUFNMGUsT0FBTzdvQixFQUFFQSxFQUFFOUQsRUFBRSxNQUFNOEQsRUFBTy9ELEVBQUUrRCxFQUFFOUQsR0FBRyxNQUFXK0QsRUFBRUQsRUFBRTlELEdBQUdBLEVBQ25mQSxFQUFFdXhCLFNBQVF2eEIsRUFBRWl6QyxHQUFHdG9DLEVBQUU3RyxFQUFFakQsS0FBSzZTLElBQUtpWixPQUFPN29CLEVBQUVBLEVBQUU5RCxFQUFFLE9BQU82UixFQUFFL04sR0FBRyxHQUFHLGlCQUFrQjZHLEdBQUcsaUJBQWtCQSxFQUFFLE9BQU9BLEVBQUUsR0FBR0EsRUFBRSxPQUFPM0ssR0FBRyxJQUFJQSxFQUFFc3NCLEtBQUt2c0IsRUFBRStELEVBQUU5RCxFQUFFdXhCLFVBQVN2eEIsRUFBRXNELEVBQUV0RCxFQUFFMkssSUFBS2dpQixPQUFPN29CLEVBQUVBLEVBQUU5RCxJQUFJRCxFQUFFK0QsRUFBRTlELElBQUdBLEVBQUU2eUMsR0FBR2xvQyxFQUFFN0csRUFBRWpELEtBQUs2UyxJQUFLaVosT0FBTzdvQixFQUFFQSxFQUFFOUQsR0FBRzZSLEVBQUUvTixHQUFHLEdBQUdzdUMsR0FBR3puQyxHQUFHLE9BQU9vbUMsRUFBR2p0QyxFQUFFOUQsRUFBRTJLLEVBQUUrSSxHQUFHLEdBQUd5WSxHQUFHeGhCLEdBQUcsT0FBT3NYLEVBQUVuZSxFQUFFOUQsRUFBRTJLLEVBQUUrSSxHQUFjLEdBQVgvVCxHQUFHNHlDLEdBQUd6dUMsRUFBRTZHLFFBQU0sSUFBcUJBLElBQUk0WSxFQUFFLE9BQU96ZixFQUFFd29CLEtBQUssS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNeG9CLEVBQUVBLEVBQUU2RSxLQUFLd0YsTUFBTXNULEVBQUUsSUFBSTNkLEVBQUV1RSxhQUFhdkUsRUFBRTdELE1BQU0sY0FBZSxPQUFPRixFQUFFK0QsRUFBRTlELElBQUksSUFBSW16QyxHQUFHWCxJQUFHLEdBQUlZLEdBQUdaLElBQUcsR0FBSWEsR0FBRyxHQUFHQyxHQUFHLENBQUN0d0IsUUFBUXF3QixJQUFJRSxHQUFHLENBQUN2d0IsUUFBUXF3QixJQUFJRyxHQUFHLENBQUN4d0IsUUFBUXF3QixJQUNqZixTQUFTSSxHQUFHM3ZDLEdBQUcsR0FBR0EsSUFBSXV2QyxHQUFHLE1BQU1sbEMsTUFBTXNULEVBQUUsTUFBTSxPQUFPM2QsRUFBRSxTQUFTNHZDLEdBQUc1dkMsRUFBRUMsR0FBeUMsT0FBdEM4ZSxHQUFFMndCLEdBQUd6dkMsR0FBRzhlLEdBQUUwd0IsR0FBR3p2QyxHQUFHK2UsR0FBRXl3QixHQUFHRCxJQUFJdnZDLEVBQUVDLEVBQUVoQixVQUFtQixLQUFLLEVBQUUsS0FBSyxHQUFHZ0IsR0FBR0EsRUFBRUEsRUFBRTR2QyxpQkFBaUI1dkMsRUFBRXVyQixhQUFhTCxHQUFHLEtBQUssSUFBSSxNQUFNLFFBQWtFbHJCLEVBQUVrckIsR0FBckNsckIsR0FBdkJELEVBQUUsSUFBSUEsRUFBRUMsRUFBRXV1QixXQUFXdnVCLEdBQU11ckIsY0FBYyxLQUFLeHJCLEVBQUVBLEVBQUU4dkMsU0FBa0JseEIsR0FBRTR3QixJQUFJendCLEdBQUV5d0IsR0FBR3Z2QyxHQUFHLFNBQVM4dkMsS0FBS254QixHQUFFNHdCLElBQUk1d0IsR0FBRTZ3QixJQUFJN3dCLEdBQUU4d0IsSUFBSSxTQUFTTSxHQUFHaHdDLEdBQUcydkMsR0FBR0QsR0FBR3h3QixTQUFTLElBQUlqZixFQUFFMHZDLEdBQUdILEdBQUd0d0IsU0FBYWpqQixFQUFFa3ZCLEdBQUdsckIsRUFBRUQsRUFBRTZFLE1BQU01RSxJQUFJaEUsSUFBSThpQixHQUFFMHdCLEdBQUd6dkMsR0FBRytlLEdBQUV5d0IsR0FBR3Z6QyxJQUFJLFNBQVNnMEMsR0FBR2p3QyxHQUFHeXZDLEdBQUd2d0IsVUFBVWxmLElBQUk0ZSxHQUFFNHdCLElBQUk1d0IsR0FBRTZ3QixLQUFLLElBQUlqd0IsR0FBRSxDQUFDTixRQUFRLEdBQ3BkLFNBQVNneEIsR0FBR2x3QyxHQUFHLElBQUksSUFBSUMsRUFBRUQsRUFBRSxPQUFPQyxHQUFHLENBQUMsR0FBRyxLQUFLQSxFQUFFdW9CLElBQUksQ0FBQyxJQUFJdnNCLEVBQUVnRSxFQUFFb3RCLGNBQWMsR0FBRyxPQUFPcHhCLElBQW1CLFFBQWZBLEVBQUVBLEVBQUVxeEIsYUF6RXFKLE9BeUVoSXJ4QixFQUFFbUgsTUF6RXNJLE9BeUUzSG5ILEVBQUVtSCxNQUFXLE9BQU9uRCxPQUFPLEdBQUcsS0FBS0EsRUFBRXVvQixVQUFLLElBQVN2b0IsRUFBRWt3QyxjQUFjQyxhQUFhLEdBQUcsSUFBaUIsR0FBWm53QyxFQUFFa3RCLFdBQWMsT0FBT2x0QixPQUFPLEdBQUcsT0FBT0EsRUFBRW9kLE1BQU0sQ0FBQ3BkLEVBQUVvZCxNQUFNd0wsT0FBTzVvQixFQUFFQSxFQUFFQSxFQUFFb2QsTUFBTSxTQUFTLEdBQUdwZCxJQUFJRCxFQUFFLE1BQU0sS0FBSyxPQUFPQyxFQUFFd3RCLFNBQVMsQ0FBQyxHQUFHLE9BQU94dEIsRUFBRTRvQixRQUFRNW9CLEVBQUU0b0IsU0FBUzdvQixFQUFFLE9BQU8sS0FBS0MsRUFBRUEsRUFBRTRvQixPQUFPNW9CLEVBQUV3dEIsUUFBUTVFLE9BQU81b0IsRUFBRTRvQixPQUFPNW9CLEVBQUVBLEVBQUV3dEIsUUFBUSxPQUFPLEtBQUssU0FBUzRpQixHQUFHcndDLEVBQUVDLEdBQUcsTUFBTSxDQUFDcXdDLFVBQVV0d0MsRUFBRTBRLE1BQU16USxHQUN2ZSxJQUFJc3dDLEdBQUd6cEIsRUFBR2hHLHVCQUF1QjB2QixHQUFHMXBCLEVBQUcvRix3QkFBd0IwdkIsR0FBRyxFQUFFL3ZCLEdBQUUsS0FBS2pULEdBQUUsS0FBS0MsR0FBRSxLQUFLZ2pDLElBQUcsRUFBRyxTQUFTL3dCLEtBQUksTUFBTXRWLE1BQU1zVCxFQUFFLE1BQU8sU0FBU2d6QixHQUFHM3dDLEVBQUVDLEdBQUcsR0FBRyxPQUFPQSxFQUFFLE9BQU0sRUFBRyxJQUFJLElBQUloRSxFQUFFLEVBQUVBLEVBQUVnRSxFQUFFRSxRQUFRbEUsRUFBRStELEVBQUVHLE9BQU9sRSxJQUFJLElBQUk2bEMsR0FBRzloQyxFQUFFL0QsR0FBR2dFLEVBQUVoRSxJQUFJLE9BQU0sRUFBRyxPQUFNLEVBQy9PLFNBQVMyMEMsR0FBRzV3QyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEVBQUVxSCxHQUFrSSxHQUEvSDRwQyxHQUFHNXBDLEVBQUU2WixHQUFFemdCLEVBQUVBLEVBQUVvdEIsY0FBYyxLQUFLcHRCLEVBQUVvc0MsWUFBWSxLQUFLcHNDLEVBQUU4ckMsZUFBZSxFQUFFd0UsR0FBR3J4QixRQUFRLE9BQU9sZixHQUFHLE9BQU9BLEVBQUVxdEIsY0FBY3dqQixHQUFHQyxHQUFHOXdDLEVBQUUvRCxFQUFFQyxFQUFFc0QsR0FBTVMsRUFBRThyQyxpQkFBaUIwRSxHQUFHLENBQUM1cEMsRUFBRSxFQUFFLEVBQUUsQ0FBb0IsR0FBbkI1RyxFQUFFOHJDLGVBQWUsSUFBTyxHQUFHbGxDLEdBQUcsTUFBTXdELE1BQU1zVCxFQUFFLE1BQU05VyxHQUFHLEVBQUU2RyxHQUFFRCxHQUFFLEtBQUt4TixFQUFFb3NDLFlBQVksS0FBS2tFLEdBQUdyeEIsUUFBUTZ4QixHQUFHL3dDLEVBQUUvRCxFQUFFQyxFQUFFc0QsU0FBU1MsRUFBRThyQyxpQkFBaUIwRSxJQUFrRSxHQUE5REYsR0FBR3J4QixRQUFROHhCLEdBQUcvd0MsRUFBRSxPQUFPd04sSUFBRyxPQUFPQSxHQUFFckYsS0FBS3FvQyxHQUFHLEVBQUUvaUMsR0FBRUQsR0FBRWlULEdBQUUsS0FBS2d3QixJQUFHLEVBQU16d0MsRUFBRSxNQUFNb0ssTUFBTXNULEVBQUUsTUFBTSxPQUFPM2QsRUFDOVosU0FBU2l4QyxLQUFLLElBQUlqeEMsRUFBRSxDQUFDcXRCLGNBQWMsS0FBS2lmLFVBQVUsS0FBS0MsVUFBVSxLQUFLMkUsTUFBTSxLQUFLOW9DLEtBQUssTUFBOEMsT0FBeEMsT0FBT3NGLEdBQUVnVCxHQUFFMk0sY0FBYzNmLEdBQUUxTixFQUFFME4sR0FBRUEsR0FBRXRGLEtBQUtwSSxFQUFTME4sR0FBRSxTQUFTeWpDLEtBQUssR0FBRyxPQUFPMWpDLEdBQUUsQ0FBQyxJQUFJek4sRUFBRTBnQixHQUFFd00sVUFBVWx0QixFQUFFLE9BQU9BLEVBQUVBLEVBQUVxdEIsY0FBYyxVQUFVcnRCLEVBQUV5TixHQUFFckYsS0FBSyxJQUFJbkksRUFBRSxPQUFPeU4sR0FBRWdULEdBQUUyTSxjQUFjM2YsR0FBRXRGLEtBQUssR0FBRyxPQUFPbkksRUFBRXlOLEdBQUV6TixFQUFFd04sR0FBRXpOLE1BQU0sQ0FBQyxHQUFHLE9BQU9BLEVBQUUsTUFBTXFLLE1BQU1zVCxFQUFFLE1BQVUzZCxFQUFFLENBQUNxdEIsZUFBUDVmLEdBQUV6TixHQUFxQnF0QixjQUFjaWYsVUFBVTcrQixHQUFFNitCLFVBQVVDLFVBQVU5K0IsR0FBRTgrQixVQUFVMkUsTUFBTXpqQyxHQUFFeWpDLE1BQU05b0MsS0FBSyxNQUFNLE9BQU9zRixHQUFFZ1QsR0FBRTJNLGNBQWMzZixHQUFFMU4sRUFBRTBOLEdBQUVBLEdBQUV0RixLQUFLcEksRUFBRSxPQUFPME4sR0FDaGUsU0FBUzBqQyxHQUFHcHhDLEVBQUVDLEdBQUcsTUFBTSxtQkFBb0JBLEVBQUVBLEVBQUVELEdBQUdDLEVBQ2xELFNBQVNveEMsR0FBR3J4QyxHQUFHLElBQUlDLEVBQUVreEMsS0FBS2wxQyxFQUFFZ0UsRUFBRWl4QyxNQUFNLEdBQUcsT0FBT2oxQyxFQUFFLE1BQU1vTyxNQUFNc1QsRUFBRSxNQUFNMWhCLEVBQUVxMUMsb0JBQW9CdHhDLEVBQUUsSUFBSTlELEVBQUV1UixHQUFFak8sRUFBRXRELEVBQUVxd0MsVUFBVTFsQyxFQUFFNUssRUFBRXV3QyxRQUFRLEdBQUcsT0FBTzNsQyxFQUFFLENBQUMsR0FBRyxPQUFPckgsRUFBRSxDQUFDLElBQUl1TyxFQUFFdk8sRUFBRTRJLEtBQUs1SSxFQUFFNEksS0FBS3ZCLEVBQUV1QixLQUFLdkIsRUFBRXVCLEtBQUsyRixFQUFFN1IsRUFBRXF3QyxVQUFVL3NDLEVBQUVxSCxFQUFFNUssRUFBRXV3QyxRQUFRLEtBQUssR0FBRyxPQUFPaHRDLEVBQUUsQ0FBQ0EsRUFBRUEsRUFBRTRJLEtBQUtsTSxFQUFFQSxFQUFFb3dDLFVBQVUsSUFBSTE4QixFQUFFN0IsRUFBRWxILEVBQUUsS0FBSzRZLEVBQUVqZ0IsRUFBRSxFQUFFLENBQUMsSUFBSTNELEVBQUU0akIsRUFBRXNzQixlQUFlLEdBQUdsd0MsRUFBRTQwQyxHQUFHLENBQUMsSUFBSXowQyxFQUFFLENBQUMrdkMsZUFBZXRzQixFQUFFc3NCLGVBQWVhLGVBQWVudEIsRUFBRW10QixlQUFlMkUsT0FBTzl4QixFQUFFOHhCLE9BQU9DLGFBQWEveEIsRUFBRSt4QixhQUFhQyxXQUFXaHlCLEVBQUVneUIsV0FBV3JwQyxLQUFLLE1BQU0sT0FBT3dILEdBQUc3QixFQUFFNkIsRUFBRTVULEVBQUU2SyxFQUFFM0ssR0FBRzBULEVBQUVBLEVBQUV4SCxLQUFLcE0sRUFBRUgsRUFBRTZrQixHQUFFcXJCLGlCQUM5ZXJyQixHQUFFcXJCLGVBQWVsd0MsRUFBRXN4QyxHQUFHdHhDLFNBQVMsT0FBTytULElBQUlBLEVBQUVBLEVBQUV4SCxLQUFLLENBQUMyakMsZUFBZSxXQUFXYSxlQUFlbnRCLEVBQUVtdEIsZUFBZTJFLE9BQU85eEIsRUFBRTh4QixPQUFPQyxhQUFhL3hCLEVBQUUreEIsYUFBYUMsV0FBV2h5QixFQUFFZ3lCLFdBQVdycEMsS0FBSyxPQUFPOGtDLEdBQUdyeEMsRUFBRTRqQixFQUFFbXRCLGdCQUFnQjF3QyxFQUFFdWpCLEVBQUUreEIsZUFBZXh4QyxFQUFFeWYsRUFBRWd5QixXQUFXenhDLEVBQUU5RCxFQUFFdWpCLEVBQUU4eEIsUUFBUTl4QixFQUFFQSxFQUFFclgsV0FBVyxPQUFPcVgsR0FBR0EsSUFBSWpnQixHQUFHLE9BQU9vUSxFQUFFL0ksRUFBRTNLLEVBQUUwVCxFQUFFeEgsS0FBSzJGLEVBQUUrekIsR0FBRzVsQyxFQUFFK0QsRUFBRW90QixpQkFBaUIyZSxJQUFHLEdBQUkvckMsRUFBRW90QixjQUFjbnhCLEVBQUUrRCxFQUFFcXNDLFVBQVV6bEMsRUFBRTVHLEVBQUVzc0MsVUFBVTM4QixFQUFFM1QsRUFBRXkxQyxrQkFBa0J4MUMsRUFBRSxNQUFNLENBQUMrRCxFQUFFb3RCLGNBQWNweEIsRUFBRTAxQyxVQUN4YixTQUFTQyxHQUFHNXhDLEdBQUcsSUFBSUMsRUFBRWt4QyxLQUFLbDFDLEVBQUVnRSxFQUFFaXhDLE1BQU0sR0FBRyxPQUFPajFDLEVBQUUsTUFBTW9PLE1BQU1zVCxFQUFFLE1BQU0xaEIsRUFBRXExQyxvQkFBb0J0eEMsRUFBRSxJQUFJOUQsRUFBRUQsRUFBRTAxQyxTQUFTbnlDLEVBQUV2RCxFQUFFdXdDLFFBQVEzbEMsRUFBRTVHLEVBQUVvdEIsY0FBYyxHQUFHLE9BQU83dEIsRUFBRSxDQUFDdkQsRUFBRXV3QyxRQUFRLEtBQUssSUFBSXorQixFQUFFdk8sRUFBRUEsRUFBRTRJLEtBQUssR0FBR3ZCLEVBQUU3RyxFQUFFNkcsRUFBRWtILEVBQUV3akMsUUFBUXhqQyxFQUFFQSxFQUFFM0YsV0FBVzJGLElBQUl2TyxHQUFHc2lDLEdBQUdqN0IsRUFBRTVHLEVBQUVvdEIsaUJBQWlCMmUsSUFBRyxHQUFJL3JDLEVBQUVvdEIsY0FBY3htQixFQUFFLE9BQU81RyxFQUFFc3NDLFlBQVl0c0MsRUFBRXFzQyxVQUFVemxDLEdBQUc1SyxFQUFFeTFDLGtCQUFrQjdxQyxFQUFFLE1BQU0sQ0FBQ0EsRUFBRTNLLEdBQ25WLFNBQVMyMUMsR0FBRzd4QyxHQUFHLElBQUlDLEVBQUVneEMsS0FBbUwsTUFBOUssbUJBQW9CanhDLElBQUlBLEVBQUVBLEtBQUtDLEVBQUVvdEIsY0FBY3B0QixFQUFFcXNDLFVBQVV0c0MsRUFBb0ZBLEdBQWxGQSxFQUFFQyxFQUFFaXhDLE1BQU0sQ0FBQzFFLFFBQVEsS0FBS21GLFNBQVMsS0FBS0wsb0JBQW9CRixHQUFHTSxrQkFBa0IxeEMsSUFBTzJ4QyxTQUFTRyxHQUFHMTBDLEtBQUssS0FBS3NqQixHQUFFMWdCLEdBQVMsQ0FBQ0MsRUFBRW90QixjQUFjcnRCLEdBQUcsU0FBUyt4QyxHQUFHL3hDLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFrTyxPQUEvTjhELEVBQUUsQ0FBQ3dvQixJQUFJeG9CLEVBQUU5QyxPQUFPK0MsRUFBRSt4QyxRQUFRLzFDLEVBQUVnMkMsS0FBSy8xQyxFQUFFa00sS0FBSyxNQUFzQixRQUFoQm5JLEVBQUV5Z0IsR0FBRTJyQixjQUFzQnBzQyxFQUFFLENBQUMwdUMsV0FBVyxNQUFNanVCLEdBQUUyckIsWUFBWXBzQyxFQUFFQSxFQUFFMHVDLFdBQVczdUMsRUFBRW9JLEtBQUtwSSxHQUFtQixRQUFmL0QsRUFBRWdFLEVBQUUwdUMsWUFBb0IxdUMsRUFBRTB1QyxXQUFXM3VDLEVBQUVvSSxLQUFLcEksR0FBRzlELEVBQUVELEVBQUVtTSxLQUFLbk0sRUFBRW1NLEtBQUtwSSxFQUFFQSxFQUFFb0ksS0FBS2xNLEVBQUUrRCxFQUFFMHVDLFdBQVczdUMsR0FBV0EsRUFDN2QsU0FBU2t5QyxLQUFLLE9BQU9mLEtBQUs5akIsY0FBYyxTQUFTOGtCLEdBQUdueUMsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcsSUFBSXNELEVBQUV5eEMsS0FBS3Z3QixHQUFFeU0sV0FBV250QixFQUFFUixFQUFFNnRCLGNBQWMwa0IsR0FBRyxFQUFFOXhDLEVBQUVoRSxPQUFFLE9BQU8sSUFBU0MsRUFBRSxLQUFLQSxHQUFHLFNBQVNrMkMsR0FBR3B5QyxFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRyxJQUFJc0QsRUFBRTJ4QyxLQUFLajFDLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFLElBQUkySyxPQUFFLEVBQU8sR0FBRyxPQUFPNEcsR0FBRSxDQUFDLElBQUlNLEVBQUVOLEdBQUU0ZixjQUEwQixHQUFaeG1CLEVBQUVrSCxFQUFFaWtDLFFBQVcsT0FBTzkxQyxHQUFHeTBDLEdBQUd6MEMsRUFBRTZSLEVBQUVra0MsTUFBbUIsWUFBWkYsR0FBRzl4QyxFQUFFaEUsRUFBRTRLLEVBQUUzSyxHQUFXd2tCLEdBQUV5TSxXQUFXbnRCLEVBQUVSLEVBQUU2dEIsY0FBYzBrQixHQUFHLEVBQUU5eEMsRUFBRWhFLEVBQUU0SyxFQUFFM0ssR0FBRyxTQUFTbTJDLEdBQUdyeUMsRUFBRUMsR0FBRyxPQUFPa3lDLEdBQUcsSUFBSSxFQUFFbnlDLEVBQUVDLEdBQUcsU0FBU3F5QyxHQUFHdHlDLEVBQUVDLEdBQUcsT0FBT215QyxHQUFHLElBQUksRUFBRXB5QyxFQUFFQyxHQUFHLFNBQVNzeUMsR0FBR3Z5QyxFQUFFQyxHQUFHLE9BQU9teUMsR0FBRyxFQUFFLEVBQUVweUMsRUFBRUMsR0FDbmMsU0FBU3V5QyxHQUFHeHlDLEVBQUVDLEdBQUcsTUFBRyxtQkFBb0JBLEdBQVNELEVBQUVBLElBQUlDLEVBQUVELEdBQUcsV0FBV0MsRUFBRSxRQUFVLE1BQU9BLEdBQXFCRCxFQUFFQSxJQUFJQyxFQUFFaWYsUUFBUWxmLEVBQUUsV0FBV0MsRUFBRWlmLFFBQVEsWUFBdEUsRUFBNEUsU0FBU3V6QixHQUFHenlDLEVBQUVDLEVBQUVoRSxHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFcUssT0FBTyxDQUFDdEcsSUFBSSxLQUFZb3lDLEdBQUcsRUFBRSxFQUFFSSxHQUFHcDFDLEtBQUssS0FBSzZDLEVBQUVELEdBQUcvRCxHQUFHLFNBQVN5MkMsTUFBTSxTQUFTQyxHQUFHM3lDLEVBQUVDLEdBQTRDLE9BQXpDZ3hDLEtBQUs1akIsY0FBYyxDQUFDcnRCLE9BQUUsSUFBU0MsRUFBRSxLQUFLQSxHQUFVRCxFQUFFLFNBQVM0eUMsR0FBRzV5QyxFQUFFQyxHQUFHLElBQUloRSxFQUFFazFDLEtBQUtseEMsT0FBRSxJQUFTQSxFQUFFLEtBQUtBLEVBQUUsSUFBSS9ELEVBQUVELEVBQUVveEIsY0FBYyxPQUFHLE9BQU9ueEIsR0FBRyxPQUFPK0QsR0FBRzB3QyxHQUFHMXdDLEVBQUUvRCxFQUFFLElBQVdBLEVBQUUsSUFBR0QsRUFBRW94QixjQUFjLENBQUNydEIsRUFBRUMsR0FBVUQsR0FDL2QsU0FBUzZ5QyxHQUFHN3lDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUVrMUMsS0FBS2x4QyxPQUFFLElBQVNBLEVBQUUsS0FBS0EsRUFBRSxJQUFJL0QsRUFBRUQsRUFBRW94QixjQUFjLE9BQUcsT0FBT254QixHQUFHLE9BQU8rRCxHQUFHMHdDLEdBQUcxd0MsRUFBRS9ELEVBQUUsSUFBV0EsRUFBRSxJQUFHOEQsRUFBRUEsSUFBSS9ELEVBQUVveEIsY0FBYyxDQUFDcnRCLEVBQUVDLEdBQVVELEdBQUUsU0FBUzh5QyxHQUFHOXlDLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUUwdUMsS0FBS0UsR0FBRyxHQUFHNXVDLEVBQUUsR0FBR0EsR0FBRSxXQUFXOEQsR0FBRSxNQUFNOHFDLEdBQUcsR0FBRzV1QyxFQUFFLEdBQUdBLEdBQUUsV0FBVyxJQUFJQSxFQUFFczBDLEdBQUd4dkIsU0FBU3d2QixHQUFHeHZCLGNBQVMsSUFBUy9nQixFQUFFLEtBQUtBLEVBQUUsSUFBSUQsR0FBRSxHQUFJL0QsSUFBVixRQUFzQnUwQyxHQUFHeHZCLFNBQVM5a0IsTUFDalUsU0FBUzQxQyxHQUFHOXhDLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUV3eEMsS0FBS2x1QyxFQUFFNnRDLEdBQUdyc0IsU0FBcUJ4aEIsRUFBRSxDQUFDdXNDLGVBQWY3dkMsRUFBRXl4QyxHQUFHenhDLEVBQUU4RCxFQUFFUixHQUF1Qm90QyxlQUFlcHRDLEVBQUUreEMsT0FBT3QxQyxFQUFFdTFDLGFBQWEsS0FBS0MsV0FBVyxLQUFLcnBDLEtBQUssTUFBTSxJQUFJdkIsRUFBRTVHLEVBQUV1c0MsUUFBNkUsR0FBckUsT0FBTzNsQyxFQUFFckgsRUFBRTRJLEtBQUs1SSxHQUFHQSxFQUFFNEksS0FBS3ZCLEVBQUV1QixLQUFLdkIsRUFBRXVCLEtBQUs1SSxHQUFHUyxFQUFFdXNDLFFBQVFodEMsRUFBRXFILEVBQUU3RyxFQUFFa3RCLFVBQWFsdEIsSUFBSTBnQixJQUFHLE9BQU83WixHQUFHQSxJQUFJNlosR0FBRWd3QixJQUFHLEVBQUdseEMsRUFBRXVzQyxlQUFlMEUsR0FBRy92QixHQUFFcXJCLGVBQWUwRSxPQUFPLENBQUMsR0FBRyxJQUFJendDLEVBQUUrckMsaUJBQWlCLE9BQU9sbEMsR0FBRyxJQUFJQSxFQUFFa2xDLGlCQUEwQyxRQUF4QmxsQyxFQUFFNUcsRUFBRXF4QyxxQkFBOEIsSUFBSSxJQUFJdmpDLEVBQUU5TixFQUFFeXhDLGtCQUFrQjloQyxFQUFFL0ksRUFBRWtILEVBQUU5UixHQUFtQyxHQUFoQ3VELEVBQUVneUMsYUFBYTNxQyxFQUFFckgsRUFBRWl5QyxXQUFXN2hDLEVBQUtreUIsR0FBR2x5QixFQUFFN0IsR0FBRyxPQUFPLE1BQU0wUixJQUFhbXVCLEdBQUc1dEMsRUFDbGdCOUQsSUFDQSxJQUFJODBDLEdBQUcsQ0FBQytCLFlBQVk5RyxHQUFHdHBCLFlBQVloRCxHQUFFaUQsV0FBV2pELEdBQUVtRCxVQUFVbkQsR0FBRW9ELG9CQUFvQnBELEdBQUVxRCxnQkFBZ0JyRCxHQUFFc0QsUUFBUXRELEdBQUV1RCxXQUFXdkQsR0FBRXdELE9BQU94RCxHQUFFeUQsU0FBU3pELEdBQUVrRCxjQUFjbEQsR0FBRXF6QixhQUFhcnpCLEdBQUVzekIsaUJBQWlCdHpCLEdBQUV1ekIsY0FBY3Z6QixJQUFHa3hCLEdBQUcsQ0FBQ2tDLFlBQVk5RyxHQUFHdHBCLFlBQVlnd0IsR0FBRy92QixXQUFXcXBCLEdBQUducEIsVUFBVXV2QixHQUFHdHZCLG9CQUFvQixTQUFTL2lCLEVBQUVDLEVBQUVoRSxHQUE2QyxPQUExQ0EsRUFBRSxNQUFPQSxFQUFjQSxFQUFFcUssT0FBTyxDQUFDdEcsSUFBSSxLQUFZbXlDLEdBQUcsRUFBRSxFQUFFSyxHQUFHcDFDLEtBQUssS0FBSzZDLEVBQUVELEdBQUcvRCxJQUFJK21CLGdCQUFnQixTQUFTaGpCLEVBQUVDLEdBQUcsT0FBT2t5QyxHQUFHLEVBQUUsRUFBRW55QyxFQUFFQyxJQUFJZ2pCLFFBQVEsU0FBU2pqQixFQUFFQyxHQUFHLElBQUloRSxFQUFFZzFDLEtBQzljLE9BRG1kaHhDLE9BQUUsSUFBU0EsRUFBRSxLQUFLQSxFQUFFRCxFQUFFQSxJQUFJL0QsRUFBRW94QixjQUFjLENBQUNydEIsRUFDamdCQyxHQUFVRCxHQUFHa2pCLFdBQVcsU0FBU2xqQixFQUFFQyxFQUFFaEUsR0FBRyxJQUFJQyxFQUFFKzBDLEtBQXVLLE9BQWxLaHhDLE9BQUUsSUFBU2hFLEVBQUVBLEVBQUVnRSxHQUFHQSxFQUFFL0QsRUFBRW14QixjQUFjbnhCLEVBQUVvd0MsVUFBVXJzQyxFQUFtRkQsR0FBakZBLEVBQUU5RCxFQUFFZzFDLE1BQU0sQ0FBQzFFLFFBQVEsS0FBS21GLFNBQVMsS0FBS0wsb0JBQW9CdHhDLEVBQUUweEMsa0JBQWtCenhDLElBQU8weEMsU0FBU0csR0FBRzEwQyxLQUFLLEtBQUtzakIsR0FBRTFnQixHQUFTLENBQUM5RCxFQUFFbXhCLGNBQWNydEIsSUFBSW1qQixPQUFPLFNBQVNuakIsR0FBNEIsT0FBZEEsRUFBRSxDQUFDa2YsUUFBUWxmLEdBQWhCaXhDLEtBQTRCNWpCLGNBQWNydEIsR0FBR29qQixTQUFTeXVCLEdBQUdodkIsY0FBYzZ2QixHQUFHTSxhQUFhM0MsR0FBRzRDLGlCQUFpQixTQUFTanpDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUU0MUMsR0FBRzd4QyxHQUFHOUQsRUFBRUQsRUFBRSxHQUFHdUQsRUFBRXZELEVBQUUsR0FDOVksT0FEaVpvMkMsSUFBRyxXQUFXLElBQUlwMkMsRUFBRXUwQyxHQUFHeHZCLFNBQVN3dkIsR0FBR3h2QixjQUFTLElBQVMvZ0IsRUFBRSxLQUFLQSxFQUFFLElBQUlULEVBQUVRLEdBQU4sUUFBaUJ3d0MsR0FBR3h2QixTQUM5ZS9rQixLQUFJLENBQUMrRCxFQUFFQyxJQUFXL0QsR0FBR2czQyxjQUFjLFNBQVNsekMsR0FBRyxJQUFJQyxFQUFFNHhDLElBQUcsR0FBSTUxQyxFQUFFZ0UsRUFBRSxHQUFVLE9BQVBBLEVBQUVBLEVBQUUsR0FBUyxDQUFDMHlDLEdBQUdHLEdBQUcxMUMsS0FBSyxLQUFLNkMsRUFBRUQsR0FBRyxDQUFDQyxFQUFFRCxJQUFJL0QsS0FBSzYwQyxHQUFHLENBQUNpQyxZQUFZOUcsR0FBR3RwQixZQUFZaXdCLEdBQUdod0IsV0FBV3FwQixHQUFHbnBCLFVBQVV3dkIsR0FBR3Z2QixvQkFBb0IwdkIsR0FBR3p2QixnQkFBZ0J1dkIsR0FBR3R2QixRQUFRNHZCLEdBQUczdkIsV0FBV211QixHQUFHbHVCLE9BQU8rdUIsR0FBRzl1QixTQUFTLFdBQVcsT0FBT2l1QixHQUFHRCxLQUFLdnVCLGNBQWM2dkIsR0FBR00sYUFBYTNDLEdBQUc0QyxpQkFBaUIsU0FBU2p6QyxFQUFFQyxHQUFHLElBQUloRSxFQUFFbzFDLEdBQUdELElBQUlsMUMsRUFBRUQsRUFBRSxHQUFHdUQsRUFBRXZELEVBQUUsR0FBeUcsT0FBdEdxMkMsSUFBRyxXQUFXLElBQUlyMkMsRUFBRXUwQyxHQUFHeHZCLFNBQVN3dkIsR0FBR3h2QixjQUFTLElBQVMvZ0IsRUFBRSxLQUFLQSxFQUFFLElBQUlULEVBQUVRLEdBQU4sUUFBaUJ3d0MsR0FBR3h2QixTQUFTL2tCLEtBQUksQ0FBQytELEVBQUVDLElBQVcvRCxHQUFHZzNDLGNBQWMsU0FBU2x6QyxHQUFHLElBQUlDLEVBQ3hnQm94QyxHQUFHRCxJQUFJbjFDLEVBQUVnRSxFQUFFLEdBQVUsT0FBUEEsRUFBRUEsRUFBRSxHQUFTLENBQUMyeUMsR0FBR0UsR0FBRzExQyxLQUFLLEtBQUs2QyxFQUFFRCxHQUFHLENBQUNDLEVBQUVELElBQUkvRCxLQUFLODBDLEdBQUcsQ0FBQ2dDLFlBQVk5RyxHQUFHdHBCLFlBQVlpd0IsR0FBR2h3QixXQUFXcXBCLEdBQUducEIsVUFBVXd2QixHQUFHdnZCLG9CQUFvQjB2QixHQUFHenZCLGdCQUFnQnV2QixHQUFHdHZCLFFBQVE0dkIsR0FBRzN2QixXQUFXMHVCLEdBQUd6dUIsT0FBTyt1QixHQUFHOXVCLFNBQVMsV0FBVyxPQUFPd3VCLEdBQUdSLEtBQUt2dUIsY0FBYzZ2QixHQUFHTSxhQUFhM0MsR0FBRzRDLGlCQUFpQixTQUFTanpDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUyMUMsR0FBR1IsSUFBSWwxQyxFQUFFRCxFQUFFLEdBQUd1RCxFQUFFdkQsRUFBRSxHQUF5RyxPQUF0R3EyQyxJQUFHLFdBQVcsSUFBSXIyQyxFQUFFdTBDLEdBQUd4dkIsU0FBU3d2QixHQUFHeHZCLGNBQVMsSUFBUy9nQixFQUFFLEtBQUtBLEVBQUUsSUFBSVQsRUFBRVEsR0FBTixRQUFpQnd3QyxHQUFHeHZCLFNBQVMva0IsS0FBSSxDQUFDK0QsRUFBRUMsSUFBVy9ELEdBQUdnM0MsY0FBYyxTQUFTbHpDLEdBQUcsSUFBSUMsRUFBRTJ4QyxHQUFHUixJQUFJbjFDLEVBQUVnRSxFQUFFLEdBQVUsT0FBUEEsRUFBRUEsRUFBRSxHQUFTLENBQUMyeUMsR0FBR0UsR0FBRzExQyxLQUFLLEtBQzVmNkMsRUFBRUQsR0FBRyxDQUFDQyxFQUFFRCxJQUFJL0QsS0FBS2szQyxHQUFHLEtBQUtDLEdBQUcsS0FBS0MsSUFBRyxFQUFHLFNBQVNDLEdBQUd0ekMsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRXMzQyxHQUFHLEVBQUUsS0FBSyxLQUFLLEdBQUd0M0MsRUFBRSt5QyxZQUFZLFVBQVUveUMsRUFBRTRJLEtBQUssVUFBVTVJLEVBQUVvcEIsVUFBVXBsQixFQUFFaEUsRUFBRTRzQixPQUFPN29CLEVBQUUvRCxFQUFFa3hCLFVBQVUsRUFBRSxPQUFPbnRCLEVBQUUydUMsWUFBWTN1QyxFQUFFMnVDLFdBQVdDLFdBQVczeUMsRUFBRStELEVBQUUydUMsV0FBVzF5QyxHQUFHK0QsRUFBRTZ1QyxZQUFZN3VDLEVBQUUydUMsV0FBVzF5QyxFQUMxUCxTQUFTdTNDLEdBQUd4ekMsRUFBRUMsR0FBRyxPQUFPRCxFQUFFd29CLEtBQUssS0FBSyxFQUFFLElBQUl2c0IsRUFBRStELEVBQUU2RSxLQUF5RSxPQUFPLFFBQTNFNUUsRUFBRSxJQUFJQSxFQUFFaEIsVUFBVWhELEVBQUV5cUIsZ0JBQWdCem1CLEVBQUUrb0IsU0FBU3RDLGNBQWMsS0FBS3ptQixLQUFtQkQsRUFBRXFsQixVQUFVcGxCLEdBQUUsR0FBTyxLQUFLLEVBQUUsT0FBb0QsUUFBN0NBLEVBQUUsS0FBS0QsRUFBRXl6QyxjQUFjLElBQUl4ekMsRUFBRWhCLFNBQVMsS0FBS2dCLEtBQVlELEVBQUVxbEIsVUFBVXBsQixHQUFFLEdBQU8sS0FBSyxHQUFZLFFBQVEsT0FBTSxHQUN0UixTQUFTeXpDLEdBQUcxekMsR0FBRyxHQUFHcXpDLEdBQUcsQ0FBQyxJQUFJcHpDLEVBQUVtekMsR0FBRyxHQUFHbnpDLEVBQUUsQ0FBQyxJQUFJaEUsRUFBRWdFLEVBQUUsSUFBSXV6QyxHQUFHeHpDLEVBQUVDLEdBQUcsQ0FBcUIsS0FBcEJBLEVBQUVvNEIsR0FBR3A4QixFQUFFbTdCLGdCQUFxQm9jLEdBQUd4ekMsRUFBRUMsR0FBK0MsT0FBM0NELEVBQUVtdEIsV0FBdUIsS0FBYm50QixFQUFFbXRCLFVBQWdCLEVBQUVrbUIsSUFBRyxPQUFHRixHQUFHbnpDLEdBQVNzekMsR0FBR0gsR0FBR2wzQyxHQUFHazNDLEdBQUduekMsRUFBRW96QyxHQUFHL2EsR0FBR3A0QixFQUFFeXJCLGlCQUFpQjFyQixFQUFFbXRCLFdBQXVCLEtBQWJudEIsRUFBRW10QixVQUFnQixFQUFFa21CLElBQUcsRUFBR0YsR0FBR256QyxHQUFHLFNBQVMyekMsR0FBRzN6QyxHQUFHLElBQUlBLEVBQUVBLEVBQUU2b0IsT0FBTyxPQUFPN29CLEdBQUcsSUFBSUEsRUFBRXdvQixLQUFLLElBQUl4b0IsRUFBRXdvQixLQUFLLEtBQUt4b0IsRUFBRXdvQixLQUFLeG9CLEVBQUVBLEVBQUU2b0IsT0FBT3NxQixHQUFHbnpDLEVBQzVULFNBQVM0ekMsR0FBRzV6QyxHQUFHLEdBQUdBLElBQUltekMsR0FBRyxPQUFNLEVBQUcsSUFBSUUsR0FBRyxPQUFPTSxHQUFHM3pDLEdBQUdxekMsSUFBRyxHQUFHLEVBQUcsSUFBSXB6QyxFQUFFRCxFQUFFNkUsS0FBSyxHQUFHLElBQUk3RSxFQUFFd29CLEtBQUssU0FBU3ZvQixHQUFHLFNBQVNBLElBQUk4M0IsR0FBRzkzQixFQUFFRCxFQUFFbXdDLGVBQWUsSUFBSWx3QyxFQUFFbXpDLEdBQUduekMsR0FBR3F6QyxHQUFHdHpDLEVBQUVDLEdBQUdBLEVBQUVvNEIsR0FBR3A0QixFQUFFbTNCLGFBQW1CLEdBQU51YyxHQUFHM3pDLEdBQU0sS0FBS0EsRUFBRXdvQixJQUFJLENBQWdELEtBQTdCeG9CLEVBQUUsUUFBcEJBLEVBQUVBLEVBQUVxdEIsZUFBeUJydEIsRUFBRXN0QixXQUFXLE1BQVcsTUFBTWpqQixNQUFNc1QsRUFBRSxNQUFNM2QsRUFBRSxDQUFpQixJQUFoQkEsRUFBRUEsRUFBRW8zQixZQUFnQm4zQixFQUFFLEVBQUVELEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUVmLFNBQVMsQ0FBQyxJQUFJaEQsRUFBRStELEVBQUVvRCxLQUFLLEdBOUZwRyxPQThGdUduSCxFQUFPLENBQUMsR0FBRyxJQUFJZ0UsRUFBRSxDQUFDbXpDLEdBQUcvYSxHQUFHcjRCLEVBQUVvM0IsYUFBYSxNQUFNcDNCLEVBQUVDLFFBOUY3SixNQThGc0toRSxHQTlGL0ksT0E4RnVKQSxHQTlGL0osT0E4RnVLQSxHQUFRZ0UsSUFBSUQsRUFBRUEsRUFBRW8zQixZQUFZZ2MsR0FBRyxXQUFXQSxHQUFHRCxHQUFHOWEsR0FBR3I0QixFQUFFcWxCLFVBQVUrUixhQUFhLEtBQUssT0FBTSxFQUNoZixTQUFTeWMsS0FBS1QsR0FBR0QsR0FBRyxLQUFLRSxJQUFHLEVBQUcsSUFBSVMsR0FBR2h0QixFQUFHN0Ysa0JBQWtCK3FCLElBQUcsRUFBRyxTQUFTcHNCLEdBQUU1ZixFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRytELEVBQUVvZCxNQUFNLE9BQU9yZCxFQUFFc3ZDLEdBQUdydkMsRUFBRSxLQUFLaEUsRUFBRUMsR0FBR216QyxHQUFHcHZDLEVBQUVELEVBQUVxZCxNQUFNcGhCLEVBQUVDLEdBQUcsU0FBUzYzQyxHQUFHL3pDLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsR0FBR3ZELEVBQUVBLEVBQUV5SixPQUFPLElBQUltQixFQUFFNUcsRUFBRW9mLElBQThCLE9BQTFCd3NCLEdBQUc1ckMsRUFBRVQsR0FBR3RELEVBQUUwMEMsR0FBRzV3QyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRTJLLEVBQUVySCxHQUFNLE9BQU9RLEdBQUlnc0MsSUFBNEcvckMsRUFBRWt0QixXQUFXLEVBQUV2TixHQUFFNWYsRUFBRUMsRUFBRS9ELEVBQUVzRCxHQUFVUyxFQUFFb2QsUUFBcklwZCxFQUFFb3NDLFlBQVlyc0MsRUFBRXFzQyxZQUFZcHNDLEVBQUVrdEIsWUFBWSxJQUFJbnRCLEVBQUUrckMsZ0JBQWdCdnNDLElBQUlRLEVBQUUrckMsZUFBZSxHQUFHaUksR0FBR2gwQyxFQUFFQyxFQUFFVCxJQUN0VSxTQUFTeTBDLEdBQUdqMEMsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUVzRCxFQUFFcUgsR0FBRyxHQUFHLE9BQU83RyxFQUFFLENBQUMsSUFBSStOLEVBQUU5UixFQUFFNEksS0FBSyxNQUFHLG1CQUFvQmtKLEdBQUltbUMsR0FBR25tQyxTQUFJLElBQVNBLEVBQUV6SixjQUFjLE9BQU9ySSxFQUFFbUosY0FBUyxJQUFTbkosRUFBRXFJLGVBQXNEdEUsRUFBRWl2QyxHQUFHaHpDLEVBQUU0SSxLQUFLLEtBQUszSSxFQUFFLEtBQUsrRCxFQUFFbEQsS0FBSzhKLElBQUt3WSxJQUFJcGYsRUFBRW9mLElBQUlyZixFQUFFNm9CLE9BQU81b0IsRUFBU0EsRUFBRW9kLE1BQU1yZCxJQUExR0MsRUFBRXVvQixJQUFJLEdBQUd2b0IsRUFBRTRFLEtBQUtrSixFQUFFb21DLEdBQUduMEMsRUFBRUMsRUFBRThOLEVBQUU3UixFQUFFc0QsRUFBRXFILElBQXVGLE9BQVZrSCxFQUFFL04sRUFBRXFkLE1BQVM3ZCxFQUFFcUgsSUFBSXJILEVBQUV1TyxFQUFFb2lDLGVBQTBCbDBDLEVBQUUsUUFBZEEsRUFBRUEsRUFBRW1KLFNBQW1CbkosRUFBRStsQyxJQUFLeGlDLEVBQUV0RCxJQUFJOEQsRUFBRXFmLE1BQU1wZixFQUFFb2YsS0FBWTIwQixHQUFHaDBDLEVBQUVDLEVBQUU0RyxJQUFHNUcsRUFBRWt0QixXQUFXLEdBQUVudEIsRUFBRTh1QyxHQUFHL2dDLEVBQUU3UixJQUFLbWpCLElBQUlwZixFQUFFb2YsSUFBSXJmLEVBQUU2b0IsT0FBTzVvQixFQUFTQSxFQUFFb2QsTUFBTXJkLEdBQ25iLFNBQVNtMEMsR0FBR24wQyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEVBQUVxSCxHQUFHLE9BQU8sT0FBTzdHLEdBQUdnaUMsR0FBR2hpQyxFQUFFbXdDLGNBQWNqMEMsSUFBSThELEVBQUVxZixNQUFNcGYsRUFBRW9mLE1BQU0yc0IsSUFBRyxFQUFHeHNDLEVBQUVxSCxJQUFJNUcsRUFBRThyQyxlQUFlL3JDLEVBQUUrckMsZUFBZWlJLEdBQUdoMEMsRUFBRUMsRUFBRTRHLElBQUl1dEMsR0FBR3AwQyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRTJLLEdBQUcsU0FBU3d0QyxHQUFHcjBDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUVnRSxFQUFFb2YsS0FBTyxPQUFPcmYsR0FBRyxPQUFPL0QsR0FBRyxPQUFPK0QsR0FBR0EsRUFBRXFmLE1BQU1wakIsS0FBRWdFLEVBQUVrdEIsV0FBVyxLQUFJLFNBQVNpbkIsR0FBR3AwQyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEdBQUcsSUFBSXFILEVBQUV1WSxHQUFFbmpCLEdBQUdzc0MsR0FBR3RwQixHQUFFQyxRQUE0QyxPQUFwQ3JZLEVBQUUyaEMsR0FBR3ZvQyxFQUFFNEcsR0FBR2dsQyxHQUFHNXJDLEVBQUVULEdBQUd2RCxFQUFFMjBDLEdBQUc1d0MsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUUySyxFQUFFckgsR0FBTSxPQUFPUSxHQUFJZ3NDLElBQTRHL3JDLEVBQUVrdEIsV0FBVyxFQUFFdk4sR0FBRTVmLEVBQUVDLEVBQUVoRSxFQUFFdUQsR0FBVVMsRUFBRW9kLFFBQXJJcGQsRUFBRW9zQyxZQUFZcnNDLEVBQUVxc0MsWUFBWXBzQyxFQUFFa3RCLFlBQVksSUFBSW50QixFQUFFK3JDLGdCQUFnQnZzQyxJQUFJUSxFQUFFK3JDLGVBQWUsR0FBR2lJLEdBQUdoMEMsRUFBRUMsRUFBRVQsSUFDM2IsU0FBUzgwQyxHQUFHdDBDLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsR0FBRyxHQUFHNGYsR0FBRW5qQixHQUFHLENBQUMsSUFBSTRLLEdBQUUsRUFBR2lpQyxHQUFHN29DLFFBQVE0RyxHQUFFLEVBQVcsR0FBUmdsQyxHQUFHNXJDLEVBQUVULEdBQU0sT0FBT1MsRUFBRW9sQixVQUFVLE9BQU9ybEIsSUFBSUEsRUFBRWt0QixVQUFVLEtBQUtqdEIsRUFBRWl0QixVQUFVLEtBQUtqdEIsRUFBRWt0QixXQUFXLEdBQUc0Z0IsR0FBRzl0QyxFQUFFaEUsRUFBRUMsR0FBR2d5QyxHQUFHanVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsR0FBR3RELEdBQUUsT0FBUSxHQUFHLE9BQU84RCxFQUFFLENBQUMsSUFBSStOLEVBQUU5TixFQUFFb2xCLFVBQVV6VixFQUFFM1AsRUFBRWt3QyxjQUFjcGlDLEVBQUUyQyxNQUFNZCxFQUFFLElBQUk2UCxFQUFFMVIsRUFBRWlFLFFBQVFuVyxFQUFFSSxFQUFFbUksWUFBWSxpQkFBa0J2SSxHQUFHLE9BQU9BLEVBQUVBLEVBQUVvd0MsR0FBR3B3QyxHQUF3QkEsRUFBRTJzQyxHQUFHdm9DLEVBQXpCcEUsRUFBRXVqQixHQUFFbmpCLEdBQUdzc0MsR0FBR3RwQixHQUFFQyxTQUFtQixJQUFJbGpCLEVBQUVDLEVBQUV5SSx5QkFBeUJoSCxFQUFFLG1CQUFvQjFCLEdBQUcsbUJBQW9CK1IsRUFBRW9nQyx3QkFBd0J6d0MsR0FBRyxtQkFBb0JxUSxFQUFFa2dDLGtDQUN0ZCxtQkFBb0JsZ0MsRUFBRStDLDRCQUE0QmxCLElBQUkxVCxHQUFHdWpCLElBQUk1akIsSUFBSW15QyxHQUFHL3RDLEVBQUU4TixFQUFFN1IsRUFBRUwsR0FBR3N3QyxJQUFHLEVBQUcsSUFBSWw3QixFQUFFaFIsRUFBRW90QixjQUFjdGYsRUFBRTBELE1BQU1SLEVBQUUrN0IsR0FBRy9zQyxFQUFFL0QsRUFBRTZSLEVBQUV2TyxHQUFHaWdCLEVBQUV4ZixFQUFFb3RCLGNBQWN6ZCxJQUFJMVQsR0FBRytVLElBQUl3TyxHQUFHTixHQUFFRCxTQUFTaXRCLElBQUksbUJBQW9CbndDLElBQUl1eEMsR0FBR3R0QyxFQUFFaEUsRUFBRUQsRUFBRUUsR0FBR3VqQixFQUFFeGYsRUFBRW90QixnQkFBZ0J6ZCxFQUFFdThCLElBQUkwQixHQUFHNXRDLEVBQUVoRSxFQUFFMlQsRUFBRTFULEVBQUUrVSxFQUFFd08sRUFBRTVqQixLQUFLNkIsR0FBRyxtQkFBb0JxUSxFQUFFcWdDLDJCQUEyQixtQkFBb0JyZ0MsRUFBRXNnQyxxQkFBcUIsbUJBQW9CdGdDLEVBQUVzZ0Msb0JBQW9CdGdDLEVBQUVzZ0MscUJBQXFCLG1CQUFvQnRnQyxFQUFFcWdDLDJCQUEyQnJnQyxFQUFFcWdDLDZCQUE2QixtQkFDemVyZ0MsRUFBRWdFLG9CQUFvQjlSLEVBQUVrdEIsV0FBVyxLQUFLLG1CQUFvQnBmLEVBQUVnRSxvQkFBb0I5UixFQUFFa3RCLFdBQVcsR0FBR2x0QixFQUFFa3dDLGNBQWNqMEMsRUFBRStELEVBQUVvdEIsY0FBYzVOLEdBQUcxUixFQUFFMkMsTUFBTXhVLEVBQUU2UixFQUFFMEQsTUFBTWdPLEVBQUUxUixFQUFFaUUsUUFBUW5XLEVBQUVLLEVBQUUwVCxJQUFJLG1CQUFvQjdCLEVBQUVnRSxvQkFBb0I5UixFQUFFa3RCLFdBQVcsR0FBR2p4QixHQUFFLFFBQVM2UixFQUFFOU4sRUFBRW9sQixVQUFVcW5CLEdBQUcxc0MsRUFBRUMsR0FBRzJQLEVBQUUzUCxFQUFFa3dDLGNBQWNwaUMsRUFBRTJDLE1BQU16USxFQUFFNEUsT0FBTzVFLEVBQUUrdUMsWUFBWXAvQixFQUFFdzdCLEdBQUduckMsRUFBRTRFLEtBQUsrSyxHQUFHNlAsRUFBRTFSLEVBQUVpRSxRQUF3QixpQkFBaEJuVyxFQUFFSSxFQUFFbUksY0FBaUMsT0FBT3ZJLEVBQUVBLEVBQUVvd0MsR0FBR3B3QyxHQUF3QkEsRUFBRTJzQyxHQUFHdm9DLEVBQXpCcEUsRUFBRXVqQixHQUFFbmpCLEdBQUdzc0MsR0FBR3RwQixHQUFFQyxVQUFpRHhoQixFQUFFLG1CQUFoQzFCLEVBQUVDLEVBQUV5SSwyQkFBbUQsbUJBQ2plcUosRUFBRW9nQywwQkFBMEIsbUJBQW9CcGdDLEVBQUVrZ0Msa0NBQWtDLG1CQUFvQmxnQyxFQUFFK0MsNEJBQTRCbEIsSUFBSTFULEdBQUd1akIsSUFBSTVqQixJQUFJbXlDLEdBQUcvdEMsRUFBRThOLEVBQUU3UixFQUFFTCxHQUFHc3dDLElBQUcsRUFBRzFzQixFQUFFeGYsRUFBRW90QixjQUFjdGYsRUFBRTBELE1BQU1nTyxFQUFFdXRCLEdBQUcvc0MsRUFBRS9ELEVBQUU2UixFQUFFdk8sR0FBR3lSLEVBQUVoUixFQUFFb3RCLGNBQWN6ZCxJQUFJMVQsR0FBR3VqQixJQUFJeE8sR0FBR2tPLEdBQUVELFNBQVNpdEIsSUFBSSxtQkFBb0Jud0MsSUFBSXV4QyxHQUFHdHRDLEVBQUVoRSxFQUFFRCxFQUFFRSxHQUFHK1UsRUFBRWhSLEVBQUVvdEIsZ0JBQWdCcnhCLEVBQUVtd0MsSUFBSTBCLEdBQUc1dEMsRUFBRWhFLEVBQUUyVCxFQUFFMVQsRUFBRXVqQixFQUFFeE8sRUFBRXBWLEtBQUs2QixHQUFHLG1CQUFvQnFRLEVBQUV3bUMsNEJBQTRCLG1CQUFvQnhtQyxFQUFFeW1DLHNCQUFzQixtQkFBb0J6bUMsRUFBRXltQyxxQkFBcUJ6bUMsRUFBRXltQyxvQkFBb0J0NEMsRUFDemYrVSxFQUFFcFYsR0FBRyxtQkFBb0JrUyxFQUFFd21DLDRCQUE0QnhtQyxFQUFFd21DLDJCQUEyQnI0QyxFQUFFK1UsRUFBRXBWLElBQUksbUJBQW9Ca1MsRUFBRTBtQyxxQkFBcUJ4MEMsRUFBRWt0QixXQUFXLEdBQUcsbUJBQW9CcGYsRUFBRW9nQywwQkFBMEJsdUMsRUFBRWt0QixXQUFXLE9BQU8sbUJBQW9CcGYsRUFBRTBtQyxvQkFBb0I3a0MsSUFBSTVQLEVBQUVtd0MsZUFBZTF3QixJQUFJemYsRUFBRXF0QixnQkFBZ0JwdEIsRUFBRWt0QixXQUFXLEdBQUcsbUJBQW9CcGYsRUFBRW9nQyx5QkFBeUJ2K0IsSUFBSTVQLEVBQUVtd0MsZUFBZTF3QixJQUFJemYsRUFBRXF0QixnQkFBZ0JwdEIsRUFBRWt0QixXQUFXLEtBQUtsdEIsRUFBRWt3QyxjQUFjajBDLEVBQUUrRCxFQUFFb3RCLGNBQWNwYyxHQUFHbEQsRUFBRTJDLE1BQU14VSxFQUFFNlIsRUFBRTBELE1BQU1SLEVBQUVsRCxFQUFFaUUsUUFBUW5XLEVBQUVLLEVBQUVGLElBQ2xmLG1CQUFvQitSLEVBQUUwbUMsb0JBQW9CN2tDLElBQUk1UCxFQUFFbXdDLGVBQWUxd0IsSUFBSXpmLEVBQUVxdEIsZ0JBQWdCcHRCLEVBQUVrdEIsV0FBVyxHQUFHLG1CQUFvQnBmLEVBQUVvZ0MseUJBQXlCditCLElBQUk1UCxFQUFFbXdDLGVBQWUxd0IsSUFBSXpmLEVBQUVxdEIsZ0JBQWdCcHRCLEVBQUVrdEIsV0FBVyxLQUFLanhCLEdBQUUsR0FBSSxPQUFPdzRDLEdBQUcxMEMsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUUySyxFQUFFckgsR0FDNU8sU0FBU2sxQyxHQUFHMTBDLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsRUFBRXFILEdBQUd3dEMsR0FBR3IwQyxFQUFFQyxHQUFHLElBQUk4TixFQUFFLElBQWlCLEdBQVo5TixFQUFFa3RCLFdBQWMsSUFBSWp4QixJQUFJNlIsRUFBRSxPQUFPdk8sR0FBR3dwQyxHQUFHL29DLEVBQUVoRSxHQUFFLEdBQUkrM0MsR0FBR2gwQyxFQUFFQyxFQUFFNEcsR0FBRzNLLEVBQUUrRCxFQUFFb2xCLFVBQVV5dUIsR0FBRzUwQixRQUFRamYsRUFBRSxJQUFJMlAsRUFBRTdCLEdBQUcsbUJBQW9COVIsRUFBRXdJLHlCQUF5QixLQUFLdkksRUFBRXdKLFNBQTJJLE9BQWxJekYsRUFBRWt0QixXQUFXLEVBQUUsT0FBT250QixHQUFHK04sR0FBRzlOLEVBQUVvZCxNQUFNZ3lCLEdBQUdwdkMsRUFBRUQsRUFBRXFkLE1BQU0sS0FBS3hXLEdBQUc1RyxFQUFFb2QsTUFBTWd5QixHQUFHcHZDLEVBQUUsS0FBSzJQLEVBQUUvSSxJQUFJK1ksR0FBRTVmLEVBQUVDLEVBQUUyUCxFQUFFL0ksR0FBRzVHLEVBQUVvdEIsY0FBY254QixFQUFFdVYsTUFBTWpTLEdBQUd3cEMsR0FBRy9vQyxFQUFFaEUsR0FBRSxHQUFXZ0UsRUFBRW9kLE1BQU0sU0FBU3MzQixHQUFHMzBDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXFsQixVQUFVcGxCLEVBQUUyMEMsZUFBZWhNLEdBQUc1b0MsRUFBRUMsRUFBRTIwQyxlQUFlMzBDLEVBQUUyMEMsaUJBQWlCMzBDLEVBQUUrUixTQUFTL1IsRUFBRStSLFNBQVM0MkIsR0FBRzVvQyxFQUFFQyxFQUFFK1IsU0FBUSxHQUFJNDlCLEdBQUc1dkMsRUFBRUMsRUFBRWt2QixlQUNwZSxJQU9vWDBsQixHQUFNQyxHQUFHQyxHQVB6WEMsR0FBRyxDQUFDMW5CLFdBQVcsS0FBSzJuQixVQUFVLEdBQ2xDLFNBQVNDLEdBQUdsMUMsRUFBRUMsRUFBRWhFLEdBQUcsSUFBK0MyVCxFQUEzQzFULEVBQUUrRCxFQUFFbEQsS0FBS3lDLEVBQUVTLEVBQUV3ekMsYUFBYTVzQyxFQUFFMlksR0FBRU4sUUFBUW5SLEdBQUUsRUFBcU4sSUFBL002QixFQUFFLElBQWlCLEdBQVozUCxFQUFFa3RCLGNBQWlCdmQsRUFBRSxJQUFPLEVBQUYvSSxLQUFPLE9BQU83RyxHQUFHLE9BQU9BLEVBQUVxdEIsZ0JBQWdCemQsR0FBRzdCLEdBQUUsRUFBRzlOLEVBQUVrdEIsWUFBWSxJQUFJLE9BQU9udEIsR0FBRyxPQUFPQSxFQUFFcXRCLG9CQUFlLElBQVM3dEIsRUFBRTIxQyxXQUFVLElBQUszMUMsRUFBRTQxQyw2QkFBNkJ2dUMsR0FBRyxHQUFHa1ksR0FBRVMsR0FBSSxFQUFGM1ksR0FBUSxPQUFPN0csRUFBRSxDQUE0QixRQUEzQixJQUFTUixFQUFFMjFDLFVBQVV6QixHQUFHenpDLEdBQU04TixFQUFFLENBQTZDLEdBQTVDQSxFQUFFdk8sRUFBRTIxQyxVQUFTMzFDLEVBQUU0dkMsR0FBRyxLQUFLbHpDLEVBQUUsRUFBRSxPQUFRMnNCLE9BQU81b0IsRUFBSyxJQUFZLEVBQVBBLEVBQUVsRCxNQUFRLElBQUlpRCxFQUFFLE9BQU9DLEVBQUVvdEIsY0FBY3B0QixFQUFFb2QsTUFBTUEsTUFBTXBkLEVBQUVvZCxNQUFNN2QsRUFBRTZkLE1BQU1yZCxFQUFFLE9BQU9BLEdBQUdBLEVBQUU2b0IsT0FBT3JwQixFQUFFUSxFQUFFQSxFQUFFeXRCLFFBQzNhLE9BRG1ieHhCLEVBQUVtekMsR0FBR3JoQyxFQUFFN1IsRUFBRUQsRUFBRSxPQUFRNHNCLE9BQ2pmNW9CLEVBQUVULEVBQUVpdUIsUUFBUXh4QixFQUFFZ0UsRUFBRW90QixjQUFjMm5CLEdBQUcvMEMsRUFBRW9kLE1BQU03ZCxFQUFTdkQsRUFBb0MsT0FBbENDLEVBQUVzRCxFQUFFMkssU0FBU2xLLEVBQUVvdEIsY0FBYyxLQUFZcHRCLEVBQUVvZCxNQUFNaXlCLEdBQUdydkMsRUFBRSxLQUFLL0QsRUFBRUQsR0FBRyxHQUFHLE9BQU8rRCxFQUFFcXRCLGNBQWMsQ0FBdUIsR0FBWm54QixHQUFWOEQsRUFBRUEsRUFBRXFkLE9BQVVvUSxRQUFXMWYsRUFBRSxDQUFnRCxHQUEvQ3ZPLEVBQUVBLEVBQUUyMUMsVUFBU2w1QyxFQUFFNnlDLEdBQUc5dUMsRUFBRUEsRUFBRXl6QyxlQUFnQjVxQixPQUFPNW9CLEVBQUssSUFBWSxFQUFQQSxFQUFFbEQsUUFBVWdSLEVBQUUsT0FBTzlOLEVBQUVvdEIsY0FBY3B0QixFQUFFb2QsTUFBTUEsTUFBTXBkLEVBQUVvZCxTQUFVcmQsRUFBRXFkLE1BQU8sSUFBSXBoQixFQUFFb2hCLE1BQU10UCxFQUFFLE9BQU9BLEdBQUdBLEVBQUU4YSxPQUFPNXNCLEVBQUU4UixFQUFFQSxFQUFFMGYsUUFBOEYsT0FBdEZ2eEIsRUFBRTR5QyxHQUFHNXlDLEVBQUVzRCxJQUFLcXBCLE9BQU81b0IsRUFBRWhFLEVBQUV3eEIsUUFBUXZ4QixFQUFFRCxFQUFFMnZDLG9CQUFvQixFQUFFM3JDLEVBQUVvdEIsY0FBYzJuQixHQUFHLzBDLEVBQUVvZCxNQUFNcGhCLEVBQVNDLEVBQW9ELE9BQWxERCxFQUFFb3pDLEdBQUdwdkMsRUFBRUQsRUFBRXFkLE1BQU03ZCxFQUFFMkssU0FBU2xPLEdBQUdnRSxFQUFFb3RCLGNBQWMsS0FBWXB0QixFQUFFb2QsTUFDbmZwaEIsRUFBWSxHQUFWK0QsRUFBRUEsRUFBRXFkLE1BQVN0UCxFQUFFLENBQThFLEdBQTdFQSxFQUFFdk8sRUFBRTIxQyxVQUFTMzFDLEVBQUU0dkMsR0FBRyxLQUFLbHpDLEVBQUUsRUFBRSxPQUFRMnNCLE9BQU81b0IsRUFBRVQsRUFBRTZkLE1BQU1yZCxFQUFFLE9BQU9BLElBQUlBLEVBQUU2b0IsT0FBT3JwQixHQUFNLElBQVksRUFBUFMsRUFBRWxELE1BQVEsSUFBSWlELEVBQUUsT0FBT0MsRUFBRW90QixjQUFjcHRCLEVBQUVvZCxNQUFNQSxNQUFNcGQsRUFBRW9kLE1BQU03ZCxFQUFFNmQsTUFBTXJkLEVBQUUsT0FBT0EsR0FBR0EsRUFBRTZvQixPQUFPcnBCLEVBQUVRLEVBQUVBLEVBQUV5dEIsUUFBb0gsT0FBNUd4eEIsRUFBRW16QyxHQUFHcmhDLEVBQUU3UixFQUFFRCxFQUFFLE9BQVE0c0IsT0FBTzVvQixFQUFFVCxFQUFFaXVCLFFBQVF4eEIsRUFBRUEsRUFBRWt4QixXQUFXLEVBQUUzdEIsRUFBRW9zQyxvQkFBb0IsRUFBRTNyQyxFQUFFb3RCLGNBQWMybkIsR0FBRy8wQyxFQUFFb2QsTUFBTTdkLEVBQVN2RCxFQUF1QixPQUFyQmdFLEVBQUVvdEIsY0FBYyxLQUFZcHRCLEVBQUVvZCxNQUFNZ3lCLEdBQUdwdkMsRUFBRUQsRUFBRVIsRUFBRTJLLFNBQVNsTyxHQUMxWCxTQUFTbzVDLEdBQUdyMUMsRUFBRUMsR0FBR0QsRUFBRStyQyxlQUFlOXJDLElBQUlELEVBQUUrckMsZUFBZTlyQyxHQUFHLElBQUloRSxFQUFFK0QsRUFBRWt0QixVQUFVLE9BQU9qeEIsR0FBR0EsRUFBRTh2QyxlQUFlOXJDLElBQUloRSxFQUFFOHZDLGVBQWU5ckMsR0FBRzByQyxHQUFHM3JDLEVBQUU2b0IsT0FBTzVvQixHQUFHLFNBQVNxMUMsR0FBR3QxQyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEVBQUVxSCxHQUFHLElBQUlrSCxFQUFFL04sRUFBRXF0QixjQUFjLE9BQU90ZixFQUFFL04sRUFBRXF0QixjQUFjLENBQUNrb0IsWUFBWXQxQyxFQUFFdTFDLFVBQVUsS0FBS0MsbUJBQW1CLEVBQUVDLEtBQUt4NUMsRUFBRXk1QyxLQUFLMTVDLEVBQUUyNUMsZUFBZSxFQUFFQyxTQUFTcjJDLEVBQUVtdkMsV0FBVzluQyxJQUFJa0gsRUFBRXduQyxZQUFZdDFDLEVBQUU4TixFQUFFeW5DLFVBQVUsS0FBS3puQyxFQUFFMG5DLG1CQUFtQixFQUFFMW5DLEVBQUUybkMsS0FBS3g1QyxFQUFFNlIsRUFBRTRuQyxLQUFLMTVDLEVBQUU4UixFQUFFNm5DLGVBQWUsRUFBRTduQyxFQUFFOG5DLFNBQVNyMkMsRUFBRXVPLEVBQUU0Z0MsV0FBVzluQyxHQUN6YixTQUFTaXZDLEdBQUc5MUMsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSUMsRUFBRStELEVBQUV3ekMsYUFBYWowQyxFQUFFdEQsRUFBRWswQyxZQUFZdnBDLEVBQUUzSyxFQUFFeTVDLEtBQXFDLEdBQWhDLzFCLEdBQUU1ZixFQUFFQyxFQUFFL0QsRUFBRWlPLFNBQVNsTyxHQUFrQixJQUFPLEdBQXRCQyxFQUFFc2pCLEdBQUVOLFVBQXFCaGpCLEVBQUksRUFBRkEsRUFBSSxFQUFFK0QsRUFBRWt0QixXQUFXLE9BQU8sQ0FBQyxHQUFHLE9BQU9udEIsR0FBRyxJQUFpQixHQUFaQSxFQUFFbXRCLFdBQWNudEIsRUFBRSxJQUFJQSxFQUFFQyxFQUFFb2QsTUFBTSxPQUFPcmQsR0FBRyxDQUFDLEdBQUcsS0FBS0EsRUFBRXdvQixJQUFJLE9BQU94b0IsRUFBRXF0QixlQUFlZ29CLEdBQUdyMUMsRUFBRS9ELFFBQVEsR0FBRyxLQUFLK0QsRUFBRXdvQixJQUFJNnNCLEdBQUdyMUMsRUFBRS9ELFFBQVEsR0FBRyxPQUFPK0QsRUFBRXFkLE1BQU0sQ0FBQ3JkLEVBQUVxZCxNQUFNd0wsT0FBTzdvQixFQUFFQSxFQUFFQSxFQUFFcWQsTUFBTSxTQUFTLEdBQUdyZCxJQUFJQyxFQUFFLE1BQU1ELEVBQUUsS0FBSyxPQUFPQSxFQUFFeXRCLFNBQVMsQ0FBQyxHQUFHLE9BQU96dEIsRUFBRTZvQixRQUFRN29CLEVBQUU2b0IsU0FBUzVvQixFQUFFLE1BQU1ELEVBQUVBLEVBQUVBLEVBQUU2b0IsT0FBTzdvQixFQUFFeXRCLFFBQVE1RSxPQUFPN29CLEVBQUU2b0IsT0FBTzdvQixFQUFFQSxFQUFFeXRCLFFBQVF2eEIsR0FBRyxFQUFTLEdBQVA2aUIsR0FBRVMsR0FBRXRqQixHQUFNLElBQVksRUFBUCtELEVBQUVsRCxNQUFRa0QsRUFBRW90QixjQUNoZixVQUFVLE9BQU83dEIsR0FBRyxJQUFLLFdBQXFCLElBQVZ2RCxFQUFFZ0UsRUFBRW9kLE1BQVU3ZCxFQUFFLEtBQUssT0FBT3ZELEdBQWlCLFFBQWQrRCxFQUFFL0QsRUFBRWl4QixZQUFvQixPQUFPZ2pCLEdBQUdsd0MsS0FBS1IsRUFBRXZELEdBQUdBLEVBQUVBLEVBQUV3eEIsUUFBWSxRQUFKeHhCLEVBQUV1RCxJQUFZQSxFQUFFUyxFQUFFb2QsTUFBTXBkLEVBQUVvZCxNQUFNLE9BQU83ZCxFQUFFdkQsRUFBRXd4QixRQUFReHhCLEVBQUV3eEIsUUFBUSxNQUFNNm5CLEdBQUdyMUMsR0FBRSxFQUFHVCxFQUFFdkQsRUFBRTRLLEVBQUU1RyxFQUFFMHVDLFlBQVksTUFBTSxJQUFLLFlBQTZCLElBQWpCMXlDLEVBQUUsS0FBS3VELEVBQUVTLEVBQUVvZCxNQUFVcGQsRUFBRW9kLE1BQU0sS0FBSyxPQUFPN2QsR0FBRyxDQUFlLEdBQUcsUUFBakJRLEVBQUVSLEVBQUUwdEIsWUFBdUIsT0FBT2dqQixHQUFHbHdDLEdBQUcsQ0FBQ0MsRUFBRW9kLE1BQU03ZCxFQUFFLE1BQU1RLEVBQUVSLEVBQUVpdUIsUUFBUWp1QixFQUFFaXVCLFFBQVF4eEIsRUFBRUEsRUFBRXVELEVBQUVBLEVBQUVRLEVBQUVzMUMsR0FBR3IxQyxHQUFFLEVBQUdoRSxFQUFFLEtBQUs0SyxFQUFFNUcsRUFBRTB1QyxZQUFZLE1BQU0sSUFBSyxXQUFXMkcsR0FBR3IxQyxHQUFFLEVBQUcsS0FBSyxVQUFLLEVBQU9BLEVBQUUwdUMsWUFBWSxNQUFNLFFBQVExdUMsRUFBRW90QixjQUFjLEtBQUssT0FBT3B0QixFQUFFb2QsTUFDL2YsU0FBUzIyQixHQUFHaDBDLEVBQUVDLEVBQUVoRSxHQUFHLE9BQU8rRCxJQUFJQyxFQUFFNmtCLGFBQWE5a0IsRUFBRThrQixjQUFjLElBQUk1b0IsRUFBRStELEVBQUU4ckMsZUFBNEIsR0FBYixJQUFJN3ZDLEdBQUdpeEMsR0FBR2p4QyxHQUFNK0QsRUFBRTJyQyxvQkFBb0IzdkMsRUFBRSxPQUFPLEtBQUssR0FBRyxPQUFPK0QsR0FBR0MsRUFBRW9kLFFBQVFyZCxFQUFFcWQsTUFBTSxNQUFNaFQsTUFBTXNULEVBQUUsTUFBTSxHQUFHLE9BQU8xZCxFQUFFb2QsTUFBTSxDQUE0QyxJQUFqQ3BoQixFQUFFNnlDLEdBQVo5dUMsRUFBRUMsRUFBRW9kLE1BQWFyZCxFQUFFeXpDLGNBQWN4ekMsRUFBRW9kLE1BQU1waEIsRUFBTUEsRUFBRTRzQixPQUFPNW9CLEVBQUUsT0FBT0QsRUFBRXl0QixTQUFTenRCLEVBQUVBLEVBQUV5dEIsU0FBUXh4QixFQUFFQSxFQUFFd3hCLFFBQVFxaEIsR0FBRzl1QyxFQUFFQSxFQUFFeXpDLGVBQWdCNXFCLE9BQU81b0IsRUFBRWhFLEVBQUV3eEIsUUFBUSxLQUFLLE9BQU94dEIsRUFBRW9kLE1BSzVULFNBQVMwNEIsR0FBRy8xQyxFQUFFQyxHQUFHLE9BQU9ELEVBQUU2MUMsVUFBVSxJQUFLLFNBQVM1MUMsRUFBRUQsRUFBRTIxQyxLQUFLLElBQUksSUFBSTE1QyxFQUFFLEtBQUssT0FBT2dFLEdBQUcsT0FBT0EsRUFBRWl0QixZQUFZanhCLEVBQUVnRSxHQUFHQSxFQUFFQSxFQUFFd3RCLFFBQVEsT0FBT3h4QixFQUFFK0QsRUFBRTIxQyxLQUFLLEtBQUsxNUMsRUFBRXd4QixRQUFRLEtBQUssTUFBTSxJQUFLLFlBQVl4eEIsRUFBRStELEVBQUUyMUMsS0FBSyxJQUFJLElBQUl6NUMsRUFBRSxLQUFLLE9BQU9ELEdBQUcsT0FBT0EsRUFBRWl4QixZQUFZaHhCLEVBQUVELEdBQUdBLEVBQUVBLEVBQUV3eEIsUUFBUSxPQUFPdnhCLEVBQUUrRCxHQUFHLE9BQU9ELEVBQUUyMUMsS0FBSzMxQyxFQUFFMjFDLEtBQUssS0FBSzMxQyxFQUFFMjFDLEtBQUtsb0IsUUFBUSxLQUFLdnhCLEVBQUV1eEIsUUFBUSxNQUMvVyxTQUFTdW9CLEdBQUdoMkMsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSUMsRUFBRStELEVBQUV3ekMsYUFBYSxPQUFPeHpDLEVBQUV1b0IsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTyxLQUFLLEtBQUssRUFBRSxPQUFPcEosR0FBRW5mLEVBQUU0RSxPQUFPOGpDLEtBQUssS0FBSyxLQUFLLEVBQUUsT0FBT29ILEtBQUtueEIsR0FBRU8sSUFBR1AsR0FBRUssS0FBR2hqQixFQUFFZ0UsRUFBRW9sQixXQUFZdXZCLGlCQUFpQjM0QyxFQUFFK1YsUUFBUS9WLEVBQUUyNEMsZUFBZTM0QyxFQUFFMjRDLGVBQWUsTUFBTSxPQUFPNTBDLEdBQUcsT0FBT0EsRUFBRXFkLFFBQVF1MkIsR0FBRzN6QyxLQUFLQSxFQUFFa3RCLFdBQVcsR0FBUyxLQUFLLEtBQUssRUFBRThpQixHQUFHaHdDLEdBQUdoRSxFQUFFMHpDLEdBQUdELEdBQUd4d0IsU0FBUyxJQUFJMWYsRUFBRVMsRUFBRTRFLEtBQUssR0FBRyxPQUFPN0UsR0FBRyxNQUFNQyxFQUFFb2xCLFVBQVV5dkIsR0FBRzkwQyxFQUFFQyxFQUFFVCxFQUFFdEQsRUFBRUQsR0FBRytELEVBQUVxZixNQUFNcGYsRUFBRW9mLE1BQU1wZixFQUFFa3RCLFdBQVcsU0FBUyxDQUFDLElBQUlqeEIsRUFBRSxDQUFDLEdBQUcsT0FBTytELEVBQUVvbEIsVUFBVSxNQUFNaGIsTUFBTXNULEVBQUUsTUFDeGdCLE9BQU8sS0FBc0IsR0FBakIzZCxFQUFFMnZDLEdBQUdILEdBQUd0d0IsU0FBWTAwQixHQUFHM3pDLEdBQUcsQ0FBQy9ELEVBQUUrRCxFQUFFb2xCLFVBQVU3bEIsRUFBRVMsRUFBRTRFLEtBQUssSUFBSWdDLEVBQUU1RyxFQUFFa3dDLGNBQThCLE9BQWhCajBDLEVBQUV1OEIsSUFBSXg0QixFQUFFL0QsRUFBRXc4QixJQUFJN3hCLEVBQVNySCxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFReVosR0FBRSxPQUFPL2MsR0FBRyxNQUFNLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSThELEVBQUUsRUFBRUEsRUFBRThzQixHQUFHM3NCLE9BQU9ILElBQUlpWixHQUFFNlQsR0FBRzlzQixHQUFHOUQsR0FBRyxNQUFNLElBQUssU0FBUytjLEdBQUUsUUFBUS9jLEdBQUcsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBTytjLEdBQUUsUUFBUS9jLEdBQUcrYyxHQUFFLE9BQU8vYyxHQUFHLE1BQU0sSUFBSyxPQUFPK2MsR0FBRSxRQUFRL2MsR0FBRytjLEdBQUUsU0FBUy9jLEdBQUcsTUFBTSxJQUFLLFVBQVUrYyxHQUFFLFNBQVMvYyxHQUFHLE1BQU0sSUFBSyxRQUFRMHRCLEdBQUcxdEIsRUFBRTJLLEdBQUdvUyxHQUFFLFVBQVUvYyxHQUFHNDZCLEdBQUc3NkIsRUFBRSxZQUFZLE1BQU0sSUFBSyxTQUFTQyxFQUFFd3RCLGNBQzNlLENBQUN1c0IsY0FBY3B2QyxFQUFFcXZDLFVBQVVqOUIsR0FBRSxVQUFVL2MsR0FBRzQ2QixHQUFHNzZCLEVBQUUsWUFBWSxNQUFNLElBQUssV0FBVzR1QixHQUFHM3VCLEVBQUUySyxHQUFHb1MsR0FBRSxVQUFVL2MsR0FBRzQ2QixHQUFHNzZCLEVBQUUsWUFBMkIsSUFBSSxJQUFJOFIsS0FBdkIyb0IsR0FBR2wzQixFQUFFcUgsR0FBRzdHLEVBQUUsS0FBa0I2RyxFQUFFLEdBQUdBLEVBQUVwSixlQUFlc1EsR0FBRyxDQUFDLElBQUk2QixFQUFFL0ksRUFBRWtILEdBQUcsYUFBYUEsRUFBRSxpQkFBa0I2QixFQUFFMVQsRUFBRTh1QixjQUFjcGIsSUFBSTVQLEVBQUUsQ0FBQyxXQUFXNFAsSUFBSSxpQkFBa0JBLEdBQUcxVCxFQUFFOHVCLGNBQWMsR0FBR3BiLElBQUk1UCxFQUFFLENBQUMsV0FBVyxHQUFHNFAsSUFBSWdWLEVBQUdubkIsZUFBZXNRLElBQUksTUFBTTZCLEdBQUdrbkIsR0FBRzc2QixFQUFFOFIsR0FBRyxPQUFPdk8sR0FBRyxJQUFLLFFBQVF5cEIsR0FBRy9zQixHQUFHZ3VCLEdBQUdodUIsRUFBRTJLLEdBQUUsR0FBSSxNQUFNLElBQUssV0FBV29pQixHQUFHL3NCLEdBQUc2dUIsR0FBRzd1QixHQUFHLE1BQU0sSUFBSyxTQUFTLElBQUssU0FBUyxNQUFNLFFBQVEsbUJBQW9CMkssRUFBRXN2QyxVQUMxZmo2QyxFQUFFazZDLFFBQVFyZixJQUFJOTZCLEVBQUUrRCxFQUFFQyxFQUFFb3NDLFlBQVlwd0MsRUFBRSxPQUFPQSxJQUFJZ0UsRUFBRWt0QixXQUFXLE9BQU8sQ0FBdVksT0FBdFlwZixFQUFFLElBQUk5UixFQUFFZ0QsU0FBU2hELEVBQUVBLEVBQUVrdUIsY0FBY25xQixJQUFJNjJCLEtBQUs3MkIsRUFBRWtyQixHQUFHMXJCLElBQUlRLElBQUk2MkIsR0FBRyxXQUFXcjNCLElBQUdRLEVBQUUrTixFQUFFNEksY0FBYyxRQUFTOFUsVUFBVSxxQkFBdUJ6ckIsRUFBRUEsRUFBRTJyQixZQUFZM3JCLEVBQUUwckIsYUFBYSxpQkFBa0J4dkIsRUFBRTA2QixHQUFHNTJCLEVBQUUrTixFQUFFNEksY0FBY25YLEVBQUUsQ0FBQ28zQixHQUFHMTZCLEVBQUUwNkIsTUFBTTUyQixFQUFFK04sRUFBRTRJLGNBQWNuWCxHQUFHLFdBQVdBLElBQUl1TyxFQUFFL04sRUFBRTlELEVBQUVnNkMsU0FBU25vQyxFQUFFbW9DLFVBQVMsRUFBR2g2QyxFQUFFbTZDLE9BQU90b0MsRUFBRXNvQyxLQUFLbjZDLEVBQUVtNkMsUUFBUXIyQyxFQUFFK04sRUFBRXVvQyxnQkFBZ0J0MkMsRUFBRVIsR0FBR1EsRUFBRXk0QixJQUFJeDRCLEVBQUVELEVBQUUwNEIsSUFBSXg4QixFQUFFMjRDLEdBQUc3MEMsRUFBRUMsR0FBU0EsRUFBRW9sQixVQUFVcmxCLEVBQUUrTixFQUFFNG9CLEdBQUduM0IsRUFBRXRELEdBQVVzRCxHQUFHLElBQUssU0FBUyxJQUFLLFNBQVMsSUFBSyxRQUFReVosR0FBRSxPQUM5ZmpaLEdBQUc0UCxFQUFFMVQsRUFBRSxNQUFNLElBQUssUUFBUSxJQUFLLFFBQVEsSUFBSTBULEVBQUUsRUFBRUEsRUFBRWtkLEdBQUczc0IsT0FBT3lQLElBQUlxSixHQUFFNlQsR0FBR2xkLEdBQUc1UCxHQUFHNFAsRUFBRTFULEVBQUUsTUFBTSxJQUFLLFNBQVMrYyxHQUFFLFFBQVFqWixHQUFHNFAsRUFBRTFULEVBQUUsTUFBTSxJQUFLLE1BQU0sSUFBSyxRQUFRLElBQUssT0FBTytjLEdBQUUsUUFBUWpaLEdBQUdpWixHQUFFLE9BQU9qWixHQUFHNFAsRUFBRTFULEVBQUUsTUFBTSxJQUFLLE9BQU8rYyxHQUFFLFFBQVFqWixHQUFHaVosR0FBRSxTQUFTalosR0FBRzRQLEVBQUUxVCxFQUFFLE1BQU0sSUFBSyxVQUFVK2MsR0FBRSxTQUFTalosR0FBRzRQLEVBQUUxVCxFQUFFLE1BQU0sSUFBSyxRQUFRMHRCLEdBQUc1cEIsRUFBRTlELEdBQUcwVCxFQUFFNFosR0FBR3hwQixFQUFFOUQsR0FBRytjLEdBQUUsVUFBVWpaLEdBQUc4MkIsR0FBRzc2QixFQUFFLFlBQVksTUFBTSxJQUFLLFNBQVMyVCxFQUFFeWEsR0FBR3JxQixFQUFFOUQsR0FBRyxNQUFNLElBQUssU0FBUzhELEVBQUUwcEIsY0FBYyxDQUFDdXNCLGNBQWMvNUMsRUFBRWc2QyxVQUFVdG1DLEVBQUV2UyxFQUFFLEdBQUduQixFQUFFLENBQUNXLFdBQU0sSUFBU29jLEdBQUUsVUFBVWpaLEdBQUc4MkIsR0FBRzc2QixFQUFFLFlBQVksTUFBTSxJQUFLLFdBQVc0dUIsR0FBRzdxQixFQUN0Z0I5RCxHQUFHMFQsRUFBRSthLEdBQUczcUIsRUFBRTlELEdBQUcrYyxHQUFFLFVBQVVqWixHQUFHODJCLEdBQUc3NkIsRUFBRSxZQUFZLE1BQU0sUUFBUTJULEVBQUUxVCxFQUFFdzZCLEdBQUdsM0IsRUFBRW9RLEdBQUcsSUFBSTZQLEVBQUU3UCxFQUFFLElBQUkvSSxLQUFLNFksRUFBRSxHQUFHQSxFQUFFaGlCLGVBQWVvSixHQUFHLENBQUMsSUFBSWhMLEVBQUU0akIsRUFBRTVZLEdBQUcsVUFBVUEsRUFBRTJ1QixHQUFHeDFCLEVBQUVuRSxHQUFHLDRCQUE0QmdMLEVBQXVCLE9BQXBCaEwsRUFBRUEsRUFBRUEsRUFBRW04QixZQUFPLElBQWdCM00sR0FBR3JyQixFQUFFbkUsR0FBSSxhQUFhZ0wsRUFBRSxpQkFBa0JoTCxHQUFHLGFBQWEyRCxHQUFHLEtBQUszRCxJQUFJK3ZCLEdBQUc1ckIsRUFBRW5FLEdBQUcsaUJBQWtCQSxHQUFHK3ZCLEdBQUc1ckIsRUFBRSxHQUFHbkUsR0FBRyxtQ0FBbUNnTCxHQUFHLDZCQUE2QkEsR0FBRyxjQUFjQSxJQUFJK2QsRUFBR25uQixlQUFlb0osR0FBRyxNQUFNaEwsR0FBR2k3QixHQUFHNzZCLEVBQUU0SyxHQUFHLE1BQU1oTCxHQUFHa3JCLEVBQUcvbUIsRUFBRTZHLEVBQUVoTCxFQUFFa1MsSUFBSSxPQUFPdk8sR0FBRyxJQUFLLFFBQVF5cEIsR0FBR2pwQixHQUFHa3FCLEdBQUdscUIsRUFBRTlELEdBQUUsR0FDbmYsTUFBTSxJQUFLLFdBQVcrc0IsR0FBR2pwQixHQUFHK3FCLEdBQUcvcUIsR0FBRyxNQUFNLElBQUssU0FBUyxNQUFNOUQsRUFBRVcsT0FBT21ELEVBQUVvbkIsYUFBYSxRQUFRLEdBQUcwQixHQUFHNXNCLEVBQUVXLFFBQVEsTUFBTSxJQUFLLFNBQVNtRCxFQUFFazJDLFdBQVdoNkMsRUFBRWc2QyxTQUFtQixPQUFWajZDLEVBQUVDLEVBQUVXLE9BQWMwdEIsR0FBR3ZxQixJQUFJOUQsRUFBRWc2QyxTQUFTajZDLEdBQUUsR0FBSSxNQUFNQyxFQUFFK1QsY0FBY3NhLEdBQUd2cUIsSUFBSTlELEVBQUVnNkMsU0FBU2g2QyxFQUFFK1QsY0FBYSxHQUFJLE1BQU0sUUFBUSxtQkFBb0JMLEVBQUV1bUMsVUFBVW4yQyxFQUFFbzJDLFFBQVFyZixJQUFJYyxHQUFHcjRCLEVBQUV0RCxLQUFLK0QsRUFBRWt0QixXQUFXLEdBQUcsT0FBT2x0QixFQUFFb2YsTUFBTXBmLEVBQUVrdEIsV0FBVyxLQUFLLE9BQU8sS0FBSyxLQUFLLEVBQUUsR0FBR250QixHQUFHLE1BQU1DLEVBQUVvbEIsVUFBVTB2QixHQUFHLzBDLEVBQUVDLEVBQUVELEVBQUVtd0MsY0FBY2owQyxPQUFPLENBQUMsR0FBRyxpQkFBa0JBLEdBQUcsT0FBTytELEVBQUVvbEIsVUFBVSxNQUFNaGIsTUFBTXNULEVBQUUsTUFDdmYxaEIsRUFBRTB6QyxHQUFHRCxHQUFHeHdCLFNBQVN5d0IsR0FBR0gsR0FBR3R3QixTQUFTMDBCLEdBQUczekMsSUFBSWhFLEVBQUVnRSxFQUFFb2xCLFVBQVVucEIsRUFBRStELEVBQUVrd0MsY0FBY2wwQyxFQUFFdzhCLElBQUl4NEIsRUFBRWhFLEVBQUU2dkIsWUFBWTV2QixJQUFJK0QsRUFBRWt0QixXQUFXLE1BQUtseEIsR0FBRyxJQUFJQSxFQUFFZ0QsU0FBU2hELEVBQUVBLEVBQUVrdUIsZUFBZW9zQixlQUFlcjZDLElBQUt1OEIsSUFBSXg0QixFQUFFQSxFQUFFb2xCLFVBQVVwcEIsR0FBRyxPQUFPLEtBQUssS0FBSyxHQUEwQixPQUF2QjJpQixHQUFFWSxJQUFHdGpCLEVBQUUrRCxFQUFFb3RCLGNBQWlCLElBQWlCLEdBQVpwdEIsRUFBRWt0QixZQUFxQmx0QixFQUFFOHJDLGVBQWU5dkMsRUFBRWdFLElBQUVoRSxFQUFFLE9BQU9DLEVBQUVBLEdBQUUsRUFBRyxPQUFPOEQsT0FBRSxJQUFTQyxFQUFFa3dDLGNBQWNnRixVQUFVdkIsR0FBRzN6QyxJQUFzQi9ELEVBQUUsUUFBcEJzRCxFQUFFUSxFQUFFcXRCLGVBQXlCcHhCLEdBQUcsT0FBT3VELEdBQXNCLFFBQWxCQSxFQUFFUSxFQUFFcWQsTUFBTW9RLFdBQW1DLFFBQWhCNW1CLEVBQUU1RyxFQUFFNHVDLGNBQXNCNXVDLEVBQUU0dUMsWUFBWXJ2QyxFQUFFQSxFQUFFb3ZDLFdBQVcvbkMsSUFBSTVHLEVBQUU0dUMsWUFBWTV1QyxFQUFFMHVDLFdBQ3RmbnZDLEVBQUVBLEVBQUVvdkMsV0FBVyxNQUFNcHZDLEVBQUUydEIsVUFBVSxJQUFRbHhCLElBQUlDLEdBQUcsSUFBWSxFQUFQK0QsRUFBRWxELFFBQVcsT0FBT2lELElBQUcsSUFBS0MsRUFBRWt3QyxjQUFjaUYsNEJBQTRCLElBQWUsRUFBVjUxQixHQUFFTixTQUFXZSxLQUFJdTJCLEtBQUt2MkIsR0FBRXcyQixLQUFZeDJCLEtBQUl1MkIsSUFBSXYyQixLQUFJdzJCLEtBQUd4MkIsR0FBRXkyQixJQUFHLElBQUlDLElBQUksT0FBT3gyQixLQUFJeTJCLEdBQUd6MkIsR0FBRUMsSUFBR3kyQixHQUFHMTJCLEdBQUV3MkIsUUFBUTE2QyxHQUFHQyxLQUFFK0QsRUFBRWt0QixXQUFXLEdBQVMsTUFBSyxLQUFLLEVBQUUsT0FBTzRpQixLQUFXLEtBQUssS0FBSyxHQUFHLE9BQU9yRSxHQUFHenJDLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT21mLEdBQUVuZixFQUFFNEUsT0FBTzhqQyxLQUFLLEtBQUssS0FBSyxHQUEwQixHQUF2Qi9wQixHQUFFWSxJQUF3QixRQUFyQnRqQixFQUFFK0QsRUFBRW90QixlQUEwQixPQUFPLEtBQTBDLEdBQXJDN3RCLEVBQUUsSUFBaUIsR0FBWlMsRUFBRWt0QixXQUErQixRQUFqQnRtQixFQUFFM0ssRUFBRXM1QyxZQUFzQixHQUFHaDJDLEVBQUV1MkMsR0FBRzc1QyxHQUFFLFFBQVMsR0FBRytqQixLQUFJdTJCLElBQUksT0FBT3gyQyxHQUFHLElBQzllLEdBRG1mQSxFQUFFbXRCLFdBQ2pmLElBQUl0bUIsRUFBRTVHLEVBQUVvZCxNQUFNLE9BQU94VyxHQUFHLENBQVMsR0FBRyxRQUFYN0csRUFBRWt3QyxHQUFHcnBDLElBQWUsQ0FBeUosSUFBeEo1RyxFQUFFa3RCLFdBQVcsR0FBRzRvQixHQUFHNzVDLEdBQUUsR0FBb0IsUUFBaEJzRCxFQUFFUSxFQUFFcXNDLGVBQXVCcHNDLEVBQUVvc0MsWUFBWTdzQyxFQUFFUyxFQUFFa3RCLFdBQVcsR0FBRyxPQUFPanhCLEVBQUV5eUMsYUFBYTF1QyxFQUFFNHVDLFlBQVksTUFBTTV1QyxFQUFFMHVDLFdBQVd6eUMsRUFBRXl5QyxXQUFlenlDLEVBQUUrRCxFQUFFb2QsTUFBTSxPQUFPbmhCLEdBQU8ySyxFQUFFNUssR0FBTnVELEVBQUV0RCxHQUFRaXhCLFdBQVcsRUFBRTN0QixFQUFFb3ZDLFdBQVcsS0FBS3B2QyxFQUFFcXZDLFlBQVksS0FBS3J2QyxFQUFFbXZDLFdBQVcsS0FBbUIsUUFBZDN1QyxFQUFFUixFQUFFMHRCLFlBQW9CMXRCLEVBQUVvc0Msb0JBQW9CLEVBQUVwc0MsRUFBRXVzQyxlQUFlbGxDLEVBQUVySCxFQUFFNmQsTUFBTSxLQUFLN2QsRUFBRTJ3QyxjQUFjLEtBQUszd0MsRUFBRTZ0QixjQUFjLEtBQUs3dEIsRUFBRTZzQyxZQUFZLEtBQUs3c0MsRUFBRXNsQixhQUFhLE9BQU90bEIsRUFBRW9zQyxvQkFBb0I1ckMsRUFBRTRyQyxvQkFDM2Vwc0MsRUFBRXVzQyxlQUFlL3JDLEVBQUUrckMsZUFBZXZzQyxFQUFFNmQsTUFBTXJkLEVBQUVxZCxNQUFNN2QsRUFBRTJ3QyxjQUFjbndDLEVBQUVtd0MsY0FBYzN3QyxFQUFFNnRCLGNBQWNydEIsRUFBRXF0QixjQUFjN3RCLEVBQUU2c0MsWUFBWXJzQyxFQUFFcXNDLFlBQVl4bEMsRUFBRTdHLEVBQUU4a0IsYUFBYXRsQixFQUFFc2xCLGFBQWEsT0FBT2plLEVBQUUsS0FBSyxDQUFDa2xDLGVBQWVsbEMsRUFBRWtsQyxlQUFlRCxhQUFhamxDLEVBQUVpbEMsYUFBYUksV0FBV3JsQyxFQUFFcWxDLGFBQWFod0MsRUFBRUEsRUFBRXV4QixRQUEyQixPQUFuQjFPLEdBQUVTLEdBQVksRUFBVkEsR0FBRU4sUUFBVSxHQUFVamYsRUFBRW9kLE1BQU14VyxFQUFFQSxFQUFFNG1CLGFBQWEsQ0FBQyxJQUFJanVCLEVBQUUsR0FBVyxRQUFSUSxFQUFFa3dDLEdBQUdycEMsS0FBYSxHQUFHNUcsRUFBRWt0QixXQUFXLEdBQUczdEIsR0FBRSxFQUFtQixRQUFoQnZELEVBQUUrRCxFQUFFcXNDLGVBQXVCcHNDLEVBQUVvc0MsWUFBWXB3QyxFQUFFZ0UsRUFBRWt0QixXQUFXLEdBQUc0b0IsR0FBRzc1QyxHQUFFLEdBQUksT0FBT0EsRUFBRXk1QyxNQUFNLFdBQVd6NUMsRUFBRTI1QyxXQUFXaHZDLEVBQUVxbUIsVUFBVSxPQUNuZSxRQUQwZWp0QixFQUNwZ0JBLEVBQUUwdUMsV0FBV3p5QyxFQUFFeXlDLGNBQXNCMXVDLEVBQUUydUMsV0FBVyxNQUFNLFVBQVUsRUFBRWpFLEtBQUt6dUMsRUFBRXU1QyxtQkFBbUJ2NUMsRUFBRTA1QyxnQkFBZ0IsRUFBRTM1QyxJQUFJZ0UsRUFBRWt0QixXQUFXLEdBQUczdEIsR0FBRSxFQUFHdTJDLEdBQUc3NUMsR0FBRSxHQUFJK0QsRUFBRThyQyxlQUFlOXJDLEVBQUUyckMsb0JBQW9CM3ZDLEVBQUUsR0FBR0MsRUFBRXE1QyxhQUFhMXVDLEVBQUU0bUIsUUFBUXh0QixFQUFFb2QsTUFBTXBkLEVBQUVvZCxNQUFNeFcsSUFBYSxRQUFUNUssRUFBRUMsRUFBRXc1QyxNQUFjejVDLEVBQUV3eEIsUUFBUTVtQixFQUFFNUcsRUFBRW9kLE1BQU14VyxFQUFFM0ssRUFBRXc1QyxLQUFLN3VDLEdBQUcsT0FBTyxPQUFPM0ssRUFBRXk1QyxNQUFNLElBQUl6NUMsRUFBRTA1QyxpQkFBaUIxNUMsRUFBRTA1QyxlQUFlakwsS0FBSyxLQUFLMXVDLEVBQUVDLEVBQUV5NUMsS0FBS3o1QyxFQUFFczVDLFVBQVV2NUMsRUFBRUMsRUFBRXk1QyxLQUFLMTVDLEVBQUV3eEIsUUFBUXZ4QixFQUFFeXlDLFdBQVcxdUMsRUFBRTB1QyxXQUFXenlDLEVBQUV1NUMsbUJBQW1COUssS0FBSzF1QyxFQUFFd3hCLFFBQVEsS0FBS3h0QixFQUFFdWYsR0FBRU4sUUFBUUgsR0FBRVMsR0FBRWhnQixFQUFJLEVBQUZTLEVBQUksRUFBSSxFQUFGQSxHQUFLaEUsR0FBRyxLQUFLLE1BQU1vTyxNQUFNc1QsRUFBRSxJQUNyZ0IxZCxFQUFFdW9CLE1BQU8sU0FBU3N1QixHQUFHOTJDLEdBQUcsT0FBT0EsRUFBRXdvQixLQUFLLEtBQUssRUFBRXBKLEdBQUVwZixFQUFFNkUsT0FBTzhqQyxLQUFLLElBQUkxb0MsRUFBRUQsRUFBRW10QixVQUFVLE9BQVMsS0FBRmx0QixHQUFRRCxFQUFFbXRCLFdBQWEsS0FBSGx0QixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEVBQStCLEdBQTdCK3ZDLEtBQUtueEIsR0FBRU8sSUFBR1AsR0FBRUssSUFBb0IsSUFBTyxJQUF4QmhmLEVBQUVELEVBQUVtdEIsWUFBd0IsTUFBTTlpQixNQUFNc1QsRUFBRSxNQUE2QixPQUF2QjNkLEVBQUVtdEIsV0FBYSxLQUFIbHRCLEVBQVEsR0FBVUQsRUFBRSxLQUFLLEVBQUUsT0FBT2l3QyxHQUFHandDLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzRlLEdBQUVZLElBQW1CLE1BQWhCdmYsRUFBRUQsRUFBRW10QixZQUFrQm50QixFQUFFbXRCLFdBQWEsS0FBSGx0QixFQUFRLEdBQUdELEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBTzRlLEdBQUVZLElBQUcsS0FBSyxLQUFLLEVBQUUsT0FBT3V3QixLQUFLLEtBQUssS0FBSyxHQUFHLE9BQU9yRSxHQUFHMXJDLEdBQUcsS0FBSyxRQUFRLE9BQU8sTUFBTSxTQUFTKzJDLEdBQUcvMkMsRUFBRUMsR0FBRyxNQUFNLENBQUNwRCxNQUFNbUQsRUFBRW1WLE9BQU9sVixFQUFFKzJDLE1BQU16dUIsR0FBR3RvQixJQWpCdmQ0MEMsR0FBRyxTQUFTNzBDLEVBQUVDLEdBQUcsSUFBSSxJQUFJaEUsRUFBRWdFLEVBQUVvZCxNQUFNLE9BQU9waEIsR0FBRyxDQUFDLEdBQUcsSUFBSUEsRUFBRXVzQixLQUFLLElBQUl2c0IsRUFBRXVzQixJQUFJeG9CLEVBQUU2WSxZQUFZNWMsRUFBRW9wQixnQkFBZ0IsR0FBRyxJQUFJcHBCLEVBQUV1c0IsS0FBSyxPQUFPdnNCLEVBQUVvaEIsTUFBTSxDQUFDcGhCLEVBQUVvaEIsTUFBTXdMLE9BQU81c0IsRUFBRUEsRUFBRUEsRUFBRW9oQixNQUFNLFNBQVMsR0FBR3BoQixJQUFJZ0UsRUFBRSxNQUFNLEtBQUssT0FBT2hFLEVBQUV3eEIsU0FBUyxDQUFDLEdBQUcsT0FBT3h4QixFQUFFNHNCLFFBQVE1c0IsRUFBRTRzQixTQUFTNW9CLEVBQUUsT0FBT2hFLEVBQUVBLEVBQUU0c0IsT0FBTzVzQixFQUFFd3hCLFFBQVE1RSxPQUFPNXNCLEVBQUU0c0IsT0FBTzVzQixFQUFFQSxFQUFFd3hCLFVBQ2hTcW5CLEdBQUcsU0FBUzkwQyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEdBQUcsSUFBSXFILEVBQUU3RyxFQUFFbXdDLGNBQWMsR0FBR3RwQyxJQUFJM0ssRUFBRSxDQUFDLElBQXNXMFQsRUFBRTZQLEVBQXBXMVIsRUFBRTlOLEVBQUVvbEIsVUFBZ0MsT0FBdEJzcUIsR0FBR0gsR0FBR3R3QixTQUFTbGYsRUFBRSxLQUFZL0QsR0FBRyxJQUFLLFFBQVE0SyxFQUFFMmlCLEdBQUd6YixFQUFFbEgsR0FBRzNLLEVBQUVzdEIsR0FBR3piLEVBQUU3UixHQUFHOEQsRUFBRSxHQUFHLE1BQU0sSUFBSyxTQUFTNkcsRUFBRXdqQixHQUFHdGMsRUFBRWxILEdBQUczSyxFQUFFbXVCLEdBQUd0YyxFQUFFN1IsR0FBRzhELEVBQUUsR0FBRyxNQUFNLElBQUssU0FBUzZHLEVBQUV4SixFQUFFLEdBQUd3SixFQUFFLENBQUNoSyxXQUFNLElBQVNYLEVBQUVtQixFQUFFLEdBQUduQixFQUFFLENBQUNXLFdBQU0sSUFBU21ELEVBQUUsR0FBRyxNQUFNLElBQUssV0FBVzZHLEVBQUU4akIsR0FBRzVjLEVBQUVsSCxHQUFHM0ssRUFBRXl1QixHQUFHNWMsRUFBRTdSLEdBQUc4RCxFQUFFLEdBQUcsTUFBTSxRQUFRLG1CQUFvQjZHLEVBQUVzdkMsU0FBUyxtQkFBb0JqNkMsRUFBRWk2QyxVQUFVcG9DLEVBQUVxb0MsUUFBUXJmLElBQTJCLElBQUlubkIsS0FBM0I4bUIsR0FBR3o2QixFQUFFQyxHQUFXRCxFQUFFLEtBQWM0SyxFQUFFLElBQUkzSyxFQUFFdUIsZUFBZW1TLElBQUkvSSxFQUFFcEosZUFBZW1TLElBQUksTUFBTS9JLEVBQUUrSSxHQUFHLEdBQUcsVUFDL2VBLEVBQUUsSUFBSTZQLEtBQUsxUixFQUFFbEgsRUFBRStJLEdBQUs3QixFQUFFdFEsZUFBZWdpQixLQUFLeGpCLElBQUlBLEVBQUUsSUFBSUEsRUFBRXdqQixHQUFHLFFBQVEsNEJBQTRCN1AsR0FBRyxhQUFhQSxHQUFHLG1DQUFtQ0EsR0FBRyw2QkFBNkJBLEdBQUcsY0FBY0EsSUFBSWdWLEVBQUdubkIsZUFBZW1TLEdBQUc1UCxJQUFJQSxFQUFFLEtBQUtBLEVBQUVBLEdBQUcsSUFBSXdJLEtBQUtvSCxFQUFFLE9BQU8sSUFBSUEsS0FBSzFULEVBQUUsQ0FBQyxJQUFJTCxFQUFFSyxFQUFFMFQsR0FBeUIsR0FBdEI3QixFQUFFLE1BQU1sSCxFQUFFQSxFQUFFK0ksUUFBRyxFQUFVMVQsRUFBRXVCLGVBQWVtUyxJQUFJL1QsSUFBSWtTLElBQUksTUFBTWxTLEdBQUcsTUFBTWtTLEdBQUcsR0FBRyxVQUFVNkIsRUFBRSxHQUFHN0IsRUFBRSxDQUFDLElBQUkwUixLQUFLMVIsR0FBR0EsRUFBRXRRLGVBQWVnaUIsSUFBSTVqQixHQUFHQSxFQUFFNEIsZUFBZWdpQixLQUFLeGpCLElBQUlBLEVBQUUsSUFBSUEsRUFBRXdqQixHQUFHLElBQUksSUFBSUEsS0FBSzVqQixFQUFFQSxFQUFFNEIsZUFBZWdpQixJQUFJMVIsRUFBRTBSLEtBQUs1akIsRUFBRTRqQixLQUFLeGpCLElBQUlBLEVBQUUsSUFDcGZBLEVBQUV3akIsR0FBRzVqQixFQUFFNGpCLFNBQVN4akIsSUFBSStELElBQUlBLEVBQUUsSUFBSUEsRUFBRXdJLEtBQUtvSCxFQUFFM1QsSUFBSUEsRUFBRUosTUFBTSw0QkFBNEIrVCxHQUFHL1QsRUFBRUEsRUFBRUEsRUFBRW04QixZQUFPLEVBQU9qcUIsRUFBRUEsRUFBRUEsRUFBRWlxQixZQUFPLEVBQU8sTUFBTW44QixHQUFHa1MsSUFBSWxTLElBQUltRSxFQUFFQSxHQUFHLElBQUl3SSxLQUFLb0gsRUFBRS9ULElBQUksYUFBYStULEVBQUU3QixJQUFJbFMsR0FBRyxpQkFBa0JBLEdBQUcsaUJBQWtCQSxJQUFJbUUsRUFBRUEsR0FBRyxJQUFJd0ksS0FBS29ILEVBQUUsR0FBRy9ULEdBQUcsbUNBQW1DK1QsR0FBRyw2QkFBNkJBLElBQUlnVixFQUFHbm5CLGVBQWVtUyxJQUFJLE1BQU0vVCxHQUFHaTdCLEdBQUd0M0IsRUFBRW9RLEdBQUc1UCxHQUFHK04sSUFBSWxTLElBQUltRSxFQUFFLE1BQU1BLEVBQUVBLEdBQUcsSUFBSXdJLEtBQUtvSCxFQUFFL1QsSUFBSUksSUFBSStELEVBQUVBLEdBQUcsSUFBSXdJLEtBQUssUUFBUXZNLEdBQUd1RCxFQUFFUSxHQUFLQyxFQUFFb3NDLFlBQVk3c0MsS0FBRVMsRUFBRWt0QixXQUFXLEtBQzVjNG5CLEdBQUcsU0FBUy8wQyxFQUFFQyxFQUFFaEUsRUFBRUMsR0FBR0QsSUFBSUMsSUFBSStELEVBQUVrdEIsV0FBVyxJQWMxQyxJQUFJOHBCLEdBQUcsbUJBQW9CQyxRQUFRQSxRQUFRdDZCLElBQUksU0FBU3U2QixHQUFHbjNDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUVnRSxFQUFFa1YsT0FBT2paLEVBQUUrRCxFQUFFKzJDLE1BQU0sT0FBTzk2QyxHQUFHLE9BQU9ELElBQUlDLEVBQUVxc0IsR0FBR3RzQixJQUFJLE9BQU9BLEdBQUdxc0IsR0FBR3JzQixFQUFFNEksTUFBTTVFLEVBQUVBLEVBQUVwRCxNQUFNLE9BQU9tRCxHQUFHLElBQUlBLEVBQUV3b0IsS0FBS0YsR0FBR3RvQixFQUFFNkUsTUFBTSxJQUFJM0QsUUFBUUgsTUFBTWQsR0FBRyxNQUFNVCxHQUFHMDRCLFlBQVcsV0FBVyxNQUFNMTRCLE1BQXNILFNBQVM0M0MsR0FBR3AzQyxHQUFHLElBQUlDLEVBQUVELEVBQUVxZixJQUFJLEdBQUcsT0FBT3BmLEVBQUUsR0FBRyxtQkFBb0JBLEVBQUUsSUFBSUEsRUFBRSxNQUFNLE1BQU1oRSxHQUFHbzdDLEdBQUdyM0MsRUFBRS9ELFFBQVFnRSxFQUFFaWYsUUFBUSxLQUNsZCxTQUFTbzRCLEdBQUd0M0MsRUFBRUMsR0FBRyxPQUFPQSxFQUFFdW9CLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLE9BQU8sS0FBSyxFQUFFLEdBQWUsSUFBWnZvQixFQUFFa3RCLFdBQWUsT0FBT250QixFQUFFLENBQUMsSUFBSS9ELEVBQUUrRCxFQUFFbXdDLGNBQWNqMEMsRUFBRThELEVBQUVxdEIsY0FBNEJwdEIsR0FBZEQsRUFBRUMsRUFBRW9sQixXQUFjOG9CLHdCQUF3Qmx1QyxFQUFFK3VDLGNBQWMvdUMsRUFBRTRFLEtBQUs1SSxFQUFFbXZDLEdBQUduckMsRUFBRTRFLEtBQUs1SSxHQUFHQyxHQUFHOEQsRUFBRXUzQyxvQ0FBb0N0M0MsRUFBRSxPQUFPLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEdBQUcsT0FBTyxNQUFNb0ssTUFBTXNULEVBQUUsTUFDN1UsU0FBUzY1QixHQUFHeDNDLEVBQUVDLEdBQWdELEdBQUcsUUFBaENBLEVBQUUsUUFBbEJBLEVBQUVBLEVBQUVvc0MsYUFBdUJwc0MsRUFBRTB1QyxXQUFXLE1BQWlCLENBQUMsSUFBSTF5QyxFQUFFZ0UsRUFBRUEsRUFBRW1JLEtBQUssRUFBRSxDQUFDLElBQUluTSxFQUFFdXNCLElBQUl4b0IsS0FBS0EsRUFBRSxDQUFDLElBQUk5RCxFQUFFRCxFQUFFKzFDLFFBQVEvMUMsRUFBRSsxQyxhQUFRLE9BQU8sSUFBUzkxQyxHQUFHQSxJQUFJRCxFQUFFQSxFQUFFbU0sV0FBV25NLElBQUlnRSxJQUFJLFNBQVN3M0MsR0FBR3ozQyxFQUFFQyxHQUFnRCxHQUFHLFFBQWhDQSxFQUFFLFFBQWxCQSxFQUFFQSxFQUFFb3NDLGFBQXVCcHNDLEVBQUUwdUMsV0FBVyxNQUFpQixDQUFDLElBQUkxeUMsRUFBRWdFLEVBQUVBLEVBQUVtSSxLQUFLLEVBQUUsQ0FBQyxJQUFJbk0sRUFBRXVzQixJQUFJeG9CLEtBQUtBLEVBQUUsQ0FBQyxJQUFJOUQsRUFBRUQsRUFBRWlCLE9BQU9qQixFQUFFKzFDLFFBQVE5MUMsSUFBSUQsRUFBRUEsRUFBRW1NLFdBQVduTSxJQUFJZ0UsSUFDdFYsU0FBU3kzQyxHQUFHMTNDLEVBQUVDLEVBQUVoRSxHQUFHLE9BQU9BLEVBQUV1c0IsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQVcsWUFBUml2QixHQUFHLEVBQUV4N0MsR0FBVSxLQUFLLEVBQWdCLEdBQWQrRCxFQUFFL0QsRUFBRW9wQixVQUF5QixFQUFacHBCLEVBQUVreEIsVUFBWSxHQUFHLE9BQU9sdEIsRUFBRUQsRUFBRStSLHdCQUF3QixDQUFDLElBQUk3VixFQUFFRCxFQUFFK3lDLGNBQWMveUMsRUFBRTRJLEtBQUs1RSxFQUFFa3dDLGNBQWMvRSxHQUFHbnZDLEVBQUU0SSxLQUFLNUUsRUFBRWt3QyxlQUFlbndDLEVBQUV5MEMsbUJBQW1CdjRDLEVBQUUrRCxFQUFFb3RCLGNBQWNydEIsRUFBRXUzQyxxQ0FBeUUsWUFBcEIsUUFBaEJ0M0MsRUFBRWhFLEVBQUVvd0MsY0FBc0JlLEdBQUdueEMsRUFBRWdFLEVBQUVELElBQVUsS0FBSyxFQUFrQixHQUFHLFFBQW5CQyxFQUFFaEUsRUFBRW93QyxhQUF3QixDQUFRLEdBQVByc0MsRUFBRSxLQUFRLE9BQU8vRCxFQUFFb2hCLE1BQU0sT0FBT3BoQixFQUFFb2hCLE1BQU1tTCxLQUFLLEtBQUssRUFBRXhvQixFQUFFL0QsRUFBRW9oQixNQUFNZ0ksVUFBVSxNQUFNLEtBQUssRUFBRXJsQixFQUFFL0QsRUFBRW9oQixNQUFNZ0ksVUFBVStuQixHQUFHbnhDLEVBQUVnRSxFQUFFRCxHQUFHLE9BQ3BmLEtBQUssRUFBK0UsT0FBN0VBLEVBQUUvRCxFQUFFb3BCLGVBQVUsT0FBT3BsQixHQUFlLEVBQVpoRSxFQUFFa3hCLFdBQWEwSyxHQUFHNTdCLEVBQUU0SSxLQUFLNUksRUFBRWswQyxnQkFBZ0Jud0MsRUFBRTIzQyxTQUFlLEtBQUssRUFBUyxLQUFLLEVBQVMsS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUFvSCxZQUFqSCxPQUFPMTdDLEVBQUVveEIsZ0JBQWdCcHhCLEVBQUVBLEVBQUVpeEIsVUFBVSxPQUFPanhCLElBQUlBLEVBQUVBLEVBQUVveEIsY0FBYyxPQUFPcHhCLElBQUlBLEVBQUVBLEVBQUVxeEIsV0FBVyxPQUFPcnhCLEdBQUdzMUIsR0FBR3QxQixPQUFhLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxPQUFPLE1BQU1vTyxNQUFNc1QsRUFBRSxNQUMzVCxTQUFTaTZCLEdBQUc1M0MsRUFBRUMsRUFBRWhFLEdBQWlDLE9BQTlCLG1CQUFvQjQ3QyxJQUFJQSxHQUFHNTNDLEdBQVVBLEVBQUV1b0IsS0FBSyxLQUFLLEVBQUUsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFtQixHQUFHLFFBQW5CeG9CLEVBQUVDLEVBQUVvc0MsY0FBeUMsUUFBZnJzQyxFQUFFQSxFQUFFMnVDLFlBQXFCLENBQUMsSUFBSXp5QyxFQUFFOEQsRUFBRW9JLEtBQUswaUMsR0FBRyxHQUFHN3VDLEVBQUUsR0FBR0EsR0FBRSxXQUFXLElBQUkrRCxFQUFFOUQsRUFBRSxFQUFFLENBQUMsSUFBSUQsRUFBRStELEVBQUVneUMsUUFBUSxRQUFHLElBQVMvMUMsRUFBRSxDQUFDLElBQUk4UixFQUFFOU4sRUFBRSxJQUFJaEUsSUFBSSxNQUFNMlQsR0FBR3luQyxHQUFHdHBDLEVBQUU2QixJQUFJNVAsRUFBRUEsRUFBRW9JLFdBQVdwSSxJQUFJOUQsTUFBSyxNQUFNLEtBQUssRUFBRWs3QyxHQUFHbjNDLEdBQWlCLG1CQUFkaEUsRUFBRWdFLEVBQUVvbEIsV0FBZ0NwVCxzQkFMeEcsU0FBWWpTLEVBQUVDLEdBQUcsSUFBSUEsRUFBRXlRLE1BQU0xUSxFQUFFbXdDLGNBQWNsd0MsRUFBRXdSLE1BQU16UixFQUFFcXRCLGNBQWNwdEIsRUFBRWdTLHVCQUF1QixNQUFNaFcsR0FBR283QyxHQUFHcjNDLEVBQUUvRCxJQUtrQjY3QyxDQUFHNzNDLEVBQUVoRSxHQUFHLE1BQU0sS0FBSyxFQUFFbTdDLEdBQUduM0MsR0FBRyxNQUFNLEtBQUssRUFBRTgzQyxHQUFHLzNDLEVBQUVDLEVBQUVoRSxJQUNuYSxTQUFTKzdDLEdBQUdoNEMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFa3RCLFVBQVVsdEIsRUFBRTZvQixPQUFPLEtBQUs3b0IsRUFBRXFkLE1BQU0sS0FBS3JkLEVBQUVxdEIsY0FBYyxLQUFLcnRCLEVBQUVxc0MsWUFBWSxLQUFLcnNDLEVBQUU4a0IsYUFBYSxLQUFLOWtCLEVBQUVrdEIsVUFBVSxLQUFLbHRCLEVBQUU2dUMsWUFBWSxLQUFLN3VDLEVBQUUydUMsV0FBVyxLQUFLM3VDLEVBQUV5ekMsYUFBYSxLQUFLenpDLEVBQUVtd0MsY0FBYyxLQUFLbndDLEVBQUVxbEIsVUFBVSxLQUFLLE9BQU9wbEIsR0FBRyszQyxHQUFHLzNDLEdBQUcsU0FBU2c0QyxHQUFHajRDLEdBQUcsT0FBTyxJQUFJQSxFQUFFd29CLEtBQUssSUFBSXhvQixFQUFFd29CLEtBQUssSUFBSXhvQixFQUFFd29CLElBQzFTLFNBQVMwdkIsR0FBR2w0QyxHQUFHQSxFQUFFLENBQUMsSUFBSSxJQUFJQyxFQUFFRCxFQUFFNm9CLE9BQU8sT0FBTzVvQixHQUFHLENBQUMsR0FBR2c0QyxHQUFHaDRDLEdBQUcsQ0FBQyxJQUFJaEUsRUFBRWdFLEVBQUUsTUFBTUQsRUFBRUMsRUFBRUEsRUFBRTRvQixPQUFPLE1BQU14ZSxNQUFNc1QsRUFBRSxNQUFxQixPQUFkMWQsRUFBRWhFLEVBQUVvcEIsVUFBaUJwcEIsRUFBRXVzQixLQUFLLEtBQUssRUFBRSxJQUFJdHNCLEdBQUUsRUFBRyxNQUFNLEtBQUssRUFBK0IsS0FBSyxFQUFFK0QsRUFBRUEsRUFBRWt2QixjQUFjanpCLEdBQUUsRUFBRyxNQUFNLFFBQVEsTUFBTW1PLE1BQU1zVCxFQUFFLE1BQW1CLEdBQVoxaEIsRUFBRWt4QixZQUFldkIsR0FBRzNyQixFQUFFLElBQUloRSxFQUFFa3hCLFlBQVksSUFBSW50QixFQUFFQyxFQUFFLElBQUloRSxFQUFFK0QsSUFBSSxDQUFDLEtBQUssT0FBTy9ELEVBQUV3eEIsU0FBUyxDQUFDLEdBQUcsT0FBT3h4QixFQUFFNHNCLFFBQVFvdkIsR0FBR2g4QyxFQUFFNHNCLFFBQVEsQ0FBQzVzQixFQUFFLEtBQUssTUFBTStELEVBQUUvRCxFQUFFQSxFQUFFNHNCLE9BQWlDLElBQTFCNXNCLEVBQUV3eEIsUUFBUTVFLE9BQU81c0IsRUFBRTRzQixPQUFXNXNCLEVBQUVBLEVBQUV3eEIsUUFBUSxJQUFJeHhCLEVBQUV1c0IsS0FBSyxJQUFJdnNCLEVBQUV1c0IsS0FBSyxLQUFLdnNCLEVBQUV1c0IsS0FBSyxDQUFDLEdBQWUsRUFBWnZzQixFQUFFa3hCLFVBQVksU0FBU2x0QixFQUN2ZixHQUFHLE9BQU9oRSxFQUFFb2hCLE9BQU8sSUFBSXBoQixFQUFFdXNCLElBQUksU0FBU3ZvQixFQUFPaEUsRUFBRW9oQixNQUFNd0wsT0FBTzVzQixFQUFFQSxFQUFFQSxFQUFFb2hCLE1BQU0sS0FBaUIsRUFBWnBoQixFQUFFa3hCLFdBQWEsQ0FBQ2x4QixFQUFFQSxFQUFFb3BCLFVBQVUsTUFBTXJsQixHQUFHOUQsRUFDcEgsU0FBU2k4QyxFQUFHbjRDLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUU4RCxFQUFFd29CLElBQUlocEIsRUFBRSxJQUFJdEQsR0FBRyxJQUFJQSxFQUFFLEdBQUdzRCxFQUFFUSxFQUFFUixFQUFFUSxFQUFFcWxCLFVBQVVybEIsRUFBRXFsQixVQUFVK3lCLFNBQVNuNEMsRUFBRSxJQUFJaEUsRUFBRWdELFNBQVNoRCxFQUFFdXlCLFdBQVc2cEIsYUFBYXI0QyxFQUFFQyxHQUFHaEUsRUFBRW84QyxhQUFhcjRDLEVBQUVDLElBQUksSUFBSWhFLEVBQUVnRCxVQUFVZ0IsRUFBRWhFLEVBQUV1eUIsWUFBYTZwQixhQUFhcjRDLEVBQUUvRCxJQUFLZ0UsRUFBRWhFLEdBQUk0YyxZQUFZN1ksR0FBNEIsUUFBeEIvRCxFQUFFQSxFQUFFcThDLDJCQUE4QixJQUFTcjhDLEdBQUcsT0FBT2dFLEVBQUVtMkMsVUFBVW4yQyxFQUFFbTJDLFFBQVFyZixVQUFVLEdBQUcsSUFBSTc2QixHQUFjLFFBQVY4RCxFQUFFQSxFQUFFcWQsT0FBZ0IsSUFBSTg2QixFQUFHbjRDLEVBQUVDLEVBQUVoRSxHQUFHK0QsRUFBRUEsRUFBRXl0QixRQUFRLE9BQU96dEIsR0FBR200QyxFQUFHbjRDLEVBQUVDLEVBQUVoRSxHQUFHK0QsRUFBRUEsRUFBRXl0QixRQUR4UjBxQixDQUFHbjRDLEVBQUUvRCxFQUFFZ0UsR0FFN0gsU0FBU3M0QyxFQUFHdjRDLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUU4RCxFQUFFd29CLElBQUlocEIsRUFBRSxJQUFJdEQsR0FBRyxJQUFJQSxFQUFFLEdBQUdzRCxFQUFFUSxFQUFFUixFQUFFUSxFQUFFcWxCLFVBQVVybEIsRUFBRXFsQixVQUFVK3lCLFNBQVNuNEMsRUFBRWhFLEVBQUVvOEMsYUFBYXI0QyxFQUFFQyxHQUFHaEUsRUFBRTRjLFlBQVk3WSxRQUFRLEdBQUcsSUFBSTlELEdBQWMsUUFBVjhELEVBQUVBLEVBQUVxZCxPQUFnQixJQUFJazdCLEVBQUd2NEMsRUFBRUMsRUFBRWhFLEdBQUcrRCxFQUFFQSxFQUFFeXRCLFFBQVEsT0FBT3p0QixHQUFHdTRDLEVBQUd2NEMsRUFBRUMsRUFBRWhFLEdBQUcrRCxFQUFFQSxFQUFFeXRCLFFBRnJGOHFCLENBQUd2NEMsRUFBRS9ELEVBQUVnRSxHQUd2SSxTQUFTODNDLEdBQUcvM0MsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSSxJQUFhNEssRUFBRWtILEVBQVg3UixFQUFFK0QsRUFBRVQsR0FBRSxJQUFTLENBQUMsSUFBSUEsRUFBRSxDQUFDQSxFQUFFdEQsRUFBRTJzQixPQUFPN29CLEVBQUUsT0FBTyxDQUFDLEdBQUcsT0FBT1IsRUFBRSxNQUFNNkssTUFBTXNULEVBQUUsTUFBb0IsT0FBZDlXLEVBQUVySCxFQUFFNmxCLFVBQWlCN2xCLEVBQUVncEIsS0FBSyxLQUFLLEVBQUV6YSxHQUFFLEVBQUcsTUFBTS9OLEVBQUUsS0FBSyxFQUFpQyxLQUFLLEVBQUU2RyxFQUFFQSxFQUFFc29CLGNBQWNwaEIsR0FBRSxFQUFHLE1BQU0vTixFQUFFUixFQUFFQSxFQUFFcXBCLE9BQU9ycEIsR0FBRSxFQUFHLEdBQUcsSUFBSXRELEVBQUVzc0IsS0FBSyxJQUFJdHNCLEVBQUVzc0IsSUFBSSxDQUFDeG9CLEVBQUUsSUFBSSxJQUFJNFAsRUFBRTVQLEVBQUV5ZixFQUFFdmpCLEVBQUVMLEVBQUVJLEVBQUVELEVBQUV5akIsSUFBSSxHQUFHbTRCLEdBQUdob0MsRUFBRTVULEVBQUVILEdBQUcsT0FBT0csRUFBRXFoQixPQUFPLElBQUlyaEIsRUFBRXdzQixJQUFJeHNCLEVBQUVxaEIsTUFBTXdMLE9BQU83c0IsRUFBRUEsRUFBRUEsRUFBRXFoQixVQUFVLENBQUMsR0FBR3JoQixJQUFJeWpCLEVBQUUsTUFBTXpmLEVBQUUsS0FBSyxPQUFPaEUsRUFBRXl4QixTQUFTLENBQUMsR0FBRyxPQUFPenhCLEVBQUU2c0IsUUFBUTdzQixFQUFFNnNCLFNBQVNwSixFQUFFLE1BQU16ZixFQUFFaEUsRUFBRUEsRUFBRTZzQixPQUFPN3NCLEVBQUV5eEIsUUFBUTVFLE9BQU83c0IsRUFBRTZzQixPQUFPN3NCLEVBQUVBLEVBQUV5eEIsUUFBUTFmLEdBQUc2QixFQUNyZi9JLEVBQUU0WSxFQUFFdmpCLEVBQUVtcEIsVUFBVSxJQUFJelYsRUFBRTNRLFNBQVMyUSxFQUFFNGUsV0FBVzdDLFlBQVlsTSxHQUFHN1AsRUFBRStiLFlBQVlsTSxJQUFJNVksRUFBRThrQixZQUFZenZCLEVBQUVtcEIsZ0JBQWdCLEdBQUcsSUFBSW5wQixFQUFFc3NCLEtBQUssR0FBRyxPQUFPdHNCLEVBQUVtaEIsTUFBTSxDQUFDeFcsRUFBRTNLLEVBQUVtcEIsVUFBVThKLGNBQWNwaEIsR0FBRSxFQUFHN1IsRUFBRW1oQixNQUFNd0wsT0FBTzNzQixFQUFFQSxFQUFFQSxFQUFFbWhCLE1BQU0sZUFBZSxHQUFHdTZCLEdBQUc1M0MsRUFBRTlELEVBQUVELEdBQUcsT0FBT0MsRUFBRW1oQixNQUFNLENBQUNuaEIsRUFBRW1oQixNQUFNd0wsT0FBTzNzQixFQUFFQSxFQUFFQSxFQUFFbWhCLE1BQU0sU0FBUyxHQUFHbmhCLElBQUkrRCxFQUFFLE1BQU0sS0FBSyxPQUFPL0QsRUFBRXV4QixTQUFTLENBQUMsR0FBRyxPQUFPdnhCLEVBQUUyc0IsUUFBUTNzQixFQUFFMnNCLFNBQVM1b0IsRUFBRSxPQUFrQixLQUFYL0QsRUFBRUEsRUFBRTJzQixRQUFhTCxNQUFNaHBCLEdBQUUsR0FBSXRELEVBQUV1eEIsUUFBUTVFLE9BQU8zc0IsRUFBRTJzQixPQUFPM3NCLEVBQUVBLEVBQUV1eEIsU0FDcGEsU0FBUytxQixHQUFHeDRDLEVBQUVDLEdBQUcsT0FBT0EsRUFBRXVvQixLQUFLLEtBQUssRUFBRSxLQUFLLEdBQUcsS0FBSyxHQUFHLEtBQUssR0FBRyxLQUFLLEdBQVcsWUFBUmd2QixHQUFHLEVBQUV2M0MsR0FBVSxLQUFLLEVBQUUsT0FBTyxLQUFLLEVBQUUsSUFBSWhFLEVBQUVnRSxFQUFFb2xCLFVBQVUsR0FBRyxNQUFNcHBCLEVBQUUsQ0FBQyxJQUFJQyxFQUFFK0QsRUFBRWt3QyxjQUFjM3dDLEVBQUUsT0FBT1EsRUFBRUEsRUFBRW13QyxjQUFjajBDLEVBQUU4RCxFQUFFQyxFQUFFNEUsS0FBSyxJQUFJZ0MsRUFBRTVHLEVBQUVvc0MsWUFBK0IsR0FBbkJwc0MsRUFBRW9zQyxZQUFZLEtBQVEsT0FBT3hsQyxFQUFFLENBQWdGLElBQS9FNUssRUFBRXk4QixJQUFJeDhCLEVBQUUsVUFBVThELEdBQUcsVUFBVTlELEVBQUUySSxNQUFNLE1BQU0zSSxFQUFFQyxNQUFNNHRCLEdBQUc5dEIsRUFBRUMsR0FBR3k2QixHQUFHMzJCLEVBQUVSLEdBQUdTLEVBQUUwMkIsR0FBRzMyQixFQUFFOUQsR0FBT3NELEVBQUUsRUFBRUEsRUFBRXFILEVBQUUxRyxPQUFPWCxHQUFHLEVBQUUsQ0FBQyxJQUFJdU8sRUFBRWxILEVBQUVySCxHQUFHb1EsRUFBRS9JLEVBQUVySCxFQUFFLEdBQUcsVUFBVXVPLEVBQUV5bkIsR0FBR3Y1QixFQUFFMlQsR0FBRyw0QkFBNEI3QixFQUFFc2QsR0FBR3B2QixFQUFFMlQsR0FBRyxhQUFhN0IsRUFBRTZkLEdBQUczdkIsRUFBRTJULEdBQUdtWCxFQUFHOXFCLEVBQUU4UixFQUFFNkIsRUFBRTNQLEdBQUcsT0FBT0QsR0FBRyxJQUFLLFFBQVFncUIsR0FBRy90QixFQUFFQyxHQUFHLE1BQ2hmLElBQUssV0FBVzR1QixHQUFHN3VCLEVBQUVDLEdBQUcsTUFBTSxJQUFLLFNBQVMrRCxFQUFFaEUsRUFBRXl0QixjQUFjdXNCLFlBQVloNkMsRUFBRXl0QixjQUFjdXNCLGNBQWMvNUMsRUFBRWc2QyxTQUFtQixPQUFWbDJDLEVBQUU5RCxFQUFFVyxPQUFjMHRCLEdBQUd0dUIsSUFBSUMsRUFBRWc2QyxTQUFTbDJDLEdBQUUsR0FBSUMsTUFBTS9ELEVBQUVnNkMsV0FBVyxNQUFNaDZDLEVBQUUrVCxhQUFhc2EsR0FBR3R1QixJQUFJQyxFQUFFZzZDLFNBQVNoNkMsRUFBRStULGNBQWEsR0FBSXNhLEdBQUd0dUIsSUFBSUMsRUFBRWc2QyxTQUFTaDZDLEVBQUVnNkMsU0FBUyxHQUFHLElBQUcsTUFBTyxPQUFPLEtBQUssRUFBRSxHQUFHLE9BQU9qMkMsRUFBRW9sQixVQUFVLE1BQU1oYixNQUFNc1QsRUFBRSxNQUE0QyxZQUF0QzFkLEVBQUVvbEIsVUFBVXlHLFVBQVU3ckIsRUFBRWt3QyxlQUFxQixLQUFLLEVBQThELGFBQTVEbHdDLEVBQUVBLEVBQUVvbEIsV0FBWXlMLFVBQVU3d0IsRUFBRTZ3QixTQUFRLEVBQUdTLEdBQUd0eEIsRUFBRWt2QixpQkFBdUIsS0FBSyxHQUFHLE9BQU8sS0FBSyxHQUN6YixHQUQ0Ymx6QixFQUFFZ0UsRUFBRSxPQUFPQSxFQUFFb3RCLGNBQ3ZlbnhCLEdBQUUsR0FBSUEsR0FBRSxFQUFHRCxFQUFFZ0UsRUFBRW9kLE1BQU1vN0IsR0FBRzlOLE1BQVMsT0FBTzF1QyxFQUFFK0QsRUFBRSxJQUFJQSxFQUFFL0QsSUFBSSxDQUFDLEdBQUcsSUFBSStELEVBQUV3b0IsSUFBSTNoQixFQUFFN0csRUFBRXFsQixVQUFVbnBCLEVBQWEsbUJBQVYySyxFQUFFQSxFQUFFOFIsT0FBNEI4YyxZQUFZNXVCLEVBQUU0dUIsWUFBWSxVQUFVLE9BQU8sYUFBYTV1QixFQUFFK1IsUUFBUSxRQUFTL1IsRUFBRTdHLEVBQUVxbEIsVUFBa0M3bEIsRUFBRSxPQUExQkEsRUFBRVEsRUFBRW13QyxjQUFjeDNCLFFBQThCblosRUFBRS9CLGVBQWUsV0FBVytCLEVBQUVvWixRQUFRLEtBQUsvUixFQUFFOFIsTUFBTUMsUUFBUTBjLEdBQUcsVUFBVTkxQixTQUFTLEdBQUcsSUFBSVEsRUFBRXdvQixJQUFJeG9CLEVBQUVxbEIsVUFBVXlHLFVBQVU1dkIsRUFBRSxHQUFHOEQsRUFBRW13QyxrQkFBbUIsSUFBRyxLQUFLbndDLEVBQUV3b0IsS0FBSyxPQUFPeG9CLEVBQUVxdEIsZUFBZSxPQUFPcnRCLEVBQUVxdEIsY0FBY0MsV0FBVyxFQUFDem1CLEVBQUU3RyxFQUFFcWQsTUFBTW9RLFNBQVU1RSxPQUFPN29CLEVBQUVBLEVBQ25mNkcsRUFBRSxTQUFjLEdBQUcsT0FBTzdHLEVBQUVxZCxNQUFNLENBQUNyZCxFQUFFcWQsTUFBTXdMLE9BQU83b0IsRUFBRUEsRUFBRUEsRUFBRXFkLE1BQU0sVUFBUyxHQUFHcmQsSUFBSS9ELEVBQUUsTUFBTSxLQUFLLE9BQU8rRCxFQUFFeXRCLFNBQVMsQ0FBQyxHQUFHLE9BQU96dEIsRUFBRTZvQixRQUFRN29CLEVBQUU2b0IsU0FBUzVzQixFQUFFLE1BQU0rRCxFQUFFQSxFQUFFQSxFQUFFNm9CLE9BQU83b0IsRUFBRXl0QixRQUFRNUUsT0FBTzdvQixFQUFFNm9CLE9BQU83b0IsRUFBRUEsRUFBRXl0QixRQUFjLFlBQU5pckIsR0FBR3o0QyxHQUFVLEtBQUssR0FBUyxZQUFOeTRDLEdBQUd6NEMsR0FBVSxLQUFLLEdBQUcsT0FBTyxNQUFNb0ssTUFBTXNULEVBQUUsTUFBTyxTQUFTKzZCLEdBQUcxNEMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFcXNDLFlBQVksR0FBRyxPQUFPcHNDLEVBQUUsQ0FBQ0QsRUFBRXFzQyxZQUFZLEtBQUssSUFBSXB3QyxFQUFFK0QsRUFBRXFsQixVQUFVLE9BQU9wcEIsSUFBSUEsRUFBRStELEVBQUVxbEIsVUFBVSxJQUFJNHhCLElBQUloM0MsRUFBRTBELFNBQVEsU0FBUzFELEdBQUcsSUFBSS9ELEVBQUV5OEMsR0FBR3Y3QyxLQUFLLEtBQUs0QyxFQUFFQyxHQUFHaEUsRUFBRTRRLElBQUk1TSxLQUFLaEUsRUFBRTRnQixJQUFJNWMsR0FBR0EsRUFBRStILEtBQUs5TCxFQUFFQSxRQUMvYyxJQUFJMDhDLEdBQUcsbUJBQW9CNytCLFFBQVFBLFFBQVEyQyxJQUFJLFNBQVNtOEIsR0FBRzc0QyxFQUFFQyxFQUFFaEUsSUFBR0EsRUFBRTB3QyxHQUFHMXdDLEVBQUUsT0FBUXVzQixJQUFJLEVBQUV2c0IsRUFBRTR3QyxRQUFRLENBQUNpTSxRQUFRLE1BQU0sSUFBSTU4QyxFQUFFK0QsRUFBRXBELE1BQXNELE9BQWhEWixFQUFFb04sU0FBUyxXQUFXMHZDLEtBQUtBLElBQUcsRUFBR0MsR0FBRzk4QyxHQUFHaTdDLEdBQUduM0MsRUFBRUMsSUFBV2hFLEVBQ3JMLFNBQVNnOUMsR0FBR2o1QyxFQUFFQyxFQUFFaEUsSUFBR0EsRUFBRTB3QyxHQUFHMXdDLEVBQUUsT0FBUXVzQixJQUFJLEVBQUUsSUFBSXRzQixFQUFFOEQsRUFBRTZFLEtBQUtKLHlCQUF5QixHQUFHLG1CQUFvQnZJLEVBQUUsQ0FBQyxJQUFJc0QsRUFBRVMsRUFBRXBELE1BQU1aLEVBQUU0d0MsUUFBUSxXQUFtQixPQUFSc0ssR0FBR24zQyxFQUFFQyxHQUFVL0QsRUFBRXNELElBQUksSUFBSXFILEVBQUU3RyxFQUFFcWxCLFVBQThPLE9BQXBPLE9BQU94ZSxHQUFHLG1CQUFvQkEsRUFBRXF5QyxvQkFBb0JqOUMsRUFBRW9OLFNBQVMsV0FBVyxtQkFBb0JuTixJQUFJLE9BQU9pOUMsR0FBR0EsR0FBRyxJQUFJdjhCLElBQUksQ0FBQ3RiLE9BQU82M0MsR0FBR3Q4QixJQUFJdmIsTUFBTTYxQyxHQUFHbjNDLEVBQUVDLElBQUksSUFBSWhFLEVBQUVnRSxFQUFFKzJDLE1BQU0xMUMsS0FBSzQzQyxrQkFBa0JqNUMsRUFBRXBELE1BQU0sQ0FBQ3U4QyxlQUFlLE9BQU9uOUMsRUFBRUEsRUFBRSxPQUFjQSxFQUM3WixJQStCK1RvOUMsR0EvQjNUQyxHQUFHMTZDLEtBQUt5YSxLQUFLa2dDLEdBQUd6eUIsRUFBR2hHLHVCQUF1QjA0QixHQUFHMXlCLEVBQUc3RixrQkFBdUN1MUIsR0FBRyxFQUFZQyxHQUFHLEVBQUVDLEdBQUcsRUFBT24yQixHQUFqRCxFQUFxREosR0FBRSxLQUFLTSxHQUFFLEtBQUtMLEdBQUUsRUFBRUgsR0FBRXUyQixHQUFHaUQsR0FBRyxLQUFLQyxHQUFHLFdBQVdDLEdBQUcsV0FBV0MsR0FBRyxLQUFLakQsR0FBRyxFQUFFa0QsSUFBRyxFQUFHcEIsR0FBRyxFQUFTOTNCLEdBQUUsS0FBS280QixJQUFHLEVBQUdDLEdBQUcsS0FBS0csR0FBRyxLQUFLVyxJQUFHLEVBQUdDLEdBQUcsS0FBS0MsR0FBRyxHQUFHQyxHQUFHLEtBQUtDLEdBQUcsRUFBRUMsR0FBRyxLQUFLQyxHQUFHLEVBQUUsU0FBUzFNLEtBQUssT0FBeE8sSUFBZ1AsR0FBRG50QixJQUFlLFlBQVlvcUIsS0FBSyxHQUFHLEdBQUcsSUFBSXlQLEdBQUdBLEdBQUdBLEdBQUcsWUFBWXpQLEtBQUssR0FBRyxHQUM5WCxTQUFTZ0QsR0FBRzN0QyxFQUFFQyxFQUFFaEUsR0FBWSxHQUFHLElBQU8sR0FBbkJnRSxFQUFFQSxFQUFFbEQsT0FBa0IsT0FBTyxXQUFXLElBQUliLEVBQUUwdUMsS0FBSyxHQUFHLElBQU8sRUFBRjNxQyxHQUFLLE9BQU8sS0FBSy9ELEVBQUUsV0FBVyxXQUFXLEdBRC9DLElBQVUsR0FDeUNxa0IsSUFBVSxPQUFPSCxHQUFFLEdBQUcsT0FBT25rQixFQUFFK0QsRUFBRW1yQyxHQUFHbnJDLEVBQWMsRUFBWi9ELEVBQUVvK0MsV0FBYSxJQUFJLFVBQVUsT0FBT24rQyxHQUFHLEtBQUssR0FBRzhELEVBQUUsV0FBVyxNQUFNLEtBQUssR0FBR0EsRUFBRW1yQyxHQUFHbnJDLEVBQUUsSUFBSSxLQUFLLE1BQU0sS0FBSyxHQUFHLEtBQUssR0FBR0EsRUFBRW1yQyxHQUFHbnJDLEVBQUUsSUFBSSxLQUFLLE1BQU0sS0FBSyxHQUFHQSxFQUFFLEVBQUUsTUFBTSxRQUFRLE1BQU1xSyxNQUFNc1QsRUFBRSxNQUE0QixPQUFyQixPQUFPd0MsSUFBR25nQixJQUFJb2dCLE1BQUtwZ0IsRUFBU0EsRUFDbFgsU0FBUzR0QyxHQUFHNXRDLEVBQUVDLEdBQUcsR0FBRyxHQUFHaTZDLEdBQUcsTUFBTUEsR0FBRyxFQUFFQyxHQUFHLEtBQUs5dkMsTUFBTXNULEVBQUUsTUFBZ0IsR0FBRyxRQUFiM2QsRUFBRXM2QyxHQUFHdDZDLEVBQUVDLElBQWUsQ0FBQyxJQUFJaEUsRUFBRTJ1QyxLQUFLLGFBQWEzcUMsRUFGbEMsSUFBSyxFQUVnQ3NnQixLQUZyQyxJQUVrRCxHQUFEQSxJQUFlZzZCLEdBQUd2NkMsSUFBSTRnQixHQUFFNWdCLEdBRnpFLElBRTRFdWdCLElBQU8ycUIsTUFBTXRxQixHQUFFNWdCLEdBRjNGLElBRWlHLEVBQUZ1Z0IsS0FBVSxLQUFLdGtCLEdBQUcsS0FBS0EsSUFBSSxPQUFPZytDLEdBQUdBLEdBQUcsSUFBSXY5QixJQUFJLENBQUMsQ0FBQzFjLEVBQUVDLFdBQW1CLEtBQWJoRSxFQUFFZytDLEdBQUd4OUMsSUFBSXVELEtBQWdCL0QsRUFBRWdFLElBQUlnNkMsR0FBR3Q0QyxJQUFJM0IsRUFBRUMsS0FDelEsU0FBU3E2QyxHQUFHdDZDLEVBQUVDLEdBQUdELEVBQUUrckMsZUFBZTlyQyxJQUFJRCxFQUFFK3JDLGVBQWU5ckMsR0FBRyxJQUFJaEUsRUFBRStELEVBQUVrdEIsVUFBVSxPQUFPanhCLEdBQUdBLEVBQUU4dkMsZUFBZTlyQyxJQUFJaEUsRUFBRTh2QyxlQUFlOXJDLEdBQUcsSUFBSS9ELEVBQUU4RCxFQUFFNm9CLE9BQU9ycEIsRUFBRSxLQUFLLEdBQUcsT0FBT3RELEdBQUcsSUFBSThELEVBQUV3b0IsSUFBSWhwQixFQUFFUSxFQUFFcWxCLGVBQWUsS0FBSyxPQUFPbnBCLEdBQUcsQ0FBK0gsR0FBOUhELEVBQUVDLEVBQUVneEIsVUFBVWh4QixFQUFFMHZDLG9CQUFvQjNyQyxJQUFJL0QsRUFBRTB2QyxvQkFBb0IzckMsR0FBRyxPQUFPaEUsR0FBR0EsRUFBRTJ2QyxvQkFBb0IzckMsSUFBSWhFLEVBQUUydkMsb0JBQW9CM3JDLEdBQU0sT0FBTy9ELEVBQUUyc0IsUUFBUSxJQUFJM3NCLEVBQUVzc0IsSUFBSSxDQUFDaHBCLEVBQUV0RCxFQUFFbXBCLFVBQVUsTUFBTW5wQixFQUFFQSxFQUFFMnNCLE9BQTBELE9BQW5ELE9BQU9ycEIsSUFBSTJnQixLQUFJM2dCLElBQUkydEMsR0FBR2x0QyxHQUFHZ2dCLEtBQUl5MkIsSUFBSUUsR0FBR3AzQyxFQUFFNGdCLEtBQUl5MkIsR0FBR3IzQyxFQUFFUyxJQUFXVCxFQUNyYyxTQUFTZzdDLEdBQUd4NkMsR0FBRyxJQUFJQyxFQUFFRCxFQUFFeTZDLGdCQUFnQixHQUFHLElBQUl4NkMsRUFBRSxPQUFPQSxFQUF1QixJQUFJeTZDLEdBQUcxNkMsRUFBNUJDLEVBQUVELEVBQUUyNkMsa0JBQTZCLE9BQU8xNkMsRUFBRSxJQUFJaEUsRUFBRStELEVBQUU0NkMsZUFBbUQsT0FBTyxJQUFqQjU2QyxFQUFFL0QsR0FBNUIrRCxFQUFFQSxFQUFFNjZDLHVCQUE0QjUrQyxFQUFFK0QsSUFBZUMsSUFBSUQsRUFBRSxFQUFFQSxFQUNuTCxTQUFTNGdCLEdBQUU1Z0IsR0FBRyxHQUFHLElBQUlBLEVBQUV5NkMsZ0JBQWdCejZDLEVBQUU4NkMsdUJBQXVCLFdBQVc5NkMsRUFBRSs2QyxpQkFBaUIsR0FBRy82QyxFQUFFZzdDLGFBQWFoUSxHQUFHdVAsR0FBR245QyxLQUFLLEtBQUs0QyxRQUFRLENBQUMsSUFBSUMsRUFBRXU2QyxHQUFHeDZDLEdBQUcvRCxFQUFFK0QsRUFBRWc3QyxhQUFhLEdBQUcsSUFBSS82QyxFQUFFLE9BQU9oRSxJQUFJK0QsRUFBRWc3QyxhQUFhLEtBQUtoN0MsRUFBRTg2Qyx1QkFBdUIsRUFBRTk2QyxFQUFFKzZDLGlCQUFpQixRQUFRLENBQUMsSUFBSTcrQyxFQUFFd3hDLEtBQXFILEdBQWhILGFBQWF6dEMsRUFBRS9ELEVBQUUsR0FBRyxJQUFJK0QsR0FBRyxJQUFJQSxFQUFFL0QsRUFBRSxHQUEwQ0EsRUFBRSxJQUF4Q0EsRUFBRSxJQUFJLFdBQVcrRCxHQUFHLElBQUksV0FBVy9ELElBQVUsR0FBRyxLQUFLQSxFQUFFLEdBQUcsTUFBTUEsRUFBRSxHQUFHLEdBQU8sT0FBT0QsRUFBRSxDQUFDLElBQUl1RCxFQUFFUSxFQUFFKzZDLGlCQUFpQixHQUFHLzZDLEVBQUU4NkMseUJBQXlCNzZDLEdBQUdULEdBQUd0RCxFQUFFLE9BQU9ELElBQUlrdUMsSUFBSWhCLEdBQUdsdEMsR0FBRytELEVBQUU4NkMsdUJBQ25lNzZDLEVBQUVELEVBQUUrNkMsaUJBQWlCNytDLEVBQUUrRCxFQUFFLGFBQWFBLEVBQUUrcUMsR0FBR3VQLEdBQUduOUMsS0FBSyxLQUFLNEMsSUFBSStxQyxHQUFHN3VDLEVBQUUrK0MsR0FBRzc5QyxLQUFLLEtBQUs0QyxHQUFHLENBQUNrN0MsUUFBUSxJQUFJLFdBQVdqN0MsR0FBRzBxQyxPQUFPM3FDLEVBQUVnN0MsYUFBYS82QyxJQUNsSSxTQUFTZzdDLEdBQUdqN0MsRUFBRUMsR0FBUSxHQUFMbTZDLEdBQUcsRUFBS242QyxFQUFFLE9BQWNrN0MsR0FBR243QyxFQUFWQyxFQUFFeXRDLE1BQWE5c0IsR0FBRTVnQixHQUFHLEtBQUssSUFBSS9ELEVBQUV1K0MsR0FBR3g2QyxHQUFHLEdBQUcsSUFBSS9ELEVBQUUsQ0FBa0IsR0FBakJnRSxFQUFFRCxFQUFFZzdDLGFBUGIsSUFPK0IsR0FBRHo2QixJQUFlLE1BQU1sVyxNQUFNc1QsRUFBRSxNQUFpQyxHQUEzQnk5QixLQUFLcDdDLElBQUltZ0IsSUFBR2xrQixJQUFJbWtCLElBQUdpN0IsR0FBR3I3QyxFQUFFL0QsR0FBTSxPQUFPd2tCLEdBQUUsQ0FBQyxJQUFJdmtCLEVBQUVxa0IsR0FBRUEsSUFQdkcsR0FPd0gsSUFBWCxJQUFJL2dCLEVBQUU4N0MsT0FBUSxJQUFJQyxLQUFLLE1BQU0sTUFBTTNyQyxHQUFHNHJDLEdBQUd4N0MsRUFBRTRQLEdBQWtDLEdBQXRCNjdCLEtBQUtsckIsR0FBRXJrQixFQUFFcTlDLEdBQUdyNkIsUUFBUTFmLEVBUHZLLElBTzRLeWdCLEdBQU8sTUFBTWhnQixFQUFFdzVDLEdBQUc0QixHQUFHcjdDLEVBQUUvRCxHQUFHMjZDLEdBQUc1MkMsRUFBRS9ELEdBQUcya0IsR0FBRTVnQixHQUFHQyxFQUFFLEdBQUcsT0FBT3dnQixHQUFFLE9BQU9qaEIsRUFBRVEsRUFBRXk3QyxhQUFhejdDLEVBQUVrZixRQUFRZ08sVUFBVWx0QixFQUFFMDdDLHVCQUF1QnovQyxFQUFFQyxFQUFFK2pCLEdBQUVFLEdBQUUsS0FBS2prQixHQUFHLEtBQUtzNkMsR0FBRyxLQVA5VCxFQU9zVSxNQUFNbnNDLE1BQU1zVCxFQUFFLE1BQU0sS0FQclYsRUFPNlZ3OUIsR0FBR243QyxFQUFFLEVBQUUvRCxFQUFFLEVBQUVBLEdBQUcsTUFBTSxLQUFLdzZDLEdBQ3ZiLEdBRDBiRyxHQUFHNTJDLEVBQUUvRCxHQUN0ZUEsS0FEeWVDLEVBQUU4RCxFQUFFMjdDLHFCQUNyZTM3QyxFQUFFNjZDLHNCQUFzQmUsR0FBR3A4QyxJQUFPLGFBQWFrNkMsSUFBa0IsSUFBYmw2QyxFQUFFaTVDLEdBUnFKLElBUS9JOU4sTUFBVyxDQUFDLEdBQUdrUCxHQUFHLENBQUMsSUFBSWh6QyxFQUFFN0csRUFBRTQ2QyxlQUFlLEdBQUcsSUFBSS96QyxHQUFHQSxHQUFHNUssRUFBRSxDQUFDK0QsRUFBRTQ2QyxlQUFlMytDLEVBQUVvL0MsR0FBR3I3QyxFQUFFL0QsR0FBRyxPQUFlLEdBQUcsS0FBWDRLLEVBQUUyekMsR0FBR3g2QyxLQUFhNkcsSUFBSTVLLEVBQUUsTUFBTSxHQUFHLElBQUlDLEdBQUdBLElBQUlELEVBQUUsQ0FBQytELEVBQUU0NkMsZUFBZTErQyxFQUFFLE1BQU04RCxFQUFFNjdDLGNBQWM1akIsR0FBRzZqQixHQUFHMStDLEtBQUssS0FBSzRDLEdBQUdSLEdBQUcsTUFBTXM4QyxHQUFHOTdDLEdBQUcsTUFBTSxLQUFLMDJDLEdBQXdFLEdBQXJFRSxHQUFHNTJDLEVBQUUvRCxHQUF5QkEsS0FBdEJDLEVBQUU4RCxFQUFFMjdDLHFCQUEwQjM3QyxFQUFFNjZDLHNCQUFzQmUsR0FBR3A4QyxJQUFPcTZDLEtBQXdCLEtBQW5CcjZDLEVBQUVRLEVBQUU0NkMsaUJBQXNCcDdDLEdBQUd2RCxHQUFHLENBQUMrRCxFQUFFNDZDLGVBQWUzK0MsRUFBRW8vQyxHQUFHcjdDLEVBQUUvRCxHQUFHLE1BQWMsR0FBRyxLQUFYdUQsRUFBRWc3QyxHQUFHeDZDLEtBQWFSLElBQUl2RCxFQUFFLE1BQU0sR0FBRyxJQUFJQyxHQUFHQSxJQUFJRCxFQUFFLENBQUMrRCxFQUFFNDZDLGVBQ3hlMStDLEVBQUUsTUFBZ1AsR0FBMU8sYUFBYXk5QyxHQUFHejlDLEVBQUUsSUFBSSxXQUFXeTlDLElBQUloUCxLQUFLLGFBQWErTyxHQUFHeDlDLEVBQUUsR0FBR0EsRUFBRSxJQUFJLFdBQVd3OUMsSUFBSSxJQUF1QyxHQUFOeDlDLEdBQTdCc0QsRUFBRW1yQyxNQUErQnp1QyxLQUFRQSxFQUFFLElBQXBDRCxFQUFFLElBQUksV0FBV0EsR0FBR3VELElBQW1CdEQsR0FBRyxJQUFJQSxFQUFFLElBQUksSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLQSxFQUFFLEtBQUssSUFBSUEsRUFBRSxJQUFJLEtBQUtBLEVBQUUsS0FBSyxLQUFLbzlDLEdBQUdwOUMsRUFBRSxPQUFPQSxLQUFRQSxFQUFFRCxJQUFPLEdBQUdDLEVBQUUsQ0FBQzhELEVBQUU2N0MsY0FBYzVqQixHQUFHNmpCLEdBQUcxK0MsS0FBSyxLQUFLNEMsR0FBRzlELEdBQUcsTUFBTTQvQyxHQUFHOTdDLEdBQUcsTUFBTSxLQVQ1TCxFQVNvTSxHQUFHLGFBQWEwNUMsSUFBSSxPQUFPRSxHQUFHLENBQUMveUMsRUFBRTZ5QyxHQUFHLElBQUkzckMsRUFBRTZyQyxHQUF1SCxHQUE1RixJQUF4QjE5QyxFQUFzQixFQUFwQjZSLEVBQUVndUMsbUJBQXlCNy9DLEVBQUUsR0FBR3NELEVBQWdCLEVBQWR1TyxFQUFFaXVDLFlBQThEOS9DLEdBQWhEMkssRUFBRThqQyxNQUFNLElBQUksV0FBVzlqQyxJQUFnQixFQUFaa0gsRUFBRXNzQyxXQUFhLFFBQVc3NkMsRUFBRSxFQUFFQSxFQUFFdEQsRUFBRTJLLEdBQU0sR0FBRzNLLEVBQUUsQ0FBQzA2QyxHQUFHNTJDLEVBQUUvRCxHQUFHK0QsRUFBRTY3QyxjQUMvZTVqQixHQUFHNmpCLEdBQUcxK0MsS0FBSyxLQUFLNEMsR0FBRzlELEdBQUcsT0FBTzQvQyxHQUFHOTdDLEdBQUcsTUFBTSxRQUFRLE1BQU1xSyxNQUFNc1QsRUFBRSxNQUFZLEdBQUxpRCxHQUFFNWdCLEdBQU1BLEVBQUVnN0MsZUFBZS82QyxFQUFFLE9BQU9nN0MsR0FBRzc5QyxLQUFLLEtBQUs0QyxJQUFJLE9BQU8sS0FDaEksU0FBU3U2QyxHQUFHdjZDLEdBQUcsSUFBSUMsRUFBRUQsRUFBRXk2QyxnQkFBcUMsR0FBckJ4NkMsRUFBRSxJQUFJQSxFQUFFQSxFQUFFLFdBWHVCLElBV1AsR0FBRHNnQixJQUFlLE1BQU1sVyxNQUFNc1QsRUFBRSxNQUFpQyxHQUEzQnk5QixLQUFLcDdDLElBQUltZ0IsSUFBR2xnQixJQUFJbWdCLElBQUdpN0IsR0FBR3I3QyxFQUFFQyxHQUFNLE9BQU93Z0IsR0FBRSxDQUFDLElBQUl4a0IsRUFBRXNrQixHQUFFQSxJQVhqRSxHQVdrRixJQUFYLElBQUlya0IsRUFBRW8vQyxPQUFRLElBQUlXLEtBQUssTUFBTSxNQUFNejhDLEdBQUdnOEMsR0FBR3g3QyxFQUFFUixHQUFrQyxHQUF0QmlzQyxLQUFLbHJCLEdBQUV0a0IsRUFBRXM5QyxHQUFHcjZCLFFBQVFoakIsRUFYakksSUFXc0krakIsR0FBTyxNQUFNaGtCLEVBQUV3OUMsR0FBRzRCLEdBQUdyN0MsRUFBRUMsR0FBRzIyQyxHQUFHNTJDLEVBQUVDLEdBQUcyZ0IsR0FBRTVnQixHQUFHL0QsRUFBRSxHQUFHLE9BQU93a0IsR0FBRSxNQUFNcFcsTUFBTXNULEVBQUUsTUFBTTNkLEVBQUV5N0MsYUFBYXo3QyxFQUFFa2YsUUFBUWdPLFVBQVVsdEIsRUFBRTA3Qyx1QkFBdUJ6N0MsRUFBRWtnQixHQUFFLEtBQUsyN0IsR0FBRzk3QyxHQUFHNGdCLEdBQUU1Z0IsR0FBRyxPQUFPLEtBQ3pZLFNBQVNrOEMsR0FBR2w4QyxFQUFFQyxHQUFHLElBQUloRSxFQUFFc2tCLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU92Z0IsRUFBRUMsR0FBYixRQVowQyxLQVlsQnNnQixHQUFFdGtCLElBQVNpdkMsTUFBTSxTQUFTaVIsR0FBR244QyxFQUFFQyxHQUFHLElBQUloRSxFQUFFc2tCLEdBQUVBLEtBQUksRUFBRUEsSUFaekIsRUFZK0IsSUFBSSxPQUFPdmdCLEVBQUVDLEdBQWIsUUFacEMsS0FZNERzZ0IsR0FBRXRrQixJQUFTaXZDLE1BQy9JLFNBQVNtUSxHQUFHcjdDLEVBQUVDLEdBQUdELEVBQUV5N0MsYUFBYSxLQUFLejdDLEVBQUUwN0MsdUJBQXVCLEVBQUUsSUFBSXovQyxFQUFFK0QsRUFBRTY3QyxjQUFpRCxJQUFsQyxJQUFJNS9DLElBQUkrRCxFQUFFNjdDLGVBQWUsRUFBRTFqQixHQUFHbDhCLElBQU8sT0FBT3drQixHQUFFLElBQUl4a0IsRUFBRXdrQixHQUFFb0ksT0FBTyxPQUFPNXNCLEdBQUcsQ0FBQyxJQUFJQyxFQUFFRCxFQUFFLE9BQU9DLEVBQUVzc0IsS0FBSyxLQUFLLEVBQTZCLE9BQTNCdHNCLEVBQUVBLEVBQUUySSxLQUFLVixvQkFBd0N3a0MsS0FBSyxNQUFNLEtBQUssRUFBRW9ILEtBQUtueEIsR0FBRU8sSUFBR1AsR0FBRUssSUFBRyxNQUFNLEtBQUssRUFBRWd4QixHQUFHL3pDLEdBQUcsTUFBTSxLQUFLLEVBQUU2ekMsS0FBSyxNQUFNLEtBQUssR0FBYyxLQUFLLEdBQUdueEIsR0FBRVksSUFBRyxNQUFNLEtBQUssR0FBR2tzQixHQUFHeHZDLEdBQUdELEVBQUVBLEVBQUU0c0IsT0FBTzFJLEdBQUVuZ0IsRUFBRXlnQixHQUFFcXVCLEdBQUc5dUMsRUFBRWtmLFFBQVEsTUFBTWtCLEdBQUVuZ0IsRUFBRWdnQixHQUFFdTJCLEdBQUdpRCxHQUFHLEtBQUtFLEdBQUdELEdBQUcsV0FBV0UsR0FBRyxLQUFLakQsR0FBRyxFQUFFa0QsSUFBRyxFQUNuYyxTQUFTMkIsR0FBR3g3QyxFQUFFQyxHQUFHLE9BQUUsQ0FBQyxJQUF1QixHQUFuQndyQyxLQUFLOEUsR0FBR3J4QixRQUFROHhCLEdBQU1OLEdBQUcsSUFBSSxJQUFJejBDLEVBQUV5a0IsR0FBRTJNLGNBQWMsT0FBT3B4QixHQUFHLENBQUMsSUFBSUMsRUFBRUQsRUFBRWkxQyxNQUFNLE9BQU9oMUMsSUFBSUEsRUFBRXN3QyxRQUFRLE1BQU12d0MsRUFBRUEsRUFBRW1NLEtBQTJCLEdBQXRCcW9DLEdBQUcsRUFBRS9pQyxHQUFFRCxHQUFFaVQsR0FBRSxLQUFLZ3dCLElBQUcsRUFBTSxPQUFPandCLElBQUcsT0FBT0EsR0FBRW9JLE9BQU8sT0FBTzVJLEdBZC9GLEVBY29HdzVCLEdBQUd4NUMsRUFBRXdnQixHQUFFLEtBQUt6Z0IsRUFBRSxDQUFDLElBQUlSLEVBQUVRLEVBQUU2RyxFQUFFNFosR0FBRW9JLE9BQU85YSxFQUFFMFMsR0FBRTdRLEVBQUUzUCxFQUF3RCxHQUF0REEsRUFBRW1nQixHQUFFclMsRUFBRW9mLFdBQVcsS0FBS3BmLEVBQUU4Z0MsWUFBWTlnQyxFQUFFNGdDLFdBQVcsS0FBUSxPQUFPLytCLEdBQUcsaUJBQWtCQSxHQUFHLG1CQUFvQkEsRUFBRTVILEtBQUssQ0FBQyxJQUFJeVgsRUFBRTdQLEVBQUUsR0FBRyxJQUFZLEVBQVA3QixFQUFFaFIsTUFBUSxDQUFDLElBQUlsQixFQUFFa1MsRUFBRW1mLFVBQVVyeEIsR0FBR2tTLEVBQUVzK0IsWUFBWXh3QyxFQUFFd3dDLFlBQVl0K0IsRUFBRXNmLGNBQWN4eEIsRUFBRXd4QixjQUFjdGYsRUFBRWcrQixlQUFlbHdDLEVBQUVrd0MsaUJBQWlCaCtCLEVBQUVzK0IsWUFDdmYsS0FBS3QrQixFQUFFc2YsY0FBYyxNQUFNLElBQUlyeEIsRUFBRSxJQUFlLEVBQVZ3akIsR0FBRU4sU0FBV3hoQixFQUFFbUosRUFBRSxFQUFFLENBQUMsSUFBSW9LLEVBQUUsR0FBR0EsRUFBRSxLQUFLdlQsRUFBRThxQixJQUFJLENBQUMsSUFBSTFLLEVBQUVwZ0IsRUFBRTJ2QixjQUFjLEdBQUcsT0FBT3ZQLEVBQUU3TSxFQUFFLE9BQU82TSxFQUFFd1AsZUFBcUIsQ0FBQyxJQUFJMmYsRUFBR3Z2QyxFQUFFeXlDLGNBQWNsL0IsT0FBRSxJQUFTZzhCLEVBQUdrSSxZQUFZLElBQUtsSSxFQUFHbUksNkJBQThCcDVDLElBQVMsR0FBR2lWLEVBQUUsQ0FBQyxJQUFJa04sRUFBRXpnQixFQUFFMnVDLFlBQVksR0FBRyxPQUFPbHVCLEVBQUUsQ0FBQyxJQUFJcmhCLEVBQUUsSUFBSThmLElBQUk5ZixFQUFFK2YsSUFBSTRDLEdBQUcvaEIsRUFBRTJ1QyxZQUFZdnZDLE9BQU9xaEIsRUFBRXRCLElBQUk0QyxHQUFHLEdBQUcsSUFBWSxFQUFQL2hCLEVBQUVYLE1BQVEsQ0FBb0MsR0FBbkNXLEVBQUV5dkIsV0FBVyxHQUFHcGYsRUFBRW9mLFlBQVksS0FBUSxJQUFJcGYsRUFBRXlhLElBQUksR0FBRyxPQUFPemEsRUFBRW1mLFVBQVVuZixFQUFFeWEsSUFBSSxPQUFPLENBQUMsSUFBSXRYLEVBQUV5N0IsR0FBRyxXQUFXLE1BQU16N0IsRUFBRXNYLElBQUksRUFBRXNrQixHQUFHLytCLEVBQUVtRCxHQUFHbkQsRUFBRWcrQixlQUFlLFdBQ2xmLE1BQU0vckMsRUFBRTRQLE9BQUUsRUFBTzdCLEVBQUU5TixFQUFFLElBQUk4ZCxFQUFFdmUsRUFBRTQ4QyxVQUErRyxHQUFyRyxPQUFPcitCLEdBQUdBLEVBQUV2ZSxFQUFFNDhDLFVBQVUsSUFBSXhELEdBQUdocEMsRUFBRSxJQUFJZ04sSUFBSW1CLEVBQUVwYyxJQUFJOGQsRUFBRTdQLFNBQWdCLEtBQVhBLEVBQUVtTyxFQUFFdGhCLElBQUlnakIsTUFBZ0I3UCxFQUFFLElBQUlnTixJQUFJbUIsRUFBRXBjLElBQUk4ZCxFQUFFN1AsS0FBU0EsRUFBRS9DLElBQUlrQixHQUFHLENBQUM2QixFQUFFaU4sSUFBSTlPLEdBQUcsSUFBSTJQLEVBQUUyK0IsR0FBR2ovQyxLQUFLLEtBQUtvQyxFQUFFaWdCLEVBQUUxUixHQUFHMFIsRUFBRXpYLEtBQUswVixFQUFFQSxHQUFHaGdCLEVBQUV5dkIsV0FBVyxLQUFLenZCLEVBQUVxdUMsZUFBZTlyQyxFQUFFLE1BQU1ELEVBQUV0QyxFQUFFQSxFQUFFbXJCLGFBQWEsT0FBT25yQixHQUFHa1MsRUFBRXZGLE9BQU9pZSxHQUFHdmEsRUFBRWxKLE9BQU8scUJBQXFCLHdMQUF3TDBqQixHQUFHeGEsSUFoQi9YLElBZ0JtWWtTLEtBQ3JmQSxHQWpCbUcsR0FpQjdGclEsRUFBRW1uQyxHQUFHbm5DLEVBQUU3QixHQUFHclEsRUFBRW1KLEVBQUUsRUFBRSxDQUFDLE9BQU9uSixFQUFFOHFCLEtBQUssS0FBSyxFQUFFL0ksRUFBRTdQLEVBQUVsUyxFQUFFeXZCLFdBQVcsS0FBS3p2QixFQUFFcXVDLGVBQWU5ckMsRUFBa0I4c0MsR0FBR3J2QyxFQUFibTdDLEdBQUduN0MsRUFBRStoQixFQUFFeGYsSUFBVyxNQUFNRCxFQUFFLEtBQUssRUFBRXlmLEVBQUU3UCxFQUFFLElBQUlpTyxFQUFFbmdCLEVBQUVtSCxLQUFLeTNDLEVBQUc1K0MsRUFBRTJuQixVQUFVLEdBQUcsSUFBaUIsR0FBWjNuQixFQUFFeXZCLGFBQWdCLG1CQUFvQnRQLEVBQUVwWiwwQkFBMEIsT0FBTzYzQyxHQUFJLG1CQUFvQkEsRUFBR3BELG9CQUFvQixPQUFPQyxLQUFLQSxHQUFHdHNDLElBQUl5dkMsS0FBTSxDQUFDNStDLEVBQUV5dkIsV0FBVyxLQUFLenZCLEVBQUVxdUMsZUFBZTlyQyxFQUFtQjhzQyxHQUFHcnZDLEVBQWJ1N0MsR0FBR3Y3QyxFQUFFK2hCLEVBQUV4ZixJQUFZLE1BQU1ELEdBQUd0QyxFQUFFQSxFQUFFbXJCLGFBQWEsT0FBT25yQixHQUFHK2lCLEdBQUU4N0IsR0FBRzk3QixJQUFHLE1BQU0rN0IsR0FBSXY4QyxFQUFFdThDLEVBQUcsU0FBUyxPQUM5YixTQUFTbEIsS0FBSyxJQUFJdDdDLEVBQUV1NUMsR0FBR3I2QixRQUFzQixPQUFkcTZCLEdBQUdyNkIsUUFBUTh4QixHQUFVLE9BQU9oeEMsRUFBRWd4QyxHQUFHaHhDLEVBQUUsU0FBU2t0QyxHQUFHbHRDLEVBQUVDLEdBQUdELEVBQUUwNUMsSUFBSSxFQUFFMTVDLElBQUkwNUMsR0FBRzE1QyxHQUFHLE9BQU9DLEdBQUdELEVBQUUyNUMsSUFBSSxFQUFFMzVDLElBQUkyNUMsR0FBRzM1QyxFQUFFNDVDLEdBQUczNUMsR0FBRyxTQUFTa3RDLEdBQUdudEMsR0FBR0EsRUFBRTIyQyxLQUFLQSxHQUFHMzJDLEdBQUcsU0FBU2k4QyxLQUFLLEtBQUssT0FBT3g3QixJQUFHQSxHQUFFZzhCLEdBQUdoOEIsSUFBRyxTQUFTODZCLEtBQUssS0FBSyxPQUFPOTZCLEtBQUkycEIsTUFBTTNwQixHQUFFZzhCLEdBQUdoOEIsSUFBRyxTQUFTZzhCLEdBQUd6OEMsR0FBRyxJQUFJQyxFQUFFbzVDLEdBQUdyNUMsRUFBRWt0QixVQUFVbHRCLEVBQUVvZ0IsSUFBc0UsT0FBbkVwZ0IsRUFBRW13QyxjQUFjbndDLEVBQUV5ekMsYUFBYSxPQUFPeHpDLElBQUlBLEVBQUVzOEMsR0FBR3Y4QyxJQUFJdzVDLEdBQUd0NkIsUUFBUSxLQUFZamYsRUFDdFcsU0FBU3M4QyxHQUFHdjhDLEdBQUd5Z0IsR0FBRXpnQixFQUFFLEVBQUUsQ0FBQyxJQUFJQyxFQUFFd2dCLEdBQUV5TSxVQUFxQixHQUFYbHRCLEVBQUV5Z0IsR0FBRW9JLE9BQVUsSUFBaUIsS0FBWnBJLEdBQUUwTSxXQUFnQixDQUFhLEdBQVpsdEIsRUFBRSsxQyxHQUFHLzFDLEVBQUV3Z0IsR0FBRUwsSUFBTSxJQUFJQSxJQUFHLElBQUlLLEdBQUVtckIsb0JBQW9CLENBQUMsSUFBSSxJQUFJM3ZDLEVBQUUsRUFBRUMsRUFBRXVrQixHQUFFcEQsTUFBTSxPQUFPbmhCLEdBQUcsQ0FBQyxJQUFJc0QsRUFBRXRELEVBQUU2dkMsZUFBZWxsQyxFQUFFM0ssRUFBRTB2QyxvQkFBb0Jwc0MsRUFBRXZELElBQUlBLEVBQUV1RCxHQUFHcUgsRUFBRTVLLElBQUlBLEVBQUU0SyxHQUFHM0ssRUFBRUEsRUFBRXV4QixRQUFRaE4sR0FBRW1yQixvQkFBb0IzdkMsRUFBRSxHQUFHLE9BQU9nRSxFQUFFLE9BQU9BLEVBQUUsT0FBT0QsR0FBRyxJQUFpQixLQUFaQSxFQUFFbXRCLGFBQWtCLE9BQU9udEIsRUFBRTZ1QyxjQUFjN3VDLEVBQUU2dUMsWUFBWXB1QixHQUFFb3VCLGFBQWEsT0FBT3B1QixHQUFFa3VCLGFBQWEsT0FBTzN1QyxFQUFFMnVDLGFBQWEzdUMsRUFBRTJ1QyxXQUFXQyxXQUFXbnVCLEdBQUVvdUIsYUFBYTd1QyxFQUFFMnVDLFdBQVdsdUIsR0FBRWt1QixZQUFZLEVBQUVsdUIsR0FBRTBNLFlBQVksT0FDbmZudEIsRUFBRTJ1QyxXQUFXM3VDLEVBQUUydUMsV0FBV0MsV0FBV251QixHQUFFemdCLEVBQUU2dUMsWUFBWXB1QixHQUFFemdCLEVBQUUydUMsV0FBV2x1QixTQUFRLENBQVMsR0FBRyxRQUFYeGdCLEVBQUU2MkMsR0FBR3IyQixLQUFlLE9BQU94Z0IsRUFBRWt0QixXQUFXLEtBQUtsdEIsRUFBRSxPQUFPRCxJQUFJQSxFQUFFNnVDLFlBQVk3dUMsRUFBRTJ1QyxXQUFXLEtBQUszdUMsRUFBRW10QixXQUFXLE1BQWtCLEdBQUcsUUFBZmx0QixFQUFFd2dCLEdBQUVnTixTQUFvQixPQUFPeHRCLEVBQUV3Z0IsR0FBRXpnQixRQUFRLE9BQU95Z0IsSUFBa0IsT0FBZlIsS0FBSXUyQixLQUFLdjJCLEdBcEJqSSxHQW9COEksS0FBSyxTQUFTMjdCLEdBQUc1N0MsR0FBRyxJQUFJQyxFQUFFRCxFQUFFK3JDLGVBQXVDLE9BQU85ckMsR0FBL0JELEVBQUVBLEVBQUU0ckMscUJBQStCM3JDLEVBQUVELEVBQUUsU0FBUzg3QyxHQUFHOTdDLEdBQUcsSUFBSUMsRUFBRTJxQyxLQUE4QixPQUF6QkUsR0FBRyxHQUFHNFIsR0FBR3QvQyxLQUFLLEtBQUs0QyxFQUFFQyxJQUFXLEtBQ2paLFNBQVN5OEMsR0FBRzE4QyxFQUFFQyxHQUFHLEdBQUdtN0MsV0FBVyxPQUFPckIsSUFBSSxHQXJCOEIsSUFxQnpCLEdBQUR4NUIsSUFBZSxNQUFNbFcsTUFBTXNULEVBQUUsTUFBTSxJQUFJMWhCLEVBQUUrRCxFQUFFeTdDLGFBQWF2L0MsRUFBRThELEVBQUUwN0MsdUJBQXVCLEdBQUcsT0FBT3ovQyxFQUFFLE9BQU8sS0FBb0QsR0FBL0MrRCxFQUFFeTdDLGFBQWEsS0FBS3o3QyxFQUFFMDdDLHVCQUF1QixFQUFLei9DLElBQUkrRCxFQUFFa2YsUUFBUSxNQUFNN1UsTUFBTXNULEVBQUUsTUFBTTNkLEVBQUVnN0MsYUFBYSxLQUFLaDdDLEVBQUU4NkMsdUJBQXVCLEVBQUU5NkMsRUFBRSs2QyxpQkFBaUIsR0FBRy82QyxFQUFFNjZDLHNCQUFzQixFQUFFLElBQUlyN0MsRUFBRW84QyxHQUFHMy9DLEdBQ2xJLEdBRHFJK0QsRUFBRTI2QyxpQkFBaUJuN0MsRUFBRXRELEdBQUc4RCxFQUFFMjdDLGtCQUFrQjM3QyxFQUFFMjhDLG1CQUFtQjM4QyxFQUFFMjdDLGtCQUFrQjM3QyxFQUFFNjZDLHNCQUFzQixFQUFFMytDLEdBQUc4RCxFQUFFMjhDLHFCQUFxQjM4QyxFQUFFMjhDLG1CQUNuZXpnRCxFQUFFLEdBQUdBLEdBQUc4RCxFQUFFNDZDLGlCQUFpQjU2QyxFQUFFNDZDLGVBQWUsR0FBRzErQyxHQUFHOEQsRUFBRXk2QyxrQkFBa0J6NkMsRUFBRXk2QyxnQkFBZ0IsR0FBR3o2QyxJQUFJbWdCLEtBQUlNLEdBQUVOLEdBQUUsS0FBS0MsR0FBRSxHQUFHLEVBQUVua0IsRUFBRWt4QixVQUFVLE9BQU9seEIsRUFBRTB5QyxZQUFZMXlDLEVBQUUweUMsV0FBV0MsV0FBVzN5QyxFQUFFdUQsRUFBRXZELEVBQUU0eUMsYUFBYXJ2QyxFQUFFdkQsRUFBRXVELEVBQUV2RCxFQUFFNHlDLFlBQWUsT0FBT3J2QyxFQUFFLENBQUMsSUFBSXFILEVBQUUwWixHQUFFQSxJQXRCaEosR0FzQnNKaTVCLEdBQUd0NkIsUUFBUSxLQUFLeVksR0FBR3RGLEdBQUcsSUFBSXRrQixFQUFFc3BCLEtBQUssR0FBR0ksR0FBRzFwQixHQUFHLENBQUMsR0FBRyxtQkFBbUJBLEVBQUUsSUFBSTZCLEVBQUUsQ0FBQzZ5QixNQUFNMTBCLEVBQUUyMEIsZUFBZTN0QixJQUFJaEgsRUFBRTQwQixtQkFBbUIzaUMsRUFBRSxDQUE4QyxJQUFJeWYsR0FBakQ3UCxHQUFHQSxFQUFFN0IsRUFBRW9jLGdCQUFnQnZhLEVBQUVpeUIsYUFBYS9pQyxRQUFlK2pDLGNBQWNqekIsRUFBRWl6QixlQUFlLEdBQUdwakIsR0FBRyxJQUFJQSxFQUFFbTlCLFdBQVcsQ0FBQ2h0QyxFQUFFNlAsRUFBRW1qQixXQUFXLElBQUkvbUMsRUFBRTRqQixFQUFFcWpCLGFBQzllOW1DLEVBQUV5akIsRUFBRXNqQixVQUFVdGpCLEVBQUVBLEVBQUV1akIsWUFBWSxJQUFJcHpCLEVBQUUzUSxTQUFTakQsRUFBRWlELFNBQVMsTUFBTTQ5QyxHQUFJanRDLEVBQUUsS0FBSyxNQUFNNVAsRUFBRSxJQUFJdEMsRUFBRSxFQUFFdVQsR0FBRyxFQUFFNk0sR0FBRyxFQUFFbXZCLEVBQUcsRUFBRTl1QixFQUFFLEVBQUVyaEIsRUFBRWlSLEVBQUVtRCxFQUFFLEtBQUtqUixFQUFFLE9BQU8sQ0FBQyxJQUFJLElBQUk4ZCxFQUFLamhCLElBQUk4UyxHQUFHLElBQUkvVCxHQUFHLElBQUlpQixFQUFFbUMsV0FBV2dTLEVBQUV2VCxFQUFFN0IsR0FBR2lCLElBQUlkLEdBQUcsSUFBSXlqQixHQUFHLElBQUkzaUIsRUFBRW1DLFdBQVc2ZSxFQUFFcGdCLEVBQUUraEIsR0FBRyxJQUFJM2lCLEVBQUVtQyxXQUFXdkIsR0FBR1osRUFBRWd2QixVQUFVM3JCLFFBQVcsUUFBUTRkLEVBQUVqaEIsRUFBRTR1QixhQUFrQnhhLEVBQUVwVSxFQUFFQSxFQUFFaWhCLEVBQUUsT0FBTyxDQUFDLEdBQUdqaEIsSUFBSWlSLEVBQUUsTUFBTTlOLEVBQStDLEdBQTdDaVIsSUFBSXRCLEtBQUtxOUIsSUFBS3B4QyxJQUFJb1YsRUFBRXZULEdBQUd3VCxJQUFJbFYsS0FBS21pQixJQUFJc0IsSUFBSTNCLEVBQUVwZ0IsR0FBTSxRQUFRcWdCLEVBQUVqaEIsRUFBRXM2QixhQUFhLE1BQVVsbUIsR0FBSnBVLEVBQUVvVSxHQUFNc2QsV0FBVzF4QixFQUFFaWhCLEVBQUVuTyxHQUFHLElBQUlxQixJQUFJLElBQUk2TSxFQUFFLEtBQUssQ0FBQzJrQixNQUFNeHhCLEVBQUU4RCxJQUFJK0ksUUFBUWxPLEVBQUUsS0FBS0EsRUFBRUEsR0FBRyxDQUFDNnlCLE1BQU0sRUFBRTF0QixJQUFJLFFBQVFuRixFQUN0ZixLQUFLZ29CLEdBQUcsQ0FBQ2tsQixzQkFBc0IsS0FBS0MsWUFBWWh2QyxFQUFFaXZDLGVBQWVwdEMsR0FBR3lpQixJQUFHLEVBQUcxUixHQUFFbmhCLEVBQUUsR0FBRyxJQUFJeTlDLEtBQUssTUFBTUosR0FBSSxHQUFHLE9BQU9sOEIsR0FBRSxNQUFNdFcsTUFBTXNULEVBQUUsTUFBTTA1QixHQUFHMTJCLEdBQUVrOEIsR0FBSWw4QixHQUFFQSxHQUFFaXVCLGtCQUFpQixPQUFPanVCLElBQUdBLEdBQUVuaEIsRUFBRSxHQUFHLElBQUksSUFBSXVPLEVBQUUvTixFQUFFNFAsRUFBRTNQLEVBQUUsT0FBTzBnQixJQUFHLENBQUMsSUFBSWpELEVBQUVpRCxHQUFFd00sVUFBbUMsR0FBdkIsR0FBRnpQLEdBQU1rTyxHQUFHakwsR0FBRTBFLFVBQVUsSUFBUyxJQUFGM0gsRUFBTSxDQUFDLElBQUlNLEVBQUUyQyxHQUFFdU0sVUFBVSxHQUFHLE9BQU9sUCxFQUFFLENBQUMsSUFBSUgsRUFBRUcsRUFBRXFCLElBQUksT0FBT3hCLElBQUksbUJBQW9CQSxFQUFFQSxFQUFFLE1BQU1BLEVBQUVxQixRQUFRLE9BQU8sT0FBUyxLQUFGeEIsR0FBUSxLQUFLLEVBQUV3NkIsR0FBR3YzQixJQUFHQSxHQUFFd00sWUFBWSxFQUFFLE1BQU0sS0FBSyxFQUFFK3FCLEdBQUd2M0IsSUFBR0EsR0FBRXdNLFlBQVksRUFBRXFyQixHQUFHNzNCLEdBQUV1TSxVQUFVdk0sSUFBRyxNQUFNLEtBQUssS0FBS0EsR0FBRXdNLFlBQVksS0FBSyxNQUFNLEtBQUssS0FBS3hNLEdBQUV3TSxZQUM3ZixLQUFLcXJCLEdBQUc3M0IsR0FBRXVNLFVBQVV2TSxJQUFHLE1BQU0sS0FBSyxFQUFFNjNCLEdBQUc3M0IsR0FBRXVNLFVBQVV2TSxJQUFHLE1BQU0sS0FBSyxFQUFNbzNCLEdBQUdocUMsRUFBUGxTLEVBQUU4a0IsR0FBUy9RLEdBQUdvb0MsR0FBR244QyxHQUFHOGtCLEdBQUVBLEdBQUVpdUIsWUFBWSxNQUFNaU8sR0FBSSxHQUFHLE9BQU9sOEIsR0FBRSxNQUFNdFcsTUFBTXNULEVBQUUsTUFBTTA1QixHQUFHMTJCLEdBQUVrOEIsR0FBSWw4QixHQUFFQSxHQUFFaXVCLGtCQUFpQixPQUFPanVCLElBQWtELEdBQS9DOUMsRUFBRStaLEdBQUc1WixFQUFFcVosS0FBSzNaLEVBQUVHLEVBQUVrL0IsWUFBWW50QyxFQUFFaU8sRUFBRW0vQixlQUFrQmgvQixJQUFJTixHQUFHQSxHQUFHQSxFQUFFeU0sZUFoTHhQLFNBQVMreUIsRUFBR2w5QyxFQUFFQyxHQUFHLFNBQU9ELElBQUdDLEtBQUVELElBQUlDLEtBQUtELEdBQUcsSUFBSUEsRUFBRWYsWUFBWWdCLEdBQUcsSUFBSUEsRUFBRWhCLFNBQVNpK0MsRUFBR2w5QyxFQUFFQyxFQUFFdXVCLFlBQVksYUFBYXh1QixFQUFFQSxFQUFFbTlDLFNBQVNsOUMsS0FBR0QsRUFBRW85Qyw0QkFBd0QsR0FBN0JwOUMsRUFBRW85Qyx3QkFBd0JuOUMsTUFnTG1GaTlDLENBQUd4L0IsRUFBRXlNLGNBQWMwbEIsZ0JBQWdCbnlCLEdBQUcsQ0FBQyxPQUFPOU4sR0FBRzZuQixHQUFHL1osS0FBS00sRUFBRXBPLEVBQUU2eUIsV0FBYyxLQUFSNWtCLEVBQUVqTyxFQUFFbUYsT0FBaUI4SSxFQUFFRyxHQUFHLG1CQUFtQk4sR0FBR0EsRUFBRWdsQixlQUFlMWtCLEVBQUVOLEVBQUVpbEIsYUFBYS9qQyxLQUFLeStDLElBQUl4L0IsRUFBRUgsRUFBRTdnQixNQUFNc0QsVUFBVTBkLEdBQUdHLEVBQUVOLEVBQUV5TSxlQUFldlQsV0FBV29ILEVBQUU2akIsYUFBYS9pQyxRQUFTK2pDLGVBQ2pmaGxCLEVBQUVBLEVBQUVnbEIsZUFBZWhuQyxFQUFFNmhCLEVBQUVzTixZQUFZN3FCLE9BQU80TixFQUFFblAsS0FBS3krQyxJQUFJenRDLEVBQUU2eUIsTUFBTTVtQyxHQUFHK1QsT0FBRSxJQUFTQSxFQUFFbUYsSUFBSWhILEVBQUVuUCxLQUFLeStDLElBQUl6dEMsRUFBRW1GLElBQUlsWixJQUFJZ2lCLEVBQUVvZCxRQUFRbHRCLEVBQUU2QixJQUFJL1QsRUFBRStULEVBQUVBLEVBQUU3QixFQUFFQSxFQUFFbFMsR0FBR0EsRUFBRXM3QixHQUFHelosRUFBRTNQLEdBQUcvUixFQUFFbTdCLEdBQUd6WixFQUFFOU4sR0FBRy9ULEdBQUdHLElBQUksSUFBSTZoQixFQUFFKytCLFlBQVkvK0IsRUFBRStrQixhQUFhL21DLEVBQUVxTyxNQUFNMlQsRUFBRWlsQixlQUFlam5DLEVBQUVrWCxRQUFROEssRUFBRWtsQixZQUFZL21DLEVBQUVrTyxNQUFNMlQsRUFBRW1sQixjQUFjaG5DLEVBQUUrVyxXQUFVaUwsRUFBRUEsRUFBRXMvQixlQUFnQkMsU0FBUzFoRCxFQUFFcU8sS0FBS3JPLEVBQUVrWCxRQUFROEssRUFBRTIvQixrQkFBa0J6dkMsRUFBRTZCLEdBQUdpTyxFQUFFNC9CLFNBQVN6L0IsR0FBR0gsRUFBRW9kLE9BQU9qL0IsRUFBRWtPLEtBQUtsTyxFQUFFK1csVUFBVWlMLEVBQUUwL0IsT0FBTzFoRCxFQUFFa08sS0FBS2xPLEVBQUUrVyxRQUFROEssRUFBRTQvQixTQUFTei9CLE9BQVFBLEVBQUUsR0FBRyxJQUFJSCxFQUFFSCxFQUFFRyxFQUFFQSxFQUFFMlEsWUFBWSxJQUFJM1EsRUFBRTVlLFVBQVUrZSxFQUFFeFYsS0FBSyxDQUFDc3dDLFFBQVFqN0IsRUFBRTgvQixLQUFLOS9CLEVBQUUrL0IsV0FDemZDLElBQUloZ0MsRUFBRWlnQyxZQUFtRCxJQUF2QyxtQkFBb0JwZ0MsRUFBRWk2QixPQUFPajZCLEVBQUVpNkIsUUFBWWo2QixFQUFFLEVBQUVBLEVBQUVNLEVBQUU3ZCxPQUFPdWQsS0FBSUcsRUFBRUcsRUFBRU4sSUFBS283QixRQUFROEUsV0FBVy8vQixFQUFFOC9CLEtBQUs5L0IsRUFBRWk3QixRQUFRZ0YsVUFBVWpnQyxFQUFFZ2dDLElBQUl4ckIsS0FBS3NGLEdBQUdDLEdBQUdELEdBQUcsS0FBSzMzQixFQUFFa2YsUUFBUWpqQixFQUFFMGtCLEdBQUVuaEIsRUFBRSxHQUFHLElBQUksSUFBSWtlLEVBQUUxZCxFQUFFLE9BQU8yZ0IsSUFBRyxDQUFDLElBQUkyN0IsRUFBRzM3QixHQUFFd00sVUFBcUMsR0FBeEIsR0FBSG12QixHQUFPNUUsR0FBR2g2QixFQUFFaUQsR0FBRXVNLFVBQVV2TSxJQUFTLElBQUgyN0IsRUFBTyxDQUFDdCtCLE9BQUUsRUFBTyxJQUFJKy9CLEVBQUdwOUIsR0FBRXRCLElBQUksR0FBRyxPQUFPMCtCLEVBQUcsQ0FBQyxJQUFJdkIsRUFBRzc3QixHQUFFMEUsVUFBVSxPQUFPMUUsR0FBRTZILEtBQUssS0FBSyxFQUFFeEssRUFBRXcrQixFQUFHLE1BQU0sUUFBUXgrQixFQUFFdytCLEVBQUcsbUJBQW9CdUIsRUFBR0EsRUFBRy8vQixHQUFHKy9CLEVBQUc3K0IsUUFBUWxCLEdBQUcyQyxHQUFFQSxHQUFFaXVCLFlBQVksTUFBTWlPLEdBQUksR0FBRyxPQUFPbDhCLEdBQUUsTUFBTXRXLE1BQU1zVCxFQUFFLE1BQU0wNUIsR0FBRzEyQixHQUFFazhCLEdBQUlsOEIsR0FBRUEsR0FBRWl1QixrQkFBaUIsT0FBT2p1QixJQUFHQSxHQUNwZixLQUFLMnBCLEtBQUsvcEIsR0FBRTFaLE9BQU83RyxFQUFFa2YsUUFBUWpqQixFQUFFLEdBQUc2OUMsR0FBR0EsSUFBRyxFQUFHQyxHQUFHLzVDLEVBQUVnNkMsR0FBRy81QyxPQUFPLElBQUkwZ0IsR0FBRW5oQixFQUFFLE9BQU9taEIsSUFBRzFnQixFQUFFMGdCLEdBQUVpdUIsV0FBV2p1QixHQUFFaXVCLFdBQVcsS0FBS2p1QixHQUFFMWdCLEVBQW1JLEdBQTVHLEtBQXJCQSxFQUFFRCxFQUFFMjZDLG9CQUF5QnhCLEdBQUcsTUFBTSxhQUFhbDVDLEVBQUVELElBQUltNkMsR0FBR0QsTUFBTUEsR0FBRyxFQUFFQyxHQUFHbjZDLEdBQUdrNkMsR0FBRyxFQUFFLG1CQUFvQjhELElBQUlBLEdBQUcvaEQsRUFBRW9wQixVQUFVbnBCLEdBQUcwa0IsR0FBRTVnQixHQUFNKzRDLEdBQUcsTUFBTUEsSUFBRyxFQUFHLzRDLEVBQUVnNUMsR0FBR0EsR0FBRyxLQUFLaDVDLEVBQUUsT0E1QjNNLElBQUssRUE0QjBNdWdCLEtBQXNCMnFCLEtBQUwsS0FBc0IsU0FBUytSLEtBQUssS0FBSyxPQUFPdDhCLElBQUcsQ0FBQyxJQUFJM2dCLEVBQUUyZ0IsR0FBRXdNLFVBQVUsSUFBTyxJQUFGbnRCLElBQVFzM0MsR0FBRzMyQixHQUFFdU0sVUFBVXZNLElBQUcsSUFBTyxJQUFGM2dCLElBQVE4NUMsS0FBS0EsSUFBRyxFQUFHL08sR0FBRyxJQUFHLFdBQWdCLE9BQUxxUSxLQUFZLFNBQVF6NkIsR0FBRUEsR0FBRWl1QixZQUM5YyxTQUFTd00sS0FBSyxHQUFHLEtBQUtwQixHQUFHLENBQUMsSUFBSWg2QyxFQUFFLEdBQUdnNkMsR0FBRyxHQUFHQSxHQUFTLE9BQU5BLEdBQUcsR0FBVWxQLEdBQUc5cUMsRUFBRWkrQyxLQUFLLFNBQVNBLEtBQUssR0FBRyxPQUFPbEUsR0FBRyxPQUFNLEVBQUcsSUFBSS81QyxFQUFFKzVDLEdBQVcsR0FBUkEsR0FBRyxLQTdCM0MsSUE2QnFELEdBQUR4NUIsSUFBZSxNQUFNbFcsTUFBTXNULEVBQUUsTUFBTSxJQUFJMWQsRUFBRXNnQixHQUFRLElBQU5BLElBN0IvRSxHQTZCeUZ2Z0IsRUFBRUEsRUFBRWtmLFFBQVEydkIsWUFBWSxPQUFPN3VDLEdBQUcsQ0FBQyxJQUFJLElBQUkvRCxFQUFFK0QsRUFBRSxHQUFHLElBQWlCLElBQVovRCxFQUFFa3hCLFdBQWUsT0FBT2x4QixFQUFFdXNCLEtBQUssS0FBSyxFQUFFLEtBQUssR0FBRyxLQUFLLEdBQUcsS0FBSyxHQUFHZ3ZCLEdBQUcsRUFBRXY3QyxHQUFHdzdDLEdBQUcsRUFBRXg3QyxJQUFJLE1BQU1DLEdBQUcsR0FBRyxPQUFPOEQsRUFBRSxNQUFNcUssTUFBTXNULEVBQUUsTUFBTTA1QixHQUFHcjNDLEVBQUU5RCxHQUFHRCxFQUFFK0QsRUFBRTR1QyxXQUFXNXVDLEVBQUU0dUMsV0FBVyxLQUFLNXVDLEVBQUUvRCxFQUFXLE9BQVRza0IsR0FBRXRnQixFQUFFaXJDLE1BQVcsRUFDNVosU0FBU2dULEdBQUdsK0MsRUFBRUMsRUFBRWhFLEdBQWtDNndDLEdBQUc5c0MsRUFBeEJDLEVBQUU0NEMsR0FBRzc0QyxFQUFmQyxFQUFFODJDLEdBQUc5NkMsRUFBRWdFLEdBQVksYUFBdUMsUUFBbkJELEVBQUVzNkMsR0FBR3Q2QyxFQUFFLGNBQXNCNGdCLEdBQUU1Z0IsR0FBRyxTQUFTcTNDLEdBQUdyM0MsRUFBRUMsR0FBRyxHQUFHLElBQUlELEVBQUV3b0IsSUFBSTAxQixHQUFHbCtDLEVBQUVBLEVBQUVDLFFBQVEsSUFBSSxJQUFJaEUsRUFBRStELEVBQUU2b0IsT0FBTyxPQUFPNXNCLEdBQUcsQ0FBQyxHQUFHLElBQUlBLEVBQUV1c0IsSUFBSSxDQUFDMDFCLEdBQUdqaUQsRUFBRStELEVBQUVDLEdBQUcsTUFBVyxHQUFHLElBQUloRSxFQUFFdXNCLElBQUksQ0FBQyxJQUFJdHNCLEVBQUVELEVBQUVvcEIsVUFBVSxHQUFHLG1CQUFvQnBwQixFQUFFNEksS0FBS0osMEJBQTBCLG1CQUFvQnZJLEVBQUVnOUMsb0JBQW9CLE9BQU9DLEtBQUtBLEdBQUd0c0MsSUFBSTNRLElBQUksQ0FBZ0M0d0MsR0FBRzd3QyxFQUF4QitELEVBQUVpNUMsR0FBR2g5QyxFQUFmK0QsRUFBRSsyQyxHQUFHOTJDLEVBQUVELEdBQVksYUFBdUMsUUFBbkIvRCxFQUFFcStDLEdBQUdyK0MsRUFBRSxjQUFzQjJrQixHQUFFM2tCLEdBQUcsT0FBT0EsRUFBRUEsRUFBRTRzQixRQUN4YixTQUFTd3pCLEdBQUdyOEMsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSUMsRUFBRThELEVBQUVvOEMsVUFBVSxPQUFPbGdELEdBQUdBLEVBQUVvaEIsT0FBT3JkLEdBQUdrZ0IsS0FBSW5nQixHQUFHb2dCLEtBQUlua0IsRUFBRWdrQixLQUFJeTJCLElBQUl6MkIsS0FBSXcyQixJQUFJLGFBQWFpRCxJQUFJL08sS0FBSzhOLEdBL0JxRyxJQStCL0Y0QyxHQUFHcjdDLEVBQUVvZ0IsSUFBR3k1QixJQUFHLEVBQUdhLEdBQUcxNkMsRUFBRS9ELEtBQXdCLEtBQW5CZ0UsRUFBRUQsRUFBRTQ2QyxpQkFBc0IzNkMsRUFBRWhFLElBQUkrRCxFQUFFNDZDLGVBQWUzK0MsRUFBRTJrQixHQUFFNWdCLEtBQUssU0FBUzI0QyxHQUFHMzRDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUrRCxFQUFFcWxCLFVBQVUsT0FBT3BwQixHQUFHQSxFQUFFcWhCLE9BQU9yZCxHQUFPLEtBQUpBLEVBQUUsS0FBaUJBLEVBQUUwdEMsR0FBVDF0QyxFQUFFeXRDLEtBQVkxdEMsRUFBRSxPQUFpQixRQUFWQSxFQUFFczZDLEdBQUd0NkMsRUFBRUMsS0FBYTJnQixHQUFFNWdCLEdBQ3hUcTVDLEdBQUcsU0FBU3I1QyxFQUFFQyxFQUFFaEUsR0FBRyxJQUFJQyxFQUFFK0QsRUFBRThyQyxlQUFlLEdBQUcsT0FBTy9yQyxFQUFFLENBQUMsSUFBSVIsRUFBRVMsRUFBRXd6QyxhQUFhLEdBQUd6ekMsRUFBRW13QyxnQkFBZ0Izd0MsR0FBRzJmLEdBQUVELFFBQVE4c0IsSUFBRyxNQUFPLENBQUMsR0FBRzl2QyxFQUFFRCxFQUFFLENBQU8sT0FBTit2QyxJQUFHLEVBQVUvckMsRUFBRXVvQixLQUFLLEtBQUssRUFBRW1zQixHQUFHMTBDLEdBQUc0ekMsS0FBSyxNQUFNLEtBQUssRUFBUSxHQUFON0QsR0FBRy92QyxHQUFhLEVBQVBBLEVBQUVsRCxNQUFRLElBQUlkLEdBQUd1RCxFQUFFMitDLE9BQU8sT0FBT2wrQyxFQUFFOHJDLGVBQWU5ckMsRUFBRTJyQyxvQkFBb0IsRUFBRSxLQUFLLE1BQU0sS0FBSyxFQUFFeHNCLEdBQUVuZixFQUFFNEUsT0FBT2lrQyxHQUFHN29DLEdBQUcsTUFBTSxLQUFLLEVBQUUydkMsR0FBRzN2QyxFQUFFQSxFQUFFb2xCLFVBQVU4SixlQUFlLE1BQU0sS0FBSyxHQUFHanpCLEVBQUUrRCxFQUFFa3dDLGNBQWN0ekMsTUFBTTJDLEVBQUVTLEVBQUU0RSxLQUFLb2QsU0FBU2xELEdBQUVzc0IsR0FBRzdyQyxFQUFFc2lCLGVBQWV0aUIsRUFBRXNpQixjQUFjNWxCLEVBQUUsTUFBTSxLQUFLLEdBQUcsR0FBRyxPQUFPK0QsRUFBRW90QixjQUNqZCxPQUFHLEtBRDZkbnhCLEVBQUUrRCxFQUFFb2QsTUFBTXV1QixzQkFDaGUxdkMsR0FBR0QsRUFBU2k1QyxHQUFHbDFDLEVBQUVDLEVBQUVoRSxJQUFHOGlCLEdBQUVTLEdBQVksRUFBVkEsR0FBRU4sU0FBOEIsUUFBbkJqZixFQUFFK3pDLEdBQUdoMEMsRUFBRUMsRUFBRWhFLElBQW1CZ0UsRUFBRXd0QixRQUFRLE1BQUsxTyxHQUFFUyxHQUFZLEVBQVZBLEdBQUVOLFNBQVcsTUFBTSxLQUFLLEdBQThCLEdBQTNCaGpCLEVBQUUrRCxFQUFFMnJDLHFCQUFxQjN2QyxFQUFLLElBQWlCLEdBQVorRCxFQUFFbXRCLFdBQWMsQ0FBQyxHQUFHanhCLEVBQUUsT0FBTzQ1QyxHQUFHOTFDLEVBQUVDLEVBQUVoRSxHQUFHZ0UsRUFBRWt0QixXQUFXLEdBQTZFLEdBQXhELFFBQWxCM3RCLEVBQUVTLEVBQUVvdEIsaUJBQXlCN3RCLEVBQUVnMkMsVUFBVSxLQUFLaDJDLEVBQUVtMkMsS0FBSyxNQUFNNTJCLEdBQUVTLEdBQUVBLEdBQUVOLFVBQWFoakIsRUFBRSxPQUFPLEtBQUssT0FBTzgzQyxHQUFHaDBDLEVBQUVDLEVBQUVoRSxHQUFHK3ZDLElBQUcsUUFBU0EsSUFBRyxFQUFzQixPQUFuQi9yQyxFQUFFOHJDLGVBQWUsRUFBUzlyQyxFQUFFdW9CLEtBQUssS0FBSyxFQUNoVyxHQURrV3RzQixFQUFFK0QsRUFBRTRFLEtBQUssT0FBTzdFLElBQUlBLEVBQUVrdEIsVUFBVSxLQUFLanRCLEVBQUVpdEIsVUFBVSxLQUFLanRCLEVBQUVrdEIsV0FBVyxHQUFHbnRCLEVBQUVDLEVBQUV3ekMsYUFBYWowQyxFQUFFZ3BDLEdBQUd2b0MsRUFBRWdmLEdBQUVDLFNBQVMyc0IsR0FBRzVyQyxFQUFFaEUsR0FBR3VELEVBQUVveEMsR0FBRyxLQUNsZjN3QyxFQUFFL0QsRUFBRThELEVBQUVSLEVBQUV2RCxHQUFHZ0UsRUFBRWt0QixXQUFXLEVBQUssaUJBQWtCM3RCLEdBQUcsT0FBT0EsR0FBRyxtQkFBb0JBLEVBQUVrRyxhQUFRLElBQVNsRyxFQUFFc0IsU0FBUyxDQUFpRCxHQUFoRGIsRUFBRXVvQixJQUFJLEVBQUV2b0IsRUFBRW90QixjQUFjLEtBQUtwdEIsRUFBRW9zQyxZQUFZLEtBQVFqdEIsR0FBRWxqQixHQUFHLENBQUMsSUFBSTJLLEdBQUUsRUFBR2lpQyxHQUFHN29DLFFBQVE0RyxHQUFFLEVBQUc1RyxFQUFFb3RCLGNBQWMsT0FBTzd0QixFQUFFaVMsWUFBTyxJQUFTalMsRUFBRWlTLE1BQU1qUyxFQUFFaVMsTUFBTSxLQUFLMjZCLEdBQUduc0MsR0FBRyxJQUFJOE4sRUFBRTdSLEVBQUV3SSx5QkFBeUIsbUJBQW9CcUosR0FBR3cvQixHQUFHdHRDLEVBQUUvRCxFQUFFNlIsRUFBRS9OLEdBQUdSLEVBQUVrZixRQUFROHVCLEdBQUd2dEMsRUFBRW9sQixVQUFVN2xCLEVBQUVBLEVBQUVpdUMsb0JBQW9CeHRDLEVBQUVpdUMsR0FBR2p1QyxFQUFFL0QsRUFBRThELEVBQUUvRCxHQUFHZ0UsRUFBRXkwQyxHQUFHLEtBQUt6MEMsRUFBRS9ELEdBQUUsRUFBRzJLLEVBQUU1SyxRQUFRZ0UsRUFBRXVvQixJQUFJLEVBQUU1SSxHQUFFLEtBQUszZixFQUFFVCxFQUFFdkQsR0FBR2dFLEVBQUVBLEVBQUVvZCxNQUFNLE9BQU9wZCxFQUFFLEtBQUssR0FBR0QsRUFBRSxDQUN6WixHQUQwWlIsRUFBRVMsRUFBRSt1QyxZQUFZLE9BQU9odkMsSUFBSUEsRUFBRWt0QixVQUNwZixLQUFLanRCLEVBQUVpdEIsVUFBVSxLQUFLanRCLEVBQUVrdEIsV0FBVyxHQUFHbnRCLEVBQUVDLEVBQUV3ekMsYUF6T29QLFNBQVl6ekMsR0FBRyxJQUFJLElBQUlBLEVBQUV3aUIsUUFBUSxDQUFDeGlCLEVBQUV3aUIsUUFBUSxFQUFFLElBQUl2aUIsRUFBRUQsRUFBRXVpQixNQUFNdGlCLEVBQUVBLElBQUlELEVBQUV5aUIsUUFBUXhpQixFQUFFQSxFQUFFK0gsTUFBSyxTQUFTL0gsR0FBRyxJQUFJRCxFQUFFd2lCLFVBQVV2aUIsRUFBRUEsRUFBRW0rQyxRQUFRcCtDLEVBQUV3aUIsUUFBUSxFQUFFeGlCLEVBQUV5aUIsUUFBUXhpQixNQUFJLFNBQVNBLEdBQUcsSUFBSUQsRUFBRXdpQixVQUFVeGlCLEVBQUV3aUIsUUFBUSxFQUFFeGlCLEVBQUV5aUIsUUFBUXhpQixPQXlPaGJvK0MsQ0FBRzcrQyxHQUFNLElBQUlBLEVBQUVnakIsUUFBUSxNQUFNaGpCLEVBQUVpakIsUUFBcUQsT0FBN0NqakIsRUFBRUEsRUFBRWlqQixRQUFReGlCLEVBQUU0RSxLQUFLckYsRUFBRXFILEVBQUU1RyxFQUFFdW9CLElBUXpELFNBQVl4b0IsR0FBRyxHQUFHLG1CQUFvQkEsRUFBRSxPQUFPazBDLEdBQUdsMEMsR0FBRyxFQUFFLEVBQUUsR0FBRyxNQUFTQSxFQUFZLENBQWMsSUFBYkEsRUFBRUEsRUFBRWMsWUFBZ0JnbkIsR0FBRyxPQUFPLEdBQUcsR0FBRzluQixJQUFJaW9CLEdBQUcsT0FBTyxHQUFHLE9BQU8sRUFSakZxMkIsQ0FBRzkrQyxHQUFHUSxFQUFFb3JDLEdBQUc1ckMsRUFBRVEsR0FBVTZHLEdBQUcsS0FBSyxFQUFFNUcsRUFBRW0wQyxHQUFHLEtBQUtuMEMsRUFBRVQsRUFBRVEsRUFBRS9ELEdBQUcsTUFBTStELEVBQUUsS0FBSyxFQUFFQyxFQUFFcTBDLEdBQUcsS0FBS3IwQyxFQUFFVCxFQUFFUSxFQUFFL0QsR0FBRyxNQUFNK0QsRUFBRSxLQUFLLEdBQUdDLEVBQUU4ekMsR0FBRyxLQUFLOXpDLEVBQUVULEVBQUVRLEVBQUUvRCxHQUFHLE1BQU0rRCxFQUFFLEtBQUssR0FBR0MsRUFBRWcwQyxHQUFHLEtBQUtoMEMsRUFBRVQsRUFBRTRyQyxHQUFHNXJDLEVBQUVxRixLQUFLN0UsR0FBRzlELEVBQUVELEdBQUcsTUFBTStELEVBQUUsTUFBTXFLLE1BQU1zVCxFQUFFLElBQUluZSxFQUFFLEtBQU0sT0FBT1MsRUFBRSxLQUFLLEVBQUUsT0FBTy9ELEVBQUUrRCxFQUFFNEUsS0FBS3JGLEVBQUVTLEVBQUV3ekMsYUFBMkNXLEdBQUdwMEMsRUFBRUMsRUFBRS9ELEVBQXJDc0QsRUFBRVMsRUFBRSt1QyxjQUFjOXlDLEVBQUVzRCxFQUFFNHJDLEdBQUdsdkMsRUFBRXNELEdBQWN2RCxHQUFHLEtBQUssRUFBRSxPQUFPQyxFQUFFK0QsRUFBRTRFLEtBQUtyRixFQUFFUyxFQUFFd3pDLGFBQTJDYSxHQUFHdDBDLEVBQUVDLEVBQUUvRCxFQUFyQ3NELEVBQUVTLEVBQUUrdUMsY0FBYzl5QyxFQUFFc0QsRUFBRTRyQyxHQUFHbHZDLEVBQUVzRCxHQUFjdkQsR0FDcGYsS0FBSyxFQUF3QixHQUF0QjA0QyxHQUFHMTBDLEdBQUcvRCxFQUFFK0QsRUFBRW9zQyxZQUFlLE9BQU9yc0MsR0FBRyxPQUFPOUQsRUFBRSxNQUFNbU8sTUFBTXNULEVBQUUsTUFBb0gsR0FBOUd6aEIsRUFBRStELEVBQUV3ekMsYUFBK0JqMEMsRUFBRSxRQUFwQkEsRUFBRVMsRUFBRW90QixlQUF5Qjd0QixFQUFFczVDLFFBQVEsS0FBS3BNLEdBQUcxc0MsRUFBRUMsR0FBRytzQyxHQUFHL3NDLEVBQUUvRCxFQUFFLEtBQUtELElBQUdDLEVBQUUrRCxFQUFFb3RCLGNBQWN5ckIsV0FBZXQ1QyxFQUFFcTBDLEtBQUs1ekMsRUFBRSt6QyxHQUFHaDBDLEVBQUVDLEVBQUVoRSxPQUFPLENBQW1GLElBQS9FdUQsRUFBRVMsRUFBRW9sQixVQUFVeUwsV0FBUXNpQixHQUFHL2EsR0FBR3A0QixFQUFFb2xCLFVBQVU4SixjQUFjekQsWUFBWXluQixHQUFHbHpDLEVBQUVULEVBQUU2ekMsSUFBRyxHQUFNN3pDLEVBQUUsSUFBSXZELEVBQUVxekMsR0FBR3J2QyxFQUFFLEtBQUsvRCxFQUFFRCxHQUFHZ0UsRUFBRW9kLE1BQU1waEIsRUFBRUEsR0FBR0EsRUFBRWt4QixXQUF1QixFQUFibHhCLEVBQUVreEIsVUFBYSxLQUFLbHhCLEVBQUVBLEVBQUV3eEIsYUFBYTdOLEdBQUU1ZixFQUFFQyxFQUFFL0QsRUFBRUQsR0FBRzQzQyxLQUFLNXpDLEVBQUVBLEVBQUVvZCxNQUFNLE9BQU9wZCxFQUFFLEtBQUssRUFBRSxPQUFPK3ZDLEdBQUcvdkMsR0FBRyxPQUFPRCxHQUFHMHpDLEdBQUd6ekMsR0FBRy9ELEVBQUUrRCxFQUFFNEUsS0FBS3JGLEVBQUVTLEVBQUV3ekMsYUFBYTVzQyxFQUFFLE9BQU83RyxFQUFFQSxFQUFFbXdDLGNBQzVlLEtBQUtwaUMsRUFBRXZPLEVBQUUySyxTQUFTNHRCLEdBQUc3N0IsRUFBRXNELEdBQUd1TyxFQUFFLEtBQUssT0FBT2xILEdBQUdreEIsR0FBRzc3QixFQUFFMkssS0FBSzVHLEVBQUVrdEIsV0FBVyxJQUFJa25CLEdBQUdyMEMsRUFBRUMsR0FBVSxFQUFQQSxFQUFFbEQsTUFBUSxJQUFJZCxHQUFHdUQsRUFBRTIrQyxRQUFRbCtDLEVBQUU4ckMsZUFBZTlyQyxFQUFFMnJDLG9CQUFvQixFQUFFM3JDLEVBQUUsT0FBTzJmLEdBQUU1ZixFQUFFQyxFQUFFOE4sRUFBRTlSLEdBQUdnRSxFQUFFQSxFQUFFb2QsT0FBT3BkLEVBQUUsS0FBSyxFQUFFLE9BQU8sT0FBT0QsR0FBRzB6QyxHQUFHenpDLEdBQUcsS0FBSyxLQUFLLEdBQUcsT0FBT2kxQyxHQUFHbDFDLEVBQUVDLEVBQUVoRSxHQUFHLEtBQUssRUFBRSxPQUFPMnpDLEdBQUczdkMsRUFBRUEsRUFBRW9sQixVQUFVOEosZUFBZWp6QixFQUFFK0QsRUFBRXd6QyxhQUFhLE9BQU96ekMsRUFBRUMsRUFBRW9kLE1BQU1neUIsR0FBR3B2QyxFQUFFLEtBQUsvRCxFQUFFRCxHQUFHMmpCLEdBQUU1ZixFQUFFQyxFQUFFL0QsRUFBRUQsR0FBR2dFLEVBQUVvZCxNQUFNLEtBQUssR0FBRyxPQUFPbmhCLEVBQUUrRCxFQUFFNEUsS0FBS3JGLEVBQUVTLEVBQUV3ekMsYUFBMkNNLEdBQUcvekMsRUFBRUMsRUFBRS9ELEVBQXJDc0QsRUFBRVMsRUFBRSt1QyxjQUFjOXlDLEVBQUVzRCxFQUFFNHJDLEdBQUdsdkMsRUFBRXNELEdBQWN2RCxHQUFHLEtBQUssRUFBRSxPQUFPMmpCLEdBQUU1ZixFQUFFQyxFQUFFQSxFQUFFd3pDLGFBQWF4M0MsR0FBR2dFLEVBQUVvZCxNQUFNLEtBQUssRUFDcGMsS0FBSyxHQUFHLE9BQU91QyxHQUFFNWYsRUFBRUMsRUFBRUEsRUFBRXd6QyxhQUFhdHBDLFNBQVNsTyxHQUFHZ0UsRUFBRW9kLE1BQU0sS0FBSyxHQUFHcmQsRUFBRSxDQUFDOUQsRUFBRStELEVBQUU0RSxLQUFLb2QsU0FBU3ppQixFQUFFUyxFQUFFd3pDLGFBQWExbEMsRUFBRTlOLEVBQUVrd0MsY0FBY3RwQyxFQUFFckgsRUFBRTNDLE1BQU0sSUFBSStTLEVBQUUzUCxFQUFFNEUsS0FBS29kLFNBQWlELEdBQXhDbEQsR0FBRXNzQixHQUFHejdCLEVBQUVrUyxlQUFlbFMsRUFBRWtTLGNBQWNqYixFQUFLLE9BQU9rSCxFQUFFLEdBQUc2QixFQUFFN0IsRUFBRWxSLE1BQTBHLEtBQXBHZ0ssRUFBRWk3QixHQUFHbHlCLEVBQUUvSSxHQUFHLEVBQXdGLEdBQXJGLG1CQUFvQjNLLEVBQUUybEIsc0JBQXNCM2xCLEVBQUUybEIsc0JBQXNCalMsRUFBRS9JLEdBQUcsY0FBcUIsR0FBR2tILEVBQUU1RCxXQUFXM0ssRUFBRTJLLFdBQVdnVixHQUFFRCxRQUFRLENBQUNqZixFQUFFK3pDLEdBQUdoMEMsRUFBRUMsRUFBRWhFLEdBQUcsTUFBTStELFFBQVEsSUFBYyxRQUFWNFAsRUFBRTNQLEVBQUVvZCxTQUFpQnpOLEVBQUVpWixPQUFPNW9CLEdBQUcsT0FBTzJQLEdBQUcsQ0FBQyxJQUFJNlAsRUFBRTdQLEVBQUVrVixhQUFhLEdBQUcsT0FDbmZyRixFQUFFLENBQUMxUixFQUFFNkIsRUFBRXlOLE1BQU0sSUFBSSxJQUFJeGhCLEVBQUU0akIsRUFBRXFzQixhQUFhLE9BQU9qd0MsR0FBRyxDQUFDLEdBQUdBLEVBQUVtVyxVQUFVOVYsR0FBRyxJQUFLTCxFQUFFK1YsYUFBYS9LLEdBQUcsQ0FBQyxJQUFJK0ksRUFBRTRZLE9BQU0zc0IsRUFBRTh3QyxHQUFHMXdDLEVBQUUsT0FBUXVzQixJQUFJLEVBQUVza0IsR0FBR2w5QixFQUFFL1QsSUFBSStULEVBQUVtOEIsZUFBZTl2QyxJQUFJMlQsRUFBRW04QixlQUFlOXZDLEdBQWlCLFFBQWRKLEVBQUUrVCxFQUFFc2QsWUFBb0JyeEIsRUFBRWt3QyxlQUFlOXZDLElBQUlKLEVBQUVrd0MsZUFBZTl2QyxHQUFHMHZDLEdBQUcvN0IsRUFBRWlaLE9BQU81c0IsR0FBR3dqQixFQUFFc3NCLGVBQWU5dkMsSUFBSXdqQixFQUFFc3NCLGVBQWU5dkMsR0FBRyxNQUFNSixFQUFFQSxFQUFFdU0sV0FBVzJGLEVBQUUsS0FBSzZCLEVBQUU0WSxLQUFJNVksRUFBRS9LLE9BQU81RSxFQUFFNEUsS0FBSyxLQUFhK0ssRUFBRXlOLE1BQU0sR0FBRyxPQUFPdFAsRUFBRUEsRUFBRThhLE9BQU9qWixPQUFPLElBQUk3QixFQUFFNkIsRUFBRSxPQUFPN0IsR0FBRyxDQUFDLEdBQUdBLElBQUk5TixFQUFFLENBQUM4TixFQUFFLEtBQUssTUFBa0IsR0FBRyxRQUFmNkIsRUFBRTdCLEVBQUUwZixTQUFvQixDQUFDN2QsRUFBRWlaLE9BQU85YSxFQUFFOGEsT0FBTzlhLEVBQUU2QixFQUFFLE1BQU03QixFQUFFQSxFQUFFOGEsT0FBT2paLEVBQ3BmN0IsRUFBRTZSLEdBQUU1ZixFQUFFQyxFQUFFVCxFQUFFMkssU0FBU2xPLEdBQUdnRSxFQUFFQSxFQUFFb2QsTUFBTSxPQUFPcGQsRUFBRSxLQUFLLEVBQUUsT0FBT1QsRUFBRVMsRUFBRTRFLEtBQXNCM0ksR0FBakIySyxFQUFFNUcsRUFBRXd6QyxjQUFpQnRwQyxTQUFTMGhDLEdBQUc1ckMsRUFBRWhFLEdBQW1DQyxFQUFFQSxFQUFsQ3NELEVBQUV5c0MsR0FBR3pzQyxFQUFFcUgsRUFBRTAzQyx3QkFBOEJ0K0MsRUFBRWt0QixXQUFXLEVBQUV2TixHQUFFNWYsRUFBRUMsRUFBRS9ELEVBQUVELEdBQUdnRSxFQUFFb2QsTUFBTSxLQUFLLEdBQUcsT0FBZ0J4VyxFQUFFdWtDLEdBQVg1ckMsRUFBRVMsRUFBRTRFLEtBQVk1RSxFQUFFd3pDLGNBQTZCUSxHQUFHajBDLEVBQUVDLEVBQUVULEVBQXRCcUgsRUFBRXVrQyxHQUFHNXJDLEVBQUVxRixLQUFLZ0MsR0FBYzNLLEVBQUVELEdBQUcsS0FBSyxHQUFHLE9BQU9rNEMsR0FBR24wQyxFQUFFQyxFQUFFQSxFQUFFNEUsS0FBSzVFLEVBQUV3ekMsYUFBYXYzQyxFQUFFRCxHQUFHLEtBQUssR0FBRyxPQUFPQyxFQUFFK0QsRUFBRTRFLEtBQUtyRixFQUFFUyxFQUFFd3pDLGFBQWFqMEMsRUFBRVMsRUFBRSt1QyxjQUFjOXlDLEVBQUVzRCxFQUFFNHJDLEdBQUdsdkMsRUFBRXNELEdBQUcsT0FBT1EsSUFBSUEsRUFBRWt0QixVQUFVLEtBQUtqdEIsRUFBRWl0QixVQUFVLEtBQUtqdEIsRUFBRWt0QixXQUFXLEdBQUdsdEIsRUFBRXVvQixJQUFJLEVBQUVwSixHQUFFbGpCLElBQUk4RCxHQUFFLEVBQUc4b0MsR0FBRzdvQyxJQUFJRCxHQUFFLEVBQUc2ckMsR0FBRzVyQyxFQUFFaEUsR0FBRzh4QyxHQUFHOXRDLEVBQUUvRCxFQUFFc0QsR0FBRzB1QyxHQUFHanVDLEVBQUUvRCxFQUFFc0QsRUFBRXZELEdBQUd5NEMsR0FBRyxLQUNsZnowQyxFQUFFL0QsR0FBRSxFQUFHOEQsRUFBRS9ELEdBQUcsS0FBSyxHQUFHLE9BQU82NUMsR0FBRzkxQyxFQUFFQyxFQUFFaEUsR0FBRyxNQUFNb08sTUFBTXNULEVBQUUsSUFBSTFkLEVBQUV1b0IsT0FBUSxJQUFJdzFCLEdBQUcsS0FBS25HLEdBQUcsS0FDaEYsU0FBUzJHLEdBQUd4K0MsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUdvRixLQUFLa25CLElBQUl4b0IsRUFBRXNCLEtBQUtuRSxJQUFJbEIsRUFBRXFGLEtBQUttc0IsUUFBUW5zQixLQUFLK2IsTUFBTS9iLEtBQUt1bkIsT0FBT3ZuQixLQUFLK2pCLFVBQVUvakIsS0FBS3VELEtBQUt2RCxLQUFLMHRDLFlBQVksS0FBSzF0QyxLQUFLK0IsTUFBTSxFQUFFL0IsS0FBSytkLElBQUksS0FBSy9kLEtBQUtteUMsYUFBYXh6QyxFQUFFcUIsS0FBS3dqQixhQUFheGpCLEtBQUsrckIsY0FBYy9yQixLQUFLK3FDLFlBQVkvcUMsS0FBSzZ1QyxjQUFjLEtBQUs3dUMsS0FBS3ZFLEtBQUtiLEVBQUVvRixLQUFLNnJCLFVBQVUsRUFBRTdyQixLQUFLcXRDLFdBQVdydEMsS0FBS3V0QyxZQUFZdnRDLEtBQUtzdEMsV0FBVyxLQUFLdHRDLEtBQUtzcUMsb0JBQW9CdHFDLEtBQUt5cUMsZUFBZSxFQUFFenFDLEtBQUs0ckIsVUFBVSxLQUFLLFNBQVNxbUIsR0FBR3Z6QyxFQUFFQyxFQUFFaEUsRUFBRUMsR0FBRyxPQUFPLElBQUlzaUQsR0FBR3grQyxFQUFFQyxFQUFFaEUsRUFBRUMsR0FDMWIsU0FBU2c0QyxHQUFHbDBDLEdBQWlCLFVBQWRBLEVBQUVBLEVBQUV4QyxhQUF1QndDLEVBQUU2ZSxrQkFDNUMsU0FBU2l3QixHQUFHOXVDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUrRCxFQUFFa3RCLFVBQzRFLE9BRGxFLE9BQU9qeEIsSUFBR0EsRUFBRXMzQyxHQUFHdnpDLEVBQUV3b0IsSUFBSXZvQixFQUFFRCxFQUFFN0MsSUFBSTZDLEVBQUVqRCxPQUFRaXlDLFlBQVlodkMsRUFBRWd2QyxZQUFZL3lDLEVBQUU0SSxLQUFLN0UsRUFBRTZFLEtBQUs1SSxFQUFFb3BCLFVBQVVybEIsRUFBRXFsQixVQUFVcHBCLEVBQUVpeEIsVUFBVWx0QixFQUFFQSxFQUFFa3RCLFVBQVVqeEIsSUFBSUEsRUFBRXczQyxhQUFheHpDLEVBQUVoRSxFQUFFa3hCLFVBQVUsRUFBRWx4QixFQUFFMnlDLFdBQVcsS0FBSzN5QyxFQUFFNHlDLFlBQVksS0FBSzV5QyxFQUFFMHlDLFdBQVcsTUFBTTF5QyxFQUFFMnZDLG9CQUFvQjVyQyxFQUFFNHJDLG9CQUFvQjN2QyxFQUFFOHZDLGVBQWUvckMsRUFBRStyQyxlQUFlOXZDLEVBQUVvaEIsTUFBTXJkLEVBQUVxZCxNQUFNcGhCLEVBQUVrMEMsY0FBY253QyxFQUFFbXdDLGNBQWNsMEMsRUFBRW94QixjQUFjcnRCLEVBQUVxdEIsY0FBY3B4QixFQUFFb3dDLFlBQVlyc0MsRUFBRXFzQyxZQUFZcHNDLEVBQUVELEVBQUU4a0IsYUFBYTdvQixFQUFFNm9CLGFBQWEsT0FBTzdrQixFQUFFLEtBQUssQ0FBQzhyQyxlQUFlOXJDLEVBQUU4ckMsZUFDemZELGFBQWE3ckMsRUFBRTZyQyxhQUFhSSxXQUFXanNDLEVBQUVpc0MsWUFBWWp3QyxFQUFFd3hCLFFBQVF6dEIsRUFBRXl0QixRQUFReHhCLEVBQUVvSCxNQUFNckQsRUFBRXFELE1BQU1wSCxFQUFFb2pCLElBQUlyZixFQUFFcWYsSUFBV3BqQixFQUM1RyxTQUFTZ3pDLEdBQUdqdkMsRUFBRUMsRUFBRWhFLEVBQUVDLEVBQUVzRCxFQUFFcUgsR0FBRyxJQUFJa0gsRUFBRSxFQUFNLEdBQUo3UixFQUFFOEQsRUFBSyxtQkFBb0JBLEVBQUVrMEMsR0FBR2wwQyxLQUFLK04sRUFBRSxRQUFRLEdBQUcsaUJBQWtCL04sRUFBRStOLEVBQUUsT0FBTy9OLEVBQUUsT0FBT0EsR0FBRyxLQUFLeW5CLEdBQUcsT0FBTzJuQixHQUFHbnpDLEVBQUVrTyxTQUFTM0ssRUFBRXFILEVBQUU1RyxHQUFHLEtBQUs0bkIsR0FBRzlaLEVBQUUsRUFBRXZPLEdBQUcsRUFBRSxNQUFNLEtBQUtrb0IsR0FBRzNaLEVBQUUsRUFBRXZPLEdBQUcsRUFBRSxNQUFNLEtBQUtvRSxHQUFHLE9BQU81RCxFQUFFdXpDLEdBQUcsR0FBR3QzQyxFQUFFZ0UsRUFBSSxFQUFGVCxJQUFPd3ZDLFlBQVlwckMsR0FBRzVELEVBQUU2RSxLQUFLakIsR0FBRzVELEVBQUUrckMsZUFBZWxsQyxFQUFFN0csRUFBRSxLQUFLK25CLEdBQUcsT0FBTy9uQixFQUFFdXpDLEdBQUcsR0FBR3QzQyxFQUFFZ0UsRUFBRVQsSUFBS3FGLEtBQUtrakIsR0FBRy9uQixFQUFFZ3ZDLFlBQVlqbkIsR0FBRy9uQixFQUFFK3JDLGVBQWVsbEMsRUFBRTdHLEVBQUUsS0FBS2dvQixHQUFHLE9BQU9ob0IsRUFBRXV6QyxHQUFHLEdBQUd0M0MsRUFBRWdFLEVBQUVULElBQUt3dkMsWUFBWWhuQixHQUFHaG9CLEVBQUUrckMsZUFBZWxsQyxFQUFFN0csRUFBRSxRQUFRLEdBQUcsaUJBQWtCQSxHQUFHLE9BQU9BLEVBQUUsT0FBT0EsRUFBRWMsVUFBVSxLQUFLNm1CLEdBQUc1WixFQUNwZixHQUFHLE1BQU0vTixFQUFFLEtBQUs0bkIsR0FBRzdaLEVBQUUsRUFBRSxNQUFNL04sRUFBRSxLQUFLOG5CLEdBQUcvWixFQUFFLEdBQUcsTUFBTS9OLEVBQUUsS0FBS2lvQixHQUFHbGEsRUFBRSxHQUFHLE1BQU0vTixFQUFFLEtBQUtrb0IsR0FBR25hLEVBQUUsR0FBRzdSLEVBQUUsS0FBSyxNQUFNOEQsRUFBRSxLQUFLbW9CLEdBQUdwYSxFQUFFLEdBQUcsTUFBTS9OLEVBQUUsTUFBTXFLLE1BQU1zVCxFQUFFLElBQUksTUFBTTNkLEVBQUVBLFNBQVNBLEVBQUUsS0FBZ0UsT0FBMURDLEVBQUVzekMsR0FBR3hsQyxFQUFFOVIsRUFBRWdFLEVBQUVULElBQUt3dkMsWUFBWWh2QyxFQUFFQyxFQUFFNEUsS0FBSzNJLEVBQUUrRCxFQUFFOHJDLGVBQWVsbEMsRUFBUzVHLEVBQUUsU0FBU212QyxHQUFHcHZDLEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFvQyxPQUFqQzhELEVBQUV1ekMsR0FBRyxFQUFFdnpDLEVBQUU5RCxFQUFFK0QsSUFBSzhyQyxlQUFlOXZDLEVBQVMrRCxFQUFFLFNBQVMrdUMsR0FBRy91QyxFQUFFQyxFQUFFaEUsR0FBdUMsT0FBcEMrRCxFQUFFdXpDLEdBQUcsRUFBRXZ6QyxFQUFFLEtBQUtDLElBQUs4ckMsZUFBZTl2QyxFQUFTK0QsRUFDclcsU0FBU212QyxHQUFHbnZDLEVBQUVDLEVBQUVoRSxHQUF1SyxPQUFwS2dFLEVBQUVzekMsR0FBRyxFQUFFLE9BQU92ekMsRUFBRW1LLFNBQVNuSyxFQUFFbUssU0FBUyxHQUFHbkssRUFBRTdDLElBQUk4QyxJQUFLOHJDLGVBQWU5dkMsRUFBRWdFLEVBQUVvbEIsVUFBVSxDQUFDOEosY0FBY252QixFQUFFbXZCLGNBQWNzdkIsZ0JBQWdCLEtBQUt2UCxlQUFlbHZDLEVBQUVrdkMsZ0JBQXVCanZDLEVBQzlMLFNBQVN5K0MsR0FBRzErQyxFQUFFQyxFQUFFaEUsR0FBR3FGLEtBQUtrbkIsSUFBSXZvQixFQUFFcUIsS0FBSzRkLFFBQVEsS0FBSzVkLEtBQUs2dEIsY0FBY252QixFQUFFc0IsS0FBSzg2QyxVQUFVOTZDLEtBQUttOUMsZ0JBQWdCLEtBQUtuOUMsS0FBS282Qyx1QkFBdUIsRUFBRXA2QyxLQUFLbTZDLGFBQWEsS0FBS242QyxLQUFLdTZDLGVBQWUsRUFBRXY2QyxLQUFLc3pDLGVBQWV0ekMsS0FBSzBRLFFBQVEsS0FBSzFRLEtBQUt3dkIsUUFBUTcwQixFQUFFcUYsS0FBSzA1QyxhQUFhLEtBQUsxNUMsS0FBS3k1QyxpQkFBaUIsR0FBR3o1QyxLQUFLbTVDLGdCQUFnQm41QyxLQUFLczVDLGVBQWV0NUMsS0FBS3U1QyxzQkFBc0J2NUMsS0FBS3E2QyxrQkFBa0JyNkMsS0FBS3E3QyxtQkFBbUJyN0MsS0FBS3E1QyxpQkFBaUIsRUFDdmEsU0FBU0QsR0FBRzE2QyxFQUFFQyxHQUFHLElBQUloRSxFQUFFK0QsRUFBRTI4QyxtQkFBeUMsT0FBdEIzOEMsRUFBRUEsRUFBRTI3QyxrQkFBeUIsSUFBSTEvQyxHQUFHQSxHQUFHZ0UsR0FBR0QsR0FBR0MsRUFBRSxTQUFTMjJDLEdBQUc1MkMsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRStELEVBQUUyOEMsbUJBQW1CemdELEVBQUU4RCxFQUFFMjdDLGtCQUFrQjEvQyxFQUFFZ0UsSUFBSUQsRUFBRTI4QyxtQkFBbUIxOEMsSUFBTS9ELEVBQUUrRCxHQUFHLElBQUloRSxLQUFFK0QsRUFBRTI3QyxrQkFBa0IxN0MsR0FBRUEsR0FBR0QsRUFBRTQ2QyxpQkFBaUI1NkMsRUFBRTQ2QyxlQUFlLEdBQUczNkMsR0FBR0QsRUFBRXk2QyxrQkFBa0J6NkMsRUFBRXk2QyxnQkFBZ0IsR0FDbFQsU0FBUzVELEdBQUc3MkMsRUFBRUMsR0FBR0EsRUFBRUQsRUFBRTI2QyxtQkFBbUIzNkMsRUFBRTI2QyxpQkFBaUIxNkMsR0FBRyxJQUFJaEUsRUFBRStELEVBQUUyOEMsbUJBQW1CLElBQUkxZ0QsSUFBSWdFLEdBQUdoRSxFQUFFK0QsRUFBRTI4QyxtQkFBbUIzOEMsRUFBRTI3QyxrQkFBa0IzN0MsRUFBRTY2QyxzQkFBc0IsRUFBRTU2QyxHQUFHRCxFQUFFMjdDLG9CQUFvQjM3QyxFQUFFMjdDLGtCQUFrQjE3QyxFQUFFLEdBQUdBLEVBQUVELEVBQUU2NkMsd0JBQXdCNzZDLEVBQUU2NkMsc0JBQXNCNTZDLElBQUksU0FBU2s3QyxHQUFHbjdDLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUrRCxFQUFFeTZDLGlCQUFtQixJQUFJeCtDLEdBQUdBLEVBQUVnRSxLQUFFRCxFQUFFeTZDLGdCQUFnQng2QyxHQUM1VixTQUFTMCtDLEdBQUczK0MsRUFBRUMsRUFBRWhFLEVBQUVDLEdBQUcsSUFBSXNELEVBQUVTLEVBQUVpZixRQUFRclksRUFBRTZtQyxLQUFLMy9CLEVBQUVzL0IsR0FBR3JzQixTQUFTbmEsRUFBRThtQyxHQUFHOW1DLEVBQUVySCxFQUFFdU8sR0FBRy9OLEVBQUUsR0FBRy9ELEVBQUUsQ0FBeUJnRSxFQUFFLENBQUMsR0FBR2d0QixHQUE5Qmh4QixFQUFFQSxFQUFFd3hDLHVCQUFrQ3h4QyxHQUFHLElBQUlBLEVBQUV1c0IsSUFBSSxNQUFNbmUsTUFBTXNULEVBQUUsTUFBTSxJQUFJL04sRUFBRTNULEVBQUUsRUFBRSxDQUFDLE9BQU8yVCxFQUFFNFksS0FBSyxLQUFLLEVBQUU1WSxFQUFFQSxFQUFFeVYsVUFBVXJULFFBQVEsTUFBTS9SLEVBQUUsS0FBSyxFQUFFLEdBQUdtZixHQUFFeFAsRUFBRS9LLE1BQU0sQ0FBQytLLEVBQUVBLEVBQUV5VixVQUFVMGpCLDBDQUEwQyxNQUFNOW9DLEdBQUcyUCxFQUFFQSxFQUFFaVosYUFBYSxPQUFPalosR0FBRyxNQUFNdkYsTUFBTXNULEVBQUUsTUFBTyxHQUFHLElBQUkxaEIsRUFBRXVzQixJQUFJLENBQUMsSUFBSS9JLEVBQUV4akIsRUFBRTRJLEtBQUssR0FBR3VhLEdBQUVLLEdBQUcsQ0FBQ3hqQixFQUFFNHNDLEdBQUc1c0MsRUFBRXdqQixFQUFFN1AsR0FBRyxNQUFNNVAsR0FBRy9ELEVBQUUyVCxPQUFPM1QsRUFBRXFzQyxHQUMzVyxPQUQ4VyxPQUFPcm9DLEVBQUUrUixRQUFRL1IsRUFBRStSLFFBQVEvVixFQUFFZ0UsRUFBRTIwQyxlQUFlMzRDLEdBQUVnRSxFQUFFMHNDLEdBQUc5bEMsRUFBRWtILElBQUs4K0IsUUFBUSxDQUFDaU0sUUFBUTk0QyxHQUNwZSxRQUR1ZTlELE9BQUUsSUFDbGZBLEVBQUUsS0FBS0EsS0FBYStELEVBQUVvSixTQUFTbk4sR0FBRzR3QyxHQUFHdHRDLEVBQUVTLEdBQUcydEMsR0FBR3B1QyxFQUFFcUgsR0FBVUEsRUFBRSxTQUFTKzNDLEdBQUc1K0MsR0FBZSxLQUFaQSxFQUFFQSxFQUFFa2YsU0FBYzdCLE1BQU0sT0FBTyxLQUFLLE9BQU9yZCxFQUFFcWQsTUFBTW1MLEtBQUssS0FBSyxFQUEyQixRQUFRLE9BQU94b0IsRUFBRXFkLE1BQU1nSSxXQUFXLFNBQVN3NUIsR0FBRzcrQyxFQUFFQyxHQUFxQixRQUFsQkQsRUFBRUEsRUFBRXF0QixnQkFBd0IsT0FBT3J0QixFQUFFc3RCLFlBQVl0dEIsRUFBRWkxQyxVQUFVaDFDLElBQUlELEVBQUVpMUMsVUFBVWgxQyxHQUFHLFNBQVM2K0MsR0FBRzkrQyxFQUFFQyxHQUFHNCtDLEdBQUc3K0MsRUFBRUMsSUFBSUQsRUFBRUEsRUFBRWt0QixZQUFZMnhCLEdBQUc3K0MsRUFBRUMsR0FDcFYsU0FBUzgrQyxHQUFHLytDLEVBQUVDLEVBQUVoRSxHQUE2QixJQUFJQyxFQUFFLElBQUl3aUQsR0FBRzErQyxFQUFFQyxFQUF6Q2hFLEVBQUUsTUFBTUEsSUFBRyxJQUFLQSxFQUFFNjBCLFNBQTRCdHhCLEVBQUUrekMsR0FBRyxFQUFFLEtBQUssS0FBSyxJQUFJdHpDLEVBQUUsRUFBRSxJQUFJQSxFQUFFLEVBQUUsR0FBRy9ELEVBQUVnakIsUUFBUTFmLEVBQUVBLEVBQUU2bEIsVUFBVW5wQixFQUFFa3dDLEdBQUc1c0MsR0FBR1EsRUFBRTI0QixJQUFJejhCLEVBQUVnakIsUUFBUWpqQixHQUFHLElBQUlnRSxHQWhPNUosU0FBWUQsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRSt3QixHQUFHL3NCLEdBQUdpd0IsR0FBR3ZzQixTQUFRLFNBQVMzRCxHQUFHcXZCLEdBQUdydkIsRUFBRUMsRUFBRWhFLE1BQUtrMEIsR0FBR3hzQixTQUFRLFNBQVMzRCxHQUFHcXZCLEdBQUdydkIsRUFBRUMsRUFBRWhFLE1BZ09pRStpRCxDQUFHaC9DLEVBQUUsSUFBSUEsRUFBRWYsU0FBU2UsRUFBRUEsRUFBRW1xQixlQUFlN29CLEtBQUsyOUMsY0FBYy9pRCxFQUN6TixTQUFTZ2pELEdBQUdsL0MsR0FBRyxTQUFTQSxHQUFHLElBQUlBLEVBQUVmLFVBQVUsSUFBSWUsRUFBRWYsVUFBVSxLQUFLZSxFQUFFZixXQUFXLElBQUllLEVBQUVmLFVBQVUsaUNBQWlDZSxFQUFFOHJCLFlBQ2hJLFNBQVNxekIsR0FBR24vQyxFQUFFQyxFQUFFaEUsRUFBRUMsRUFBRXNELEdBQUcsSUFBSXFILEVBQUU1SyxFQUFFcThDLG9CQUFvQixHQUFHenhDLEVBQUUsQ0FBQyxJQUFJa0gsRUFBRWxILEVBQUVvNEMsY0FBYyxHQUFHLG1CQUFvQnovQyxFQUFFLENBQUMsSUFBSW9RLEVBQUVwUSxFQUFFQSxFQUFFLFdBQVcsSUFBSVEsRUFBRTQrQyxHQUFHN3dDLEdBQUc2QixFQUFFN1QsS0FBS2lFLElBQUkyK0MsR0FBRzErQyxFQUFFOE4sRUFBRS9OLEVBQUVSLE9BQU8sQ0FBbUQsR0FBbERxSCxFQUFFNUssRUFBRXE4QyxvQkFEOUIsU0FBWXQ0QyxFQUFFQyxHQUEwSCxHQUF2SEEsSUFBMkRBLE1BQXZEQSxFQUFFRCxFQUFFLElBQUlBLEVBQUVmLFNBQVNlLEVBQUU2dkMsZ0JBQWdCN3ZDLEVBQUUwckIsV0FBVyxPQUFhLElBQUl6ckIsRUFBRWhCLFdBQVdnQixFQUFFbS9DLGFBQWEscUJBQXdCbi9DLEVBQUUsSUFBSSxJQUFJaEUsRUFBRUEsRUFBRStELEVBQUU2ckIsV0FBVzdyQixFQUFFMnJCLFlBQVkxdkIsR0FBRyxPQUFPLElBQUk4aUQsR0FBRy8rQyxFQUFFLEVBQUVDLEVBQUUsQ0FBQzZ3QixTQUFRLFFBQUksR0FDdkt1dUIsQ0FBR3BqRCxFQUFFQyxHQUFHNlIsRUFBRWxILEVBQUVvNEMsY0FBaUIsbUJBQW9Cei9DLEVBQUUsQ0FBQyxJQUFJaWdCLEVBQUVqZ0IsRUFBRUEsRUFBRSxXQUFXLElBQUlRLEVBQUU0K0MsR0FBRzd3QyxHQUFHMFIsRUFBRTFqQixLQUFLaUUsSUFBSW04QyxJQUFHLFdBQVd3QyxHQUFHMStDLEVBQUU4TixFQUFFL04sRUFBRVIsTUFBSyxPQUFPby9DLEdBQUc3d0MsR0FBRyxTQUFTdXhDLEdBQUd0L0MsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSUMsRUFBRSxFQUFFK0ksVUFBVTlFLGFBQVEsSUFBUzhFLFVBQVUsR0FBR0EsVUFBVSxHQUFHLEtBQUssTUFBTSxDQUFDbkUsU0FBUzBtQixHQUFHcnFCLElBQUksTUFBTWpCLEVBQUUsS0FBSyxHQUFHQSxFQUFFaU8sU0FBU25LLEVBQUVtdkIsY0FBY2x2QixFQUFFaXZDLGVBQWVqekMsR0FHcFIsU0FBU3NqRCxHQUFHdi9DLEVBQUVDLEdBQUcsSUFBSWhFLEVBQUUsRUFBRWdKLFVBQVU5RSxhQUFRLElBQVM4RSxVQUFVLEdBQUdBLFVBQVUsR0FBRyxLQUFLLElBQUlpNkMsR0FBR2ovQyxHQUFHLE1BQU1vSyxNQUFNc1QsRUFBRSxNQUFNLE9BQU8yaEMsR0FBR3QvQyxFQUFFQyxFQUFFLEtBQUtoRSxHQUxwSThpRCxHQUFHdmhELFVBQVVrSSxPQUFPLFNBQVMxRixHQUFHMitDLEdBQUczK0MsRUFBRXNCLEtBQUsyOUMsY0FBYyxLQUFLLE9BQU9GLEdBQUd2aEQsVUFBVWdpRCxRQUFRLFdBQVcsSUFBSXgvQyxFQUFFc0IsS0FBSzI5QyxjQUFjaC9DLEVBQUVELEVBQUVtdkIsY0FBY3d2QixHQUFHLEtBQUszK0MsRUFBRSxNQUFLLFdBQVdDLEVBQUUwNEIsSUFBSSxTQUcxWXBKLEdBQUcsU0FBU3Z2QixHQUFHLEdBQUcsS0FBS0EsRUFBRXdvQixJQUFJLENBQUMsSUFBSXZvQixFQUFFa3JDLEdBQUd1QyxLQUFLLElBQUksS0FBS0UsR0FBRzV0QyxFQUFFQyxHQUFHNitDLEdBQUc5K0MsRUFBRUMsS0FBS3V2QixHQUFHLFNBQVN4dkIsR0FBRyxLQUFLQSxFQUFFd29CLE1BQU1vbEIsR0FBRzV0QyxFQUFFLEdBQUc4K0MsR0FBRzkrQyxFQUFFLEtBQUt5dkIsR0FBRyxTQUFTenZCLEdBQUcsR0FBRyxLQUFLQSxFQUFFd29CLElBQUksQ0FBQyxJQUFJdm9CLEVBQUV5dEMsS0FBb0JFLEdBQUc1dEMsRUFBbEJDLEVBQUUwdEMsR0FBRzF0QyxFQUFFRCxFQUFFLE9BQWM4K0MsR0FBRzkrQyxFQUFFQyxLQUMxTGdsQixFQUFHLFNBQVNqbEIsRUFBRUMsRUFBRWhFLEdBQUcsT0FBT2dFLEdBQUcsSUFBSyxRQUF5QixHQUFqQitwQixHQUFHaHFCLEVBQUUvRCxHQUFHZ0UsRUFBRWhFLEVBQUVFLEtBQVEsVUFBVUYsRUFBRTRJLE1BQU0sTUFBTTVFLEVBQUUsQ0FBQyxJQUFJaEUsRUFBRStELEVBQUUvRCxFQUFFdXlCLFlBQVl2eUIsRUFBRUEsRUFBRXV5QixXQUFzRixJQUEzRXZ5QixFQUFFQSxFQUFFd2pELGlCQUFpQixjQUFjanJDLEtBQUtDLFVBQVUsR0FBR3hVLEdBQUcsbUJBQXVCQSxFQUFFLEVBQUVBLEVBQUVoRSxFQUFFa0UsT0FBT0YsSUFBSSxDQUFDLElBQUkvRCxFQUFFRCxFQUFFZ0UsR0FBRyxHQUFHL0QsSUFBSThELEdBQUc5RCxFQUFFd2pELE9BQU8xL0MsRUFBRTAvQyxLQUFLLENBQUMsSUFBSWxnRCxFQUFFcTVCLEdBQUczOEIsR0FBRyxJQUFJc0QsRUFBRSxNQUFNNkssTUFBTXNULEVBQUUsS0FBSzJMLEdBQUdwdEIsR0FBRzh0QixHQUFHOXRCLEVBQUVzRCxLQUFLLE1BQU0sSUFBSyxXQUFXc3JCLEdBQUc5cUIsRUFBRS9ELEdBQUcsTUFBTSxJQUFLLFNBQW1CLE9BQVZnRSxFQUFFaEUsRUFBRVksUUFBZTB0QixHQUFHdnFCLElBQUkvRCxFQUFFaTZDLFNBQVNqMkMsR0FBRSxLQUFNdWxCLEVBQUcwMkIsR0FDOVp6MkIsRUFBRyxTQUFTemxCLEVBQUVDLEVBQUVoRSxFQUFFQyxFQUFFc0QsR0FBRyxJQUFJcUgsRUFBRTBaLEdBQUVBLElBQUcsRUFBRSxJQUFJLE9BQU91cUIsR0FBRyxHQUFHOXFDLEVBQUU1QyxLQUFLLEtBQUs2QyxFQUFFaEUsRUFBRUMsRUFBRXNELElBQW5DLFFBM0RvQyxLQTJEVytnQixHQUFFMVosSUFBU3FrQyxPQUFPeGxCLEVBQUcsV0EzRGhDLElBMkQ2QyxHQUFEbkYsTUFoRDBSLFdBQWMsR0FBRyxPQUFPMDVCLEdBQUcsQ0FBQyxJQUFJajZDLEVBQUVpNkMsR0FBR0EsR0FBRyxLQUFLajZDLEVBQUUyRCxTQUFRLFNBQVMzRCxFQUFFL0QsR0FBR2svQyxHQUFHbC9DLEVBQUUrRCxHQUFHNGdCLEdBQUUza0IsTUFBS2l2QyxNQWdEM1Z5VSxHQUFLdkUsT0FBT3oxQixFQUFHLFNBQVMzbEIsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRXNrQixHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPdmdCLEVBQUVDLEdBQWIsUUEzRHpHLEtBMkRpSXNnQixHQUFFdGtCLElBQVNpdkMsT0FBOEksSUFDeFZsckMsR0FBT0MsR0FEcVYyL0MsR0FBRyxDQUFDQyxPQUFPLENBQUNudkIsR0FBR2tJLEdBQUdDLEdBQUc5VCxFQUFHUCxFQUFHOFUsR0FBRyxTQUFTdDVCLEdBQUc0dEIsR0FBRzV0QixFQUFFcTVCLEtBQUsvVCxFQUFHQyxFQUFHck8sR0FBR2tYLEdBQUdndEIsR0FBRyxDQUFDbDhCLFNBQVEsS0FDamFqZixJQUFQRCxHQUF5YixDQUFDOC9DLHdCQUF3QjF3QixHQUFHMndCLFdBQVcsRUFBRXZwQyxRQUFRLFVBQ3Bmd3BDLG9CQUFvQixjQURDRix3QkFuQmdFLFNBQVk5L0MsR0FBRyxHQUFHLG9CQUFxQnFPLCtCQUErQixPQUFNLEVBQUcsSUFBSXBPLEVBQUVvTywrQkFBK0IsR0FBR3BPLEVBQUVnZ0QsYUFBYWhnRCxFQUFFaWdELGNBQWMsT0FBTSxFQUFHLElBQUksSUFBSWprRCxFQUFFZ0UsRUFBRWtnRCxPQUFPbmdELEdBQUdnK0MsR0FBRyxTQUFTaCtDLEdBQUcsSUFBSUMsRUFBRW1nRCxrQkFBa0Jua0QsRUFBRStELE9BQUUsRUFBTyxLQUEwQixHQUFwQkEsRUFBRWtmLFFBQVFpTyxZQUFlLE1BQU0zdEIsTUFBTXE0QyxHQUFHLFNBQVM3M0MsR0FBRyxJQUFJQyxFQUFFb2dELHFCQUFxQnBrRCxFQUFFK0QsR0FBRyxNQUFNUixNQUFNLE1BQU10RCxLQW1CcFhva0QsQ0FBR2pqRCxFQUFFLEdBQUcyQyxHQUFFLENBQUN1Z0Qsa0JBQWtCLEtBQUtDLGNBQWMsS0FBS0MsbUJBQW1CLEtBQUtDLGVBQWUsS0FBS0MscUJBQXFCNzVCLEVBQUdoRyx1QkFBdUI4L0Isd0JBQXdCLFNBQVM1Z0QsR0FBVyxPQUFPLFFBQWZBLEVBQUV3dEIsR0FBR3h0QixJQUFtQixLQUFLQSxFQUFFcWxCLFdBQVd5NkIsd0JBQXdCLFNBQVM5L0MsR0FBRyxPQUFPQyxHQUFFQSxHQUFFRCxHQUFHLE1BQU02Z0QsNEJBQTRCLEtBQUtDLGdCQUFnQixLQUFLQyxhQUFhLEtBQUtDLGtCQUFrQixLQUFLQyxnQkFBZ0IsUUFDdlp2bEQsRUFBUWltQixtREFBbURpK0IsR0FBR2xrRCxFQUFRd2xELGFBQWEzQixHQUFHN2pELEVBQVF5bEQsWUFBWSxTQUFTbmhELEdBQUcsR0FBRyxNQUFNQSxFQUFFLE9BQU8sS0FBSyxHQUFHLElBQUlBLEVBQUVmLFNBQVMsT0FBT2UsRUFBRSxJQUFJQyxFQUFFRCxFQUFFeXRDLG9CQUFvQixRQUFHLElBQVN4dEMsRUFBRSxDQUFDLEdBQUcsbUJBQW9CRCxFQUFFMEYsT0FBTyxNQUFNMkUsTUFBTXNULEVBQUUsTUFBTSxNQUFNdFQsTUFBTXNULEVBQUUsSUFBSXJoQixPQUFPc0QsS0FBS0ksS0FBMEMsT0FBNUJBLEVBQUUsUUFBVkEsRUFBRXd0QixHQUFHdnRCLElBQWMsS0FBS0QsRUFBRXFsQixXQUN2VzNwQixFQUFRMGxELFVBQVUsU0FBU3BoRCxFQUFFQyxHQUFHLEdBOUR3QyxJQThEbkMsR0FBRHNnQixJQUFlLE1BQU1sVyxNQUFNc1QsRUFBRSxNQUFNLElBQUkxaEIsRUFBRXNrQixHQUFFQSxJQUFHLEVBQUUsSUFBSSxPQUFPdXFCLEdBQUcsR0FBRzlxQyxFQUFFNUMsS0FBSyxLQUFLNkMsSUFBN0IsUUFBeUNzZ0IsR0FBRXRrQixFQUFFaXZDLE9BQU94dkMsRUFBUW8xQixRQUFRLFNBQVM5d0IsRUFBRUMsRUFBRWhFLEdBQUcsSUFBSWlqRCxHQUFHai9DLEdBQUcsTUFBTW9LLE1BQU1zVCxFQUFFLE1BQU0sT0FBT3doQyxHQUFHLEtBQUtuL0MsRUFBRUMsR0FBRSxFQUFHaEUsSUFBSVAsRUFBUWdLLE9BQU8sU0FBUzFGLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlpakQsR0FBR2ovQyxHQUFHLE1BQU1vSyxNQUFNc1QsRUFBRSxNQUFNLE9BQU93aEMsR0FBRyxLQUFLbi9DLEVBQUVDLEdBQUUsRUFBR2hFLElBQ25UUCxFQUFRMmxELHVCQUF1QixTQUFTcmhELEdBQUcsSUFBSWsvQyxHQUFHbC9DLEdBQUcsTUFBTXFLLE1BQU1zVCxFQUFFLEtBQUssUUFBTzNkLEVBQUVzNEMsc0JBQXFCNkQsSUFBRyxXQUFXZ0QsR0FBRyxLQUFLLEtBQUtuL0MsR0FBRSxHQUFHLFdBQVdBLEVBQUVzNEMsb0JBQW9CLEtBQUt0NEMsRUFBRTI0QixJQUFJLFlBQVMsSUFBUWo5QixFQUFRNGxELHdCQUF3QnBGLEdBQUd4Z0QsRUFBUTZsRCxzQkFBc0IsU0FBU3ZoRCxFQUFFQyxHQUFHLE9BQU9zL0MsR0FBR3YvQyxFQUFFQyxFQUFFLEVBQUVnRixVQUFVOUUsYUFBUSxJQUFTOEUsVUFBVSxHQUFHQSxVQUFVLEdBQUcsT0FDdlZ2SixFQUFROGxELG9DQUFvQyxTQUFTeGhELEVBQUVDLEVBQUVoRSxFQUFFQyxHQUFHLElBQUlnakQsR0FBR2pqRCxHQUFHLE1BQU1vTyxNQUFNc1QsRUFBRSxNQUFNLEdBQUcsTUFBTTNkLFFBQUcsSUFBU0EsRUFBRXl0QyxvQkFBb0IsTUFBTXBqQyxNQUFNc1QsRUFBRSxLQUFLLE9BQU93aEMsR0FBR24vQyxFQUFFQyxFQUFFaEUsR0FBRSxFQUFHQyxJQUFJUixFQUFROGEsUUFBUSxXLDZCQ2hTL0w3YSxFQUFPRCxRQUFVa0MsRUFBUSxLOzs7Ozs7OztHQ01kLElBQUlpSixFQUFFa0gsRUFBRTZCLEVBQUU2UCxFQUFFNWpCLEVBQ3pCLEdBQUcsb0JBQXFCaUQsUUFBUSxtQkFBb0IyaUQsZUFBZSxDQUFDLElBQUkvakQsRUFBRSxLQUFLZ2dCLEVBQUUsS0FBSzVnQixFQUFFLFdBQVcsR0FBRyxPQUFPWSxFQUFFLElBQUksSUFBSXNDLEVBQUV0RSxFQUFROHRDLGVBQWU5ckMsR0FBRSxFQUFHc0MsR0FBR3RDLEVBQUUsS0FBSyxNQUFNdUMsR0FBRyxNQUFNaTRCLFdBQVdwN0IsRUFBRSxHQUFHbUQsSUFBSzBkLEVBQUVwZCxLQUFLdzZCLE1BQU1yL0IsRUFBUTh0QyxhQUFhLFdBQVcsT0FBT2pwQyxLQUFLdzZCLE1BQU1wZCxHQUFHOVcsRUFBRSxTQUFTN0csR0FBRyxPQUFPdEMsRUFBRXc2QixXQUFXcnhCLEVBQUUsRUFBRTdHLElBQUl0QyxFQUFFc0MsRUFBRWs0QixXQUFXcDdCLEVBQUUsS0FBS2lSLEVBQUUsU0FBUy9OLEVBQUVDLEdBQUd5ZCxFQUFFd2EsV0FBV2w0QixFQUFFQyxJQUFJMlAsRUFBRSxXQUFXd29CLGFBQWExYSxJQUFJK0IsRUFBRSxXQUFXLE9BQU0sR0FBSTVqQixFQUFFSCxFQUFRZ21ELHdCQUF3QixpQkFBaUIsQ0FBQyxJQUFJN2pDLEVBQUUvZSxPQUFPNmlELFlBQVkxd0MsRUFBRW5TLE9BQU95QixLQUNuZjJRLEVBQUVwUyxPQUFPbzVCLFdBQVdwYSxFQUFFaGYsT0FBT3M1QixhQUFhLEdBQUcsb0JBQXFCbDNCLFFBQVEsQ0FBQyxJQUFJNmMsRUFBRWpmLE9BQU84aUQscUJBQXFCLG1CQUFvQjlpRCxPQUFPK2lELHVCQUF1QjNnRCxRQUFRSCxNQUFNLDJJQUEySSxtQkFBb0JnZCxHQUFHN2MsUUFBUUgsTUFBTSwwSUFBMEksR0FBRyxpQkFDbmU4YyxHQUFHLG1CQUFvQkEsRUFBRWtkLElBQUlyL0IsRUFBUTh0QyxhQUFhLFdBQVcsT0FBTzNyQixFQUFFa2QsV0FBVyxDQUFDLElBQUkvYyxFQUFFL00sRUFBRThwQixNQUFNci9CLEVBQVE4dEMsYUFBYSxXQUFXLE9BQU92NEIsRUFBRThwQixNQUFNL2MsR0FBRyxJQUFJRSxHQUFFLEVBQUdDLEVBQUUsS0FBS0ssR0FBRyxFQUFFdkYsRUFBRSxFQUFFMEYsRUFBRSxFQUFFYyxFQUFFLFdBQVcsT0FBTy9qQixFQUFROHRDLGdCQUFnQjdxQixHQUFHOWlCLEVBQUUsYUFBYUgsRUFBUWdtRCx3QkFBd0IsU0FBUzFoRCxHQUFHLEVBQUVBLEdBQUcsSUFBSUEsRUFBRWtCLFFBQVFILE1BQU0sb0hBQW9Ia1ksRUFBRSxFQUFFalosRUFBRXBCLEtBQUswYSxNQUFNLElBQUl0WixHQUFHLEdBQUcsSUFBSTRlLEVBQUUsSUFBSTZpQyxlQUFlMWlDLEVBQUVILEVBQUVrakMsTUFBTWxqQyxFQUFFbWpDLE1BQU1DLFVBQ25mLFdBQVcsR0FBRyxPQUFPN2pDLEVBQUUsQ0FBQyxJQUFJbmUsRUFBRXRFLEVBQVE4dEMsZUFBZTdxQixFQUFFM2UsRUFBRWlaLEVBQUUsSUFBSWtGLEdBQUUsRUFBR25lLEdBQUcrZSxFQUFFa2pDLFlBQVksT0FBTy9qQyxHQUFFLEVBQUdDLEVBQUUsTUFBTSxNQUFNbGUsR0FBRyxNQUFNOGUsRUFBRWtqQyxZQUFZLE1BQU1oaUQsUUFBU2llLEdBQUUsR0FBSXJYLEVBQUUsU0FBUzdHLEdBQUdtZSxFQUFFbmUsRUFBRWtlLElBQUlBLEdBQUUsRUFBR2EsRUFBRWtqQyxZQUFZLFFBQVFsMEMsRUFBRSxTQUFTL04sRUFBRUMsR0FBR3VlLEVBQUV0TixHQUFFLFdBQVdsUixFQUFFdEUsRUFBUTh0QyxrQkFBaUJ2cEMsSUFBSTJQLEVBQUUsV0FBV2tPLEVBQUVVLEdBQUdBLEdBQUcsR0FBRyxTQUFTUyxFQUFFamYsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRStELEVBQUVHLE9BQU9ILEVBQUV3SSxLQUFLdkksR0FBR0QsRUFBRSxPQUFPLENBQUMsSUFBSTlELEVBQUVELEVBQUUsSUFBSSxFQUFFdUQsRUFBRVEsRUFBRTlELEdBQUcsVUFBRyxJQUFTc0QsR0FBRyxFQUFFMmYsRUFBRTNmLEVBQUVTLElBQTBCLE1BQU1ELEVBQTdCQSxFQUFFOUQsR0FBRytELEVBQUVELEVBQUUvRCxHQUFHdUQsRUFBRXZELEVBQUVDLEdBQWdCLFNBQVNrakIsRUFBRXBmLEdBQVUsWUFBTyxLQUFkQSxFQUFFQSxFQUFFLElBQXFCLEtBQUtBLEVBQzljLFNBQVN3ZixFQUFFeGYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUcsUUFBRyxJQUFTQyxFQUFFLENBQUMsSUFBSWhFLEVBQUUrRCxFQUFFNmYsTUFBTSxHQUFHNWpCLElBQUlnRSxFQUFFLENBQUNELEVBQUUsR0FBRy9ELEVBQUUrRCxFQUFFLElBQUksSUFBSTlELEVBQUUsRUFBRXNELEVBQUVRLEVBQUVHLE9BQU9qRSxFQUFFc0QsR0FBRyxDQUFDLElBQUl4RCxFQUFFLEdBQUdFLEVBQUUsR0FBRyxFQUFFbUIsRUFBRTJDLEVBQUVoRSxHQUFHNGhCLEVBQUU1aEIsRUFBRSxFQUFFVSxFQUFFc0QsRUFBRTRkLEdBQUcsUUFBRyxJQUFTdmdCLEdBQUcsRUFBRThoQixFQUFFOWhCLEVBQUVwQixRQUFHLElBQVNTLEdBQUcsRUFBRXlpQixFQUFFemlCLEVBQUVXLElBQUkyQyxFQUFFOUQsR0FBR1EsRUFBRXNELEVBQUU0ZCxHQUFHM2hCLEVBQUVDLEVBQUUwaEIsSUFBSTVkLEVBQUU5RCxHQUFHbUIsRUFBRTJDLEVBQUVoRSxHQUFHQyxFQUFFQyxFQUFFRixPQUFRLFdBQUcsSUFBU1UsR0FBRyxFQUFFeWlCLEVBQUV6aUIsRUFBRVQsSUFBMEIsTUFBTStELEVBQTdCQSxFQUFFOUQsR0FBR1EsRUFBRXNELEVBQUU0ZCxHQUFHM2hCLEVBQUVDLEVBQUUwaEIsSUFBZ0IsT0FBTzNkLEVBQUUsT0FBTyxLQUFLLFNBQVNrZixFQUFFbmYsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRStELEVBQUVraUQsVUFBVWppRCxFQUFFaWlELFVBQVUsT0FBTyxJQUFJam1ELEVBQUVBLEVBQUUrRCxFQUFFa1gsR0FBR2pYLEVBQUVpWCxHQUFHLElBQUl3SixFQUFFLEdBQUdqVCxFQUFFLEdBQUdDLEVBQUUsRUFBRWlTLEVBQUUsS0FBS0MsRUFBRSxFQUFFSyxHQUFFLEVBQUdFLEdBQUUsRUFBR0MsR0FBRSxFQUNqYSxTQUFTRixFQUFFbGdCLEdBQUcsSUFBSSxJQUFJQyxFQUFFbWYsRUFBRTNSLEdBQUcsT0FBT3hOLEdBQUcsQ0FBQyxHQUFHLE9BQU9BLEVBQUVvSixTQUFTbVcsRUFBRS9SLE9BQVEsTUFBR3hOLEVBQUVraUQsV0FBV25pRCxHQUFnRCxNQUE5Q3dmLEVBQUUvUixHQUFHeE4sRUFBRWlpRCxVQUFVamlELEVBQUU4ckMsZUFBZTlzQixFQUFFeUIsRUFBRXpnQixHQUFjQSxFQUFFbWYsRUFBRTNSLElBQUksU0FBUzhTLEVBQUV2Z0IsR0FBYSxHQUFWb2dCLEdBQUUsRUFBR0YsRUFBRWxnQixJQUFPbWdCLEVBQUUsR0FBRyxPQUFPZixFQUFFc0IsR0FBR1AsR0FBRSxFQUFHdFosRUFBRTRaLE9BQU8sQ0FBQyxJQUFJeGdCLEVBQUVtZixFQUFFM1IsR0FBRyxPQUFPeE4sR0FBRzhOLEVBQUV3UyxFQUFFdGdCLEVBQUVraUQsVUFBVW5pRCxJQUN0UCxTQUFTeWdCLEVBQUV6Z0IsRUFBRUMsR0FBR2tnQixHQUFFLEVBQUdDLElBQUlBLEdBQUUsRUFBR3hRLEtBQUtxUSxHQUFFLEVBQUcsSUFBSWhrQixFQUFFMmpCLEVBQUUsSUFBUyxJQUFMTSxFQUFFamdCLEdBQU8wZixFQUFFUCxFQUFFc0IsR0FBRyxPQUFPZixNQUFNQSxFQUFFb3NCLGVBQWU5ckMsSUFBSUQsSUFBSXlmLE1BQU0sQ0FBQyxJQUFJdmpCLEVBQUV5akIsRUFBRXRXLFNBQVMsR0FBRyxPQUFPbk4sRUFBRSxDQUFDeWpCLEVBQUV0VyxTQUFTLEtBQUt1VyxFQUFFRCxFQUFFeWlDLGNBQWMsSUFBSTVpRCxFQUFFdEQsRUFBRXlqQixFQUFFb3NCLGdCQUFnQjlyQyxHQUFHQSxFQUFFdkUsRUFBUTh0QyxlQUFlLG1CQUFvQmhxQyxFQUFFbWdCLEVBQUV0VyxTQUFTN0osRUFBRW1nQixJQUFJUCxFQUFFc0IsSUFBSWxCLEVBQUVrQixHQUFHUixFQUFFamdCLFFBQVF1ZixFQUFFa0IsR0FBR2YsRUFBRVAsRUFBRXNCLEdBQUcsR0FBRyxPQUFPZixFQUFFLElBQUkzakIsR0FBRSxNQUFPLENBQUMsSUFBSXFCLEVBQUUraEIsRUFBRTNSLEdBQUcsT0FBT3BRLEdBQUcwUSxFQUFFd1MsRUFBRWxqQixFQUFFOGtELFVBQVVsaUQsR0FBR2pFLEdBQUUsRUFBRyxPQUFPQSxFQUE3VSxRQUF1VjJqQixFQUFFLEtBQUtDLEVBQUUzakIsRUFBRWdrQixHQUFFLEdBQ3BaLFNBQVNVLEVBQUUzZ0IsR0FBRyxPQUFPQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsT0FBTyxXQUFXLEtBQUssRUFBRSxPQUFPLElBQUksUUFBUSxPQUFPLEtBQUssSUFBSTRnQixFQUFFL2tCLEVBQUVILEVBQVF3dUMsc0JBQXNCLEVBQUV4dUMsRUFBUWt1QywyQkFBMkIsRUFBRWx1QyxFQUFRc3VDLHFCQUFxQixFQUFFdHVDLEVBQVE0MUIsd0JBQXdCLEVBQUU1MUIsRUFBUTJtRCxtQkFBbUIsS0FBSzNtRCxFQUFReTJCLDhCQUE4QixFQUFFejJCLEVBQVEwdEMsd0JBQXdCLFNBQVNwcEMsR0FBR0EsRUFBRXFKLFNBQVMsTUFBTTNOLEVBQVE0bUQsMkJBQTJCLFdBQVduaUMsR0FBR0YsSUFBSUUsR0FBRSxFQUFHdFosRUFBRTRaLEtBQ3hjL2tCLEVBQVFndUMsaUNBQWlDLFdBQVcsT0FBTzlwQixHQUFHbGtCLEVBQVE2bUQsOEJBQThCLFdBQVcsT0FBT25qQyxFQUFFc0IsSUFBSWhsQixFQUFROG1ELGNBQWMsU0FBU3hpRCxHQUFHLE9BQU80ZixHQUFHLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLElBQUkzZixFQUFFLEVBQUUsTUFBTSxRQUFRQSxFQUFFMmYsRUFBRSxJQUFJM2pCLEVBQUUyakIsRUFBRUEsRUFBRTNmLEVBQUUsSUFBSSxPQUFPRCxJQUFYLFFBQXVCNGYsRUFBRTNqQixJQUFJUCxFQUFRK21ELHdCQUF3QixhQUFhL21ELEVBQVE0dEMsc0JBQXNCMW9CLEVBQUVsbEIsRUFBUWsxQix5QkFBeUIsU0FBUzV3QixFQUFFQyxHQUFHLE9BQU9ELEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxNQUFNLFFBQVFBLEVBQUUsRUFBRSxJQUFJL0QsRUFBRTJqQixFQUFFQSxFQUFFNWYsRUFBRSxJQUFJLE9BQU9DLElBQVgsUUFBdUIyZixFQUFFM2pCLElBQ2hlUCxFQUFRMjFCLDBCQUEwQixTQUFTcnhCLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUVSLEVBQVE4dEMsZUFBZSxHQUFHLGlCQUFrQnZ0QyxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJdUQsRUFBRXZELEVBQUV5bUQsTUFBTWxqRCxFQUFFLGlCQUFrQkEsR0FBRyxFQUFFQSxFQUFFdEQsRUFBRXNELEVBQUV0RCxFQUFFRCxFQUFFLGlCQUFrQkEsRUFBRWkvQyxRQUFRai9DLEVBQUVpL0MsUUFBUXY2QixFQUFFM2dCLFFBQVEvRCxFQUFFMGtCLEVBQUUzZ0IsR0FBR1IsRUFBRXRELEVBQXlNLE9BQWpNOEQsRUFBRSxDQUFDa1gsR0FBR3hKLElBQUlyRSxTQUFTcEosRUFBRW1pRCxjQUFjcGlELEVBQUVtaUQsVUFBVTNpRCxFQUFFdXNDLGVBQXZEOXZDLEVBQUV1RCxFQUFFdkQsRUFBb0VpbUQsV0FBVyxHQUFHMWlELEVBQUV0RCxHQUFHOEQsRUFBRWtpRCxVQUFVMWlELEVBQUV5ZixFQUFFeFIsRUFBRXpOLEdBQUcsT0FBT29mLEVBQUVzQixJQUFJMWdCLElBQUlvZixFQUFFM1IsS0FBSzJTLEVBQUV4USxJQUFJd1EsR0FBRSxFQUFHclMsRUFBRXdTLEVBQUUvZ0IsRUFBRXRELE1BQU04RCxFQUFFa2lELFVBQVVqbUQsRUFBRWdqQixFQUFFeUIsRUFBRTFnQixHQUFHbWdCLEdBQUdGLElBQUlFLEdBQUUsRUFBR3RaLEVBQUU0WixLQUFZemdCLEdBQzNhdEUsRUFBUTJ1QyxxQkFBcUIsV0FBVyxJQUFJcnFDLEVBQUV0RSxFQUFROHRDLGVBQWV0cEIsRUFBRWxnQixHQUFHLElBQUlDLEVBQUVtZixFQUFFc0IsR0FBRyxPQUFPemdCLElBQUkwZixHQUFHLE9BQU9BLEdBQUcsT0FBTzFmLEdBQUcsT0FBT0EsRUFBRW9KLFVBQVVwSixFQUFFa2lELFdBQVduaUQsR0FBR0MsRUFBRThyQyxlQUFlcHNCLEVBQUVvc0IsZ0JBQWdCdHNCLEtBQUsvakIsRUFBUWluRCxzQkFBc0IsU0FBUzNpRCxHQUFHLElBQUlDLEVBQUUyZixFQUFFLE9BQU8sV0FBVyxJQUFJM2pCLEVBQUUyakIsRUFBRUEsRUFBRTNmLEVBQUUsSUFBSSxPQUFPRCxFQUFFc0gsTUFBTWhHLEtBQUsyRCxXQUF4QixRQUEyQzJhLEVBQUUzakIsTSw2QkNYL1QsSUFBSTJtRCxFQUF1QmhsRCxFQUFRLElBRW5DLFNBQVNpbEQsS0FDVCxTQUFTQyxLQUNUQSxFQUF1QkMsa0JBQW9CRixFQUUzQ2xuRCxFQUFPRCxRQUFVLFdBQ2YsU0FBU3NuRCxFQUFLdHlDLEVBQU91eUMsRUFBVUMsRUFBZTNyQixFQUFVNHJCLEVBQWNDLEdBQ3BFLEdBQUlBLElBQVdSLEVBQWYsQ0FJQSxJQUFJbjVDLEVBQU0sSUFBSVksTUFDWixtTEFLRixNQURBWixFQUFJdE4sS0FBTyxzQkFDTHNOLEdBR1IsU0FBUzQ1QyxJQUNQLE9BQU9MLEVBRlRBLEVBQUszeEMsV0FBYTJ4QyxFQU1sQixJQUFJTSxFQUFpQixDQUNuQjlsQyxNQUFPd2xDLEVBQ1BPLEtBQU1QLEVBQ05qakMsS0FBTWlqQyxFQUNOL2hELE9BQVEraEQsRUFDUjFsRCxPQUFRMGxELEVBQ1JRLE9BQVFSLEVBQ1JTLE9BQVFULEVBRVJVLElBQUtWLEVBQ0xXLFFBQVNOLEVBQ1R2SyxRQUFTa0ssRUFDVGhVLFlBQWFnVSxFQUNiWSxXQUFZUCxFQUNabjVDLEtBQU04NEMsRUFDTmEsU0FBVVIsRUFDVlMsTUFBT1QsRUFDUFUsVUFBV1YsRUFDWFcsTUFBT1gsRUFDUFksTUFBT1osRUFFUGEsZUFBZ0JwQixFQUNoQkMsa0JBQW1CRixHQUtyQixPQUZBUyxFQUFlbHlDLFVBQVlreUMsRUFFcEJBLEksNkJDbkRUM25ELEVBQU9ELFFBRm9CLGdEOzs7Ozs7OztHQ0FkLElBQUl1RSxFQUFFLG1CQUFvQnRELFFBQVFBLE9BQU84Z0IsSUFBSXhoQixFQUFFZ0UsRUFBRXRELE9BQU84Z0IsSUFBSSxpQkFBaUIsTUFBTXZoQixFQUFFK0QsRUFBRXRELE9BQU84Z0IsSUFBSSxnQkFBZ0IsTUFBTWplLEVBQUVTLEVBQUV0RCxPQUFPOGdCLElBQUksa0JBQWtCLE1BQU01VyxFQUFFNUcsRUFBRXRELE9BQU84Z0IsSUFBSSxxQkFBcUIsTUFBTTFQLEVBQUU5TixFQUFFdEQsT0FBTzhnQixJQUFJLGtCQUFrQixNQUFNN04sRUFBRTNQLEVBQUV0RCxPQUFPOGdCLElBQUksa0JBQWtCLE1BQU1nQyxFQUFFeGYsRUFBRXRELE9BQU84Z0IsSUFBSSxpQkFBaUIsTUFBTTVoQixFQUFFb0UsRUFBRXRELE9BQU84Z0IsSUFBSSxvQkFBb0IsTUFBTXpoQixFQUFFaUUsRUFBRXRELE9BQU84Z0IsSUFBSSx5QkFBeUIsTUFBTXBnQixFQUFFNEMsRUFBRXRELE9BQU84Z0IsSUFBSSxxQkFBcUIsTUFBTS9mLEVBQUV1QyxFQUFFdEQsT0FBTzhnQixJQUFJLGtCQUFrQixNQUFNQyxFQUFFemQsRUFDcGZ0RCxPQUFPOGdCLElBQUksdUJBQXVCLE1BQU0vZ0IsRUFBRXVELEVBQUV0RCxPQUFPOGdCLElBQUksY0FBYyxNQUFNM2dCLEVBQUVtRCxFQUFFdEQsT0FBTzhnQixJQUFJLGNBQWMsTUFBTUcsRUFBRTNkLEVBQUV0RCxPQUFPOGdCLElBQUksZUFBZSxNQUFNSSxFQUFFNWQsRUFBRXRELE9BQU84Z0IsSUFBSSxxQkFBcUIsTUFBTXhNLEVBQUVoUixFQUFFdEQsT0FBTzhnQixJQUFJLG1CQUFtQixNQUFNdk0sRUFBRWpSLEVBQUV0RCxPQUFPOGdCLElBQUksZUFBZSxNQUNsUSxTQUFTSyxFQUFFOWQsR0FBRyxHQUFHLGlCQUFrQkEsR0FBRyxPQUFPQSxFQUFFLENBQUMsSUFBSTJkLEVBQUUzZCxFQUFFYyxTQUFTLE9BQU82YyxHQUFHLEtBQUsxaEIsRUFBRSxPQUFPK0QsRUFBRUEsRUFBRTZFLE1BQVEsS0FBS2hKLEVBQUUsS0FBS0csRUFBRSxLQUFLd0QsRUFBRSxLQUFLdU8sRUFBRSxLQUFLbEgsRUFBRSxLQUFLbkosRUFBRSxPQUFPc0MsRUFBRSxRQUFRLE9BQU9BLEVBQUVBLEdBQUdBLEVBQUVjLFVBQVksS0FBSzJlLEVBQUUsS0FBS3BpQixFQUFFLEtBQUtQLEVBQUUsS0FBS0osRUFBRSxLQUFLa1QsRUFBRSxPQUFPNVAsRUFBRSxRQUFRLE9BQU8yZCxHQUFHLEtBQUt6aEIsRUFBRSxPQUFPeWhCLElBQUksU0FBU0ksRUFBRS9kLEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLaEUsRUFBRU4sRUFBUXlvRCxVQUFVdG9ELEVBQUVILEVBQVEwb0QsZUFBZXBvRCxFQUFFTixFQUFRMm9ELGdCQUFnQjVrQyxFQUFFL2pCLEVBQVE0b0QsZ0JBQWdCMTBDLEVBQUVsVSxFQUFRcUUsUUFBUTlELEVBQUVQLEVBQVErSixXQUFXcEksRUFBRTNCLEVBQVE0bEIsU0FBUzloQixFQUFFOUQsRUFBUTZvRCxLQUFLem5ELEVBQUVwQixFQUFRaUssS0FBS2pKLEVBQUVoQixFQUFROG9ELE9BQU90b0QsRUFDaGZSLEVBQVE2bEIsU0FBU3hULEVBQUVyUyxFQUFRK2xCLFdBQVc1YSxFQUFFbkwsRUFBUWdtQixTQUFTaGtCLEVBQUVoQyxFQUFRK29ELFlBQVksU0FBU3prRCxHQUFHLE9BQU8rZCxFQUFFL2QsSUFBSThkLEVBQUU5ZCxLQUFLbkUsR0FBR0gsRUFBUWdwRCxpQkFBaUIzbUMsRUFBRXJpQixFQUFRaXBELGtCQUFrQixTQUFTM2tELEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLeWYsR0FBRy9qQixFQUFRa3BELGtCQUFrQixTQUFTNWtELEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLNFAsR0FBR2xVLEVBQVFtcEQsVUFBVSxTQUFTN2tELEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsT0FBT0EsR0FBR0EsRUFBRWMsV0FBVzdFLEdBQUdQLEVBQVFvcEQsYUFBYSxTQUFTOWtELEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLM0MsR0FBRzNCLEVBQVFxcEQsV0FBVyxTQUFTL2tELEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLUixHQUFHOUQsRUFBUXNwRCxPQUFPLFNBQVNobEQsR0FBRyxPQUFPOGQsRUFBRTlkLEtBQUtsRCxHQUN6ZHBCLEVBQVE4SixPQUFPLFNBQVN4RixHQUFHLE9BQU84ZCxFQUFFOWQsS0FBS3RELEdBQUdoQixFQUFRdXBELFNBQVMsU0FBU2psRCxHQUFHLE9BQU84ZCxFQUFFOWQsS0FBSzlELEdBQUdSLEVBQVF3cEQsV0FBVyxTQUFTbGxELEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLK04sR0FBR3JTLEVBQVF5cEQsYUFBYSxTQUFTbmxELEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLNkcsR0FBR25MLEVBQVEwcEQsV0FBVyxTQUFTcGxELEdBQUcsT0FBTzhkLEVBQUU5ZCxLQUFLdEMsR0FDek9oQyxFQUFRMnBELG1CQUFtQixTQUFTcmxELEdBQUcsTUFBTSxpQkFBa0JBLEdBQUcsbUJBQW9CQSxHQUFHQSxJQUFJUixHQUFHUSxJQUFJaEUsR0FBR2dFLElBQUkrTixHQUFHL04sSUFBSTZHLEdBQUc3RyxJQUFJdEMsR0FBR3NDLElBQUkwZCxHQUFHLGlCQUFrQjFkLEdBQUcsT0FBT0EsSUFBSUEsRUFBRWMsV0FBV2hFLEdBQUdrRCxFQUFFYyxXQUFXcEUsR0FBR3NELEVBQUVjLFdBQVc4TyxHQUFHNVAsRUFBRWMsV0FBVzJlLEdBQUd6ZixFQUFFYyxXQUFXekQsR0FBRzJDLEVBQUVjLFdBQVcrYyxHQUFHN2QsRUFBRWMsV0FBV21RLEdBQUdqUixFQUFFYyxXQUFXb1EsR0FBR2xSLEVBQUVjLFdBQVc4YyxJQUFJbGlCLEVBQVE0cEQsT0FBT3huQyxHLGNDWm5VbmlCLEVBQU9ELFFBQVUsQ0FDZjZwRCxZQUFhLEVBQ2JDLG9CQUFxQixFQUNyQkMsYUFBYyxFQUNkQyxlQUFnQixFQUNoQkMsWUFBYSxFQUNiQyxjQUFlLEVBQ2ZDLGFBQWMsRUFDZEMscUJBQXNCLEVBQ3RCQyxTQUFVLEVBQ1ZDLGtCQUFtQixFQUNuQkMsZUFBZ0IsRUFDaEJDLGdCQUFpQixFQUNqQkMsa0JBQW1CLEVBQ25CQyxVQUFXLEVBQ1hDLGNBQWUsRUFDZkMsYUFBYyxFQUNkQyxTQUFVLEVBQ1ZDLGlCQUFrQixFQUNsQkMsT0FBUSxFQUNSQyxZQUFhLEVBQ2JDLGNBQWUsRUFDZkMsY0FBZSxFQUNmQyxlQUFnQixFQUNoQkMsYUFBYyxFQUNkQyxjQUFlLEVBQ2ZDLGlCQUFrQixFQUNsQkMsaUJBQWtCLEVBQ2xCQyxlQUFnQixFQUNoQkMsaUJBQWtCLEVBQ2xCQyxjQUFlLEVBQ2ZDLFVBQVcsSSw2QkNoQ2IsSUFBSWx1QyxFQUFrQnZiLEVBQVEsSUFDMUIwcEQsRUFBbUIxcEQsRUFBUSxJQUMzQjJwRCxFQUFZM3BELEVBQVEsSUFDcEJnZCxFQUFzQmhkLEVBQVEsSUFDOUI0cEQsRUFBaUI1cEQsRUFBUSxJQUd6QjZwRCxFQUFtQjdzQyxFQUFvQmpaLElBQ3ZDa1osRUFBbUJELEVBQW9CTixVQUZ0QixrQkFjckIzZSxFQUFPRCxRQUFVOHJELEVBQWU5bkQsTUFBTyxTQUFTLFNBQVVnb0QsRUFBVUMsR0FDbEVGLEVBQWlCbm1ELEtBQU0sQ0FDckJ1RCxLQWhCaUIsaUJBaUJqQnFSLE9BQVFpRCxFQUFnQnV1QyxHQUN4QnJrRCxNQUFPLEVBQ1Bza0QsS0FBTUEsT0FJUCxXQUNELElBQUlsMkMsRUFBUW9KLEVBQWlCdlosTUFDekI0VSxFQUFTekUsRUFBTXlFLE9BQ2Z5eEMsRUFBT2wyQyxFQUFNazJDLEtBQ2J0a0QsRUFBUW9PLEVBQU1wTyxRQUNsQixPQUFLNlMsR0FBVTdTLEdBQVM2UyxFQUFPL1YsUUFDN0JzUixFQUFNeUUsWUFBU25QLEVBQ1IsQ0FBRWxLLFdBQU9rSyxFQUFXc1osTUFBTSxJQUV2QixRQUFSc25DLEVBQXVCLENBQUU5cUQsTUFBT3dHLEVBQU9nZCxNQUFNLEdBQ3JDLFVBQVJzbkMsRUFBeUIsQ0FBRTlxRCxNQUFPcVosRUFBTzdTLEdBQVFnZCxNQUFNLEdBQ3BELENBQUV4akIsTUFBTyxDQUFDd0csRUFBTzZTLEVBQU83UyxJQUFTZ2QsTUFBTSxLQUM3QyxVQUtIa25DLEVBQVVLLFVBQVlMLEVBQVU3bkQsTUFHaEM0bkQsRUFBaUIsUUFDakJBLEVBQWlCLFVBQ2pCQSxFQUFpQixZLGdCQ3BEakIsSUFBSWw2QyxFQUFReFAsRUFBUSxJQUNoQmlxRCxFQUFVanFELEVBQVEsSUFFbEIwRSxFQUFRLEdBQUdBLE1BR2YzRyxFQUFPRCxRQUFVMFIsR0FBTSxXQUdyQixPQUFROVEsT0FBTyxLQUFLa1oscUJBQXFCLE1BQ3RDLFNBQVU3VyxHQUNiLE1BQXNCLFVBQWZrcEQsRUFBUWxwRCxHQUFrQjJELEVBQU12RyxLQUFLNEMsRUFBSSxJQUFNckMsT0FBT3FDLElBQzNEckMsUSxjQ1pKLElBQUl1RSxFQUFXLEdBQUdBLFNBRWxCbEYsRUFBT0QsUUFBVSxTQUFVaUQsR0FDekIsT0FBT2tDLEVBQVM5RSxLQUFLNEMsR0FBSTBJLE1BQU0sR0FBSSxLLGdCQ0hyQyxJQUFJb0gsRUFBa0I3USxFQUFRLElBQzFCVixFQUFTVSxFQUFRLElBQ2pCK0ksRUFBdUIvSSxFQUFRLElBRS9Ca3FELEVBQWNyNUMsRUFBZ0IsZUFDOUJzNUMsRUFBaUJyb0QsTUFBTWxDLFVBSVF1SixNQUEvQmdoRCxFQUFlRCxJQUNqQm5oRCxFQUFxQkUsRUFBRWtoRCxFQUFnQkQsRUFBYSxDQUNsRDM0QyxjQUFjLEVBQ2R0UyxNQUFPSyxFQUFPLFFBS2xCdkIsRUFBT0QsUUFBVSxTQUFVeUIsR0FDekI0cUQsRUFBZUQsR0FBYTNxRCxJQUFPLEksZ0JDbEJyQyxJQUFJNFAsRUFBZ0JuUCxFQUFRLElBRTVCakMsRUFBT0QsUUFBVXFSLElBRVhwUSxPQUFPcXJELE1BRWtCLGlCQUFuQnJyRCxPQUFPc2hCLFUsZ0JDTm5CLElBQUl2WCxFQUFjOUksRUFBUSxJQUN0QitJLEVBQXVCL0ksRUFBUSxJQUMvQjBQLEVBQVcxUCxFQUFRLElBQ25CcXFELEVBQWFycUQsRUFBUSxJQUl6QmpDLEVBQU9ELFFBQVVnTCxFQUFjcEssT0FBT2diLGlCQUFtQixTQUEwQjdKLEVBQUd5TCxHQUNwRjVMLEVBQVNHLEdBS1QsSUFKQSxJQUdJdFEsRUFIQXlDLEVBQU9xb0QsRUFBVy91QyxHQUNsQi9ZLEVBQVNQLEVBQUtPLE9BQ2RrRCxFQUFRLEVBRUxsRCxFQUFTa0QsR0FBT3NELEVBQXFCRSxFQUFFNEcsRUFBR3RRLEVBQU15QyxFQUFLeUQsS0FBVTZWLEVBQVcvYixJQUNqRixPQUFPc1EsSSxnQkNkVCxJQUFJeTZDLEVBQXFCdHFELEVBQVEsSUFDN0IyWixFQUFjM1osRUFBUSxJQUkxQmpDLEVBQU9ELFFBQVVZLE9BQU9zRCxNQUFRLFNBQWM2TixHQUM1QyxPQUFPeTZDLEVBQW1CejZDLEVBQUc4SixLLGdCQ04vQixJQUFJNEIsRUFBa0J2YixFQUFRLElBQzFCdXFELEVBQVd2cUQsRUFBUSxJQUNuQndxRCxFQUFrQnhxRCxFQUFRLElBRzFCeXFELEVBQWUsU0FBVUMsR0FDM0IsT0FBTyxTQUFVQyxFQUFPQyxFQUFJQyxHQUMxQixJQUdJNXJELEVBSEE0USxFQUFJMEwsRUFBZ0JvdkMsR0FDcEJwb0QsRUFBU2dvRCxFQUFTMTZDLEVBQUV0TixRQUNwQmtELEVBQVEra0QsRUFBZ0JLLEVBQVd0b0QsR0FJdkMsR0FBSW1vRCxHQUFlRSxHQUFNQSxHQUFJLEtBQU9yb0QsRUFBU2tELEdBRzNDLElBRkF4RyxFQUFRNFEsRUFBRXBLLE9BRUd4RyxFQUFPLE9BQU8sT0FFdEIsS0FBTXNELEVBQVNrRCxFQUFPQSxJQUMzQixJQUFLaWxELEdBQWVqbEQsS0FBU29LLElBQU1BLEVBQUVwSyxLQUFXbWxELEVBQUksT0FBT0YsR0FBZWpsRCxHQUFTLEVBQ25GLE9BQVFpbEQsSUFBZ0IsSUFJOUIzc0QsRUFBT0QsUUFBVSxDQUdmZ3RELFNBQVVMLEdBQWEsR0FHdkJ6bEQsUUFBU3lsRCxHQUFhLEssZ0JDOUJ4QixJQUFJTSxFQUFZL3FELEVBQVEsSUFFcEJ5L0MsRUFBTXorQyxLQUFLeStDLElBSWYxaEQsRUFBT0QsUUFBVSxTQUFVNmQsR0FDekIsT0FBT0EsRUFBVyxFQUFJOGpDLEVBQUlzTCxFQUFVcHZDLEdBQVcsa0JBQW9CLEksZ0JDUHJFLElBQUlvdkMsRUFBWS9xRCxFQUFRLElBRXBCZ3JELEVBQU1ocUQsS0FBS2dxRCxJQUNYdkwsRUFBTXorQyxLQUFLeStDLElBS2YxaEQsRUFBT0QsUUFBVSxTQUFVMkgsRUFBT2xELEdBQ2hDLElBQUkwb0QsRUFBVUYsRUFBVXRsRCxHQUN4QixPQUFPd2xELEVBQVUsRUFBSUQsRUFBSUMsRUFBVTFvRCxFQUFRLEdBQUtrOUMsRUFBSXdMLEVBQVMxb0QsSyxnQkNWL0QsSUFBSTJvRCxFQUFhbHJELEVBQVEsSUFFekJqQyxFQUFPRCxRQUFVb3RELEVBQVcsV0FBWSxvQixnQkNGeEMsSUFBSS9wRCxFQUFTbkIsRUFBUSxHQUVyQmpDLEVBQU9ELFFBQVVxRCxHLGdCQ0ZqQixJQUFJQSxFQUFTbkIsRUFBUSxHQUNqQjZjLEVBQWdCN2MsRUFBUSxJQUV4Qm1jLEVBQVVoYixFQUFPZ2IsUUFFckJwZSxFQUFPRCxRQUE2QixtQkFBWnFlLEdBQTBCLGNBQWMvVyxLQUFLeVgsRUFBY1YsSyw2QkNKbkYsSUFBSWd2QyxFQUFJbnJELEVBQVEsSUFDWm9yRCxFQUE0QnByRCxFQUFRLElBQ3BDbUksRUFBaUJuSSxFQUFRLElBQ3pCcXJELEVBQWlCcnJELEVBQVEsS0FDekJzckQsRUFBaUJ0ckQsRUFBUSxJQUN6QjRRLEVBQThCNVEsRUFBUSxJQUN0Q3VyRCxFQUFXdnJELEVBQVEsSUFDbkI2USxFQUFrQjdRLEVBQVEsSUFDMUIwWSxFQUFVMVksRUFBUSxJQUNsQjJwRCxFQUFZM3BELEVBQVEsSUFDcEJ3ckQsRUFBZ0J4ckQsRUFBUSxJQUV4QnVkLEVBQW9CaXVDLEVBQWNqdUMsa0JBQ2xDRyxFQUF5Qjh0QyxFQUFjOXRDLHVCQUN2QzVNLEVBQVdELEVBQWdCLFlBSzNCNDZDLEVBQWEsV0FBYyxPQUFPL25ELE1BRXRDM0YsRUFBT0QsUUFBVSxTQUFVNHRELEVBQVVDLEVBQU1DLEVBQXFCcGhELEVBQU1xaEQsRUFBU0MsRUFBUUMsR0FDckZYLEVBQTBCUSxFQUFxQkQsRUFBTW5oRCxHQUVyRCxJQWtCSXdoRCxFQUEwQkMsRUFBU0MsRUFsQm5DQyxFQUFxQixTQUFVQyxHQUNqQyxHQUFJQSxJQUFTUCxHQUFXUSxFQUFpQixPQUFPQSxFQUNoRCxJQUFLM3VDLEdBQTBCMHVDLEtBQVFFLEVBQW1CLE9BQU9BLEVBQWtCRixHQUNuRixPQUFRQSxHQUNOLElBYkssT0FjTCxJQWJPLFNBY1AsSUFiUSxVQWFNLE9BQU8sV0FBcUIsT0FBTyxJQUFJUixFQUFvQmxvRCxLQUFNMG9ELElBQy9FLE9BQU8sV0FBYyxPQUFPLElBQUlSLEVBQW9CbG9ELFFBR3BEcU4sRUFBZ0I0NkMsRUFBTyxZQUN2QlksR0FBd0IsRUFDeEJELEVBQW9CWixFQUFTOXJELFVBQzdCNHNELEVBQWlCRixFQUFrQng3QyxJQUNsQ3c3QyxFQUFrQixlQUNsQlQsR0FBV1MsRUFBa0JULEdBQzlCUSxHQUFtQjN1QyxHQUEwQjh1QyxHQUFrQkwsRUFBbUJOLEdBQ2xGWSxFQUE0QixTQUFSZCxHQUFrQlcsRUFBa0JJLFNBQTRCRixFQWlDeEYsR0E3QklDLElBQ0ZULEVBQTJCN2pELEVBQWVza0QsRUFBa0J0dUQsS0FBSyxJQUFJdXRELElBQ2pFbnVDLElBQXNCN2UsT0FBT2tCLFdBQWFvc0QsRUFBeUJ4aEQsT0FDaEVrTyxHQUFXdlEsRUFBZTZqRCxLQUE4Qnp1QyxJQUN2RDh0QyxFQUNGQSxFQUFlVyxFQUEwQnp1QyxHQUNhLG1CQUF0Q3l1QyxFQUF5Qmw3QyxJQUN6Q0YsRUFBNEJvN0MsRUFBMEJsN0MsRUFBVTI2QyxJQUlwRUgsRUFBZVUsRUFBMEJqN0MsR0FBZSxHQUFNLEdBQzFEMkgsSUFBU2l4QyxFQUFVNTRDLEdBQWlCMDZDLEtBekNqQyxVQThDUEksR0FBcUJXLEdBOUNkLFdBOENnQ0EsRUFBZWp1RCxPQUN4RGd1RCxHQUF3QixFQUN4QkYsRUFBa0IsV0FBb0IsT0FBT0csRUFBZXJ1RCxLQUFLdUYsUUFJN0RnVixJQUFXcXpDLEdBQVdPLEVBQWtCeDdDLEtBQWN1N0MsR0FDMUR6N0MsRUFBNEIwN0MsRUFBbUJ4N0MsRUFBVXU3QyxHQUUzRDFDLEVBQVVnQyxHQUFRVSxFQUdkUixFQU1GLEdBTEFJLEVBQVUsQ0FDUmg3QyxPQUFRazdDLEVBNURELFVBNkRQbnFELEtBQU04cEQsRUFBU08sRUFBa0JGLEVBOUQ1QixRQStETE8sUUFBU1AsRUE3REQsWUErRE5KLEVBQVEsSUFBS0csS0FBT0QsR0FDbEJ2dUMsR0FBMEI2dUMsS0FBMkJMLEtBQU9JLEtBQzlEZixFQUFTZSxFQUFtQkosRUFBS0QsRUFBUUMsU0FFdENmLEVBQUUsQ0FBRTd5QyxPQUFRcXpDLEVBQU1nQixPQUFPLEVBQU1DLE9BQVFsdkMsR0FBMEI2dUMsR0FBeUJOLEdBR25HLE9BQU9BLEksZ0JDeEZULElBQUk5cUQsRUFBU25CLEVBQVEsR0FDakJrSSxFQUEyQmxJLEVBQVEsSUFBbURpSixFQUN0RjJILEVBQThCNVEsRUFBUSxJQUN0Q3VyRCxFQUFXdnJELEVBQVEsSUFDbkI4WSxFQUFZOVksRUFBUSxJQUNwQjZzRCxFQUE0QjdzRCxFQUFRLElBQ3BDOHNELEVBQVc5c0QsRUFBUSxJQWdCdkJqQyxFQUFPRCxRQUFVLFNBQVU0VyxFQUFTNkMsR0FDbEMsSUFHWWUsRUFBUS9ZLEVBQUt3dEQsRUFBZ0JDLEVBQWdCbmtELEVBSHJEb2tELEVBQVN2NEMsRUFBUTRELE9BQ2pCNDBDLEVBQVN4NEMsRUFBUXZULE9BQ2pCMmMsRUFBU3BKLEVBQVF5NEMsS0FTckIsR0FORTcwQyxFQURFNDBDLEVBQ08vckQsRUFDQTJjLEVBQ0EzYyxFQUFPOHJELElBQVduMEMsRUFBVW0wQyxFQUFRLEtBRW5DOXJELEVBQU84ckQsSUFBVyxJQUFJcnRELFVBRXRCLElBQUtMLEtBQU9nWSxFQUFRLENBUTlCLEdBUEF5MUMsRUFBaUJ6MUMsRUFBT2hZLEdBR3RCd3RELEVBRkVyNEMsRUFBUTRJLGFBQ1Z6VSxFQUFhWCxFQUF5Qm9RLEVBQVEvWSxLQUNmc0osRUFBVzVKLE1BQ3BCcVosRUFBTy9ZLElBQ3RCdXRELEVBQVNJLEVBQVMzdEQsRUFBTTB0RCxHQUFVbnZDLEVBQVMsSUFBTSxLQUFPdmUsRUFBS21WLEVBQVFrNEMsY0FFNUN6akQsSUFBbkI0akQsRUFBOEIsQ0FDM0MsVUFBV0MsVUFBMEJELEVBQWdCLFNBQ3JERixFQUEwQkcsRUFBZ0JELElBR3hDcjRDLEVBQVEwMUMsTUFBUzJDLEdBQWtCQSxFQUFlM0MsT0FDcER4NUMsRUFBNEJvOEMsRUFBZ0IsUUFBUSxHQUd0RHpCLEVBQVNqekMsRUFBUS9ZLEVBQUt5dEQsRUFBZ0J0NEMsTSw2QkNsRDFDLElBQUkwNEMsRUFBNkIsR0FBR3gxQyxxQkFDaEMxUCxFQUEyQnhKLE9BQU93Six5QkFHbENtbEQsRUFBY25sRCxJQUE2QmtsRCxFQUEyQmp2RCxLQUFLLENBQUVtdkQsRUFBRyxHQUFLLEdBSXpGeHZELEVBQVFtTCxFQUFJb2tELEVBQWMsU0FBOEIvcUMsR0FDdEQsSUFBSXpaLEVBQWFYLEVBQXlCeEUsS0FBTTRlLEdBQ2hELFFBQVN6WixHQUFjQSxFQUFXakssWUFDaEN3dUQsRyxnQkNaSixJQUFJbitDLEVBQU1qUCxFQUFRLEdBQ2R1dEQsRUFBVXZ0RCxFQUFRLElBQ2xCd3RELEVBQWlDeHRELEVBQVEsSUFDekMrSSxFQUF1Qi9JLEVBQVEsSUFFbkNqQyxFQUFPRCxRQUFVLFNBQVV3YSxFQUFRZixHQUlqQyxJQUhBLElBQUl2VixFQUFPdXJELEVBQVFoMkMsR0FDZjVZLEVBQWlCb0ssRUFBcUJFLEVBQ3RDZixFQUEyQnNsRCxFQUErQnZrRCxFQUNyRGpMLEVBQUksRUFBR0EsRUFBSWdFLEVBQUtPLE9BQVF2RSxJQUFLLENBQ3BDLElBQUl1QixFQUFNeUMsRUFBS2hFLEdBQ1ZpUixFQUFJcUosRUFBUS9ZLElBQU1aLEVBQWUyWixFQUFRL1ksRUFBSzJJLEVBQXlCcVAsRUFBUWhZLE8sZ0JDWHhGLElBQUkyckQsRUFBYWxyRCxFQUFRLElBQ3JCeXRELEVBQTRCenRELEVBQVEsSUFDcEMwdEQsRUFBOEIxdEQsRUFBUSxJQUN0QzBQLEVBQVcxUCxFQUFRLElBR3ZCakMsRUFBT0QsUUFBVW90RCxFQUFXLFVBQVcsWUFBYyxTQUFpQm5xRCxHQUNwRSxJQUFJaUIsRUFBT3lyRCxFQUEwQnhrRCxFQUFFeUcsRUFBUzNPLElBQzVDa0gsRUFBd0J5bEQsRUFBNEJ6a0QsRUFDeEQsT0FBT2hCLEVBQXdCakcsRUFBSzBHLE9BQU9ULEVBQXNCbEgsSUFBT2lCLEksZ0JDVDFFLElBQUlzb0QsRUFBcUJ0cUQsRUFBUSxJQUc3QjRaLEVBRmM1WixFQUFRLElBRUcwSSxPQUFPLFNBQVUsYUFJOUM1SyxFQUFRbUwsRUFBSXZLLE9BQU9zSixxQkFBdUIsU0FBNkI2SCxHQUNyRSxPQUFPeTZDLEVBQW1CejZDLEVBQUcrSixLLGNDUi9COWIsRUFBUW1MLEVBQUl2SyxPQUFPdUosdUIsZ0JDQW5CLElBQUl1SCxFQUFReFAsRUFBUSxJQUVoQjJ0RCxFQUFjLGtCQUVkYixFQUFXLFNBQVVjLEVBQVNDLEdBQ2hDLElBQUk1dUQsRUFBUXVHLEVBQUtzb0QsRUFBVUYsSUFDM0IsT0FBTzN1RCxHQUFTOHVELEdBQ1o5dUQsR0FBUyt1RCxJQUNXLG1CQUFiSCxFQUEwQnIrQyxFQUFNcStDLEtBQ3JDQSxJQUdKQyxFQUFZaEIsRUFBU2dCLFVBQVksU0FBVWxJLEdBQzdDLE9BQU8xMUMsT0FBTzAxQyxHQUFRL2dELFFBQVE4b0QsRUFBYSxLQUFLN2tDLGVBRzlDdGpCLEVBQU9zbkQsRUFBU3RuRCxLQUFPLEdBQ3ZCd29ELEVBQVNsQixFQUFTa0IsT0FBUyxJQUMzQkQsRUFBV2pCLEVBQVNpQixTQUFXLElBRW5DaHdELEVBQU9ELFFBQVVndkQsRyw2QkNuQmpCLElBQUl2dkMsRUFBb0J2ZCxFQUFRLElBQStCdWQsa0JBQzNEamUsRUFBU1UsRUFBUSxJQUNqQmdKLEVBQTJCaEosRUFBUSxJQUNuQ3NyRCxFQUFpQnRyRCxFQUFRLElBQ3pCMnBELEVBQVkzcEQsRUFBUSxJQUVwQnlyRCxFQUFhLFdBQWMsT0FBTy9uRCxNQUV0QzNGLEVBQU9ELFFBQVUsU0FBVTh0RCxFQUFxQkQsRUFBTW5oRCxHQUNwRCxJQUFJdUcsRUFBZ0I0NkMsRUFBTyxZQUkzQixPQUhBQyxFQUFvQmhzRCxVQUFZTixFQUFPaWUsRUFBbUIsQ0FBRS9TLEtBQU14QixFQUF5QixFQUFHd0IsS0FDOUY4Z0QsRUFBZU0sRUFBcUI3NkMsR0FBZSxHQUFPLEdBQzFENDRDLEVBQVU1NEMsR0FBaUIwNkMsRUFDcEJHLEksZ0JDZFQsSUFBSXI3QyxFQUF5QnZRLEVBQVEsSUFJckNqQyxFQUFPRCxRQUFVLFNBQVU2ZCxHQUN6QixPQUFPamQsT0FBTzZSLEVBQXVCb0wsTSxnQkNMdkMsSUFBSW5NLEVBQVF4UCxFQUFRLElBRXBCakMsRUFBT0QsU0FBVzBSLEdBQU0sV0FDdEIsU0FBUzZMLEtBRVQsT0FEQUEsRUFBRXpiLFVBQVVnQixZQUFjLEtBQ25CbEMsT0FBT3lKLGVBQWUsSUFBSWtULEtBQVNBLEVBQUV6YixjLGdCQ0w5QyxJQUFJOFAsRUFBVzFQLEVBQVEsSUFDbkJpdUQsRUFBcUJqdUQsRUFBUSxLQU1qQ2pDLEVBQU9ELFFBQVVZLE9BQU8yc0QsaUJBQW1CLGFBQWUsR0FBSyxXQUM3RCxJQUVJL2xELEVBRkE0b0QsR0FBaUIsRUFDakI5b0QsRUFBTyxHQUVYLEtBQ0VFLEVBQVM1RyxPQUFPd0oseUJBQXlCeEosT0FBT2tCLFVBQVcsYUFBYW1FLEtBQ2pFNUYsS0FBS2lILEVBQU0sSUFDbEI4b0QsRUFBaUI5b0QsYUFBZ0J0RCxNQUNqQyxNQUFPcUIsSUFDVCxPQUFPLFNBQXdCME0sRUFBRzg4QyxHQUtoQyxPQUpBajlDLEVBQVNHLEdBQ1RvK0MsRUFBbUJ0QixHQUNmdUIsRUFBZ0I1b0QsRUFBT25ILEtBQUswUixFQUFHODhDLEdBQzlCOThDLEVBQUVoUCxVQUFZOHJELEVBQ1o5OEMsR0Fkb0QsUUFnQnpEMUcsSSxnQkN2Qk4sSUFBSThHLEVBQVdqUSxFQUFRLElBRXZCakMsRUFBT0QsUUFBVSxTQUFVaUQsR0FDekIsSUFBS2tQLEVBQVNsUCxJQUFjLE9BQVBBLEVBQ25CLE1BQU1pUCxVQUFVLGFBQWVFLE9BQU9uUCxHQUFNLG1CQUM1QyxPQUFPQSxJLGtEQ0xYaEQsRUFBT0QsUUFBVWdFLE1BQU1ELFNBQVcsU0FBVWdkLEdBQzFDLE1BQThDLGtCQUF2Q25nQixPQUFPa0IsVUFBVXFELFNBQVM5RSxLQUFLMGdCLEssa0NDQXhDOWdCLEVBQU9ELFFBQVUsQ0FBQyxRQUFVLDRCOzs7Ozs7OztHQ1F3QyxJQUFJbUwsRUFBRWtILEVBQUU2QixFQUFFNlAsRUFBRTVqQixFQUNoRixHQURhUyxPQUFPQyxlQUFlYixFQUFRLGFBQWEsQ0FBQ21CLE9BQU0sSUFDNUQsb0JBQXFCaUMsUUFBUSxtQkFBb0IyaUQsZUFBZSxDQUFDLElBQUkvakQsRUFBRSxLQUFLZ2dCLEVBQUUsS0FBSzVnQixFQUFFLFdBQVcsR0FBRyxPQUFPWSxFQUFFLElBQUksSUFBSXNDLEVBQUV0RSxFQUFROHRDLGVBQWU5ckMsR0FBRSxFQUFHc0MsR0FBR3RDLEVBQUUsS0FBSyxNQUFNdUMsR0FBRyxNQUFNaTRCLFdBQVdwN0IsRUFBRSxHQUFHbUQsSUFBSzBkLEVBQUVwZCxLQUFLdzZCLE1BQU1yL0IsRUFBUTh0QyxhQUFhLFdBQVcsT0FBT2pwQyxLQUFLdzZCLE1BQU1wZCxHQUFHOVcsRUFBRSxTQUFTN0csR0FBRyxPQUFPdEMsRUFBRXc2QixXQUFXcnhCLEVBQUUsRUFBRTdHLElBQUl0QyxFQUFFc0MsRUFBRWs0QixXQUFXcDdCLEVBQUUsS0FBS2lSLEVBQUUsU0FBUy9OLEVBQUVDLEdBQUd5ZCxFQUFFd2EsV0FBV2w0QixFQUFFQyxJQUFJMlAsRUFBRSxXQUFXd29CLGFBQWExYSxJQUFJK0IsRUFBRSxXQUFXLE9BQU0sR0FBSTVqQixFQUFFSCxFQUFRZ21ELHdCQUF3QixpQkFBaUIsQ0FBQyxJQUFJN2pDLEVBQUUvZSxPQUFPNmlELFlBQVkxd0MsRUFBRW5TLE9BQU95QixLQUNuZjJRLEVBQUVwUyxPQUFPbzVCLFdBQVdwYSxFQUFFaGYsT0FBT3M1QixhQUFhLEdBQUcsb0JBQXFCbDNCLFFBQVEsQ0FBQyxJQUFJNmMsRUFBRWpmLE9BQU84aUQscUJBQXFCLG1CQUFvQjlpRCxPQUFPK2lELHVCQUF1QjNnRCxRQUFRSCxNQUFNLDJJQUEySSxtQkFBb0JnZCxHQUFHN2MsUUFBUUgsTUFBTSwwSUFBMEksR0FBRyxpQkFDbmU4YyxHQUFHLG1CQUFvQkEsRUFBRWtkLElBQUlyL0IsRUFBUTh0QyxhQUFhLFdBQVcsT0FBTzNyQixFQUFFa2QsV0FBVyxDQUFDLElBQUkvYyxFQUFFL00sRUFBRThwQixNQUFNci9CLEVBQVE4dEMsYUFBYSxXQUFXLE9BQU92NEIsRUFBRThwQixNQUFNL2MsR0FBRyxJQUFJRSxHQUFFLEVBQUdDLEVBQUUsS0FBS0ssR0FBRyxFQUFFdkYsRUFBRSxFQUFFMEYsRUFBRSxFQUFFYyxFQUFFLFdBQVcsT0FBTy9qQixFQUFROHRDLGdCQUFnQjdxQixHQUFHOWlCLEVBQUUsYUFBYUgsRUFBUWdtRCx3QkFBd0IsU0FBUzFoRCxHQUFHLEVBQUVBLEdBQUcsSUFBSUEsRUFBRWtCLFFBQVFILE1BQU0sb0hBQW9Ia1ksRUFBRSxFQUFFalosRUFBRXBCLEtBQUswYSxNQUFNLElBQUl0WixHQUFHLEdBQUcsSUFBSTRlLEVBQUUsSUFBSTZpQyxlQUFlMWlDLEVBQUVILEVBQUVrakMsTUFBTWxqQyxFQUFFbWpDLE1BQU1DLFVBQ25mLFdBQVcsR0FBRyxPQUFPN2pDLEVBQUUsQ0FBQyxJQUFJbmUsRUFBRXRFLEVBQVE4dEMsZUFBZTdxQixFQUFFM2UsRUFBRWlaLEVBQUUsSUFBSWtGLEdBQUUsRUFBR25lLEdBQUcrZSxFQUFFa2pDLFlBQVksT0FBTy9qQyxHQUFFLEVBQUdDLEVBQUUsTUFBTSxNQUFNbGUsR0FBRyxNQUFNOGUsRUFBRWtqQyxZQUFZLE1BQU1oaUQsUUFBU2llLEdBQUUsR0FBSXJYLEVBQUUsU0FBUzdHLEdBQUdtZSxFQUFFbmUsRUFBRWtlLElBQUlBLEdBQUUsRUFBR2EsRUFBRWtqQyxZQUFZLFFBQVFsMEMsRUFBRSxTQUFTL04sRUFBRUMsR0FBR3VlLEVBQUV0TixHQUFFLFdBQVdsUixFQUFFdEUsRUFBUTh0QyxrQkFBaUJ2cEMsSUFBSTJQLEVBQUUsV0FBV2tPLEVBQUVVLEdBQUdBLEdBQUcsR0FBRyxTQUFTUyxFQUFFamYsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRStELEVBQUVHLE9BQU9ILEVBQUV3SSxLQUFLdkksR0FBR0QsRUFBRSxPQUFPLENBQUMsSUFBSTlELEVBQUUwQyxLQUFLMGEsT0FBT3JkLEVBQUUsR0FBRyxHQUFHdUQsRUFBRVEsRUFBRTlELEdBQUcsVUFBRyxJQUFTc0QsR0FBRyxFQUFFMmYsRUFBRTNmLEVBQUVTLElBQTBCLE1BQU1ELEVBQTdCQSxFQUFFOUQsR0FBRytELEVBQUVELEVBQUUvRCxHQUFHdUQsRUFBRXZELEVBQUVDLEdBQWdCLFNBQVNrakIsRUFBRXBmLEdBQVUsWUFBTyxLQUFkQSxFQUFFQSxFQUFFLElBQXFCLEtBQUtBLEVBQzFkLFNBQVN3ZixFQUFFeGYsR0FBRyxJQUFJQyxFQUFFRCxFQUFFLEdBQUcsUUFBRyxJQUFTQyxFQUFFLENBQUMsSUFBSWhFLEVBQUUrRCxFQUFFNmYsTUFBTSxHQUFHNWpCLElBQUlnRSxFQUFFLENBQUNELEVBQUUsR0FBRy9ELEVBQUUrRCxFQUFFLElBQUksSUFBSTlELEVBQUUsRUFBRXNELEVBQUVRLEVBQUVHLE9BQU9qRSxFQUFFc0QsR0FBRyxDQUFDLElBQUl4RCxFQUFFLEdBQUdFLEVBQUUsR0FBRyxFQUFFbUIsRUFBRTJDLEVBQUVoRSxHQUFHNGhCLEVBQUU1aEIsRUFBRSxFQUFFVSxFQUFFc0QsRUFBRTRkLEdBQUcsUUFBRyxJQUFTdmdCLEdBQUcsRUFBRThoQixFQUFFOWhCLEVBQUVwQixRQUFHLElBQVNTLEdBQUcsRUFBRXlpQixFQUFFemlCLEVBQUVXLElBQUkyQyxFQUFFOUQsR0FBR1EsRUFBRXNELEVBQUU0ZCxHQUFHM2hCLEVBQUVDLEVBQUUwaEIsSUFBSTVkLEVBQUU5RCxHQUFHbUIsRUFBRTJDLEVBQUVoRSxHQUFHQyxFQUFFQyxFQUFFRixPQUFRLFdBQUcsSUFBU1UsR0FBRyxFQUFFeWlCLEVBQUV6aUIsRUFBRVQsSUFBMEIsTUFBTStELEVBQTdCQSxFQUFFOUQsR0FBR1EsRUFBRXNELEVBQUU0ZCxHQUFHM2hCLEVBQUVDLEVBQUUwaEIsSUFBZ0IsT0FBTzNkLEVBQUUsT0FBTyxLQUFLLFNBQVNrZixFQUFFbmYsRUFBRUMsR0FBRyxJQUFJaEUsRUFBRStELEVBQUVraUQsVUFBVWppRCxFQUFFaWlELFVBQVUsT0FBTyxJQUFJam1ELEVBQUVBLEVBQUUrRCxFQUFFa1gsR0FBR2pYLEVBQUVpWCxHQUFHLElBQUl3SixFQUFFLEdBQUdqVCxFQUFFLEdBQUdDLEVBQUUsRUFBRWlTLEVBQUUsS0FBS0MsRUFBRSxFQUFFSyxHQUFFLEVBQUdFLEdBQUUsRUFBR0MsR0FBRSxFQUNqYSxTQUFTRixFQUFFbGdCLEdBQUcsSUFBSSxJQUFJQyxFQUFFbWYsRUFBRTNSLEdBQUcsT0FBT3hOLEdBQUcsQ0FBQyxHQUFHLE9BQU9BLEVBQUVvSixTQUFTbVcsRUFBRS9SLE9BQVEsTUFBR3hOLEVBQUVraUQsV0FBV25pRCxHQUFnRCxNQUE5Q3dmLEVBQUUvUixHQUFHeE4sRUFBRWlpRCxVQUFVamlELEVBQUU4ckMsZUFBZTlzQixFQUFFeUIsRUFBRXpnQixHQUFjQSxFQUFFbWYsRUFBRTNSLElBQUksU0FBUzhTLEVBQUV2Z0IsR0FBYSxHQUFWb2dCLEdBQUUsRUFBR0YsRUFBRWxnQixJQUFPbWdCLEVBQUUsR0FBRyxPQUFPZixFQUFFc0IsR0FBR1AsR0FBRSxFQUFHdFosRUFBRTRaLE9BQU8sQ0FBQyxJQUFJeGdCLEVBQUVtZixFQUFFM1IsR0FBRyxPQUFPeE4sR0FBRzhOLEVBQUV3UyxFQUFFdGdCLEVBQUVraUQsVUFBVW5pRCxJQUN0UCxTQUFTeWdCLEVBQUV6Z0IsRUFBRUMsR0FBR2tnQixHQUFFLEVBQUdDLElBQUlBLEdBQUUsRUFBR3hRLEtBQUtxUSxHQUFFLEVBQUcsSUFBSWhrQixFQUFFMmpCLEVBQUUsSUFBUyxJQUFMTSxFQUFFamdCLEdBQU8wZixFQUFFUCxFQUFFc0IsR0FBRyxPQUFPZixNQUFNQSxFQUFFb3NCLGVBQWU5ckMsSUFBSUQsSUFBSXlmLE1BQU0sQ0FBQyxJQUFJdmpCLEVBQUV5akIsRUFBRXRXLFNBQVMsR0FBRyxPQUFPbk4sRUFBRSxDQUFDeWpCLEVBQUV0VyxTQUFTLEtBQUt1VyxFQUFFRCxFQUFFeWlDLGNBQWMsSUFBSTVpRCxFQUFFdEQsRUFBRXlqQixFQUFFb3NCLGdCQUFnQjlyQyxHQUFHQSxFQUFFdkUsRUFBUTh0QyxlQUFlLG1CQUFvQmhxQyxFQUFFbWdCLEVBQUV0VyxTQUFTN0osRUFBRW1nQixJQUFJUCxFQUFFc0IsSUFBSWxCLEVBQUVrQixHQUFHUixFQUFFamdCLFFBQVF1ZixFQUFFa0IsR0FBR2YsRUFBRVAsRUFBRXNCLEdBQUcsR0FBRyxPQUFPZixFQUFFLElBQUkzakIsR0FBRSxNQUFPLENBQUMsSUFBSXFCLEVBQUUraEIsRUFBRTNSLEdBQUcsT0FBT3BRLEdBQUcwUSxFQUFFd1MsRUFBRWxqQixFQUFFOGtELFVBQVVsaUQsR0FBR2pFLEdBQUUsRUFBRyxPQUFPQSxFQUE3VSxRQUF1VjJqQixFQUFFLEtBQUtDLEVBQUUzakIsRUFBRWdrQixHQUFFLEdBQ3BaLFNBQVNVLEVBQUUzZ0IsR0FBRyxPQUFPQSxHQUFHLEtBQUssRUFBRSxPQUFPLEVBQUUsS0FBSyxFQUFFLE9BQU8sSUFBSSxLQUFLLEVBQUUsT0FBTyxXQUFXLEtBQUssRUFBRSxPQUFPLElBQUksUUFBUSxPQUFPLEtBQUssSUFBSTRnQixFQUFFL2tCLEVBQUVILEVBQVFrdUMsMkJBQTJCLEVBQUVsdUMsRUFBUXkyQiw4QkFBOEIsRUFBRXoyQixFQUFRNDFCLHdCQUF3QixFQUFFNTFCLEVBQVF3dUMsc0JBQXNCLEVBQUV4dUMsRUFBUXN1QyxxQkFBcUIsRUFBRXR1QyxFQUFRazFCLHlCQUF5QixTQUFTNXdCLEVBQUVDLEdBQUcsT0FBT0QsR0FBRyxLQUFLLEVBQUUsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLE1BQU0sUUFBUUEsRUFBRSxFQUFFLElBQUkvRCxFQUFFMmpCLEVBQUVBLEVBQUU1ZixFQUFFLElBQUksT0FBT0MsSUFBWCxRQUF1QjJmLEVBQUUzakIsSUFDbGNQLEVBQVE4bUQsY0FBYyxTQUFTeGlELEdBQUcsT0FBTzRmLEdBQUcsS0FBSyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSTNmLEVBQUUsRUFBRSxNQUFNLFFBQVFBLEVBQUUyZixFQUFFLElBQUkzakIsRUFBRTJqQixFQUFFQSxFQUFFM2YsRUFBRSxJQUFJLE9BQU9ELElBQVgsUUFBdUI0ZixFQUFFM2pCLElBQ2hJUCxFQUFRMjFCLDBCQUEwQixTQUFTcnhCLEVBQUVDLEVBQUVoRSxHQUFHLElBQUlDLEVBQUVSLEVBQVE4dEMsZUFBZSxHQUFHLGlCQUFrQnZ0QyxHQUFHLE9BQU9BLEVBQUUsQ0FBQyxJQUFJdUQsRUFBRXZELEVBQUV5bUQsTUFBTWxqRCxFQUFFLGlCQUFrQkEsR0FBRyxFQUFFQSxFQUFFdEQsRUFBRXNELEVBQUV0RCxFQUFFRCxFQUFFLGlCQUFrQkEsRUFBRWkvQyxRQUFRai9DLEVBQUVpL0MsUUFBUXY2QixFQUFFM2dCLFFBQVEvRCxFQUFFMGtCLEVBQUUzZ0IsR0FBR1IsRUFBRXRELEVBQXlNLE9BQWpNOEQsRUFBRSxDQUFDa1gsR0FBR3hKLElBQUlyRSxTQUFTcEosRUFBRW1pRCxjQUFjcGlELEVBQUVtaUQsVUFBVTNpRCxFQUFFdXNDLGVBQXZEOXZDLEVBQUV1RCxFQUFFdkQsRUFBb0VpbUQsV0FBVyxHQUFHMWlELEVBQUV0RCxHQUFHOEQsRUFBRWtpRCxVQUFVMWlELEVBQUV5ZixFQUFFeFIsRUFBRXpOLEdBQUcsT0FBT29mLEVBQUVzQixJQUFJMWdCLElBQUlvZixFQUFFM1IsS0FBSzJTLEVBQUV4USxJQUFJd1EsR0FBRSxFQUFHclMsRUFBRXdTLEVBQUUvZ0IsRUFBRXRELE1BQU04RCxFQUFFa2lELFVBQVVqbUQsRUFBRWdqQixFQUFFeUIsRUFBRTFnQixHQUFHbWdCLEdBQUdGLElBQUlFLEdBQUUsRUFBR3RaLEVBQUU0WixLQUFZemdCLEdBQUd0RSxFQUFRMHRDLHdCQUF3QixTQUFTcHBDLEdBQUdBLEVBQUVxSixTQUFTLE1BQ3JlM04sRUFBUWluRCxzQkFBc0IsU0FBUzNpRCxHQUFHLElBQUlDLEVBQUUyZixFQUFFLE9BQU8sV0FBVyxJQUFJM2pCLEVBQUUyakIsRUFBRUEsRUFBRTNmLEVBQUUsSUFBSSxPQUFPRCxFQUFFc0gsTUFBTWhHLEtBQUsyRCxXQUF4QixRQUEyQzJhLEVBQUUzakIsS0FBS1AsRUFBUWd1QyxpQ0FBaUMsV0FBVyxPQUFPOXBCLEdBQUdsa0IsRUFBUTJ1QyxxQkFBcUIsV0FBVyxJQUFJcnFDLEVBQUV0RSxFQUFROHRDLGVBQWV0cEIsRUFBRWxnQixHQUFHLElBQUlDLEVBQUVtZixFQUFFc0IsR0FBRyxPQUFPemdCLElBQUkwZixHQUFHLE9BQU9BLEdBQUcsT0FBTzFmLEdBQUcsT0FBT0EsRUFBRW9KLFVBQVVwSixFQUFFa2lELFdBQVduaUQsR0FBR0MsRUFBRThyQyxlQUFlcHNCLEVBQUVvc0IsZ0JBQWdCdHNCLEtBQUsvakIsRUFBUTR0QyxzQkFBc0Ixb0IsRUFBRWxsQixFQUFRNG1ELDJCQUEyQixXQUFXbmlDLEdBQUdGLElBQUlFLEdBQUUsRUFBR3RaLEVBQUU0WixLQUM5ZC9rQixFQUFRK21ELHdCQUF3QixhQUFhL21ELEVBQVE2bUQsOEJBQThCLFdBQVcsT0FBT25qQyxFQUFFc0IsSUFBSWhsQixFQUFRMm1ELG1CQUFtQixNLDZHQ3BCM0gwSixHLE1BRVhoOEMsSUFBTUMsY0FBYyxPQ0VwQixJQUFJZzhDLEVBSkosU0FBMEIzaUQsR0FDeEJBLEtDRUU0aUQsRUFBZ0IsQ0FDbEJDLE9BQVEsY0FHVixTQUFTQyxJQUNQLElBQUlILEVER0dBLEVDRkhJLEVBQVEsS0FDUjFXLEVBQU8sS0FDWCxNQUFPLENBQ0xsMEMsTUFBTyxXQUNMNHFELEVBQVEsS0FDUjFXLEVBQU8sTUFFVHdXLE9BQVEsV0FDTkYsR0FBTSxXQUdKLElBRkEsSUFBSUssRUFBV0QsRUFFUkMsR0FDTEEsRUFBU2hqRCxXQUNUZ2pELEVBQVdBLEVBQVNqa0QsU0FJMUIzTCxJQUFLLFdBSUgsSUFIQSxJQUFJNnZELEVBQVksR0FDWkQsRUFBV0QsRUFFUkMsR0FDTEMsRUFBVTlqRCxLQUFLNmpELEdBQ2ZBLEVBQVdBLEVBQVNqa0QsS0FHdEIsT0FBT2trRCxHQUVUQyxVQUFXLFNBQW1CbGpELEdBQzVCLElBQUltakQsR0FBZSxFQUNmSCxFQUFXM1csRUFBTyxDQUNwQnJzQyxTQUFVQSxFQUNWakIsS0FBTSxLQUNOcWtELEtBQU0vVyxHQVNSLE9BTkkyVyxFQUFTSSxLQUNYSixFQUFTSSxLQUFLcmtELEtBQU9pa0QsRUFFckJELEVBQVFDLEVBR0gsV0FDQUcsR0FBMEIsT0FBVkosSUFDckJJLEdBQWUsRUFFWEgsRUFBU2prRCxLQUNYaWtELEVBQVNqa0QsS0FBS3FrRCxLQUFPSixFQUFTSSxLQUU5Qi9XLEVBQU8yVyxFQUFTSSxLQUdkSixFQUFTSSxLQUNYSixFQUFTSSxLQUFLcmtELEtBQU9pa0QsRUFBU2prRCxLQUU5QmdrRCxFQUFRQyxFQUFTamtELFNBTzNCLElBQUlza0QsRUFFSixXQUNFLFNBQVNBLEVBQWFuMkMsRUFBT28yQyxHQUMzQnJyRCxLQUFLaVYsTUFBUUEsRUFDYmpWLEtBQUtxckQsVUFBWUEsRUFDakJyckQsS0FBS3NyRCxZQUFjLEtBQ25CdHJELEtBQUtnckQsVUFBWUwsRUFDakIzcUQsS0FBS3VyRCxvQkFBc0J2ckQsS0FBS3VyRCxvQkFBb0J6dkQsS0FBS2tFLE1BRzNELElBQUlxUCxFQUFTKzdDLEVBQWFsdkQsVUFxQzFCLE9BbkNBbVQsRUFBT204QyxhQUFlLFNBQXNCVCxHQUUxQyxPQURBL3FELEtBQUt5ckQsZUFDRXpyRCxLQUFLZ3JELFVBQVVDLFVBQVVGLElBR2xDMTdDLEVBQU9xOEMsaUJBQW1CLFdBQ3hCMXJELEtBQUtnckQsVUFBVUosVUFHakJ2N0MsRUFBT2s4QyxvQkFBc0IsV0FDdkJ2ckQsS0FBSzJyRCxlQUNQM3JELEtBQUsyckQsaUJBSVR0OEMsRUFBTzY3QyxhQUFlLFdBQ3BCLE9BQU9VLFFBQVE1ckQsS0FBS3NyRCxjQUd0Qmo4QyxFQUFPbzhDLGFBQWUsV0FDZnpyRCxLQUFLc3JELGNBQ1J0ckQsS0FBS3NyRCxZQUFjdHJELEtBQUtxckQsVUFBWXJyRCxLQUFLcXJELFVBQVVHLGFBQWF4ckQsS0FBS3VyRCxxQkFBdUJ2ckQsS0FBS2lWLE1BQU1nMkMsVUFBVWpyRCxLQUFLdXJELHFCQUN0SHZyRCxLQUFLZ3JELFVBQVlILE1BSXJCeDdDLEVBQU93OEMsZUFBaUIsV0FDbEI3ckQsS0FBS3NyRCxjQUNQdHJELEtBQUtzckQsY0FDTHRyRCxLQUFLc3JELFlBQWMsS0FDbkJ0ckQsS0FBS2dyRCxVQUFVOXFELFFBQ2ZGLEtBQUtnckQsVUFBWUwsSUFJZFMsRUE5Q1QsR0N2QmVwOEMsTUE5Q2YsU0FBa0JPLEdBQ2hCLElBQUkwRixFQUFRMUYsRUFBSzBGLE1BQ2J2RSxFQUFVbkIsRUFBS21CLFFBQ2Y3SCxFQUFXMEcsRUFBSzFHLFNBQ2hCaWpELEVBQWVucUMsbUJBQVEsV0FDekIsSUFBSW9xQyxFQUFlLElBQUlYLEVBQWFuMkMsR0FFcEMsT0FEQTgyQyxFQUFhSixjQUFnQkksRUFBYUwsaUJBQ25DLENBQ0x6MkMsTUFBT0EsRUFDUDgyQyxhQUFjQSxLQUVmLENBQUM5MkMsSUFDQSsyQyxFQUFnQnJxQyxtQkFBUSxXQUMxQixPQUFPMU0sRUFBTWczQyxhQUNaLENBQUNoM0MsSUFDSnVNLHFCQUFVLFdBQ1IsSUFBSXVxQyxFQUFlRCxFQUFhQyxhQU9oQyxPQU5BQSxFQUFhTixlQUVUTyxJQUFrQi8yQyxFQUFNZzNDLFlBQzFCRixFQUFhTCxtQkFHUixXQUNMSyxFQUFhRixpQkFDYkUsRUFBYUosY0FBZ0IsUUFFOUIsQ0FBQ0csRUFBY0UsSUFDbEIsSUFBSUUsRUFBVXg3QyxHQUFXKzVDLEVBQ3pCLE9BQU9oOEMsSUFBTTRHLGNBQWM2MkMsRUFBUWw5QyxTQUFVLENBQzNDelQsTUFBT3V3RCxHQUNOampELElDcENVLFNBQVNzakQsSUFldEIsT0FkQUEsRUFBV254RCxPQUFPcVosUUFBVSxTQUFVTyxHQUNwQyxJQUFLLElBQUl0YSxFQUFJLEVBQUdBLEVBQUlxSixVQUFVOUUsT0FBUXZFLElBQUssQ0FDekMsSUFBSXVaLEVBQVNsUSxVQUFVckosR0FFdkIsSUFBSyxJQUFJdUIsS0FBT2dZLEVBQ1Y3WSxPQUFPa0IsVUFBVUMsZUFBZTFCLEtBQUtvWixFQUFRaFksS0FDL0MrWSxFQUFPL1ksR0FBT2dZLEVBQU9oWSxJQUszQixPQUFPK1ksSUFHTzVPLE1BQU1oRyxLQUFNMkQsV0NmZixTQUFTeW9ELEVBQThCdjRDLEVBQVF3NEMsR0FDNUQsR0FBYyxNQUFWeDRDLEVBQWdCLE1BQU8sR0FDM0IsSUFFSWhZLEVBQUt2QixFQUZMc2EsRUFBUyxHQUNUMDNDLEVBQWF0eEQsT0FBT3NELEtBQUt1VixHQUc3QixJQUFLdlosRUFBSSxFQUFHQSxFQUFJZ3lELEVBQVd6dEQsT0FBUXZFLElBQ2pDdUIsRUFBTXl3RCxFQUFXaHlELEdBQ2IreEQsRUFBUy9xRCxRQUFRekYsSUFBUSxJQUM3QitZLEVBQU8vWSxHQUFPZ1ksRUFBT2hZLElBR3ZCLE9BQU8rWSxFLG9CQ0hFMjNDLEcsTUFBOEMsb0JBQVgvdUQsYUFBcUQsSUFBcEJBLE9BQU84WCxlQUFxRSxJQUFsQzlYLE9BQU84WCxTQUFTRCxjQUFnQ3FNLGtCQUFrQkYsYSxZQ0R2TGdyQyxFQUFlLFdBQ2pCLE9BQU9sdkQsS0FBS3dZLFNBQVN2VyxTQUFTLElBQUk2MEIsVUFBVSxHQUFHcHpCLE1BQU0sSUFBSWtCLEtBQUssTUFHNUR1cUQsRUFBYyxDQUNoQkMsS0FBTSxlQUFpQkYsSUFDdkJHLFFBQVMsa0JBQW9CSCxJQUM3QkkscUJBQXNCLFdBQ3BCLE1BQU8sK0JBQWlDSixNQVE1QyxTQUFTSyxFQUFjL21ELEdBQ3JCLEdBQW1CLGlCQUFSQSxHQUE0QixPQUFSQSxFQUFjLE9BQU8sRUFHcEQsSUFGQSxJQUFJbWpELEVBQVFuakQsRUFFNEIsT0FBakM5SyxPQUFPeUosZUFBZXdrRCxJQUMzQkEsRUFBUWp1RCxPQUFPeUosZUFBZXdrRCxHQUdoQyxPQUFPanVELE9BQU95SixlQUFlcUIsS0FBU21qRCxFQ2JqQyxTQUFTNkQsSUFPZCxPQU5tQnhyQyxxQkFBV21wQyxHQ1Z6QixTQUFTc0MsRUFBZ0JyOEMsUUFDZCxJQUFaQSxJQUNGQSxFQUFVKzVDLEdBR1osSUFBSXFDLEVBQWtCcDhDLElBQVkrNUMsRUFBb0J1QyxFQUF5QixXQUM3RSxPQUFPMXJDLHFCQUFXNVEsSUFFcEIsT0FBTyxXQUlMLE9BSHVCbzhDLElBQ003M0MsT0FxQjFCLElBQUlnNEMsRUFFWEYsSUNsQ08sU0FBU0csRUFBbUJ4OEMsUUFDakIsSUFBWkEsSUFDRkEsRUFBVSs1QyxHQUdaLElBQUl3QyxFQUFXdjhDLElBQVkrNUMsRUFBb0IwQyxFQUFrQkosRUFBZ0JyOEMsR0FDakYsT0FBTyxXQUVMLE9BRFl1OEMsSUFDQzVjLFVBeUJWLElBQUkrYyxFQUVYRixJQ3RDSUcsRUFBYyxTQUFxQjN1RCxFQUFHQyxHQUN4QyxPQUFPRCxJQUFNQyxHQTBFUixTQUFTMnVELEVBQW1CNThDLFFBQ2pCLElBQVpBLElBQ0ZBLEVBQVUrNUMsR0FHWixJQUFJcUMsRUFBa0JwOEMsSUFBWSs1QyxFQUFvQnVDLEVBQXlCLFdBQzdFLE9BQU8xckMscUJBQVc1USxJQUVwQixPQUFPLFNBQXFCNjhDLEVBQVVDLFFBQ2pCLElBQWZBLElBQ0ZBLEVBQWFILEdBT2YsSUFBSUksRUFBbUJYLElBSXZCLE9BNUZKLFNBQTZDUyxFQUFVQyxFQUFZdjRDLEVBQU95NEMsR0FDeEUsSUFXSUMsRUFSQUMsRUFIY2hzQyxzQkFBVyxTQUFVdmxCLEdBQ3JDLE9BQU9BLEVBQUksSUFDVixHQUMyQixHQUUxQjB2RCxFQUFlcHFDLG1CQUFRLFdBQ3pCLE9BQU8sSUFBSXlwQyxFQUFhbjJDLEVBQU95NEMsS0FDOUIsQ0FBQ3o0QyxFQUFPeTRDLElBQ1BHLEVBQWtDaHNDLG1CQUNsQ2lzQyxFQUFpQmpzQyxtQkFDakJrc0MsRUFBc0Jsc0MsbUJBRzFCLElBRUk4ckMsRUFERUosSUFBYU8sRUFBZWx3QyxTQUFXaXdDLEVBQWdDandDLFFBQ3pEMnZDLEVBQVN0NEMsRUFBTWczQyxZQUVmOEIsRUFBb0Jud0MsUUFFdEMsTUFBT3pWLEdBS1AsTUFKSTBsRCxFQUFnQ2p3QyxVQUNsQ3pWLEVBQUlyTCxTQUFXLDREQUE4RCt3RCxFQUFnQ2p3QyxRQUFRODNCLE1BQVEsUUFHekh2dEMsRUFvQ1IsT0FqQ0Fva0QsR0FBMEIsV0FDeEJ1QixFQUFlbHdDLFFBQVUydkMsRUFDekJRLEVBQW9CbndDLFFBQVUrdkMsRUFDOUJFLEVBQWdDandDLGFBQVVuWSxLQUU1QzhtRCxHQUEwQixXQUN4QixTQUFTeUIsSUFDUCxJQUNFLElBQUlDLEVBQW1CSCxFQUFlbHdDLFFBQVEzSSxFQUFNZzNDLFlBRXBELEdBQUl1QixFQUFXUyxFQUFrQkYsRUFBb0Jud0MsU0FDbkQsT0FHRm13QyxFQUFvQm53QyxRQUFVcXdDLEVBQzlCLE1BQU85bEQsR0FLUDBsRCxFQUFnQ2p3QyxRQUFVelYsRUFHNUN5bEQsRUFBWSxJQU1kLE9BSEE3QixFQUFhSixjQUFnQnFDLEVBQzdCakMsRUFBYU4sZUFDYnVDLElBQ08sV0FDTCxPQUFPakMsRUFBYUYsb0JBRXJCLENBQUM1MkMsRUFBTzgyQyxJQUNKNEIsRUErQkVPLENBQW9DWCxFQUFVQyxFQUh6Q0MsRUFBaUJ4NEMsTUFDWnc0QyxFQUFpQjFCLGVBNkIvQixJVjFIaUNvQyxFVTBIN0JDLEVBRVhkLElWNUh3Q2EsRVdHL0J6RCwwQlhGQUEsRUFBUXlELEUsTVlEakIsTUFBTUUsRUFBZSxDQUNqQkMsS0FBTSxDQUNGenpELEtBQU0sS0FDTitnQyxNQUFPLE1BRVgyeUIsTUFBTyxJQW9CSUMsTU42QmYsU0FBU0EsRUFBWUMsRUFBU0MsRUFBZ0JDLEdBQzVDLElBQUlDLEVBRUosR0FBOEIsbUJBQW5CRixHQUFxRCxtQkFBYkMsR0FBK0MsbUJBQWJBLEdBQW1ELG1CQUFqQmhyRCxVQUFVLEdBQy9ILE1BQU0sSUFBSW9GLE1BQU0sdUpBUWxCLEdBTDhCLG1CQUFuQjJsRCxRQUFxRCxJQUFiQyxJQUNqREEsRUFBV0QsRUFDWEEsT0FBaUJqcEQsUUFHSyxJQUFia3BELEVBQTBCLENBQ25DLEdBQXdCLG1CQUFiQSxFQUNULE1BQU0sSUFBSTVsRCxNQUFNLDJDQUdsQixPQUFPNGxELEVBQVNILEVBQVRHLENBQXNCRixFQUFTQyxHQUd4QyxHQUF1QixtQkFBWkQsRUFDVCxNQUFNLElBQUkxbEQsTUFBTSwwQ0FHbEIsSUFBSThsRCxFQUFpQkosRUFDakJLLEVBQWVKLEVBQ2ZLLEVBQW1CLEdBQ25CQyxFQUFnQkQsRUFDaEJFLEdBQWdCLEVBU3BCLFNBQVNDLElBQ0hGLElBQWtCRCxJQUNwQkMsRUFBZ0JELEVBQWlCaHBELFNBVXJDLFNBQVNrbUQsSUFDUCxHQUFJZ0QsRUFDRixNQUFNLElBQUlsbUQsTUFBTSx3TUFHbEIsT0FBTytsRCxFQTJCVCxTQUFTN0QsRUFBVUYsR0FDakIsR0FBd0IsbUJBQWJBLEVBQ1QsTUFBTSxJQUFJaGlELE1BQU0sMkNBR2xCLEdBQUlrbUQsRUFDRixNQUFNLElBQUlsbUQsTUFBTSw2VEFHbEIsSUFBSW1pRCxHQUFlLEVBR25CLE9BRkFnRSxJQUNBRixFQUFjOW5ELEtBQUs2akQsR0FDWixXQUNMLEdBQUtHLEVBQUwsQ0FJQSxHQUFJK0QsRUFDRixNQUFNLElBQUlsbUQsTUFBTSxrS0FHbEJtaUQsR0FBZSxFQUNmZ0UsSUFDQSxJQUFJbnRELEVBQVFpdEQsRUFBYzF0RCxRQUFReXBELEdBQ2xDaUUsRUFBY3ZsRCxPQUFPMUgsRUFBTyxHQUM1Qmd0RCxFQUFtQixPQThCdkIsU0FBUzFlLEVBQVNKLEdBQ2hCLElBQUs0YyxFQUFjNWMsR0FDakIsTUFBTSxJQUFJbG5DLE1BQU0sMkVBR2xCLFFBQTJCLElBQWhCa25DLEVBQU8xc0MsS0FDaEIsTUFBTSxJQUFJd0YsTUFBTSxzRkFHbEIsR0FBSWttRCxFQUNGLE1BQU0sSUFBSWxtRCxNQUFNLHNDQUdsQixJQUNFa21ELEdBQWdCLEVBQ2hCSCxFQUFlRCxFQUFlQyxFQUFjN2UsR0FGOUMsUUFJRWdmLEdBQWdCLEVBS2xCLElBRkEsSUFBSWpFLEVBQVkrRCxFQUFtQkMsRUFFMUIxMEQsRUFBSSxFQUFHQSxFQUFJMHdELEVBQVVuc0QsT0FBUXZFLElBQUssRUFFekN5d0QsRUFEZUMsRUFBVTF3RCxNQUkzQixPQUFPMjFDLEVBY1QsU0FBU2tmLEVBQWVDLEdBQ3RCLEdBQTJCLG1CQUFoQkEsRUFDVCxNQUFNLElBQUlybUQsTUFBTSw4Q0FHbEI4bEQsRUFBaUJPLEVBS2pCL2UsRUFBUyxDQUNQOXNDLEtBQU1rcEQsRUFBWUUsVUFXdEIsU0FBU3J5QyxJQUNQLElBQUkvSyxFQUVBOC9DLEVBQWlCcEUsRUFDckIsT0FBTzE3QyxFQUFPLENBU1owN0MsVUFBVyxTQUFtQnFFLEdBQzVCLEdBQXdCLGlCQUFiQSxHQUFzQyxPQUFiQSxFQUNsQyxNQUFNLElBQUloakQsVUFBVSwwQ0FHdEIsU0FBU2lqRCxJQUNIRCxFQUFTeG9ELE1BQ1h3b0QsRUFBU3hvRCxLQUFLbWxELEtBTWxCLE9BRkFzRCxJQUVPLENBQ0xqRSxZQUZnQitELEVBQWVFLE9BSzdCQyxLQUFnQixXQUN0QixPQUFPeHZELE1BQ051UCxFQVNMLE9BSEE4Z0MsRUFBUyxDQUNQOXNDLEtBQU1rcEQsRUFBWUMsUUFFYmtDLEVBQVEsQ0FDYnZlLFNBQVVBLEVBQ1Y0YSxVQUFXQSxFQUNYZ0IsU0FBVUEsRUFDVmtELGVBQWdCQSxJQUNUSyxLQUFnQmwxQyxFQUFZczBDLEVNbFJ4QkosRUFYZixTQUFpQnIrQyxFQUFRaytDLEVBQWNwZSxHQUNuQyxPQUFRQSxFQUFPMXNDLE1BQ1gsSUFBSyxXQUNELE9DdkJMLFNBQWlCNE0sRUFBTzgvQixHQUMzQixNQUFNd2YsRUFBWSxJQUFJdC9DLEdBQ2hCdS9DLEVBQVcsSUFBSUQsRUFBVW5CLE1BTy9CLE9BTEFvQixFQUFTNzBELEtBQU9vMUMsRUFBT3AxQyxLQUN2QjYwRCxFQUFTOXpCLE1BQVFxVSxFQUFPclUsTUFFeEI2ekIsRUFBVW5CLEtBQU9vQixFQUVWRCxFRGNRRSxDQUFReC9DLEVBQU84L0IsR0FDMUIsSUFBSyxXQUNELE9DYkwsU0FBaUI5L0IsRUFBTzgvQixHQUMzQixNQUFNd2YsRUFBWSxJQUFJdC9DLEdBQ2hCeS9DLEVBQVksSUFBSUgsRUFBVWxCLE9BRTFCc0IsRUFBVSxDQUNaM3pCLEtBQU0rVCxFQUFPL1QsS0FDYjR6QixXQUFXLEdBT2YsT0FKQUYsRUFBVUcsUUFBUUYsR0FFbEJKLEVBQVVsQixNQUFRcUIsRUFFWEgsRURBUU8sQ0FBUTcvQyxFQUFPOC9CLEdBQzFCLFFBQ0ksT0FBTzkvQixNLHdDRTVCbkIsU0FBUzgvQyxFQUFXQyxHQUNsQixNQUE4QixNQUF2QkEsRUFBUzN1RCxPQUFPLEdBSXpCLFNBQVM0dUQsRUFBVUMsRUFBTXJ1RCxHQUN2QixJQUFLLElBQUl6SCxFQUFJeUgsRUFBT29jLEVBQUk3akIsRUFBSSxFQUFHeUIsRUFBSXEwRCxFQUFLdnhELE9BQVFzZixFQUFJcGlCLEVBQUd6QixHQUFLLEVBQUc2akIsR0FBSyxFQUNsRWl5QyxFQUFLOTFELEdBQUs4MUQsRUFBS2p5QyxHQUdqQml5QyxFQUFLN3hDLE1BZ0VROHhDLE1BNURmLFNBQXlCdDdDLEVBQUlGLFFBQ2RwUCxJQUFUb1AsSUFBb0JBLEVBQU8sSUFFL0IsSUFrQkl5N0MsRUFsQkFDLEVBQVd4N0MsR0FBTUEsRUFBRy9ULE1BQU0sTUFBUyxHQUNuQ3d2RCxFQUFhMzdDLEdBQVFBLEVBQUs3VCxNQUFNLE1BQVMsR0FFekN5dkQsRUFBVTE3QyxHQUFNazdDLEVBQVdsN0MsR0FDM0IyN0MsRUFBWTc3QyxHQUFRbzdDLEVBQVdwN0MsR0FDL0I4N0MsRUFBYUYsR0FBV0MsRUFXNUIsR0FUSTM3QyxHQUFNazdDLEVBQVdsN0MsR0FFbkJ5N0MsRUFBWUQsRUFDSEEsRUFBUTF4RCxTQUVqQjJ4RCxFQUFVanlDLE1BQ1ZpeUMsRUFBWUEsRUFBVXhyRCxPQUFPdXJELEtBRzFCQyxFQUFVM3hELE9BQVEsTUFBTyxJQUc5QixHQUFJMnhELEVBQVUzeEQsT0FBUSxDQUNwQixJQUFJdTFDLEVBQU9vYyxFQUFVQSxFQUFVM3hELE9BQVMsR0FDeEN5eEQsRUFBNEIsTUFBVGxjLEdBQXlCLE9BQVRBLEdBQTBCLEtBQVRBLE9BRXBEa2MsR0FBbUIsRUFJckIsSUFEQSxJQUFJTSxFQUFLLEVBQ0F0MkQsRUFBSWsyRCxFQUFVM3hELE9BQVF2RSxHQUFLLEVBQUdBLElBQUssQ0FDMUMsSUFBSTRHLEVBQU9zdkQsRUFBVWwyRCxHQUVSLE1BQVQ0RyxFQUNGaXZELEVBQVVLLEVBQVdsMkQsR0FDSCxPQUFUNEcsR0FDVGl2RCxFQUFVSyxFQUFXbDJELEdBQ3JCczJELEtBQ1NBLElBQ1RULEVBQVVLLEVBQVdsMkQsR0FDckJzMkQsS0FJSixJQUFLRCxFQUFZLEtBQU9DLElBQU1BLEVBQUlKLEVBQVVULFFBQVEsT0FHbERZLEdBQ2lCLEtBQWpCSCxFQUFVLElBQ1JBLEVBQVUsSUFBT1AsRUFBV08sRUFBVSxLQUV4Q0EsRUFBVVQsUUFBUSxJQUVwQixJQUFJN25ELEVBQVNzb0QsRUFBVXR1RCxLQUFLLEtBSTVCLE9BRklvdUQsR0FBMEMsTUFBdEJwb0QsRUFBT21LLFFBQVEsS0FBWW5LLEdBQVUsS0FFdERBLEdDdkVULFNBQVN5TixFQUFRN1AsR0FDZixPQUFPQSxFQUFJNlAsUUFBVTdQLEVBQUk2UCxVQUFZM2EsT0FBT2tCLFVBQVV5WixRQUFRbGIsS0FBS3FMLEdBa0N0RCtxRCxNQS9CZixTQUFTQSxFQUFXbnlELEVBQUdDLEdBRXJCLEdBQUlELElBQU1DLEVBQUcsT0FBTyxFQUdwQixHQUFTLE1BQUxELEdBQWtCLE1BQUxDLEVBQVcsT0FBTyxFQUVuQyxHQUFJUCxNQUFNRCxRQUFRTyxHQUNoQixPQUNFTixNQUFNRCxRQUFRUSxJQUNkRCxFQUFFRyxTQUFXRixFQUFFRSxRQUNmSCxFQUFFb3lELE9BQU0sU0FBU0MsRUFBTWh2RCxHQUNyQixPQUFPOHVELEVBQVdFLEVBQU1weUQsRUFBRW9ELE9BS2hDLEdBQWlCLGlCQUFOckQsR0FBK0IsaUJBQU5DLEVBQWdCLENBQ2xELElBQUlxeUQsRUFBU3I3QyxFQUFRalgsR0FDakJ1eUQsRUFBU3Q3QyxFQUFRaFgsR0FFckIsT0FBSXF5RCxJQUFXdHlELEdBQUt1eUQsSUFBV3R5RCxFQUFVa3lELEVBQVdHLEVBQVFDLEdBRXJEajJELE9BQU9zRCxLQUFLdEQsT0FBT3FaLE9BQU8sR0FBSTNWLEVBQUdDLElBQUlteUQsT0FBTSxTQUFTajFELEdBQ3pELE9BQU9nMUQsRUFBV255RCxFQUFFN0MsR0FBTThDLEVBQUU5QyxPQUloQyxPQUFPLEdDcEJNcTFELE1BVmYsU0FBbUJyMEQsRUFBV0MsR0FDMUIsSUFBSUQsRUFJQSxNQUFNLElBQUlrTSxNQU5MLHFCQ0tiLFNBQVNvb0QsRUFBZ0Jwd0QsR0FDdkIsTUFBMEIsTUFBbkJBLEVBQUtRLE9BQU8sR0FBYVIsRUFBTyxJQUFNQSxFQUUvQyxTQUFTcXdELEVBQWtCcndELEdBQ3pCLE1BQTBCLE1BQW5CQSxFQUFLUSxPQUFPLEdBQWFSLEVBQUtzUixPQUFPLEdBQUt0UixFQUtuRCxTQUFTc3dELEVBQWN0d0QsRUFBTTJRLEdBQzNCLE9BSkYsU0FBcUIzUSxFQUFNMlEsR0FDekIsT0FBNEQsSUFBckQzUSxFQUFLcWtCLGNBQWM5akIsUUFBUW9RLEVBQU8wVCxpQkFBdUUsSUFBL0MsTUFBTTlqQixRQUFRUCxFQUFLUSxPQUFPbVEsRUFBTzdTLFNBRzNGeXlELENBQVl2d0QsRUFBTTJRLEdBQVUzUSxFQUFLc1IsT0FBT1gsRUFBTzdTLFFBQVVrQyxFQUVsRSxTQUFTd3dELEVBQW1CeHdELEdBQzFCLE1BQXdDLE1BQWpDQSxFQUFLUSxPQUFPUixFQUFLbEMsT0FBUyxHQUFha0MsRUFBS2dGLE1BQU0sR0FBSSxHQUFLaEYsRUEwQnBFLFNBQVN5d0QsRUFBV3Y3QixHQUNsQixJQUFJaTZCLEVBQVdqNkIsRUFBU2k2QixTQUNwQmwwQixFQUFTL0YsRUFBUytGLE9BQ2xCeTFCLEVBQU94N0IsRUFBU3c3QixLQUNoQjF3RCxFQUFPbXZELEdBQVksSUFHdkIsT0FGSWwwQixHQUFxQixNQUFYQSxJQUFnQmo3QixHQUE2QixNQUFyQmk3QixFQUFPejZCLE9BQU8sR0FBYXk2QixFQUFTLElBQU1BLEdBQzVFeTFCLEdBQWlCLE1BQVRBLElBQWMxd0QsR0FBMkIsTUFBbkIwd0QsRUFBS2x3RCxPQUFPLEdBQWFrd0QsRUFBTyxJQUFNQSxHQUNqRTF3RCxFQUdULFNBQVMyd0QsRUFBZTN3RCxFQUFNb1AsRUFBT3RVLEVBQUs4MUQsR0FDeEMsSUFBSTE3QixFQUVnQixpQkFBVGwxQixHQUVUazFCLEVBdkNKLFNBQW1CbDFCLEdBQ2pCLElBQUltdkQsRUFBV252RCxHQUFRLElBQ25CaTdCLEVBQVMsR0FDVHkxQixFQUFPLEdBQ1BHLEVBQVkxQixFQUFTNXVELFFBQVEsTUFFZCxJQUFmc3dELElBQ0ZILEVBQU92QixFQUFTNzlDLE9BQU91L0MsR0FDdkIxQixFQUFXQSxFQUFTNzlDLE9BQU8sRUFBR3UvQyxJQUdoQyxJQUFJQyxFQUFjM0IsRUFBUzV1RCxRQUFRLEtBT25DLE9BTHFCLElBQWpCdXdELElBQ0Y3MUIsRUFBU2swQixFQUFTNzlDLE9BQU93L0MsR0FDekIzQixFQUFXQSxFQUFTNzlDLE9BQU8sRUFBR3cvQyxJQUd6QixDQUNMM0IsU0FBVUEsRUFDVmwwQixPQUFtQixNQUFYQSxFQUFpQixHQUFLQSxFQUM5QnkxQixLQUFlLE1BQVRBLEVBQWUsR0FBS0EsR0FrQmZLLENBQVUvd0QsSUFDWm9QLE1BQVFBLFFBSVMxSyxLQUQxQnd3QixFQUFXazJCLEVBQVMsR0FBSXByRCxJQUNYbXZELFdBQXdCajZCLEVBQVNpNkIsU0FBVyxJQUVyRGo2QixFQUFTK0YsT0FDdUIsTUFBOUIvRixFQUFTK0YsT0FBT3o2QixPQUFPLEtBQVkwMEIsRUFBUytGLE9BQVMsSUFBTS9GLEVBQVMrRixRQUV4RS9GLEVBQVMrRixPQUFTLEdBR2hCL0YsRUFBU3c3QixLQUNxQixNQUE1Qng3QixFQUFTdzdCLEtBQUtsd0QsT0FBTyxLQUFZMDBCLEVBQVN3N0IsS0FBTyxJQUFNeDdCLEVBQVN3N0IsTUFFcEV4N0IsRUFBU3c3QixLQUFPLFFBR0poc0QsSUFBVjBLLFFBQTBDMUssSUFBbkJ3d0IsRUFBUzlsQixRQUFxQjhsQixFQUFTOWxCLE1BQVFBLElBRzVFLElBQ0U4bEIsRUFBU2k2QixTQUFXNkIsVUFBVTk3QixFQUFTaTZCLFVBQ3ZDLE1BQU9oeUQsR0FDUCxNQUFJQSxhQUFhOHpELFNBQ1QsSUFBSUEsU0FBUyxhQUFlLzdCLEVBQVNpNkIsU0FBeEIsaUZBRWJoeUQsRUFvQlYsT0FoQklyQyxJQUFLbzZCLEVBQVNwNkIsSUFBTUEsR0FFcEI4MUQsRUFFRzE3QixFQUFTaTZCLFNBRTZCLE1BQWhDajZCLEVBQVNpNkIsU0FBUzN1RCxPQUFPLEtBQ2xDMDBCLEVBQVNpNkIsU0FBV0csRUFBZ0JwNkIsRUFBU2k2QixTQUFVeUIsRUFBZ0J6QixXQUZ2RWo2QixFQUFTaTZCLFNBQVd5QixFQUFnQnpCLFNBTWpDajZCLEVBQVNpNkIsV0FDWmo2QixFQUFTaTZCLFNBQVcsS0FJakJqNkIsRUFNVCxTQUFTZzhCLElBQ1AsSUFBSUMsRUFBUyxLQWlDYixJQUFJbEgsRUFBWSxHQTRCaEIsTUFBTyxDQUNMbUgsVUE1REYsU0FBbUJDLEdBR2pCLE9BREFGLEVBQVNFLEVBQ0YsV0FDREYsSUFBV0UsSUFBWUYsRUFBUyxRQXlEdENHLG9CQXJERixTQUE2QnA4QixFQUFVZ2EsRUFBUXFpQixFQUFxQnZxRCxHQUlsRSxHQUFjLE1BQVZtcUQsRUFBZ0IsQ0FDbEIsSUFBSWhxRCxFQUEyQixtQkFBWGdxRCxFQUF3QkEsRUFBT2o4QixFQUFVZ2EsR0FBVWlpQixFQUVqRCxpQkFBWGhxRCxFQUMwQixtQkFBeEJvcUQsRUFDVEEsRUFBb0JwcUQsRUFBUUgsR0FHNUJBLEdBQVMsR0FJWEEsR0FBb0IsSUFBWEcsUUFHWEgsR0FBUyxJQW1DWHdxRCxlQTdCRixTQUF3Qjc4QyxHQUN0QixJQUFJODhDLEdBQVcsRUFFZixTQUFTekgsSUFDSHlILEdBQVU5OEMsRUFBRzFQLFdBQU0sRUFBUXJDLFdBSWpDLE9BREFxbkQsRUFBVTlqRCxLQUFLNmpELEdBQ1IsV0FDTHlILEdBQVcsRUFDWHhILEVBQVlBLEVBQVUzOEMsUUFBTyxTQUFVMGlELEdBQ3JDLE9BQU9BLElBQVNoRyxPQW1CcEIwSCxnQkFkRixXQUNFLElBQUssSUFBSUMsRUFBTy91RCxVQUFVOUUsT0FBUTBMLEVBQU8sSUFBSW5NLE1BQU1zMEQsR0FBT0MsRUFBTyxFQUFHQSxFQUFPRCxFQUFNQyxJQUMvRXBvRCxFQUFLb29ELEdBQVFodkQsVUFBVWd2RCxHQUd6QjNILEVBQVUzb0QsU0FBUSxTQUFVMG9ELEdBQzFCLE9BQU9BLEVBQVMva0QsV0FBTSxFQUFRdUUsUUFZcEMsSUFBSXFvRCxJQUFpQyxvQkFBWHAxRCxTQUEwQkEsT0FBTzhYLFdBQVk5WCxPQUFPOFgsU0FBU0QsZUFDdkYsU0FBU3c5QyxFQUFnQi8xRCxFQUFTaUwsR0FDaENBLEVBQVN2SyxPQUFPczFELFFBQVFoMkQsSUEyQzFCLFNBQVNpMkQsSUFDUCxJQUNFLE9BQU92MUQsT0FBT3cxRCxRQUFRN2lELE9BQVMsR0FDL0IsTUFBT2pTLEdBR1AsTUFBTyxJQVNYLFNBQVMrMEQsRUFBcUI3akQsUUFDZCxJQUFWQSxJQUNGQSxFQUFRLElBR1R3akQsR0FBc0cxQixHQUFVLEdBQ2pILElBckRJOXRDLEVBcURBOHZDLEVBQWdCMTFELE9BQU93MUQsUUFDdkJHLElBckQrQixLQUQvQi92QyxFQUFLNWxCLE9BQU80MUQsVUFBVUMsV0FDbEIveEQsUUFBUSxnQkFBdUQsSUFBL0I4aEIsRUFBRzloQixRQUFRLGlCQUEyRCxJQUFqQzhoQixFQUFHOWhCLFFBQVEsbUJBQXFELElBQTFCOGhCLEVBQUc5aEIsUUFBUSxZQUFxRCxJQUFqQzhoQixFQUFHOWhCLFFBQVEsbUJBQ3RKOUQsT0FBT3cxRCxTQUFXLGNBQWV4MUQsT0FBT3cxRCxRQXFEM0NNLEtBN0NzRCxJQUFuRDkxRCxPQUFPNDFELFVBQVVDLFVBQVUveEQsUUFBUSxZQThDdENpeUQsRUFBU25rRCxFQUNUb2tELEVBQXNCRCxFQUFPRSxhQUM3QkEsT0FBdUMsSUFBeEJELEdBQXlDQSxFQUN4REUsRUFBd0JILEVBQU9qQixvQkFDL0JBLE9BQWdELElBQTFCb0IsRUFBbUNiLEVBQWtCYSxFQUMzRUMsRUFBbUJKLEVBQU9LLFVBQzFCQSxPQUFpQyxJQUFyQkQsRUFBOEIsRUFBSUEsRUFDOUNFLEVBQVd6a0QsRUFBTXlrRCxTQUFXdEMsRUFBbUJKLEVBQWdCL2hELEVBQU15a0QsV0FBYSxHQUV0RixTQUFTQyxFQUFlQyxHQUN0QixJQUFJeGtELEVBQU93a0QsR0FBZ0IsR0FDdkJsNEQsRUFBTTBULEVBQUsxVCxJQUNYc1UsRUFBUVosRUFBS1ksTUFFYjZqRCxFQUFtQngyRCxPQUFPeTRCLFNBSTFCbDFCLEVBSFdpekQsRUFBaUI5RCxTQUNuQjhELEVBQWlCaDRCLE9BQ25CZzRCLEVBQWlCdkMsS0FJNUIsT0FESW9DLElBQVU5eUQsRUFBT3N3RCxFQUFjdHdELEVBQU04eUQsSUFDbENuQyxFQUFlM3dELEVBQU1vUCxFQUFPdFUsR0FHckMsU0FBU280RCxJQUNQLE9BQU8zMkQsS0FBS3dZLFNBQVN2VyxTQUFTLElBQUk4UyxPQUFPLEVBQUd1aEQsR0FHOUMsSUFBSU0sRUFBb0JqQyxJQUV4QixTQUFTMWhELEVBQVM0akQsR0FDaEJoSSxFQUFTNkcsRUFBU21CLEdBRWxCbkIsRUFBUW4wRCxPQUFTcTBELEVBQWNyMEQsT0FDL0JxMUQsRUFBa0J6QixnQkFBZ0JPLEVBQVEvOEIsU0FBVSs4QixFQUFRL2lCLFFBRzlELFNBQVNta0IsRUFBZUMsSUFwRTFCLFNBQW1DQSxHQUNqQyxZQUF1QjV1RCxJQUFoQjR1RCxFQUFNbGtELFFBQWlFLElBQTFDaWpELFVBQVVDLFVBQVUveEQsUUFBUSxVQXFFMURnekQsQ0FBMEJELElBQzlCRSxFQUFVVCxFQUFlTyxFQUFNbGtELFFBR2pDLFNBQVNxa0QsSUFDUEQsRUFBVVQsRUFBZWYsTUFHM0IsSUFBSTBCLEdBQWUsRUFFbkIsU0FBU0YsRUFBVXQrQixHQUNqQixHQUFJdytCLEVBQ0ZBLEdBQWUsRUFDZmxrRCxRQUNLLENBRUwyakQsRUFBa0I3QixvQkFBb0JwOEIsRUFEekIsTUFDMkNxOEIsR0FBcUIsU0FBVW9DLEdBQ2pGQSxFQUNGbmtELEVBQVMsQ0FDUDAvQixPQUpPLE1BS1BoYSxTQUFVQSxJQVNwQixTQUFtQjArQixHQUNqQixJQUFJQyxFQUFhNUIsRUFBUS84QixTQUlyQjQrQixFQUFVQyxFQUFReHpELFFBQVFzekQsRUFBVy80RCxNQUN4QixJQUFiZzVELElBQWdCQSxFQUFVLEdBQzlCLElBQUkxTixFQUFZMk4sRUFBUXh6RCxRQUFRcXpELEVBQWE5NEQsTUFDMUIsSUFBZnNyRCxJQUFrQkEsRUFBWSxHQUNsQyxJQUFJNE4sRUFBUUYsRUFBVTFOLEVBRWxCNE4sSUFDRk4sR0FBZSxFQUNmTyxFQUFHRCxJQW5CQ0UsQ0FBVWgvQixPQXVCbEIsSUFBSWkvQixFQUFrQnBCLEVBQWVmLEtBQ2pDK0IsRUFBVSxDQUFDSSxFQUFnQnI1RCxLQUUvQixTQUFTczVELEVBQVdsL0IsR0FDbEIsT0FBTzQ5QixFQUFXckMsRUFBV3Y3QixHQXVFL0IsU0FBUysrQixFQUFHajVELEdBQ1ZtM0QsRUFBYzhCLEdBQUdqNUQsR0FXbkIsSUFBSXE1RCxFQUFnQixFQUVwQixTQUFTQyxFQUFrQk4sR0FHSCxLQUZ0QkssR0FBaUJMLElBRW9CLElBQVZBLEdBQ3pCdjNELE9BQU8wekIsaUJBN01PLFdBNk15QmtqQyxHQUNuQ2QsR0FBeUI5MUQsT0FBTzB6QixpQkE3TXBCLGFBNk1zRHNqQyxJQUMzQyxJQUFsQlksSUFDVDUzRCxPQUFPODNELG9CQWhOTyxXQWdONEJsQixHQUN0Q2QsR0FBeUI5MUQsT0FBTzgzRCxvQkFoTnBCLGFBZ055RGQsSUFJN0UsSUFBSWUsR0FBWSxFQWlDaEIsSUFBSXZDLEVBQVUsQ0FDWm4wRCxPQUFRcTBELEVBQWNyMEQsT0FDdEJveEMsT0FBUSxNQUNSaGEsU0FBVWkvQixFQUNWQyxXQUFZQSxFQUNaanVELEtBcElGLFNBQWNuRyxFQUFNb1AsR0FFbEIsSUFDSThsQixFQUFXeTdCLEVBQWUzd0QsRUFBTW9QLEVBQU84akQsSUFBYWpCLEVBQVEvOEIsVUFDaEVpK0IsRUFBa0I3QixvQkFBb0JwOEIsRUFGekIsT0FFMkNxOEIsR0FBcUIsU0FBVW9DLEdBQ3JGLEdBQUtBLEVBQUwsQ0FDQSxJQUFJeCtCLEVBQU9pL0IsRUFBV2wvQixHQUNsQnA2QixFQUFNbzZCLEVBQVNwNkIsSUFDZnNVLEVBQVE4bEIsRUFBUzlsQixNQUVyQixHQUFJZ2pELEVBTUYsR0FMQUQsRUFBY3NDLFVBQVUsQ0FDdEIzNUQsSUFBS0EsRUFDTHNVLE1BQU9BLEdBQ04sS0FBTStsQixHQUVMdTlCLEVBQ0ZqMkQsT0FBT3k0QixTQUFTQyxLQUFPQSxNQUNsQixDQUNMLElBQUl1L0IsRUFBWVgsRUFBUXh6RCxRQUFRMHhELEVBQVEvOEIsU0FBU3A2QixLQUM3QzY1RCxFQUFXWixFQUFRL3VELE1BQU0sRUFBRzB2RCxFQUFZLEdBQzVDQyxFQUFTeHVELEtBQUsrdUIsRUFBU3A2QixLQUN2Qmk1RCxFQUFVWSxFQUNWbmxELEVBQVMsQ0FDUDAvQixPQXRCSyxPQXVCTGhhLFNBQVVBLFNBS2R6NEIsT0FBT3k0QixTQUFTQyxLQUFPQSxPQXVHM0IvMEIsUUFsR0YsU0FBaUJKLEVBQU1vUCxHQUVyQixJQUNJOGxCLEVBQVd5N0IsRUFBZTN3RCxFQUFNb1AsRUFBTzhqRCxJQUFhakIsRUFBUS84QixVQUNoRWkrQixFQUFrQjdCLG9CQUFvQnA4QixFQUZ6QixVQUUyQ3E4QixHQUFxQixTQUFVb0MsR0FDckYsR0FBS0EsRUFBTCxDQUNBLElBQUl4K0IsRUFBT2kvQixFQUFXbC9CLEdBQ2xCcDZCLEVBQU1vNkIsRUFBU3A2QixJQUNmc1UsRUFBUThsQixFQUFTOWxCLE1BRXJCLEdBQUlnakQsRUFNRixHQUxBRCxFQUFjeUMsYUFBYSxDQUN6Qjk1RCxJQUFLQSxFQUNMc1UsTUFBT0EsR0FDTixLQUFNK2xCLEdBRUx1OUIsRUFDRmoyRCxPQUFPeTRCLFNBQVM5MEIsUUFBUSswQixPQUNuQixDQUNMLElBQUl1L0IsRUFBWVgsRUFBUXh6RCxRQUFRMHhELEVBQVEvOEIsU0FBU3A2QixNQUM5QixJQUFmNDVELElBQWtCWCxFQUFRVyxHQUFheC9CLEVBQVNwNkIsS0FDcEQwVSxFQUFTLENBQ1AwL0IsT0FwQkssVUFxQkxoYSxTQUFVQSxTQUtkejRCLE9BQU95NEIsU0FBUzkwQixRQUFRKzBCLFFBdUU1QjgrQixHQUFJQSxFQUNKWSxPQS9ERixXQUNFWixHQUFJLElBK0RKYSxVQTVERixXQUNFYixFQUFHLElBNERIYyxNQXpDRixTQUFlNUQsUUFDRSxJQUFYQSxJQUNGQSxHQUFTLEdBR1gsSUFBSTZELEVBQVU3QixFQUFrQi9CLFVBQVVELEdBTzFDLE9BTEtxRCxJQUNIRixFQUFrQixHQUNsQkUsR0FBWSxHQUdQLFdBTUwsT0FMSUEsSUFDRkEsR0FBWSxFQUNaRixHQUFtQixJQUdkVSxNQXdCVEMsT0FwQkYsU0FBZ0JqTCxHQUNkLElBQUlrTCxFQUFXL0IsRUFBa0IzQixlQUFleEgsR0FFaEQsT0FEQXNLLEVBQWtCLEdBQ1gsV0FDTEEsR0FBbUIsR0FDbkJZLE9BaUJKLE9BQU9qRCxFQUdULElBQ0lrRCxFQUFpQixDQUNuQkMsU0FBVSxDQUNSQyxXQUFZLFNBQW9CcjFELEdBQzlCLE1BQTBCLE1BQW5CQSxFQUFLUSxPQUFPLEdBQWFSLEVBQU8sS0FBT3F3RCxFQUFrQnJ3RCxJQUVsRXMxRCxXQUFZLFNBQW9CdDFELEdBQzlCLE1BQTBCLE1BQW5CQSxFQUFLUSxPQUFPLEdBQWFSLEVBQUtzUixPQUFPLEdBQUt0UixJQUdyRHUxRCxRQUFTLENBQ1BGLFdBQVloRixFQUNaaUYsV0FBWWxGLEdBRWRvRixNQUFPLENBQ0xILFdBQVlqRixFQUNaa0YsV0FBWWxGLElBSWhCLFNBQVNxRixHQUFVcDZCLEdBQ2pCLElBQUl3MUIsRUFBWXgxQixFQUFJOTZCLFFBQVEsS0FDNUIsT0FBc0IsSUFBZnN3RCxFQUFtQngxQixFQUFNQSxFQUFJcjJCLE1BQU0sRUFBRzZyRCxHQUcvQyxTQUFTNkUsS0FHUCxJQUFJdmdDLEVBQU8xNEIsT0FBT3k0QixTQUFTQyxLQUN2QjA3QixFQUFZMTdCLEVBQUs1MEIsUUFBUSxLQUM3QixPQUFzQixJQUFmc3dELEVBQW1CLEdBQUsxN0IsRUFBSzlCLFVBQVV3OUIsRUFBWSxHQU81RCxTQUFTOEUsR0FBZ0IzMUQsR0FDdkJ2RCxPQUFPeTRCLFNBQVM5MEIsUUFBUXExRCxHQUFVaDVELE9BQU95NEIsU0FBU0MsTUFBUSxJQUFNbjFCLEdBR2xFLFNBQVM0MUQsR0FBa0J2bkQsUUFDWCxJQUFWQSxJQUNGQSxFQUFRLElBR1R3akQsR0FBbUcxQixHQUFVLEdBQzlHLElBQUlnQyxFQUFnQjExRCxPQUFPdzFELFFBRXZCTyxHQW5VRy8xRCxPQUFPNDFELFVBQVVDLFVBQVUveEQsUUFBUSxXQW1VN0I4TixHQUNUc2tELEVBQXdCSCxFQUFPakIsb0JBQy9CQSxPQUFnRCxJQUExQm9CLEVBQW1DYixFQUFrQmEsRUFDM0VrRCxFQUFrQnJELEVBQU9zRCxTQUN6QkEsT0FBK0IsSUFBcEJELEVBQTZCLFFBQVVBLEVBQ2xEL0MsRUFBV3prRCxFQUFNeWtELFNBQVd0QyxFQUFtQkosRUFBZ0IvaEQsRUFBTXlrRCxXQUFhLEdBQ2xGaUQsRUFBd0JaLEVBQWVXLEdBQ3ZDVCxFQUFhVSxFQUFzQlYsV0FDbkNDLEVBQWFTLEVBQXNCVCxXQUV2QyxTQUFTdkMsSUFDUCxJQUFJL3lELEVBQU9zMUQsRUFBV0ksTUFHdEIsT0FESTVDLElBQVU5eUQsRUFBT3N3RCxFQUFjdHdELEVBQU04eUQsSUFDbENuQyxFQUFlM3dELEdBR3hCLElBQUltekQsRUFBb0JqQyxJQUV4QixTQUFTMWhELEVBQVM0akQsR0FDaEJoSSxFQUFTNkcsRUFBU21CLEdBRWxCbkIsRUFBUW4wRCxPQUFTcTBELEVBQWNyMEQsT0FDL0JxMUQsRUFBa0J6QixnQkFBZ0JPLEVBQVEvOEIsU0FBVSs4QixFQUFRL2lCLFFBRzlELElBQUl3a0IsR0FBZSxFQUNmc0MsRUFBYSxLQU1qQixTQUFTdkMsSUFDUCxJQUw0QjkxRCxFQUFHQyxFQUszQm9DLEVBQU8wMUQsS0FDUE8sRUFBY1osRUFBV3IxRCxHQUU3QixHQUFJQSxJQUFTaTJELEVBRVhOLEdBQWdCTSxPQUNYLENBQ0wsSUFBSS9nQyxFQUFXNjlCLElBQ1htRCxFQUFlakUsRUFBUS84QixTQUMzQixJQUFLdytCLElBZHdCOTFELEVBYzJCczNCLEdBZDlCdjNCLEVBY2dCdTRELEdBYm5DL0csV0FBYXZ4RCxFQUFFdXhELFVBQVl4eEQsRUFBRXM5QixTQUFXcjlCLEVBQUVxOUIsUUFBVXQ5QixFQUFFK3lELE9BQVM5eUQsRUFBRTh5RCxNQWFMLE9BRW5FLEdBQUlzRixJQUFldkYsRUFBV3Y3QixHQUFXLE9BRXpDOGdDLEVBQWEsS0FLakIsU0FBbUI5Z0MsR0FDakIsR0FBSXcrQixFQUNGQSxHQUFlLEVBQ2Zsa0QsUUFDSyxDQUVMMmpELEVBQWtCN0Isb0JBQW9CcDhCLEVBRHpCLE1BQzJDcThCLEdBQXFCLFNBQVVvQyxHQUNqRkEsRUFDRm5rRCxFQUFTLENBQ1AwL0IsT0FKTyxNQUtQaGEsU0FBVUEsSUFTcEIsU0FBbUIwK0IsR0FDakIsSUFBSUMsRUFBYTVCLEVBQVEvOEIsU0FJckI0K0IsRUFBVXFDLEVBQVNDLFlBQVkzRixFQUFXb0QsS0FDN0IsSUFBYkMsSUFBZ0JBLEVBQVUsR0FDOUIsSUFBSTFOLEVBQVkrUCxFQUFTQyxZQUFZM0YsRUFBV21ELEtBQzdCLElBQWZ4TixJQUFrQkEsRUFBWSxHQUNsQyxJQUFJNE4sRUFBUUYsRUFBVTFOLEVBRWxCNE4sSUFDRk4sR0FBZSxFQUNmTyxFQUFHRCxJQW5CQ0UsQ0FBVWgvQixPQWpCZHMrQixDQUFVdCtCLElBeUNkLElBQUlsMUIsRUFBTzAxRCxLQUNQTyxFQUFjWixFQUFXcjFELEdBQ3pCQSxJQUFTaTJELEdBQWFOLEdBQWdCTSxHQUMxQyxJQUFJOUIsRUFBa0JwQixJQUNsQm9ELEVBQVcsQ0FBQzFGLEVBQVcwRCxJQXVFM0IsU0FBU0YsRUFBR2o1RCxHQUVWbTNELEVBQWM4QixHQUFHajVELEdBV25CLElBQUlxNUQsRUFBZ0IsRUFFcEIsU0FBU0MsRUFBa0JOLEdBR0gsS0FGdEJLLEdBQWlCTCxJQUVvQixJQUFWQSxFQUN6QnYzRCxPQUFPMHpCLGlCQXhPVyxhQXdPeUJzakMsR0FDaEIsSUFBbEJZLEdBQ1Q1M0QsT0FBTzgzRCxvQkExT1csYUEwTzRCZCxHQUlsRCxJQUFJZSxHQUFZLEVBaUNoQixJQUFJdkMsRUFBVSxDQUNabjBELE9BQVFxMEQsRUFBY3IwRCxPQUN0Qm94QyxPQUFRLE1BQ1JoYSxTQUFVaS9CLEVBQ1ZDLFdBbklGLFNBQW9CbC9CLEdBQ2xCLElBQUltaEMsRUFBVTloRCxTQUFTK2hELGNBQWMsUUFDakNuaEMsRUFBTyxHQU1YLE9BSklraEMsR0FBV0EsRUFBUUUsYUFBYSxVQUNsQ3BoQyxFQUFPc2dDLEdBQVVoNUQsT0FBT3k0QixTQUFTQyxPQUc1QkEsRUFBTyxJQUFNa2dDLEVBQVd2QyxFQUFXckMsRUFBV3Y3QixLQTRIckQvdUIsS0F6SEYsU0FBY25HLEVBQU1vUCxHQUVsQixJQUNJOGxCLEVBQVd5N0IsRUFBZTN3RCxPQUFNMEUsT0FBV0EsRUFBV3V0RCxFQUFRLzhCLFVBQ2xFaStCLEVBQWtCN0Isb0JBQW9CcDhCLEVBRnpCLE9BRTJDcThCLEdBQXFCLFNBQVVvQyxHQUNyRixHQUFLQSxFQUFMLENBQ0EsSUFBSTN6RCxFQUFPeXdELEVBQVd2N0IsR0FDbEIrZ0MsRUFBY1osRUFBV3ZDLEVBQVc5eUQsR0FHeEMsR0FGa0IwMUQsT0FBa0JPLEVBRW5CLENBSWZELEVBQWFoMkQsRUF4SXJCLFNBQXNCQSxHQUNwQnZELE9BQU95NEIsU0FBU3c3QixLQUFPMXdELEVBd0lqQncyRCxDQUFhUCxHQUNiLElBQUl2QixFQUFZeUIsRUFBU0MsWUFBWTNGLEVBQVd3QixFQUFRLzhCLFdBQ3BEdWhDLEVBQVlOLEVBQVNueEQsTUFBTSxFQUFHMHZELEVBQVksR0FDOUMrQixFQUFVdHdELEtBQUtuRyxHQUNmbTJELEVBQVdNLEVBQ1hqbkQsRUFBUyxDQUNQMC9CLE9BbkJPLE9Bb0JQaGEsU0FBVUEsU0FJWjFsQixTQWdHSnBQLFFBM0ZGLFNBQWlCSixFQUFNb1AsR0FFckIsSUFDSThsQixFQUFXeTdCLEVBQWUzd0QsT0FBTTBFLE9BQVdBLEVBQVd1dEQsRUFBUS84QixVQUNsRWkrQixFQUFrQjdCLG9CQUFvQnA4QixFQUZ6QixVQUUyQ3E4QixHQUFxQixTQUFVb0MsR0FDckYsR0FBS0EsRUFBTCxDQUNBLElBQUkzekQsRUFBT3l3RCxFQUFXdjdCLEdBQ2xCK2dDLEVBQWNaLEVBQVd2QyxFQUFXOXlELEdBQ3RCMDFELE9BQWtCTyxJQU1sQ0QsRUFBYWgyRCxFQUNiMjFELEdBQWdCTSxJQUdsQixJQUFJdkIsRUFBWXlCLEVBQVM1MUQsUUFBUWt3RCxFQUFXd0IsRUFBUS84QixZQUNqQyxJQUFmdy9CLElBQWtCeUIsRUFBU3pCLEdBQWExMEQsR0FDNUN3UCxFQUFTLENBQ1AwL0IsT0FuQlMsVUFvQlRoYSxTQUFVQSxTQXNFZCsrQixHQUFJQSxFQUNKWSxPQTdERixXQUNFWixHQUFJLElBNkRKYSxVQTFERixXQUNFYixFQUFHLElBMERIYyxNQXpDRixTQUFlNUQsUUFDRSxJQUFYQSxJQUNGQSxHQUFTLEdBR1gsSUFBSTZELEVBQVU3QixFQUFrQi9CLFVBQVVELEdBTzFDLE9BTEtxRCxJQUNIRixFQUFrQixHQUNsQkUsR0FBWSxHQUdQLFdBTUwsT0FMSUEsSUFDRkEsR0FBWSxFQUNaRixHQUFtQixJQUdkVSxNQXdCVEMsT0FwQkYsU0FBZ0JqTCxHQUNkLElBQUlrTCxFQUFXL0IsRUFBa0IzQixlQUFleEgsR0FFaEQsT0FEQXNLLEVBQWtCLEdBQ1gsV0FDTEEsR0FBbUIsR0FDbkJZLE9BaUJKLE9BQU9qRCxFQUdULFNBQVN5RSxHQUFNMTdELEVBQUcyN0QsRUFBWUMsR0FDNUIsT0FBT3I2RCxLQUFLeStDLElBQUl6K0MsS0FBS2dxRCxJQUFJdnJELEVBQUcyN0QsR0FBYUMsR0FPM0MsU0FBU0MsR0FBb0J4b0QsUUFDYixJQUFWQSxJQUNGQSxFQUFRLElBR1YsSUFBSW1rRCxFQUFTbmtELEVBQ1RrakQsRUFBc0JpQixFQUFPakIsb0JBQzdCdUYsRUFBd0J0RSxFQUFPdUUsZUFDL0JBLE9BQTJDLElBQTFCRCxFQUFtQyxDQUFDLEtBQU9BLEVBQzVERSxFQUFzQnhFLEVBQU95RSxhQUM3QkEsT0FBdUMsSUFBeEJELEVBQWlDLEVBQUlBLEVBQ3BEcEUsRUFBbUJKLEVBQU9LLFVBQzFCQSxPQUFpQyxJQUFyQkQsRUFBOEIsRUFBSUEsRUFDOUNPLEVBQW9CakMsSUFFeEIsU0FBUzFoRCxFQUFTNGpELEdBQ2hCaEksRUFBUzZHLEVBQVNtQixHQUVsQm5CLEVBQVFuMEQsT0FBU20wRCxFQUFRaEssUUFBUW5xRCxPQUNqQ3ExRCxFQUFrQnpCLGdCQUFnQk8sRUFBUS84QixTQUFVKzhCLEVBQVEvaUIsUUFHOUQsU0FBU2drQixJQUNQLE9BQU8zMkQsS0FBS3dZLFNBQVN2VyxTQUFTLElBQUk4UyxPQUFPLEVBQUd1aEQsR0FHOUMsSUFBSTd4RCxFQUFRMDFELEdBQU1PLEVBQWMsRUFBR0YsRUFBZWo1RCxPQUFTLEdBQ3ZEbXFELEVBQVU4TyxFQUFlNzJELEtBQUksU0FBVWczRCxHQUN6QyxPQUFtQ3ZHLEVBQWV1RyxPQUFPeHlELEVBQWpDLGlCQUFWd3lELEVBQXNEaEUsSUFBZ0RnRSxFQUFNcDhELEtBQU9vNEQsUUFHL0hrQixFQUFhM0QsRUF5Q2pCLFNBQVN3RCxFQUFHajVELEdBQ1YsSUFBSW04RCxFQUFZVCxHQUFNekUsRUFBUWp4RCxNQUFRaEcsRUFBRyxFQUFHaTNELEVBQVFoSyxRQUFRbnFELE9BQVMsR0FFakVvM0IsRUFBVys4QixFQUFRaEssUUFBUWtQLEdBQy9CaEUsRUFBa0I3QixvQkFBb0JwOEIsRUFGekIsTUFFMkNxOEIsR0FBcUIsU0FBVW9DLEdBQ2pGQSxFQUNGbmtELEVBQVMsQ0FDUDAvQixPQUxPLE1BTVBoYSxTQUFVQSxFQUNWbDBCLE1BQU9tMkQsSUFLVDNuRCxPQThCTixJQUFJeWlELEVBQVUsQ0FDWm4wRCxPQUFRbXFELEVBQVFucUQsT0FDaEJveEMsT0FBUSxNQUNSaGEsU0FBVSt5QixFQUFRam5ELEdBQ2xCQSxNQUFPQSxFQUNQaW5ELFFBQVNBLEVBQ1RtTSxXQUFZQSxFQUNaanVELEtBMUZGLFNBQWNuRyxFQUFNb1AsR0FFbEIsSUFDSThsQixFQUFXeTdCLEVBQWUzd0QsRUFBTW9QLEVBQU84akQsSUFBYWpCLEVBQVEvOEIsVUFDaEVpK0IsRUFBa0I3QixvQkFBb0JwOEIsRUFGekIsT0FFMkNxOEIsR0FBcUIsU0FBVW9DLEdBQ3JGLEdBQUtBLEVBQUwsQ0FDQSxJQUNJd0QsRUFEWWxGLEVBQVFqeEQsTUFDSSxFQUN4Qm8yRCxFQUFjbkYsRUFBUWhLLFFBQVFqakQsTUFBTSxHQUVwQ295RCxFQUFZdDVELE9BQVNxNUQsRUFDdkJDLEVBQVkxdUQsT0FBT3l1RCxFQUFXQyxFQUFZdDVELE9BQVNxNUQsRUFBV2ppQyxHQUU5RGtpQyxFQUFZanhELEtBQUsrdUIsR0FHbkIxbEIsRUFBUyxDQUNQMC9CLE9BZlMsT0FnQlRoYSxTQUFVQSxFQUNWbDBCLE1BQU9tMkQsRUFDUGxQLFFBQVNtUCxTQXVFYmgzRCxRQWxFRixTQUFpQkosRUFBTW9QLEdBRXJCLElBQ0k4bEIsRUFBV3k3QixFQUFlM3dELEVBQU1vUCxFQUFPOGpELElBQWFqQixFQUFRLzhCLFVBQ2hFaStCLEVBQWtCN0Isb0JBQW9CcDhCLEVBRnpCLFVBRTJDcThCLEdBQXFCLFNBQVVvQyxHQUNoRkEsSUFDTDFCLEVBQVFoSyxRQUFRZ0ssRUFBUWp4RCxPQUFTazBCLEVBQ2pDMWxCLEVBQVMsQ0FDUDAvQixPQU5TLFVBT1RoYSxTQUFVQSxTQTBEZCsrQixHQUFJQSxFQUNKWSxPQW5DRixXQUNFWixHQUFJLElBbUNKYSxVQWhDRixXQUNFYixFQUFHLElBZ0NIb0QsTUE3QkYsU0FBZXI4RCxHQUNiLElBQUltOEQsRUFBWWxGLEVBQVFqeEQsTUFBUWhHLEVBQ2hDLE9BQU9tOEQsR0FBYSxHQUFLQSxFQUFZbEYsRUFBUWhLLFFBQVFucUQsUUE0QnJEaTNELE1BekJGLFNBQWU1RCxHQUtiLFlBSmUsSUFBWEEsSUFDRkEsR0FBUyxHQUdKZ0MsRUFBa0IvQixVQUFVRCxJQXFCbkM4RCxPQWxCRixTQUFnQmpMLEdBQ2QsT0FBT21KLEVBQWtCM0IsZUFBZXhILEtBbUIxQyxPQUFPaUksRSxpQ0NqNUJIcUYsR0NDcUIsU0FBQXg5RCxHLElBQ25CNlYsRUFBVWhDLGUsT0FDaEJnQyxnQkFFQSxFRExtQzRuRCxDQUFyQyxrQkVRTTVuRCxHQVBxQixTQUFBN1YsRyxJQUNuQjZWLEVBQVVoQyxlLE9BQ2hCZ0MsZ0JBRUEsRUFHNEI0bkQsQ0FBOUIsVUNBTUMsRyx1QkFLSixHLDJCQUNFLFVBRUEsTUFBYSxDQUNYdGlDLFNBQVU3bUIsVUFBYzZtQixVLEVBUTFCLGMsRUFDQSxzQkFFSzdtQixFQUFMLGdCLEVBQ0UsU0FBZ0JBLEVBQUEsZ0JBQXFCLFNBQUE2bUIsR0FDL0IsRUFBSixXLEVBQ0UsU0FBYyxDQUFFQSxhLEVBRWhCLHVCLHFCQXhCRHVpQyxpQkFBUCxZLE1BQ1MsQ0FBRXozRCxLQUFGLElBQWFxN0IsSUFBYixJQUF1QnE4QixPQUF2QixHQUFtQ0MsUUFBc0IsTUFBYnhJLEksMkJBNkJyRHovQyw2QixLQUNFLGNBRUl6USxLQUFKLGtCLEtBQ0UsU0FBYyxDQUFFaTJCLFNBQVVqMkIsS0FBSzI0RCxvQixFQUluQ2hvRCxnQ0FDTTNRLEtBQUosVUFBbUJBLEtBQUtpMkQsWSxFQUcxQjd4RCxrQixPQUVJLGtCQUFDdzBELEdBQUQsVUFDRXI5RCxNQUFPLENBQ0x5M0QsUUFBU2h6RCxLQUFLb1AsTUFEVCxRQUVMNm1CLFNBQVVqMkIsS0FBS21RLE1BRlYsU0FHTHpRLE1BQU82NEQsbUJBQXdCdjRELEtBQUttUSxNQUFNOGxCLFNBSHJDLFVBSUw0aUMsY0FBZTc0RCxLQUFLb1AsTUFBTXlwRCxnQkFHNUIsa0JBQUNDLEdBQUQsVUFDRWp3RCxTQUFVN0ksS0FBS29QLE1BQU12RyxVQUR2QixLQUVFdE4sTUFBT3lFLEtBQUtvUCxNQUFNNGpELFksR0F2RFB2a0QsSUFBTW9CLFdDQUFwQixJQUFNb0IsVSxJQ1IzQmtwRCxHLDBHQUNKdG9ELDZCQUNNelEsS0FBS29QLE1BQVQsU0FBd0JwUCxLQUFLb1AsTUFBTTRwRCxRQUFRditELEtBQUt1RixLQUFNQSxPLEVBR3hEbXpDLCtCQUNNbnpDLEtBQUtvUCxNQUFULFVBQXlCcFAsS0FBS29QLE1BQU1pQixTQUFTNVYsS0FBS3VGLEtBQU1BLEtBQU1pNUQsSSxFQUdoRXRvRCxnQ0FDTTNRLEtBQUtvUCxNQUFULFdBQTBCcFAsS0FBS29QLE1BQU04cEQsVUFBVXorRCxLQUFLdUYsS0FBTUEsTyxFQUc1RG9FLGtCLE9BQ0UsTSxHQWRvQnFLLElBQU1vQixXQ0E5QixJQUFNc3BELEdBQU4sR0FFSUMsR0FBSixFQWtCQSxTQUFTQyxHQUFhdDRELEVBQXRCLEcsWUFBK0MsSUFBekJBLE1BQU8sVUFBa0IsSUFBYjAzRCxNQUFTLElBQ2xDMTNELFVBakJULFNBQXFCQSxHLEdBQ2ZvNEQsR0FBSixHQUFpQixPQUFPQSxHQUFQLEcsSUFFWEcsRUFBWXpvRCxhQUFsQixHLE9BRUl1b0QsR0FSTixNQVNJRCxRQUNBQyxNQUdGLEVBTzZCRyxDQUFBLEVBQUFBLENBQUEsRUFBMEIsQ0FBRXptRCxRQUFRLElDWG5FLFNBQVMwbUQsR0FBUyxHLElBQUVDLEVBQW1DLEVBQW5DQSxjQUFlMWtELEVBQW9CLEVBQXBCQSxHLElBQUk3TixZQUFnQixTLE9BRW5ELGtCQUFDMHhELEdBQUQsZUFDRyxTQUFBbG9ELEdBQ0MsUyxJQUVRc2lELEVBQTJCdGlELEVBSHpCLFFBR09tb0QsRUFBa0Jub0QsRUFIekIsY0FLSjRILEVBQVNwUixFQUFPOHJELEVBQUgsS0FBa0JBLEVBQXJDLFFBQ00vOEIsRUFBV3k3QixFQUNmK0gsRUFDa0IsaUJBQVAxa0QsRUFDTHNrRCxHQUFhdGtELEVBQUkwa0QsRUFEbkIsZ0JBSUl2SixTQUFVbUosR0FBYXRrRCxFQUFELFNBQWMwa0QsRUFBZCxVQVp0QixHLE9BbUJWLEdBQ0VuaEQsS0FDQSxNQUlBLHNCQUNFMGdELFFBQVMsV0FDUDFnRCxNQUVGakksU0FBVSxjLElSa0VLM1IsRUFBR0MsRVFqRVZzNEQsRUFBZXZGLEVBQWV1SCxFQUFwQyxJUmlFYXY2RCxFUS9EUXU0RCxFUitETHQ0RCxFUS9EbUIsRUFBZixNQUVoQjlDLElBQUtvN0QsRUFBYXA3RCxNUjhEM0I2QyxFQUFFd3hELFdBQWF2eEQsRUFBRXV4RCxVQUFZeHhELEVBQUVzOUIsU0FBV3I5QixFQUFFcTlCLFFBQVV0OUIsRUFBRSt5RCxPQUFTOXlELEVBQUU4eUQsTUFBUS95RCxFQUFFN0MsTUFBUThDLEVBQUU5QyxLQUFPZzFELEVBQVdueUQsRUFBRXlSLE1BQU94UixFQUFFd1IsUVEzRDdHbUksTUFHSnZELEdBQUlBLE9DckRoQixJQUFNb2tELEdBQU4sR0FFSUMsR0FBSixFQXVCQSxTQUFTTSxHQUFVeEosRUFBVWwvQyxRQUFjLElBQWRBLE1BQVUsS0FDZCxpQkFBWkEsR0FBd0I1UyxjQUFuQyxNQUNFNFMsRUFBVSxDQUFFalEsS0FBTWlRLEksTUFGcUIsRUFLakNqUSxFQUxpQyxPLElBQUEsTUFLM0I0aEQsT0FMMkIsUyxJQUFBLE9BS1pudkMsT0FMWSxTLElBQUEsVUFLSUQsT0FMSixTLE1BTzNCLEdBQUd2TyxPQUFqQixHQUVPLFFBQWEsYyxJQUNiakUsR0FBTCxLQUFhQSxFQUFhLE9BQU8sSyxHQUNqQyxFQUFhLE9BQU80NEQsRSxNQWhDeEIsYyxJQUNRQyxFQUFXLEdBQUc1b0QsRUFBTixJQUFvQkEsRUFBcEIsT0FBcUNBLEVBQW5ELFVBQ01yUSxFQUFZdzRELFFBQW9CQSxNQUF0QyxJLEdBRUl4NEQsRUFBSixHQUFxQixPQUFPQSxFQUFQLEcsSUFFZnJDLEVBQU4sR0FFTTRKLEVBQVMsQ0FBRTJ4RCxPQURGaHBELEtBQWE5UCxFQUFNekMsRUFBbEMsR0FDeUJBLFEsT0FFckI4NkQsR0FiTixNQWNJejRELE9BQ0F5NEQsTUFHRixFQW1CMkJHLENBQVl4NEQsRUFBTSxDQUN6QzBTLElBRHlDLEVBRXpDRCxPQUZ5QyxFQUd6Q0QsY0FITXNtRCxFQUo2QixTQUlyQnY3RCxFQUpxQixPQVMvQm9CLEVBQVFtNkQsT0FBZCxHLElBRUEsRUFBWSxPQUFPLEssSUFFWno5QixFQUFrQjE4QixFQWJZLEdBYXRCNk4sRUFBVTdOLEVBYlksU0FjL0JnNUQsRUFBVXhJLElBQWhCLEUsT0FFSXZOLElBQUosRUFBOEIsS0FFdkIsQ0FDTDVoRCxLQURLLEVBRUxxN0IsSUFBS3I3QixjQUFnQnE3QixFQUFoQnI3QixJQUZBLEVBR0wyM0QsUUFISyxFQUlMRCxPQUFRbjZELEVBQUEsUUFBWSxnQixPQUNsQjhpQixFQUFLdmxCLEVBQUx1bEIsTUFBaUI3VCxFQUFqQjZULEdBQ0EsSUFGTSxPQXRCWixNLElDUEkwNEMsRyxrR0FDSjExRCxrQixrQkFFSSxrQkFBQ3cwRCxHQUFELGVBQ0csWUFDQyxTLElBRU0zaUMsRUFBVyxrQkFBdUJ2bEIsRUFBeEMsU0FPTXRCLEVBQVEsRUFBSCxNQUFpQjZtQixTQUFqQixFQUEyQnYyQixNQU54QixzQkFDVixRQURVLGNBRVYsYUFDQWc2RCxHQUFVempDLEVBQUQsU0FBb0IsRUFEN0IsT0FFQXZsQixFQUpKLFEsRUFRc0MsRUFaNUIsTUFZSjdILEVBWkksV0FZTTVFLEVBWk4sWUFZaUJHLEVBWmpCLFMsT0FnQk5oRyxrQkFBSixJQUErQnlLLFdBQzdCQSxRQUlBLGtCQUFDK3ZELEdBQUQsVUFBd0JyOUQsTUFBTzZULEdBQzVCQSxRQUNHdkcsRUFDc0IsbUJBQWJBLEVBR0hBLEVBSEosR0FETSxFQU1ONUUsRUFDQXdLLG9CQURTLEdBRVRySyxFQUNBQSxFQURNLEdBVFhnTCxLQVl1QixtQkFBYnZHLEVBR0xBLEVBSEYsR0FkUixVLEdBeEJVNEYsSUFBTW9CLFdDckIxQixTQUFTLEdBQVQsRyxNQUNTOU8sb0JBQWdDLElBQXZDLEVBWUYsU0FBUyxHQUFULEssSUFDRSxFQUFlLE9BQU9rMUIsRSxJQUVoQnpCLEVBQU8yOEIsR0FBYixHLE9BRUEsSUFBSWw3QixzQkFBOENBLEUsS0FFbEQsR0FFRWk2QixTQUFVajZCLGtCQUF5QnpCLEVBQXpCeUIsVUFJZCxTQUFTOGpDLEdBQVU5akMsRyxNQUNVLGlCQUFiQSxFQUF3QkEsRUFBV3U3QixFQUFqRCxHQUdGLFNBQVN3SSxHQUFjQyxHLE9BQ2QsV0FDTC9JLE9BSUosU0FBU2dKLE1BUWtCenJELElBQU1vQixVLElDekMzQnNxRCxHLGtHQUNKLzFELGtCLGtCQUVJLGtCQUFDdzBELEdBQUQsZUFDRyxTQUFBbG9ELEdBQ0MsUyxJQUlBLEVBTFUsRUFHSnVsQixFQUFXLGtCQUF1QnZsQixFQUF4QyxTLE9BUUFqQyxxQkFBdUIsUUFBdkJBLFVBQTRDLFNBQUFzTixHLEdBQ3RDcmMsU0FBaUIrTyxtQkFBckIsR0FBa0QsQ0FDaEQrb0MsSSxJQUVNejJDLEVBQU9nYixjQUFvQkEsUUFBakMsS0FFQXJjLEVBQVFxQixFQUNKMjRELEdBQVV6akMsRUFBRCxjQUF5QmxhLEVBQXpCLE9BQXNDaGIsVUFDL0MyUCxFQUZKaFIsVUFNR0EsRUFDSCxtQkFBNEIsQ0FBRXUyQixTQUFGLEVBQVl3akMsY0FBZS81RCxJQUQzRCxTLEdBM0JXK08sSUFBTW9CLFdDSjNCLElBQU15UixHQUFhN1MsSUFBbkIsV0FvQ08sU0FBUzJyRCxHQUFjcjVELEcsSUFRdEJrMUIsRUF2QkMzVSxPQUFQLFNBd0JNNWhCLEVBQVE0aEIsT0FBZCxNLE9BRU92Z0IsRUFBTzI0RCxHQUFVempDLEVBQUQsU0FBWixHQUFYLEUsSUM3Q0lva0MsRyxvSkFDSnJILFFBQVVzSCxFQUFjLEVBQUQsTyxzQ0FFdkJsMkQsa0IsT0FDUyxzQkFBUTR1RCxRQUFTaHpELEtBQWpCLFFBQStCNkksU0FBVTdJLEtBQUtvUCxNQUFNdkcsWSxHQUpuQzRGLElBQU1vQixXQ0FUcEIsSUFBTW9CLFVDUHhCLElBQU0wcUQsR0FBb0IsU0FBQ3hsRCxFQUFJNDhDLEcsTUFDdEIsbUJBQVA1OEMsRUFBb0JBLEVBQTNCLEdBRCtCLEdBR3BCeWxELEdBQXNCLFNBQUN6bEQsRUFBSTQ4QyxHLE1BQ2pCLGlCQUFQNThDLEVBQ1YyOEMsRUFBZTM4QyxFQUFJLEtBQU0sS0FEdEIsR0FBUCxHQ0lJMGxELEdBQWlCLFNBQUE3OUMsRyxPQUFDLEdBQ2xCa0UsR0FBZXJTLElBQWZxUyxnQkFDTixJQUFXLEtBQ1RBLE9BT0YsSUFBTTQ1QyxHQUFhNTVDLElBQ2pCLGMsSUFFSTY1QyxFQU1DLEVBTkRBLFNBQ0FDLEVBS0MsRUFMREEsU0FDQS9sQixFQUlDLEVBSkRBLFFBQ0dnbUIsRUFHRix1Q0FDS2ptRCxFQUFXaW1ELEVBRGhCLE9BR0N6ckQsRUFBUSxFQUFILE1BRVB5bEMsUUFBUyxTQUFBd2YsRyxJQUVMLEdBQWF4ZixLQUNiLE1BQU9pbUIsRyxNQUNQekcsbUJBQ0EsRUFJQ0EsRUFBRCxzQkFDQUEsVUFDQyxHQUZELFVBRVl6L0MsR0E3QnRCLFNBQXlCeS9DLEcsU0FDYkEsV0FBaUJBLEVBQWpCQSxRQUFpQ0EsRUFBakNBLFNBQWtEQSxFQUE1RCxVQTZCUzBHLENBSkgsS0FNRTFHLG1CQUNBdUcsUSxPQU9KeHJELE1BREVxckQsS0FBSixJQUNjTyxHQUVaNXJELEVBSUssc0JBQVAsTUFXSixJQUFNNnJELEdBQU9uNkMsSUFDWCxjLFFBRUk3YyxpQkFPQyxNQVBXeTJELEdBT1gsRUFORHY1RCxFQU1DLEVBTkRBLFFBQ0E0VCxFQUtDLEVBTERBLEdBQ0E0bEQsRUFJQyxFQUpEQSxTQUNHRSxFQUdGLDZDLE9BRUQsa0JBQUNqQyxHQUFELGVBQ0csU0FBQWxvRCxHQUNDLFMsSUFFUXNpRCxFQUFZdGlELEVBSFYsUUFLSnVsQixFQUFXdWtDLEdBQ2ZELEdBQWtCeGxELEVBQUlyRSxFQURZLFVBRWxDQSxFQUZGLFVBS013bEIsRUFBT0QsRUFBVys4QixhQUFILEdBQXJCLEdBQ001akQsRUFBUSxFQUFILE1BRVQ4bUIsS0FGUyxFQUdUMGtDLFNBSFMsVyxJQUlEM2tDLEVBQVdza0MsR0FBa0J4bEQsRUFBSXJFLEVBQXZDLFdBQ2V2UCxFQUFVNnhELEVBQUgsUUFBcUJBLEVBQTNDLE1BRUExNkMsTSxPQUtBbWlELEtBQUosR0FDRXJyRCxNQUFZNHJELEdBQVo1ckQsRUFFQUEsYUFHS1gsb0JBQVAsU0N4R0pnc0QsR0FBaUIsU0FBQTc5QyxHLE9BQUMsR0FDbEJrRSxHQUFlclMsSUFBZnFTLGdCQUNOLElBQVcsS0FDVEEsT0FVY0EsSUFDZCxjLFFBRUksZ0JBQWdCbzZDLE9BZWYsTUFmNkIsT0FlN0IsRSxJQWREQyx1QkFjQyxNQWRpQixTQWNqQixFQWJEQyxFQWFDLEVBYkRBLFlBQ1dDLEVBWVYsRUFaREMsVUFDQTNZLEVBV0MsRUFYREEsTUFDVTRZLEVBVVQsRUFWRC9JLFNBQ1VnSixFQVNULEVBVER2bEMsU0FDQTFpQixFQVFDLEVBUkRBLFVBQ0FDLEVBT0MsRUFQREEsT0FDT2lvRCxFQU1OLEVBTkRwa0QsTUFDQXRDLEVBS0MsRUFMREEsR0FDQTRsRCxFQUlDLEVBSkRBLFNBQ0dFLEVBR0YsNkksT0FFRCxrQkFBQ2pDLEdBQUQsZUFDRyxTQUFBbG9ELEdBQ0MsUyxJQUVNaWhELEVBQWtCNkosR0FBZ0I5cUQsRUFBeEMsU0FDTWtrRCxFQUFhNEYsR0FDakJELEdBQWtCeGxELEVBRGtCLEdBQXRDLEdBSWtCaFUsRUFBUzZ6RCxFQVJqQixTQVVKOEcsRUFDSjM2RCxHQUFRQSxzQ0FEVixRQUdNckIsRUFBUWc4RCxFQUNWaEMsR0FBVS9ILEVBQUQsU0FBMkIsQ0FDbEM1d0QsS0FEa0MsRUFFbEM0aEQsTUFGa0MsRUFHbENwdkMsVUFIa0MsRUFJbENDLFdBTE4sS0FRTWcvQyxLQUFjK0ksRUFDaEJBLEVBQWE3N0QsRUFEZSxHQUFoQyxHQUlNNDdELEVBQVk5SSxFQXJENUIsVywyQkFBMkJtSixFQUFZLHlCQUFaQSxFQUFZLGdCLE9BQzlCQSxFQUFBLFFBQWtCLFNBQUFyaEUsRyxPQUFDLEtBQW5CLEtBQVAsS0FxRFlzaEUsQ0FBZVAsRUFETyxHQUExQixFQUdNaGtELEVBQVFtN0MsRUFBVyxFQUFILFdBQXRCLEVBRU1wakQsRUFBUSxFQUFILEMsZUFDUW9qRCxHQUFELEdBRFAsS0FFVDhJLFVBRlMsRUFHVGprRCxNQUhTLEVBSVR0QyxHQUFJNi9DLEdBbENJLEcsT0F1Q042RixLQUFKLEdBQ0VyckQsTUFBWTRyRCxHQUFaNXJELEVBRUFBLGFBR0sscUJBQVAsU0NyRUt5c0QsT0FoQmYsV0FHSSxNQUFNLEtBQUNoaEUsR0FBUXV6RCxFQUFZbjVDLEdBQVNBLEVBQU1xNUMsTUFHMUMsT0FBSXp6RCxFQU1HLGtCQUFDMitELEdBQUQsQ0FBVXprRCxHQUFHLFdBTFQsa0JBQUN5a0QsR0FBRCxDQUFVemtELEdBQUcsWSxjQ3VFYittRCxJQ2xGQUEsR0RLZixTQUFnQjFzRCxHQUNaLE1BQU0sS0FDRjhzQixFQUFRLG1CQUROLEVBRUY1aEMsRUFGRSxRQUdGeWhFLEVBSEUsU0FJRjN5QyxHQUFXLEdBQ1hoYSxFQUVFNHNELEVBQVEsR0FHZEEsRUFBTXo0RCxLQUFPNkwsRUFBTTdMLEtBQU82TCxFQUFNN0wsS0FBTyxTQUNwQzZMLEVBQU04bUIsYUFBYThsQyxFQUFNejRELEtBRzVCLElBQUkwNEQsRUFBTSxNQUNQN3NELEVBQU04c0QsUUFBT0QsR0FBTyxnQkFDcEI3c0QsRUFBTStzRCxRQUFPRixHQUFPLGdCQUN2QkQsRUFBTVYsVUFBWVcsRUFHZjdzRCxFQUFNOG1CLE9BQU04bEMsRUFBTWpuRCxHQUFLM0YsRUFBTThtQixNQUc3QjlNLElBQVU0eUMsRUFBTTV5QyxVQUFXLEdBRTNCOXVCLElBQUcwaEUsRUFBTW5nRSxJQUFNdkIsR0FHbEIsTUFFTThoRSxFQUFlLENBU3pCLFNBQW9CNzRELEdBQ2hCLElBQUlBLEVBQU0sT0FBTyxLQUNqQixHQUFZLFlBQVRBLEVBQW9CLE9BMkJuQix5QkFBSyszRCxVQUFVLG9CQUFvQnovRCxJQUFJLEtBQ25DLHlCQUFLeS9ELFVBQVUsY0FDWCxnQ0EzQlosSUFBSVcsRUFBTSxhQUVWLE9BQVExNEQsR0FDSixJQUFLLFNBQ0QwNEQsR0FBTyxvQkFDUCxNQUNKLElBQUssT0FDREEsR0FBTyxrQkFDUCxNQUNKLElBQUssWUFDREEsR0FBTyx1QkFDUCxNQUNKLElBQUssTUFDREEsR0FBTyxpQkFDUCxNQUNKLElBQUssUUFDREEsR0FBTyxtQkFJZixPQUFPLDBCQUFNWCxVQUFXVyxFQUFLcGdFLElBQUksTUFuQ2xCd2dFLENBQVdqdEQsRUFBTWt0RCxNQUVGcGdDLEVBRFosMEJBQU1vL0IsVUFBVSxlQUFlei9ELElBQUksS0FBS2tnRSxJQUkxRCxNQUFzQixNQUFkM3NELEVBQU04WCxJQUNSLGtCQUFDK3pDLEdBQVNlLEVBQVFJLEdBQ2xCLDJCQUFZSixFQUFRSSxJLG9CRXhCOUIsU0FBU0csSUFBVyxNQUFFQyxFQUFGLEdBQVN6bkQsRUFBVCxFQUFhemEsSUFLN0IsT0FKWTgvRCxHQUFjLENBQ3RCcjVELEtBQU1nVSxJQUlDLGtCQUFDLEdBQUQsQ0FBUW1TLElBQUksSUFBSWdQLEtBQU1uaEIsRUFBSW1uQixLQUFNc2dDLEVBQU9saUUsRUFBR0EsSUFHOUMsa0JBQUMsR0FBRCxDQUFRNHNCLElBQUksSUFBSWdQLEtBQU1uaEIsRUFBSW1uQixLQUFNc2dDLEVBQU9OLE9BQU8sRUFBTTVoRSxFQUFHQSxJQUduRG1pRSxJQzdCQUMsR0RNZixXQUNJLE1BQU1DLEVBQVcsa0JBQUNKLEdBQUQsQ0FBWXhuRCxHQUFHLE9BQU95bkQsTUFBTSxVQUFVbGlFLEVBQUUsTUFDbkRzaUUsRUFBVyxrQkFBQ0wsR0FBRCxDQUFZeG5ELEdBQUcsU0FBU3luRCxNQUFNLFNBQVNsaUUsRUFBRSxNQUUxRCxPQUFPLHlCQUFLZ2hFLFVBQVdqL0QsS0FBRXdnRSxTQUNwQkQsRUFDQUQsSSxvQkVFTUcsSUNkQUEsR0RHZixVQUE0QixTQUFDajBELElBR3pCLE9BQU8sNkJBQVN5eUQsVUFBV2ovRCxLQUFFd2dFLFNBQ3pCLHlCQUFLdkIsVUFBV2ovRCxLQUFFMGdFLFdBQ2xCLHlCQUFLekIsVUFBV2ovRCxLQUFFMmdFLFdBQ2JuMEQsS0VPRW8wRCxPQVhmLFdBQ0ksT0FDSSxvQ0FDSSxrQkFBQyxHQUFELE1BQ0Esa0JBQUMsR0FBRCxjLG1CQ1ZSQyxHQUFvQixTQUEyQjNoRSxHQUNsRCxPQUlELFNBQXlCQSxHQUN4QixRQUFTQSxHQUEwQixpQkFBVkEsRUFMbEI0aEUsQ0FBZ0I1aEUsS0FReEIsU0FBbUJBLEdBQ2xCLElBQUk2aEUsRUFBY3BpRSxPQUFPa0IsVUFBVXFELFNBQVM5RSxLQUFLYyxHQUVqRCxNQUF1QixvQkFBaEI2aEUsR0FDYSxrQkFBaEJBLEdBUUwsU0FBd0I3aEUsR0FDdkIsT0FBT0EsRUFBTWlFLFdBQWE2OUQsR0FSdEJDLENBQWUvaEUsR0FaZGdpRSxDQUFVaGlFLElBZ0JoQixJQUNJOGhFLEdBRGlDLG1CQUFYaGlFLFFBQXlCQSxPQUFPOGdCLElBQ2xCOWdCLE9BQU84Z0IsSUFBSSxpQkFBbUIsTUFVdEUsU0FBU3FoRCxHQUE4QmppRSxFQUFPeVYsR0FDN0MsT0FBMEIsSUFBbEJBLEVBQVF5c0QsT0FBbUJ6c0QsRUFBUWtzRCxrQkFBa0IzaEUsR0FDMURtaUUsSUFOaUJ0cEQsRUFNSzdZLEVBTGxCNkMsTUFBTUQsUUFBUWlXLEdBQU8sR0FBSyxJQUtBN1ksRUFBT3lWLEdBQ3JDelYsRUFQSixJQUFxQjZZLEVBVXJCLFNBQVN1cEQsR0FBa0Ivb0QsRUFBUWYsRUFBUTdDLEdBQzFDLE9BQU80RCxFQUFPNVAsT0FBTzZPLEdBQVE1UyxLQUFJLFNBQVN1MkMsR0FDekMsT0FBT2dtQixHQUE4QmhtQixFQUFTeG1DLE1BcUJoRCxTQUFTMHNELEdBQVU5b0QsRUFBUWYsRUFBUTdDLElBQ2xDQSxFQUFVQSxHQUFXLElBQ2I0c0QsV0FBYTVzRCxFQUFRNHNELFlBQWNELEdBQzNDM3NELEVBQVFrc0Qsa0JBQW9CbHNELEVBQVFrc0QsbUJBQXFCQSxHQUV6RCxJQUFJVyxFQUFnQnovRCxNQUFNRCxRQUFRMFYsR0FJbEMsT0FGZ0NncUQsSUFEWnovRCxNQUFNRCxRQUFReVcsR0FLdkJpcEQsRUFDSDdzRCxFQUFRNHNELFdBQVdocEQsRUFBUWYsRUFBUTdDLEdBN0I1QyxTQUFxQjRELEVBQVFmLEVBQVE3QyxHQUNwQyxJQUFJOHNELEVBQWMsR0FhbEIsT0FaSTlzRCxFQUFRa3NELGtCQUFrQnRvRCxJQUM3QjVaLE9BQU9zRCxLQUFLc1csR0FBUXZTLFNBQVEsU0FBU3hHLEdBQ3BDaWlFLEVBQVlqaUUsR0FBTzJoRSxHQUE4QjVvRCxFQUFPL1ksR0FBTW1WLE1BR2hFaFcsT0FBT3NELEtBQUt1VixHQUFReFIsU0FBUSxTQUFTeEcsR0FDL0JtVixFQUFRa3NELGtCQUFrQnJwRCxFQUFPaFksS0FBVStZLEVBQU8vWSxHQUd0RGlpRSxFQUFZamlFLEdBQU82aEUsR0FBVTlvRCxFQUFPL1ksR0FBTWdZLEVBQU9oWSxHQUFNbVYsR0FGdkQ4c0QsRUFBWWppRSxHQUFPMmhFLEdBQThCM3BELEVBQU9oWSxHQUFNbVYsTUFLekQ4c0QsRUFpQkNDLENBQVlucEQsRUFBUWYsRUFBUTdDLEdBSjVCd3NELEdBQThCM3BELEVBQVE3QyxHQVEvQzBzRCxHQUFVcHpELElBQU0sU0FBc0I0UixFQUFPbEwsR0FDNUMsSUFBSzVTLE1BQU1ELFFBQVErZCxHQUNsQixNQUFNLElBQUluVCxNQUFNLHFDQUdqQixPQUFPbVQsRUFBTTlaLFFBQU8sU0FBUytvRCxFQUFNcmtELEdBQ2xDLE9BQU80MkQsR0FBVXZTLEVBQU1ya0QsRUFBTWtLLEtBQzNCLEtBR0osSUFFZWd0RCxHQUZHTixHLFFDakZIcmlFLEdBRkZvQixLQUFLcEIsT0NBZDRpRSxHQUFjampFLE9BQU9rQixVQUdyQkMsR0FBaUI4aEUsR0FBWTloRSxlQU83QitoRSxHQUF1QkQsR0FBWTErRCxTQUduQzQrRCxHQUFpQjlpRSxHQUFTQSxHQUFPQyxpQkFBY21LLEVBNkJwQzI0RCxPQXBCZixTQUFtQjdpRSxHQUNqQixJQUFJOGlFLEVBQVFsaUUsR0FBZTFCLEtBQUtjLEVBQU80aUUsSUFDbkNqM0MsRUFBTTNyQixFQUFNNGlFLElBRWhCLElBQ0U1aUUsRUFBTTRpRSxTQUFrQjE0RCxFQUN4QixJQUFJNjRELEdBQVcsRUFDZixNQUFPcGdFLElBRVQsSUFBSWdLLEVBQVNnMkQsR0FBcUJ6akUsS0FBS2MsR0FRdkMsT0FQSStpRSxJQUNFRCxFQUNGOWlFLEVBQU00aUUsSUFBa0JqM0MsU0FFakIzckIsRUFBTTRpRSxLQUdWajJELEdDbENMZzJELEdBUGNsakUsT0FBT2tCLFVBT2NxRCxTQWF4QmcvRCxPQUpmLFNBQXdCaGpFLEdBQ3RCLE9BQU8yaUUsR0FBcUJ6akUsS0FBS2MsSUNUL0I0aUUsR0FBaUI5aUUsR0FBU0EsR0FBT0MsaUJBQWNtSyxFQWtCcEMrNEQsT0FUZixTQUFvQmpqRSxHQUNsQixPQUFhLE1BQVRBLE9BQ2VrSyxJQUFWbEssRUFkUSxxQkFETCxnQkFpQko0aUUsSUFBa0JBLE1BQWtCbmpFLE9BQU9PLEdBQy9DNmlFLEdBQVU3aUUsR0FDVmdqRSxHQUFlaGpFLElDVk5rakUsT0FOZixTQUFpQmhnRCxFQUFNaWdELEdBQ3JCLE9BQU8sU0FBUy96RCxHQUNkLE9BQU84VCxFQUFLaWdELEVBQVUvekQsTUNMWGcwRCxHQUZJRixHQUFRempFLE9BQU95SixlQUFnQnpKLFFDeUJuQzRqRSxPQUpmLFNBQXNCcmpFLEdBQ3BCLE9BQWdCLE1BQVRBLEdBQWlDLGlCQUFUQSxHQ2pCN0JzakUsR0FBWWxpRSxTQUFTVCxVQUNyQitoRSxHQUFjampFLE9BQU9rQixVQUdyQjRpRSxHQUFlRCxHQUFVdC9ELFNBR3pCcEQsR0FBaUI4aEUsR0FBWTloRSxlQUc3QjRpRSxHQUFtQkQsR0FBYXJrRSxLQUFLTyxRQTJDMUI2eEQsT0FiZixTQUF1QnR4RCxHQUNyQixJQUFLcWpFLEdBQWFyakUsSUE1Q0osbUJBNENjaWpFLEdBQVdqakUsR0FDckMsT0FBTyxFQUVULElBQUkwdEQsRUFBUTBWLEdBQWFwakUsR0FDekIsR0FBYyxPQUFWMHRELEVBQ0YsT0FBTyxFQUVULElBQUkrVixFQUFPN2lFLEdBQWUxQixLQUFLd3VELEVBQU8sZ0JBQWtCQSxFQUFNL3JELFlBQzlELE1BQXNCLG1CQUFSOGhFLEdBQXNCQSxhQUFnQkEsR0FDbERGLEdBQWFya0UsS0FBS3VrRSxJQUFTRCxJQzlDaEJFLE9BTGYsV0FDRWovRCxLQUFLay9ELFNBQVcsR0FDaEJsL0QsS0FBSyswQyxLQUFPLEdDMkJDb3FCLE9BSmYsU0FBWTVqRSxFQUFPNmpFLEdBQ2pCLE9BQU83akUsSUFBVTZqRSxHQUFVN2pFLEdBQVVBLEdBQVM2akUsR0FBVUEsR0NiM0NDLE9BVmYsU0FBc0JuakQsRUFBT3JnQixHQUUzQixJQURBLElBQUlnRCxFQUFTcWQsRUFBTXJkLE9BQ1pBLEtBQ0wsR0FBSXNnRSxHQUFHampELEVBQU1yZCxHQUFRLEdBQUloRCxHQUN2QixPQUFPZ0QsRUFHWCxPQUFRLEdDWE40SyxHQUhhckwsTUFBTWxDLFVBR0N1TixPQTRCVDYxRCxPQWpCZixTQUF5QnpqRSxHQUN2QixJQUFJaUcsRUFBTzlCLEtBQUtrL0QsU0FDWm45RCxFQUFRczlELEdBQWF2OUQsRUFBTWpHLEdBRS9CLFFBQUlrRyxFQUFRLEtBSVJBLEdBRFlELEVBQUtqRCxPQUFTLEVBRTVCaUQsRUFBS3ljLE1BRUw5VSxHQUFPaFAsS0FBS3FILEVBQU1DLEVBQU8sS0FFekIvQixLQUFLKzBDLE1BQ0EsSUNiTXdxQixPQVBmLFNBQXNCMWpFLEdBQ3BCLElBQUlpRyxFQUFPOUIsS0FBS2svRCxTQUNabjlELEVBQVFzOUQsR0FBYXY5RCxFQUFNakcsR0FFL0IsT0FBT2tHLEVBQVEsT0FBSTBELEVBQVkzRCxFQUFLQyxHQUFPLElDQTlCeTlELE9BSmYsU0FBc0IzakUsR0FDcEIsT0FBT3dqRSxHQUFhci9ELEtBQUtrL0QsU0FBVXJqRSxJQUFRLEdDYTlCNGpFLE9BYmYsU0FBc0I1akUsRUFBS04sR0FDekIsSUFBSXVHLEVBQU85QixLQUFLay9ELFNBQ1puOUQsRUFBUXM5RCxHQUFhdjlELEVBQU1qRyxHQVEvQixPQU5Ja0csRUFBUSxLQUNSL0IsS0FBSyswQyxLQUNQanpDLEVBQUtvRixLQUFLLENBQUNyTCxFQUFLTixLQUVoQnVHLEVBQUtDLEdBQU8sR0FBS3hHLEVBRVp5RSxNQ1RULFNBQVMwL0QsR0FBVTFXLEdBQ2pCLElBQUlqbkQsR0FBUyxFQUNUbEQsRUFBb0IsTUFBWG1xRCxFQUFrQixFQUFJQSxFQUFRbnFELE9BRzNDLElBREFtQixLQUFLRSxVQUNJNkIsRUFBUWxELEdBQVEsQ0FDdkIsSUFBSW81RCxFQUFRalAsRUFBUWpuRCxHQUNwQi9CLEtBQUtLLElBQUk0M0QsRUFBTSxHQUFJQSxFQUFNLEtBSzdCeUgsR0FBVXhqRSxVQUFVZ0UsTUFBUSsrRCxHQUM1QlMsR0FBVXhqRSxVQUFWLE9BQWdDb2pFLEdBQ2hDSSxHQUFVeGpFLFVBQVVmLElBQU1va0UsR0FDMUJHLEdBQVV4akUsVUFBVXFQLElBQU1pMEQsR0FDMUJFLEdBQVV4akUsVUFBVW1FLElBQU1vL0QsR0FFWEMsVUNqQkFDLE9BTGYsV0FDRTMvRCxLQUFLay9ELFNBQVcsSUFBSVEsR0FDcEIxL0QsS0FBSyswQyxLQUFPLEdDTUM2cUIsT0FSZixTQUFxQi9qRSxHQUNuQixJQUFJaUcsRUFBTzlCLEtBQUtrL0QsU0FDWmgzRCxFQUFTcEcsRUFBSSxPQUFXakcsR0FHNUIsT0FEQW1FLEtBQUsrMEMsS0FBT2p6QyxFQUFLaXpDLEtBQ1Y3c0MsR0NETTIzRCxPQUpmLFNBQWtCaGtFLEdBQ2hCLE9BQU9tRSxLQUFLay9ELFNBQVMvakUsSUFBSVUsSUNHWmlrRSxPQUpmLFNBQWtCamtFLEdBQ2hCLE9BQU9tRSxLQUFLay9ELFNBQVMzekQsSUFBSTFQLElDb0JaMFEsT0FMZixTQUFrQmhSLEdBQ2hCLElBQUlnSSxTQUFjaEksRUFDbEIsT0FBZ0IsTUFBVEEsSUFBMEIsVUFBUmdJLEdBQTRCLFlBQVJBLElDU2hDdzhELElDaENUdjBELEdEZ0NTdTBELEdBVmYsU0FBb0J4a0UsR0FDbEIsSUFBS2dSLEdBQVNoUixHQUNaLE9BQU8sRUFJVCxJQUFJMnJCLEVBQU1zM0MsR0FBV2pqRSxHQUNyQixNQTVCWSxxQkE0QkwyckIsR0EzQkksOEJBMkJjQSxHQTdCWiwwQkE2QjZCQSxHQTFCN0Isa0JBMEJnREEsR0U1QmhEODRDLEdBRkV2akUsS0FBSyxzQkRBbEJ3akUsSUFDRXowRCxHQUFNLFNBQVM1RixLQUFLbzZELElBQWNBLEdBQVcxaEUsTUFBUTBoRSxHQUFXMWhFLEtBQUtnWSxVQUFZLEtBQ3ZFLGlCQUFtQjlLLEdBQU8sR0FjM0IwMEQsT0FKZixTQUFrQnpoRCxHQUNoQixRQUFTd2hELElBQWVBLE1BQWN4aEQsR0VacENxZ0QsR0FIWW5pRSxTQUFTVCxVQUdJcUQsU0FxQmQ0Z0UsT0FaZixTQUFrQjFoRCxHQUNoQixHQUFZLE1BQVJBLEVBQWMsQ0FDaEIsSUFDRSxPQUFPcWdELEdBQWFya0UsS0FBS2drQixHQUN6QixNQUFPdmdCLElBQ1QsSUFDRSxPQUFRdWdCLEVBQU8sR0FDZixNQUFPdmdCLEtBRVgsTUFBTyxJQ1ZMa2lFLEdBQWUsOEJBR2Z2QixHQUFZbGlFLFNBQVNULFVBQ3JCK2hFLEdBQWNqakUsT0FBT2tCLFVBR3JCNGlFLEdBQWVELEdBQVV0L0QsU0FHekJwRCxHQUFpQjhoRSxHQUFZOWhFLGVBRzdCa2tFLEdBQWFoaEUsT0FBTyxJQUN0QnkvRCxHQUFhcmtFLEtBQUswQixJQUFnQmdGLFFBakJqQixzQkFpQnVDLFFBQ3ZEQSxRQUFRLHlEQUEwRCxTQUFXLEtBbUJqRW0vRCxPQVJmLFNBQXNCL2tFLEdBQ3BCLFNBQUtnUixHQUFTaFIsSUFBVTJrRSxHQUFTM2tFLE1BR25Cd2tFLEdBQVd4a0UsR0FBUzhrRSxHQUFhRCxJQUNoQzErRCxLQUFLeStELEdBQVM1a0UsS0MvQmhCNlUsT0FKZixTQUFrQnBVLEVBQVFILEdBQ3hCLE9BQWlCLE1BQVZHLE9BQWlCeUosRUFBWXpKLEVBQU9ILElDTzlCMGtFLE9BTGYsU0FBbUJ2a0UsRUFBUUgsR0FDekIsSUFBSU4sRUFBUTZVLEdBQVNwVSxFQUFRSCxHQUM3QixPQUFPeWtFLEdBQWEva0UsR0FBU0EsT0FBUWtLLEdDUHhCMlYsR0FGTG1sRCxHQUFVOWpFLEtBQU0sT0NDWCtqRSxHQUZJRCxHQUFVdmxFLE9BQVEsVUNXdEJ5bEUsT0FMZixXQUNFemdFLEtBQUtrL0QsU0FBV3NCLEdBQWVBLEdBQWEsTUFBUSxHQUNwRHhnRSxLQUFLKzBDLEtBQU8sR0NLQzJyQixPQU5mLFNBQW9CN2tFLEdBQ2xCLElBQUlxTSxFQUFTbEksS0FBS3VMLElBQUkxUCxXQUFlbUUsS0FBS2svRCxTQUFTcmpFLEdBRW5ELE9BREFtRSxLQUFLKzBDLE1BQVE3c0MsRUFBUyxFQUFJLEVBQ25CQSxHQ0pML0wsR0FIY25CLE9BQU9rQixVQUdRQyxlQW9CbEJ3a0UsT0FUZixTQUFpQjlrRSxHQUNmLElBQUlpRyxFQUFPOUIsS0FBS2svRCxTQUNoQixHQUFJc0IsR0FBYyxDQUNoQixJQUFJdDRELEVBQVNwRyxFQUFLakcsR0FDbEIsTUFyQmlCLDhCQXFCVnFNLE9BQTRCekMsRUFBWXlDLEVBRWpELE9BQU8vTCxHQUFlMUIsS0FBS3FILEVBQU1qRyxHQUFPaUcsRUFBS2pHLFFBQU80SixHQ3BCbER0SixHQUhjbkIsT0FBT2tCLFVBR1FDLGVBZ0JsQnlrRSxPQUxmLFNBQWlCL2tFLEdBQ2YsSUFBSWlHLEVBQU85QixLQUFLay9ELFNBQ2hCLE9BQU9zQixRQUE4Qi82RCxJQUFkM0QsRUFBS2pHLEdBQXNCTSxHQUFlMUIsS0FBS3FILEVBQU1qRyxJQ0cvRGdsRSxPQVBmLFNBQWlCaGxFLEVBQUtOLEdBQ3BCLElBQUl1RyxFQUFPOUIsS0FBS2svRCxTQUdoQixPQUZBbC9ELEtBQUsrMEMsTUFBUS8wQyxLQUFLdUwsSUFBSTFQLEdBQU8sRUFBSSxFQUNqQ2lHLEVBQUtqRyxHQUFRMmtFLFNBQTBCLzZELElBQVZsSyxFQWZWLDRCQWVrREEsRUFDOUR5RSxNQ05ULFNBQVM4Z0UsR0FBSzlYLEdBQ1osSUFBSWpuRCxHQUFTLEVBQ1RsRCxFQUFvQixNQUFYbXFELEVBQWtCLEVBQUlBLEVBQVFucUQsT0FHM0MsSUFEQW1CLEtBQUtFLFVBQ0k2QixFQUFRbEQsR0FBUSxDQUN2QixJQUFJbzVELEVBQVFqUCxFQUFRam5ELEdBQ3BCL0IsS0FBS0ssSUFBSTQzRCxFQUFNLEdBQUlBLEVBQU0sS0FLN0I2SSxHQUFLNWtFLFVBQVVnRSxNQUFRdWdFLEdBQ3ZCSyxHQUFLNWtFLFVBQUwsT0FBMkJ3a0UsR0FDM0JJLEdBQUs1a0UsVUFBVWYsSUFBTXdsRSxHQUNyQkcsR0FBSzVrRSxVQUFVcVAsSUFBTXExRCxHQUNyQkUsR0FBSzVrRSxVQUFVbUUsSUFBTXdnRSxHQUVOQyxVQ1hBQyxPQVRmLFdBQ0UvZ0UsS0FBSyswQyxLQUFPLEVBQ1ovMEMsS0FBS2svRCxTQUFXLENBQ2QsS0FBUSxJQUFJNEIsR0FDWixJQUFPLElBQUsxbEQsSUFBT3NrRCxJQUNuQixPQUFVLElBQUlvQixLQ0ZIRSxPQVBmLFNBQW1CemxFLEdBQ2pCLElBQUlnSSxTQUFjaEksRUFDbEIsTUFBZ0IsVUFBUmdJLEdBQTRCLFVBQVJBLEdBQTRCLFVBQVJBLEdBQTRCLFdBQVJBLEVBQ3JELGNBQVZoSSxFQUNVLE9BQVZBLEdDTVEwbEUsT0FQZixTQUFvQmhnRSxFQUFLcEYsR0FDdkIsSUFBSWlHLEVBQU9iLEVBQUlpK0QsU0FDZixPQUFPOEIsR0FBVW5sRSxHQUNiaUcsRUFBbUIsaUJBQVBqRyxFQUFrQixTQUFXLFFBQ3pDaUcsRUFBS2IsS0NHSWlnRSxPQU5mLFNBQXdCcmxFLEdBQ3RCLElBQUlxTSxFQUFTKzRELEdBQVdqaEUsS0FBTW5FLEdBQWpCLE9BQWdDQSxHQUU3QyxPQURBbUUsS0FBSyswQyxNQUFRN3NDLEVBQVMsRUFBSSxFQUNuQkEsR0NDTWk1RCxPQUpmLFNBQXFCdGxFLEdBQ25CLE9BQU9vbEUsR0FBV2poRSxLQUFNbkUsR0FBS1YsSUFBSVUsSUNHcEJ1bEUsT0FKZixTQUFxQnZsRSxHQUNuQixPQUFPb2xFLEdBQVdqaEUsS0FBTW5FLEdBQUswUCxJQUFJMVAsSUNTcEJ3bEUsT0FUZixTQUFxQnhsRSxFQUFLTixHQUN4QixJQUFJdUcsRUFBT20vRCxHQUFXamhFLEtBQU1uRSxHQUN4Qms1QyxFQUFPanpDLEVBQUtpekMsS0FJaEIsT0FGQWp6QyxFQUFLekIsSUFBSXhFLEVBQUtOLEdBQ2R5RSxLQUFLKzBDLE1BQVFqekMsRUFBS2l6QyxNQUFRQSxFQUFPLEVBQUksRUFDOUIvMEMsTUNMVCxTQUFTc2hFLEdBQVN0WSxHQUNoQixJQUFJam5ELEdBQVMsRUFDVGxELEVBQW9CLE1BQVhtcUQsRUFBa0IsRUFBSUEsRUFBUW5xRCxPQUczQyxJQURBbUIsS0FBS0UsVUFDSTZCLEVBQVFsRCxHQUFRLENBQ3ZCLElBQUlvNUQsRUFBUWpQLEVBQVFqbkQsR0FDcEIvQixLQUFLSyxJQUFJNDNELEVBQU0sR0FBSUEsRUFBTSxLQUs3QnFKLEdBQVNwbEUsVUFBVWdFLE1BQVE2Z0UsR0FDM0JPLEdBQVNwbEUsVUFBVCxPQUErQmdsRSxHQUMvQkksR0FBU3BsRSxVQUFVZixJQUFNZ21FLEdBQ3pCRyxHQUFTcGxFLFVBQVVxUCxJQUFNNjFELEdBQ3pCRSxHQUFTcGxFLFVBQVVtRSxJQUFNZ2hFLEdBRVZDLFVDRUFDLE9BaEJmLFNBQWtCMWxFLEVBQUtOLEdBQ3JCLElBQUl1RyxFQUFPOUIsS0FBS2svRCxTQUNoQixHQUFJcDlELGFBQWdCNDlELEdBQVcsQ0FDN0IsSUFBSThCLEVBQVExL0QsRUFBS285RCxTQUNqQixJQUFLOWpELElBQVFvbUQsRUFBTTNpRSxPQUFTNGlFLElBRzFCLE9BRkFELEVBQU10NkQsS0FBSyxDQUFDckwsRUFBS04sSUFDakJ5RSxLQUFLKzBDLE9BQVNqekMsRUFBS2l6QyxLQUNaLzBDLEtBRVQ4QixFQUFPOUIsS0FBS2svRCxTQUFXLElBQUlvQyxHQUFTRSxHQUl0QyxPQUZBMS9ELEVBQUt6QixJQUFJeEUsRUFBS04sR0FDZHlFLEtBQUsrMEMsS0FBT2p6QyxFQUFLaXpDLEtBQ1YvMEMsTUNoQlQsU0FBUzBoRSxHQUFNMVksR0FDYixJQUFJbG5ELEVBQU85QixLQUFLay9ELFNBQVcsSUFBSVEsR0FBVTFXLEdBQ3pDaHBELEtBQUsrMEMsS0FBT2p6QyxFQUFLaXpDLEtBSW5CMnNCLEdBQU14bEUsVUFBVWdFLE1BQVF5L0QsR0FDeEIrQixHQUFNeGxFLFVBQU4sT0FBNEIwakUsR0FDNUI4QixHQUFNeGxFLFVBQVVmLElBQU0wa0UsR0FDdEI2QixHQUFNeGxFLFVBQVVxUCxJQUFNdTBELEdBQ3RCNEIsR0FBTXhsRSxVQUFVbUUsSUFBTWtoRSxHQUVQRyxVQ0xBQyxPQVpmLFNBQW1CemxELEVBQU8wbEQsR0FJeEIsSUFIQSxJQUFJNy9ELEdBQVMsRUFDVGxELEVBQWtCLE1BQVRxZCxFQUFnQixFQUFJQSxFQUFNcmQsU0FFOUJrRCxFQUFRbEQsSUFDOEIsSUFBekMraUUsRUFBUzFsRCxFQUFNbmEsR0FBUUEsRUFBT21hLEtBSXBDLE9BQU9BLEdDUk1qaEIsR0FSTyxXQUNwQixJQUNFLElBQUl3akIsRUFBTzhoRCxHQUFVdmxFLE9BQVEsa0JBRTdCLE9BREF5akIsRUFBSyxHQUFJLEdBQUksSUFDTkEsRUFDUCxNQUFPdmdCLEtBTFcsR0NzQlAyakUsT0FiZixTQUF5QjdsRSxFQUFRSCxFQUFLTixHQUN6QixhQUFQTSxHQUFzQlosR0FDeEJBLEdBQWVlLEVBQVFILEVBQUssQ0FDMUIsY0FBZ0IsRUFDaEIsWUFBYyxFQUNkLE1BQVNOLEVBQ1QsVUFBWSxJQUdkUyxFQUFPSCxHQUFPTixHQ2JkWSxHQUhjbkIsT0FBT2tCLFVBR1FDLGVBb0JsQjJsRSxPQVJmLFNBQXFCOWxFLEVBQVFILEVBQUtOLEdBQ2hDLElBQUl3bUUsRUFBVy9sRSxFQUFPSCxHQUNoQk0sR0FBZTFCLEtBQUt1QixFQUFRSCxJQUFRc2pFLEdBQUc0QyxFQUFVeG1FLFVBQ3hDa0ssSUFBVmxLLEdBQXlCTSxLQUFPRyxJQUNuQzZsRSxHQUFnQjdsRSxFQUFRSCxFQUFLTixJQ2dCbEJ5bUUsT0ExQmYsU0FBb0JudUQsRUFBUXpFLEVBQU9wVCxFQUFRaW1FLEdBQ3pDLElBQUlDLEdBQVNsbUUsRUFDYkEsSUFBV0EsRUFBUyxJQUtwQixJQUhBLElBQUkrRixHQUFTLEVBQ1RsRCxFQUFTdVEsRUFBTXZRLFNBRVZrRCxFQUFRbEQsR0FBUSxDQUN2QixJQUFJaEQsRUFBTXVULEVBQU1yTixHQUVad00sRUFBVzB6RCxFQUNYQSxFQUFXam1FLEVBQU9ILEdBQU1nWSxFQUFPaFksR0FBTUEsRUFBS0csRUFBUTZYLFFBQ2xEcE8sT0FFYUEsSUFBYjhJLElBQ0ZBLEVBQVdzRixFQUFPaFksSUFFaEJxbUUsRUFDRkwsR0FBZ0I3bEUsRUFBUUgsRUFBSzBTLEdBRTdCdXpELEdBQVk5bEUsRUFBUUgsRUFBSzBTLEdBRzdCLE9BQU92UyxHQ2pCTW1tRSxPQVZmLFNBQW1CcG1FLEVBQUc2bEUsR0FJcEIsSUFIQSxJQUFJNy9ELEdBQVMsRUFDVG1HLEVBQVM5SixNQUFNckMsS0FFVmdHLEVBQVFoRyxHQUNmbU0sRUFBT25HLEdBQVM2L0QsRUFBUzcvRCxHQUUzQixPQUFPbUcsR0NDTWs2RCxPQUpmLFNBQXlCN21FLEdBQ3ZCLE9BQU9xakUsR0FBYXJqRSxJQVZSLHNCQVVrQmlqRSxHQUFXampFLElDVnZDMGlFLEdBQWNqakUsT0FBT2tCLFVBR3JCQyxHQUFpQjhoRSxHQUFZOWhFLGVBRzdCK1gsR0FBdUIrcEQsR0FBWS9wRCxxQkF5QnhCbXVELEdBTEdELEdBQWdCLFdBQWEsT0FBT3orRCxVQUFwQixJQUFzQ3krRCxHQUFrQixTQUFTN21FLEdBQ2pHLE9BQU9xakUsR0FBYXJqRSxJQUFVWSxHQUFlMUIsS0FBS2MsRUFBTyxZQUN0RDJZLEdBQXFCelosS0FBS2MsRUFBTyxXQ1B2QjRDLEdBRkRDLE1BQU1ELFEsU0NuQmhCbWtFLEdBQVcsbUJBb0JBQyxPQVZmLFNBQWlCaG5FLEVBQU9zRCxHQUN0QixJQUFJMEUsU0FBY2hJLEVBR2xCLFNBRkFzRCxFQUFtQixNQUFWQSxFQWZZLGlCQWV3QkEsS0FHbEMsVUFBUjBFLEdBQ1UsVUFBUkEsR0FBb0IrK0QsR0FBUzVnRSxLQUFLbkcsS0FDaENBLEdBQVMsR0FBS0EsRUFBUSxHQUFLLEdBQUtBLEVBQVFzRCxHQ2FsQzJqRSxPQUxmLFNBQWtCam5FLEdBQ2hCLE1BQXVCLGlCQUFUQSxHQUNaQSxHQUFTLEdBQUtBLEVBQVEsR0FBSyxHQUFLQSxHQTlCYixrQkMrQm5Ca25FLEdBQWlCLEdBQ3JCQSxHQVppQix5QkFZWUEsR0FYWix5QkFZakJBLEdBWGMsc0JBV1lBLEdBVlgsdUJBV2ZBLEdBVmUsdUJBVVlBLEdBVFosdUJBVWZBLEdBVHNCLDhCQVNZQSxHQVJsQix3QkFTaEJBLEdBUmdCLHlCQVFZLEVBQzVCQSxHQWpDYyxzQkFpQ1lBLEdBaENYLGtCQWlDZkEsR0FwQnFCLHdCQW9CWUEsR0FoQ25CLG9CQWlDZEEsR0FwQmtCLHFCQW9CWUEsR0FoQ2hCLGlCQWlDZEEsR0FoQ2Usa0JBZ0NZQSxHQS9CYixxQkFnQ2RBLEdBL0JhLGdCQStCWUEsR0E5QlQsbUJBK0JoQkEsR0E5QmdCLG1CQThCWUEsR0E3QlosbUJBOEJoQkEsR0E3QmEsZ0JBNkJZQSxHQTVCVCxtQkE2QmhCQSxHQTVCaUIscUJBNEJZLEVBY2RDLE9BTGYsU0FBMEJubkUsR0FDeEIsT0FBT3FqRSxHQUFhcmpFLElBQ2xCaW5FLEdBQVNqbkUsRUFBTXNELFdBQWE0akUsR0FBZWpFLEdBQVdqakUsS0MzQzNDb25FLE9BTmYsU0FBbUJsa0QsR0FDakIsT0FBTyxTQUFTbGpCLEdBQ2QsT0FBT2tqQixFQUFLbGpCLEssUUNKWnFuRSxHQUFtQjdrRSxNQUFZQSxLQUFTOGtFLGFBcUI3QkEsR0FGSUQsR0FBbUJELEdBQVVDLElBQW9CRixHQ2JoRXZtRSxHQUhjbkIsT0FBT2tCLFVBR1FDLGVBcUNsQjJtRSxPQTNCZixTQUF1QnZuRSxFQUFPd25FLEdBQzVCLElBQUlDLEVBQVE3a0UsR0FBUTVDLEdBQ2hCMG5FLEdBQVNELEdBQVNYLEdBQVk5bUUsR0FDOUIybkUsR0FBVUYsSUFBVUMsR0FBU3Y5RCxhQUFTbkssR0FDdEM0bkUsR0FBVUgsSUFBVUMsSUFBVUMsR0FBVUwsR0FBYXRuRSxHQUNyRDZuRSxFQUFjSixHQUFTQyxHQUFTQyxHQUFVQyxFQUMxQ2o3RCxFQUFTazdELEVBQWNqQixHQUFVNW1FLEVBQU1zRCxPQUFRMk4sUUFBVSxHQUN6RDNOLEVBQVNxSixFQUFPckosT0FFcEIsSUFBSyxJQUFJaEQsS0FBT04sR0FDVHduRSxJQUFhNW1FLEdBQWUxQixLQUFLYyxFQUFPTSxJQUN2Q3VuRSxJQUVRLFVBQVB2bkUsR0FFQ3FuRSxJQUFrQixVQUFQcm5FLEdBQTBCLFVBQVBBLElBRTlCc25FLElBQWtCLFVBQVB0bkUsR0FBMEIsY0FBUEEsR0FBOEIsY0FBUEEsSUFFdEQwbUUsR0FBUTFtRSxFQUFLZ0QsS0FFbEJxSixFQUFPaEIsS0FBS3JMLEdBR2hCLE9BQU9xTSxHQzVDTCsxRCxHQUFjampFLE9BQU9rQixVQWdCVm1uRSxPQVBmLFNBQXFCOW5FLEdBQ25CLElBQUl5akUsRUFBT3pqRSxHQUFTQSxFQUFNMkIsWUFHMUIsT0FBTzNCLEtBRnFCLG1CQUFSeWpFLEdBQXNCQSxFQUFLOWlFLFdBQWMraEUsS0NQaERxRixHQUZFN0UsR0FBUXpqRSxPQUFPc0QsS0FBTXRELFFDSWxDbUIsR0FIY25CLE9BQU9rQixVQUdRQyxlQXNCbEJvbkUsT0FiZixTQUFrQnZuRSxHQUNoQixJQUFLcW5FLEdBQVlybkUsR0FDZixPQUFPc25FLEdBQVd0bkUsR0FFcEIsSUFBSWtNLEVBQVMsR0FDYixJQUFLLElBQUlyTSxLQUFPYixPQUFPZ0IsR0FDakJHLEdBQWUxQixLQUFLdUIsRUFBUUgsSUFBZSxlQUFQQSxHQUN0Q3FNLEVBQU9oQixLQUFLckwsR0FHaEIsT0FBT3FNLEdDTU1zN0QsT0FKZixTQUFxQmpvRSxHQUNuQixPQUFnQixNQUFUQSxHQUFpQmluRSxHQUFTam5FLEVBQU1zRCxVQUFZa2hFLEdBQVd4a0UsSUNPakQrQyxPQUpmLFNBQWN0QyxHQUNaLE9BQU93bkUsR0FBWXhuRSxHQUFVOG1FLEdBQWM5bUUsR0FBVXVuRSxHQUFTdm5FLElDakJqRHluRSxPQUpmLFNBQW9Cem5FLEVBQVE2WCxHQUMxQixPQUFPN1gsR0FBVWdtRSxHQUFXbnVELEVBQVF2VixHQUFLdVYsR0FBUzdYLElDTXJDMG5FLE9BVmYsU0FBc0IxbkUsR0FDcEIsSUFBSWtNLEVBQVMsR0FDYixHQUFjLE1BQVZsTSxFQUNGLElBQUssSUFBSUgsS0FBT2IsT0FBT2dCLEdBQ3JCa00sRUFBT2hCLEtBQUtyTCxHQUdoQixPQUFPcU0sR0NSTC9MLEdBSGNuQixPQUFPa0IsVUFHUUMsZUF3QmxCd25FLE9BZmYsU0FBb0IzbkUsR0FDbEIsSUFBS3VRLEdBQVN2USxHQUNaLE9BQU8wbkUsR0FBYTFuRSxHQUV0QixJQUFJNG5FLEVBQVVQLEdBQVlybkUsR0FDdEJrTSxFQUFTLEdBRWIsSUFBSyxJQUFJck0sS0FBT0csR0FDRCxlQUFQSCxJQUF5QituRSxHQUFZem5FLEdBQWUxQixLQUFLdUIsRUFBUUgsS0FDckVxTSxFQUFPaEIsS0FBS3JMLEdBR2hCLE9BQU9xTSxHQ0VNMjdELE9BSmYsU0FBZ0I3bkUsR0FDZCxPQUFPd25FLEdBQVl4bkUsR0FBVThtRSxHQUFjOW1FLEdBQVEsR0FBUTJuRSxHQUFXM25FLElDWnpEOG5FLE9BSmYsU0FBc0I5bkUsRUFBUTZYLEdBQzVCLE9BQU83WCxHQUFVZ21FLEdBQVdudUQsRUFBUWd3RCxHQUFPaHdELEdBQVM3WCxJLFNDTXZDK25FLE9BWGYsU0FBbUJsd0QsRUFBUXFJLEdBQ3pCLElBQUluYSxHQUFTLEVBQ1RsRCxFQUFTZ1YsRUFBT2hWLE9BR3BCLElBREFxZCxJQUFVQSxFQUFROWQsTUFBTVMsTUFDZmtELEVBQVFsRCxHQUNmcWQsRUFBTW5hLEdBQVM4UixFQUFPOVIsR0FFeEIsT0FBT21hLEdDUU04bkQsT0FmZixTQUFxQjluRCxFQUFPK25ELEdBTTFCLElBTEEsSUFBSWxpRSxHQUFTLEVBQ1RsRCxFQUFrQixNQUFUcWQsRUFBZ0IsRUFBSUEsRUFBTXJkLE9BQ25DcWxFLEVBQVcsRUFDWGg4RCxFQUFTLEtBRUpuRyxFQUFRbEQsR0FBUSxDQUN2QixJQUFJdEQsRUFBUTJnQixFQUFNbmEsR0FDZGtpRSxFQUFVMW9FLEVBQU93RyxFQUFPbWEsS0FDMUJoVSxFQUFPZzhELEtBQWMzb0UsR0FHekIsT0FBTzJNLEdDQ01pOEQsT0FKZixXQUNFLE1BQU8sSUNaTGp3RCxHQUhjbFosT0FBT2tCLFVBR2NnWSxxQkFHbkNrd0QsR0FBbUJwcEUsT0FBT3VKLHNCQW1CZjgvRCxHQVZHRCxHQUErQixTQUFTcG9FLEdBQ3hELE9BQWMsTUFBVkEsRUFDSyxJQUVUQSxFQUFTaEIsT0FBT2dCLEdBQ1Rnb0UsR0FBWUksR0FBaUJwb0UsSUFBUyxTQUFTbW1ELEdBQ3BELE9BQU9qdUMsR0FBcUJ6WixLQUFLdUIsRUFBUW1tRCxRQU5SZ2lCLEdDSnRCRyxPQUpmLFNBQXFCendELEVBQVE3WCxHQUMzQixPQUFPZ21FLEdBQVdudUQsRUFBUXd3RCxHQUFXeHdELEdBQVM3WCxJQ09qQ3VvRSxPQVhmLFNBQW1Ccm9ELEVBQU8zTyxHQUt4QixJQUpBLElBQUl4TCxHQUFTLEVBQ1RsRCxFQUFTME8sRUFBTzFPLE9BQ2hCNFMsRUFBU3lLLEVBQU1yZCxTQUVWa0QsRUFBUWxELEdBQ2ZxZCxFQUFNekssRUFBUzFQLEdBQVN3TCxFQUFPeEwsR0FFakMsT0FBT21hLEdDUU1zb0QsR0FsQlF4cEUsT0FBT3VKLHNCQVNxQixTQUFTdkksR0FFMUQsSUFEQSxJQUFJa00sRUFBUyxHQUNObE0sR0FDTHVvRSxHQUFVcjhELEVBQVFtOEQsR0FBV3JvRSxJQUM3QkEsRUFBUzJpRSxHQUFhM2lFLEdBRXhCLE9BQU9rTSxHQU44Qmk4RCxHQ0F4Qk0sT0FKZixTQUF1QjV3RCxFQUFRN1gsR0FDN0IsT0FBT2dtRSxHQUFXbnVELEVBQVEyd0QsR0FBYTN3RCxHQUFTN1gsSUNPbkMwb0UsT0FMZixTQUF3QjFvRSxFQUFRMm9FLEVBQVVDLEdBQ3hDLElBQUkxOEQsRUFBU3k4RCxFQUFTM29FLEdBQ3RCLE9BQU9tQyxHQUFRbkMsR0FBVWtNLEVBQVNxOEQsR0FBVXI4RCxFQUFRMDhELEVBQVk1b0UsS0NEbkQ2b0UsT0FKZixTQUFvQjdvRSxHQUNsQixPQUFPMG9FLEdBQWUxb0UsRUFBUXNDLEdBQU0rbEUsS0NJdkJTLE9BSmYsU0FBc0I5b0UsR0FDcEIsT0FBTzBvRSxHQUFlMW9FLEVBQVE2bkUsR0FBUVcsS0NQekJPLEdBRkF4RSxHQUFVOWpFLEtBQU0sWUNFaEJxTyxHQUZEeTFELEdBQVU5akUsS0FBTSxXQ0VmNmUsR0FGTGlsRCxHQUFVOWpFLEtBQU0sT0NFWGdjLEdBRkQ4bkQsR0FBVTlqRSxLQUFNLFdDYzFCdW9FLEdBQXFCN0UsR0FBUzRFLElBQzlCRSxHQUFnQjlFLEdBQVMva0QsSUFDekI4cEQsR0FBb0IvRSxHQUFTcjFELElBQzdCcTZELEdBQWdCaEYsR0FBUzdrRCxJQUN6QjhwRCxHQUFvQmpGLEdBQVMxbkQsSUFTN0I0c0QsR0FBUzdHLElBR1J1RyxJQW5CYSxxQkFtQkRNLEdBQU8sSUFBSU4sR0FBUyxJQUFJTyxZQUFZLE1BQ2hEbHFELElBMUJRLGdCQTBCRGlxRCxHQUFPLElBQUlqcUQsS0FDbEJ0USxJQXpCWSxvQkF5QkR1NkQsR0FBT3Y2RCxHQUFRdkQsWUFDMUIrVCxJQXpCUSxnQkF5QkQrcEQsR0FBTyxJQUFJL3BELEtBQ2xCN0MsSUF6Qlksb0JBeUJENHNELEdBQU8sSUFBSTVzRCxPQUN6QjRzRCxHQUFTLFNBQVM5cEUsR0FDaEIsSUFBSTJNLEVBQVNzMkQsR0FBV2pqRSxHQUNwQnlqRSxFQS9CUSxtQkErQkQ5MkQsRUFBc0IzTSxFQUFNMkIsaUJBQWN1SSxFQUNqRDgvRCxFQUFhdkcsRUFBT21CLEdBQVNuQixHQUFRLEdBRXpDLEdBQUl1RyxFQUNGLE9BQVFBLEdBQ04sS0FBS1AsR0FBb0IsTUEvQmYsb0JBZ0NWLEtBQUtDLEdBQWUsTUF0Q2YsZUF1Q0wsS0FBS0MsR0FBbUIsTUFyQ2YsbUJBc0NULEtBQUtDLEdBQWUsTUFyQ2YsZUFzQ0wsS0FBS0MsR0FBbUIsTUFyQ2YsbUJBd0NiLE9BQU9sOUQsSUFJSW05RCxVQ3JEWGxwRSxHQUhjbkIsT0FBT2tCLFVBR1FDLGVBcUJsQnFwRSxPQVpmLFNBQXdCdHBELEdBQ3RCLElBQUlyZCxFQUFTcWQsRUFBTXJkLE9BQ2ZxSixFQUFTLElBQUlnVSxFQUFNaGYsWUFBWTJCLEdBT25DLE9BSklBLEdBQTZCLGlCQUFacWQsRUFBTSxJQUFrQi9mLEdBQWUxQixLQUFLeWhCLEVBQU8sV0FDdEVoVSxFQUFPbkcsTUFBUW1hLEVBQU1uYSxNQUNyQm1HLEVBQU9zTixNQUFRMEcsRUFBTTFHLE9BRWhCdE4sR0NqQk11OUQsR0FGRWhwRSxLQUFLZ3BFLFdDWVBDLE9BTmYsU0FBMEJDLEdBQ3hCLElBQUl6OUQsRUFBUyxJQUFJeTlELEVBQVl6b0UsWUFBWXlvRSxFQUFZQyxZQUVyRCxPQURBLElBQUlILEdBQVd2OUQsR0FBUTdILElBQUksSUFBSW9sRSxHQUFXRSxJQUNuQ3o5RCxHQ0dNMjlELE9BTGYsU0FBdUJDLEVBQVVwckQsR0FDL0IsSUFBSUQsRUFBU0MsRUFBU2dyRCxHQUFpQkksRUFBU3JyRCxRQUFVcXJELEVBQVNyckQsT0FDbkUsT0FBTyxJQUFJcXJELEVBQVM1b0UsWUFBWXVkLEVBQVFxckQsRUFBU0MsV0FBWUQsRUFBU0YsYUNYcEVJLEdBQVUsT0FlQ0MsT0FOZixTQUFxQnBNLEdBQ25CLElBQUkzeEQsRUFBUyxJQUFJMnhELEVBQU8zOEQsWUFBWTI4RCxFQUFPaG1ELE9BQVFteUQsR0FBUXBnRSxLQUFLaTBELElBRWhFLE9BREEzeEQsRUFBT2crRCxVQUFZck0sRUFBT3FNLFVBQ25CaCtELEdDVkxpK0QsR0FBYzlxRSxHQUFTQSxHQUFPYSxlQUFZdUosRUFDMUMyZ0UsR0FBZ0JELEdBQWNBLEdBQVl4d0QsYUFBVWxRLEVBYXpDNGdFLE9BSmYsU0FBcUJsa0IsR0FDbkIsT0FBT2lrQixHQUFnQnByRSxPQUFPb3JFLEdBQWMzckUsS0FBSzBuRCxJQUFXLElDQy9DbWtCLE9BTGYsU0FBeUJDLEVBQVk3ckQsR0FDbkMsSUFBSUQsRUFBU0MsRUFBU2dyRCxHQUFpQmEsRUFBVzlyRCxRQUFVOHJELEVBQVc5ckQsT0FDdkUsT0FBTyxJQUFJOHJELEVBQVdycEUsWUFBWXVkLEVBQVE4ckQsRUFBV1IsV0FBWVEsRUFBVzFuRSxTQ2dFL0QybkUsT0FwQ2YsU0FBd0J4cUUsRUFBUWtyQixFQUFLeE0sR0FDbkMsSUFBSXNrRCxFQUFPaGpFLEVBQU9rQixZQUNsQixPQUFRZ3FCLEdBQ04sSUEzQmlCLHVCQTRCZixPQUFPdytDLEdBQWlCMXBFLEdBRTFCLElBdkNVLG1CQXdDVixJQXZDVSxnQkF3Q1IsT0FBTyxJQUFJZ2pFLEdBQU1oakUsR0FFbkIsSUFqQ2Msb0JBa0NaLE9BQU82cEUsR0FBYzdwRSxFQUFRMGUsR0FFL0IsSUFuQ2Esd0JBbUNJLElBbENKLHdCQW1DYixJQWxDVSxxQkFrQ0ksSUFqQ0gsc0JBaUNrQixJQWhDbEIsc0JBaUNYLElBaENXLHNCQWdDSSxJQS9CRyw2QkErQm1CLElBOUJ6Qix1QkE4QnlDLElBN0J6Qyx1QkE4QlYsT0FBTzRyRCxHQUFnQnRxRSxFQUFRMGUsR0FFakMsSUFqRFMsZUFrRFAsT0FBTyxJQUFJc2tELEVBRWIsSUFuRFksa0JBb0RaLElBakRZLGtCQWtEVixPQUFPLElBQUlBLEVBQUtoakUsR0FFbEIsSUF0RFksa0JBdURWLE9BQU9pcUUsR0FBWWpxRSxHQUVyQixJQXhEUyxlQXlEUCxPQUFPLElBQUlnakUsRUFFYixJQXpEWSxrQkEwRFYsT0FBT3FILEdBQVlycUUsS0NyRXJCeXFFLEdBQWV6ckUsT0FBT1ksT0EwQlg4cUUsR0FoQkcsV0FDaEIsU0FBUzFxRSxLQUNULE9BQU8sU0FBU2l0RCxHQUNkLElBQUsxOEMsR0FBUzA4QyxHQUNaLE1BQU8sR0FFVCxHQUFJd2QsR0FDRixPQUFPQSxHQUFheGQsR0FFdEJqdEQsRUFBT0UsVUFBWStzRCxFQUNuQixJQUFJL2dELEVBQVMsSUFBSWxNLEVBRWpCLE9BREFBLEVBQU9FLGVBQVl1SixFQUNaeUMsR0FaTyxHQ0lIeStELE9BTmYsU0FBeUIzcUUsR0FDdkIsTUFBcUMsbUJBQXRCQSxFQUFPa0IsYUFBOEJtbUUsR0FBWXJuRSxHQUU1RCxHQURBMHFFLEdBQVcvSCxHQUFhM2lFLEtDSWY0cUUsT0FKZixTQUFtQnJyRSxHQUNqQixPQUFPcWpFLEdBQWFyakUsSUFWVCxnQkFVbUI4cEUsR0FBTzlwRSxJQ1RuQ3NyRSxHQUFZOW9FLE1BQVlBLEtBQVMrb0UsTUFxQnRCQSxHQUZIRCxHQUFZbEUsR0FBVWtFLElBQWFELEdDUGhDRyxPQUpmLFNBQW1CeHJFLEdBQ2pCLE9BQU9xakUsR0FBYXJqRSxJQVZULGdCQVVtQjhwRSxHQUFPOXBFLElDVG5DeXJFLEdBQVlqcEUsTUFBWUEsS0FBU2twRSxNQXFCdEJBLEdBRkhELEdBQVlyRSxHQUFVcUUsSUFBYUQsR0NpQzNDRyxHQUFnQixHQUNwQkEsR0E5QmMsc0JBOEJXQSxHQTdCVixrQkE4QmZBLEdBZnFCLHdCQWVXQSxHQWRkLHFCQWVsQkEsR0E5QmMsb0JBOEJXQSxHQTdCWCxpQkE4QmRBLEdBZmlCLHlCQWVXQSxHQWRYLHlCQWVqQkEsR0FkYyxzQkFjV0EsR0FiVix1QkFjZkEsR0FiZSx1QkFhV0EsR0E1QmIsZ0JBNkJiQSxHQTVCZ0IsbUJBNEJXQSxHQTNCWCxtQkE0QmhCQSxHQTNCZ0IsbUJBMkJXQSxHQTFCZCxnQkEyQmJBLEdBMUJnQixtQkEwQldBLEdBekJYLG1CQTBCaEJBLEdBaEJlLHVCQWdCV0EsR0FmSiw4QkFnQnRCQSxHQWZnQix3QkFlV0EsR0FkWCx5QkFjc0MsRUFDdERBLEdBckNlLGtCQXFDV0EsR0FwQ1oscUJBcUNkQSxHQTVCaUIscUJBNEJXLEVBOEZiQyxPQTVFZixTQUFTQSxFQUFVNXJFLEVBQU82ckUsRUFBU25GLEVBQVlwbUUsRUFBS0csRUFBUTA1QyxHQUMxRCxJQUFJeHRDLEVBQ0F3UyxFQW5FZ0IsRUFtRVAwc0QsRUFDVEMsRUFuRWdCLEVBbUVQRCxFQUNURSxFQW5FbUIsRUFtRVZGLEVBS2IsR0FISW5GLElBQ0YvNUQsRUFBU2xNLEVBQVNpbUUsRUFBVzFtRSxFQUFPTSxFQUFLRyxFQUFRMDVDLEdBQVN1c0IsRUFBVzFtRSxTQUV4RGtLLElBQVh5QyxFQUNGLE9BQU9BLEVBRVQsSUFBS3FFLEdBQVNoUixHQUNaLE9BQU9BLEVBRVQsSUFBSXluRSxFQUFRN2tFLEdBQVE1QyxHQUNwQixHQUFJeW5FLEdBRUYsR0FEQTk2RCxFQUFTczlELEdBQWVqcUUsSUFDbkJtZixFQUNILE9BQU9xcEQsR0FBVXhvRSxFQUFPMk0sT0FFckIsQ0FDTCxJQUFJZ2YsRUFBTW0rQyxHQUFPOXBFLEdBQ2Jnc0UsRUE5RU0scUJBOEVHcmdELEdBN0VKLDhCQTZFc0JBLEVBRS9CLEdBQUl4aEIsYUFBU25LLEdBQ1gsT0FBT2lmLGFBQVlqZixFQUFPbWYsR0FFNUIsR0EvRVksbUJBK0VSd00sR0F4Rk0sc0JBd0ZjQSxHQUFtQnFnRCxJQUFXdnJFLEdBRXBELEdBREFrTSxFQUFVbS9ELEdBQVVFLEVBQVUsR0FBS1osR0FBZ0JwckUsSUFDOUNtZixFQUNILE9BQU8yc0QsRUFDSDVDLEdBQWNscEUsRUFBT3VvRSxHQUFhNTdELEVBQVEzTSxJQUMxQytvRSxHQUFZL29FLEVBQU9rb0UsR0FBV3Y3RCxFQUFRM00sUUFFdkMsQ0FDTCxJQUFLMnJFLEdBQWNoZ0QsR0FDakIsT0FBT2xyQixFQUFTVCxFQUFRLEdBRTFCMk0sRUFBU3MrRCxHQUFlanJFLEVBQU8yckIsRUFBS3hNLElBSXhDZzdCLElBQVVBLEVBQVEsSUFBSWdzQixJQUN0QixJQUFJOEYsRUFBVTl4QixFQUFNdjZDLElBQUlJLEdBQ3hCLEdBQUlpc0UsRUFDRixPQUFPQSxFQUVUOXhCLEVBQU1yMUMsSUFBSTlFLEVBQU8yTSxHQUViKytELEdBQU0xckUsR0FDUkEsRUFBTThHLFNBQVEsU0FBU29sRSxHQUNyQnYvRCxFQUFPcVQsSUFBSTRyRCxFQUFVTSxFQUFVTCxFQUFTbkYsRUFBWXdGLEVBQVVsc0UsRUFBT202QyxPQUU5RG94QixHQUFNdnJFLElBQ2ZBLEVBQU04RyxTQUFRLFNBQVNvbEUsRUFBVTVyRSxHQUMvQnFNLEVBQU83SCxJQUFJeEUsRUFBS3NyRSxFQUFVTSxFQUFVTCxFQUFTbkYsRUFBWXBtRSxFQUFLTixFQUFPbTZDLE9BSXpFLElBQUlpdkIsRUFBVzJDLEVBQ1ZELEVBQVN2QyxHQUFlRCxHQUN4QndDLEVBQVN4RCxPQUFTdmxFLEdBRW5COFEsRUFBUTR6RCxPQUFRdjlELEVBQVlrL0QsRUFBU3BwRSxHQVN6QyxPQVJBb21FLEdBQVV2eUQsR0FBUzdULEdBQU8sU0FBU2tzRSxFQUFVNXJFLEdBQ3ZDdVQsSUFFRnE0RCxFQUFXbHNFLEVBRFhNLEVBQU00ckUsSUFJUjNGLEdBQVk1NUQsRUFBUXJNLEVBQUtzckUsRUFBVU0sRUFBVUwsRUFBU25GLEVBQVlwbUUsRUFBS04sRUFBT202QyxPQUV6RXh0QyxHQzlITXUxRCxPQUpmLFNBQWVsaUUsR0FDYixPQUFPNHJFLEdBQVU1ckUsRUE3Qk0sSUNpQlZtc0UsT0FYZixTQUFrQnhyRCxFQUFPMGxELEdBS3ZCLElBSkEsSUFBSTcvRCxHQUFTLEVBQ1RsRCxFQUFrQixNQUFUcWQsRUFBZ0IsRUFBSUEsRUFBTXJkLE9BQ25DcUosRUFBUzlKLE1BQU1TLEtBRVZrRCxFQUFRbEQsR0FDZnFKLEVBQU9uRyxHQUFTNi9ELEVBQVMxbEQsRUFBTW5hLEdBQVFBLEVBQU9tYSxHQUVoRCxPQUFPaFUsR0NXTXkvRCxPQUxmLFNBQWtCcHNFLEdBQ2hCLE1BQXVCLGlCQUFUQSxHQUNYcWpFLEdBQWFyakUsSUFyQkYsbUJBcUJZaWpFLEdBQVdqakUsSUN3QnZDLFNBQVNxc0UsR0FBUW5wRCxFQUFNb3BELEdBQ3JCLEdBQW1CLG1CQUFScHBELEdBQW1DLE1BQVpvcEQsR0FBdUMsbUJBQVpBLEVBQzNELE1BQU0sSUFBSXY3RCxVQWhEUSx1QkFrRHBCLElBQUl3N0QsRUFBVyxXQUNiLElBQUl2OUQsRUFBTzVHLFVBQ1A5SCxFQUFNZ3NFLEVBQVdBLEVBQVM3aEUsTUFBTWhHLEtBQU11SyxHQUFRQSxFQUFLLEdBQ25ENHVELEVBQVEyTyxFQUFTM08sTUFFckIsR0FBSUEsRUFBTTV0RCxJQUFJMVAsR0FDWixPQUFPczlELEVBQU1oK0QsSUFBSVUsR0FFbkIsSUFBSXFNLEVBQVN1VyxFQUFLelksTUFBTWhHLEtBQU11SyxHQUU5QixPQURBdTlELEVBQVMzTyxNQUFRQSxFQUFNOTRELElBQUl4RSxFQUFLcU0sSUFBV2l4RCxFQUNwQ2p4RCxHQUdULE9BREE0L0QsRUFBUzNPLE1BQVEsSUFBS3lPLEdBQVE5bkUsT0FBU3doRSxJQUNoQ3dHLEVBSVRGLEdBQVE5bkUsTUFBUXdoRSxHQUVEc0csVUMvQ0FHLElDdEJYQyxHQUFhLG1HQUdiQyxHQUFlLFdBb0JKQyxHRGJmLFNBQXVCenBELEdBQ3JCLElBQUl2VyxFQUFTMC9ELEdBQVFucEQsR0FBTSxTQUFTNWlCLEdBSWxDLE9BZm1CLE1BWWZzOUQsRUFBTXBrQixNQUNSb2tCLEVBQU1qNUQsUUFFRHJFLEtBR0xzOUQsRUFBUWp4RCxFQUFPaXhELE1BQ25CLE9BQU9qeEQsRUNQVTYvRCxFQUFjLFNBQVM3bEIsR0FDeEMsSUFBSWg2QyxFQUFTLEdBT2IsT0FONkIsS0FBekJnNkMsRUFBTzF2QyxXQUFXLElBQ3BCdEssRUFBT2hCLEtBQUssSUFFZGc3QyxFQUFPL2dELFFBQVE2bUUsSUFBWSxTQUFTdG9FLEVBQU9DLEVBQVF3b0UsRUFBT0MsR0FDeERsZ0UsRUFBT2hCLEtBQUtpaEUsRUFBUUMsRUFBVWpuRSxRQUFROG1FLEdBQWMsTUFBU3RvRSxHQUFVRCxNQUVsRXdJLEtDSE1tZ0UsT0FSZixTQUFlOXNFLEdBQ2IsR0FBb0IsaUJBQVRBLEdBQXFCb3NFLEdBQVNwc0UsR0FDdkMsT0FBT0EsRUFFVCxJQUFJMk0sRUFBVTNNLEVBQVEsR0FDdEIsTUFBa0IsS0FBVjJNLEdBQWtCLEVBQUkzTSxJQWRqQixJQWN3QyxLQUFPMk0sR0NSMURpK0QsR0FBYzlxRSxHQUFTQSxHQUFPYSxlQUFZdUosRUFDMUM2aUUsR0FBaUJuQyxHQUFjQSxHQUFZNW1FLGNBQVdrRyxFQTBCM0M4aUUsT0FoQmYsU0FBU0EsRUFBYWh0RSxHQUVwQixHQUFvQixpQkFBVEEsRUFDVCxPQUFPQSxFQUVULEdBQUk0QyxHQUFRNUMsR0FFVixPQUFPbXNFLEdBQVNuc0UsRUFBT2d0RSxHQUFnQixHQUV6QyxHQUFJWixHQUFTcHNFLEdBQ1gsT0FBTytzRSxHQUFpQkEsR0FBZTd0RSxLQUFLYyxHQUFTLEdBRXZELElBQUkyTSxFQUFVM00sRUFBUSxHQUN0QixNQUFrQixLQUFWMk0sR0FBa0IsRUFBSTNNLElBM0JqQixJQTJCd0MsS0FBTzJNLEdDTi9DM0ksT0FKZixTQUFrQmhFLEdBQ2hCLE9BQWdCLE1BQVRBLEVBQWdCLEdBQUtndEUsR0FBYWh0RSxJQ1E1Qml0RSxPQVBmLFNBQWdCanRFLEdBQ2QsT0FBSTRDLEdBQVE1QyxHQUNIbXNFLEdBQVNuc0UsRUFBTzhzRSxJQUVsQlYsR0FBU3BzRSxHQUFTLENBQUNBLEdBQVN3b0UsR0FBVW1FLEdBQWEzb0UsR0FBU2hFLE0saUJDRHREa3RFLE9BSmYsU0FBbUJsdEUsR0FDakIsT0FBTzRyRSxHQUFVNXJFLEVBQU9tdEUsSSx3akJDbEJiQyxHQUFlLFNBQUNwdEUsR0FBRCxPQUMxQjZDLGtCQUQwQixJQUNGN0MsVUFHYndrRSxHQUFhLFNBQUNqNkQsR0FBRCx5QkFDakJBLEdBR0l5RyxHQUFXLFNBQUN6RyxHQUFELE9BQ3RCQSxVQURzQixpQkFDQ0EsR0FHWjhpRSxHQUFZLFNBQUM5aUUsR0FBRCxPQUN2QjBHLE9BQU9sUCxXQUFXdXJFLE9BQWxCcjhELE9BRHVCLEdBSVpzOEQsR0FBVyxTQUFDaGpFLEdBQUQsMEJBQ3RCOUssbUNBT1crdEUsR0FBa0IsU0FBQ2xnRSxHQUFELFdBQzdCNEYscUJBR1d1NkQsR0FBWSxTQUFDenRFLEdBQUQsT0FDdkJnUixPQUFtQnd6RCxHQUFXeGtFLEVBRFAsTyxTQWlDVDB0RSxHQUNkbmpFLEVBQ0FqSyxFQUNBcXRFLEVBQ0E5c0Usa0JBQVksR0FHWixJQURBLElBQU0yRSxFQUFPeW5FLEdBQWIsR0FDTzFpRSxHQUFPMUosRUFBSTJFLEVBQWxCLFFBQ0UrRSxFQUFNQSxFQUFJL0UsRUFBSzNFLE1BRWpCLFlBQU8wSixRQUFQLEUsU0EyQmNxakUsR0FBTXJqRSxFQUFVL0UsRUFBY3hGLEdBTTVDLElBTEEsSUFBSTZWLEVBQVdxc0QsR0FBZixHQUNJMkwsRUFBSixFQUNJOXVFLEVBQUosRUFDSSt1RSxFQUFZYixHQUFoQixHQUVPbHVFLEVBQUkrdUUsU0FBWCxFQUFpQy91RSxJQUFLLENBQ3BDLElBQU1ndkUsRUFBc0JELEVBQTVCLEdBQ0lFLEVBQWtCTixHQUFNbmpFLEVBQUt1akUsVUFBbUIvdUUsRUFBcEQsSUFFQSxHQUFJaXZFLElBQWVoOUQsT0FBd0JuTyxjQUEzQyxJQUNFZ3JFLEVBQVNBLEtBQXNCM0wsR0FBL0IyTCxPQUNLLENBQ0wsSUFBTUksRUFBbUJILEVBQVUvdUUsRUFBbkMsR0FDQTh1RSxFQUFTQSxLQUNQUixPQUF1QkMsV0FBdkJELEtBREZRLElBTUosT0FBSzl1RSxRQUFELEdBQXlCK3VFLEVBQXpCLE1BQUosRUFDRSxRQUdGLElBQUk5dEUsU0FDSzZ0RSxFQUFPQyxFQUFkLElBRUFELEVBQU9DLEVBQVBELE1BS0U5dUUsWUFBSixJQUFlaUIsVUFDTjZWLEVBQUlpNEQsRUFBWCxJQUdGLEcsU0FVY0ksR0FDZHp0RSxFQUNBVCxFQUNBMGYsRUFDQXl1RCxRQURBenVELFVBQWUsSUFBSXhDLGNBQ25CaXhELFVBQWdCLElBRWhCLGNBQWMxdUUsWUFBZCxrQkFBbUMsQ0FBOUIsSUFBSW1qQixFQUFDLEVBQUwsR0FDRy9KLEVBQU1wWSxFQUFaLEdBQ0l1USxHQUFKLEdBQ08wTyxNQUFMLEtBQ0VBLFNBRHFCLEdBS3JCeXVELEtBQWN0ckUsb0JBQWRzckUsR0FDQUQsR0FBc0JyMUQsRUFBSzdZLEVBQU8wZixFQUFTeXVELEVBQTNDRCxLQUdGQyxPQUlKLFMsSUN6S1dDLEdBQWdCbDdELDZCQUF0QixHQUdNbTdELEdBQWlCRCxHQUF2QixTQUNNRSxHQUFpQkYsR0FBdkIsU0FFUCxTQUFnQkcsS0FDZCxJQUFNQyxFQUFTdDdELHFCQUFmLElBT0EsT0FMQSxvQkFLQSxFQ29DRixTQUFTdTdELEdBQVQsS0FJRSxPQUFRQyxFQUFSLE1BQ0UsaUJBQ0UsZ0JBQW1CMThELE9BQVEwOEQsRUFBSTErQixVQUNqQyxrQkFDRSxnQkFBbUIyK0IsUUFBU0QsRUFBSTErQixVQUNsQyxpQkFDRSxPQUFJNCtCLEtBQVFoNkQsRUFBRCxPQUFlODVELEVBQTFCLFNBQ0UsRUFHRixTQUFtQkcsT0FBUUgsRUFBSTErQixVQUNqQyxpQkFDRSxnQkFBbUJwbEMsT0FBUThqRSxFQUFJMStCLFVBQ2pDLHVCQUNFLGdCQUFtQjgrQixhQUFjSixFQUFJMStCLFVBQ3ZDLHVCQUNFLGdCQUFtQisrQixhQUFjTCxFQUFJMStCLFVBQ3ZDLHNCQUNFLGdCQUVFaCtCLE9BQVE0N0QsR0FBTWg1RCxFQUFELE9BQWU4NUQsVUFBZixNQUFrQ0EsVUFBbEMsU0FFakIsd0JBQ0UsZ0JBRUVDLFFBQVNmLEdBQU1oNUQsRUFBRCxRQUFnQjg1RCxVQUFoQixNQUFtQ0EsVUFBbkMsU0FFbEIsc0JBQ0UsZ0JBRUVHLE9BQVFqQixHQUFNaDVELEVBQUQsT0FBZTg1RCxVQUFmLE1BQWtDQSxVQUFsQyxTQUVqQixpQkFDRSxrQkFBc0JBLEVBQXRCLFNBQ0YsdUJBQ0UsT0FBT0EsVUFBUCxHQUNGLHFCQUNFLGdCQUVFQyxRQUFTVCxHQUNQdDVELEVBRDRCLFFBRmhDLEdBTUVrNkQsY0FORixFQU9FRSxZQUFhcDZELGNBQW9CLElBRXJDLHFCQUtBLHFCQUNFLGdCQUVFazZELGNBQWMsSUFFbEIsUUFDRSxVQUtOLElBQU1HLEdBQU4sR0FDTUMsR0FBTixHQVVBLFNBQWdCQyxNLFFBQ2RDLDRCQUFtQkEsR0FBQSxFLElBQ25CQywwQkFBaUJBLEdBQUEsRSxJQUNqQkMsMkJBQWtCQSxHQUFBLEVBQ2xCQyxtQixJQUNBQyw4QkFBcUJBLEdBQUEsRUFDckJDLGFBQ0duUSxpSEFFR3pyRCxFQUFRLEdBQUgsQ0FDVHU3RCxpQkFEUyxFQUVUQyxlQUZTLEVBR1RDLGdCQUhTLEVBSVRHLFlBSkYsR0FPTUMsRUFBZ0J4OEQsaUJBQWFXLEVBQW5DLGVBQ004N0QsRUFBZ0J6OEQsaUJBQWFXLGlCQUFuQyxJQUNNKzdELEVBQWlCMThELGlCQUFhVyxrQkFBcEMsSUFDTWc4RCxFQUFnQjM4RCxpQkFBYVcsRUFBbkMsZUFDTTBOLEVBQVlyTyxrQkFBbEIsR0FDTTQ4RCxFQUFnQjU4RCxpQkFBdEIsSUFDQUEscUJBQWdCLFdBQ2QsSUFERkEsSUFVQUEscUJBQWdCLFdBR2QsT0FGQXFPLGFBRU8sV0FDTEEsZ0JBSkpyTyxJLE1BUTBCLHdCQUVULENBQ2ZsQixPQUFRNkIsRUFETyxjQUVmZzdELE9BQVFoN0QsaUJBRk8sR0FHZjg2RCxRQUFTOTZELGtCQUhNLEdBSWZqSixPQUFRaUosRUFKTyxjQUtmaTdELGNBTGUsRUFNZkMsY0FOZSxFQU9mQyxZQUFhLElBVFJwNkQsT0FBT2tnQyxPQVlSaTdCLEVBQXFCLHVCQUN6QixjQUNFLE9BQU8sSUFBSXhnRSxTQUFRLGNBQ2pCLElBQU15Z0UsRUFBdUJuOEQsYUFBN0IsR0FDQSxNQUFJbThELEVBRUZoa0UsTUFDU3loRSxHQUFKLEdBQ0p1QyxRQUNDLFNBQUFuQixHQUNFN2lFLEVBQVE2aUUsR0FBUjdpRSxPQUVGLFNBQUFpa0UsR0FRRWhrRSxRQUlKRCxVQUlOLENBQUM2SCxFQTVCSCxXQWtDTXE4RCxFQUFzQix1QkFDMUIsY0FDRSxJQUFNQyxFQUFtQnQ4RCxFQUF6QixpQkFDTXU4RCxFQUFTNUwsTUFDWDJMLEVBRFczTCxHQUFmLEVBR001NEQsRUFDSnlrRSxHQUFTRCxFQUFUQyxXQUNJRCxlQURKQyxHQXMxQlIsU0FDRXIrRCxFQUNBbytELEVBQ0FFLEVBQ0FuN0QsUUFEQW03RCxXQUFnQixRQUNoQm43RCxVQUFlLElBRWYsSUFBTW83RCxFQVVSLFNBQWdCQyxFQUNkeCtELEdBRUEsSUFBSXpMLEVBQUosR0FDQSxJQUFLLElBQUwsT0FDRSxHQUFJOUcsdUNBQUosR0FBcUQsQ0FDbkQsSUFBTWEsRUFBTTJRLE9BQVosSUFDQSxJQUFJcE8sY0FBY21QLEVBQWRuUCxJQUNGMEQsS0FBWXlMLEVBQUEsUUFBZ0IsWUFDMUIsT0FBSW5QLHNCQUFpQ3l1RCxHQUFyQyxHQUNTa2YsRUFBUCxHQUVPeHdFLGNBQVAsS0FHS3N4RCxHQUFjdC9DLEVBQWxCLElBQ0x6TCxLQUFZaXFFLEVBQXlCeCtELEVBQXJDekwsSUFFQUEsS0FBWXlMLFVBQXFCQSxFQUFyQkEsUUFBWnpMLEVBSU4sU0FoQ21DaXFFLENBQW5DLEdBQ0EsT0FBT0osRUFBT0UsRUFBTyxlQUFkLGNBQXlELENBQzlERyxZQUQ4RCxFQUU5RHQ3RCxRQUFTQSxJQTcxQkR1N0QsQ0FBa0IxK0QsRUFIeEIsR0FJQSxPQUFPLElBQUl6QyxTQUFRLGNBQ2pCM0QsUUFDRSxXQUNFSSxTQUVGLFlBS0Usb0JBQUlZLE9BQ0ZaLEVBc3pCZCxTQUF3QzJrRSxHQUN0QyxJQUFJOUIsRUFBSixHQUNBLEdBQUk4QixFQUFKLE1BQW9CLENBQ2xCLE9BQUlBLGVBQ0YsT0FBTy9DLEdBQU1pQixFQUFROEIsRUFBVCxLQUF3QkEsRUFBcEMsU0FFRixNQUFnQkEsRUFBaEIsOERBQWdDLHlGQUF2Qi9qRSxFQUF1QixFQUN6QjhnRSxHQUFNbUIsRUFBUWppRSxFQUFuQixRQUNFaWlFLEVBQVNqQixHQUFNaUIsRUFBUWppRSxFQUFULEtBQW1CQSxFQUFqQ2lpRSxXQUlOLFNBbDBCb0IrQixDQUFSNWtFLElBVUFDLGFBTVYsQ0FBQzRILEVBckNILG1CQXdDTWc5RCxFQUFnQyx1QkFDcEMsY0FDRSxPQUFPLElBQUl0aEUsU0FBUSxTQUFBdkQsR0FBTyxPQUN4QkEsRUFBUThqRSxzQkFEZ0IsU0FGOUIsSUFTTWdCLEVBQTJCLHVCQUMvQixZQUNFLElBQU1DLEVBQW9DdHhFLE9BQUEsS0FDeENxd0UsRUFEd0MsaUJBRWpDLFNBQUE5bEUsR0FBQyxPQUFJdzZELEdBQVdzTCxhQUFmLGFBR0prQixFQUNKRCxFQUFBLFNBQ0lBLEVBQUEsS0FBNEIsU0FBQS9tRSxHQUFDLE9BQzNCNm1FLEVBQThCN21FLEVBQUcwakUsR0FBTTE3RCxFQURaLE9BRzdCLENBQUN6QyxnQkFMUCxvQ0FPQSxPQUFPQSxRQUFBLGFBQW1DLG1CQUN4QzBoRSxFQUFBLFFBQXVCLGdCQUNyQiwwQ0FBSUMsR0FHSixJQUNFdGhCLEVBQU9nZSxHQUFNaGUsRUFBTW1oQixFQUFQLEdBQVpuaEIsSUFIQSxJQUhvQyxTQVk1QyxDQTFCRixJQThCTXVoQixFQUFvQix1QkFDeEIsWUFDRSxPQUFPNWhFLFFBQUEsSUFBWSxDQUNqQnVoRSxFQURpQixHQUVqQmo5RCxtQkFBeUJxOEQsRUFBekJyOEQsR0FGaUIsR0FHakJBLFdBQWlCazhELEVBQWpCbDhELEdBSEssV0FJQyxZLElBQUV1OUQsT0FBYUMsT0FBY0MsT0FLbkMsT0FKdUIsT0FDckIsQ0FBQ0YsRUFBYUMsRUFETyxHQUVyQixDQUFFaFAscUJBS1IsQ0FDRXh1RCxFQURGLFNBRUVBLEVBRkYscUJBZEYsSUE4Qk0wOUQsRUFBOEJDLElBQ2xDLFlBQ0UsWUFERHgvRCxVQUFpQjRDLEVBQU01QyxRQUNmK2hCLG9DQUF5QixHQUFELGFBQWMsV0FDM0MsT0FBT285QyxFQUFBLFNBQ0MsU0FBQU0sR0FJSixPQUhNbHdELEVBQU4sU0FDRXV6QixFQUFTLENBQUU5c0MsS0FBRixhQUFzQmdvQyxRQUFTeWhDLElBRTFDLEtBTEcsT0FPRSxTQUFBeEIsR0FDRDF0RSxXQWFSbXZFLEVBQStCRixJQUNuQyxZQUVFLFlBRkR4L0QsVUFBaUI0QyxFQUFNNUMsUUFDdEI4aUMsRUFBUyxDQUFFOXNDLEtBQUYsbUJBQTRCZ29DLFNBQVMsSUFDdkNtaEMsRUFBQSxTQUErQixTQUFBTSxHQU9wQyxPQU5NbHdELEVBQU4sVUFDRXV6QixFQUFTLENBQUU5c0MsS0FBRixtQkFBNEJnb0MsU0FBUyxJQUN6QzQrQixLQUFRaDZELEVBQUQsT0FBWixJQUNFa2dDLEVBQVMsQ0FBRTlzQyxLQUFGLGFBQXNCZ29DLFFBQVN5aEMsS0FHNUMsUUFLTnYrRCxxQkFBZ0IsV0FDVm84RCxJQUFKLElBQXVCL3RELFdBQ3JCZ3dELEVBQTRCN0IsRUFBNUI2QixXQUVELENBQUNqQyxFQUpKcDhELElBTUEsSUFBTXkrRCxFQUFZLHVCQUNoQixZQUNFLElBQU0zL0QsRUFDSjRtRCxHQUFhQSxFQUFiQSxPQUNJQSxFQURKQSxPQUVJOFcsRUFITixRQUlNYixFQUNKalcsR0FBYUEsRUFBYkEsT0FDSUEsRUFESkEsT0FFSStXLFVBQ0FBLEVBREFBLFFBRUE5N0QsaUJBTE4sR0FNTTg2RCxFQUNKL1YsR0FBYUEsRUFBYkEsUUFDSUEsRUFESkEsUUFFSWdYLFVBQ0FBLEVBREFBLFFBRUEvN0Qsa0JBTE4sR0FNTWpKLEVBQ0pndUQsR0FBYUEsRUFBYkEsT0FDSUEsRUFESkEsT0FFSWlYLFVBQ0FBLEVBREFBLFFBRUFoOEQsRUFMTixjQU1BNjdELFlBQ0FDLFlBQ0FDLFlBQ0FDLFlBRUEsSUFBTStCLEVBQWEsV0FDakI5OEIsRUFBUyxDQUNQOXNDLEtBRE8sYUFFUGdvQyxRQUFTLENBQ1A4K0IsZUFBYyxLQUFpQmxXLEVBRHhCLGFBRVBpVyxPQUZPLEVBR1BGLFFBSE8sRUFJUC9qRSxPQUpPLEVBS1BvSCxPQUxPLEVBTVArOEQsZUFBYyxLQUFpQm5XLEVBTnhCLGFBT1BvVyxZQUNFLEdBQ0VwVyxFQURGLDhCQUVPQSxFQUFQLFlBQ0lBLEVBSEosWUFJSSxNQUtaLEdBQUkva0QsRUFBSixRQUFtQixDQUNqQixJQUFNZytELEVBQXdCaCtELFVBQzVCZSxFQUQ0QmYsT0FBOUIsR0FLSTQ1RCxHQUFKLEdBQ0dvRSxVQUVERCxTQUdGQSxNQUdKLENBQUMvOUQsRUFBRCxjQUFzQkEsRUFBdEIsY0FBMkNBLEVBaEU3QyxpQkFtRUFYLHFCQUFnQixXQUNkLElBQ0V3OEQsVUFBd0I3N0QsRUFBeEI2N0QsaUJBRUQsQ0FBQ0YsRUFBb0IzN0QsRUFKeEJYLGdCQU1BQSxxQkFBZ0IsV0FFWnM4RCxRQUNBanVELFlBQ0NxdEQsS0FBUWMsRUFBRCxRQUF3Qjc3RCxFQUhsQyxpQkFLRTY3RCxVQUF3Qjc3RCxFQUF4QjY3RCxjQUNBaUMsT0FFRCxDQUFDbkMsRUFBb0IzN0QsRUFBckIsY0FUSFgsSUFXQUEscUJBQWdCLFdBRVpzOEQsUUFDQWp1RCxZQUNDcXRELEtBQVFlLEVBQUQsUUFBd0I5N0QsRUFIbEMsaUJBS0U4N0QsVUFBd0I5N0QsaUJBQXhCODdELEdBQ0E3NkIsRUFBUyxDQUNQOXNDLEtBRE8sYUFFUGdvQyxRQUFTbjhCLGlCQUF1Qm83RCxRQUduQyxDQUFDTyxFQUFvQjM3RCxFQVp4QlgsZ0JBY0FBLHFCQUFnQixXQUVaczhELFFBQ0FqdUQsWUFDQ3F0RCxLQUFRZ0IsRUFBRCxRQUF5Qi83RCxFQUhuQyxrQkFLRSs3RCxVQUF5Qi83RCxrQkFBekIrN0QsR0FDQTk2QixFQUFTLENBQ1A5c0MsS0FETyxjQUVQZ29DLFFBQVNuOEIsa0JBQXdCcTdELFFBR3BDLENBQUNNLEVBQW9CMzdELEVBWnhCWCxpQkFjQUEscUJBQWdCLFdBRVpzOEQsUUFDQWp1RCxZQUNDcXRELEtBQVFpQixFQUFELFFBQXdCaDhELEVBSGxDLGlCQUtFZzhELFVBQXdCaDhELEVBQXhCZzhELGNBQ0EvNkIsRUFBUyxDQUNQOXNDLEtBRE8sYUFFUGdvQyxRQUFTbjhCLEVBQU1nOEQsbUJBR2xCLENBQUNMLEVBQW9CMzdELEVBQXJCLGNBQTBDQSxFQVo3Q1gsaUJBY0EsSUFBTTQrRCxFQUFnQk4sSUFBaUIsWUFLckMsR0FBSWhOLEdBQVdzTCxhQUFmLFVBQXNELENBQ3BELElBQU05dkUsRUFBUTB0RSxHQUFNOTRELEVBQUQsT0FBbkIsR0FDTW05RCxFQUFlakMsc0JBQXJCLEdBQ0EsT0FBSXJDLEdBQUosSUFFRTM0QixFQUFTLENBQUU5c0MsS0FBRixtQkFBNEJnb0MsU0FBUyxJQUN2QytoQyxFQUFBLE1BQ0Msd0JBREQsTUFFQyxZQUNKajlCLEVBQVMsQ0FDUDlzQyxLQURPLGtCQUVQZ29DLFFBQVMsQ0FBRXFnQyxNQUFGLEVBQWVyd0UsTUFBT2tFLEtBRWpDNHdDLEVBQVMsQ0FBRTlzQyxLQUFGLG1CQUE0QmdvQyxTQUFTLFNBR2xEOEUsRUFBUyxDQUNQOXNDLEtBRE8sa0JBRVBnb0MsUUFBUyxDQUNQcWdDLE1BRE8sRUFFUHJ3RSxNQUFPK3hFLEtBR0p4aUUsZ0JBQVAsSUFFRyxPQUFJc0UsRUFBSixrQkFDTGloQyxFQUFTLENBQUU5c0MsS0FBRixtQkFBNEJnb0MsU0FBUyxJQUN2Q2tnQyxFQUFvQnQ3RCxFQUFELE9BQW5CLFNBQ0Msd0JBREQsTUFFQyxZQUNKa2dDLEVBQVMsQ0FDUDlzQyxLQURPLGtCQUVQZ29DLFFBQVMsQ0FBRXFnQyxNQUFGLEVBQWVyd0UsTUFBT2tFLEVBQU01RSxNQUV2Q3cxQyxFQUFTLENBQUU5c0MsS0FBRixtQkFBNEJnb0MsU0FBUyxRQUk3Q3pnQyxRQUFQLGFBR0l5aUUsRUFBZ0IsdUJBQWtCLGMsSUFBaUJDLGFBQ3ZEbkMsYUFBOEIsQ0FDNUJtQyxjQUZKLElBTU1DLEVBQWtCLHVCQUFrQixtQkFDakNwQyxVQUFQLEtBREYsSUFJTXFDLEVBQWFYLElBQ2pCLGNBSUUsT0FIQTE4QixFQUFTLENBQUU5c0MsS0FBRixjQUF1QmdvQyxRQUFTMitCLFVBRXZDeUQsUUFERixHQUdJYixFQUE0QjM4RCxFQURiLFFBRWZyRixRQUZKLGFBTUU4aUUsRUFBWSx1QkFBa0IsWUFDbEN2OUIsRUFBUyxDQUFFOXNDLEtBQUYsYUFBc0Jnb0MsUUFBUzYrQixNQUQxQyxJQUlNeUQsRUFBWWQsSUFDaEIsY0FJRSxPQUhBMThCLEVBQVMsQ0FBRTlzQyxLQUFGLGFBQXNCZ29DLFFBQVNoK0IsVUFFdENvZ0UsUUFERixHQUdJYixFQURlLEdBRWZoaUUsUUFGSixhQU1FZ2pFLEVBQWdCLHVCQUNwQixjQUNFejlCLEVBQVMsQ0FDUDlzQyxLQURPLGtCQUVQZ29DLFFBQVMsQ0FBRXFnQyxNQUFGLEVBQVNyd0UsYUFKeEIsSUFVTXd5RSxFQUFnQmhCLElBQ3BCLGdCQVVFLE9BVEExOEIsRUFBUyxDQUNQOXNDLEtBRE8sa0JBRVBnb0MsUUFBUyxDQUNQcWdDLE1BRE8sRUFFUHJ3RSxpQkFJRm95RSxRQURGLEdBR0liLEVBQTRCM0QsR0FBTWg1RCxFQUFELFNBRGxCLElBRWZyRixRQUZKLGFBTUVrakUsRUFBZ0IsdUJBQ3BCLGNBSUUsSUFFQSxFQUZJcEMsRUFBSixFQUNJeDNELEVBQUosRUFJQSxJQUFLMDBELEdBQUwsR0FBaUMsQ0FHMUJtRixFQUFMLFNBQ0dBLFlBRUgsSUFBTXI1RCxFQUFTcTVELFNBQ1ZBLEVBRFVBLE9BRVZBLEVBRkwsY0FLRTFxRSxFQVFFcVIsRUFuQjJCLEtBWTdCL1osRUFPRStaLEVBbkIyQixLQWE3QmdCLEVBTUVoQixFQW5CMkIsR0FjN0JyWixFQUtFcVosRUFuQjJCLE1BZTdCcVQsRUFJRXJULEVBbkIyQixRQWlCN0I1RCxHQUVFNEQsRUFuQjJCLFVBbUIzQkEsRUFuQjJCLFNBa0I3QmdnQyxFQUNFaGdDLEVBbkIyQixTQXFCL0JnM0QsRUFBUXNDLElBQXdCcnpFLEdBQWhDK3dFLEdBUUF4M0QsRUFBTSxlQUFlMVMsS0FBSzZCLElBQ3BCNHFFLEVBQVNDLFdBQVYsR0FBOEJsMkQsWUFEN0IsR0FFRixXQUFXeFcsS0FBSzZCLEdBdWY1QixTQUE2QixFQUE3QixLQU1FLHFCQUFXOHFFLEVBQ1QsT0FBT3ppQixRQUFQLEdBSUYsSUFBSTBpQixFQUFKLEdBQ0lDLEdBQUosRUFDSXhzRSxHQUFKLEVBRUEsR0FBSzNELGNBQUwsR0FPRWt3RSxJQUNBdnNFLEVBQVFzc0UsVUFBUnRzRSxHQUNBd3NFLEVBQWlCeHNFLEdBQWpCd3NFLE9BUEEsSUFBS0MsR0FBRCxRQUFjQSxHQUFsQixTQUF5Q0EsRUFDdkMsT0FBTzVpQixRQUFQLEdBVUosR0FBSTNqQyxPQUFKLEVBQ0UsT0FBT3FtRCxTQUFQLEdBSUYsTUFDRSxTQUlGLE9BQU9BLG9CQUVHQSxRQUEyQnZzRSxFQUZyQyxJQTVoQlUwc0UsQ0FBb0J4RixHQUFNOTRELEVBQUQsT0FBTixLQURuQixHQUVBLEVBOGVaLFNBQTJCYSxHQUN6QixPQUFPNVMsTUFBQSxnQkFDRyxTQUFBOG9ELEdBQUUsT0FBSUEsRUFBSixZQURMLEtBRUEsU0FBQUEsR0FBRSxPQUFJQSxFQUFKLFNBaGZDd25CLENBREEsR0FKSnQ2RCxFQVNGLEdBRUUyNUQsRUFBY25DLEVBQWRtQyxLQUdKLENBQUNBLEVBQWU1OUQsRUFyRGxCLFNBd0RNdytELEVBQWU1QixJQUNuQixZQUdFLEdBQUlqRSxHQUFKLEdBQ0UsT0FBTyxTQUFBelUsR0FBSyxPQUFJMlosRUFBYzNaLEVBQWxCLElBRVoyWixRQUtBWSxFQUFrQjdCLElBQ3RCLGdCQVVFLFlBVmM3QyxXQUFtQixHQUNqQzc1QixFQUFTLENBQ1A5c0MsS0FETyxvQkFFUGdvQyxRQUFTLENBQ1BxZ0MsTUFETyxFQUVQcndFLE1BQU8ydUUsV0FJVHlELFFBREYsR0FHSWIsRUFBNEIzOEQsRUFEYixRQUVmckYsUUFGSixhQU1FK2pFLEVBQWMsdUJBQ2xCLGNBQ00zd0UsRUFBSixTQUNFQSxZLE1BRThCQSxFQUFFMFcsT0FBMUIvWixTQUFNK2EsT0FDUmcyRCxHQURZa0QsWUFDSi90RSxJQUFjbEcsR0FBNUIsSUFVQSt6RSxFQUFnQmhELEdBQWhCZ0QsS0FFRixDQWxCRixJQXFCTUcsRUFBYWhDLElBQWlCLFlBR2xDLEdBQUlqRSxHQUFKLEdBQ0UsT0FBTyxTQUFBelUsR0FBSyxPQUFJd2EsRUFBWXhhLEVBQWhCLElBRVp3YSxRQUlFRyxFQUFpQix1QkFDckIsWUFLTWpQLEdBQUosR0FDRTF2QixFQUFTLENBQUU5c0MsS0FBRixtQkFBNEJnb0MsUUFBUzBqQyxJQUU5QzUrQixFQUFTLENBQUU5c0MsS0FBRixtQkFBNEJnb0MsUUFBUyx5QkFUcEQsSUFlTTJqQyxFQUFZLHVCQUFrQixZQUNsQzcrQixFQUFTLENBQUU5c0MsS0FBRixhQUFzQmdvQyxRQUFTcGxDLE1BRDFDLElBSU1ncEUsRUFBZ0IsdUJBQWtCLFlBQ3RDOStCLEVBQVMsQ0FBRTlzQyxLQUFGLG1CQUE0QmdvQyxRQUFTOCtCLE1BRGhELElBSU0rRSxFQUFhckMsSUFBaUIsV0FFbEMsT0FEQTE4QixFQUFTLENBQUU5c0MsS0FBTSxtQkFDVjBwRSxJQUFBLE1BQ0wsWUFRRSxJQUFNb0MsRUFBb0JyQyxhQUExQixNQUdBLElBREdxQyxHQURILElBQ3dCcjBFLHNCQUNILENBV25CLE1BQ0EsSUFJRSxhQUhBczBFLEVBQXFCQyxLQUluQixPQUVGLE1BQU85dkUsR0FDUCxRQUdGLE9BQU9xTCxRQUFBLGlCQUNDLFdBQ0VnUyxFQUFOLFNBQ0V1ekIsRUFBUyxDQUFFOXNDLEtBQU0sc0JBSGhCLE9BTUUsU0FBQWlzRSxHQUNMLEdBQU0xeUQsRUFBTixRQUlFLE1BSEF1ekIsRUFBUyxDQUFFOXNDLEtBQU0sbUJBR2pCLEtBR0QsR0FBTXVaLEVBQU4sVUFFTHV6QixFQUFTLENBQUU5c0MsS0FBTSxtQkFFakIsR0FDRSxjQVFKa3NFLEVBQWUxQyxJQUNuQixZQUNNN3VFLEdBQUtBLEVBQUxBLGdCQUF5QjZoRSxHQUFXN2hFLEVBQXhDLGlCQUNFQSxtQkFHRUEsR0FBS0EsRUFBTEEsaUJBQTBCNmhFLEdBQVc3aEUsRUFBekMsa0JBQ0VBLG9CQXNCRmt4RSxJQUFVLE9BQVMsU0FBQU0sR0FDakI5dkUsaUZBUUErdkUsRUFBMkMsQ0FDL0N6QyxVQUQrQyxFQUcvQzBDLGFBSCtDLEVBSS9DdkMsY0FKK0MsRUFLL0NPLFVBTCtDLEVBTS9DRSxjQU4rQyxFQU8vQ2MsZ0JBUCtDLEVBUS9DYixjQVIrQyxFQVMvQ21CLFVBVCtDLEVBVS9DQyxjQVYrQyxFQVcvQ3pCLFdBWCtDLEVBWS9DRyxVQVorQyxFQWEvQ21CLGVBYitDLEVBYy9DSSxjQUdJRyxFQUFnQnhDLElBQWlCLFdBQ3JDLE9BQU8vQixFQUFTNzZELEVBQUQsT0FBZixNQUdJMC9ELEVBQWM5QyxJQUFpQixTQUFBN3VFLEdBQy9CQSxHQUFLQSxFQUFMQSxnQkFBeUI2aEUsR0FBVzdoRSxFQUF4QyxpQkFDRUEsbUJBR0VBLEdBQUtBLEVBQUxBLGlCQUEwQjZoRSxHQUFXN2hFLEVBQXpDLGtCQUNFQSxvQkFHRmd2RSxPQUdJNEMsRUFBZSx1QkFDbkIsWUFDRSxNQUFPLENBQ0x2MEUsTUFBTzB0RSxHQUFNOTRELEVBQUQsT0FEUCxHQUVMMVEsTUFBT3dwRSxHQUFNOTRELEVBQUQsT0FGUCxHQUdMKzVELFVBQVdqQixHQUFNOTRELEVBQUQsUUFIWCxHQUlMb1ksYUFBYzBnRCxHQUFNZ0MsRUFBRCxRQUpkLEdBS0xFLGlCQUFrQmxDLEdBQU1rQyxFQUFELFFBTGxCLEdBTUw0RSxhQUFjOUcsR0FBTWlDLEVBQUQsY0FHdkIsQ0FBQy82RCxFQUFELE9BQWVBLEVBQWYsUUFBOEJBLEVBWGhDLFNBY002L0QsRUFBa0IsdUJBQ3RCLFlBQ0UsTUFBTyxDQUNMbm9ELFNBQVUsbUJBQWdCa21ELEVBQWNsekUsRUFBOUIsSUFDVjZ5RSxXQUFZLG1CQUFvQmtCLEVBQWdCL3pFLEVBQXBDLElBQ1pvMUUsU0FBVSxtQkFBZ0JuQyxFQUFjanpFLEVBQTlCLE9BR2QsQ0FBQ2t6RSxFQUFlYSxFQVJsQixJQVdNc0IsR0FBZ0IsdUJBQ3BCLFlBQ0UsSUFBTUMsRUFBYTVqRSxHQUFuQixHQUNNMVIsRUFBT3MxRSxFQUFhQyxFQUFILEtBQXZCLEVBQ01DLEVBQWFwSCxHQUFNOTRELEVBQUQsT0FBeEIsR0FFTXk3RCxFQUE4QixDQUNsQy93RSxLQURrQyxFQUVsQ1UsTUFGa0MsRUFHbEMrMEUsU0FIa0MsRUFJbENDLE9BQVF4QixHQUVWLEtBQWdCLEtBRVp4ckUsRUFJRTZzRSxFQU5VLEtBR0w1QixFQUdMNEIsRUFOVSxNQUlSOTZDLEVBRUY4NkMsRUFOVSxHQUtaeDdCLEVBQ0V3N0IsRUFOVSxTQVFkLGFBQUk3c0UsT0FDRixJQUFJaXJFLEVBQ0Y1QyxlQUVBQSxhQUNFeHRFLG9CQUE4Qml5RSxVQURoQ3pFLElBR0FBLFdBRUcsVUFBSXJvRSxHQUNUcW9FLFVBQWdCeUUsSUFBaEJ6RSxFQUNBQSxXQUNTdDJDLGNBQUosSUFDTHMyQyxRQUFjQSxTQUFkQSxHQUNBQSxlQUdKLFdBRUYsQ0FBQ21ELEVBQVlKLEVBQWN4K0QsRUF2QzdCLFNBMENNcWdFLEdBQVEsbUJBQ1osa0JBQU9yRyxLQUFRYyxFQUFELFFBQXdCOTZELEVBQXRDLFVBQ0EsQ0FBQzg2RCxFQUFELFFBQXdCOTZELEVBRjFCLFNBS01zZ0UsR0FBVSxtQkFDZCx1QkFDNEIsSUFBbkIzRixFQUNIMEYsR0FDRXJnRSxVQURHLElBQ2FuVixZQUFZbVYsRUFBWm5WLGdCQUNoQjh2RSxPQUE0Qi9LLEdBQTVCK0ssR0FDQ0EsRUFEREEsR0FITixFQU1JMzZELFVBUE4sSUFPc0JuVixZQUFZbVYsRUFBWm5WLGlCQUN0QixDQUFDOHZFLEVBQWdCMEYsR0FBT3JnRSxFQUF4QixPQVRGLElBK0NBLE9BbkNZLEdBQUgsTUFFUDg2RCxjQUFlQSxFQUZSLFFBR1BDLGNBQWVBLEVBSFIsUUFJUEMsZUFBZ0JBLEVBSlQsUUFLUEMsY0FBZUEsRUFMUixRQU1QMkQsV0FOTyxFQU9QSixhQVBPLEVBUVBrQixZQVJPLEVBU1BKLGFBVE8sRUFVUHZDLFVBVk8sRUFXUFUsVUFYTyxFQVlQb0IsZUFaTyxFQWFQSixnQkFiTyxFQWNQYixjQWRPLEVBZVBELGNBZk8sRUFnQlBvQixVQWhCTyxFQWlCUEMsY0FqQk8sRUFrQlB6QixXQWxCTyxFQW1CUEcsVUFuQk8sRUFvQlB1QixXQXBCTyxFQXFCUFEsYUFyQk8sRUFzQlB2QyxjQXRCTyxFQXVCUG9ELFFBdkJPLEdBd0JQRCxNQXhCTyxHQXlCUC9DLGdCQXpCTyxFQTBCUEYsY0ExQk8sRUEyQlAyQyxjQTNCTyxHQTRCUEosYUE1Qk8sRUE2QlBFLGdCQTdCTyxFQThCUHBGLGVBOUJPLEVBK0JQRCxpQkEvQk8sRUFnQ1BFLG9CQU1KLFNBQWdCNkYsR0FHZHRoRSxHQUNBLElBQU11aEUsRUFBWWpHLEdBQWxCLEdBQ1F6bUUsRUFBMENtTCxFQUExQ25MLFVBQVc0RSxFQUErQnVHLEVBQS9CdkcsU0FBVXpFLEVBQXFCZ0wsRUFBckJoTCxPQUFRdTJELEVBQWF2ckQsRUFBYnVyRCxTQWNyQyxPQVhBbHNELGlDQUFvQyx1QkFFcENBLHFCQUFnQixXQUNkLElBREZBLElBVUUsNEJBQWdCbFQsTUFBT28xRSxHQUNwQjFzRSxFQUNHd0ssMEJBRE0sR0FFTnJLLEVBQ0FBLEVBRE0sR0FFTnlFLEVBQ0FrM0QsTUFDR2wzRCxFQURIazNELEdBSUdnSixHQUFELEdBTE0sS0FNTnQ2RCxnQkFEQSxHQVhWLE1Bc0dGLFNBQVNtdkQsR0FBV2hwRCxFQUFwQixLQUNFLElBQU1rcEQsRUFBY2xwRCxFQUFwQixRQWVBLE9BYkFmLFdBQWUsY0FDYixZQUFXaXFELEVBQVAsR0FBdUMsQ0FDekMsSUFDTThTLEdBRE4sSUFBdUI1L0QsU0FDZUEsb0JBQXRDLEdBQ0E4c0QsS0FBaUI4UyxFQUNibFQsR0FBVXQvRCxvQkFBRCxLQURlLEdBQTVCMC9ELE9BR1M5c0Qsb0JBQUosR0FDTDhzRCxLQUFpQkosR0FBVTlvRCxFQUFELEtBQTFCa3BELElBQ0ssSUFBSWxwRCxjQUNUa3BELGFBR0osRUEwREYsSUFBTXZSLEdBQ2Msb0JBQVgvdUQsYUFBUCxJQUNPQSxPQUFQLGVBREEsSUFFT0EsZ0JBQVAsY0FGQSxrQkFERixZQU9BLFNBQVN1dkUsR0FBVCxHQUNFLElBQU1odkQsRUFBV3RQLGlCQUFqQixHQU9BLE9BSkE4OUMsSUFBMEIsV0FDeEJ4dUMsZUFHSyx1QkFDTCxzQ0FBSXhULEVBQUoseUJBQUlBLEVBQUosdUJBQW9Cd1QscUJBQWtCLEVBQXRDLEtBREYsSSxJQzlxQ1c4eUQsR0FBT3BpRSxzQkFDbEIsYyxJQUdVd2hDLEVBQW9CN2dDLEVBQXBCNmdDLE9BQVc0cUIsS0FBU3pyRCxjQUN0QjBoRSxFQUFVN2dDLEdBQWhCLEksRUFDc0M2NUIsS0FBOUIrRixnQkFBYUosaUJBQ3JCLE9BQ0VoaEUsOENBQ0V1OEQsU0FBVXlFLEVBQ1YxeEQsSUFBS0EsRUFDTGd6RCxRQUFTbEIsRUFDVDUvQixPQUFRNmdDLEdBTFosT0NWSixTQUFnQkUsR0FDZEMsR0FFQSxJQUFNcjBELEVBQTJCLFNBQUN4TixHQUFELE9BQy9CLGlDQUNHLFNBQUEyNkQsR0FLQyxPQUpBLG9CQUlPLDJDQUFVMzZELEdBQU8yNkQsT0FBUUEsU0FJaENtSCxFQUNKRCxlQUNBQSxFQURBQSxNQUVDQSxlQUFvQkEsY0FGckJBLE1BREYsWUFjQSxPQU5DcjBELHFCQUlEQSxxQ0FFT2pZLElBQXFCLEVBQUQsR0RON0Jrc0Usc0JFa0NBLElBb0JhTSxHQUFTLFNBQUMsRUFBRCxLQUtwQixJQUFNeDJELEVBQU95MkQsR0FBYixHQUVBLE9BREF6MkQsZ0JBQ0EsR0FhSXkyRCxHQUFnQixTQUFDQyxHQUNyQixLQUVPLElBQUlqekUsY0FBSixHQUNMLG1CQUVBLElBQU1rekUsRUFBV3QyRSxPQUFBLGFBQ1YsU0FBQWEsR0FBRyxPQUFJMDFFLFNBQUosTUFETyxRQUVQLHFCQUFjcnFCLE1BQWQsSUFGVixHQUdBLE9BQU85b0QsTUFBQSxjQUEyQlMsT0FBUXl5RSxFQUFXLEtBUHJELFVBV0VFLEcsWUFRSixjLGFBQ0Usd0JBcUJGQyxpQkFBbUIsZ0IsTUFTYixFQUFLcmlFLE1BSFB2VSxVQUlGbTBFLEVBRllBLEVBQVZqRixPQUFVaUYsaUJBRUcsWUFDYixJQUFJMEMsRUFBc0MsbUJBQWhCQyxFQUE2QkEsRUFBdkQsRUFDSUMsRUFDc0IsbUJBQWpCQyxFQUE4QkEsRUFEdkMsRUFLSXRrRSxFQUFTNDdELEdBQ1gySSxFQURnQixTQUdoQnA4RCxFQUFHdXpELEdBQU02SSxFQUFELE9BSFYsS0FNSUMsRUFBYUosRUFDYkQsRUFBYXpJLEdBQU02SSxFQUFELE9BRE0sU0FBNUIsRUFHSUUsRUFBZUgsRUFDZkQsRUFBYzNJLEdBQU02SSxFQUFELFFBRFEsU0FBL0IsRUFXQSxPQVBJbkosR0FBSixLQUNFb0osVUFFRXBKLEdBQUosS0FDRXFKLFVBR0YsU0FFRXprRSxPQUZGLEVBR0U2OEQsT0FBUXVILEVBQ0p4SSxHQUFNMkksRUFBRCxTQURVLEdBRWZBLEVBTE4sT0FNRTVILFFBQVMySCxFQUNMMUksR0FBTTJJLEVBQUQsVUFEWSxHQUVqQkEsRUFBVTVILGNBS3BCLEVBQUFoakUsS0FBTyxtQkFDTCxvQkFDRSw0QkFDS2txRSxHQURMLElBRUUzSSxHQUZGLFFBREYsR0FESyxJQVVQLEVBQUF3SixXQUFhLG1CQUFnQixrQkFBTSxPQUFOLEtBRTdCLEVBQUFDLEtBQU8scUJBQ0wsb0JBQ0UsbUJBM0ljLFNBQUMsRUFBRCxLQUtsQixJQUFNdjNELEVBQU95MkQsR0FBYixHQUNNMXlFLEVBQUlpYyxFQUFWLEdBR0EsT0FGQUEsS0FBZUEsRUFBZkEsR0FDQUEsT0FDQSxFQWtJc0J1M0QsQ0FBS2gyRCxFQUFPaTJELEVBQTlCLE1BREYsR0FESyxJQU9QLEVBQUFDLFdBQWEscUJBQW9DLGtCQUMvQyxTQUQrQyxLQUdqRCxFQUFBQyxLQUFPLHFCQUNMLG9CQUFzQixtQkE1Sk4sU0FBQ24yRCxFQUFELEtBQ2xCLElBQU12QixFQUFPeTJELEdBQWIsR0FDTTcxRSxFQUFRb2YsRUFBZCxHQUdBLE9BRkFBLGNBQ0FBLGdCQUNBLEVBdUowQzAzRCxDQUFLbjJELEVBQU9ySCxFQUE5QixNQUF0QixHQURLLElBR1AsRUFBQXk5RCxXQUFhLHFCQUE4QixrQkFBTSxTQUFOLEtBRTNDLEVBQUFuQixPQUFTLHFCQUNQLG9CQUNFLG1CQUFrQkEsR0FBT2oxRCxFQUFPbmEsRUFBaEMsTUFDQSxtQkFBa0JvdkUsR0FBT2oxRCxFQUFPbmEsRUFBaEMsU0FDQSxtQkFBa0JvdkUsR0FBT2oxRCxFQUFPbmEsRUFBaEMsVUFHSixFQUFBd3dFLGFBQWUscUJBQStCLGtCQUFNLFdBQU4sS0FFOUMsRUFBQXB4RSxRQUFVLHFCQUNSLG9CQUNFLG1CQTdJaUIsU0FBQyxFQUFELEtBS3JCLElBQU13WixFQUFPeTJELEdBQWIsR0FFQSxPQURBejJELE9BQ0EsRUFzSXNCeFosQ0FBUSthLEVBQU9uYSxFQUFqQyxNQURGLEdBRFEsSUFPVixFQUFBeXdFLGNBQWdCLHFCQUErQixrQkFDN0MsWUFENkMsS0FHL0MsRUFBQXppQixRQUFVLFlBQ1IsSUFBSWx4RCxHQUFKLEVBd0JBLE9BdkJBLG9CQUNFLFlBQ0UsSUFBTXNjLEVBQU1lLEVBQVEsQ0FBQzNnQixHQUFKLFVBQXVCLENBQXhDLEdBSUEsT0FISXNELEVBQUosSUFDRUEsRUFBU3NjLEVBQVR0YyxRQUVGLEtBRUYsWUFDRSxJQUFNc2MsRUFBTWUsRUFBUSxDQUFDLE1BQUosVUFBc0IsQ0FBdkMsTUFJQSxPQUhJcmQsRUFBSixJQUNFQSxFQUFTc2MsRUFBVHRjLFFBRUYsS0FFRixZQUNFLElBQU1zYyxFQUFNZSxFQUFRLENBQUMsTUFBSixVQUFzQixDQUF2QyxNQUlBLE9BSElyZCxFQUFKLElBQ0VBLEVBQVNzYyxFQUFUdGMsUUFFRixLQUdKLEdBR0YsRUFBQTR6RSxjQUFnQixtQkFBZ0Isa0JBQU0sVUFBTixLQXdCaEMsRUFBQUMsYUFBZSxtQkFBbUIsa0JBQU0sU0FBTixLQXFCbEMsRUFBQW5lLFVBQVksa0JBQU0sa0JBQU0sRUFBTixRQTNMaEIsU0FBYyxpQkFBZCxJQUNBLE1BQVcsY0FBWCxJLHFDQUdGcGhCLGdDQUlLZzNCLEtBQ0NsQixHQUFNaFEsU0FBRCxPQUEwQkEsRUFEekIsTUFFTmdRLEdBQU1qcEUsS0FBS29QLE1BQU0yNkQsT0FBWixPQUEyQi9wRSxLQUFLb1AsTUFGdkMsUUFJQXBQLEtBQUtvUCxNQUFNMjZELE9BTGIsa0JBT0UvcEUsS0FBQSwwQkFBK0JBLEtBQUtvUCxNQUFNMjZELE9BQTFDLFMsRUFrSUo0SSxtQkFFRSxNQWlCQSxPQWhCQTN5RSxLQUFBLGtCQUVFLFlBQ0UsSUFBTTJhLEVBQU91QixFQUFRazFELEdBQUgsR0FBbEIsR0FPQSxPQU5BLElBQ0VscEUsRUFBU3lTLEVBQVR6UyxJQUVFNjNELEdBQVdwbEQsRUFBZixTQUNFQSxjQUVGLEtBVkosTUFnQkEsRyxFQUtGNEQsZUFFRSxNQWNBLE9BYkF2ZSxLQUFBLGtCQUVFLFlBQ0UsSUFBTTR5RSxFQUFOLEVBSUEsT0FIQSxJQUNFMXFFLEVBQVMwcUUsR0FBT0EsRUFBUEEsS0FBa0JBLEVBQTNCMXFFLE9BRUYsS0FQSixNQWFBLEcsRUFLRjlELGtCQUNFLElBQU15dUUsRUFBNkIsQ0FDakMzckUsS0FBTWxILEtBRDJCLEtBRWpDdWUsSUFBS3ZlLEtBRjRCLElBR2pDa3lFLEtBQU1seUUsS0FIMkIsS0FJakNxeUUsS0FBTXJ5RSxLQUoyQixLQUtqQ214RSxPQUFRbnhFLEtBTHlCLE9BTWpDbUIsUUFBU25CLEtBTndCLFFBT2pDK3ZELFFBQVMvdkQsS0FQd0IsUUFRakMyeUUsT0FBUTN5RSxLQVJ5QixPQVNqQ2l5RSxXQUFZanlFLEtBVHFCLFdBVWpDdTBELFVBQVd2MEQsS0FWc0IsVUFXakNveUUsV0FBWXB5RSxLQVhxQixXQVlqQ3N5RSxXQUFZdHlFLEtBWnFCLFdBYWpDdXlFLGFBQWN2eUUsS0FibUIsYUFjakN3eUUsY0FBZXh5RSxLQWRrQixjQWVqQ3l5RSxjQUFlenlFLEtBZmtCLGNBZ0JqQzB5RSxhQUFjMXlFLEtBQUsweUUsYyxFQWFqQjF5RSxLQUFLb1AsTUFUUG5MLGNBQ0FHLFdBQ0F5RSxhQUNBaE8sU0FRSXVVLEVBQUssU0FFVGd2QyxLQU5LMDBCLEcsRUFITC9JLE9BR0srSSxpQ0FPTGo0RSxTQUdGLE9BQU9vSixFQUNId0ssMEJBRFksR0FFWnJLLEVBQ0NBLEVBREssR0FFTnlFLEVBQ29CLG1CQUFiQSxFQUNKQSxFQURILEdBRUdrZ0UsR0FBRCxHQUhNLEtBSU50NkQsZ0JBREEsR0FQTixNLEdBL091Q0EsYUFJbEMraUUsZ0JBQWUsQ0FDcEI3RyxrQkFBa0IsR0NoSFNsOEQsWUM2QnVCQSxZRjJVdEQsSSx3Q0cvVmVza0UsSUNyQkFBLEdER2YsU0FBb0IzakUsR0FDaEIsTUFBTSxJQUNGOFgsRUFBTSxLQURKLEtBRUYzakIsRUFBTyxLQUZMLEtBR0YyNEIsR0FDQTlzQixFQUdFNGpFLEVBQU05ckQsRUFHWixJQUFJKzBDLEVBQU0sR0FJVixNQUhZLE9BQVQxNEQsSUFBZTA0RCxHQUFPNS9ELEtBQUU0MkUsSUFDZixPQUFUMXZFLElBQWUwNEQsR0FBTzUvRCxLQUFFNjJFLElBRXBCLGtCQUFDRixFQUFELENBQUsxWCxVQUFXVyxHQUFNLy9CLEksT0VBbEJuekIsSUNsQkFBLEdER2YsU0FBZXFHLEdBQ1gsTUFBTSxLQUNGOHNCLEVBQVEsOEJBRE4sT0FFRmkzQyxHQUNBL2pFLEVBRUosSUFBSTZzRCxFQUFNLFFBS1YsT0FKWSxFQUFUa1gsR0FBZSxJQUFHbFgsR0FBTyxxQkFDaEIsRUFBVGtYLEdBQWUsSUFBR2xYLEdBQU8scUJBQ2hCLEVBQVRrWCxHQUFlLElBQUdsWCxHQUFPLHFCQUVyQix1QkFBR1gsVUFBV1csR0FBTS8vQixJRWYvQixTQUFTazNDLEdBQWtCeCtELEVBQVF4RixHQUNqQyxJQUFLLElBQUk5VSxFQUFJLEVBQUdBLEVBQUk4VSxFQUFNdlEsT0FBUXZFLElBQUssQ0FDckMsSUFBSTZLLEVBQWFpSyxFQUFNOVUsR0FDdkI2SyxFQUFXakssV0FBYWlLLEVBQVdqSyxhQUFjLEVBQ2pEaUssRUFBVzBJLGNBQWUsRUFDdEIsVUFBVzFJLElBQVlBLEVBQVcySSxVQUFXLEdBQ2pEOVMsT0FBT0MsZUFBZTJaLEVBQVF6UCxFQUFXdEosSUFBS3NKLElDTGxELElBR0loSixHQUhjbkIsT0FBT2tCLFVBR1FDLGVBY2xCazNFLE9BSmYsU0FBaUJyM0UsRUFBUUgsR0FDdkIsT0FBaUIsTUFBVkcsR0FBa0JHLEdBQWUxQixLQUFLdUIsRUFBUUgsSUNYbkR5M0UsR0FBZSxtREFDZkMsR0FBZ0IsUUF1QkxDLE9BYmYsU0FBZWo0RSxFQUFPUyxHQUNwQixHQUFJbUMsR0FBUTVDLEdBQ1YsT0FBTyxFQUVULElBQUlnSSxTQUFjaEksRUFDbEIsUUFBWSxVQUFSZ0ksR0FBNEIsVUFBUkEsR0FBNEIsV0FBUkEsR0FDL0IsTUFBVGhJLElBQWlCb3NFLEdBQVNwc0UsTUFHdkJnNEUsR0FBYzd4RSxLQUFLbkcsS0FBVyszRSxHQUFhNXhFLEtBQUtuRyxJQUMxQyxNQUFWUyxHQUFrQlQsS0FBU1AsT0FBT2dCLEtDTHhCeTNFLE9BUGYsU0FBa0JsNEUsRUFBT1MsR0FDdkIsT0FBSW1DLEdBQVE1QyxHQUNIQSxFQUVGaTRFLEdBQU1qNEUsRUFBT1MsR0FBVSxDQUFDVCxHQUFTMnNFLEdBQWEzb0UsR0FBU2hFLEtDcUJqRG00RSxPQXRCZixTQUFpQjEzRSxFQUFRK0UsRUFBTTR5RSxHQU83QixJQUpBLElBQUk1eEUsR0FBUyxFQUNUbEQsR0FISmtDLEVBQU8weUUsR0FBUzF5RSxFQUFNL0UsSUFHSjZDLE9BQ2RxSixHQUFTLElBRUpuRyxFQUFRbEQsR0FBUSxDQUN2QixJQUFJaEQsRUFBTXdzRSxHQUFNdG5FLEVBQUtnQixJQUNyQixLQUFNbUcsRUFBbUIsTUFBVmxNLEdBQWtCMjNFLEVBQVEzM0UsRUFBUUgsSUFDL0MsTUFFRkcsRUFBU0EsRUFBT0gsR0FFbEIsT0FBSXFNLEtBQVluRyxHQUFTbEQsRUFDaEJxSixLQUVUckosRUFBbUIsTUFBVjdDLEVBQWlCLEVBQUlBLEVBQU82QyxTQUNsQjJqRSxHQUFTM2pFLElBQVcwakUsR0FBUTFtRSxFQUFLZ0QsS0FDakRWLEdBQVFuQyxJQUFXcW1FLEdBQVlybUUsS0NEckJ1UCxPQUpmLFNBQWF2UCxFQUFRK0UsR0FDbkIsT0FBaUIsTUFBVi9FLEdBQWtCMDNFLEdBQVExM0UsRUFBUStFLEVBQU1zeUUsS0NRbENPLE9BTGYsU0FBdUJyNEUsRUFBTzBtRSxHQUU1QixPQUFPa0YsR0FBVTVyRSxFQUFPbXRFLEVBRHhCekcsRUFBa0MsbUJBQWRBLEVBQTJCQSxPQUFheDhELElDTi9DcWpFLE9BTGYsU0FBa0J2dEUsR0FDaEIsTUFBdUIsaUJBQVRBLElBQ1Y0QyxHQUFRNUMsSUFBVXFqRSxHQUFhcmpFLElBckJyQixtQkFxQitCaWpFLEdBQVdqakUsSUNUM0NzNEUsT0FWZixTQUF5QmwzRCxHQUl2QixJQUhBLElBQUk3YSxFQUNBb0csRUFBUyxLQUVKcEcsRUFBTzZhLEVBQVM3VixRQUFRaVksTUFDL0I3VyxFQUFPaEIsS0FBS3BGLEVBQUt2RyxPQUVuQixPQUFPMk0sR0NHTTRyRSxPQVZmLFNBQW9CN3lFLEdBQ2xCLElBQUljLEdBQVMsRUFDVG1HLEVBQVM5SixNQUFNNkMsRUFBSTh6QyxNQUt2QixPQUhBOXpDLEVBQUlvQixTQUFRLFNBQVM5RyxFQUFPTSxHQUMxQnFNLElBQVNuRyxHQUFTLENBQUNsRyxFQUFLTixNQUVuQjJNLEdDR002ckUsT0FWZixTQUFvQjF6RSxHQUNsQixJQUFJMEIsR0FBUyxFQUNUbUcsRUFBUzlKLE1BQU1pQyxFQUFJMDBDLE1BS3ZCLE9BSEExMEMsRUFBSWdDLFNBQVEsU0FBUzlHLEdBQ25CMk0sSUFBU25HLEdBQVN4RyxLQUViMk0sR0NITThyRSxPQUpmLFNBQXNCOXhCLEdBQ3BCLE9BQU9BLEVBQU9saEQsTUFBTSxLQ0lsQml6RSxHQUFlNTBFLE9BQU8sdUZBYVg2MEUsT0FKZixTQUFvQmh5QixHQUNsQixPQUFPK3hCLEdBQWF2eUUsS0FBS3dnRCxJQ2J2Qml5QixHQUFXLG9CQUNYQyxHQUFVLGtEQUNWQyxHQUFTLDJCQUVUQyxHQUFjLHFCQUNkQyxHQUFhLGtDQUNiQyxHQUFhLHFDQUliQyxHQVBhLE1BQVFMLEdBQVUsSUFBTUMsR0FBUyxJQU90QixJQUd4QkssR0FGVyxvQkFFUUQsSUFEUCxnQkFBd0IsQ0FBQ0gsR0FBYUMsR0FBWUMsSUFBWXR5RSxLQUFLLEtBQW5FLHFCQUEyRnV5RSxHQUFXLE1BRWxIRSxHQUFXLE1BQVEsQ0FBQ0wsR0FBY0YsR0FBVSxJQUFLQSxHQUFTRyxHQUFZQyxHQUFZTCxJQUFVanlFLEtBQUssS0FBTyxJQUd4RzB5RSxHQUFZdjFFLE9BQU9nMUUsR0FBUyxNQUFRQSxHQUFTLEtBQU9NLEdBQVdELEdBQU8sS0FhM0RHLE9BSmYsU0FBd0IzeUIsR0FDdEIsT0FBT0EsRUFBT3hpRCxNQUFNazFFLEtBQWMsSUNuQnJCRSxPQU5mLFNBQXVCNXlCLEdBQ3JCLE9BQU9neUIsR0FBV2h5QixHQUNkMnlCLEdBQWUzeUIsR0FDZjh4QixHQUFhOXhCLElDSUo2eUIsT0FOZixTQUFvQi80RSxFQUFRb1QsR0FDMUIsT0FBT3M0RCxHQUFTdDRELEdBQU8sU0FBU3ZULEdBQzlCLE9BQU9HLEVBQU9ILE9DbUJIMFIsT0FKZixTQUFnQnZSLEdBQ2QsT0FBaUIsTUFBVkEsRUFBaUIsR0FBSys0RSxHQUFXLzRFLEVBQVFzQyxHQUFLdEMsS0NkbkRnNUUsR0FBYzM1RSxHQUFTQSxHQUFPc2hCLGNBQVdsWCxFQXlDOUJxYSxPQWhCZixTQUFpQnZrQixHQUNmLElBQUtBLEVBQ0gsTUFBTyxHQUVULEdBQUlpb0UsR0FBWWpvRSxHQUNkLE9BQU91dEUsR0FBU3Z0RSxHQUFTdTVFLEdBQWN2NUUsR0FBU3dvRSxHQUFVeG9FLEdBRTVELEdBQUl5NUUsSUFBZXo1RSxFQUFNeTVFLElBQ3ZCLE9BQU9uQixHQUFnQnQ0RSxFQUFNeTVFLE9BRS9CLElBQUk5dEQsRUFBTW0rQyxHQUFPOXBFLEdBR2pCLE9BMUNXLGdCQXdDQTJyQixFQUFnQjRzRCxHQXZDaEIsZ0JBdUM4QjVzRCxFQUFnQjZzRCxHQUFheG1FLElBRTFEaFMsSUN0RFZnRSxHQUFXdkUsT0FBT2tCLFVBQVVxRCxTQUM1QjAxRSxHQUFnQmxzRSxNQUFNN00sVUFBVXFELFNBQ2hDMjFFLEdBQWlCNzFFLE9BQU9uRCxVQUFVcUQsU0FDbEMrb0UsR0FBbUMsb0JBQVhqdEUsT0FBeUJBLE9BQU9hLFVBQVVxRCxTQUFXLFdBQy9FLE1BQU8sSUFFTDQxRSxHQUFnQix1QkFRcEIsU0FBU0MsR0FBaUJoaEUsRUFBS2loRSxHQUs3QixRQUpxQixJQUFqQkEsSUFDRkEsR0FBZSxHQUdOLE1BQVBqaEUsSUFBdUIsSUFBUkEsSUFBd0IsSUFBUkEsRUFBZSxNQUFPLEdBQUtBLEVBQzlELElBQUk0dkMsU0FBZ0I1dkMsRUFDcEIsR0FBZSxXQUFYNHZDLEVBQXFCLE9BYjNCLFNBQXFCNXZDLEdBQ25CLE9BQUlBLElBQVFBLEVBQVksTUFDSyxJQUFSQSxHQUFhLEVBQUlBLEVBQU0sRUFDcEIsS0FBTyxHQUFLQSxFQVVKa2hFLENBQVlsaEUsR0FDNUMsR0FBZSxXQUFYNHZDLEVBQXFCLE9BQU9xeEIsRUFBZSxJQUFPamhFLEVBQU0sSUFBT0EsRUFDbkUsR0FBZSxhQUFYNHZDLEVBQXVCLE1BQU8sY0FBZ0I1dkMsRUFBSXZaLE1BQVEsYUFBZSxJQUM3RSxHQUFlLFdBQVhtcEQsRUFBcUIsT0FBT3NrQixHQUFlN3RFLEtBQUsyWixHQUFLalQsUUFBUWcwRSxHQUFlLGNBQ2hGLElBQUlqdUQsRUFBTTNuQixHQUFTOUUsS0FBSzJaLEdBQUtyTyxNQUFNLEdBQUksR0FDdkMsTUFBWSxTQUFSbWhCLEVBQXVCaFAsTUFBTTlELEVBQUlqVixXQUFhLEdBQUtpVixFQUFNQSxFQUFJbWhFLFlBQVluaEUsR0FDakUsVUFBUjhTLEdBQW1COVMsYUFBZXJMLE1BQWMsSUFBTWtzRSxHQUFjeDZFLEtBQUsyWixHQUFPLElBQ3hFLFdBQVI4UyxFQUF5Qmd1RCxHQUFlejZFLEtBQUsyWixHQUMxQyxLQUdNLFNBQVNvaEUsR0FBV2o2RSxFQUFPODVFLEdBQ3hDLElBQUludEUsRUFBU2t0RSxHQUFpQjc1RSxFQUFPODVFLEdBQ3JDLE9BQWUsT0FBWG50RSxFQUF3QkEsRUFDckJnTCxLQUFLQyxVQUFVNVgsR0FBTyxTQUFVTSxFQUFLTixHQUMxQyxJQUFJMk0sRUFBU2t0RSxHQUFpQnAxRSxLQUFLbkUsR0FBTXc1RSxHQUN6QyxPQUFlLE9BQVhudEUsRUFBd0JBLEVBQ3JCM00sSUFDTixHQ3RDRSxJQUFJazZFLEdBQVEsQ0FDakIzNEIsUUFBUyxxQkFDVDQ0QixTQUFVLDhCQUNWbHpCLE1BQU8seURBQ1BtekIsU0FBVSw2REFDVkMsUUFBUyxTQUFpQnJtRSxHQUN4QixJQUFJeE8sRUFBT3dPLEVBQUt4TyxLQUNad0MsRUFBT2dNLEVBQUtoTSxLQUNaaEksRUFBUWdVLEVBQUtoVSxNQUNiczZFLEVBQWdCdG1FLEVBQUtzbUUsY0FDckJDLEVBQTBCLE1BQWpCRCxHQUF5QkEsSUFBa0J0NkUsRUFDcEQwdUUsRUFBTWxwRSxFQUFPLGVBQWlCd0MsRUFBeEJ4QyxxQ0FBNEV5MEUsR0FBV2o2RSxHQUFPLEdBQVEsS0FBUXU2RSxFQUFTLDBCQUE0Qk4sR0FBV0ssR0FBZSxHQUFRLE1BQVEsS0FNdk0sT0FKYyxPQUFWdDZFLElBQ0YwdUUsR0FBTywwRkFHRkEsR0FFVDhMLFFBQVMsMkJBRUE3ekIsR0FBUyxDQUNsQnJqRCxPQUFRLCtDQUNSazlDLElBQUssNkNBQ0x1TCxJQUFLLDRDQUNMNTBDLFFBQVMsK0NBQ1RrcEIsTUFBTyxnQ0FDUFEsSUFBSyw4QkFDTG5JLEtBQU0sbUNBQ04raEQsVUFBVyxxQ0FDWEMsVUFBVyx1Q0FFRnQyRSxHQUFTLENBQ2xCbzhDLElBQUssa0RBQ0x1TCxJQUFLLCtDQUNMNHVCLFNBQVUsb0NBQ1ZDLFNBQVUsdUNBQ1ZDLFNBQVUsMkNBQ1ZDLFNBQVUsb0NBQ1ZDLFNBQVUsb0NBQ1YvdUIsUUFBUyw4QkFFQTdyQixHQUFPLENBQ2hCcWdCLElBQUssMENBQ0x1TCxJQUFLLGdEQUdJdHJELEdBQVMsQ0FDbEJ1NkUsVUFBVyxrREFFRnI2RCxHQUFRLENBQ2pCNi9CLElBQUssZ0RBQ0x1TCxJQUFLLDhEQ3JEUyxZQUFVeGhELEdBQ3hCLE9BQU9BLEdBQU9BLEVBQUkwd0UsaUJDdURMQyxHQXJEYyxXQUMzQixTQUFTQSxFQUFVdDVELEVBQU1uTSxHQUd2QixHQUZBaFIsS0FBS21kLEtBQU9BLEVBRVcsbUJBQVpuTSxFQUFYLENBS0EsSUFBS3pGLEdBQUl5RixFQUFTLE1BQU8sTUFBTSxJQUFJMUUsVUFBVSw2Q0FDN0MsSUFBSzBFLEVBQVF0SyxPQUFTc0ssRUFBUTBsRSxVQUFXLE1BQU0sSUFBSXBxRSxVQUFVLHNFQUM3RCxJQUFJZ3BCLEVBQUt0a0IsRUFBUXNrQixHQUNiNXVCLEVBQU9zSyxFQUFRdEssS0FDZmd3RSxFQUFZMWxFLEVBQVEwbEUsVUFDcEJ0NUUsRUFBc0IsbUJBQVBrNEIsRUFBb0JBLEVBQUssV0FDMUMsSUFBSyxJQUFJbzlCLEVBQU8vdUQsVUFBVTlFLE9BQVEwTyxFQUFTLElBQUluUCxNQUFNczBELEdBQU9DLEVBQU8sRUFBR0EsRUFBT0QsRUFBTUMsSUFDakZwbEQsRUFBT29sRCxHQUFRaHZELFVBQVVndkQsR0FHM0IsT0FBT3BsRCxFQUFPdWpELE9BQU0sU0FBVXYxRCxHQUM1QixPQUFPQSxJQUFVKzVCLE1BSXJCdDFCLEtBQUswVixHQUFLLFdBQ1IsSUFBSyxJQUFJaWhFLEVBQVFoekUsVUFBVTlFLE9BQVEwTCxFQUFPLElBQUluTSxNQUFNdTRFLEdBQVFDLEVBQVEsRUFBR0EsRUFBUUQsRUFBT0MsSUFDcEZyc0UsRUFBS3FzRSxHQUFTanpFLFVBQVVpekUsR0FHMUIsSUFBSTVsRSxFQUFVekcsRUFBS2dVLE1BQ2ZvdEQsRUFBU3BoRSxFQUFLZ1UsTUFDZHM0RCxFQUFTejVFLEVBQU00SSxXQUFNLEVBQVF1RSxHQUFRN0QsRUFBT2d3RSxFQUNoRCxHQUFLRyxFQUNMLE1BQXNCLG1CQUFYQSxFQUE4QkEsRUFBT2xMLEdBQ3pDQSxFQUFPM21FLE9BQU82eEUsRUFBT3R2RSxRQUFReUosVUE3QnBDaFIsS0FBSzBWLEdBQUsxRSxFQTZDZCxPQVpheWxFLEVBQVV2NkUsVUFFaEJxTCxRQUFVLFNBQWlCaXRCLEVBQU14akIsR0FDdEMsSUFBSXpELEVBQVN2TixLQUFLbWQsS0FBS2xjLEtBQUksU0FBVThjLEdBQ25DLE9BQU9BLEVBQUkzTixTQUFTWSxNQUVsQjI2RCxFQUFTM3JFLEtBQUswVixHQUFHMVAsTUFBTXd1QixFQUFNam5CLEVBQU92SSxPQUFPd3ZCLEVBQU14akIsSUFDckQsUUFBZXZMLElBQVhrbUUsR0FBd0JBLElBQVduM0MsRUFBTSxPQUFPQSxFQUNwRCxJQUFLc2lELEdBQVNuTCxHQUFTLE1BQU0sSUFBSXIvRCxVQUFVLDBDQUMzQyxPQUFPcS9ELEVBQU9wa0UsUUFBUXlKLElBR2pCeWxFLEVBbERvQixHLFNDRnpCTSxHQUFTLHFCQUVUNTFFLEdBQVUsU0FBaUJFLEdBQzdCLE9BQU8sU0FBVW8zRCxHQUNmLE9BQU9wM0QsRUFBSUYsUUFBUTQxRSxJQUFRLFNBQVVDLEVBQUduN0UsR0FDdEMsT0FBTzI1RSxHQUFXL2MsRUFBTzU4RCxTQUtoQixTQUFTbzdFLEdBQWdCN00sRUFBUTd1RSxFQUFPcXdFLEVBQU9yb0UsR0FDNUQsSUFBSTJMLEVBQVFsUCxLQUVaQSxLQUFLbkYsS0FBTyxrQkFDWm1GLEtBQUt6RSxNQUFRQSxFQUNieUUsS0FBS2UsS0FBTzZxRSxFQUNaNXJFLEtBQUt1RCxLQUFPQSxFQUNadkQsS0FBS29xRSxPQUFTLEdBQ2RwcUUsS0FBS2szRSxNQUFRLEdBQ1Q5TSxHQUFRLEdBQUdwbEUsT0FBT29sRSxHQUFRL25FLFNBQVEsU0FBVThGLEdBQzlDK0csRUFBTWs3RCxPQUFTbDdELEVBQU1rN0QsT0FBT3BsRSxPQUFPbUQsRUFBSWlpRSxRQUFVamlFLEdBQzdDQSxFQUFJK3VFLFFBQU9ob0UsRUFBTWdvRSxNQUFRaG9FLEVBQU1nb0UsTUFBTWx5RSxPQUFPbUQsRUFBSSt1RSxNQUFNcjRFLE9BQVNzSixFQUFJK3VFLE1BQVEvdUUsT0FFakZuSSxLQUFLbEQsUUFBVWtELEtBQUtvcUUsT0FBT3ZyRSxPQUFTLEVBQUltQixLQUFLb3FFLE9BQU92ckUsT0FBUyxtQkFBcUJtQixLQUFLb3FFLE9BQU8sR0FDMUZyaEUsTUFBTW91RSxtQkFBbUJwdUUsTUFBTW91RSxrQkFBa0JuM0UsS0FBTWkzRSxJQUU3REEsR0FBZ0IvNkUsVUFBWWxCLE9BQU9ZLE9BQU9tTixNQUFNN00sV0FDaEQrNkUsR0FBZ0IvNkUsVUFBVWdCLFlBQWMrNUUsR0FFeENBLEdBQWdCRyxRQUFVLFNBQVVqdkUsR0FDbEMsT0FBT0EsR0FBb0Isb0JBQWJBLEVBQUl0TixNQUdwQm84RSxHQUFnQkksWUFBYyxTQUFVdjZFLEVBQVMyN0QsR0FDeEIsaUJBQVozN0QsSUFBc0JBLEVBQVVxRSxHQUFRckUsSUFFbkQsSUFBSTRZLEVBQUssU0FBWStpRCxHQUVuQixPQURBQSxFQUFPMTNELEtBQU8wM0QsRUFBTytELE9BQVMvRCxFQUFPMTNELE1BQVEsT0FDbkIsbUJBQVpqRSxFQUF5QkEsRUFBUTI3RCxHQUFVMzdELEdBRzNELE9BQTRCLElBQXJCNkcsVUFBVTlFLE9BQWU2VyxFQUFLQSxFQUFHK2lELElDdEMxQyxJQUFJdHhELEdBQVUsU0FBaUIwa0UsR0FDN0IsT0FBT0EsRUFBTzVsRSxzQkFBcUI2RSxTQWdDOUIsU0FBU3dzRSxHQUFnQkMsRUFBVW5OLEdBQ3hDLE9BQU9tTixFQUFXLEtBQU8sU0FBVXB2RSxHQUVqQyxPQURBaWlFLEVBQU9sakUsS0FBS2lCLEdBQ0xBLEVBQUk1TSxPQW1CUixTQUFTaThFLEdBQWNqb0UsR0FDNUIsSUFBSWtvRSxFQUFjbG9FLEVBQUtrb0UsWUFDbkJsOEUsRUFBUWdVLEVBQUtoVSxNQUNid0YsRUFBT3dPLEVBQUt4TyxLQUNaOHFFLEVBQU90OEQsRUFBS3M4RCxLQUNaekIsRUFBUzc2RCxFQUFLNjZELE9BQ2RzTixFQUFPbm9FLEVBQUttb0UsS0FFaEIsT0FEQXROLEVBMURnQixTQUFxQkEsR0FLckMsWUFKZSxJQUFYQSxJQUNGQSxFQUFTLElBR0pBLEVBQU84TSxPQUFTOU0sRUFBTzhNLE1BQU1yNEUsT0FBU3VyRSxFQUFPOE0sTUFBUSxHQUFHbHlFLE9BQU9vbEUsR0FxRDdEdU4sQ0FBWXZOLEdBdkJoQixTQUFpQndOLEVBQVUvTCxHQUNoQyxJQUFJL2dFLEVBQVUzRCxHQUFRMGtFLEdBQ3RCLE9BQU8vZ0UsRUFBUVIsSUFBSXN0RSxFQUFTMzJFLEtBQUksU0FBVTdFLEdBQ3hDLE9BQU8wTyxFQUFRdkQsUUFBUW5MLEdBQUdzSyxNQUFLLFNBQVVuTCxHQUN2QyxNQUFPLENBQ0xzOEUsV0FBVyxFQUNYdDhFLE1BQU9BLE1BRVIsU0FBVUEsR0FDWCxNQUFPLENBQ0xzOEUsV0FBVyxFQUNYdDhFLE1BQU9BLFVBYU51OEUsQ0FBUUwsRUFBYTVMLEdBQU1ubEUsTUFBSyxTQUFVcXhFLEdBQy9DLElBQUlDLEVBQWVELEVBQVExcEUsUUFBTyxTQUFValQsR0FDMUMsT0FBUUEsRUFBRXk4RSxhQUNUejFFLFFBQU8sU0FBVStZLEVBQUt5ekMsR0FDdkIsSUFBSW52RCxFQUFRbXZELEVBQU1yekQsTUFHbEIsSUFBSzA3RSxHQUFnQkcsUUFBUTMzRSxHQUMzQixNQUFNQSxFQUdSLE9BQU8wYixFQUFJblcsT0FBT3ZGLEtBQ2pCLElBSUgsR0FISWk0RSxHQUFNTSxFQUFhTixLQUFLQSxJQUU1QnROLEVBQVM0TixFQUFhaHpFLE9BQU9vbEUsSUFDbEJ2ckUsT0FBUSxNQUFNLElBQUlvNEUsR0FBZ0I3TSxFQUFRN3VFLEVBQU93RixHQUM1RCxPQUFPeEYsS0FHSSxTQUFTMDhFLEdBQWVDLEdBQ3JDLElBeEVvQk4sRUFBVXI4RSxFQUFPc3dFLEVBd0VqQzBMLEVBQVdXLEVBQU1YLFNBQ2pCdm1FLEVBQVVvN0MsRUFBOEI4ckIsRUFBTyxDQUFDLGFBRXBELE9BQUlYLEdBM0VnQkssRUEyRWM1bUUsRUFBUXltRSxZQTNFWmw4RSxFQTJFeUJ5VixFQUFRelYsTUEzRTFCc3dFLEVBMkVpQzc2RCxFQUFRNjZELEtBekV0RTFrRSxHQUFRMGtFLEdBQU12aEUsSUFBSXN0RSxHQUVoQmx3RSxPQUFNLFNBQVVTLEdBRXhCLEtBRGlCLG9CQUFiQSxFQUFJdE4sT0FBNEJzTixFQUFJNU0sTUFBUUEsR0FDMUM0TSxLQUdFekIsTUFBSyxXQUNiLE9BQU9uTCxNQWtFRmk4RSxHQUFjeG1FLEdDekZ2QixJQUFJekUsR0FBVyxTQUFrQnpHLEdBQy9CLE1BQStDLG9CQUF4QzlLLE9BQU9rQixVQUFVcUQsU0FBUzlFLEtBQUtxTCxJQ29CekJxeUUsSUNUQUMsR0RSZixTQUF1QkMsR0FDckIsT0FBTyxTQUFTcjhFLEVBQVE0bEUsRUFBVStDLEdBTWhDLElBTEEsSUFBSTVpRSxHQUFTLEVBQ1R1MkUsRUFBV3Q5RSxPQUFPZ0IsR0FDbEJvVCxFQUFRdTFELEVBQVMzb0UsR0FDakI2QyxFQUFTdVEsRUFBTXZRLE9BRVpBLEtBQVUsQ0FDZixJQUFJaEQsRUFBTXVULEVBQU1pcEUsRUFBWXg1RSxJQUFXa0QsR0FDdkMsSUFBK0MsSUFBM0M2L0QsRUFBUzBXLEVBQVN6OEUsR0FBTUEsRUFBS3k4RSxHQUMvQixNQUdKLE9BQU90OEUsR0NQR204RSxHQ0VDSSxPQUpmLFNBQW9CdjhFLEVBQVE0bEUsR0FDMUIsT0FBTzVsRSxHQUFVbzhFLEdBQVFwOEUsRUFBUTRsRSxFQUFVdGpFLEtDTTlCazZFLE9BTGYsU0FBcUJqOUUsR0FFbkIsT0FEQXlFLEtBQUtrL0QsU0FBUzcrRCxJQUFJOUUsRUFiQyw2QkFjWnlFLE1DRk15NEUsT0FKZixTQUFxQmw5RSxHQUNuQixPQUFPeUUsS0FBS2svRCxTQUFTM3pELElBQUloUSxJQ0UzQixTQUFTbTlFLEdBQVNuckUsR0FDaEIsSUFBSXhMLEdBQVMsRUFDVGxELEVBQW1CLE1BQVYwTyxFQUFpQixFQUFJQSxFQUFPMU8sT0FHekMsSUFEQW1CLEtBQUtrL0QsU0FBVyxJQUFJb0MsS0FDWHYvRCxFQUFRbEQsR0FDZm1CLEtBQUt1YixJQUFJaE8sRUFBT3hMLElBS3BCMjJFLEdBQVN4OEUsVUFBVXFmLElBQU1tOUQsR0FBU3g4RSxVQUFVZ0wsS0FBT3N4RSxHQUNuREUsR0FBU3g4RSxVQUFVcVAsSUFBTWt0RSxHQUVWQyxVQ0pBQyxPQVpmLFNBQW1CejhELEVBQU8rbkQsR0FJeEIsSUFIQSxJQUFJbGlFLEdBQVMsRUFDVGxELEVBQWtCLE1BQVRxZCxFQUFnQixFQUFJQSxFQUFNcmQsU0FFOUJrRCxFQUFRbEQsR0FDZixHQUFJb2xFLEVBQVUvbkQsRUFBTW5hLEdBQVFBLEVBQU9tYSxHQUNqQyxPQUFPLEVBR1gsT0FBTyxHQ1BNMDhELE9BSmYsU0FBa0J6ZixFQUFPdDlELEdBQ3ZCLE9BQU9zOUQsRUFBTTV0RCxJQUFJMVAsSUN5RUpnOUUsT0E3RGYsU0FBcUIzOEQsRUFBT2tqRCxFQUFPZ0ksRUFBU25GLEVBQVk2VyxFQUFXcGpDLEdBQ2pFLElBQUlxakMsRUFqQnFCLEVBaUJUM1IsRUFDWjRSLEVBQVk5OEQsRUFBTXJkLE9BQ2xCbzZFLEVBQVk3WixFQUFNdmdFLE9BRXRCLEdBQUltNkUsR0FBYUMsS0FBZUYsR0FBYUUsRUFBWUQsR0FDdkQsT0FBTyxFQUdULElBQUl4UixFQUFVOXhCLEVBQU12NkMsSUFBSStnQixHQUN4QixHQUFJc3JELEdBQVc5eEIsRUFBTXY2QyxJQUFJaWtFLEdBQ3ZCLE9BQU9vSSxHQUFXcEksRUFFcEIsSUFBSXI5RCxHQUFTLEVBQ1RtRyxHQUFTLEVBQ1RneEUsRUE5QnVCLEVBOEJmOVIsRUFBb0MsSUFBSXNSLFFBQVdqekUsRUFNL0QsSUFKQWl3QyxFQUFNcjFDLElBQUk2YixFQUFPa2pELEdBQ2pCMXBCLEVBQU1yMUMsSUFBSSsrRCxFQUFPbGpELEtBR1JuYSxFQUFRaTNFLEdBQVcsQ0FDMUIsSUFBSUcsRUFBV2o5RCxFQUFNbmEsR0FDakJxM0UsRUFBV2hhLEVBQU1yOUQsR0FFckIsR0FBSWtnRSxFQUNGLElBQUlvWCxFQUFXTixFQUNYOVcsRUFBV21YLEVBQVVELEVBQVVwM0UsRUFBT3E5RCxFQUFPbGpELEVBQU93NUIsR0FDcER1c0IsRUFBV2tYLEVBQVVDLEVBQVVyM0UsRUFBT21hLEVBQU9rakQsRUFBTzFwQixHQUUxRCxRQUFpQmp3QyxJQUFiNHpFLEVBQXdCLENBQzFCLEdBQUlBLEVBQ0YsU0FFRm54RSxHQUFTLEVBQ1QsTUFHRixHQUFJZ3hFLEdBQ0YsSUFBS1AsR0FBVXZaLEdBQU8sU0FBU2dhLEVBQVVFLEdBQ25DLElBQUtWLEdBQVNNLEVBQU1JLEtBQ2ZILElBQWFDLEdBQVlOLEVBQVVLLEVBQVVDLEVBQVVoUyxFQUFTbkYsRUFBWXZzQixJQUMvRSxPQUFPd2pDLEVBQUtoeUUsS0FBS295RSxNQUVqQixDQUNOcHhFLEdBQVMsRUFDVCxZQUVHLEdBQ0RpeEUsSUFBYUMsSUFDWE4sRUFBVUssRUFBVUMsRUFBVWhTLEVBQVNuRixFQUFZdnNCLEdBQ3BELENBQ0x4dEMsR0FBUyxFQUNULE9BS0osT0FGQXd0QyxFQUFLLE9BQVd4NUIsR0FDaEJ3NUIsRUFBSyxPQUFXMHBCLEdBQ1RsM0QsR0NyRExpK0QsR0FBYzlxRSxHQUFTQSxHQUFPYSxlQUFZdUosRUFDMUMyZ0UsR0FBZ0JELEdBQWNBLEdBQVl4d0QsYUFBVWxRLEVBb0Z6Qzh6RSxPQWpFZixTQUFvQnY5RSxFQUFRb2pFLEVBQU9sNEMsRUFBS2tnRCxFQUFTbkYsRUFBWTZXLEVBQVdwakMsR0FDdEUsT0FBUXh1QixHQUNOLElBekJjLG9CQTBCWixHQUFLbHJCLEVBQU80cEUsWUFBY3hHLEVBQU13RyxZQUMzQjVwRSxFQUFPK3BFLFlBQWMzRyxFQUFNMkcsV0FDOUIsT0FBTyxFQUVUL3BFLEVBQVNBLEVBQU95ZSxPQUNoQjJrRCxFQUFRQSxFQUFNM2tELE9BRWhCLElBbENpQix1QkFtQ2YsUUFBS3plLEVBQU80cEUsWUFBY3hHLEVBQU13RyxhQUMzQmtULEVBQVUsSUFBSXJULEdBQVd6cEUsR0FBUyxJQUFJeXBFLEdBQVdyRyxLQUt4RCxJQW5EVSxtQkFvRFYsSUFuRFUsZ0JBb0RWLElBakRZLGtCQW9EVixPQUFPRCxJQUFJbmpFLEdBQVNvakUsR0FFdEIsSUF4RFcsaUJBeURULE9BQU9wakUsRUFBT25CLE1BQVF1a0UsRUFBTXZrRSxNQUFRbUIsRUFBT2MsU0FBV3NpRSxFQUFNdGlFLFFBRTlELElBeERZLGtCQXlEWixJQXZEWSxrQkEyRFYsT0FBT2QsR0FBV29qRSxFQUFRLEdBRTVCLElBakVTLGVBa0VQLElBQUlvYSxFQUFVMUYsR0FFaEIsSUFqRVMsZUFrRVAsSUFBSWlGLEVBNUVpQixFQTRFTDNSLEVBR2hCLEdBRkFvUyxJQUFZQSxFQUFVekYsSUFFbEIvM0UsRUFBTys0QyxNQUFRcXFCLEVBQU1ycUIsT0FBU2drQyxFQUNoQyxPQUFPLEVBR1QsSUFBSXZSLEVBQVU5eEIsRUFBTXY2QyxJQUFJYSxHQUN4QixHQUFJd3JFLEVBQ0YsT0FBT0EsR0FBV3BJLEVBRXBCZ0ksR0F0RnVCLEVBeUZ2QjF4QixFQUFNcjFDLElBQUlyRSxFQUFRb2pFLEdBQ2xCLElBQUlsM0QsRUFBUzJ3RSxHQUFZVyxFQUFReDlFLEdBQVN3OUUsRUFBUXBhLEdBQVFnSSxFQUFTbkYsRUFBWTZXLEVBQVdwakMsR0FFMUYsT0FEQUEsRUFBSyxPQUFXMTVDLEdBQ1RrTSxFQUVULElBbkZZLGtCQW9GVixHQUFJaytELEdBQ0YsT0FBT0EsR0FBYzNyRSxLQUFLdUIsSUFBV29xRSxHQUFjM3JFLEtBQUsya0UsR0FHOUQsT0FBTyxHQ25HTGpqRSxHQUhjbkIsT0FBT2tCLFVBR1FDLGVBK0VsQnM5RSxPQWhFZixTQUFzQno5RSxFQUFRb2pFLEVBQU9nSSxFQUFTbkYsRUFBWTZXLEVBQVdwakMsR0FDbkUsSUFBSXFqQyxFQXRCcUIsRUFzQlQzUixFQUNac1MsRUFBVzdVLEdBQVc3b0UsR0FDdEIyOUUsRUFBWUQsRUFBUzc2RSxPQUl6QixHQUFJODZFLEdBSFc5VSxHQUFXekYsR0FDRHZnRSxTQUVNazZFLEVBQzdCLE9BQU8sRUFHVCxJQURBLElBQUloM0UsRUFBUTQzRSxFQUNMNTNFLEtBQVMsQ0FDZCxJQUFJbEcsRUFBTTY5RSxFQUFTMzNFLEdBQ25CLEtBQU1nM0UsRUFBWWw5RSxLQUFPdWpFLEVBQVFqakUsR0FBZTFCLEtBQUsya0UsRUFBT3ZqRSxJQUMxRCxPQUFPLEVBSVgsSUFBSTJyRSxFQUFVOXhCLEVBQU12NkMsSUFBSWEsR0FDeEIsR0FBSXdyRSxHQUFXOXhCLEVBQU12NkMsSUFBSWlrRSxHQUN2QixPQUFPb0ksR0FBV3BJLEVBRXBCLElBQUlsM0QsR0FBUyxFQUNid3RDLEVBQU1yMUMsSUFBSXJFLEVBQVFvakUsR0FDbEIxcEIsRUFBTXIxQyxJQUFJKytELEVBQU9wakUsR0FHakIsSUFEQSxJQUFJNDlFLEVBQVdiLElBQ05oM0UsRUFBUTQzRSxHQUFXLENBRTFCLElBQUk1WCxFQUFXL2xFLEVBRGZILEVBQU02OUUsRUFBUzMzRSxJQUVYcTNFLEVBQVdoYSxFQUFNdmpFLEdBRXJCLEdBQUlvbUUsRUFDRixJQUFJb1gsRUFBV04sRUFDWDlXLEVBQVdtWCxFQUFVclgsRUFBVWxtRSxFQUFLdWpFLEVBQU9wakUsRUFBUTA1QyxHQUNuRHVzQixFQUFXRixFQUFVcVgsRUFBVXY5RSxFQUFLRyxFQUFRb2pFLEVBQU8xcEIsR0FHekQsVUFBbUJqd0MsSUFBYjR6RSxFQUNHdFgsSUFBYXFYLEdBQVlOLEVBQVUvVyxFQUFVcVgsRUFBVWhTLEVBQVNuRixFQUFZdnNCLEdBQzdFMmpDLEdBQ0QsQ0FDTG54RSxHQUFTLEVBQ1QsTUFFRjB4RSxJQUFhQSxFQUFrQixlQUFQLzlFLEdBRTFCLEdBQUlxTSxJQUFXMHhFLEVBQVUsQ0FDdkIsSUFBSUMsRUFBVTc5RSxFQUFPa0IsWUFDakI0OEUsRUFBVTFhLEVBQU1saUUsWUFHaEIyOEUsR0FBV0MsS0FDVixnQkFBaUI5OUUsTUFBVSxnQkFBaUJvakUsSUFDekIsbUJBQVh5YSxHQUF5QkEsYUFBbUJBLEdBQ2pDLG1CQUFYQyxHQUF5QkEsYUFBbUJBLElBQ3ZENXhFLEdBQVMsR0FLYixPQUZBd3RDLEVBQUssT0FBVzE1QyxHQUNoQjA1QyxFQUFLLE9BQVcwcEIsR0FDVGwzRCxHQ2hFTC9MLEdBSGNuQixPQUFPa0IsVUFHUUMsZUE2RGxCNDlFLE9BN0NmLFNBQXlCLzlFLEVBQVFvakUsRUFBT2dJLEVBQVNuRixFQUFZNlcsRUFBV3BqQyxHQUN0RSxJQUFJc2tDLEVBQVc3N0UsR0FBUW5DLEdBQ25CaStFLEVBQVc5N0UsR0FBUWloRSxHQUNuQjhhLEVBQVNGLEVBMUJBLGlCQTBCc0IzVSxHQUFPcnBFLEdBQ3RDbStFLEVBQVNGLEVBM0JBLGlCQTJCc0I1VSxHQUFPakcsR0FLdENnYixFQS9CVSxvQkE0QmRGLEVBOUJZLHNCQThCSEEsRUE1Qkssa0JBNEIyQkEsR0FJckNHLEVBaENVLG9CQTZCZEYsRUEvQlksc0JBK0JIQSxFQTdCSyxrQkE2QjJCQSxHQUlyQ0csRUFBWUosR0FBVUMsRUFFMUIsR0FBSUcsR0FBYTUwRSxhQUFTMUosR0FBUyxDQUNqQyxJQUFLMEosYUFBUzA1RCxHQUNaLE9BQU8sRUFFVDRhLEdBQVcsRUFDWEksR0FBVyxFQUViLEdBQUlFLElBQWNGLEVBRWhCLE9BREExa0MsSUFBVUEsRUFBUSxJQUFJZ3NCLElBQ2RzWSxHQUFZblgsR0FBYTdtRSxHQUM3QjY4RSxHQUFZNzhFLEVBQVFvakUsRUFBT2dJLEVBQVNuRixFQUFZNlcsRUFBV3BqQyxHQUMzRDZqQyxHQUFXdjlFLEVBQVFvakUsRUFBTzhhLEVBQVE5UyxFQUFTbkYsRUFBWTZXLEVBQVdwakMsR0FFeEUsS0FyRHlCLEVBcURuQjB4QixHQUFpQyxDQUNyQyxJQUFJbVQsRUFBZUgsR0FBWWorRSxHQUFlMUIsS0FBS3VCLEVBQVEsZUFDdkR3K0UsRUFBZUgsR0FBWWwrRSxHQUFlMUIsS0FBSzJrRSxFQUFPLGVBRTFELEdBQUltYixHQUFnQkMsRUFBYyxDQUNoQyxJQUFJQyxFQUFlRixFQUFlditFLEVBQU9ULFFBQVVTLEVBQy9DMCtFLEVBQWVGLEVBQWVwYixFQUFNN2pFLFFBQVU2akUsRUFHbEQsT0FEQTFwQixJQUFVQSxFQUFRLElBQUlnc0IsSUFDZm9YLEVBQVUyQixFQUFjQyxFQUFjdFQsRUFBU25GLEVBQVl2c0IsSUFHdEUsUUFBSzRrQyxJQUdMNWtDLElBQVVBLEVBQVEsSUFBSWdzQixJQUNmK1gsR0FBYXo5RSxFQUFRb2pFLEVBQU9nSSxFQUFTbkYsRUFBWTZXLEVBQVdwakMsS0NwRHREaWxDLE9BVmYsU0FBU0EsRUFBWXAvRSxFQUFPNmpFLEVBQU9nSSxFQUFTbkYsRUFBWXZzQixHQUN0RCxPQUFJbjZDLElBQVU2akUsSUFHRCxNQUFUN2pFLEdBQTBCLE1BQVQ2akUsSUFBbUJSLEdBQWFyakUsS0FBV3FqRSxHQUFhUSxHQUNwRTdqRSxHQUFVQSxHQUFTNmpFLEdBQVVBLEVBRS9CMmEsR0FBZ0J4K0UsRUFBTzZqRSxFQUFPZ0ksRUFBU25GLEVBQVkwWSxFQUFhamxDLEtDcUMxRGtsQyxPQTVDZixTQUFxQjUrRSxFQUFRNlgsRUFBUWduRSxFQUFXNVksR0FDOUMsSUFBSWxnRSxFQUFRODRFLEVBQVVoOEUsT0FDbEJBLEVBQVNrRCxFQUNUKzRFLEdBQWdCN1ksRUFFcEIsR0FBYyxNQUFWam1FLEVBQ0YsT0FBUTZDLEVBR1YsSUFEQTdDLEVBQVNoQixPQUFPZ0IsR0FDVCtGLEtBQVMsQ0FDZCxJQUFJRCxFQUFPKzRFLEVBQVU5NEUsR0FDckIsR0FBSys0RSxHQUFnQmg1RSxFQUFLLEdBQ2xCQSxFQUFLLEtBQU85RixFQUFPOEYsRUFBSyxNQUN0QkEsRUFBSyxLQUFNOUYsR0FFbkIsT0FBTyxFQUdYLE9BQVMrRixFQUFRbEQsR0FBUSxDQUV2QixJQUFJaEQsR0FESmlHLEVBQU8rNEUsRUFBVTk0RSxJQUNGLEdBQ1hnZ0UsRUFBVy9sRSxFQUFPSCxHQUNsQmsvRSxFQUFXajVFLEVBQUssR0FFcEIsR0FBSWc1RSxHQUFnQmg1RSxFQUFLLElBQ3ZCLFFBQWlCMkQsSUFBYnM4RCxLQUE0QmxtRSxLQUFPRyxHQUNyQyxPQUFPLE1BRUosQ0FDTCxJQUFJMDVDLEVBQVEsSUFBSWdzQixHQUNoQixHQUFJTyxFQUNGLElBQUkvNUQsRUFBUys1RCxFQUFXRixFQUFVZ1osRUFBVWwvRSxFQUFLRyxFQUFRNlgsRUFBUTZoQyxHQUVuRSxVQUFpQmp3QyxJQUFYeUMsRUFDRXl5RSxHQUFZSSxFQUFVaFosRUFBVWlaLEVBQStDL1ksRUFBWXZzQixHQUMzRnh0QyxHQUVOLE9BQU8sR0FJYixPQUFPLEdDNUNNK3lFLE9BSmYsU0FBNEIxL0UsR0FDMUIsT0FBT0EsR0FBVUEsSUFBVWdSLEdBQVNoUixJQ1l2QjIvRSxPQWJmLFNBQXNCbC9FLEdBSXBCLElBSEEsSUFBSWtNLEVBQVM1SixHQUFLdEMsR0FDZDZDLEVBQVNxSixFQUFPckosT0FFYkEsS0FBVSxDQUNmLElBQUloRCxFQUFNcU0sRUFBT3JKLEdBQ2J0RCxFQUFRUyxFQUFPSCxHQUVuQnFNLEVBQU9ySixHQUFVLENBQUNoRCxFQUFLTixFQUFPMC9FLEdBQW1CMS9FLElBRW5ELE9BQU8yTSxHQ0RNaXpFLE9BVmYsU0FBaUN0L0UsRUFBS2svRSxHQUNwQyxPQUFPLFNBQVMvK0UsR0FDZCxPQUFjLE1BQVZBLElBR0dBLEVBQU9ILEtBQVNrL0UsU0FDUHQxRSxJQUFiczFFLEdBQTJCbC9FLEtBQU9iLE9BQU9nQixPQ01qQ28vRSxPQVZmLFNBQXFCdm5FLEdBQ25CLElBQUlnbkUsRUFBWUssR0FBYXJuRSxHQUM3QixPQUF3QixHQUFwQmduRSxFQUFVaDhFLFFBQWVnOEUsRUFBVSxHQUFHLEdBQ2pDTSxHQUF3Qk4sRUFBVSxHQUFHLEdBQUlBLEVBQVUsR0FBRyxJQUV4RCxTQUFTNytFLEdBQ2QsT0FBT0EsSUFBVzZYLEdBQVUrbUUsR0FBWTUrRSxFQUFRNlgsRUFBUWduRSxLQ003Q1EsT0FaZixTQUFpQnIvRSxFQUFRK0UsR0FNdkIsSUFIQSxJQUFJZ0IsRUFBUSxFQUNSbEQsR0FISmtDLEVBQU8weUUsR0FBUzF5RSxFQUFNL0UsSUFHSjZDLE9BRUQsTUFBVjdDLEdBQWtCK0YsRUFBUWxELEdBQy9CN0MsRUFBU0EsRUFBT3FzRSxHQUFNdG5FLEVBQUtnQixPQUU3QixPQUFRQSxHQUFTQSxHQUFTbEQsRUFBVTdDLE9BQVN5SixHQ1loQ3RLLE9BTGYsU0FBYWEsRUFBUStFLEVBQU00TixHQUN6QixJQUFJekcsRUFBbUIsTUFBVmxNLE9BQWlCeUosRUFBWTQxRSxHQUFRci9FLEVBQVErRSxHQUMxRCxZQUFrQjBFLElBQVh5QyxFQUF1QnlHLEVBQWV6RyxHQ2pCaENvekUsT0FKZixTQUFtQnQvRSxFQUFRSCxHQUN6QixPQUFpQixNQUFWRyxHQUFrQkgsS0FBT2IsT0FBT2dCLElDd0IxQnUvRSxPQUpmLFNBQWV2L0UsRUFBUStFLEdBQ3JCLE9BQWlCLE1BQVYvRSxHQUFrQjAzRSxHQUFRMTNFLEVBQVErRSxFQUFNdTZFLEtDRWxDRSxPQVpmLFNBQTZCejZFLEVBQU1nNkUsR0FDakMsT0FBSXZILEdBQU16eUUsSUFBU2s2RSxHQUFtQkYsR0FDN0JJLEdBQXdCOVMsR0FBTXRuRSxHQUFPZzZFLEdBRXZDLFNBQVMvK0UsR0FDZCxJQUFJK2xFLEVBQVc1bUUsR0FBSWEsRUFBUStFLEdBQzNCLFlBQXFCMEUsSUFBYnM4RCxHQUEwQkEsSUFBYWdaLEVBQzNDUSxHQUFNdi9FLEVBQVErRSxHQUNkNDVFLEdBQVlJLEVBQVVoWixFQUFVaVosS0NSekJTLE9BSmYsU0FBa0JsZ0YsR0FDaEIsT0FBT0EsR0NKTW1nRixPQU5mLFNBQXNCNy9FLEdBQ3BCLE9BQU8sU0FBU0csR0FDZCxPQUFpQixNQUFWQSxPQUFpQnlKLEVBQVl6SixFQUFPSCxLQ01oQzgvRSxPQU5mLFNBQTBCNTZFLEdBQ3hCLE9BQU8sU0FBUy9FLEdBQ2QsT0FBT3EvRSxHQUFRci9FLEVBQVErRSxLQ29CWjlFLE9BSmYsU0FBa0I4RSxHQUNoQixPQUFPeXlFLEdBQU16eUUsR0FBUTI2RSxHQUFhclQsR0FBTXRuRSxJQUFTNDZFLEdBQWlCNTZFLElDRXJENjZFLE9BakJmLFNBQXNCcmdGLEdBR3BCLE1BQW9CLG1CQUFUQSxFQUNGQSxFQUVJLE1BQVRBLEVBQ0trZ0YsR0FFVyxpQkFBVGxnRixFQUNGNEMsR0FBUTVDLEdBQ1hpZ0YsR0FBb0JqZ0YsRUFBTSxHQUFJQSxFQUFNLElBQ3BDNi9FLEdBQVk3L0UsR0FFWFUsR0FBU1YsSUNlSHNnRixPQVZmLFNBQW1CNy9FLEVBQVE0bEUsR0FDekIsSUFBSTE1RCxFQUFTLEdBTWIsT0FMQTA1RCxFQUFXZ2EsR0FBYWhhLEVBQVUsR0FFbEMyVyxHQUFXdjhFLEdBQVEsU0FBU1QsRUFBT00sRUFBS0csR0FDdEM2bEUsR0FBZ0IzNUQsRUFBUXJNLEVBQUsrbEUsRUFBU3JtRSxFQUFPTSxFQUFLRyxPQUU3Q2tNLEcsUUNyQ0w0ekUsR0FDTyxJQURQQSxHQUVLLElBR0xDLEdBQXlCLFdBQzNCLFNBQVNBLEVBQVVsZ0YsRUFBS21WLEdBS3RCLFFBSmdCLElBQVpBLElBQ0ZBLEVBQVUsSUFHTyxpQkFBUm5WLEVBQWtCLE1BQU0sSUFBSXlRLFVBQVUsOEJBQWdDelEsR0FFakYsR0FEQW1FLEtBQUtuRSxJQUFNQSxFQUFJbzRCLE9BQ0gsS0FBUnA0QixFQUFZLE1BQU0sSUFBSXlRLFVBQVUsa0NBQ3BDdE0sS0FBS2c4RSxVQUFZaDhFLEtBQUtuRSxJQUFJLEtBQU9pZ0YsR0FDakM5N0UsS0FBS2k4RSxRQUFVajhFLEtBQUtuRSxJQUFJLEtBQU9pZ0YsR0FDL0I5N0UsS0FBS2s4RSxXQUFhbDhFLEtBQUtnOEUsWUFBY2g4RSxLQUFLaThFLFFBQzFDLElBQUl2cUUsRUFBUzFSLEtBQUtnOEUsVUFBWUYsR0FBbUI5N0UsS0FBS2k4RSxRQUFVSCxHQUFpQixHQUNqRjk3RSxLQUFLZSxLQUFPZixLQUFLbkUsSUFBSWtLLE1BQU0yTCxFQUFPN1MsUUFDbENtQixLQUFLbEYsT0FBU2tGLEtBQUtlLE1BQVFqRyxrQkFBT2tGLEtBQUtlLE1BQU0sR0FDN0NmLEtBQUtpQixJQUFNK1AsRUFBUS9QLElBR3JCLElBQUlvTyxFQUFTMHNFLEVBQVU3L0UsVUFrQ3ZCLE9BaENBbVQsRUFBT2UsU0FBVyxTQUFrQlksR0FDbEMsSUFBSTlJLEVBQVNsSSxLQUFLZzhFLFVBQVlockUsRUFBUU4sUUFBVTFRLEtBQUtpOEUsUUFBVWpyRSxFQUFRelYsTUFBUXlWLEVBQVFsSSxPQUd2RixPQUZJOUksS0FBS2xGLFNBQVFvTixFQUFTbEksS0FBS2xGLE9BQU9vTixHQUFVLEtBQzVDbEksS0FBS2lCLE1BQUtpSCxFQUFTbEksS0FBS2lCLElBQUlpSCxJQUN6QkEsR0FHVG1ILEVBQU84c0UsS0FBTyxTQUFjNWdGLEVBQU95VixHQUNqQyxPQUFPaFIsS0FBS29RLFNBQVMrN0MsRUFBUyxHQUFJbjdDLEVBQVMsQ0FDekN6VixNQUFPQSxNQUlYOFQsRUFBTzlILFFBQVUsV0FDZixPQUFPdkgsTUFHVHFQLEVBQU8rc0UsU0FBVyxXQUNoQixNQUFPLENBQ0w3NEUsS0FBTSxNQUNOMUgsSUFBS21FLEtBQUtuRSxNQUlkd1QsRUFBTzlQLFNBQVcsV0FDaEIsTUFBTyxPQUFTUyxLQUFLbkUsSUFBTSxLQUc3QmtnRixFQUFVTSxNQUFRLFNBQWU5Z0YsR0FDL0IsT0FBT0EsR0FBU0EsRUFBTStnRixZQUdqQlAsRUFwRG9CLEdBd0Q3QkEsR0FBVTcvRSxVQUFVb2dGLFlBQWEsRUN6RGpDLElBQUlqRixHQUFjSixHQUFnQkksWUFxQjNCLFNBQVNrRixHQUFtQmh0RSxHQUNqQyxJQUFJaFUsRUFBUWdVLEVBQUtoVSxNQUNiaWhFLEVBQVFqdEQsRUFBS2l0RCxNQUNiajFELEVBQVVnSSxFQUFLaEksUUFDZnN1RSxFQUFnQnRtRSxFQUFLc21FLGNBQ3JCampFLEVBQU93NUMsRUFBOEI3OEMsRUFBTSxDQUFDLFFBQVMsUUFBUyxVQUFXLGtCQUU3RSxPQUFPLFNBQXFCaXRFLEdBQzFCLElBQUk1dEIsT0FBa0IsSUFBVjR0QixFQUFtQixHQUFLQSxFQUNoQ0MsRUFBYTd0QixFQUFNN3RELEtBQ25CQSxPQUFzQixJQUFmMDdFLEVBQXdCN3BFLEVBQUs3UixLQUFPMDdFLEVBQzNDQyxFQUFnQjl0QixFQUFNOXhELFFBQ3RCQSxPQUE0QixJQUFsQjQvRSxFQUEyQjlwRSxFQUFLOVYsUUFBVTQvRSxFQUNwREMsRUFBYS90QixFQUFNcnJELEtBQ25CQSxPQUFzQixJQUFmbzVFLEVBQXdCL3BFLEVBQUsvWCxLQUFPOGhGLEVBQzNDbGtCLEVBQVM3SixFQUFNNkosT0FRbkIsT0FOQUEsRUFBU3RNLEVBQVMsQ0FDaEJwckQsS0FBTUEsRUFDTnhGLE1BQU9BLEVBQ1BzNkUsY0FBZUEsRUFDZnJaLE1BQU9BLEdBekJiLFNBQXVCb2dCLEVBQVdDLEVBQVd0MUUsR0FDM0MsT0FBT3MwRSxHQUFVMXZCLEVBQVMsR0FBSXl3QixFQUFXLEdBQUlDLEdBQVl0MUUsR0F5QnBEdTFFLENBQWNscUUsRUFBSzZsRCxPQUFRQSxFQUFRbHhELElBQy9CNGtELEVBQVMsSUFBSThxQixHQUFnQkksR0FBWXY2RSxFQUFTMjdELEdBQVNsOUQsRUFBT3dGLEVBQU13QyxHQUFPLENBQ3BGazFELE9BQVFBLEtBSUMsU0FBU3NrQixHQUFpQi9yRSxHQUN2QyxJQUFJblcsRUFBT21XLEVBQVFuVyxLQUNmaUMsRUFBVWtVLEVBQVFsVSxRQUNsQjRFLEVBQU9zUCxFQUFRdFAsS0FDZisyRCxFQUFTem5ELEVBQVF5bkQsT0FFckIsU0FBUytVLEVBQVMwSyxHQUNoQixJQUFJMzhFLEVBQVEyOEUsRUFBTTM4RSxNQUNkd0YsRUFBT20zRSxFQUFNbjNFLEtBQ2J5N0QsRUFBUTBiLEVBQU0xYixNQUNkeHJELEVBQVVrbkUsRUFBTWxuRSxRQUNoQjZrRSxFQUFnQnFDLEVBQU1yQyxjQUN0QmhLLEVBQU9xTSxFQUFNck0sS0FDYmhSLEVBQU96TyxFQUE4QjhyQixFQUFPLENBQUMsUUFBUyxPQUFRLFFBQVMsVUFBVyxnQkFBaUIsU0FFbkdwdkUsRUFBU2tJLEVBQVFsSSxPQUVqQnZCLEVBQVUsU0FBaUJ3cEQsR0FDN0IsT0FBT2lzQixHQUFJWCxNQUFNdHJCLEdBQVFBLEVBQUszZ0QsU0FBUyxDQUNyQzdVLE1BQU9BLEVBQ1B1TixPQUFRQSxFQUNSNEgsUUFBU00sRUFBUU4sVUFDZHFnRCxHQUdIa3NCLEVBQWNWLEdBQW1CLENBQ25Dei9FLFFBQVNBLEVBQ1RpRSxLQUFNQSxFQUNOeEYsTUFBT0EsRUFDUHM2RSxjQUFlQSxFQUNmcGQsT0FBUUEsRUFDUitELE1BQU9BLEVBQ1BqMUQsUUFBU0EsRUFDVDFNLEtBQU1BLElBR0pxaUYsRUFBTS93QixFQUFTLENBQ2pCcHJELEtBQU1BLEVBQ04rSCxPQUFRQSxFQUNSdkYsS0FBTTFJLEVBQ05vaUYsWUFBYUEsRUFDYjExRSxRQUFTQSxFQUNUeUosUUFBU0EsR0FDUjZwRCxHQUVILE9BeEZKLFNBQWlCc2lCLEVBQVFELEVBQUszaEYsRUFBT3N3RSxHQUNuQyxJQUwrQnp2RSxFQUszQjhMLEVBQVNpMUUsRUFBTzFpRixLQUFLeWlGLEVBQUszaEYsR0FDOUIsSUFBS3N3RSxFQUFNLE9BQU8vZ0UsUUFBUXZELFFBQVFXLEdBRWxDLElBUitCOUwsRUFRbEI4TCxJQVBpQixtQkFBWDlMLEVBQUVzSyxNQUEwQyxtQkFBWnRLLEVBQUVzTCxNQVFuRCxNQUFNLElBQUlxQixNQUFNLDZCQUFnQ20wRSxFQUFJMzVFLEtBQXBDLGtIQUdsQixPQUFPMEMsc0JBQW1Cc0IsUUFBUVcsR0FnRnpCazFFLENBQVExN0UsRUFBTXc3RSxFQUFLM2hGLEVBQU9zd0UsR0FBTW5sRSxNQUFLLFNBQVUyMkUsR0FDcEQsR0FBSXBHLEdBQWdCRyxRQUFRaUcsR0FBZSxNQUFNQSxFQUFrQixJQUFLQSxFQUFjLE1BQU1KLE9BS2hHLE9BREF6UCxFQUFTOFAsUUFBVXRzRSxFQUNadzhELEVDcEdGLFNBQVN2RSxHQUFNMEMsRUFBUTVxRSxFQUFNeEYsRUFBT21WLEdBS3pDLElBQUk1SCxFQUFReTBFLEVBQVVDLEVBRXRCLFlBTmdCLElBQVo5c0UsSUFDRkEsRUFBVW5WLEdBS1B3RixHQUtMc0IsbUJBQVF0QixHQUFNLFNBQVUwOEUsRUFBTy82RSxFQUFXdkUsR0FDeEMsSUFBSStDLEVBQU93QixFQWpCSixTQUFjeEIsR0FDdkIsT0FBT0EsRUFBS21SLE9BQU8sRUFBR25SLEVBQUtyQyxPQUFTLEdBQUd3VCxPQUFPLEdBZ0JyQjRoQixDQUFLd3BELEdBQVNBLEVBT3JDLElBTkE5UixFQUFTQSxFQUFPcGtFLFFBQVEsQ0FDdEJtSixRQUFTQSxFQUNUNUgsT0FBUUEsRUFDUnZOLE1BQU9BLEtBR0VtaUYsVUFBVyxDQUNwQixJQUFJajdFLEVBQU10RSxFQUFVb3pFLFNBQVNyd0UsRUFBTSxJQUFNLEVBRXpDLEdBQUkzRixHQUFTa0gsR0FBT2xILEVBQU1zRCxPQUN4QixNQUFNLElBQUlrSyxNQUFNLG9EQUFzRDAwRSxFQUFRLGtCQUFvQjE4RSxFQUFsRiwrQ0FHbEIrSCxFQUFTdk4sRUFDVEEsRUFBUUEsR0FBU0EsRUFBTWtILEdBQ3ZCa3BFLEVBQVNBLEVBQU8rUixVQU9sQixJQUFLdi9FLEVBQVMsQ0FDWixJQUFLd3RFLEVBQU9nUyxTQUFXaFMsRUFBT2dTLE9BQU96OEUsR0FBTyxNQUFNLElBQUk2SCxNQUFNLHlDQUEyQ2hJLEVBQTNDLGlCQUEyRXk4RSxFQUFnQixzQkFBeUI3UixFQUFPaVMsTUFBUSxNQUMvTDkwRSxFQUFTdk4sRUFDVEEsRUFBUUEsR0FBU0EsRUFBTTJGLEdBQ3ZCeXFFLEVBQVNBLEVBQU9nUyxPQUFPejhFLEdBR3pCcThFLEVBQVdyOEUsRUFDWHM4RSxFQUFnQjk2RSxFQUFZLElBQU0rNkUsRUFBUSxJQUFNLElBQU1BLEtBRWpELENBQ0w5UixPQUFRQSxFQUNSN2lFLE9BQVFBLEVBQ1IrMEUsV0FBWU4sSUExQ0ksQ0FDaEJ6MEUsT0FBUUEsRUFDUiswRSxXQUFZOThFLEVBQ1o0cUUsT0FBUUEsR0EyQ1osSUM1Q0ltUyxHQUFzQixXQUN4QixTQUFTQSxJQUNQOTlFLEtBQUtvd0QsS0FBTyxJQUFJOTBDLElBQ2hCdGIsS0FBS21kLEtBQU8sSUFBSS9CLElBR2xCLEl6RFhtQzJpRSxFQUFhQyxFQUFZQyxFeURXeEQ1dUUsRUFBU3l1RSxFQUFPNWhGLFVBZ0dwQixPQTlGQW1ULEVBQU8rc0UsU0FBVyxXQUNoQixJQUFJOEIsRUFBYyxHQUVUQyxFQUFZbitFLEtBQUtvd0QsS0FBTWd1QixFQUFXaGdGLE1BQU1ELFFBQVFnZ0YsR0FBWUUsRUFBSyxFQUExRSxJQUE2RUYsRUFBWUMsRUFBV0QsRUFBWUEsRUFBVTlpRixPQUFPc2hCLGNBQWUsQ0FDOUksSUFBSXBOLEVBRUosR0FBSTZ1RSxFQUFVLENBQ1osR0FBSUMsR0FBTUYsRUFBVXQvRSxPQUFRLE1BQzVCMFEsRUFBTzR1RSxFQUFVRSxTQUNaLENBRUwsSUFEQUEsRUFBS0YsRUFBVXIzRSxRQUNSaVksS0FBTSxNQUNieFAsRUFBTzh1RSxFQUFHOWlGLE1BR1osSUFBSXcxRCxFQUFPeGhELEVBQ1gydUUsRUFBWWgzRSxLQUFLNnBELEdBR2QsSUFBSXV0QixFQUFhdCtFLEtBQUttZCxLQUFNb2hFLEVBQVluZ0YsTUFBTUQsUUFBUW1nRixHQUFhRSxFQUFNLEVBQTlFLElBQWlGRixFQUFhQyxFQUFZRCxFQUFhQSxFQUFXampGLE9BQU9zaEIsY0FBZSxDQUN0SixJQUFJaXlDLEVBRUosR0FBSTJ2QixFQUFXLENBQ2IsR0FBSUMsR0FBT0YsRUFBV3ovRSxPQUFRLE1BQzlCK3ZELEVBQVEwdkIsRUFBV0UsU0FDZCxDQUVMLElBREFBLEVBQU1GLEVBQVd4M0UsUUFDVGlZLEtBQU0sTUFDZDZ2QyxFQUFRNHZCLEVBQUlqakYsTUFHZCxJQUNJd2lCLEVBRFE2d0MsRUFDSSxHQUNoQnN2QixFQUFZaDNFLEtBQUs2VyxFQUFJcStELFlBR3ZCLE9BQU84QixHQUdUN3VFLEVBQU95USxRQUFVLFdBQ2YsT0FBTzIrRCxHQUFTeitFLEtBQUtvd0QsTUFBTXByRCxPQUFPeTVFLEdBQVN6K0UsS0FBS21kLEtBQUs1UCxZQUd2RDhCLEVBQU9rTSxJQUFNLFNBQWFoZ0IsR0FDeEJ5aEYsR0FBSVgsTUFBTTlnRixHQUFTeUUsS0FBS21kLEtBQUs5YyxJQUFJOUUsRUFBTU0sSUFBS04sR0FBU3lFLEtBQUtvd0QsS0FBSzcwQyxJQUFJaGdCLElBR3JFOFQsRUFBTzJNLE9BQVMsU0FBaUJ6Z0IsR0FDL0J5aEYsR0FBSVgsTUFBTTlnRixHQUFTeUUsS0FBS21kLEtBQUtuQixPQUFPemdCLEVBQU1NLEtBQU9tRSxLQUFLb3dELEtBQUtwMEMsT0FBT3pnQixJQUdwRThULEVBQU85RCxJQUFNLFNBQWFoUSxFQUFPZ00sR0FDL0IsR0FBSXZILEtBQUtvd0QsS0FBSzdrRCxJQUFJaFEsR0FBUSxPQUFPLEVBSWpDLElBSEEsSUFBSXcxRCxFQUNBeGpELEVBQVN2TixLQUFLbWQsS0FBSzVQLFdBRWhCd2pELEVBQU94akQsRUFBT3pHLFFBQWNpWSxNQUNqQyxHQUFJeFgsRUFBUXdwRCxFQUFLeDFELFNBQVdBLEVBQU8sT0FBTyxFQUc1QyxPQUFPLEdBR1Q4VCxFQUFPb3VELE1BQVEsV0FDYixJQUFJMzJELEVBQU8sSUFBSWczRSxFQUdmLE9BRkFoM0UsRUFBS3NwRCxLQUFPLElBQUk5MEMsSUFBSXRiLEtBQUtvd0QsTUFDekJ0cEQsRUFBS3FXLEtBQU8sSUFBSS9CLElBQUlwYixLQUFLbWQsTUFDbEJyVyxHQUdUdUksRUFBT3F2RSxNQUFRLFNBQWVDLEVBQVVDLEdBQ3RDLElBQUk5M0UsRUFBTzlHLEtBQUt5OUQsUUFhaEIsT0FaQWtoQixFQUFTdnVCLEtBQUsvdEQsU0FBUSxTQUFVOUcsR0FDOUIsT0FBT3VMLEVBQUt5VSxJQUFJaGdCLE1BRWxCb2pGLEVBQVN4aEUsS0FBSzlhLFNBQVEsU0FBVTlHLEdBQzlCLE9BQU91TCxFQUFLeVUsSUFBSWhnQixNQUVsQnFqRixFQUFZeHVCLEtBQUsvdEQsU0FBUSxTQUFVOUcsR0FDakMsT0FBT3VMLEVBQUtrVixPQUFPemdCLE1BRXJCcWpGLEVBQVl6aEUsS0FBSzlhLFNBQVEsU0FBVTlHLEdBQ2pDLE9BQU91TCxFQUFLa1YsT0FBT3pnQixNQUVkdUwsR3pEakcwQmkzRSxFeURvR3RCRCxHekRwR21DRSxFeURvRzNCLENBQUMsQ0FDcEJuaUYsSUFBSyxPQUNMVixJQUFLLFdBQ0gsT0FBTzZFLEtBQUtvd0QsS0FBS3JiLEtBQU8vMEMsS0FBS21kLEtBQUs0M0IsVXpEdEd0QnErQixHQUFrQjJLLEVBQVk3aEYsVUFBVzhoRixHQUNyREMsR0FBYTdLLEdBQWtCMkssRUFBYUUsR3lEeUd6Q0gsRUF0R2lCLEdBeUdYLFNBQVNlLEdBQVc3dEUsR0FDakMsSUFBSTlCLEVBQVFsUCxLQU1aLFFBSmdCLElBQVpnUixJQUNGQSxFQUFVLE1BR05oUixnQkFBZ0I2K0UsSUFBYSxPQUFPLElBQUlBLEdBQzlDNytFLEtBQUs4K0UsTUFBUSxHQUNiOStFLEtBQUsrK0UsWUFBYyxHQUNuQi8rRSxLQUFLZy9FLFNBQVcsQ0FDZGhULFlBQVksRUFDWmlULFdBQVcsR0FFYmovRSxLQUFLay9FLFdBQWFsa0YsT0FBT1ksT0FBTyxNQUNoQ29FLEtBQUttL0UsV0FBYSxJQUFJckIsR0FDdEI5OUUsS0FBS28vRSxXQUFhLElBQUl0QixHQUN0Qjk5RSxLQUFLcS9FLE1BQVEsR0FDYnIvRSxLQUFLcy9FLFdBQWEsR0FDbEJ0L0UsS0FBS3UvRSxjQUFhLFdBQ2hCcndFLEVBQU1zd0UsVUFBVXhrRCxHQUFPNDZDLFlBRXJCcnFFLEdBQUl5RixFQUFTLGFBQVloUixLQUFLeS9FLGdCQUFrQnp1RSxFQUFROHJDLFNBQzVEOThDLEtBQUt1RCxLQUFPeU4sRUFBUXpOLE1BQVEsUUFFNUJ2RCxLQUFLNDlFLE1BQVE1c0UsRUFBUXpOLE1BQVEsUUE4ZS9CLElBNWVBLElBQUkwbEQsR0FBUTQxQixHQUFXM2lGLFVBQVksQ0FDakNzNkUsaUJBQWlCLEVBQ2pCdDVFLFlBQWEyaEYsR0FDYnBoQixNQUFPLFdBQ0wsSUFBSXZ0RCxFQUFTbFEsS0FFYixPQUFJQSxLQUFLMC9FLFFBQWdCMS9FLEtBR2xCNHpFLEdBQWM1ekUsTUFBTSxTQUFVekUsR0FDbkMsR0FBSXU3RSxHQUFTdjdFLElBQVVBLElBQVUyVSxFQUFRLE9BQU8zVSxNQUdwRGloRSxNQUFPLFNBQWVtakIsR0FDcEIsSUFBSTc0RSxFQUFPOUcsS0FBS3k5RCxRQUVoQixPQURBMzJELEVBQUs2NEUsT0FBU0EsRUFDUDc0RSxHQUVUa3VCLEtBQU0sU0FBY2x2QixHQUNsQixHQUF5QixJQUFyQm5DLFVBQVU5RSxPQUFjLE9BQU9tQixLQUFLNC9FLE1BQ3hDLElBQUk5NEUsRUFBTzlHLEtBQUt5OUQsUUFFaEIsT0FEQTMyRCxFQUFLODRFLE1BQVF6ekIsRUFBU3JsRCxFQUFLODRFLE9BQVMsR0FBSTk1RSxHQUNqQ2dCLEdBRVR5NEUsYUFBYyxTQUFzQjdwRSxHQUNsQyxJQUFJbXFFLEVBQVM3L0UsS0FBSzAvRSxRQUNsQjEvRSxLQUFLMC9FLFNBQVUsRUFDZixJQUFJeDNFLEVBQVN3TixFQUFHMVYsTUFFaEIsT0FEQUEsS0FBSzAvRSxRQUFVRyxFQUNSMzNFLEdBRVRsRCxPQUFRLFNBQWdCMm1FLEdBQ3RCLElBQUtBLEdBQVVBLElBQVczckUsS0FBTSxPQUFPQSxLQUN2QyxHQUFJMnJFLEVBQU9pUyxRQUFVNTlFLEtBQUs0OUUsT0FBd0IsVUFBZjU5RSxLQUFLNDlFLE1BQW1CLE1BQU0sSUFBSXR4RSxVQUFVLHNEQUF3RHRNLEtBQUs0OUUsTUFBUSxRQUFValMsRUFBT2lTLE9BQ3JLLElBQUk5MkUsRWpDOUtPLFNBQVNnNUUsRUFBWWxyRSxFQUFRZixHQUMxQyxJQUFLLElBQUloWSxLQUFPZ1ksRUFDZCxHQUFJdEksR0FBSXNJLEVBQVFoWSxHQUFNLENBQ3BCLElBQUlra0YsRUFBWWxzRSxFQUFPaFksR0FDbkJta0YsRUFBWXByRSxFQUFPL1ksR0FFdkIsUUFBa0I0SixJQUFkdTZFLEVBQ0ZwckUsRUFBTy9ZLEdBQU9ra0YsTUFDVCxJQUFJQyxJQUFjRCxFQUN2QixTQUNTakosR0FBU2tKLEdBQ2RsSixHQUFTaUosS0FBWW5yRSxFQUFPL1ksR0FBT2trRixFQUFVLzZFLE9BQU9nN0UsSUFDL0N6ekUsR0FBU3l6RSxHQUNkenpFLEdBQVN3ekUsS0FBWW5yRSxFQUFPL1ksR0FBT2lrRixFQUFZRSxFQUFXRCxJQUNyRDNoRixNQUFNRCxRQUFRNmhGLElBQ25CNWhGLE1BQU1ELFFBQVE0aEYsS0FBWW5yRSxFQUFPL1ksR0FBT2trRixFQUFVLzZFLE9BQU9nN0UsS0FLbkUsT0FBT3ByRSxFaUMwSk1rckUsQ0FBWW5VLEVBQU9sTyxRQUFTejlELE1BZ0J2QyxPQWRJdUwsR0FBSW9nRSxFQUFRLGNBQWE3a0UsRUFBS201RSxTQUFXdFUsRUFBT3NVLFVBQ3BEbjVFLEVBQUt1NEUsTUFBUXIvRSxLQUFLcS9FLE1BQ2xCdjRFLEVBQUtvNEUsV0FBYWwvRSxLQUFLay9FLFdBR3ZCcDRFLEVBQUtxNEUsV0FBYW4vRSxLQUFLbS9FLFdBQVdULE1BQU0vUyxFQUFPd1QsV0FBWXhULEVBQU95VCxZQUNsRXQ0RSxFQUFLczRFLFdBQWFwL0UsS0FBS28vRSxXQUFXVixNQUFNL1MsRUFBT3lULFdBQVl6VCxFQUFPd1QsWUFHbEVyNEUsRUFBS3k0RSxjQUFhLFNBQVV6NEUsR0FDMUI2a0UsRUFBTzBULE1BQU1oOUUsU0FBUSxTQUFVcVQsR0FDN0I1TyxFQUFLcEYsS0FBS2dVLEVBQUc0bkUsZUFHVngyRSxHQUVUcThELE9BQVEsU0FBZ0I3bUQsR0FDdEIsU0FBSXRjLEtBQUtrZ0YsV0FBbUIsT0FBTjVqRSxNQUNkdGMsS0FBS21nRixZQUFjbmdGLEtBQUttZ0YsV0FBVzdqRSxLQUU3Qy9VLFFBQVMsU0FBaUJ5SixHQUN4QixJQUFJMjZELEVBQVMzckUsS0FFYixHQUFJMnJFLEVBQU9vVCxZQUFZbGdGLE9BQVEsQ0FDN0IsSUFBSXVoRixFQUFhelUsRUFBT29ULGFBQ3hCcFQsRUFBU0EsRUFBT2xPLFNBQ1RzaEIsWUFBYyxHQUlyQnBULEdBSEFBLEVBQVN5VSxFQUFXaCtFLFFBQU8sU0FBVXVwRSxFQUFROXVFLEdBQzNDLE9BQU9BLEVBQVUwSyxRQUFRb2tFLEVBQVEzNkQsS0FDaEMyNkQsSUFDYXBrRSxRQUFReUosR0FHMUIsT0FBTzI2RCxHQUVUd1EsS0FBTSxTQUFjNWdGLEVBQU95VixRQUNULElBQVpBLElBQ0ZBLEVBQVUsSUFHWixJQUFJcXZFLEVBQWlCcmdGLEtBQUt1SCxRQUFRNGtELEVBQVMsR0FBSW43QyxFQUFTLENBQ3REelYsTUFBT0EsS0FHTDJNLEVBQVNtNEUsRUFBZUMsTUFBTS9rRixFQUFPeVYsR0FFekMsUUFBY3ZMLElBQVZsSyxJQUEwQyxJQUFuQnlWLEVBQVF1dkUsU0FBc0QsSUFBbENGLEVBQWVsZCxPQUFPajdELEdBQWtCLENBQzdGLElBQUlzNEUsRUFBaUJoTCxHQUFXajZFLEdBQzVCa2xGLEVBQWtCakwsR0FBV3R0RSxHQUNqQyxNQUFNLElBQUlvRSxVQUFVLGlCQUFtQjBFLEVBQVFqUSxNQUFRLFNBQW5DLGtFQUF5SHMvRSxFQUFlekMsTUFBeEksMkJBQXFMNEMsRUFBaUIsT0FBVUMsSUFBb0JELEVBQWlCLG1CQUFxQkMsRUFBa0IsS0FHbFQsT0FBT3Y0RSxHQUVUbzRFLE1BQU8sU0FBZUksR0FDcEIsSUFBSUMsRUFBUzNnRixLQUVUekUsT0FBcUJrSyxJQUFiaTdFLEVBQXlCQSxFQUFXMWdGLEtBQUtzL0UsV0FBV2w5RSxRQUFPLFNBQVU3RyxFQUFPbWEsR0FDdEYsT0FBT0EsRUFBR2piLEtBQUtrbUYsRUFBUXBsRixFQUFPbWxGLEtBQzdCQSxHQU1ILFlBSmNqN0UsSUFBVmxLLEdBQXVCZ1EsR0FBSXZMLEtBQU0sY0FDbkN6RSxFQUFReUUsS0FBSzg4QyxXQUdSdmhELEdBRVRxbEYsVUFBVyxTQUFtQkMsRUFBUTd2RSxHQUNwQyxJQUFJOHZFLEVBQVM5Z0YsVUFFRyxJQUFaZ1IsSUFDRkEsRUFBVSxJQUdaLElBQUl6VixFQUFRc2xGLEVBQ1JoTCxFQUF5QyxNQUF6QjdrRSxFQUFRNmtFLGNBQXdCN2tFLEVBQVE2a0UsY0FBZ0JnTCxFQUV4RUUsRUFBVy9nRixLQUFLZ2hGLFFBQVEsU0FBVWh3RSxHQUVsQ3VtRSxFQUFXdjNFLEtBQUtnaEYsUUFBUSxhQUFjaHdFLEdBRXRDNjZELEVBQU83NkQsRUFBUTY2RCxLQUNmOXFFLEVBQU9pUSxFQUFRalEsS0FDZnk3RCxFQUFReDhELEtBQUsyL0UsT0FFWm9CLElBQ0h4bEYsRUFBUXlFLEtBQUtzZ0YsTUFBTS9rRixFQUFPNHdELEVBQVMsQ0FDakNvMEIsUUFBUSxHQUNQdnZFLEtBSUwsSUFBSWl3RSxFQUFtQixDQUNyQjFsRixNQUFPQSxFQUNQd0YsS0FBTUEsRUFDTjRxRSxPQUFRM3JFLEtBQ1JnUixRQUFTQSxFQUNUd3JELE1BQU9BLEVBQ1BxWixjQUFlQSxFQUNmaEssS0FBTUEsR0FHSjc2RCxFQUFRNkQsT0FDVm9zRSxFQUFpQnBzRSxLQUFPN0QsRUFBUTZELE1BR2xDLElBQUlxc0UsRUFBZSxHQUluQixPQUhJbGhGLEtBQUttaEYsWUFBWUQsRUFBYWg2RSxLQUFLbEgsS0FBS21oRixXQUFXRixJQUNuRGpoRixLQUFLb2hGLGlCQUFpQkYsRUFBYWg2RSxLQUFLbEgsS0FBS29oRixnQkFBZ0JILElBQzdEamhGLEtBQUtxaEYsaUJBQWlCSCxFQUFhaDZFLEtBQUtsSCxLQUFLcWhGLGdCQUFnQkosSUFDMURoSixHQUFlLENBQ3BCUixZQUFheUosRUFDYjNKLFNBQVVBLEVBQ1ZoOEUsTUFBT0EsRUFDUHdGLEtBQU1BLEVBQ044cUUsS0FBTUEsSUFDTG5sRSxNQUFLLFNBQVVuTCxHQUNoQixPQUFPMDhFLEdBQWUsQ0FDcEJsM0UsS0FBTUEsRUFDTjhxRSxLQUFNQSxFQUNOdHdFLE1BQU9BLEVBQ1BnOEUsU0FBVUEsRUFDVkUsWUFBYXFKLEVBQU96QixNQUFNcCtFLEtBQUksU0FBVXlVLEdBQ3RDLE9BQU9BLEVBQUd1ckUsWUFLbEJ6VCxTQUFVLFNBQWtCanlFLEVBQU95VixHQVFqQyxZQVBnQixJQUFaQSxJQUNGQSxFQUFVLElBR0NoUixLQUFLdUgsUUFBUTRrRCxFQUFTLEdBQUluN0MsRUFBUyxDQUM5Q3pWLE1BQU9BLEtBRUtxbEYsVUFBVXJsRixFQUFPeVYsSUFFakNzd0UsYUFBYyxTQUFzQi9sRixFQUFPeVYsR0FLekMsSUFHSTlJLEVBQVFDLEVBVVosUUFqQmdCLElBQVo2SSxJQUNGQSxFQUFVLElBR0NoUixLQUFLdUgsUUFBUTRrRCxFQUFTLEdBQUluN0MsRUFBUyxDQUM5Q3pWLE1BQU9BLEtBSUZxbEYsVUFBVXJsRixFQUFPNHdELEVBQVMsR0FBSW43QyxFQUFTLENBQzVDNjZELE1BQU0sS0FDSm5sRSxNQUFLLFNBQVV0TCxHQUNqQixPQUFPOE0sRUFBUzlNLEtBQ2ZzTSxPQUFNLFNBQVV4SixHQUNqQixPQUFPaUssRUFBTWpLLEtBR1hpSyxFQUFLLE1BQU1BLEVBQ2YsT0FBT0QsR0FFVHVvRSxRQUFTLFNBQWlCbDFFLEVBQU95VixHQUMvQixPQUFPaFIsS0FBS3d0RSxTQUFTanlFLEVBQU95VixHQUFTdEssTUFBSyxXQUN4QyxPQUFPLEtBQ05nQixPQUFNLFNBQVVTLEdBQ2pCLEdBQWlCLG9CQUFiQSxFQUFJdE4sS0FBNEIsT0FBTyxFQUMzQyxNQUFNc04sTUFHVm81RSxZQUFhLFNBQXFCaG1GLEVBQU95VixHQUN2QyxJQUVFLE9BREFoUixLQUFLc2hGLGFBQWEvbEYsRUFBT3lWLElBQ2xCLEVBQ1AsTUFBTzdJLEdBQ1AsR0FBaUIsb0JBQWJBLEVBQUl0TixLQUE0QixPQUFPLEVBQzNDLE1BQU1zTixJQUdWcTVFLFdBQVksU0FBb0J4d0UsR0FNOUIsWUFMZ0IsSUFBWkEsSUFDRkEsRUFBVSxJQUdDaFIsS0FBS3VILFFBQVF5SixHQUNaOHJDLFdBRWhCQSxRQUFTLFNBQWtCb3NCLEdBQ3pCLEdBQXlCLElBQXJCdmxFLFVBQVU5RSxPQUFjLENBQzFCLElBQUk4UCxFQUFlcEQsR0FBSXZMLEtBQU0sWUFBY0EsS0FBS2lnRixTQUFXamdGLEtBQUt5L0UsZ0JBQ2hFLE1BQStCLG1CQUFqQjl3RSxFQUE4QkEsRUFBYWxVLEtBQUt1RixNQUFRNHpFLEdBQWNqbEUsR0FHdEYsSUFBSTdILEVBQU85RyxLQUFLeTlELFFBRWhCLE9BREEzMkQsRUFBS201RSxTQUFXL1csRUFDVHBpRSxHQUVUME0sT0FBUSxTQUFnQnV0RSxRQUNMLElBQWJBLElBQ0ZBLEdBQVcsR0FHYixJQUFJajZFLEVBQU85RyxLQUFLeTlELFFBRWhCLE9BREEzMkQsRUFBS2s0RSxTQUFTeHJFLE9BQVN1dEUsRUFDaEJqNkUsR0FFVDI2RSxXQUFZLFNBQW9CbG1GLEdBQzlCLE9BQWdCLE1BQVRBLEdBRVRtNkUsU0FBVSxTQUFrQjU0RSxHQUsxQixZQUpnQixJQUFaQSxJQUNGQSxFQUFVaytCLEdBQU8wNkMsVUFHWjExRSxLQUFLMEIsS0FBSyxDQUNmNUUsUUFBU0EsRUFDVGpDLEtBQU0sV0FDTjZtRixXQUFXLEVBQ1hoZ0YsS0FBTSxTQUFjbkcsR0FDbEIsT0FBT3lFLEtBQUsyckUsT0FBTzhWLFdBQVdsbUYsT0FJcENvbUYsWUFBYSxXQUNYLElBQUk3NkUsRUFBTzlHLEtBQUt5OUQsUUFJaEIsT0FIQTMyRCxFQUFLdTRFLE1BQVF2NEUsRUFBS3U0RSxNQUFNaHhFLFFBQU8sU0FBVTNNLEdBQ3ZDLE1BQTZCLGFBQXRCQSxFQUFLNDdFLFFBQVF6aUYsUUFFZmlNLEdBRVQ4NkUsU0FBVSxTQUFrQkMsUUFDUCxJQUFmQSxJQUNGQSxHQUFhLEdBR2YsSUFBSS82RSxFQUFPOUcsS0FBS3k5RCxRQUVoQixPQURBMzJELEVBQUtvNUUsVUFBWTJCLEVBQ1YvNkUsR0FFVDQzRCxVQUFXLFNBQW1CaHBELEdBQzVCLElBQUk1TyxFQUFPOUcsS0FBS3k5RCxRQUVoQixPQURBMzJELEVBQUt3NEUsV0FBV3A0RSxLQUFLd08sR0FDZDVPLEdBZ0JUcEYsS0FBTSxXQUNKLElBQUlrUixFQXdCSixRQURxQm5OLEtBbkJqQm1OLEVBRnFCLElBQXJCalAsVUFBVTlFLE9BQ3NELG1CQUF0RDhFLFVBQVU5RSxRQUFVLE9BQUk0RyxFQUFZOUIsVUFBVSxJQUNqRCxDQUNMakMsS0FBTWlDLFVBQVU5RSxRQUFVLE9BQUk0RyxFQUFZOUIsVUFBVSxJQUcvQ0EsVUFBVTlFLFFBQVUsT0FBSTRHLEVBQVk5QixVQUFVLEdBRXpCLElBQXJCQSxVQUFVOUUsT0FDWixDQUNMaEUsS0FBTThJLFVBQVU5RSxRQUFVLE9BQUk0RyxFQUFZOUIsVUFBVSxHQUNwRGpDLEtBQU1pQyxVQUFVOUUsUUFBVSxPQUFJNEcsRUFBWTlCLFVBQVUsSUFHL0MsQ0FDTDlJLEtBQU04SSxVQUFVOUUsUUFBVSxPQUFJNEcsRUFBWTlCLFVBQVUsR0FDcEQ3RyxRQUFTNkcsVUFBVTlFLFFBQVUsT0FBSTRHLEVBQVk5QixVQUFVLEdBQ3ZEakMsS0FBTWlDLFVBQVU5RSxRQUFVLE9BQUk0RyxFQUFZOUIsVUFBVSxLQUkvQzdHLFVBQXVCOFYsRUFBSzlWLFFBQVVrK0IsR0FBTzhoQixTQUM3QixtQkFBZGxxQyxFQUFLbFIsS0FBcUIsTUFBTSxJQUFJNEssVUFBVSxtQ0FDekQsSUFBSXhGLEVBQU85RyxLQUFLeTlELFFBQ1orUCxFQUFXdVAsR0FBaUJucUUsR0FDNUJrdkUsRUFBY2x2RSxFQUFLOHVFLFdBQWE5dUUsRUFBSy9YLE9BQXVDLElBQS9CaU0sRUFBS280RSxXQUFXdHNFLEVBQUsvWCxNQUV0RSxHQUFJK1gsRUFBSzh1RSxZQUFjOXVFLEVBQUsvWCxLQUMxQixNQUFNLElBQUl5UixVQUFVLHFFQWF0QixPQVZBeEYsRUFBS280RSxXQUFXdHNFLEVBQUsvWCxRQUFVK1gsRUFBSzh1RSxVQUNwQzU2RSxFQUFLdTRFLE1BQVF2NEUsRUFBS3U0RSxNQUFNaHhFLFFBQU8sU0FBVXFILEdBQ3ZDLEdBQUlBLEVBQUc0bkUsUUFBUXppRixPQUFTK1gsRUFBSy9YLEtBQU0sQ0FDakMsR0FBSWluRixFQUFhLE9BQU8sRUFDeEIsR0FBSXBzRSxFQUFHNG5FLFFBQVE1N0UsT0FBUzhyRSxFQUFTOFAsUUFBUTU3RSxLQUFNLE9BQU8sRUFHeEQsT0FBTyxLQUVUb0YsRUFBS3U0RSxNQUFNbjRFLEtBQUtzbUUsR0FDVDFtRSxHQUVUaTdFLEtBQU0sU0FBY3pqRixFQUFNMFMsR0FDQyxJQUFyQnJOLFVBQVU5RSxTQUNabVMsRUFBVTFTLEVBQ1ZBLEVBQU8sS0FHVCxJQUFJd0ksRUFBTzlHLEtBQUt5OUQsUUFDWjlzQixFQUFPLEdBQUczckMsT0FBTzFHLEdBQU0yQyxLQUFJLFNBQVVwRixHQUN2QyxPQUFPLElBQUltaEYsR0FBSW5oRixNQVFqQixPQU5BODBDLEVBQUt0dUMsU0FBUSxTQUFVMi9FLEdBQ2pCQSxFQUFJOUYsV0FBV3AxRSxFQUFLZzRFLE1BQU01M0UsS0FBSzg2RSxFQUFJbm1GLFFBR3pDaUwsRUFBS2k0RSxZQUFZNzNFLEtBQUssSUFBSXV2RSxHQUFVOWxDLEVBQU0zL0IsSUFFbkNsSyxHQUVUMDRFLFVBQVcsU0FBbUIxaUYsR0FDNUIsSUFBSWdLLEVBQU85RyxLQUFLeTlELFFBYWhCLE9BWkEzMkQsRUFBS3E2RSxXQUFhcEUsR0FBaUIsQ0FDakNqZ0YsUUFBU0EsRUFDVGpDLEtBQU0sWUFDTjZHLEtBQU0sU0FBY25HLEdBQ2xCLGFBQWNrSyxJQUFWbEssSUFBd0J5RSxLQUFLMnJFLE9BQU94SSxPQUFPNW5FLEtBQWV5RSxLQUFLaTlFLFlBQVksQ0FDN0V4a0IsT0FBUSxDQUNObDFELEtBQU12RCxLQUFLMnJFLE9BQU9pUyxZQU1uQjkyRSxHQUVUMDdDLE1BQU8sU0FBZXkvQixFQUFPbmxGLFFBQ1gsSUFBWkEsSUFDRkEsRUFBVWsrQixHQUFPd25CLE9BR25CLElBQUkxN0MsRUFBTzlHLEtBQUt5OUQsUUFtQmhCLE9BbEJBd2tCLEVBQU01L0UsU0FBUSxTQUFVK1IsR0FDdEJ0TixFQUFLcTRFLFdBQVc1akUsSUFBSW5ILEdBRXBCdE4sRUFBS3M0RSxXQUFXcGpFLE9BQU81SCxNQUV6QnROLEVBQUtzNkUsZ0JBQWtCckUsR0FBaUIsQ0FDdENqZ0YsUUFBU0EsRUFDVGpDLEtBQU0sUUFDTjZHLEtBQU0sU0FBY25HLEdBQ2xCLFFBQWNrSyxJQUFWbEssRUFBcUIsT0FBTyxFQUNoQyxJQUFJMm1GLEVBQVNsaUYsS0FBSzJyRSxPQUFPd1QsV0FDekIsUUFBTytDLEVBQU8zMkUsSUFBSWhRLEVBQU95RSxLQUFLdUgsVUFBa0J2SCxLQUFLaTlFLFlBQVksQ0FDL0R4a0IsT0FBUSxDQUNObHJELE9BQVEyMEUsRUFBT3BpRSxVQUFVNWQsS0FBSyxZQUsvQjRFLEdBRVQ2dUUsU0FBVSxTQUFrQnNNLEVBQU9ubEYsUUFDakIsSUFBWkEsSUFDRkEsRUFBVWsrQixHQUFPMjZDLFVBR25CLElBQUk3dUUsRUFBTzlHLEtBQUt5OUQsUUFtQmhCLE9BbEJBd2tCLEVBQU01L0UsU0FBUSxTQUFVK1IsR0FDdEJ0TixFQUFLczRFLFdBQVc3akUsSUFBSW5ILEdBRXBCdE4sRUFBS3E0RSxXQUFXbmpFLE9BQU81SCxNQUV6QnROLEVBQUt1NkUsZ0JBQWtCdEUsR0FBaUIsQ0FDdENqZ0YsUUFBU0EsRUFDVGpDLEtBQU0sV0FDTjZHLEtBQU0sU0FBY25HLEdBQ2xCLElBQUk0bUYsRUFBV25pRixLQUFLMnJFLE9BQU95VCxXQUMzQixPQUFJK0MsRUFBUzUyRSxJQUFJaFEsRUFBT3lFLEtBQUt1SCxVQUFpQnZILEtBQUtpOUUsWUFBWSxDQUM3RHhrQixPQUFRLENBQ05sckQsT0FBUTQwRSxFQUFTcmlFLFVBQVU1ZCxLQUFLLFlBTWpDNEUsR0FFVHM3RSxNQUFPLFNBQWVDLFFBQ0wsSUFBWEEsSUFDRkEsR0FBUyxHQUdYLElBQUl2N0UsRUFBTzlHLEtBQUt5OUQsUUFFaEIsT0FEQTMyRCxFQUFLdTdFLE9BQVNBLEVBQ1B2N0UsR0FFVGs2RSxRQUFTLFNBQWlCbmxGLEVBQUt5bUYsR0FDN0IsT0FBTy8yRSxHQUFJKzJFLEVBQVd6bUYsR0FBT3ltRixFQUFVem1GLEdBQU9tRSxLQUFLZy9FLFNBQVNuakYsSUFFOUR1Z0YsU0FBVSxXQUNSLElBQUl0MUUsRUFBTzlHLEtBQUt5OUQsUUFDWnlnQixFQUFjLENBQ2hCMzZFLEtBQU11RCxFQUFLODJFLE1BQ1g1b0QsS0FBTWx1QixFQUFLODRFLE1BQ1hwakIsTUFBTzExRCxFQUFLNjRFLE9BQ1pOLE1BQU92NEUsRUFBS3U0RSxNQUFNcCtFLEtBQUksU0FBVXlVLEdBQzlCLE1BQU8sQ0FDTDdhLEtBQU02YSxFQUFHNG5FLFFBQVF6aUYsS0FDakI0OUQsT0FBUS9pRCxFQUFHNG5FLFFBQVE3a0IsV0FFcEJwcUQsUUFBTyxTQUFVdFMsRUFBRzBHLEVBQUsydEQsR0FDMUIsT0FBT0EsRUFBS215QixXQUFVLFNBQVU1bkYsR0FDOUIsT0FBT0EsRUFBRUUsT0FBU2tCLEVBQUVsQixVQUNmNEgsTUFLWCxPQUZJcUUsRUFBS3E0RSxXQUFXcHFDLE9BQU1tcEMsRUFBWTE3QixNQUFRMTdDLEVBQUtxNEUsV0FBVy9DLFlBQzFEdDFFLEVBQUtzNEUsV0FBV3JxQyxPQUFNbXBDLEVBQVl2SSxTQUFXN3VFLEVBQUtzNEUsV0FBV2hELFlBQzFEOEIsR0FFVG5JLFFBQVMsU0FBaUJqNUUsR0FLeEIsWUFKZ0IsSUFBWkEsSUFDRkEsRUFBVWsrQixHQUFPKzZDLFNBR1ovMUUsS0FBSzRoRixXQUFXbGdGLEtBQUssQ0FDMUI1RSxRQUFTQSxFQUNUakMsS0FBTSxVQUNONm1GLFdBQVcsRUFDWGhnRixLQUFNLFNBQWNuRyxHQUNsQixZQUFpQmtLLElBQVZsSyxPQU1YaW5GLEdBQVEsV0FDVixJQUFJbHFFLEVBQVNtcUUsR0FBS0MsSUFFbEJ6NUIsR0FBTTN3QyxFQUFTLE1BQVEsU0FBVXZYLEVBQU14RixFQUFPeVYsUUFDNUIsSUFBWkEsSUFDRkEsRUFBVSxJQUdaLElBQUkyeEUsRUFBUzFaLEdBQU1qcEUsS0FBTWUsRUFBTXhGLEVBQU95VixFQUFRTixTQUMxQzVILEVBQVM2NUUsRUFBTzc1RSxPQUNoQiswRSxFQUFhOEUsRUFBTzlFLFdBR3hCLE9BRmE4RSxFQUFPaFgsT0FFTnJ6RCxHQUFReFAsR0FBVUEsRUFBTyswRSxHQUFhMXhCLEVBQVMsR0FBSW43QyxFQUFTLENBQ3hFbEksT0FBUUEsRUFDUi9ILEtBQU1BLE9BS0gyaEYsR0FBTSxFQUFHRCxHQUFPLENBQUMsV0FBWSxnQkFBaUJDLEdBQU1ELEdBQUs1akYsT0FBUTZqRixLQUN4RUYsS0FHRixJQUFLLElBQUlJLEdBQU0sRUFBR0MsR0FBUSxDQUFDLFNBQVUsTUFBT0QsR0FBTUMsR0FBTWhrRixPQUFRK2pGLEtBQU8sQ0FFckUzNUIsR0FEWTQ1QixHQUFNRCxLQUNIMzVCLEdBQU16RyxNQUd2QixJQUFLLElBQUlzZ0MsR0FBTSxFQUFHQyxHQUFRLENBQUMsTUFBTyxRQUFTRCxHQUFNQyxHQUFNbGtGLE9BQVFpa0YsS0FBTyxDQUVwRTc1QixHQURhODVCLEdBQU1ELEtBQ0g3NUIsR0FBTTBzQixTQ3pvQlQsU0FBU3FOLEdBQVNDLEVBQU1DLEVBQVdDLEdBQ2hERixFQUFLL21GLFVBQVlsQixPQUFPWSxPQUFPc25GLEVBQVVobkYsVUFBVyxDQUNsRGdCLFlBQWEsQ0FDWDNCLE1BQU8wbkYsRUFDUC9uRixZQUFZLEVBQ1o0UyxVQUFVLEVBQ1ZELGNBQWMsS0FJbEJzK0MsRUFBUzgyQixFQUFLL21GLFVBQVdpbkYsR0Rrb0IzQmw2QixHQUFNaDNDLFNBQVdnM0MsR0FBTTA0QixZRXpvQnZCLFNBQVN5QixLQUNQLElBQUlsMEUsRUFBUWxQLEtBRVosS0FBTUEsZ0JBQWdCb2pGLElBQWdCLE9BQU8sSUFBSUEsR0FDakRDLEdBQVk1b0YsS0FBS3VGLEtBQU0sQ0FDckJ1RCxLQUFNLFlBRVJ2RCxLQUFLdS9FLGNBQWEsV0FDaEJyd0UsRUFBTXd2RCxXQUFVLFNBQVVuakUsR0FDeEIsSUFBS3lFLEtBQUttakUsT0FBTzVuRSxHQUFRLENBQ3ZCLEdBQUksY0FBY21HLEtBQUtuRyxHQUFRLE9BQU8sRUFDdEMsR0FBSSxlQUFlbUcsS0FBS25HLEdBQVEsT0FBTyxFQUd6QyxPQUFPQSxRQUtieW5GLEdBQVNJLEdBQWVDLEdBQWEsQ0FDbkNsRCxXQUFZLFNBQW9CN2pFLEdBRTlCLE9BRElBLGFBQWFzdkMsVUFBU3R2QyxFQUFJQSxFQUFFM0csV0FDWixrQkFBTjJHLEtDMUJGLGdCQUFVL2dCLEdBQ3hCLE9BQWdCLE1BQVRBLEdDSUwrbkYsR0FBUywwNEJBRVRDLEdBQU8seXFDQUVQQyxHQUFZLFNBQW1Cam9GLEdBQ2pDLE9BQU9rb0YsR0FBU2xvRixJQUFVQSxJQUFVQSxFQUFNMDRCLFFBRzdCLFNBQVN5dkQsS0FDdEIsSUFBSXgwRSxFQUFRbFAsS0FFWixLQUFNQSxnQkFBZ0IwakYsSUFBZSxPQUFPLElBQUlBLEdBQ2hETCxHQUFZNW9GLEtBQUt1RixLQUFNLENBQ3JCdUQsS0FBTSxXQUVSdkQsS0FBS3UvRSxjQUFhLFdBQ2hCcndFLEVBQU13dkQsV0FBVSxTQUFVbmpFLEdBQ3hCLE9BQUl5RSxLQUFLbWpFLE9BQU81bkUsR0FBZUEsRUFDZixNQUFUQSxHQUFpQkEsRUFBTWdFLFNBQVdoRSxFQUFNZ0UsV0FBYWhFLFFBSWxFeW5GLEdBQVNVLEdBQWNMLEdBQWEsQ0FDbENsRCxXQUFZLFNBQW9CNWtGLEdBRTlCLE9BRElBLGFBQWlCaVIsU0FBUWpSLEVBQVFBLEVBQU1vYSxXQUNuQixpQkFBVnBhLEdBRWhCa21GLFdBQVksU0FBb0JsbUYsR0FDOUIsT0FBTzhuRixHQUFZbm5GLFVBQVV1bEYsV0FBV2huRixLQUFLdUYsS0FBTXpFLElBQVVBLEVBQU1zRCxPQUFTLEdBRTlFQSxPQUFRLFNBQWdCOGtGLEVBQVM3bUYsR0FLL0IsWUFKZ0IsSUFBWkEsSUFDRkEsRUFBVWsrQixHQUFPbjhCLFFBR1ptQixLQUFLMEIsS0FBSyxDQUNmNUUsUUFBU0EsRUFDVGpDLEtBQU0sU0FDTjZtRixXQUFXLEVBQ1hqcEIsT0FBUSxDQUNONTVELE9BQVE4a0YsR0FFVmppRixLQUFNLFNBQWNuRyxHQUNsQixPQUFPa29GLEdBQVNsb0YsSUFBVUEsRUFBTXNELFNBQVdtQixLQUFLdUgsUUFBUW84RSxPQUk5RDVuQyxJQUFLLFNBQWE2bkMsRUFBTTltRixHQUt0QixZQUpnQixJQUFaQSxJQUNGQSxFQUFVaytCLEdBQU8rZ0IsS0FHWi83QyxLQUFLMEIsS0FBSyxDQUNmNUUsUUFBU0EsRUFDVGpDLEtBQU0sTUFDTjZtRixXQUFXLEVBQ1hqcEIsT0FBUSxDQUNOMWMsSUFBSzZuQyxHQUVQbGlGLEtBQU0sU0FBY25HLEdBQ2xCLE9BQU9rb0YsR0FBU2xvRixJQUFVQSxFQUFNc0QsUUFBVW1CLEtBQUt1SCxRQUFRcThFLE9BSTdEdDhCLElBQUssU0FBYXU4QixFQUFNL21GLEdBS3RCLFlBSmdCLElBQVpBLElBQ0ZBLEVBQVVrK0IsR0FBT3NzQixLQUdadG5ELEtBQUswQixLQUFLLENBQ2Y3RyxLQUFNLE1BQ042bUYsV0FBVyxFQUNYNWtGLFFBQVNBLEVBQ1QyN0QsT0FBUSxDQUNOblIsSUFBS3U4QixHQUVQbmlGLEtBQU0sU0FBY25HLEdBQ2xCLE9BQU9rb0YsR0FBU2xvRixJQUFVQSxFQUFNc0QsUUFBVW1CLEtBQUt1SCxRQUFRczhFLE9BSTdEbnhFLFFBQVMsU0FBaUJveEUsRUFBTzl5RSxHQUMvQixJQUNJbFUsRUFDQWpDLEVBRkFrcEYsR0FBcUIsRUFjekIsT0FWSS95RSxJQUNxQixpQkFBWkEsR0FDVCt5RSxFQUFxQi95RSxFQUFRK3lFLG1CQUM3QmpuRixFQUFVa1UsRUFBUWxVLFFBQ2xCakMsRUFBT21XLEVBQVFuVyxNQUVmaUMsRUFBVWtVLEdBSVBoUixLQUFLMEIsS0FBSyxDQUNmN0csS0FBTUEsR0FBUSxVQUNkaUMsUUFBU0EsR0FBV2srQixHQUFPdG9CLFFBQzNCK2xELE9BQVEsQ0FDTnFyQixNQUFPQSxHQUVUcGlGLEtBQU0sU0FBY25HLEdBQ2xCLE9BQU9rb0YsR0FBU2xvRixJQUFvQixLQUFWQSxHQUFnQndvRixJQUErQyxJQUF6QnhvRixFQUFNeWdDLE9BQU84bkQsT0FJbkZsb0QsTUFBTyxTQUFlOStCLEdBS3BCLFlBSmdCLElBQVpBLElBQ0ZBLEVBQVVrK0IsR0FBT1ksT0FHWjU3QixLQUFLMFMsUUFBUTR3RSxHQUFRLENBQzFCem9GLEtBQU0sUUFDTmlDLFFBQVNBLEVBQ1RpbkYsb0JBQW9CLEtBR3hCM25ELElBQUssU0FBYXQvQixHQUtoQixZQUpnQixJQUFaQSxJQUNGQSxFQUFVaytCLEdBQU9vQixLQUdacDhCLEtBQUswUyxRQUFRNndFLEdBQU0sQ0FDeEIxb0YsS0FBTSxNQUNOaUMsUUFBU0EsRUFDVGluRixvQkFBb0IsS0FJeEJDLE9BQVEsV0FDTixPQUFPaGtGLEtBQUs4OEMsUUFBUSxJQUFJNGhCLFdBQVUsU0FBVXRxRCxHQUMxQyxPQUFlLE9BQVJBLEVBQWUsR0FBS0EsTUFHL0I2ZixLQUFNLFNBQWNuM0IsR0FLbEIsWUFKZ0IsSUFBWkEsSUFDRkEsRUFBVWsrQixHQUFPL0csTUFHWmowQixLQUFLMCtELFdBQVUsU0FBVXRxRCxHQUM5QixPQUFjLE1BQVBBLEVBQWNBLEVBQUk2ZixPQUFTN2YsS0FDakMxUyxLQUFLLENBQ041RSxRQUFTQSxFQUNUakMsS0FBTSxPQUNONkcsS0FBTThoRixNQUdWeE4sVUFBVyxTQUFtQmw1RSxHQUs1QixZQUpnQixJQUFaQSxJQUNGQSxFQUFVaytCLEdBQU9nN0MsV0FHWmgyRSxLQUFLMCtELFdBQVUsU0FBVW5qRSxHQUM5QixPQUFRa29GLEdBQVNsb0YsR0FBK0JBLEVBQXRCQSxFQUFNNnBCLGlCQUMvQjFqQixLQUFLLENBQ041RSxRQUFTQSxFQUNUakMsS0FBTSxjQUNONm1GLFdBQVcsRUFDWGhnRixLQUFNLFNBQWNuRyxHQUNsQixPQUFPa29GLEdBQVNsb0YsSUFBVUEsSUFBVUEsRUFBTTZwQixrQkFJaEQ2d0QsVUFBVyxTQUFtQm41RSxHQUs1QixZQUpnQixJQUFaQSxJQUNGQSxFQUFVaytCLEdBQU9pN0MsV0FHWmoyRSxLQUFLMCtELFdBQVUsU0FBVW5qRSxHQUM5QixPQUFRa29GLEdBQVNsb0YsR0FBK0JBLEVBQXRCQSxFQUFNa1gsaUJBQy9CL1EsS0FBSyxDQUNONUUsUUFBU0EsRUFDVGpDLEtBQU0sY0FDTjZtRixXQUFXLEVBQ1hoZ0YsS0FBTSxTQUFjbkcsR0FDbEIsT0FBT2tvRixHQUFTbG9GLElBQVVBLElBQVVBLEVBQU1rWCxvQkNySmxEdXdFLElBdkJlLFNBQVNpQixJQUN0QixJQUFJLzBFLEVBQVFsUCxLQUVaLEtBQU1BLGdCQUFnQmlrRixHQUFlLE9BQU8sSUFBSUEsRUFDaERaLEdBQVk1b0YsS0FBS3VGLEtBQU0sQ0FDckJ1RCxLQUFNLFdBRVJ2RCxLQUFLdS9FLGNBQWEsV0FDaEJyd0UsRUFBTXd2RCxXQUFVLFNBQVVuakUsR0FDeEIsSUFBSTR5RSxFQUFTNXlFLEVBRWIsR0FBc0IsaUJBQVg0eUUsRUFBcUIsQ0FFOUIsR0FBZSxNQURmQSxFQUFTQSxFQUFPaHRFLFFBQVEsTUFBTyxLQUNaLE9BQU8raUYsSUFFMUIvVixHQUFVQSxFQUdaLE9BQUludUUsS0FBS21qRSxPQUFPZ0wsR0FBZ0JBLEVBQ3pCQyxXQUFXRCxXQUlEa1YsR0FBYSxDQUNsQ2xELFdBQVksU0FBb0I1a0YsR0FFOUIsT0FESUEsYUFBaUJzdEUsU0FBUXR0RSxFQUFRQSxFQUFNb2EsV0FDbkIsaUJBQVZwYSxJQTlCTixTQUFlQSxHQUN6QixPQUFPQSxJQUFVQSxFQTZCc0IyYyxDQUFNM2MsSUFFN0N3Z0QsSUFBSyxTQUFhNm5DLEVBQU05bUYsR0FLdEIsWUFKZ0IsSUFBWkEsSUFDRkEsRUFBVWsrQixHQUFPK2dCLEtBR1ovN0MsS0FBSzBCLEtBQUssQ0FDZjVFLFFBQVNBLEVBQ1RqQyxLQUFNLE1BQ042bUYsV0FBVyxFQUNYanBCLE9BQVEsQ0FDTjFjLElBQUs2bkMsR0FFUGxpRixLQUFNLFNBQWNuRyxHQUNsQixPQUFPa29GLEdBQVNsb0YsSUFBVUEsR0FBU3lFLEtBQUt1SCxRQUFRcThFLE9BSXREdDhCLElBQUssU0FBYXU4QixFQUFNL21GLEdBS3RCLFlBSmdCLElBQVpBLElBQ0ZBLEVBQVVrK0IsR0FBT3NzQixLQUdadG5ELEtBQUswQixLQUFLLENBQ2Y1RSxRQUFTQSxFQUNUakMsS0FBTSxNQUNONm1GLFdBQVcsRUFDWGpwQixPQUFRLENBQ05uUixJQUFLdThCLEdBRVBuaUYsS0FBTSxTQUFjbkcsR0FDbEIsT0FBT2tvRixHQUFTbG9GLElBQVVBLEdBQVN5RSxLQUFLdUgsUUFBUXM4RSxPQUl0RDNOLFNBQVUsU0FBa0JpTyxFQUFNcm5GLEdBS2hDLFlBSmdCLElBQVpBLElBQ0ZBLEVBQVVrK0IsR0FBT2s3QyxVQUdabDJFLEtBQUswQixLQUFLLENBQ2Y1RSxRQUFTQSxFQUNUakMsS0FBTSxNQUNONm1GLFdBQVcsRUFDWGpwQixPQUFRLENBQ04wckIsS0FBTUEsR0FFUnppRixLQUFNLFNBQWNuRyxHQUNsQixPQUFPa29GLEdBQVNsb0YsSUFBVUEsRUFBUXlFLEtBQUt1SCxRQUFRNDhFLE9BSXJEaE8sU0FBVSxTQUFrQmlPLEVBQU10bkYsR0FLaEMsWUFKZ0IsSUFBWkEsSUFDRkEsRUFBVWsrQixHQUFPbTdDLFVBR1puMkUsS0FBSzBCLEtBQUssQ0FDZjVFLFFBQVNBLEVBQ1RqQyxLQUFNLE1BQ042bUYsV0FBVyxFQUNYanBCLE9BQVEsQ0FDTjJyQixLQUFNQSxHQUVSMWlGLEtBQU0sU0FBY25HLEdBQ2xCLE9BQU9rb0YsR0FBU2xvRixJQUFVQSxFQUFReUUsS0FBS3VILFFBQVE2OEUsT0FJckQvTixTQUFVLFNBQWtCcE0sR0FLMUIsWUFKWSxJQUFSQSxJQUNGQSxFQUFNanZDLEdBQU9xN0MsVUFHUnIyRSxLQUFLbTJFLFNBQVMsRUFBR2xNLElBRTFCcU0sU0FBVSxTQUFrQnJNLEdBSzFCLFlBSlksSUFBUkEsSUFDRkEsRUFBTWp2QyxHQUFPczdDLFVBR1J0MkUsS0FBS2syRSxTQUFTLEVBQUdqTSxJQUUxQjFpQixRQUFTLFNBQWlCenFELEdBS3hCLFlBSmdCLElBQVpBLElBQ0ZBLEVBQVVrK0IsR0FBT3VzQixTQUdadm5ELEtBQUswQixLQUFLLENBQ2Y3RyxLQUFNLFVBQ05pQyxRQUFTQSxFQUNUNEUsS0FBTSxTQUFjMFMsR0FDbEIsT0FBT3F2RSxHQUFTcnZFLElBQVF5MEQsT0FBT0QsVUFBVXgwRCxPQUkvQ2l3RSxTQUFVLFdBQ1IsT0FBT3JrRixLQUFLMCtELFdBQVUsU0FBVW5qRSxHQUM5QixPQUFRa29GLEdBQVNsb0YsR0FBcUJBLEVBQUosRUFBUkEsTUFHOUIrb0YsTUFBTyxTQUFlaHNFLEdBQ3BCLElBQUlpc0UsRUFBUSxDQUFDLE9BQVEsUUFBUyxRQUFTLFNBR3ZDLEdBQWUsV0FGZmpzRSxFQUFTQSxHQUFVQSxFQUFPOE0sZUFBaUIsU0FFbkIsT0FBT3BsQixLQUFLcWtGLFdBQ3BDLElBQTZDLElBQXpDRSxFQUFNampGLFFBQVFnWCxFQUFPOE0sZUFBdUIsTUFBTSxJQUFJOVksVUFBVSx1Q0FBeUNpNEUsRUFBTXJpRixLQUFLLE9BQ3hILE9BQU9sQyxLQUFLMCtELFdBQVUsU0FBVW5qRSxHQUM5QixPQUFRa29GLEdBQVNsb0YsR0FBK0JBLEVBQXRCK0IsS0FBS2diLEdBQVEvYyxTQ3RJN0MsSUFBSWlwRixHQUFTLGtKQ0piLElBQUlDLEdBQWMsSUFBSXhsRixLQUFLLElBUTNCLFNBQVN5bEYsS0FDUCxJQUFJeDFFLEVBQVFsUCxLQUVaLEtBQU1BLGdCQUFnQjBrRixJQUFhLE9BQU8sSUFBSUEsR0FDOUNyQixHQUFZNW9GLEtBQUt1RixLQUFNLENBQ3JCdUQsS0FBTSxTQUVSdkQsS0FBS3UvRSxjQUFhLFdBQ2hCcndFLEVBQU13dkQsV0FBVSxTQUFVbmpFLEdBQ3hCLE9BQUl5RSxLQUFLbWpFLE9BQU81bkUsR0FBZUEsR0FDL0JBLEVEYlMsU0FBc0JtZ0MsR0FDbkMsSUFFSWlwRCxFQUNBQyxFQUhBQyxFQUFjLENBQUMsRUFBRyxFQUFHLEVBQUcsRUFBRyxFQUFHLEdBQUksSUFDbENDLEVBQWdCLEVBSXBCLEdBQUlGLEVBQVNKLEdBQU81K0UsS0FBSzgxQixHQUFPLENBRTlCLElBQUssSUFBV3ZkLEVBQVA3akIsRUFBSSxFQUFNNmpCLEVBQUkwbUUsRUFBWXZxRixLQUFNQSxFQUN2Q3NxRixFQUFPem1FLElBQU15bUUsRUFBT3ptRSxJQUFNLEVBSTVCeW1FLEVBQU8sS0FBT0EsRUFBTyxJQUFNLEdBQUssRUFDaENBLEVBQU8sSUFBTUEsRUFBTyxJQUFNLEVBRTFCQSxFQUFPLEdBQUtBLEVBQU8sR0FBS3A0RSxPQUFPbzRFLEVBQU8sSUFBSXZ5RSxPQUFPLEVBQUcsR0FBSyxPQUV0QzVNLElBQWRtL0UsRUFBTyxJQUFrQyxLQUFkQSxFQUFPLFNBQTZCbi9FLElBQWRtL0UsRUFBTyxJQUFrQyxLQUFkQSxFQUFPLElBQ3BFLE1BQWRBLEVBQU8sU0FBNEJuL0UsSUFBZG0vRSxFQUFPLEtBQzlCRSxFQUE2QixHQUFiRixFQUFPLElBQVdBLEVBQU8sSUFDdkIsTUFBZEEsRUFBTyxLQUFZRSxFQUFnQixFQUFJQSxJQUc3Q0gsRUFBWTFsRixLQUFLOGxGLElBQUlILEVBQU8sR0FBSUEsRUFBTyxHQUFJQSxFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxHQUFLRSxFQUFlRixFQUFPLEdBQUlBLEVBQU8sS0FOWkQsR0FBYSxJQUFJMWxGLEtBQUsybEYsRUFBTyxHQUFJQSxFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxHQUFJQSxFQUFPLEdBQUlBLEVBQU8sR0FBSUEsRUFBTyxTQVE5TEQsRUFBWTFsRixLQUFLNlIsTUFBUTdSLEtBQUs2UixNQUFNNHFCLEdBQVF3b0QsSUFFbkQsT0FBT1MsRUNmS0ssQ0FBU3pwRixHQUVUMmMsTUFBTTNjLEdBQTJCa3BGLEdBQWxCLElBQUl4bEYsS0FBSzFELFVDMUJ2QixTQUFTMHBGLEdBQTRCQyxFQUFTQyxHQU0zRCxPQUxLQSxJQUNIQSxFQUFNRCxFQUFRbi9FLE1BQU0sSUFHdEJtL0UsRUFBUUMsSUFBTUEsRUFDUEQsRUR5QlRsQyxHQUFTMEIsR0FBWXJCLEdBQWEsQ0FDaENsRCxXQUFZLFNBQW9CN2pFLEdBQzlCLE9BekJ5QnhXLEVBeUJYd1csRUF4QitCLGtCQUF4Q3RoQixPQUFPa0IsVUFBVXFELFNBQVM5RSxLQUFLcUwsS0F3QmZvUyxNQUFNb0UsRUFBRW5kLFdBekJwQixJQUFnQjJHLEdBMkIzQmkyQyxJQUFLLFNBQWE2bkMsRUFBTTltRixRQUNOLElBQVpBLElBQ0ZBLEVBQVVrK0IsR0FBTytnQixLQUduQixJQUFJcXBDLEVBQVF4QixFQUVaLElBQUs1RyxHQUFJWCxNQUFNK0ksS0FDYkEsRUFBUXBsRixLQUFLbThFLEtBQUt5SCxJQUNiNWpGLEtBQUttZ0YsV0FBV2lGLElBQVEsTUFBTSxJQUFJOTRFLFVBQVUsa0VBR25ELE9BQU90TSxLQUFLMEIsS0FBSyxDQUNmNUUsUUFBU0EsRUFDVGpDLEtBQU0sTUFDTjZtRixXQUFXLEVBQ1hqcEIsT0FBUSxDQUNOMWMsSUFBSzZuQyxHQUVQbGlGLEtBQU0sU0FBY25HLEdBQ2xCLE9BQU9rb0YsR0FBU2xvRixJQUFVQSxHQUFTeUUsS0FBS3VILFFBQVE2OUUsT0FJdEQ5OUIsSUFBSyxTQUFhdThCLEVBQU0vbUYsUUFDTixJQUFaQSxJQUNGQSxFQUFVaytCLEdBQU9zc0IsS0FHbkIsSUFBSTg5QixFQUFRdkIsRUFFWixJQUFLN0csR0FBSVgsTUFBTStJLEtBQ2JBLEVBQVFwbEYsS0FBS204RSxLQUFLMEgsSUFDYjdqRixLQUFLbWdGLFdBQVdpRixJQUFRLE1BQU0sSUFBSTk0RSxVQUFVLGtFQUduRCxPQUFPdE0sS0FBSzBCLEtBQUssQ0FDZjVFLFFBQVNBLEVBQ1RqQyxLQUFNLE1BQ042bUYsV0FBVyxFQUNYanBCLE9BQVEsQ0FDTm5SLElBQUt1OEIsR0FFUG5pRixLQUFNLFNBQWNuRyxHQUNsQixPQUFPa29GLEdBQVNsb0YsSUFBVUEsR0FBU3lFLEtBQUt1SCxRQUFRNjlFLFNFdER6Q0MsT0FiZixTQUFxQm5wRSxFQUFPMGxELEVBQVUwakIsRUFBYUMsR0FDakQsSUFBSXhqRixHQUFTLEVBQ1RsRCxFQUFrQixNQUFUcWQsRUFBZ0IsRUFBSUEsRUFBTXJkLE9BS3ZDLElBSEkwbUYsR0FBYTFtRixJQUNmeW1GLEVBQWNwcEUsSUFBUW5hLE1BRWZBLEVBQVFsRCxHQUNmeW1GLEVBQWMxakIsRUFBUzBqQixFQUFhcHBFLEVBQU1uYSxHQUFRQSxFQUFPbWEsR0FFM0QsT0FBT29wRSxHQ1RNRSxJQ3lEQUMsR0QvRGYsU0FBd0J6cEYsR0FDdEIsT0FBTyxTQUFTSCxHQUNkLE9BQWlCLE1BQVZHLE9BQWlCeUosRUFBWXpKLEVBQU9ILElDMkQ1QjJwRixDQWpFRyxDQUVwQixJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQzFFLElBQVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQ3RCLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFDdEIsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQzFFLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUMxRSxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQ25DLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FBTSxJQUFRLEtBQ3RCLElBQVEsS0FFUixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQzFCLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN2RSxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN0RixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdEYsSUFBVSxJQUFNLElB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QUFELE9BRUpLLFNBQVN5NEUsZUFBZSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMTApO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWlzUHJvZHVjdGlvbikge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IFwiV2FybmluZzogXCIgKyBtZXNzYWdlO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aHJvdyBFcnJvcih0ZXh0KTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdhcm5pbmc7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBub2RlVXRpbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGtleUxpc3QgPSBPYmplY3Qua2V5cztcbnZhciBoYXNQcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBoYXNFbGVtZW50VHlwZSA9IHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYXJyQSA9IGlzQXJyYXkoYSlcbiAgICAgICwgYXJyQiA9IGlzQXJyYXkoYilcbiAgICAgICwgaVxuICAgICAgLCBsZW5ndGhcbiAgICAgICwga2V5O1xuXG4gICAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAsIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG4gICAgaWYgKGRhdGVBICE9IGRhdGVCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG5cbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAgICwgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuXG4gICAgdmFyIGtleXMgPSBrZXlMaXN0KGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCAhPT0ga2V5TGlzdChiKS5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxuICAgIC8vIHN0YXJ0IHJlYWN0LWZhc3QtY29tcGFyZVxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgRE9NIGVsZW1lbnRzXG4gICAgaWYgKGhhc0VsZW1lbnRUeXBlICYmIGEgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGIgaW5zdGFuY2VvZiBFbGVtZW50KVxuICAgICAgcmV0dXJuIGEgPT09IGI7XG5cbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIFJlYWN0XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGtleSA9PT0gJ19vd25lcicgJiYgYS4kJHR5cGVvZikge1xuICAgICAgICAvLyBSZWFjdC1zcGVjaWZpYzogYXZvaWQgdHJhdmVyc2luZyBSZWFjdCBlbGVtZW50cycgX293bmVyLlxuICAgICAgICAvLyAgX293bmVyIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gYW5kIGlzIG5vdCBuZWVkZWQgd2hlbiBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBhIHJlYWN0IGVsZW1lbnRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGVuZCByZWFjdC1mYXN0LWNvbXBhcmVcblxuICAgIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGEgIT09IGEgJiYgYiAhPT0gYjtcbn1cbi8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBvcnRlZEVxdWFsKGEsIGIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXF1YWwoYSwgYik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3N0YWNrfHJlY3Vyc2lvbi9pKSkgfHwgKGVycm9yLm51bWJlciA9PT0gLTIxNDY4MjgyNjApKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHJlYWN0LWZhc3QtY29tcGFyZSBkb2VzIG5vdCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlcy4nLCBlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc29tZSBvdGhlciBlcnJvci4gd2Ugc2hvdWxkIGRlZmluaXRlbHkga25vdyBhYm91dCB0aGVzZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwiLyoqXG4gKiBCYXNlZCBvbiBLZW5kbyBVSSBDb3JlIGV4cHJlc3Npb24gY29kZSA8aHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZSNsaWNlbnNlLWluZm9ybWF0aW9uPlxuICovXG4ndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gQ2FjaGUobWF4U2l6ZSkge1xuICB0aGlzLl9tYXhTaXplID0gbWF4U2l6ZVxuICB0aGlzLmNsZWFyKClcbn1cbkNhY2hlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9zaXplID0gMFxuICB0aGlzLl92YWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG59XG5DYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7XG4gIHJldHVybiB0aGlzLl92YWx1ZXNba2V5XVxufVxuQ2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgdGhpcy5fc2l6ZSA+PSB0aGlzLl9tYXhTaXplICYmIHRoaXMuY2xlYXIoKVxuICBpZiAoIShrZXkgaW4gdGhpcy5fdmFsdWVzKSkgdGhpcy5fc2l6ZSsrXG5cbiAgcmV0dXJuICh0aGlzLl92YWx1ZXNba2V5XSA9IHZhbHVlKVxufVxuXG52YXIgU1BMSVRfUkVHRVggPSAvW14uXlxcXV5bXSt8KD89XFxbXFxdfFxcLlxcLikvZyxcbiAgRElHSVRfUkVHRVggPSAvXlxcZCskLyxcbiAgTEVBRF9ESUdJVF9SRUdFWCA9IC9eXFxkLyxcbiAgU1BFQ19DSEFSX1JFR0VYID0gL1t+YCEjJCVcXF4mKis9XFwtXFxbXFxdXFxcXCc7LC97fXxcXFxcXCI6PD5cXD9dL2csXG4gIENMRUFOX1FVT1RFU19SRUdFWCA9IC9eXFxzKihbJ1wiXT8pKC4qPykoXFwxKVxccyokLyxcbiAgTUFYX0NBQ0hFX1NJWkUgPSA1MTJcblxudmFyIHBhdGhDYWNoZSA9IG5ldyBDYWNoZShNQVhfQ0FDSEVfU0laRSksXG4gIHNldENhY2hlID0gbmV3IENhY2hlKE1BWF9DQUNIRV9TSVpFKSxcbiAgZ2V0Q2FjaGUgPSBuZXcgQ2FjaGUoTUFYX0NBQ0hFX1NJWkUpXG5cbnZhciBjb25maWdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENhY2hlOiBDYWNoZSxcblxuICBzcGxpdDogc3BsaXQsXG5cbiAgbm9ybWFsaXplUGF0aDogbm9ybWFsaXplUGF0aCxcblxuICBzZXR0ZXI6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICB2YXIgcGFydHMgPSBub3JtYWxpemVQYXRoKHBhdGgpXG5cbiAgICByZXR1cm4gKFxuICAgICAgc2V0Q2FjaGUuZ2V0KHBhdGgpIHx8XG4gICAgICBzZXRDYWNoZS5zZXQocGF0aCwgZnVuY3Rpb24gc2V0dGVyKGRhdGEsIHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuID0gcGFydHMubGVuZ3RoXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbiAtIDEpIHtcbiAgICAgICAgICBkYXRhID0gZGF0YVtwYXJ0c1tpbmRleCsrXV1cbiAgICAgICAgfVxuICAgICAgICBkYXRhW3BhcnRzW2luZGV4XV0gPSB2YWx1ZVxuICAgICAgfSlcbiAgICApXG4gIH0sXG5cbiAgZ2V0dGVyOiBmdW5jdGlvbihwYXRoLCBzYWZlKSB7XG4gICAgdmFyIHBhcnRzID0gbm9ybWFsaXplUGF0aChwYXRoKVxuICAgIHJldHVybiAoXG4gICAgICBnZXRDYWNoZS5nZXQocGF0aCkgfHxcbiAgICAgIGdldENhY2hlLnNldChwYXRoLCBmdW5jdGlvbiBnZXR0ZXIoZGF0YSkge1xuICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbiA9IHBhcnRzLmxlbmd0aFxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHtcbiAgICAgICAgICBpZiAoZGF0YSAhPSBudWxsIHx8ICFzYWZlKSBkYXRhID0gZGF0YVtwYXJ0c1tpbmRleCsrXV1cbiAgICAgICAgICBlbHNlIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICB9KVxuICAgIClcbiAgfSxcblxuICBqb2luOiBmdW5jdGlvbihzZWdtZW50cykge1xuICAgIHJldHVybiBzZWdtZW50cy5yZWR1Y2UoZnVuY3Rpb24ocGF0aCwgcGFydCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcGF0aCArXG4gICAgICAgIChpc1F1b3RlZChwYXJ0KSB8fCBESUdJVF9SRUdFWC50ZXN0KHBhcnQpXG4gICAgICAgICAgPyAnWycgKyBwYXJ0ICsgJ10nXG4gICAgICAgICAgOiAocGF0aCA/ICcuJyA6ICcnKSArIHBhcnQpXG4gICAgICApXG4gICAgfSwgJycpXG4gIH0sXG5cbiAgZm9yRWFjaDogZnVuY3Rpb24ocGF0aCwgY2IsIHRoaXNBcmcpIHtcbiAgICBmb3JFYWNoKEFycmF5LmlzQXJyYXkocGF0aCkgPyBwYXRoIDogc3BsaXQocGF0aCksIGNiLCB0aGlzQXJnKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aCkge1xuICByZXR1cm4gKFxuICAgIHBhdGhDYWNoZS5nZXQocGF0aCkgfHxcbiAgICBwYXRoQ2FjaGUuc2V0KFxuICAgICAgcGF0aCxcbiAgICAgIHNwbGl0KHBhdGgpLm1hcChmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJ0LnJlcGxhY2UoQ0xFQU5fUVVPVEVTX1JFR0VYLCAnJDInKVxuICAgICAgfSlcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc3BsaXQocGF0aCkge1xuICByZXR1cm4gcGF0aC5tYXRjaChTUExJVF9SRUdFWClcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChwYXJ0cywgaXRlciwgdGhpc0FyZykge1xuICB2YXIgbGVuID0gcGFydHMubGVuZ3RoLFxuICAgIHBhcnQsXG4gICAgaWR4LFxuICAgIGlzQXJyYXksXG4gICAgaXNCcmFja2V0XG5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2lkeF1cblxuICAgIGlmIChwYXJ0KSB7XG4gICAgICBpZiAoc2hvdWxkQmVRdW90ZWQocGFydCkpIHtcbiAgICAgICAgcGFydCA9ICdcIicgKyBwYXJ0ICsgJ1wiJ1xuICAgICAgfVxuXG4gICAgICBpc0JyYWNrZXQgPSBpc1F1b3RlZChwYXJ0KVxuICAgICAgaXNBcnJheSA9ICFpc0JyYWNrZXQgJiYgL15cXGQrJC8udGVzdChwYXJ0KVxuXG4gICAgICBpdGVyLmNhbGwodGhpc0FyZywgcGFydCwgaXNCcmFja2V0LCBpc0FycmF5LCBpZHgsIHBhcnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1F1b3RlZChzdHIpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyAmJiBzdHIgJiYgW1wiJ1wiLCAnXCInXS5pbmRleE9mKHN0ci5jaGFyQXQoMCkpICE9PSAtMVxuICApXG59XG5cbmZ1bmN0aW9uIGhhc0xlYWRpbmdOdW1iZXIocGFydCkge1xuICByZXR1cm4gcGFydC5tYXRjaChMRUFEX0RJR0lUX1JFR0VYKSAmJiAhcGFydC5tYXRjaChESUdJVF9SRUdFWClcbn1cblxuZnVuY3Rpb24gaGFzU3BlY2lhbENoYXJzKHBhcnQpIHtcbiAgcmV0dXJuIFNQRUNfQ0hBUl9SRUdFWC50ZXN0KHBhcnQpXG59XG5cbmZ1bmN0aW9uIHNob3VsZEJlUXVvdGVkKHBhcnQpIHtcbiAgcmV0dXJuICFpc1F1b3RlZChwYXJ0KSAmJiAoaGFzTGVhZGluZ051bWJlcihwYXJ0KSB8fCBoYXNTcGVjaWFsQ2hhcnMocGFydCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoZXhlYykge1xuICB0cnkge1xuICAgIHJldHVybiAhIWV4ZWMoKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgdmFyIFJlYWN0SXMgPSByZXF1aXJlKCdyZWFjdC1pcycpO1xuXG4gIC8vIEJ5IGV4cGxpY2l0bHkgdXNpbmcgYHByb3AtdHlwZXNgIHlvdSBhcmUgb3B0aW5nIGludG8gbmV3IGRldmVsb3BtZW50IGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIHZhciB0aHJvd09uRGlyZWN0QWNjZXNzID0gdHJ1ZTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2ZhY3RvcnlXaXRoVHlwZUNoZWNrZXJzJykoUmVhY3RJcy5pc0VsZW1lbnQsIHRocm93T25EaXJlY3RBY2Nlc3MpO1xufSBlbHNlIHtcbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgcHJvZHVjdGlvbiBiZWhhdmlvci5cbiAgLy8gaHR0cDovL2ZiLm1lL3Byb3AtdHlwZXMtaW4tcHJvZFxuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zJykoKTtcbn1cbiIsIi8qIGpzaGludCBub2RlOiB0cnVlICovXHJcblwidXNlIHN0cmljdFwiO1xyXG5mdW5jdGlvbiBtYWtlQXJyYXlGcm9tKG9iaikge1xyXG4gIHJldHVybiBBcnJheS5wcm90b3R5cGUuc2xpY2UuYXBwbHkob2JqKTtcclxufVxyXG52YXJcclxuICBQRU5ESU5HID0gXCJwZW5kaW5nXCIsXHJcbiAgUkVTT0xWRUQgPSBcInJlc29sdmVkXCIsXHJcbiAgUkVKRUNURUQgPSBcInJlamVjdGVkXCI7XHJcblxyXG5mdW5jdGlvbiBTeW5jaHJvbm91c1Byb21pc2UoaGFuZGxlcikge1xyXG4gIHRoaXMuc3RhdHVzID0gUEVORElORztcclxuICB0aGlzLl9jb250aW51YXRpb25zID0gW107XHJcbiAgdGhpcy5fcGFyZW50ID0gbnVsbDtcclxuICB0aGlzLl9wYXVzZWQgPSBmYWxzZTtcclxuICBpZiAoaGFuZGxlcikge1xyXG4gICAgaGFuZGxlci5jYWxsKFxyXG4gICAgICB0aGlzLFxyXG4gICAgICB0aGlzLl9jb250aW51ZVdpdGguYmluZCh0aGlzKSxcclxuICAgICAgdGhpcy5fZmFpbFdpdGguYmluZCh0aGlzKVxyXG4gICAgKTtcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGxvb2tzTGlrZUFQcm9taXNlKG9iaikge1xyXG4gIHJldHVybiBvYmogJiYgdHlwZW9mIChvYmoudGhlbikgPT09IFwiZnVuY3Rpb25cIjtcclxufVxyXG5cclxuZnVuY3Rpb24gcGFzc1Rocm91Z2godmFsdWUpIHtcclxuICByZXR1cm4gdmFsdWU7XHJcbn1cclxuXHJcblN5bmNocm9ub3VzUHJvbWlzZS5wcm90b3R5cGUgPSB7XHJcbiAgdGhlbjogZnVuY3Rpb24gKG5leHRGbiwgY2F0Y2hGbikge1xyXG4gICAgdmFyIG5leHQgPSBTeW5jaHJvbm91c1Byb21pc2UudW5yZXNvbHZlZCgpLl9zZXRQYXJlbnQodGhpcyk7XHJcbiAgICBpZiAodGhpcy5faXNSZWplY3RlZCgpKSB7XHJcbiAgICAgIGlmICh0aGlzLl9wYXVzZWQpIHtcclxuICAgICAgICB0aGlzLl9jb250aW51YXRpb25zLnB1c2goe1xyXG4gICAgICAgICAgcHJvbWlzZTogbmV4dCxcclxuICAgICAgICAgIG5leHRGbjogbmV4dEZuLFxyXG4gICAgICAgICAgY2F0Y2hGbjogY2F0Y2hGblxyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIHJldHVybiBuZXh0O1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChjYXRjaEZuKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciBjYXRjaFJlc3VsdCA9IGNhdGNoRm4odGhpcy5fZXJyb3IpO1xyXG4gICAgICAgICAgaWYgKGxvb2tzTGlrZUFQcm9taXNlKGNhdGNoUmVzdWx0KSkge1xyXG4gICAgICAgICAgICB0aGlzLl9jaGFpblByb21pc2VEYXRhKGNhdGNoUmVzdWx0LCBuZXh0KTtcclxuICAgICAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUoY2F0Y2hSZXN1bHQpLl9zZXRQYXJlbnQodGhpcyk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgcmV0dXJuIFN5bmNocm9ub3VzUHJvbWlzZS5yZWplY3QoZSkuX3NldFBhcmVudCh0aGlzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIFN5bmNocm9ub3VzUHJvbWlzZS5yZWplY3QodGhpcy5fZXJyb3IpLl9zZXRQYXJlbnQodGhpcyk7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9jb250aW51YXRpb25zLnB1c2goe1xyXG4gICAgICBwcm9taXNlOiBuZXh0LFxyXG4gICAgICBuZXh0Rm46IG5leHRGbixcclxuICAgICAgY2F0Y2hGbjogY2F0Y2hGblxyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9ydW5SZXNvbHV0aW9ucygpO1xyXG4gICAgcmV0dXJuIG5leHQ7XHJcbiAgfSxcclxuICBjYXRjaDogZnVuY3Rpb24gKGhhbmRsZXIpIHtcclxuICAgIGlmICh0aGlzLl9pc1Jlc29sdmVkKCkpIHtcclxuICAgICAgcmV0dXJuIFN5bmNocm9ub3VzUHJvbWlzZS5yZXNvbHZlKHRoaXMuX2RhdGEpLl9zZXRQYXJlbnQodGhpcyk7XHJcbiAgICB9XHJcbiAgICB2YXIgbmV4dCA9IFN5bmNocm9ub3VzUHJvbWlzZS51bnJlc29sdmVkKCkuX3NldFBhcmVudCh0aGlzKTtcclxuICAgIHRoaXMuX2NvbnRpbnVhdGlvbnMucHVzaCh7XHJcbiAgICAgIHByb21pc2U6IG5leHQsXHJcbiAgICAgIGNhdGNoRm46IGhhbmRsZXJcclxuICAgIH0pO1xyXG4gICAgdGhpcy5fcnVuUmVqZWN0aW9ucygpO1xyXG4gICAgcmV0dXJuIG5leHQ7XHJcbiAgfSxcclxuICBmaW5hbGx5OiBmdW5jdGlvbihjYWxsYmFjaykge1xyXG4gICAgdmFyIHJhbiA9IGZhbHNlO1xyXG4gICAgZnVuY3Rpb24gcnVuRmluYWxseShyZXN1bHQsIGVycikge1xyXG4gICAgICBpZiAoIXJhbikge1xyXG4gICAgICAgIHJhbiA9IHRydWU7XHJcbiAgICAgICAgaWYgKCFjYWxsYmFjaykge1xyXG4gICAgICAgICAgY2FsbGJhY2sgPSBwYXNzVGhyb3VnaDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGNhbGxiYWNrUmVzdWx0ID0gY2FsbGJhY2socmVzdWx0KTtcclxuICAgICAgICBpZiAobG9va3NMaWtlQVByb21pc2UoY2FsbGJhY2tSZXN1bHQpKSB7XHJcbiAgICAgICAgICByZXR1cm4gY2FsbGJhY2tSZXN1bHQudGhlbihmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgaWYgKGVycikge1xyXG4gICAgICAgICAgICAgIHRocm93IGVycjtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICByZXR1cm4gcmVzdWx0O1xyXG4gICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpc1xyXG4gICAgICAudGhlbihmdW5jdGlvbihyZXN1bHQpIHtcclxuICAgICAgICByZXR1cm4gcnVuRmluYWxseShyZXN1bHQpO1xyXG4gICAgICB9KVxyXG4gICAgICAuY2F0Y2goZnVuY3Rpb24oZXJyKSB7XHJcbiAgICAgICAgcmV0dXJuIHJ1bkZpbmFsbHkobnVsbCwgZXJyKTtcclxuICAgICAgfSk7XHJcbiAgfSxcclxuICBwYXVzZTogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5fcGF1c2VkID0gdHJ1ZTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH0sXHJcbiAgcmVzdW1lOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB2YXIgZmlyc3RQYXVzZWQgPSB0aGlzLl9maW5kRmlyc3RQYXVzZWQoKTtcclxuICAgIGlmIChmaXJzdFBhdXNlZCkge1xyXG4gICAgICBmaXJzdFBhdXNlZC5fcGF1c2VkID0gZmFsc2U7XHJcbiAgICAgIGZpcnN0UGF1c2VkLl9ydW5SZXNvbHV0aW9ucygpO1xyXG4gICAgICBmaXJzdFBhdXNlZC5fcnVuUmVqZWN0aW9ucygpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfSxcclxuICBfZmluZEFuY2VzdHJ5OiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGludWF0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKGFjYywgY3VyKSB7XHJcbiAgICAgIGlmIChjdXIucHJvbWlzZSkge1xyXG4gICAgICAgIHZhciBub2RlID0ge1xyXG4gICAgICAgICAgcHJvbWlzZTogY3VyLnByb21pc2UsXHJcbiAgICAgICAgICBjaGlsZHJlbjogY3VyLnByb21pc2UuX2ZpbmRBbmNlc3RyeSgpXHJcbiAgICAgICAgfTtcclxuICAgICAgICBhY2MucHVzaChub2RlKTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gYWNjO1xyXG4gICAgfSwgW10pO1xyXG4gIH0sXHJcbiAgX3NldFBhcmVudDogZnVuY3Rpb24gKHBhcmVudCkge1xyXG4gICAgaWYgKHRoaXMuX3BhcmVudCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJwYXJlbnQgYWxyZWFkeSBzZXRcIik7XHJcbiAgICB9XHJcbiAgICB0aGlzLl9wYXJlbnQgPSBwYXJlbnQ7XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9LFxyXG4gIF9jb250aW51ZVdpdGg6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgZmlyc3RQZW5kaW5nID0gdGhpcy5fZmluZEZpcnN0UGVuZGluZygpO1xyXG4gICAgaWYgKGZpcnN0UGVuZGluZykge1xyXG4gICAgICBmaXJzdFBlbmRpbmcuX2RhdGEgPSBkYXRhO1xyXG4gICAgICBmaXJzdFBlbmRpbmcuX3NldFJlc29sdmVkKCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBfZmluZEZpcnN0UGVuZGluZzogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpbmRGaXJzdEFuY2VzdG9yKGZ1bmN0aW9uICh0ZXN0KSB7XHJcbiAgICAgIHJldHVybiB0ZXN0Ll9pc1BlbmRpbmcgJiYgdGVzdC5faXNQZW5kaW5nKCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9maW5kRmlyc3RQYXVzZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLl9maW5kRmlyc3RBbmNlc3RvcihmdW5jdGlvbiAodGVzdCkge1xyXG4gICAgICByZXR1cm4gdGVzdC5fcGF1c2VkO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICBfZmluZEZpcnN0QW5jZXN0b3I6IGZ1bmN0aW9uIChtYXRjaGluZykge1xyXG4gICAgdmFyIHRlc3QgPSB0aGlzO1xyXG4gICAgdmFyIHJlc3VsdDtcclxuICAgIHdoaWxlICh0ZXN0KSB7XHJcbiAgICAgIGlmIChtYXRjaGluZyh0ZXN0KSkge1xyXG4gICAgICAgIHJlc3VsdCA9IHRlc3Q7XHJcbiAgICAgIH1cclxuICAgICAgdGVzdCA9IHRlc3QuX3BhcmVudDtcclxuICAgIH1cclxuICAgIHJldHVybiByZXN1bHQ7XHJcbiAgfSxcclxuICBfZmFpbFdpdGg6IGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgdmFyIGZpcnN0UmVqZWN0ZWQgPSB0aGlzLl9maW5kRmlyc3RQZW5kaW5nKCk7XHJcbiAgICBpZiAoZmlyc3RSZWplY3RlZCkge1xyXG4gICAgICBmaXJzdFJlamVjdGVkLl9lcnJvciA9IGVycm9yO1xyXG4gICAgICBmaXJzdFJlamVjdGVkLl9zZXRSZWplY3RlZCgpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgX3Rha2VDb250aW51YXRpb25zOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fY29udGludWF0aW9ucy5zcGxpY2UoMCwgdGhpcy5fY29udGludWF0aW9ucy5sZW5ndGgpO1xyXG4gIH0sXHJcbiAgX3J1blJlamVjdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLl9wYXVzZWQgfHwgIXRoaXMuX2lzUmVqZWN0ZWQoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXJcclxuICAgICAgZXJyb3IgPSB0aGlzLl9lcnJvcixcclxuICAgICAgY29udGludWF0aW9ucyA9IHRoaXMuX3Rha2VDb250aW51YXRpb25zKCksXHJcbiAgICAgIHNlbGYgPSB0aGlzO1xyXG4gICAgY29udGludWF0aW9ucy5mb3JFYWNoKGZ1bmN0aW9uIChjb250KSB7XHJcbiAgICAgIGlmIChjb250LmNhdGNoRm4pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIGNhdGNoUmVzdWx0ID0gY29udC5jYXRjaEZuKGVycm9yKTtcclxuICAgICAgICAgIHNlbGYuX2hhbmRsZVVzZXJGdW5jdGlvblJlc3VsdChjYXRjaFJlc3VsdCwgY29udC5wcm9taXNlKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBjb250LnByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIHtcclxuICAgICAgICBjb250LnByb21pc2UucmVqZWN0KGVycm9yKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuICBfcnVuUmVzb2x1dGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgIGlmICh0aGlzLl9wYXVzZWQgfHwgIXRoaXMuX2lzUmVzb2x2ZWQoKSB8fCB0aGlzLl9pc1BlbmRpbmcoKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB2YXIgY29udGludWF0aW9ucyA9IHRoaXMuX3Rha2VDb250aW51YXRpb25zKCk7XHJcbiAgICBpZiAobG9va3NMaWtlQVByb21pc2UodGhpcy5fZGF0YSkpIHtcclxuICAgICAgcmV0dXJuIHRoaXMuX2hhbmRsZVdoZW5SZXNvbHZlZERhdGFJc1Byb21pc2UodGhpcy5fZGF0YSk7XHJcbiAgICB9XHJcbiAgICB2YXIgZGF0YSA9IHRoaXMuX2RhdGE7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICBjb250aW51YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGNvbnQpIHtcclxuICAgICAgaWYgKGNvbnQubmV4dEZuKSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgIHZhciByZXN1bHQgPSBjb250Lm5leHRGbihkYXRhKTtcclxuICAgICAgICAgIHNlbGYuX2hhbmRsZVVzZXJGdW5jdGlvblJlc3VsdChyZXN1bHQsIGNvbnQucHJvbWlzZSk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkge1xyXG4gICAgICAgICAgc2VsZi5faGFuZGxlUmVzb2x1dGlvbkVycm9yKGUsIGNvbnQpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmIChjb250LnByb21pc2UpIHtcclxuICAgICAgICBjb250LnByb21pc2UucmVzb2x2ZShkYXRhKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgfSxcclxuICBfaGFuZGxlUmVzb2x1dGlvbkVycm9yOiBmdW5jdGlvbiAoZSwgY29udGludWF0aW9uKSB7XHJcbiAgICB0aGlzLl9zZXRSZWplY3RlZCgpO1xyXG4gICAgaWYgKGNvbnRpbnVhdGlvbi5jYXRjaEZuKSB7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgY29udGludWF0aW9uLmNhdGNoRm4oZSk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9IGNhdGNoIChlMikge1xyXG4gICAgICAgIGUgPSBlMjtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgaWYgKGNvbnRpbnVhdGlvbi5wcm9taXNlKSB7XHJcbiAgICAgIGNvbnRpbnVhdGlvbi5wcm9taXNlLnJlamVjdChlKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9oYW5kbGVXaGVuUmVzb2x2ZWREYXRhSXNQcm9taXNlOiBmdW5jdGlvbiAoZGF0YSkge1xyXG4gICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgcmV0dXJuIGRhdGEudGhlbihmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgICAgIHNlbGYuX2RhdGEgPSByZXN1bHQ7XHJcbiAgICAgIHNlbGYuX3J1blJlc29sdXRpb25zKCk7XHJcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyb3IpIHtcclxuICAgICAgc2VsZi5fZXJyb3IgPSBlcnJvcjtcclxuICAgICAgc2VsZi5fc2V0UmVqZWN0ZWQoKTtcclxuICAgICAgc2VsZi5fcnVuUmVqZWN0aW9ucygpO1xyXG4gICAgfSk7XHJcbiAgfSxcclxuICBfaGFuZGxlVXNlckZ1bmN0aW9uUmVzdWx0OiBmdW5jdGlvbiAoZGF0YSwgbmV4dFN5bmNocm9ub3VzUHJvbWlzZSkge1xyXG4gICAgaWYgKGxvb2tzTGlrZUFQcm9taXNlKGRhdGEpKSB7XHJcbiAgICAgIHRoaXMuX2NoYWluUHJvbWlzZURhdGEoZGF0YSwgbmV4dFN5bmNocm9ub3VzUHJvbWlzZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBuZXh0U3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUoZGF0YSk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBfY2hhaW5Qcm9taXNlRGF0YTogZnVuY3Rpb24gKHByb21pc2VEYXRhLCBuZXh0U3luY2hyb25vdXNQcm9taXNlKSB7XHJcbiAgICBwcm9taXNlRGF0YS50aGVuKGZ1bmN0aW9uIChuZXdEYXRhKSB7XHJcbiAgICAgIG5leHRTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShuZXdEYXRhKTtcclxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChuZXdFcnJvcikge1xyXG4gICAgICBuZXh0U3luY2hyb25vdXNQcm9taXNlLnJlamVjdChuZXdFcnJvcik7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9zZXRSZXNvbHZlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5zdGF0dXMgPSBSRVNPTFZFRDtcclxuICAgIGlmICghdGhpcy5fcGF1c2VkKSB7XHJcbiAgICAgIHRoaXMuX3J1blJlc29sdXRpb25zKCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBfc2V0UmVqZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHRoaXMuc3RhdHVzID0gUkVKRUNURUQ7XHJcbiAgICBpZiAoIXRoaXMuX3BhdXNlZCkge1xyXG4gICAgICB0aGlzLl9ydW5SZWplY3Rpb25zKCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBfaXNQZW5kaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IFBFTkRJTkc7XHJcbiAgfSxcclxuICBfaXNSZXNvbHZlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuc3RhdHVzID09PSBSRVNPTFZFRDtcclxuICB9LFxyXG4gIF9pc1JlamVjdGVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IFJFSkVDVEVEO1xyXG4gIH1cclxufTtcclxuXHJcblN5bmNocm9ub3VzUHJvbWlzZS5yZXNvbHZlID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gIHJldHVybiBuZXcgU3luY2hyb25vdXNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIGlmIChsb29rc0xpa2VBUHJvbWlzZShyZXN1bHQpKSB7XHJcbiAgICAgIHJlc3VsdC50aGVuKGZ1bmN0aW9uIChuZXdSZXN1bHQpIHtcclxuICAgICAgICByZXNvbHZlKG5ld1Jlc3VsdCk7XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICAgIHJlamVjdChlcnJvcik7XHJcbiAgICAgIH0pO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgcmVzb2x2ZShyZXN1bHQpO1xyXG4gICAgfVxyXG4gIH0pO1xyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLnJlamVjdCA9IGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICByZXR1cm4gbmV3IFN5bmNocm9ub3VzUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICByZWplY3QocmVzdWx0KTtcclxuICB9KTtcclxufTtcclxuXHJcblN5bmNocm9ub3VzUHJvbWlzZS51bnJlc29sdmVkID0gZnVuY3Rpb24gKCkge1xyXG4gIHJldHVybiBuZXcgU3luY2hyb25vdXNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHRoaXMucmVzb2x2ZSA9IHJlc29sdmU7XHJcbiAgICB0aGlzLnJlamVjdCA9IHJlamVjdDtcclxuICB9KTtcclxufTtcclxuXHJcblN5bmNocm9ub3VzUHJvbWlzZS5hbGwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgdmFyIGFyZ3MgPSBtYWtlQXJyYXlGcm9tKGFyZ3VtZW50cyk7XHJcbiAgaWYgKEFycmF5LmlzQXJyYXkoYXJnc1swXSkpIHtcclxuICAgIGFyZ3MgPSBhcmdzWzBdO1xyXG4gIH1cclxuICBpZiAoIWFyZ3MubGVuZ3RoKSB7XHJcbiAgICByZXR1cm4gU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUoW10pO1xyXG4gIH1cclxuICByZXR1cm4gbmV3IFN5bmNocm9ub3VzUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICB2YXJcclxuICAgICAgYWxsRGF0YSA9IFtdLFxyXG4gICAgICBudW1SZXNvbHZlZCA9IDAsXHJcbiAgICAgIGRvUmVzb2x2ZSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICBpZiAobnVtUmVzb2x2ZWQgPT09IGFyZ3MubGVuZ3RoKSB7XHJcbiAgICAgICAgICByZXNvbHZlKGFsbERhdGEpO1xyXG4gICAgICAgIH1cclxuICAgICAgfSxcclxuICAgICAgcmVqZWN0ZWQgPSBmYWxzZSxcclxuICAgICAgZG9SZWplY3QgPSBmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgaWYgKHJlamVjdGVkKSB7XHJcbiAgICAgICAgICByZXR1cm47XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJlamVjdGVkID0gdHJ1ZTtcclxuICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgfTtcclxuICAgIGFyZ3MuZm9yRWFjaChmdW5jdGlvbiAoYXJnLCBpZHgpIHtcclxuICAgICAgU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUoYXJnKS50aGVuKGZ1bmN0aW9uICh0aGlzUmVzdWx0KSB7XHJcbiAgICAgICAgYWxsRGF0YVtpZHhdID0gdGhpc1Jlc3VsdDtcclxuICAgICAgICBudW1SZXNvbHZlZCArPSAxO1xyXG4gICAgICAgIGRvUmVzb2x2ZSgpO1xyXG4gICAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XHJcbiAgICAgICAgZG9SZWplY3QoZXJyKTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICB9KTtcclxufTtcclxuXHJcbi8qIGpzaGludCBpZ25vcmU6c3RhcnQgKi9cclxuaWYgKFByb21pc2UgPT09IFN5bmNocm9ub3VzUHJvbWlzZSkge1xyXG4gIHRocm93IG5ldyBFcnJvcihcIlBsZWFzZSB1c2UgU3luY2hyb25vdXNQcm9taXNlLmluc3RhbGxHbG9iYWxseSgpIHRvIGluc3RhbGwgZ2xvYmFsbHlcIik7XHJcbn1cclxudmFyIFJlYWxQcm9taXNlID0gUHJvbWlzZTtcclxuU3luY2hyb25vdXNQcm9taXNlLmluc3RhbGxHbG9iYWxseSA9IGZ1bmN0aW9uKF9fYXdhaXRlcikge1xyXG4gIGlmIChQcm9taXNlID09PSBTeW5jaHJvbm91c1Byb21pc2UpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXI7XHJcbiAgfVxyXG4gIHZhciByZXN1bHQgPSBwYXRjaEF3YWl0ZXJJZlJlcXVpcmVkKF9fYXdhaXRlcik7XHJcbiAgUHJvbWlzZSA9IFN5bmNocm9ub3VzUHJvbWlzZTtcclxuICByZXR1cm4gcmVzdWx0O1xyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLnVuaW5zdGFsbEdsb2JhbGx5ID0gZnVuY3Rpb24oKSB7XHJcbiAgaWYgKFByb21pc2UgPT09IFN5bmNocm9ub3VzUHJvbWlzZSkge1xyXG4gICAgUHJvbWlzZSA9IFJlYWxQcm9taXNlO1xyXG4gIH1cclxufTtcclxuXHJcbmZ1bmN0aW9uIHBhdGNoQXdhaXRlcklmUmVxdWlyZWQoX19hd2FpdGVyKSB7XHJcbiAgaWYgKHR5cGVvZihfX2F3YWl0ZXIpID09PSBcInVuZGVmaW5lZFwiIHx8IF9fYXdhaXRlci5fX3BhdGNoZWQpIHtcclxuICAgIHJldHVybiBfX2F3YWl0ZXI7XHJcbiAgfVxyXG4gIHZhciBvcmlnaW5hbEF3YWl0ZXIgPSBfX2F3YWl0ZXI7XHJcbiAgX19hd2FpdGVyID0gZnVuY3Rpb24oKSB7XHJcbiAgICB2YXIgUHJvbWlzZSA9IFJlYWxQcm9taXNlO1xyXG4gICAgb3JpZ2luYWxBd2FpdGVyLmFwcGx5KHRoaXMsIG1ha2VBcnJheUZyb20oYXJndW1lbnRzKSk7XHJcbiAgfTtcclxuICBfX2F3YWl0ZXIuX19wYXRjaGVkID0gdHJ1ZTtcclxuICByZXR1cm4gX19hd2FpdGVyO1xyXG59XHJcbi8qIGpzaGludCBpZ25vcmU6ZW5kICovXHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBTeW5jaHJvbm91c1Byb21pc2U6IFN5bmNocm9ub3VzUHJvbWlzZVxyXG59O1xyXG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdWlkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VpZCcpO1xudmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xudmFyIFVTRV9TWU1CT0xfQVNfVUlEID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3VzZS1zeW1ib2wtYXMtdWlkJyk7XG5cbnZhciBXZWxsS25vd25TeW1ib2xzU3RvcmUgPSBzaGFyZWQoJ3drcycpO1xudmFyIFN5bWJvbCA9IGdsb2JhbC5TeW1ib2w7XG52YXIgY3JlYXRlV2VsbEtub3duU3ltYm9sID0gVVNFX1NZTUJPTF9BU19VSUQgPyBTeW1ib2wgOiBTeW1ib2wgJiYgU3ltYm9sLndpdGhvdXRTZXR0ZXIgfHwgdWlkO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gIGlmICghaGFzKFdlbGxLbm93blN5bWJvbHNTdG9yZSwgbmFtZSkpIHtcbiAgICBpZiAoTkFUSVZFX1NZTUJPTCAmJiBoYXMoU3ltYm9sLCBuYW1lKSkgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gU3ltYm9sW25hbWVdO1xuICAgIGVsc2UgV2VsbEtub3duU3ltYm9sc1N0b3JlW25hbWVdID0gY3JlYXRlV2VsbEtub3duU3ltYm9sKCdTeW1ib2wuJyArIG5hbWUpO1xuICB9IHJldHVybiBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV07XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbi8vIFRoYW5rJ3MgSUU4IGZvciBoaXMgZnVubnkgZGVmaW5lUHJvcGVydHlcbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh7fSwgMSwgeyBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDc7IH0gfSlbMV0gIT0gNztcbn0pO1xuIiwidmFyIERFU0NSSVBUT1JTID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2Rlc2NyaXB0b3JzJyk7XG52YXIgSUU4X0RPTV9ERUZJTkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaWU4LWRvbS1kZWZpbmUnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciB0b1ByaW1pdGl2ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1wcmltaXRpdmUnKTtcblxudmFyIG5hdGl2ZURlZmluZVByb3BlcnR5ID0gT2JqZWN0LmRlZmluZVByb3BlcnR5O1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnR5YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5kZWZpbmVwcm9wZXJ0eVxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVEZWZpbmVQcm9wZXJ0eSA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnR5KE8sIFAsIEF0dHJpYnV0ZXMpIHtcbiAgYW5PYmplY3QoTyk7XG4gIFAgPSB0b1ByaW1pdGl2ZShQLCB0cnVlKTtcbiAgYW5PYmplY3QoQXR0cmlidXRlcyk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlRGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcyk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgaWYgKCdnZXQnIGluIEF0dHJpYnV0ZXMgfHwgJ3NldCcgaW4gQXR0cmlidXRlcykgdGhyb3cgVHlwZUVycm9yKCdBY2Nlc3NvcnMgbm90IHN1cHBvcnRlZCcpO1xuICBpZiAoJ3ZhbHVlJyBpbiBBdHRyaWJ1dGVzKSBPW1BdID0gQXR0cmlidXRlcy52YWx1ZTtcbiAgcmV0dXJuIE87XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIHR5cGVvZiBpdCA9PT0gJ29iamVjdCcgPyBpdCAhPT0gbnVsbCA6IHR5cGVvZiBpdCA9PT0gJ2Z1bmN0aW9uJztcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIGlmICghaXNPYmplY3QoaXQpKSB7XG4gICAgdGhyb3cgVHlwZUVycm9yKFN0cmluZyhpdCkgKyAnIGlzIG5vdCBhbiBvYmplY3QnKTtcbiAgfSByZXR1cm4gaXQ7XG59O1xuIiwidmFyIGc7XG5cbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXG5nID0gKGZ1bmN0aW9uKCkge1xuXHRyZXR1cm4gdGhpcztcbn0pKCk7XG5cbnRyeSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxuXHRnID0gZyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xufSBjYXRjaCAoZSkge1xuXHQvLyBUaGlzIHdvcmtzIGlmIHRoZSB3aW5kb3cgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikgZyA9IHdpbmRvdztcbn1cblxuLy8gZyBjYW4gc3RpbGwgYmUgdW5kZWZpbmVkLCBidXQgbm90aGluZyB0byBkbyBhYm91dCBpdC4uLlxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3Ncbi8vIGVhc2llciB0byBoYW5kbGUgdGhpcyBjYXNlLiBpZighZ2xvYmFsKSB7IC4uLn1cblxubW9kdWxlLmV4cG9ydHMgPSBnO1xuIiwibW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihvcmlnaW5hbE1vZHVsZSkge1xuXHRpZiAoIW9yaWdpbmFsTW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdHZhciBtb2R1bGUgPSBPYmplY3QuY3JlYXRlKG9yaWdpbmFsTW9kdWxlKTtcblx0XHQvLyBtb2R1bGUucGFyZW50ID0gdW5kZWZpbmVkIGJ5IGRlZmF1bHRcblx0XHRpZiAoIW1vZHVsZS5jaGlsZHJlbikgbW9kdWxlLmNoaWxkcmVuID0gW107XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJsb2FkZWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUubDtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImlkXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gbW9kdWxlLmk7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG1vZHVsZSwgXCJleHBvcnRzXCIsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWVcblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiIsIi8vIHRvT2JqZWN0IHdpdGggZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBzdHJpbmdzXG52YXIgSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbmRleGVkLW9iamVjdCcpO1xudmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBJbmRleGVkT2JqZWN0KHJlcXVpcmVPYmplY3RDb2VyY2libGUoaXQpKTtcbn07XG4iLCIndXNlIHN0cmljdCc7XG5cbmZ1bmN0aW9uIGNoZWNrRENFKCkge1xuICAvKiBnbG9iYWwgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fICovXG4gIGlmIChcbiAgICB0eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fID09PSAndW5kZWZpbmVkJyB8fFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UgIT09ICdmdW5jdGlvbidcbiAgKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgLy8gVGhpcyBicmFuY2ggaXMgdW5yZWFjaGFibGUgYmVjYXVzZSB0aGlzIGZ1bmN0aW9uIGlzIG9ubHkgY2FsbGVkXG4gICAgLy8gaW4gcHJvZHVjdGlvbiwgYnV0IHRoZSBjb25kaXRpb24gaXMgdHJ1ZSBvbmx5IGluIGRldmVsb3BtZW50LlxuICAgIC8vIFRoZXJlZm9yZSBpZiB0aGUgYnJhbmNoIGlzIHN0aWxsIGhlcmUsIGRlYWQgY29kZSBlbGltaW5hdGlvbiB3YXNuJ3RcbiAgICAvLyBwcm9wZXJseSBhcHBsaWVkLlxuICAgIC8vIERvbid0IGNoYW5nZSB0aGUgbWVzc2FnZS4gUmVhY3QgRGV2VG9vbHMgcmVsaWVzIG9uIGl0LiBBbHNvIG1ha2Ugc3VyZVxuICAgIC8vIHRoaXMgbWVzc2FnZSBkb2Vzbid0IG9jY3VyIGVsc2V3aGVyZSBpbiB0aGlzIGZ1bmN0aW9uLCBvciBpdCB3aWxsIGNhdXNlXG4gICAgLy8gYSBmYWxzZSBwb3NpdGl2ZS5cbiAgICB0aHJvdyBuZXcgRXJyb3IoJ15fXicpO1xuICB9XG4gIHRyeSB7XG4gICAgLy8gVmVyaWZ5IHRoYXQgdGhlIGNvZGUgYWJvdmUgaGFzIGJlZW4gZGVhZCBjb2RlIGVsaW1pbmF0ZWQgKERDRSdkKS5cbiAgICBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18uY2hlY2tEQ0UoY2hlY2tEQ0UpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICAvLyBEZXZUb29scyBzaG91bGRuJ3QgY3Jhc2ggUmVhY3QsIG5vIG1hdHRlciB3aGF0LlxuICAgIC8vIFdlIHNob3VsZCBzdGlsbCByZXBvcnQgaW4gY2FzZSB3ZSBicmVhayB0aGlzIGNvZGUuXG4gICAgY29uc29sZS5lcnJvcihlcnIpO1xuICB9XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIC8vIERDRSBjaGVjayBzaG91bGQgaGFwcGVuIGJlZm9yZSBSZWFjdERPTSBidW5kbGUgZXhlY3V0ZXMgc28gdGhhdFxuICAvLyBEZXZUb29scyBjYW4gcmVwb3J0IGJhZCBtaW5pZmljYXRpb24gZHVyaW5nIGluamVjdGlvbi5cbiAgY2hlY2tEQ0UoKTtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtZG9tLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvcmVhY3QtaXMuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgZ2xvYmFsYCBmcm9tIE5vZGUuanMuICovXG52YXIgZnJlZUdsb2JhbCA9IHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsICYmIGdsb2JhbC5PYmplY3QgPT09IE9iamVjdCAmJiBnbG9iYWw7XG5cbmV4cG9ydCBkZWZhdWx0IGZyZWVHbG9iYWw7XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wid3JhcHBlclwiOlwiXzJfeDdJRk5jYWZlYkRPTkJTejFJanVcIixcImxlZnRQYXJ0XCI6XCJTYUphQ0xtbjlreHZtdXlyWE10dmJcIixcInJpZ2h0UGFydFwiOlwiXzJLWTFiMUF5UXBXNW1FblRGTkJVVV9cIn07IiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJoMlwiOlwibVhKdm11OTRFeXV6cXdlRWF0NFp4XCIsXCJoM1wiOlwiXzNJVy1yWWRYU0trTzRCTHltRWNBTzNcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImluZGVudF8yXCI6XCJfMzh6Z3dFWUowYllyX3o4dzIzUEZpM1wiLFwiaW5kZW50XzNcIjpcIl8zOU1Rd1Y2THF2b2JiZXRycTlpeWx4XCJ9OyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjYuNScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSBhY3RpdmVYRG9jdW1lbnQgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJhcHBcIjpcIl8xcnFJMFBXaFc3WXYzVTRYbWtYd1N4XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJfMlB6M21QandfdXA0c2NJZDhhNDQ2QlwifTsiLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJGYWxzZTtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUJ1ZmZlcjtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJib3R0b21QYXJ0XCI6XCJfOEVLc3hwRkJlaEo4Q01fOTlHZjlrXCJ9OyIsIlxuLyoqXG4gKiBUb3BvbG9naWNhbCBzb3J0aW5nIGZ1bmN0aW9uXG4gKlxuICogQHBhcmFtIHtBcnJheX0gZWRnZXNcbiAqIEByZXR1cm5zIHtBcnJheX1cbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKGVkZ2VzKSB7XG4gIHJldHVybiB0b3Bvc29ydCh1bmlxdWVOb2RlcyhlZGdlcyksIGVkZ2VzKVxufVxuXG5tb2R1bGUuZXhwb3J0cy5hcnJheSA9IHRvcG9zb3J0XG5cbmZ1bmN0aW9uIHRvcG9zb3J0KG5vZGVzLCBlZGdlcykge1xuICB2YXIgY3Vyc29yID0gbm9kZXMubGVuZ3RoXG4gICAgLCBzb3J0ZWQgPSBuZXcgQXJyYXkoY3Vyc29yKVxuICAgICwgdmlzaXRlZCA9IHt9XG4gICAgLCBpID0gY3Vyc29yXG4gICAgLy8gQmV0dGVyIGRhdGEgc3RydWN0dXJlcyBtYWtlIGFsZ29yaXRobSBtdWNoIGZhc3Rlci5cbiAgICAsIG91dGdvaW5nRWRnZXMgPSBtYWtlT3V0Z29pbmdFZGdlcyhlZGdlcylcbiAgICAsIG5vZGVzSGFzaCA9IG1ha2VOb2Rlc0hhc2gobm9kZXMpXG5cbiAgLy8gY2hlY2sgZm9yIHVua25vd24gbm9kZXNcbiAgZWRnZXMuZm9yRWFjaChmdW5jdGlvbihlZGdlKSB7XG4gICAgaWYgKCFub2Rlc0hhc2guaGFzKGVkZ2VbMF0pIHx8ICFub2Rlc0hhc2guaGFzKGVkZ2VbMV0pKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZS4gVGhlcmUgaXMgYW4gdW5rbm93biBub2RlIGluIHRoZSBzdXBwbGllZCBlZGdlcy4nKVxuICAgIH1cbiAgfSlcblxuICB3aGlsZSAoaS0tKSB7XG4gICAgaWYgKCF2aXNpdGVkW2ldKSB2aXNpdChub2Rlc1tpXSwgaSwgbmV3IFNldCgpKVxuICB9XG5cbiAgcmV0dXJuIHNvcnRlZFxuXG4gIGZ1bmN0aW9uIHZpc2l0KG5vZGUsIGksIHByZWRlY2Vzc29ycykge1xuICAgIGlmKHByZWRlY2Vzc29ycy5oYXMobm9kZSkpIHtcbiAgICAgIHZhciBub2RlUmVwXG4gICAgICB0cnkge1xuICAgICAgICBub2RlUmVwID0gXCIsIG5vZGUgd2FzOlwiICsgSlNPTi5zdHJpbmdpZnkobm9kZSlcbiAgICAgIH0gY2F0Y2goZSkge1xuICAgICAgICBub2RlUmVwID0gXCJcIlxuICAgICAgfVxuICAgICAgdGhyb3cgbmV3IEVycm9yKCdDeWNsaWMgZGVwZW5kZW5jeScgKyBub2RlUmVwKVxuICAgIH1cblxuICAgIGlmICghbm9kZXNIYXNoLmhhcyhub2RlKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdGb3VuZCB1bmtub3duIG5vZGUuIE1ha2Ugc3VyZSB0byBwcm92aWRlZCBhbGwgaW52b2x2ZWQgbm9kZXMuIFVua25vd24gbm9kZTogJytKU09OLnN0cmluZ2lmeShub2RlKSlcbiAgICB9XG5cbiAgICBpZiAodmlzaXRlZFtpXSkgcmV0dXJuO1xuICAgIHZpc2l0ZWRbaV0gPSB0cnVlXG5cbiAgICB2YXIgb3V0Z29pbmcgPSBvdXRnb2luZ0VkZ2VzLmdldChub2RlKSB8fCBuZXcgU2V0KClcbiAgICBvdXRnb2luZyA9IEFycmF5LmZyb20ob3V0Z29pbmcpXG5cbiAgICBpZiAoaSA9IG91dGdvaW5nLmxlbmd0aCkge1xuICAgICAgcHJlZGVjZXNzb3JzLmFkZChub2RlKVxuICAgICAgZG8ge1xuICAgICAgICB2YXIgY2hpbGQgPSBvdXRnb2luZ1stLWldXG4gICAgICAgIHZpc2l0KGNoaWxkLCBub2Rlc0hhc2guZ2V0KGNoaWxkKSwgcHJlZGVjZXNzb3JzKVxuICAgICAgfSB3aGlsZSAoaSlcbiAgICAgIHByZWRlY2Vzc29ycy5kZWxldGUobm9kZSlcbiAgICB9XG5cbiAgICBzb3J0ZWRbLS1jdXJzb3JdID0gbm9kZVxuICB9XG59XG5cbmZ1bmN0aW9uIHVuaXF1ZU5vZGVzKGFycil7XG4gIHZhciByZXMgPSBuZXcgU2V0KClcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBlZGdlID0gYXJyW2ldXG4gICAgcmVzLmFkZChlZGdlWzBdKVxuICAgIHJlcy5hZGQoZWRnZVsxXSlcbiAgfVxuICByZXR1cm4gQXJyYXkuZnJvbShyZXMpXG59XG5cbmZ1bmN0aW9uIG1ha2VPdXRnb2luZ0VkZ2VzKGFycil7XG4gIHZhciBlZGdlcyA9IG5ldyBNYXAoKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgdmFyIGVkZ2UgPSBhcnJbaV1cbiAgICBpZiAoIWVkZ2VzLmhhcyhlZGdlWzBdKSkgZWRnZXMuc2V0KGVkZ2VbMF0sIG5ldyBTZXQoKSlcbiAgICBpZiAoIWVkZ2VzLmhhcyhlZGdlWzFdKSkgZWRnZXMuc2V0KGVkZ2VbMV0sIG5ldyBTZXQoKSlcbiAgICBlZGdlcy5nZXQoZWRnZVswXSkuYWRkKGVkZ2VbMV0pXG4gIH1cbiAgcmV0dXJuIGVkZ2VzXG59XG5cbmZ1bmN0aW9uIG1ha2VOb2Rlc0hhc2goYXJyKXtcbiAgdmFyIHJlcyA9IG5ldyBNYXAoKVxuICBmb3IgKHZhciBpID0gMCwgbGVuID0gYXJyLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgcmVzLnNldChhcnJbaV0sIGkpXG4gIH1cbiAgcmV0dXJuIHJlc1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgbD1yZXF1aXJlKFwib2JqZWN0LWFzc2lnblwiKSxuPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IscD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLHE9bj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LHI9bj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsdD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCx1PW4/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LHY9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksdz1uP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLHg9bj9TeW1ib2wuZm9yKFwicmVhY3QuZm9yd2FyZF9yZWZcIik6NjAxMTIseT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyx6PW4/U3ltYm9sLmZvcihcInJlYWN0Lm1lbW9cIik6NjAxMTUsQT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOlxuNjAxMTYsQj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuaXRlcmF0b3I7ZnVuY3Rpb24gQyhhKXtmb3IodmFyIGI9XCJodHRwczovL3JlYWN0anMub3JnL2RvY3MvZXJyb3ItZGVjb2Rlci5odG1sP2ludmFyaWFudD1cIithLGM9MTtjPGFyZ3VtZW50cy5sZW5ndGg7YysrKWIrPVwiJmFyZ3NbXT1cIitlbmNvZGVVUklDb21wb25lbnQoYXJndW1lbnRzW2NdKTtyZXR1cm5cIk1pbmlmaWVkIFJlYWN0IGVycm9yICNcIithK1wiOyB2aXNpdCBcIitiK1wiIGZvciB0aGUgZnVsbCBtZXNzYWdlIG9yIHVzZSB0aGUgbm9uLW1pbmlmaWVkIGRldiBlbnZpcm9ubWVudCBmb3IgZnVsbCBlcnJvcnMgYW5kIGFkZGl0aW9uYWwgaGVscGZ1bCB3YXJuaW5ncy5cIn1cbnZhciBEPXtpc01vdW50ZWQ6ZnVuY3Rpb24oKXtyZXR1cm4hMX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKCl7fSxlbnF1ZXVlU2V0U3RhdGU6ZnVuY3Rpb24oKXt9fSxFPXt9O2Z1bmN0aW9uIEYoYSxiLGMpe3RoaXMucHJvcHM9YTt0aGlzLmNvbnRleHQ9Yjt0aGlzLnJlZnM9RTt0aGlzLnVwZGF0ZXI9Y3x8RH1GLnByb3RvdHlwZS5pc1JlYWN0Q29tcG9uZW50PXt9O0YucHJvdG90eXBlLnNldFN0YXRlPWZ1bmN0aW9uKGEsYil7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYSYmbnVsbCE9YSl0aHJvdyBFcnJvcihDKDg1KSk7dGhpcy51cGRhdGVyLmVucXVldWVTZXRTdGF0ZSh0aGlzLGEsYixcInNldFN0YXRlXCIpfTtGLnByb3RvdHlwZS5mb3JjZVVwZGF0ZT1mdW5jdGlvbihhKXt0aGlzLnVwZGF0ZXIuZW5xdWV1ZUZvcmNlVXBkYXRlKHRoaXMsYSxcImZvcmNlVXBkYXRlXCIpfTtcbmZ1bmN0aW9uIEcoKXt9Ry5wcm90b3R5cGU9Ri5wcm90b3R5cGU7ZnVuY3Rpb24gSChhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfXZhciBJPUgucHJvdG90eXBlPW5ldyBHO0kuY29uc3RydWN0b3I9SDtsKEksRi5wcm90b3R5cGUpO0kuaXNQdXJlUmVhY3RDb21wb25lbnQ9ITA7dmFyIEo9e2N1cnJlbnQ6bnVsbH0sSz1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LEw9e2tleTohMCxyZWY6ITAsX19zZWxmOiEwLF9fc291cmNlOiEwfTtcbmZ1bmN0aW9uIE0oYSxiLGMpe3ZhciBlLGQ9e30sZz1udWxsLGs9bnVsbDtpZihudWxsIT1iKWZvcihlIGluIHZvaWQgMCE9PWIucmVmJiYoaz1iLnJlZiksdm9pZCAwIT09Yi5rZXkmJihnPVwiXCIrYi5rZXkpLGIpSy5jYWxsKGIsZSkmJiFMLmhhc093blByb3BlcnR5KGUpJiYoZFtlXT1iW2VdKTt2YXIgZj1hcmd1bWVudHMubGVuZ3RoLTI7aWYoMT09PWYpZC5jaGlsZHJlbj1jO2Vsc2UgaWYoMTxmKXtmb3IodmFyIGg9QXJyYXkoZiksbT0wO208ZjttKyspaFttXT1hcmd1bWVudHNbbSsyXTtkLmNoaWxkcmVuPWh9aWYoYSYmYS5kZWZhdWx0UHJvcHMpZm9yKGUgaW4gZj1hLmRlZmF1bHRQcm9wcyxmKXZvaWQgMD09PWRbZV0mJihkW2VdPWZbZV0pO3JldHVybnskJHR5cGVvZjpwLHR5cGU6YSxrZXk6ZyxyZWY6ayxwcm9wczpkLF9vd25lcjpKLmN1cnJlbnR9fVxuZnVuY3Rpb24gTihhLGIpe3JldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLGtleTpiLHJlZjphLnJlZixwcm9wczphLnByb3BzLF9vd25lcjphLl9vd25lcn19ZnVuY3Rpb24gTyhhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09cH1mdW5jdGlvbiBlc2NhcGUoYSl7dmFyIGI9e1wiPVwiOlwiPTBcIixcIjpcIjpcIj0yXCJ9O3JldHVyblwiJFwiKyhcIlwiK2EpLnJlcGxhY2UoL1s9Ol0vZyxmdW5jdGlvbihhKXtyZXR1cm4gYlthXX0pfXZhciBQPS9cXC8rL2csUT1bXTtmdW5jdGlvbiBSKGEsYixjLGUpe2lmKFEubGVuZ3RoKXt2YXIgZD1RLnBvcCgpO2QucmVzdWx0PWE7ZC5rZXlQcmVmaXg9YjtkLmZ1bmM9YztkLmNvbnRleHQ9ZTtkLmNvdW50PTA7cmV0dXJuIGR9cmV0dXJue3Jlc3VsdDphLGtleVByZWZpeDpiLGZ1bmM6Yyxjb250ZXh0OmUsY291bnQ6MH19XG5mdW5jdGlvbiBTKGEpe2EucmVzdWx0PW51bGw7YS5rZXlQcmVmaXg9bnVsbDthLmZ1bmM9bnVsbDthLmNvbnRleHQ9bnVsbDthLmNvdW50PTA7MTA+US5sZW5ndGgmJlEucHVzaChhKX1cbmZ1bmN0aW9uIFQoYSxiLGMsZSl7dmFyIGQ9dHlwZW9mIGE7aWYoXCJ1bmRlZmluZWRcIj09PWR8fFwiYm9vbGVhblwiPT09ZClhPW51bGw7dmFyIGc9ITE7aWYobnVsbD09PWEpZz0hMDtlbHNlIHN3aXRjaChkKXtjYXNlIFwic3RyaW5nXCI6Y2FzZSBcIm51bWJlclwiOmc9ITA7YnJlYWs7Y2FzZSBcIm9iamVjdFwiOnN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIHA6Y2FzZSBxOmc9ITB9fWlmKGcpcmV0dXJuIGMoZSxhLFwiXCI9PT1iP1wiLlwiK1UoYSwwKTpiKSwxO2c9MDtiPVwiXCI9PT1iP1wiLlwiOmIrXCI6XCI7aWYoQXJyYXkuaXNBcnJheShhKSlmb3IodmFyIGs9MDtrPGEubGVuZ3RoO2srKyl7ZD1hW2tdO3ZhciBmPWIrVShkLGspO2crPVQoZCxmLGMsZSl9ZWxzZSBpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhP2Y9bnVsbDooZj1CJiZhW0JdfHxhW1wiQEBpdGVyYXRvclwiXSxmPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBmP2Y6bnVsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGYpZm9yKGE9Zi5jYWxsKGEpLGs9XG4wOyEoZD1hLm5leHQoKSkuZG9uZTspZD1kLnZhbHVlLGY9YitVKGQsaysrKSxnKz1UKGQsZixjLGUpO2Vsc2UgaWYoXCJvYmplY3RcIj09PWQpdGhyb3cgYz1cIlwiK2EsRXJyb3IoQygzMSxcIltvYmplY3QgT2JqZWN0XVwiPT09Yz9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGEpLmpvaW4oXCIsIFwiKStcIn1cIjpjLFwiXCIpKTtyZXR1cm4gZ31mdW5jdGlvbiBWKGEsYixjKXtyZXR1cm4gbnVsbD09YT8wOlQoYSxcIlwiLGIsYyl9ZnVuY3Rpb24gVShhLGIpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJm51bGwhPWEua2V5P2VzY2FwZShhLmtleSk6Yi50b1N0cmluZygzNil9ZnVuY3Rpb24gVyhhLGIpe2EuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyl9XG5mdW5jdGlvbiBhYShhLGIsYyl7dmFyIGU9YS5yZXN1bHQsZD1hLmtleVByZWZpeDthPWEuZnVuYy5jYWxsKGEuY29udGV4dCxiLGEuY291bnQrKyk7QXJyYXkuaXNBcnJheShhKT9YKGEsZSxjLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk6bnVsbCE9YSYmKE8oYSkmJihhPU4oYSxkKyghYS5rZXl8fGImJmIua2V5PT09YS5rZXk/XCJcIjooXCJcIithLmtleSkucmVwbGFjZShQLFwiJCYvXCIpK1wiL1wiKStjKSksZS5wdXNoKGEpKX1mdW5jdGlvbiBYKGEsYixjLGUsZCl7dmFyIGc9XCJcIjtudWxsIT1jJiYoZz0oXCJcIitjKS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpO2I9UihiLGcsZSxkKTtWKGEsYWEsYik7UyhiKX12YXIgWT17Y3VycmVudDpudWxsfTtmdW5jdGlvbiBaKCl7dmFyIGE9WS5jdXJyZW50O2lmKG51bGw9PT1hKXRocm93IEVycm9yKEMoMzIxKSk7cmV0dXJuIGF9XG52YXIgYmE9e1JlYWN0Q3VycmVudERpc3BhdGNoZXI6WSxSZWFjdEN1cnJlbnRCYXRjaENvbmZpZzp7c3VzcGVuc2U6bnVsbH0sUmVhY3RDdXJyZW50T3duZXI6SixJc1NvbWVSZW5kZXJlckFjdGluZzp7Y3VycmVudDohMX0sYXNzaWduOmx9O2V4cG9ydHMuQ2hpbGRyZW49e21hcDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTt2YXIgZT1bXTtYKGEsZSxudWxsLGIsYyk7cmV0dXJuIGV9LGZvckVhY2g6ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PWEpcmV0dXJuIGE7Yj1SKG51bGwsbnVsbCxiLGMpO1YoYSxXLGIpO1MoYil9LGNvdW50OmZ1bmN0aW9uKGEpe3JldHVybiBWKGEsZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sbnVsbCl9LHRvQXJyYXk6ZnVuY3Rpb24oYSl7dmFyIGI9W107WChhLGIsbnVsbCxmdW5jdGlvbihhKXtyZXR1cm4gYX0pO3JldHVybiBifSxvbmx5OmZ1bmN0aW9uKGEpe2lmKCFPKGEpKXRocm93IEVycm9yKEMoMTQzKSk7cmV0dXJuIGF9fTtcbmV4cG9ydHMuQ29tcG9uZW50PUY7ZXhwb3J0cy5GcmFnbWVudD1yO2V4cG9ydHMuUHJvZmlsZXI9dTtleHBvcnRzLlB1cmVDb21wb25lbnQ9SDtleHBvcnRzLlN0cmljdE1vZGU9dDtleHBvcnRzLlN1c3BlbnNlPXk7ZXhwb3J0cy5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRD1iYTtcbmV4cG9ydHMuY2xvbmVFbGVtZW50PWZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT09YXx8dm9pZCAwPT09YSl0aHJvdyBFcnJvcihDKDI2NyxhKSk7dmFyIGU9bCh7fSxhLnByb3BzKSxkPWEua2V5LGc9YS5yZWYsaz1hLl9vd25lcjtpZihudWxsIT1iKXt2b2lkIDAhPT1iLnJlZiYmKGc9Yi5yZWYsaz1KLmN1cnJlbnQpO3ZvaWQgMCE9PWIua2V5JiYoZD1cIlwiK2Iua2V5KTtpZihhLnR5cGUmJmEudHlwZS5kZWZhdWx0UHJvcHMpdmFyIGY9YS50eXBlLmRlZmF1bHRQcm9wcztmb3IoaCBpbiBiKUsuY2FsbChiLGgpJiYhTC5oYXNPd25Qcm9wZXJ0eShoKSYmKGVbaF09dm9pZCAwPT09YltoXSYmdm9pZCAwIT09Zj9mW2hdOmJbaF0pfXZhciBoPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09aCllLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGgpe2Y9QXJyYXkoaCk7Zm9yKHZhciBtPTA7bTxoO20rKylmW21dPWFyZ3VtZW50c1ttKzJdO2UuY2hpbGRyZW49Zn1yZXR1cm57JCR0eXBlb2Y6cCx0eXBlOmEudHlwZSxcbmtleTpkLHJlZjpnLHByb3BzOmUsX293bmVyOmt9fTtleHBvcnRzLmNyZWF0ZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXt2b2lkIDA9PT1iJiYoYj1udWxsKTthPXskJHR5cGVvZjp3LF9jYWxjdWxhdGVDaGFuZ2VkQml0czpiLF9jdXJyZW50VmFsdWU6YSxfY3VycmVudFZhbHVlMjphLF90aHJlYWRDb3VudDowLFByb3ZpZGVyOm51bGwsQ29uc3VtZXI6bnVsbH07YS5Qcm92aWRlcj17JCR0eXBlb2Y6dixfY29udGV4dDphfTtyZXR1cm4gYS5Db25zdW1lcj1hfTtleHBvcnRzLmNyZWF0ZUVsZW1lbnQ9TTtleHBvcnRzLmNyZWF0ZUZhY3Rvcnk9ZnVuY3Rpb24oYSl7dmFyIGI9TS5iaW5kKG51bGwsYSk7Yi50eXBlPWE7cmV0dXJuIGJ9O2V4cG9ydHMuY3JlYXRlUmVmPWZ1bmN0aW9uKCl7cmV0dXJue2N1cnJlbnQ6bnVsbH19O2V4cG9ydHMuZm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6eCxyZW5kZXI6YX19O2V4cG9ydHMuaXNWYWxpZEVsZW1lbnQ9TztcbmV4cG9ydHMubGF6eT1mdW5jdGlvbihhKXtyZXR1cm57JCR0eXBlb2Y6QSxfY3RvcjphLF9zdGF0dXM6LTEsX3Jlc3VsdDpudWxsfX07ZXhwb3J0cy5tZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJueyQkdHlwZW9mOnosdHlwZTphLGNvbXBhcmU6dm9pZCAwPT09Yj9udWxsOmJ9fTtleHBvcnRzLnVzZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VDYWxsYmFjayhhLGIpfTtleHBvcnRzLnVzZUNvbnRleHQ9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNvbnRleHQoYSxiKX07ZXhwb3J0cy51c2VEZWJ1Z1ZhbHVlPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVzZUVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlRWZmZWN0KGEsYil9O2V4cG9ydHMudXNlSW1wZXJhdGl2ZUhhbmRsZT1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VJbXBlcmF0aXZlSGFuZGxlKGEsYixjKX07XG5leHBvcnRzLnVzZUxheW91dEVmZmVjdD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTGF5b3V0RWZmZWN0KGEsYil9O2V4cG9ydHMudXNlTWVtbz1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlTWVtbyhhLGIpfTtleHBvcnRzLnVzZVJlZHVjZXI9ZnVuY3Rpb24oYSxiLGMpe3JldHVybiBaKCkudXNlUmVkdWNlcihhLGIsYyl9O2V4cG9ydHMudXNlUmVmPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlUmVmKGEpfTtleHBvcnRzLnVzZVN0YXRlPWZ1bmN0aW9uKGEpe3JldHVybiBaKCkudXNlU3RhdGUoYSl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIi8qKiBAbGljZW5zZSBSZWFjdCB2MTYuMTMuMVxuICogcmVhY3QtZG9tLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuLypcbiBNb2Rlcm5penIgMy4wLjBwcmUgKEN1c3RvbSBCdWlsZCkgfCBNSVRcbiovXG4ndXNlIHN0cmljdCc7dmFyIGFhPXJlcXVpcmUoXCJyZWFjdFwiKSxuPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLHI9cmVxdWlyZShcInNjaGVkdWxlclwiKTtmdW5jdGlvbiB1KGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifWlmKCFhYSl0aHJvdyBFcnJvcih1KDIyNykpO1xuZnVuY3Rpb24gYmEoYSxiLGMsZCxlLGYsZyxoLGspe3ZhciBsPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3VtZW50cywzKTt0cnl7Yi5hcHBseShjLGwpfWNhdGNoKG0pe3RoaXMub25FcnJvcihtKX19dmFyIGRhPSExLGVhPW51bGwsZmE9ITEsaGE9bnVsbCxpYT17b25FcnJvcjpmdW5jdGlvbihhKXtkYT0hMDtlYT1hfX07ZnVuY3Rpb24gamEoYSxiLGMsZCxlLGYsZyxoLGspe2RhPSExO2VhPW51bGw7YmEuYXBwbHkoaWEsYXJndW1lbnRzKX1mdW5jdGlvbiBrYShhLGIsYyxkLGUsZixnLGgsayl7amEuYXBwbHkodGhpcyxhcmd1bWVudHMpO2lmKGRhKXtpZihkYSl7dmFyIGw9ZWE7ZGE9ITE7ZWE9bnVsbH1lbHNlIHRocm93IEVycm9yKHUoMTk4KSk7ZmF8fChmYT0hMCxoYT1sKX19dmFyIGxhPW51bGwsbWE9bnVsbCxuYT1udWxsO1xuZnVuY3Rpb24gb2EoYSxiLGMpe3ZhciBkPWEudHlwZXx8XCJ1bmtub3duLWV2ZW50XCI7YS5jdXJyZW50VGFyZ2V0PW5hKGMpO2thKGQsYix2b2lkIDAsYSk7YS5jdXJyZW50VGFyZ2V0PW51bGx9dmFyIHBhPW51bGwscWE9e307XG5mdW5jdGlvbiByYSgpe2lmKHBhKWZvcih2YXIgYSBpbiBxYSl7dmFyIGI9cWFbYV0sYz1wYS5pbmRleE9mKGEpO2lmKCEoLTE8YykpdGhyb3cgRXJyb3IodSg5NixhKSk7aWYoIXNhW2NdKXtpZighYi5leHRyYWN0RXZlbnRzKXRocm93IEVycm9yKHUoOTcsYSkpO3NhW2NdPWI7Yz1iLmV2ZW50VHlwZXM7Zm9yKHZhciBkIGluIGMpe3ZhciBlPXZvaWQgMDt2YXIgZj1jW2RdLGc9YixoPWQ7aWYodGEuaGFzT3duUHJvcGVydHkoaCkpdGhyb3cgRXJyb3IodSg5OSxoKSk7dGFbaF09Zjt2YXIgaz1mLnBoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzO2lmKGspe2ZvcihlIGluIGspay5oYXNPd25Qcm9wZXJ0eShlKSYmdWEoa1tlXSxnLGgpO2U9ITB9ZWxzZSBmLnJlZ2lzdHJhdGlvbk5hbWU/KHVhKGYucmVnaXN0cmF0aW9uTmFtZSxnLGgpLGU9ITApOmU9ITE7aWYoIWUpdGhyb3cgRXJyb3IodSg5OCxkLGEpKTt9fX19XG5mdW5jdGlvbiB1YShhLGIsYyl7aWYodmFbYV0pdGhyb3cgRXJyb3IodSgxMDAsYSkpO3ZhW2FdPWI7d2FbYV09Yi5ldmVudFR5cGVzW2NdLmRlcGVuZGVuY2llc312YXIgc2E9W10sdGE9e30sdmE9e30sd2E9e307ZnVuY3Rpb24geGEoYSl7dmFyIGI9ITEsYztmb3IoYyBpbiBhKWlmKGEuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPWFbY107aWYoIXFhLmhhc093blByb3BlcnR5KGMpfHxxYVtjXSE9PWQpe2lmKHFhW2NdKXRocm93IEVycm9yKHUoMTAyLGMpKTtxYVtjXT1kO2I9ITB9fWImJnJhKCl9dmFyIHlhPSEoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50fHxcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KSx6YT1udWxsLEFhPW51bGwsQmE9bnVsbDtcbmZ1bmN0aW9uIENhKGEpe2lmKGE9bWEoYSkpe2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiB6YSl0aHJvdyBFcnJvcih1KDI4MCkpO3ZhciBiPWEuc3RhdGVOb2RlO2ImJihiPWxhKGIpLHphKGEuc3RhdGVOb2RlLGEudHlwZSxiKSl9fWZ1bmN0aW9uIERhKGEpe0FhP0JhP0JhLnB1c2goYSk6QmE9W2FdOkFhPWF9ZnVuY3Rpb24gRWEoKXtpZihBYSl7dmFyIGE9QWEsYj1CYTtCYT1BYT1udWxsO0NhKGEpO2lmKGIpZm9yKGE9MDthPGIubGVuZ3RoO2ErKylDYShiW2FdKX19ZnVuY3Rpb24gRmEoYSxiKXtyZXR1cm4gYShiKX1mdW5jdGlvbiBHYShhLGIsYyxkLGUpe3JldHVybiBhKGIsYyxkLGUpfWZ1bmN0aW9uIEhhKCl7fXZhciBJYT1GYSxKYT0hMSxLYT0hMTtmdW5jdGlvbiBMYSgpe2lmKG51bGwhPT1BYXx8bnVsbCE9PUJhKUhhKCksRWEoKX1cbmZ1bmN0aW9uIE1hKGEsYixjKXtpZihLYSlyZXR1cm4gYShiLGMpO0thPSEwO3RyeXtyZXR1cm4gSWEoYSxiLGMpfWZpbmFsbHl7S2E9ITEsTGEoKX19dmFyIE5hPS9eWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXVs6QS1aX2EtelxcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDJGRlxcdTAzNzAtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRFxcLS4wLTlcXHUwMEI3XFx1MDMwMC1cXHUwMzZGXFx1MjAzRi1cXHUyMDQwXSokLyxPYT1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LFBhPXt9LFFhPXt9O1xuZnVuY3Rpb24gUmEoYSl7aWYoT2EuY2FsbChRYSxhKSlyZXR1cm4hMDtpZihPYS5jYWxsKFBhLGEpKXJldHVybiExO2lmKE5hLnRlc3QoYSkpcmV0dXJuIFFhW2FdPSEwO1BhW2FdPSEwO3JldHVybiExfWZ1bmN0aW9uIFNhKGEsYixjLGQpe2lmKG51bGwhPT1jJiYwPT09Yy50eXBlKXJldHVybiExO3N3aXRjaCh0eXBlb2YgYil7Y2FzZSBcImZ1bmN0aW9uXCI6Y2FzZSBcInN5bWJvbFwiOnJldHVybiEwO2Nhc2UgXCJib29sZWFuXCI6aWYoZClyZXR1cm4hMTtpZihudWxsIT09YylyZXR1cm4hYy5hY2NlcHRzQm9vbGVhbnM7YT1hLnRvTG93ZXJDYXNlKCkuc2xpY2UoMCw1KTtyZXR1cm5cImRhdGEtXCIhPT1hJiZcImFyaWEtXCIhPT1hO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVGEoYSxiLGMsZCl7aWYobnVsbD09PWJ8fFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYnx8U2EoYSxiLGMsZCkpcmV0dXJuITA7aWYoZClyZXR1cm4hMTtpZihudWxsIT09Yylzd2l0Y2goYy50eXBlKXtjYXNlIDM6cmV0dXJuIWI7Y2FzZSA0OnJldHVybiExPT09YjtjYXNlIDU6cmV0dXJuIGlzTmFOKGIpO2Nhc2UgNjpyZXR1cm4gaXNOYU4oYil8fDE+Yn1yZXR1cm4hMX1mdW5jdGlvbiB2KGEsYixjLGQsZSxmKXt0aGlzLmFjY2VwdHNCb29sZWFucz0yPT09Ynx8Mz09PWJ8fDQ9PT1iO3RoaXMuYXR0cmlidXRlTmFtZT1kO3RoaXMuYXR0cmlidXRlTmFtZXNwYWNlPWU7dGhpcy5tdXN0VXNlUHJvcGVydHk9Yzt0aGlzLnByb3BlcnR5TmFtZT1hO3RoaXMudHlwZT1iO3RoaXMuc2FuaXRpemVVUkw9Zn12YXIgQz17fTtcblwiY2hpbGRyZW4gZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwgZGVmYXVsdFZhbHVlIGRlZmF1bHRDaGVja2VkIGlubmVySFRNTCBzdXBwcmVzc0NvbnRlbnRFZGl0YWJsZVdhcm5pbmcgc3VwcHJlc3NIeWRyYXRpb25XYXJuaW5nIHN0eWxlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDAsITEsYSxudWxsLCExKX0pO1tbXCJhY2NlcHRDaGFyc2V0XCIsXCJhY2NlcHQtY2hhcnNldFwiXSxbXCJjbGFzc05hbWVcIixcImNsYXNzXCJdLFtcImh0bWxGb3JcIixcImZvclwiXSxbXCJodHRwRXF1aXZcIixcImh0dHAtZXF1aXZcIl1dLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YVswXTtDW2JdPW5ldyB2KGIsMSwhMSxhWzFdLG51bGwsITEpfSk7W1wiY29udGVudEVkaXRhYmxlXCIsXCJkcmFnZ2FibGVcIixcInNwZWxsQ2hlY2tcIixcInZhbHVlXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJhdXRvUmV2ZXJzZVwiLFwiZXh0ZXJuYWxSZXNvdXJjZXNSZXF1aXJlZFwiLFwiZm9jdXNhYmxlXCIsXCJwcmVzZXJ2ZUFscGhhXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDIsITEsYSxudWxsLCExKX0pO1wiYWxsb3dGdWxsU2NyZWVuIGFzeW5jIGF1dG9Gb2N1cyBhdXRvUGxheSBjb250cm9scyBkZWZhdWx0IGRlZmVyIGRpc2FibGVkIGRpc2FibGVQaWN0dXJlSW5QaWN0dXJlIGZvcm1Ob1ZhbGlkYXRlIGhpZGRlbiBsb29wIG5vTW9kdWxlIG5vVmFsaWRhdGUgb3BlbiBwbGF5c0lubGluZSByZWFkT25seSByZXF1aXJlZCByZXZlcnNlZCBzY29wZWQgc2VhbWxlc3MgaXRlbVNjb3BlXCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITEsYS50b0xvd2VyQ2FzZSgpLG51bGwsITEpfSk7XG5bXCJjaGVja2VkXCIsXCJtdWx0aXBsZVwiLFwibXV0ZWRcIixcInNlbGVjdGVkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDMsITAsYSxudWxsLCExKX0pO1tcImNhcHR1cmVcIixcImRvd25sb2FkXCJdLmZvckVhY2goZnVuY3Rpb24oYSl7Q1thXT1uZXcgdihhLDQsITEsYSxudWxsLCExKX0pO1tcImNvbHNcIixcInJvd3NcIixcInNpemVcIixcInNwYW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNiwhMSxhLG51bGwsITEpfSk7W1wicm93U3BhblwiLFwic3RhcnRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTt2YXIgVWE9L1tcXC06XShbYS16XSkvZztmdW5jdGlvbiBWYShhKXtyZXR1cm4gYVsxXS50b1VwcGVyQ2FzZSgpfVxuXCJhY2NlbnQtaGVpZ2h0IGFsaWdubWVudC1iYXNlbGluZSBhcmFiaWMtZm9ybSBiYXNlbGluZS1zaGlmdCBjYXAtaGVpZ2h0IGNsaXAtcGF0aCBjbGlwLXJ1bGUgY29sb3ItaW50ZXJwb2xhdGlvbiBjb2xvci1pbnRlcnBvbGF0aW9uLWZpbHRlcnMgY29sb3ItcHJvZmlsZSBjb2xvci1yZW5kZXJpbmcgZG9taW5hbnQtYmFzZWxpbmUgZW5hYmxlLWJhY2tncm91bmQgZmlsbC1vcGFjaXR5IGZpbGwtcnVsZSBmbG9vZC1jb2xvciBmbG9vZC1vcGFjaXR5IGZvbnQtZmFtaWx5IGZvbnQtc2l6ZSBmb250LXNpemUtYWRqdXN0IGZvbnQtc3RyZXRjaCBmb250LXN0eWxlIGZvbnQtdmFyaWFudCBmb250LXdlaWdodCBnbHlwaC1uYW1lIGdseXBoLW9yaWVudGF0aW9uLWhvcml6b250YWwgZ2x5cGgtb3JpZW50YXRpb24tdmVydGljYWwgaG9yaXotYWR2LXggaG9yaXotb3JpZ2luLXggaW1hZ2UtcmVuZGVyaW5nIGxldHRlci1zcGFjaW5nIGxpZ2h0aW5nLWNvbG9yIG1hcmtlci1lbmQgbWFya2VyLW1pZCBtYXJrZXItc3RhcnQgb3ZlcmxpbmUtcG9zaXRpb24gb3ZlcmxpbmUtdGhpY2tuZXNzIHBhaW50LW9yZGVyIHBhbm9zZS0xIHBvaW50ZXItZXZlbnRzIHJlbmRlcmluZy1pbnRlbnQgc2hhcGUtcmVuZGVyaW5nIHN0b3AtY29sb3Igc3RvcC1vcGFjaXR5IHN0cmlrZXRocm91Z2gtcG9zaXRpb24gc3RyaWtldGhyb3VnaC10aGlja25lc3Mgc3Ryb2tlLWRhc2hhcnJheSBzdHJva2UtZGFzaG9mZnNldCBzdHJva2UtbGluZWNhcCBzdHJva2UtbGluZWpvaW4gc3Ryb2tlLW1pdGVybGltaXQgc3Ryb2tlLW9wYWNpdHkgc3Ryb2tlLXdpZHRoIHRleHQtYW5jaG9yIHRleHQtZGVjb3JhdGlvbiB0ZXh0LXJlbmRlcmluZyB1bmRlcmxpbmUtcG9zaXRpb24gdW5kZXJsaW5lLXRoaWNrbmVzcyB1bmljb2RlLWJpZGkgdW5pY29kZS1yYW5nZSB1bml0cy1wZXItZW0gdi1hbHBoYWJldGljIHYtaGFuZ2luZyB2LWlkZW9ncmFwaGljIHYtbWF0aGVtYXRpY2FsIHZlY3Rvci1lZmZlY3QgdmVydC1hZHYteSB2ZXJ0LW9yaWdpbi14IHZlcnQtb3JpZ2luLXkgd29yZC1zcGFjaW5nIHdyaXRpbmctbW9kZSB4bWxuczp4bGluayB4LWhlaWdodFwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxcblZhKTtDW2JdPW5ldyB2KGIsMSwhMSxhLG51bGwsITEpfSk7XCJ4bGluazphY3R1YXRlIHhsaW5rOmFyY3JvbGUgeGxpbms6cm9sZSB4bGluazpzaG93IHhsaW5rOnRpdGxlIHhsaW5rOnR5cGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rXCIsITEpfSk7W1wieG1sOmJhc2VcIixcInhtbDpsYW5nXCIsXCJ4bWw6c3BhY2VcIl0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hLnJlcGxhY2UoVWEsVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsXCJodHRwOi8vd3d3LnczLm9yZy9YTUwvMTk5OC9uYW1lc3BhY2VcIiwhMSl9KTtbXCJ0YWJJbmRleFwiLFwiY3Jvc3NPcmlnaW5cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbkMueGxpbmtIcmVmPW5ldyB2KFwieGxpbmtIcmVmXCIsMSwhMSxcInhsaW5rOmhyZWZcIixcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMCk7W1wic3JjXCIsXCJocmVmXCIsXCJhY3Rpb25cIixcImZvcm1BY3Rpb25cIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMSwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMCl9KTt2YXIgV2E9YWEuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnREaXNwYXRjaGVyXCIpfHwoV2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcj17Y3VycmVudDpudWxsfSk7V2EuaGFzT3duUHJvcGVydHkoXCJSZWFjdEN1cnJlbnRCYXRjaENvbmZpZ1wiKXx8KFdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnPXtzdXNwZW5zZTpudWxsfSk7XG5mdW5jdGlvbiBYYShhLGIsYyxkKXt2YXIgZT1DLmhhc093blByb3BlcnR5KGIpP0NbYl06bnVsbDt2YXIgZj1udWxsIT09ZT8wPT09ZS50eXBlOmQ/ITE6ISgyPGIubGVuZ3RoKXx8XCJvXCIhPT1iWzBdJiZcIk9cIiE9PWJbMF18fFwiblwiIT09YlsxXSYmXCJOXCIhPT1iWzFdPyExOiEwO2Z8fChUYShiLGMsZSxkKSYmKGM9bnVsbCksZHx8bnVsbD09PWU/UmEoYikmJihudWxsPT09Yz9hLnJlbW92ZUF0dHJpYnV0ZShiKTphLnNldEF0dHJpYnV0ZShiLFwiXCIrYykpOmUubXVzdFVzZVByb3BlcnR5P2FbZS5wcm9wZXJ0eU5hbWVdPW51bGw9PT1jPzM9PT1lLnR5cGU/ITE6XCJcIjpjOihiPWUuYXR0cmlidXRlTmFtZSxkPWUuYXR0cmlidXRlTmFtZXNwYWNlLG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOihlPWUudHlwZSxjPTM9PT1lfHw0PT09ZSYmITA9PT1jP1wiXCI6XCJcIitjLGQ/YS5zZXRBdHRyaWJ1dGVOUyhkLGIsYyk6YS5zZXRBdHRyaWJ1dGUoYixjKSkpKX1cbnZhciBZYT0vXiguKilbXFxcXFxcL10vLEU9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixaYT1FP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLCRhPUU/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixhYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyxiYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxjYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxkYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSxlYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGZiPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxnYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixoYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZVwiKTo2MDExMyxpYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOlxuNjAxMjAsamI9RT9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxrYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5sYXp5XCIpOjYwMTE2LGxiPUU/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLG1iPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBuYihhKXtpZihudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBhKXJldHVybiBudWxsO2E9bWImJmFbbWJdfHxhW1wiQEBpdGVyYXRvclwiXTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYT9hOm51bGx9ZnVuY3Rpb24gb2IoYSl7aWYoLTE9PT1hLl9zdGF0dXMpe2EuX3N0YXR1cz0wO3ZhciBiPWEuX2N0b3I7Yj1iKCk7YS5fcmVzdWx0PWI7Yi50aGVuKGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihiPWIuZGVmYXVsdCxhLl9zdGF0dXM9MSxhLl9yZXN1bHQ9Yil9LGZ1bmN0aW9uKGIpezA9PT1hLl9zdGF0dXMmJihhLl9zdGF0dXM9MixhLl9yZXN1bHQ9Yil9KX19XG5mdW5jdGlvbiBwYihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBhKXJldHVybiBhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fG51bGw7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKXJldHVybiBhO3N3aXRjaChhKXtjYXNlIGFiOnJldHVyblwiRnJhZ21lbnRcIjtjYXNlICRhOnJldHVyblwiUG9ydGFsXCI7Y2FzZSBjYjpyZXR1cm5cIlByb2ZpbGVyXCI7Y2FzZSBiYjpyZXR1cm5cIlN0cmljdE1vZGVcIjtjYXNlIGhiOnJldHVyblwiU3VzcGVuc2VcIjtjYXNlIGliOnJldHVyblwiU3VzcGVuc2VMaXN0XCJ9aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGViOnJldHVyblwiQ29udGV4dC5Db25zdW1lclwiO2Nhc2UgZGI6cmV0dXJuXCJDb250ZXh0LlByb3ZpZGVyXCI7Y2FzZSBnYjp2YXIgYj1hLnJlbmRlcjtiPWIuZGlzcGxheU5hbWV8fGIubmFtZXx8XCJcIjtyZXR1cm4gYS5kaXNwbGF5TmFtZXx8KFwiXCIhPT1iP1wiRm9yd2FyZFJlZihcIitiK1wiKVwiOlxuXCJGb3J3YXJkUmVmXCIpO2Nhc2UgamI6cmV0dXJuIHBiKGEudHlwZSk7Y2FzZSBsYjpyZXR1cm4gcGIoYS5yZW5kZXIpO2Nhc2Uga2I6aWYoYT0xPT09YS5fc3RhdHVzP2EuX3Jlc3VsdDpudWxsKXJldHVybiBwYihhKX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBxYihhKXt2YXIgYj1cIlwiO2Rve2E6c3dpdGNoKGEudGFnKXtjYXNlIDM6Y2FzZSA0OmNhc2UgNjpjYXNlIDc6Y2FzZSAxMDpjYXNlIDk6dmFyIGM9XCJcIjticmVhayBhO2RlZmF1bHQ6dmFyIGQ9YS5fZGVidWdPd25lcixlPWEuX2RlYnVnU291cmNlLGY9cGIoYS50eXBlKTtjPW51bGw7ZCYmKGM9cGIoZC50eXBlKSk7ZD1mO2Y9XCJcIjtlP2Y9XCIgKGF0IFwiK2UuZmlsZU5hbWUucmVwbGFjZShZYSxcIlwiKStcIjpcIitlLmxpbmVOdW1iZXIrXCIpXCI6YyYmKGY9XCIgKGNyZWF0ZWQgYnkgXCIrYytcIilcIik7Yz1cIlxcbiAgICBpbiBcIisoZHx8XCJVbmtub3duXCIpK2Z9Yis9YzthPWEucmV0dXJufXdoaWxlKGEpO3JldHVybiBifVxuZnVuY3Rpb24gcmIoYSl7c3dpdGNoKHR5cGVvZiBhKXtjYXNlIFwiYm9vbGVhblwiOmNhc2UgXCJudW1iZXJcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcInN0cmluZ1wiOmNhc2UgXCJ1bmRlZmluZWRcIjpyZXR1cm4gYTtkZWZhdWx0OnJldHVyblwiXCJ9fWZ1bmN0aW9uIHNiKGEpe3ZhciBiPWEudHlwZTtyZXR1cm4oYT1hLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09YS50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09Ynx8XCJyYWRpb1wiPT09Yil9XG5mdW5jdGlvbiB0YihhKXt2YXIgYj1zYihhKT9cImNoZWNrZWRcIjpcInZhbHVlXCIsYz1PYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKGEuY29uc3RydWN0b3IucHJvdG90eXBlLGIpLGQ9XCJcIithW2JdO2lmKCFhLmhhc093blByb3BlcnR5KGIpJiZcInVuZGVmaW5lZFwiIT09dHlwZW9mIGMmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmdldCYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuc2V0KXt2YXIgZT1jLmdldCxmPWMuc2V0O09iamVjdC5kZWZpbmVQcm9wZXJ0eShhLGIse2NvbmZpZ3VyYWJsZTohMCxnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gZS5jYWxsKHRoaXMpfSxzZXQ6ZnVuY3Rpb24oYSl7ZD1cIlwiK2E7Zi5jYWxsKHRoaXMsYSl9fSk7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7ZW51bWVyYWJsZTpjLmVudW1lcmFibGV9KTtyZXR1cm57Z2V0VmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gZH0sc2V0VmFsdWU6ZnVuY3Rpb24oYSl7ZD1cIlwiK2F9LHN0b3BUcmFja2luZzpmdW5jdGlvbigpe2EuX3ZhbHVlVHJhY2tlcj1cbm51bGw7ZGVsZXRlIGFbYl19fX19ZnVuY3Rpb24geGIoYSl7YS5fdmFsdWVUcmFja2VyfHwoYS5fdmFsdWVUcmFja2VyPXRiKGEpKX1mdW5jdGlvbiB5YihhKXtpZighYSlyZXR1cm4hMTt2YXIgYj1hLl92YWx1ZVRyYWNrZXI7aWYoIWIpcmV0dXJuITA7dmFyIGM9Yi5nZXRWYWx1ZSgpO3ZhciBkPVwiXCI7YSYmKGQ9c2IoYSk/YS5jaGVja2VkP1widHJ1ZVwiOlwiZmFsc2VcIjphLnZhbHVlKTthPWQ7cmV0dXJuIGEhPT1jPyhiLnNldFZhbHVlKGEpLCEwKTohMX1mdW5jdGlvbiB6YihhLGIpe3ZhciBjPWIuY2hlY2tlZDtyZXR1cm4gbih7fSxiLHtkZWZhdWx0Q2hlY2tlZDp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCx2YWx1ZTp2b2lkIDAsY2hlY2tlZDpudWxsIT1jP2M6YS5fd3JhcHBlclN0YXRlLmluaXRpYWxDaGVja2VkfSl9XG5mdW5jdGlvbiBBYihhLGIpe3ZhciBjPW51bGw9PWIuZGVmYXVsdFZhbHVlP1wiXCI6Yi5kZWZhdWx0VmFsdWUsZD1udWxsIT1iLmNoZWNrZWQ/Yi5jaGVja2VkOmIuZGVmYXVsdENoZWNrZWQ7Yz1yYihudWxsIT1iLnZhbHVlP2IudmFsdWU6Yyk7YS5fd3JhcHBlclN0YXRlPXtpbml0aWFsQ2hlY2tlZDpkLGluaXRpYWxWYWx1ZTpjLGNvbnRyb2xsZWQ6XCJjaGVja2JveFwiPT09Yi50eXBlfHxcInJhZGlvXCI9PT1iLnR5cGU/bnVsbCE9Yi5jaGVja2VkOm51bGwhPWIudmFsdWV9fWZ1bmN0aW9uIEJiKGEsYil7Yj1iLmNoZWNrZWQ7bnVsbCE9YiYmWGEoYSxcImNoZWNrZWRcIixiLCExKX1cbmZ1bmN0aW9uIENiKGEsYil7QmIoYSxiKTt2YXIgYz1yYihiLnZhbHVlKSxkPWIudHlwZTtpZihudWxsIT1jKWlmKFwibnVtYmVyXCI9PT1kKXtpZigwPT09YyYmXCJcIj09PWEudmFsdWV8fGEudmFsdWUhPWMpYS52YWx1ZT1cIlwiK2N9ZWxzZSBhLnZhbHVlIT09XCJcIitjJiYoYS52YWx1ZT1cIlwiK2MpO2Vsc2UgaWYoXCJzdWJtaXRcIj09PWR8fFwicmVzZXRcIj09PWQpe2EucmVtb3ZlQXR0cmlidXRlKFwidmFsdWVcIik7cmV0dXJufWIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKT9EYihhLGIudHlwZSxjKTpiLmhhc093blByb3BlcnR5KFwiZGVmYXVsdFZhbHVlXCIpJiZEYihhLGIudHlwZSxyYihiLmRlZmF1bHRWYWx1ZSkpO251bGw9PWIuY2hlY2tlZCYmbnVsbCE9Yi5kZWZhdWx0Q2hlY2tlZCYmKGEuZGVmYXVsdENoZWNrZWQ9ISFiLmRlZmF1bHRDaGVja2VkKX1cbmZ1bmN0aW9uIEViKGEsYixjKXtpZihiLmhhc093blByb3BlcnR5KFwidmFsdWVcIil8fGIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikpe3ZhciBkPWIudHlwZTtpZighKFwic3VibWl0XCIhPT1kJiZcInJlc2V0XCIhPT1kfHx2b2lkIDAhPT1iLnZhbHVlJiZudWxsIT09Yi52YWx1ZSkpcmV0dXJuO2I9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlO2N8fGI9PT1hLnZhbHVlfHwoYS52YWx1ZT1iKTthLmRlZmF1bHRWYWx1ZT1ifWM9YS5uYW1lO1wiXCIhPT1jJiYoYS5uYW1lPVwiXCIpO2EuZGVmYXVsdENoZWNrZWQ9ISFhLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWQ7XCJcIiE9PWMmJihhLm5hbWU9Yyl9XG5mdW5jdGlvbiBEYihhLGIsYyl7aWYoXCJudW1iZXJcIiE9PWJ8fGEub3duZXJEb2N1bWVudC5hY3RpdmVFbGVtZW50IT09YSludWxsPT1jP2EuZGVmYXVsdFZhbHVlPVwiXCIrYS5fd3JhcHBlclN0YXRlLmluaXRpYWxWYWx1ZTphLmRlZmF1bHRWYWx1ZSE9PVwiXCIrYyYmKGEuZGVmYXVsdFZhbHVlPVwiXCIrYyl9ZnVuY3Rpb24gRmIoYSl7dmFyIGI9XCJcIjthYS5DaGlsZHJlbi5mb3JFYWNoKGEsZnVuY3Rpb24oYSl7bnVsbCE9YSYmKGIrPWEpfSk7cmV0dXJuIGJ9ZnVuY3Rpb24gR2IoYSxiKXthPW4oe2NoaWxkcmVuOnZvaWQgMH0sYik7aWYoYj1GYihiLmNoaWxkcmVuKSlhLmNoaWxkcmVuPWI7cmV0dXJuIGF9XG5mdW5jdGlvbiBIYihhLGIsYyxkKXthPWEub3B0aW9ucztpZihiKXtiPXt9O2Zvcih2YXIgZT0wO2U8Yy5sZW5ndGg7ZSsrKWJbXCIkXCIrY1tlXV09ITA7Zm9yKGM9MDtjPGEubGVuZ3RoO2MrKyllPWIuaGFzT3duUHJvcGVydHkoXCIkXCIrYVtjXS52YWx1ZSksYVtjXS5zZWxlY3RlZCE9PWUmJihhW2NdLnNlbGVjdGVkPWUpLGUmJmQmJihhW2NdLmRlZmF1bHRTZWxlY3RlZD0hMCl9ZWxzZXtjPVwiXCIrcmIoYyk7Yj1udWxsO2ZvcihlPTA7ZTxhLmxlbmd0aDtlKyspe2lmKGFbZV0udmFsdWU9PT1jKXthW2VdLnNlbGVjdGVkPSEwO2QmJihhW2VdLmRlZmF1bHRTZWxlY3RlZD0hMCk7cmV0dXJufW51bGwhPT1ifHxhW2VdLmRpc2FibGVkfHwoYj1hW2VdKX1udWxsIT09YiYmKGIuc2VsZWN0ZWQ9ITApfX1cbmZ1bmN0aW9uIEliKGEsYil7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl0aHJvdyBFcnJvcih1KDkxKSk7cmV0dXJuIG4oe30sYix7dmFsdWU6dm9pZCAwLGRlZmF1bHRWYWx1ZTp2b2lkIDAsY2hpbGRyZW46XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlfSl9ZnVuY3Rpb24gSmIoYSxiKXt2YXIgYz1iLnZhbHVlO2lmKG51bGw9PWMpe2M9Yi5jaGlsZHJlbjtiPWIuZGVmYXVsdFZhbHVlO2lmKG51bGwhPWMpe2lmKG51bGwhPWIpdGhyb3cgRXJyb3IodSg5MikpO2lmKEFycmF5LmlzQXJyYXkoYykpe2lmKCEoMT49Yy5sZW5ndGgpKXRocm93IEVycm9yKHUoOTMpKTtjPWNbMF19Yj1jfW51bGw9PWImJihiPVwiXCIpO2M9Yn1hLl93cmFwcGVyU3RhdGU9e2luaXRpYWxWYWx1ZTpyYihjKX19XG5mdW5jdGlvbiBLYihhLGIpe3ZhciBjPXJiKGIudmFsdWUpLGQ9cmIoYi5kZWZhdWx0VmFsdWUpO251bGwhPWMmJihjPVwiXCIrYyxjIT09YS52YWx1ZSYmKGEudmFsdWU9YyksbnVsbD09Yi5kZWZhdWx0VmFsdWUmJmEuZGVmYXVsdFZhbHVlIT09YyYmKGEuZGVmYXVsdFZhbHVlPWMpKTtudWxsIT1kJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitkKX1mdW5jdGlvbiBMYihhKXt2YXIgYj1hLnRleHRDb250ZW50O2I9PT1hLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlJiZcIlwiIT09YiYmbnVsbCE9PWImJihhLnZhbHVlPWIpfXZhciBNYj17aHRtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIixtYXRobWw6XCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCIsc3ZnOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIn07XG5mdW5jdGlvbiBOYihhKXtzd2l0Y2goYSl7Y2FzZSBcInN2Z1wiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIjtjYXNlIFwibWF0aFwiOnJldHVyblwiaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTFwiO2RlZmF1bHQ6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCJ9fWZ1bmN0aW9uIE9iKGEsYil7cmV0dXJuIG51bGw9PWF8fFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiPT09YT9OYihiKTpcImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCI9PT1hJiZcImZvcmVpZ25PYmplY3RcIj09PWI/XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI6YX1cbnZhciBQYixRYj1mdW5jdGlvbihhKXtyZXR1cm5cInVuZGVmaW5lZFwiIT09dHlwZW9mIE1TQXBwJiZNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbj9mdW5jdGlvbihiLGMsZCxlKXtNU0FwcC5leGVjVW5zYWZlTG9jYWxGdW5jdGlvbihmdW5jdGlvbigpe3JldHVybiBhKGIsYyxkLGUpfSl9OmF9KGZ1bmN0aW9uKGEsYil7aWYoYS5uYW1lc3BhY2VVUkkhPT1NYi5zdmd8fFwiaW5uZXJIVE1MXCJpbiBhKWEuaW5uZXJIVE1MPWI7ZWxzZXtQYj1QYnx8ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtQYi5pbm5lckhUTUw9XCI8c3ZnPlwiK2IudmFsdWVPZigpLnRvU3RyaW5nKCkrXCI8L3N2Zz5cIjtmb3IoYj1QYi5maXJzdENoaWxkO2EuZmlyc3RDaGlsZDspYS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpO2Zvcig7Yi5maXJzdENoaWxkOylhLmFwcGVuZENoaWxkKGIuZmlyc3RDaGlsZCl9fSk7XG5mdW5jdGlvbiBSYihhLGIpe2lmKGIpe3ZhciBjPWEuZmlyc3RDaGlsZDtpZihjJiZjPT09YS5sYXN0Q2hpbGQmJjM9PT1jLm5vZGVUeXBlKXtjLm5vZGVWYWx1ZT1iO3JldHVybn19YS50ZXh0Q29udGVudD1ifWZ1bmN0aW9uIFNiKGEsYil7dmFyIGM9e307Y1thLnRvTG93ZXJDYXNlKCldPWIudG9Mb3dlckNhc2UoKTtjW1wiV2Via2l0XCIrYV09XCJ3ZWJraXRcIitiO2NbXCJNb3pcIithXT1cIm1velwiK2I7cmV0dXJuIGN9dmFyIFRiPXthbmltYXRpb25lbmQ6U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkVuZFwiKSxhbmltYXRpb25pdGVyYXRpb246U2IoXCJBbmltYXRpb25cIixcIkFuaW1hdGlvbkl0ZXJhdGlvblwiKSxhbmltYXRpb25zdGFydDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uU3RhcnRcIiksdHJhbnNpdGlvbmVuZDpTYihcIlRyYW5zaXRpb25cIixcIlRyYW5zaXRpb25FbmRcIil9LFViPXt9LFZiPXt9O1xueWEmJihWYj1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFwiQW5pbWF0aW9uRXZlbnRcImluIHdpbmRvd3x8KGRlbGV0ZSBUYi5hbmltYXRpb25lbmQuYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25pdGVyYXRpb24uYW5pbWF0aW9uLGRlbGV0ZSBUYi5hbmltYXRpb25zdGFydC5hbmltYXRpb24pLFwiVHJhbnNpdGlvbkV2ZW50XCJpbiB3aW5kb3d8fGRlbGV0ZSBUYi50cmFuc2l0aW9uZW5kLnRyYW5zaXRpb24pO2Z1bmN0aW9uIFdiKGEpe2lmKFViW2FdKXJldHVybiBVYlthXTtpZighVGJbYV0pcmV0dXJuIGE7dmFyIGI9VGJbYV0sYztmb3IoYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykmJmMgaW4gVmIpcmV0dXJuIFViW2FdPWJbY107cmV0dXJuIGF9XG52YXIgWGI9V2IoXCJhbmltYXRpb25lbmRcIiksWWI9V2IoXCJhbmltYXRpb25pdGVyYXRpb25cIiksWmI9V2IoXCJhbmltYXRpb25zdGFydFwiKSwkYj1XYihcInRyYW5zaXRpb25lbmRcIiksYWM9XCJhYm9ydCBjYW5wbGF5IGNhbnBsYXl0aHJvdWdoIGR1cmF0aW9uY2hhbmdlIGVtcHRpZWQgZW5jcnlwdGVkIGVuZGVkIGVycm9yIGxvYWRlZGRhdGEgbG9hZGVkbWV0YWRhdGEgbG9hZHN0YXJ0IHBhdXNlIHBsYXkgcGxheWluZyBwcm9ncmVzcyByYXRlY2hhbmdlIHNlZWtlZCBzZWVraW5nIHN0YWxsZWQgc3VzcGVuZCB0aW1ldXBkYXRlIHZvbHVtZWNoYW5nZSB3YWl0aW5nXCIuc3BsaXQoXCIgXCIpLGJjPW5ldyAoXCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtNYXA/V2Vha01hcDpNYXApO2Z1bmN0aW9uIGNjKGEpe3ZhciBiPWJjLmdldChhKTt2b2lkIDA9PT1iJiYoYj1uZXcgTWFwLGJjLnNldChhLGIpKTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGRjKGEpe3ZhciBiPWEsYz1hO2lmKGEuYWx0ZXJuYXRlKWZvcig7Yi5yZXR1cm47KWI9Yi5yZXR1cm47ZWxzZXthPWI7ZG8gYj1hLDAhPT0oYi5lZmZlY3RUYWcmMTAyNikmJihjPWIucmV0dXJuKSxhPWIucmV0dXJuO3doaWxlKGEpfXJldHVybiAzPT09Yi50YWc/YzpudWxsfWZ1bmN0aW9uIGVjKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWEubWVtb2l6ZWRTdGF0ZTtudWxsPT09YiYmKGE9YS5hbHRlcm5hdGUsbnVsbCE9PWEmJihiPWEubWVtb2l6ZWRTdGF0ZSkpO2lmKG51bGwhPT1iKXJldHVybiBiLmRlaHlkcmF0ZWR9cmV0dXJuIG51bGx9ZnVuY3Rpb24gZmMoYSl7aWYoZGMoYSkhPT1hKXRocm93IEVycm9yKHUoMTg4KSk7fVxuZnVuY3Rpb24gZ2MoYSl7dmFyIGI9YS5hbHRlcm5hdGU7aWYoIWIpe2I9ZGMoYSk7aWYobnVsbD09PWIpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYiE9PWE/bnVsbDphfWZvcih2YXIgYz1hLGQ9Yjs7KXt2YXIgZT1jLnJldHVybjtpZihudWxsPT09ZSlicmVhazt2YXIgZj1lLmFsdGVybmF0ZTtpZihudWxsPT09Zil7ZD1lLnJldHVybjtpZihudWxsIT09ZCl7Yz1kO2NvbnRpbnVlfWJyZWFrfWlmKGUuY2hpbGQ9PT1mLmNoaWxkKXtmb3IoZj1lLmNoaWxkO2Y7KXtpZihmPT09YylyZXR1cm4gZmMoZSksYTtpZihmPT09ZClyZXR1cm4gZmMoZSksYjtmPWYuc2libGluZ310aHJvdyBFcnJvcih1KDE4OCkpO31pZihjLnJldHVybiE9PWQucmV0dXJuKWM9ZSxkPWY7ZWxzZXtmb3IodmFyIGc9ITEsaD1lLmNoaWxkO2g7KXtpZihoPT09Yyl7Zz0hMDtjPWU7ZD1mO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZTtjPWY7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpe2ZvcihoPWYuY2hpbGQ7aDspe2lmKGg9PT1cbmMpe2c9ITA7Yz1mO2Q9ZTticmVha31pZihoPT09ZCl7Zz0hMDtkPWY7Yz1lO2JyZWFrfWg9aC5zaWJsaW5nfWlmKCFnKXRocm93IEVycm9yKHUoMTg5KSk7fX1pZihjLmFsdGVybmF0ZSE9PWQpdGhyb3cgRXJyb3IodSgxOTApKTt9aWYoMyE9PWMudGFnKXRocm93IEVycm9yKHUoMTg4KSk7cmV0dXJuIGMuc3RhdGVOb2RlLmN1cnJlbnQ9PT1jP2E6Yn1mdW5jdGlvbiBoYyhhKXthPWdjKGEpO2lmKCFhKXJldHVybiBudWxsO2Zvcih2YXIgYj1hOzspe2lmKDU9PT1iLnRhZ3x8Nj09PWIudGFnKXJldHVybiBiO2lmKGIuY2hpbGQpYi5jaGlsZC5yZXR1cm49YixiPWIuY2hpbGQ7ZWxzZXtpZihiPT09YSlicmVhaztmb3IoOyFiLnNpYmxpbmc7KXtpZighYi5yZXR1cm58fGIucmV0dXJuPT09YSlyZXR1cm4gbnVsbDtiPWIucmV0dXJufWIuc2libGluZy5yZXR1cm49Yi5yZXR1cm47Yj1iLnNpYmxpbmd9fXJldHVybiBudWxsfVxuZnVuY3Rpb24gaWMoYSxiKXtpZihudWxsPT1iKXRocm93IEVycm9yKHUoMzApKTtpZihudWxsPT1hKXJldHVybiBiO2lmKEFycmF5LmlzQXJyYXkoYSkpe2lmKEFycmF5LmlzQXJyYXkoYikpcmV0dXJuIGEucHVzaC5hcHBseShhLGIpLGE7YS5wdXNoKGIpO3JldHVybiBhfXJldHVybiBBcnJheS5pc0FycmF5KGIpP1thXS5jb25jYXQoYik6W2EsYl19ZnVuY3Rpb24gamMoYSxiLGMpe0FycmF5LmlzQXJyYXkoYSk/YS5mb3JFYWNoKGIsYyk6YSYmYi5jYWxsKGMsYSl9dmFyIGtjPW51bGw7XG5mdW5jdGlvbiBsYyhhKXtpZihhKXt2YXIgYj1hLl9kaXNwYXRjaExpc3RlbmVycyxjPWEuX2Rpc3BhdGNoSW5zdGFuY2VzO2lmKEFycmF5LmlzQXJyYXkoYikpZm9yKHZhciBkPTA7ZDxiLmxlbmd0aCYmIWEuaXNQcm9wYWdhdGlvblN0b3BwZWQoKTtkKyspb2EoYSxiW2RdLGNbZF0pO2Vsc2UgYiYmb2EoYSxiLGMpO2EuX2Rpc3BhdGNoTGlzdGVuZXJzPW51bGw7YS5fZGlzcGF0Y2hJbnN0YW5jZXM9bnVsbDthLmlzUGVyc2lzdGVudCgpfHxhLmNvbnN0cnVjdG9yLnJlbGVhc2UoYSl9fWZ1bmN0aW9uIG1jKGEpe251bGwhPT1hJiYoa2M9aWMoa2MsYSkpO2E9a2M7a2M9bnVsbDtpZihhKXtqYyhhLGxjKTtpZihrYyl0aHJvdyBFcnJvcih1KDk1KSk7aWYoZmEpdGhyb3cgYT1oYSxmYT0hMSxoYT1udWxsLGE7fX1cbmZ1bmN0aW9uIG5jKGEpe2E9YS50YXJnZXR8fGEuc3JjRWxlbWVudHx8d2luZG93O2EuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQmJihhPWEuY29ycmVzcG9uZGluZ1VzZUVsZW1lbnQpO3JldHVybiAzPT09YS5ub2RlVHlwZT9hLnBhcmVudE5vZGU6YX1mdW5jdGlvbiBvYyhhKXtpZigheWEpcmV0dXJuITE7YT1cIm9uXCIrYTt2YXIgYj1hIGluIGRvY3VtZW50O2J8fChiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksYi5zZXRBdHRyaWJ1dGUoYSxcInJldHVybjtcIiksYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgYlthXSk7cmV0dXJuIGJ9dmFyIHBjPVtdO2Z1bmN0aW9uIHFjKGEpe2EudG9wTGV2ZWxUeXBlPW51bGw7YS5uYXRpdmVFdmVudD1udWxsO2EudGFyZ2V0SW5zdD1udWxsO2EuYW5jZXN0b3JzLmxlbmd0aD0wOzEwPnBjLmxlbmd0aCYmcGMucHVzaChhKX1cbmZ1bmN0aW9uIHJjKGEsYixjLGQpe2lmKHBjLmxlbmd0aCl7dmFyIGU9cGMucG9wKCk7ZS50b3BMZXZlbFR5cGU9YTtlLmV2ZW50U3lzdGVtRmxhZ3M9ZDtlLm5hdGl2ZUV2ZW50PWI7ZS50YXJnZXRJbnN0PWM7cmV0dXJuIGV9cmV0dXJue3RvcExldmVsVHlwZTphLGV2ZW50U3lzdGVtRmxhZ3M6ZCxuYXRpdmVFdmVudDpiLHRhcmdldEluc3Q6YyxhbmNlc3RvcnM6W119fVxuZnVuY3Rpb24gc2MoYSl7dmFyIGI9YS50YXJnZXRJbnN0LGM9Yjtkb3tpZighYyl7YS5hbmNlc3RvcnMucHVzaChjKTticmVha312YXIgZD1jO2lmKDM9PT1kLnRhZylkPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87ZWxzZXtmb3IoO2QucmV0dXJuOylkPWQucmV0dXJuO2Q9MyE9PWQudGFnP251bGw6ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mb31pZighZClicmVhaztiPWMudGFnOzUhPT1iJiY2IT09Ynx8YS5hbmNlc3RvcnMucHVzaChjKTtjPXRjKGQpfXdoaWxlKGMpO2ZvcihjPTA7YzxhLmFuY2VzdG9ycy5sZW5ndGg7YysrKXtiPWEuYW5jZXN0b3JzW2NdO3ZhciBlPW5jKGEubmF0aXZlRXZlbnQpO2Q9YS50b3BMZXZlbFR5cGU7dmFyIGY9YS5uYXRpdmVFdmVudCxnPWEuZXZlbnRTeXN0ZW1GbGFnczswPT09YyYmKGd8PTY0KTtmb3IodmFyIGg9bnVsbCxrPTA7azxzYS5sZW5ndGg7aysrKXt2YXIgbD1zYVtrXTtsJiYobD1sLmV4dHJhY3RFdmVudHMoZCxiLGYsZSxnKSkmJihoPVxuaWMoaCxsKSl9bWMoaCl9fWZ1bmN0aW9uIHVjKGEsYixjKXtpZighYy5oYXMoYSkpe3N3aXRjaChhKXtjYXNlIFwic2Nyb2xsXCI6dmMoYixcInNjcm9sbFwiLCEwKTticmVhaztjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOnZjKGIsXCJmb2N1c1wiLCEwKTt2YyhiLFwiYmx1clwiLCEwKTtjLnNldChcImJsdXJcIixudWxsKTtjLnNldChcImZvY3VzXCIsbnVsbCk7YnJlYWs7Y2FzZSBcImNhbmNlbFwiOmNhc2UgXCJjbG9zZVwiOm9jKGEpJiZ2YyhiLGEsITApO2JyZWFrO2Nhc2UgXCJpbnZhbGlkXCI6Y2FzZSBcInN1Ym1pdFwiOmNhc2UgXCJyZXNldFwiOmJyZWFrO2RlZmF1bHQ6LTE9PT1hYy5pbmRleE9mKGEpJiZGKGEsYil9Yy5zZXQoYSxudWxsKX19XG52YXIgd2MseGMseWMsemM9ITEsQWM9W10sQmM9bnVsbCxDYz1udWxsLERjPW51bGwsRWM9bmV3IE1hcCxGYz1uZXcgTWFwLEdjPVtdLEhjPVwibW91c2Vkb3duIG1vdXNldXAgdG91Y2hjYW5jZWwgdG91Y2hlbmQgdG91Y2hzdGFydCBhdXhjbGljayBkYmxjbGljayBwb2ludGVyY2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJ1cCBkcmFnZW5kIGRyYWdzdGFydCBkcm9wIGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBpbnB1dCB0ZXh0SW5wdXQgY2xvc2UgY2FuY2VsIGNvcHkgY3V0IHBhc3RlIGNsaWNrIGNoYW5nZSBjb250ZXh0bWVudSByZXNldCBzdWJtaXRcIi5zcGxpdChcIiBcIiksSWM9XCJmb2N1cyBibHVyIGRyYWdlbnRlciBkcmFnbGVhdmUgbW91c2VvdmVyIG1vdXNlb3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJvdXQgZ290cG9pbnRlcmNhcHR1cmUgbG9zdHBvaW50ZXJjYXB0dXJlXCIuc3BsaXQoXCIgXCIpO1xuZnVuY3Rpb24gSmMoYSxiKXt2YXIgYz1jYyhiKTtIYy5mb3JFYWNoKGZ1bmN0aW9uKGEpe3VjKGEsYixjKX0pO0ljLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSl9ZnVuY3Rpb24gS2MoYSxiLGMsZCxlKXtyZXR1cm57YmxvY2tlZE9uOmEsdG9wTGV2ZWxUeXBlOmIsZXZlbnRTeXN0ZW1GbGFnczpjfDMyLG5hdGl2ZUV2ZW50OmUsY29udGFpbmVyOmR9fVxuZnVuY3Rpb24gTGMoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImZvY3VzXCI6Y2FzZSBcImJsdXJcIjpCYz1udWxsO2JyZWFrO2Nhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Q2M9bnVsbDticmVhaztjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcIm1vdXNlb3V0XCI6RGM9bnVsbDticmVhaztjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcm91dFwiOkVjLmRlbGV0ZShiLnBvaW50ZXJJZCk7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOkZjLmRlbGV0ZShiLnBvaW50ZXJJZCl9fWZ1bmN0aW9uIE1jKGEsYixjLGQsZSxmKXtpZihudWxsPT09YXx8YS5uYXRpdmVFdmVudCE9PWYpcmV0dXJuIGE9S2MoYixjLGQsZSxmKSxudWxsIT09YiYmKGI9TmMoYiksbnVsbCE9PWImJnhjKGIpKSxhO2EuZXZlbnRTeXN0ZW1GbGFnc3w9ZDtyZXR1cm4gYX1cbmZ1bmN0aW9uIE9jKGEsYixjLGQsZSl7c3dpdGNoKGIpe2Nhc2UgXCJmb2N1c1wiOnJldHVybiBCYz1NYyhCYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJkcmFnZW50ZXJcIjpyZXR1cm4gQ2M9TWMoQ2MsYSxiLGMsZCxlKSwhMDtjYXNlIFwibW91c2VvdmVyXCI6cmV0dXJuIERjPU1jKERjLGEsYixjLGQsZSksITA7Y2FzZSBcInBvaW50ZXJvdmVyXCI6dmFyIGY9ZS5wb2ludGVySWQ7RWMuc2V0KGYsTWMoRWMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpO3JldHVybiEwO2Nhc2UgXCJnb3Rwb2ludGVyY2FwdHVyZVwiOnJldHVybiBmPWUucG9pbnRlcklkLEZjLnNldChmLE1jKEZjLmdldChmKXx8bnVsbCxhLGIsYyxkLGUpKSwhMH1yZXR1cm4hMX1cbmZ1bmN0aW9uIFBjKGEpe3ZhciBiPXRjKGEudGFyZ2V0KTtpZihudWxsIT09Yil7dmFyIGM9ZGMoYik7aWYobnVsbCE9PWMpaWYoYj1jLnRhZywxMz09PWIpe2lmKGI9ZWMoYyksbnVsbCE9PWIpe2EuYmxvY2tlZE9uPWI7ci51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkoYS5wcmlvcml0eSxmdW5jdGlvbigpe3ljKGMpfSk7cmV0dXJufX1lbHNlIGlmKDM9PT1iJiZjLnN0YXRlTm9kZS5oeWRyYXRlKXthLmJsb2NrZWRPbj0zPT09Yy50YWc/Yy5zdGF0ZU5vZGUuY29udGFpbmVySW5mbzpudWxsO3JldHVybn19YS5ibG9ja2VkT249bnVsbH1mdW5jdGlvbiBRYyhhKXtpZihudWxsIT09YS5ibG9ja2VkT24pcmV0dXJuITE7dmFyIGI9UmMoYS50b3BMZXZlbFR5cGUsYS5ldmVudFN5c3RlbUZsYWdzLGEuY29udGFpbmVyLGEubmF0aXZlRXZlbnQpO2lmKG51bGwhPT1iKXt2YXIgYz1OYyhiKTtudWxsIT09YyYmeGMoYyk7YS5ibG9ja2VkT249YjtyZXR1cm4hMX1yZXR1cm4hMH1cbmZ1bmN0aW9uIFNjKGEsYixjKXtRYyhhKSYmYy5kZWxldGUoYil9ZnVuY3Rpb24gVGMoKXtmb3IoemM9ITE7MDxBYy5sZW5ndGg7KXt2YXIgYT1BY1swXTtpZihudWxsIT09YS5ibG9ja2VkT24pe2E9TmMoYS5ibG9ja2VkT24pO251bGwhPT1hJiZ3YyhhKTticmVha312YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7bnVsbCE9PWI/YS5ibG9ja2VkT249YjpBYy5zaGlmdCgpfW51bGwhPT1CYyYmUWMoQmMpJiYoQmM9bnVsbCk7bnVsbCE9PUNjJiZRYyhDYykmJihDYz1udWxsKTtudWxsIT09RGMmJlFjKERjKSYmKERjPW51bGwpO0VjLmZvckVhY2goU2MpO0ZjLmZvckVhY2goU2MpfWZ1bmN0aW9uIFVjKGEsYil7YS5ibG9ja2VkT249PT1iJiYoYS5ibG9ja2VkT249bnVsbCx6Y3x8KHpjPSEwLHIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayhyLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFRjKSkpfVxuZnVuY3Rpb24gVmMoYSl7ZnVuY3Rpb24gYihiKXtyZXR1cm4gVWMoYixhKX1pZigwPEFjLmxlbmd0aCl7VWMoQWNbMF0sYSk7Zm9yKHZhciBjPTE7YzxBYy5sZW5ndGg7YysrKXt2YXIgZD1BY1tjXTtkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKX19bnVsbCE9PUJjJiZVYyhCYyxhKTtudWxsIT09Q2MmJlVjKENjLGEpO251bGwhPT1EYyYmVWMoRGMsYSk7RWMuZm9yRWFjaChiKTtGYy5mb3JFYWNoKGIpO2ZvcihjPTA7YzxHYy5sZW5ndGg7YysrKWQ9R2NbY10sZC5ibG9ja2VkT249PT1hJiYoZC5ibG9ja2VkT249bnVsbCk7Zm9yKDswPEdjLmxlbmd0aCYmKGM9R2NbMF0sbnVsbD09PWMuYmxvY2tlZE9uKTspUGMoYyksbnVsbD09PWMuYmxvY2tlZE9uJiZHYy5zaGlmdCgpfVxudmFyIFdjPXt9LFljPW5ldyBNYXAsWmM9bmV3IE1hcCwkYz1bXCJhYm9ydFwiLFwiYWJvcnRcIixYYixcImFuaW1hdGlvbkVuZFwiLFliLFwiYW5pbWF0aW9uSXRlcmF0aW9uXCIsWmIsXCJhbmltYXRpb25TdGFydFwiLFwiY2FucGxheVwiLFwiY2FuUGxheVwiLFwiY2FucGxheXRocm91Z2hcIixcImNhblBsYXlUaHJvdWdoXCIsXCJkdXJhdGlvbmNoYW5nZVwiLFwiZHVyYXRpb25DaGFuZ2VcIixcImVtcHRpZWRcIixcImVtcHRpZWRcIixcImVuY3J5cHRlZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmRlZFwiLFwiZW5kZWRcIixcImVycm9yXCIsXCJlcnJvclwiLFwiZ290cG9pbnRlcmNhcHR1cmVcIixcImdvdFBvaW50ZXJDYXB0dXJlXCIsXCJsb2FkXCIsXCJsb2FkXCIsXCJsb2FkZWRkYXRhXCIsXCJsb2FkZWREYXRhXCIsXCJsb2FkZWRtZXRhZGF0YVwiLFwibG9hZGVkTWV0YWRhdGFcIixcImxvYWRzdGFydFwiLFwibG9hZFN0YXJ0XCIsXCJsb3N0cG9pbnRlcmNhcHR1cmVcIixcImxvc3RQb2ludGVyQ2FwdHVyZVwiLFwicGxheWluZ1wiLFwicGxheWluZ1wiLFwicHJvZ3Jlc3NcIixcInByb2dyZXNzXCIsXCJzZWVraW5nXCIsXG5cInNlZWtpbmdcIixcInN0YWxsZWRcIixcInN0YWxsZWRcIixcInN1c3BlbmRcIixcInN1c3BlbmRcIixcInRpbWV1cGRhdGVcIixcInRpbWVVcGRhdGVcIiwkYixcInRyYW5zaXRpb25FbmRcIixcIndhaXRpbmdcIixcIndhaXRpbmdcIl07ZnVuY3Rpb24gYWQoYSxiKXtmb3IodmFyIGM9MDtjPGEubGVuZ3RoO2MrPTIpe3ZhciBkPWFbY10sZT1hW2MrMV0sZj1cIm9uXCIrKGVbMF0udG9VcHBlckNhc2UoKStlLnNsaWNlKDEpKTtmPXtwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpmLGNhcHR1cmVkOmYrXCJDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpbZF0sZXZlbnRQcmlvcml0eTpifTtaYy5zZXQoZCxiKTtZYy5zZXQoZCxmKTtXY1tlXT1mfX1cbmFkKFwiYmx1ciBibHVyIGNhbmNlbCBjYW5jZWwgY2xpY2sgY2xpY2sgY2xvc2UgY2xvc2UgY29udGV4dG1lbnUgY29udGV4dE1lbnUgY29weSBjb3B5IGN1dCBjdXQgYXV4Y2xpY2sgYXV4Q2xpY2sgZGJsY2xpY2sgZG91YmxlQ2xpY2sgZHJhZ2VuZCBkcmFnRW5kIGRyYWdzdGFydCBkcmFnU3RhcnQgZHJvcCBkcm9wIGZvY3VzIGZvY3VzIGlucHV0IGlucHV0IGludmFsaWQgaW52YWxpZCBrZXlkb3duIGtleURvd24ga2V5cHJlc3Mga2V5UHJlc3Mga2V5dXAga2V5VXAgbW91c2Vkb3duIG1vdXNlRG93biBtb3VzZXVwIG1vdXNlVXAgcGFzdGUgcGFzdGUgcGF1c2UgcGF1c2UgcGxheSBwbGF5IHBvaW50ZXJjYW5jZWwgcG9pbnRlckNhbmNlbCBwb2ludGVyZG93biBwb2ludGVyRG93biBwb2ludGVydXAgcG9pbnRlclVwIHJhdGVjaGFuZ2UgcmF0ZUNoYW5nZSByZXNldCByZXNldCBzZWVrZWQgc2Vla2VkIHN1Ym1pdCBzdWJtaXQgdG91Y2hjYW5jZWwgdG91Y2hDYW5jZWwgdG91Y2hlbmQgdG91Y2hFbmQgdG91Y2hzdGFydCB0b3VjaFN0YXJ0IHZvbHVtZWNoYW5nZSB2b2x1bWVDaGFuZ2VcIi5zcGxpdChcIiBcIiksMCk7XG5hZChcImRyYWcgZHJhZyBkcmFnZW50ZXIgZHJhZ0VudGVyIGRyYWdleGl0IGRyYWdFeGl0IGRyYWdsZWF2ZSBkcmFnTGVhdmUgZHJhZ292ZXIgZHJhZ092ZXIgbW91c2Vtb3ZlIG1vdXNlTW92ZSBtb3VzZW91dCBtb3VzZU91dCBtb3VzZW92ZXIgbW91c2VPdmVyIHBvaW50ZXJtb3ZlIHBvaW50ZXJNb3ZlIHBvaW50ZXJvdXQgcG9pbnRlck91dCBwb2ludGVyb3ZlciBwb2ludGVyT3ZlciBzY3JvbGwgc2Nyb2xsIHRvZ2dsZSB0b2dnbGUgdG91Y2htb3ZlIHRvdWNoTW92ZSB3aGVlbCB3aGVlbFwiLnNwbGl0KFwiIFwiKSwxKTthZCgkYywyKTtmb3IodmFyIGJkPVwiY2hhbmdlIHNlbGVjdGlvbmNoYW5nZSB0ZXh0SW5wdXQgY29tcG9zaXRpb25zdGFydCBjb21wb3NpdGlvbmVuZCBjb21wb3NpdGlvbnVwZGF0ZVwiLnNwbGl0KFwiIFwiKSxjZD0wO2NkPGJkLmxlbmd0aDtjZCsrKVpjLnNldChiZFtjZF0sMCk7XG52YXIgZGQ9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxlZD1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxmZD0hMDtmdW5jdGlvbiBGKGEsYil7dmMoYixhLCExKX1mdW5jdGlvbiB2YyhhLGIsYyl7dmFyIGQ9WmMuZ2V0KGIpO3N3aXRjaCh2b2lkIDA9PT1kPzI6ZCl7Y2FzZSAwOmQ9Z2QuYmluZChudWxsLGIsMSxhKTticmVhaztjYXNlIDE6ZD1oZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2RlZmF1bHQ6ZD1pZC5iaW5kKG51bGwsYiwxLGEpfWM/YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMCk6YS5hZGRFdmVudExpc3RlbmVyKGIsZCwhMSl9ZnVuY3Rpb24gZ2QoYSxiLGMsZCl7SmF8fEhhKCk7dmFyIGU9aWQsZj1KYTtKYT0hMDt0cnl7R2EoZSxhLGIsYyxkKX1maW5hbGx5eyhKYT1mKXx8TGEoKX19ZnVuY3Rpb24gaGQoYSxiLGMsZCl7ZWQoZGQsaWQuYmluZChudWxsLGEsYixjLGQpKX1cbmZ1bmN0aW9uIGlkKGEsYixjLGQpe2lmKGZkKWlmKDA8QWMubGVuZ3RoJiYtMTxIYy5pbmRleE9mKGEpKWE9S2MobnVsbCxhLGIsYyxkKSxBYy5wdXNoKGEpO2Vsc2V7dmFyIGU9UmMoYSxiLGMsZCk7aWYobnVsbD09PWUpTGMoYSxkKTtlbHNlIGlmKC0xPEhjLmluZGV4T2YoYSkpYT1LYyhlLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZSBpZighT2MoZSxhLGIsYyxkKSl7TGMoYSxkKTthPXJjKGEsZCxudWxsLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfX19fVxuZnVuY3Rpb24gUmMoYSxiLGMsZCl7Yz1uYyhkKTtjPXRjKGMpO2lmKG51bGwhPT1jKXt2YXIgZT1kYyhjKTtpZihudWxsPT09ZSljPW51bGw7ZWxzZXt2YXIgZj1lLnRhZztpZigxMz09PWYpe2M9ZWMoZSk7aWYobnVsbCE9PWMpcmV0dXJuIGM7Yz1udWxsfWVsc2UgaWYoMz09PWYpe2lmKGUuc3RhdGVOb2RlLmh5ZHJhdGUpcmV0dXJuIDM9PT1lLnRhZz9lLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7Yz1udWxsfWVsc2UgZSE9PWMmJihjPW51bGwpfX1hPXJjKGEsZCxjLGIpO3RyeXtNYShzYyxhKX1maW5hbGx5e3FjKGEpfXJldHVybiBudWxsfVxudmFyIGpkPXthbmltYXRpb25JdGVyYXRpb25Db3VudDohMCxib3JkZXJJbWFnZU91dHNldDohMCxib3JkZXJJbWFnZVNsaWNlOiEwLGJvcmRlckltYWdlV2lkdGg6ITAsYm94RmxleDohMCxib3hGbGV4R3JvdXA6ITAsYm94T3JkaW5hbEdyb3VwOiEwLGNvbHVtbkNvdW50OiEwLGNvbHVtbnM6ITAsZmxleDohMCxmbGV4R3JvdzohMCxmbGV4UG9zaXRpdmU6ITAsZmxleFNocmluazohMCxmbGV4TmVnYXRpdmU6ITAsZmxleE9yZGVyOiEwLGdyaWRBcmVhOiEwLGdyaWRSb3c6ITAsZ3JpZFJvd0VuZDohMCxncmlkUm93U3BhbjohMCxncmlkUm93U3RhcnQ6ITAsZ3JpZENvbHVtbjohMCxncmlkQ29sdW1uRW5kOiEwLGdyaWRDb2x1bW5TcGFuOiEwLGdyaWRDb2x1bW5TdGFydDohMCxmb250V2VpZ2h0OiEwLGxpbmVDbGFtcDohMCxsaW5lSGVpZ2h0OiEwLG9wYWNpdHk6ITAsb3JkZXI6ITAsb3JwaGFuczohMCx0YWJTaXplOiEwLHdpZG93czohMCx6SW5kZXg6ITAsem9vbTohMCxmaWxsT3BhY2l0eTohMCxcbmZsb29kT3BhY2l0eTohMCxzdG9wT3BhY2l0eTohMCxzdHJva2VEYXNoYXJyYXk6ITAsc3Ryb2tlRGFzaG9mZnNldDohMCxzdHJva2VNaXRlcmxpbWl0OiEwLHN0cm9rZU9wYWNpdHk6ITAsc3Ryb2tlV2lkdGg6ITB9LGtkPVtcIldlYmtpdFwiLFwibXNcIixcIk1velwiLFwiT1wiXTtPYmplY3Qua2V5cyhqZCkuZm9yRWFjaChmdW5jdGlvbihhKXtrZC5mb3JFYWNoKGZ1bmN0aW9uKGIpe2I9YithLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpK2Euc3Vic3RyaW5nKDEpO2pkW2JdPWpkW2FdfSl9KTtmdW5jdGlvbiBsZChhLGIsYyl7cmV0dXJuIG51bGw9PWJ8fFwiYm9vbGVhblwiPT09dHlwZW9mIGJ8fFwiXCI9PT1iP1wiXCI6Y3x8XCJudW1iZXJcIiE9PXR5cGVvZiBifHwwPT09Ynx8amQuaGFzT3duUHJvcGVydHkoYSkmJmpkW2FdPyhcIlwiK2IpLnRyaW0oKTpiK1wicHhcIn1cbmZ1bmN0aW9uIG1kKGEsYil7YT1hLnN0eWxlO2Zvcih2YXIgYyBpbiBiKWlmKGIuaGFzT3duUHJvcGVydHkoYykpe3ZhciBkPTA9PT1jLmluZGV4T2YoXCItLVwiKSxlPWxkKGMsYltjXSxkKTtcImZsb2F0XCI9PT1jJiYoYz1cImNzc0Zsb2F0XCIpO2Q/YS5zZXRQcm9wZXJ0eShjLGUpOmFbY109ZX19dmFyIG5kPW4oe21lbnVpdGVtOiEwfSx7YXJlYTohMCxiYXNlOiEwLGJyOiEwLGNvbDohMCxlbWJlZDohMCxocjohMCxpbWc6ITAsaW5wdXQ6ITAsa2V5Z2VuOiEwLGxpbms6ITAsbWV0YTohMCxwYXJhbTohMCxzb3VyY2U6ITAsdHJhY2s6ITAsd2JyOiEwfSk7XG5mdW5jdGlvbiBvZChhLGIpe2lmKGIpe2lmKG5kW2FdJiYobnVsbCE9Yi5jaGlsZHJlbnx8bnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCkpdGhyb3cgRXJyb3IodSgxMzcsYSxcIlwiKSk7aWYobnVsbCE9Yi5kYW5nZXJvdXNseVNldElubmVySFRNTCl7aWYobnVsbCE9Yi5jaGlsZHJlbil0aHJvdyBFcnJvcih1KDYwKSk7aWYoIShcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJlwiX19odG1sXCJpbiBiLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDYxKSk7fWlmKG51bGwhPWIuc3R5bGUmJlwib2JqZWN0XCIhPT10eXBlb2YgYi5zdHlsZSl0aHJvdyBFcnJvcih1KDYyLFwiXCIpKTt9fVxuZnVuY3Rpb24gcGQoYSxiKXtpZigtMT09PWEuaW5kZXhPZihcIi1cIikpcmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBiLmlzO3N3aXRjaChhKXtjYXNlIFwiYW5ub3RhdGlvbi14bWxcIjpjYXNlIFwiY29sb3ItcHJvZmlsZVwiOmNhc2UgXCJmb250LWZhY2VcIjpjYXNlIFwiZm9udC1mYWNlLXNyY1wiOmNhc2UgXCJmb250LWZhY2UtdXJpXCI6Y2FzZSBcImZvbnQtZmFjZS1mb3JtYXRcIjpjYXNlIFwiZm9udC1mYWNlLW5hbWVcIjpjYXNlIFwibWlzc2luZy1nbHlwaFwiOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITB9fXZhciBxZD1NYi5odG1sO2Z1bmN0aW9uIHJkKGEsYil7YT05PT09YS5ub2RlVHlwZXx8MTE9PT1hLm5vZGVUeXBlP2E6YS5vd25lckRvY3VtZW50O3ZhciBjPWNjKGEpO2I9d2FbYl07Zm9yKHZhciBkPTA7ZDxiLmxlbmd0aDtkKyspdWMoYltkXSxhLGMpfWZ1bmN0aW9uIHNkKCl7fVxuZnVuY3Rpb24gdGQoYSl7YT1hfHwoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBkb2N1bWVudD9kb2N1bWVudDp2b2lkIDApO2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgYSlyZXR1cm4gbnVsbDt0cnl7cmV0dXJuIGEuYWN0aXZlRWxlbWVudHx8YS5ib2R5fWNhdGNoKGIpe3JldHVybiBhLmJvZHl9fWZ1bmN0aW9uIHVkKGEpe2Zvcig7YSYmYS5maXJzdENoaWxkOylhPWEuZmlyc3RDaGlsZDtyZXR1cm4gYX1mdW5jdGlvbiB2ZChhLGIpe3ZhciBjPXVkKGEpO2E9MDtmb3IodmFyIGQ7Yzspe2lmKDM9PT1jLm5vZGVUeXBlKXtkPWErYy50ZXh0Q29udGVudC5sZW5ndGg7aWYoYTw9YiYmZD49YilyZXR1cm57bm9kZTpjLG9mZnNldDpiLWF9O2E9ZH1hOntmb3IoO2M7KXtpZihjLm5leHRTaWJsaW5nKXtjPWMubmV4dFNpYmxpbmc7YnJlYWsgYX1jPWMucGFyZW50Tm9kZX1jPXZvaWQgMH1jPXVkKGMpfX1cbmZ1bmN0aW9uIHdkKGEsYil7cmV0dXJuIGEmJmI/YT09PWI/ITA6YSYmMz09PWEubm9kZVR5cGU/ITE6YiYmMz09PWIubm9kZVR5cGU/d2QoYSxiLnBhcmVudE5vZGUpOlwiY29udGFpbnNcImluIGE/YS5jb250YWlucyhiKTphLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uPyEhKGEuY29tcGFyZURvY3VtZW50UG9zaXRpb24oYikmMTYpOiExOiExfWZ1bmN0aW9uIHhkKCl7Zm9yKHZhciBhPXdpbmRvdyxiPXRkKCk7YiBpbnN0YW5jZW9mIGEuSFRNTElGcmFtZUVsZW1lbnQ7KXt0cnl7dmFyIGM9XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNvbnRlbnRXaW5kb3cubG9jYXRpb24uaHJlZn1jYXRjaChkKXtjPSExfWlmKGMpYT1iLmNvbnRlbnRXaW5kb3c7ZWxzZSBicmVhaztiPXRkKGEuZG9jdW1lbnQpfXJldHVybiBifVxuZnVuY3Rpb24geWQoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVybiBiJiYoXCJpbnB1dFwiPT09YiYmKFwidGV4dFwiPT09YS50eXBlfHxcInNlYXJjaFwiPT09YS50eXBlfHxcInRlbFwiPT09YS50eXBlfHxcInVybFwiPT09YS50eXBlfHxcInBhc3N3b3JkXCI9PT1hLnR5cGUpfHxcInRleHRhcmVhXCI9PT1ifHxcInRydWVcIj09PWEuY29udGVudEVkaXRhYmxlKX12YXIgemQ9XCIkXCIsQWQ9XCIvJFwiLEJkPVwiJD9cIixDZD1cIiQhXCIsRGQ9bnVsbCxFZD1udWxsO2Z1bmN0aW9uIEZkKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJidXR0b25cIjpjYXNlIFwiaW5wdXRcIjpjYXNlIFwic2VsZWN0XCI6Y2FzZSBcInRleHRhcmVhXCI6cmV0dXJuISFiLmF1dG9Gb2N1c31yZXR1cm4hMX1cbmZ1bmN0aW9uIEdkKGEsYil7cmV0dXJuXCJ0ZXh0YXJlYVwiPT09YXx8XCJvcHRpb25cIj09PWF8fFwibm9zY3JpcHRcIj09PWF8fFwic3RyaW5nXCI9PT10eXBlb2YgYi5jaGlsZHJlbnx8XCJudW1iZXJcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm9iamVjdFwiPT09dHlwZW9mIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MJiZudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MLl9faHRtbH12YXIgSGQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIHNldFRpbWVvdXQ/c2V0VGltZW91dDp2b2lkIDAsSWQ9XCJmdW5jdGlvblwiPT09dHlwZW9mIGNsZWFyVGltZW91dD9jbGVhclRpbWVvdXQ6dm9pZCAwO2Z1bmN0aW9uIEpkKGEpe2Zvcig7bnVsbCE9YTthPWEubmV4dFNpYmxpbmcpe3ZhciBiPWEubm9kZVR5cGU7aWYoMT09PWJ8fDM9PT1iKWJyZWFrfXJldHVybiBhfVxuZnVuY3Rpb24gS2QoYSl7YT1hLnByZXZpb3VzU2libGluZztmb3IodmFyIGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09emR8fGM9PT1DZHx8Yz09PUJkKXtpZigwPT09YilyZXR1cm4gYTtiLS19ZWxzZSBjPT09QWQmJmIrK31hPWEucHJldmlvdXNTaWJsaW5nfXJldHVybiBudWxsfXZhciBMZD1NYXRoLnJhbmRvbSgpLnRvU3RyaW5nKDM2KS5zbGljZSgyKSxNZD1cIl9fcmVhY3RJbnRlcm5hbEluc3RhbmNlJFwiK0xkLE5kPVwiX19yZWFjdEV2ZW50SGFuZGxlcnMkXCIrTGQsT2Q9XCJfX3JlYWN0Q29udGFpbmVyZSRcIitMZDtcbmZ1bmN0aW9uIHRjKGEpe3ZhciBiPWFbTWRdO2lmKGIpcmV0dXJuIGI7Zm9yKHZhciBjPWEucGFyZW50Tm9kZTtjOyl7aWYoYj1jW09kXXx8Y1tNZF0pe2M9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWIuY2hpbGR8fG51bGwhPT1jJiZudWxsIT09Yy5jaGlsZClmb3IoYT1LZChhKTtudWxsIT09YTspe2lmKGM9YVtNZF0pcmV0dXJuIGM7YT1LZChhKX1yZXR1cm4gYn1hPWM7Yz1hLnBhcmVudE5vZGV9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTmMoYSl7YT1hW01kXXx8YVtPZF07cmV0dXJuIWF8fDUhPT1hLnRhZyYmNiE9PWEudGFnJiYxMyE9PWEudGFnJiYzIT09YS50YWc/bnVsbDphfWZ1bmN0aW9uIFBkKGEpe2lmKDU9PT1hLnRhZ3x8Nj09PWEudGFnKXJldHVybiBhLnN0YXRlTm9kZTt0aHJvdyBFcnJvcih1KDMzKSk7fWZ1bmN0aW9uIFFkKGEpe3JldHVybiBhW05kXXx8bnVsbH1cbmZ1bmN0aW9uIFJkKGEpe2RvIGE9YS5yZXR1cm47d2hpbGUoYSYmNSE9PWEudGFnKTtyZXR1cm4gYT9hOm51bGx9XG5mdW5jdGlvbiBTZChhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO2lmKCFjKXJldHVybiBudWxsO3ZhciBkPWxhKGMpO2lmKCFkKXJldHVybiBudWxsO2M9ZFtiXTthOnN3aXRjaChiKXtjYXNlIFwib25DbGlja1wiOmNhc2UgXCJvbkNsaWNrQ2FwdHVyZVwiOmNhc2UgXCJvbkRvdWJsZUNsaWNrXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VEb3duXCI6Y2FzZSBcIm9uTW91c2VEb3duQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlTW92ZVwiOmNhc2UgXCJvbk1vdXNlTW92ZUNhcHR1cmVcIjpjYXNlIFwib25Nb3VzZVVwXCI6Y2FzZSBcIm9uTW91c2VVcENhcHR1cmVcIjpjYXNlIFwib25Nb3VzZUVudGVyXCI6KGQ9IWQuZGlzYWJsZWQpfHwoYT1hLnR5cGUsZD0hKFwiYnV0dG9uXCI9PT1hfHxcImlucHV0XCI9PT1hfHxcInNlbGVjdFwiPT09YXx8XCJ0ZXh0YXJlYVwiPT09YSkpO2E9IWQ7YnJlYWsgYTtkZWZhdWx0OmE9ITF9aWYoYSlyZXR1cm4gbnVsbDtpZihjJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYyl0aHJvdyBFcnJvcih1KDIzMSxcbmIsdHlwZW9mIGMpKTtyZXR1cm4gY31mdW5jdGlvbiBUZChhLGIsYyl7aWYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXNbYl0pKWMuX2Rpc3BhdGNoTGlzdGVuZXJzPWljKGMuX2Rpc3BhdGNoTGlzdGVuZXJzLGIpLGMuX2Rpc3BhdGNoSW5zdGFuY2VzPWljKGMuX2Rpc3BhdGNoSW5zdGFuY2VzLGEpfWZ1bmN0aW9uIFVkKGEpe2lmKGEmJmEuZGlzcGF0Y2hDb25maWcucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXMpe2Zvcih2YXIgYj1hLl90YXJnZXRJbnN0LGM9W107YjspYy5wdXNoKGIpLGI9UmQoYik7Zm9yKGI9Yy5sZW5ndGg7MDxiLS07KVRkKGNbYl0sXCJjYXB0dXJlZFwiLGEpO2ZvcihiPTA7YjxjLmxlbmd0aDtiKyspVGQoY1tiXSxcImJ1YmJsZWRcIixhKX19XG5mdW5jdGlvbiBWZChhLGIsYyl7YSYmYyYmYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiYoYj1TZChhLGMuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSkpJiYoYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSkpfWZ1bmN0aW9uIFdkKGEpe2EmJmEuZGlzcGF0Y2hDb25maWcucmVnaXN0cmF0aW9uTmFtZSYmVmQoYS5fdGFyZ2V0SW5zdCxudWxsLGEpfWZ1bmN0aW9uIFhkKGEpe2pjKGEsVWQpfXZhciBZZD1udWxsLFpkPW51bGwsJGQ9bnVsbDtcbmZ1bmN0aW9uIGFlKCl7aWYoJGQpcmV0dXJuICRkO3ZhciBhLGI9WmQsYz1iLmxlbmd0aCxkLGU9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsZj1lLmxlbmd0aDtmb3IoYT0wO2E8YyYmYlthXT09PWVbYV07YSsrKTt2YXIgZz1jLWE7Zm9yKGQ9MTtkPD1nJiZiW2MtZF09PT1lW2YtZF07ZCsrKTtyZXR1cm4gJGQ9ZS5zbGljZShhLDE8ZD8xLWQ6dm9pZCAwKX1mdW5jdGlvbiBiZSgpe3JldHVybiEwfWZ1bmN0aW9uIGNlKCl7cmV0dXJuITF9XG5mdW5jdGlvbiBHKGEsYixjLGQpe3RoaXMuZGlzcGF0Y2hDb25maWc9YTt0aGlzLl90YXJnZXRJbnN0PWI7dGhpcy5uYXRpdmVFdmVudD1jO2E9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2U7Zm9yKHZhciBlIGluIGEpYS5oYXNPd25Qcm9wZXJ0eShlKSYmKChiPWFbZV0pP3RoaXNbZV09YihjKTpcInRhcmdldFwiPT09ZT90aGlzLnRhcmdldD1kOnRoaXNbZV09Y1tlXSk7dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9KG51bGwhPWMuZGVmYXVsdFByZXZlbnRlZD9jLmRlZmF1bHRQcmV2ZW50ZWQ6ITE9PT1jLnJldHVyblZhbHVlKT9iZTpjZTt0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWNlO3JldHVybiB0aGlzfVxubihHLnByb3RvdHlwZSx7cHJldmVudERlZmF1bHQ6ZnVuY3Rpb24oKXt0aGlzLmRlZmF1bHRQcmV2ZW50ZWQ9ITA7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5wcmV2ZW50RGVmYXVsdD9hLnByZXZlbnREZWZhdWx0KCk6XCJ1bmtub3duXCIhPT10eXBlb2YgYS5yZXR1cm5WYWx1ZSYmKGEucmV0dXJuVmFsdWU9ITEpLHRoaXMuaXNEZWZhdWx0UHJldmVudGVkPWJlKX0sc3RvcFByb3BhZ2F0aW9uOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5uYXRpdmVFdmVudDthJiYoYS5zdG9wUHJvcGFnYXRpb24/YS5zdG9wUHJvcGFnYXRpb24oKTpcInVua25vd25cIiE9PXR5cGVvZiBhLmNhbmNlbEJ1YmJsZSYmKGEuY2FuY2VsQnViYmxlPSEwKSx0aGlzLmlzUHJvcGFnYXRpb25TdG9wcGVkPWJlKX0scGVyc2lzdDpmdW5jdGlvbigpe3RoaXMuaXNQZXJzaXN0ZW50PWJlfSxpc1BlcnNpc3RlbnQ6Y2UsZGVzdHJ1Y3RvcjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuY29uc3RydWN0b3IuSW50ZXJmYWNlLFxuYjtmb3IoYiBpbiBhKXRoaXNbYl09bnVsbDt0aGlzLm5hdGl2ZUV2ZW50PXRoaXMuX3RhcmdldEluc3Q9dGhpcy5kaXNwYXRjaENvbmZpZz1udWxsO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9Y2U7dGhpcy5fZGlzcGF0Y2hJbnN0YW5jZXM9dGhpcy5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbH19KTtHLkludGVyZmFjZT17dHlwZTpudWxsLHRhcmdldDpudWxsLGN1cnJlbnRUYXJnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gbnVsbH0sZXZlbnRQaGFzZTpudWxsLGJ1YmJsZXM6bnVsbCxjYW5jZWxhYmxlOm51bGwsdGltZVN0YW1wOmZ1bmN0aW9uKGEpe3JldHVybiBhLnRpbWVTdGFtcHx8RGF0ZS5ub3coKX0sZGVmYXVsdFByZXZlbnRlZDpudWxsLGlzVHJ1c3RlZDpudWxsfTtcbkcuZXh0ZW5kPWZ1bmN0aW9uKGEpe2Z1bmN0aW9uIGIoKXt9ZnVuY3Rpb24gYygpe3JldHVybiBkLmFwcGx5KHRoaXMsYXJndW1lbnRzKX12YXIgZD10aGlzO2IucHJvdG90eXBlPWQucHJvdG90eXBlO3ZhciBlPW5ldyBiO24oZSxjLnByb3RvdHlwZSk7Yy5wcm90b3R5cGU9ZTtjLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcj1jO2MuSW50ZXJmYWNlPW4oe30sZC5JbnRlcmZhY2UsYSk7Yy5leHRlbmQ9ZC5leHRlbmQ7ZGUoYyk7cmV0dXJuIGN9O2RlKEcpO2Z1bmN0aW9uIGVlKGEsYixjLGQpe2lmKHRoaXMuZXZlbnRQb29sLmxlbmd0aCl7dmFyIGU9dGhpcy5ldmVudFBvb2wucG9wKCk7dGhpcy5jYWxsKGUsYSxiLGMsZCk7cmV0dXJuIGV9cmV0dXJuIG5ldyB0aGlzKGEsYixjLGQpfVxuZnVuY3Rpb24gZmUoYSl7aWYoIShhIGluc3RhbmNlb2YgdGhpcykpdGhyb3cgRXJyb3IodSgyNzkpKTthLmRlc3RydWN0b3IoKTsxMD50aGlzLmV2ZW50UG9vbC5sZW5ndGgmJnRoaXMuZXZlbnRQb29sLnB1c2goYSl9ZnVuY3Rpb24gZGUoYSl7YS5ldmVudFBvb2w9W107YS5nZXRQb29sZWQ9ZWU7YS5yZWxlYXNlPWZlfXZhciBnZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaGU9Ry5leHRlbmQoe2RhdGE6bnVsbH0pLGllPVs5LDEzLDI3LDMyXSxqZT15YSYmXCJDb21wb3NpdGlvbkV2ZW50XCJpbiB3aW5kb3csa2U9bnVsbDt5YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYoa2U9ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKTtcbnZhciBsZT15YSYmXCJUZXh0RXZlbnRcImluIHdpbmRvdyYmIWtlLG1lPXlhJiYoIWplfHxrZSYmODxrZSYmMTE+PWtlKSxuZT1TdHJpbmcuZnJvbUNoYXJDb2RlKDMyKSxvZT17YmVmb3JlSW5wdXQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25CZWZvcmVJbnB1dFwiLGNhcHR1cmVkOlwib25CZWZvcmVJbnB1dENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltcImNvbXBvc2l0aW9uZW5kXCIsXCJrZXlwcmVzc1wiLFwidGV4dElucHV0XCIsXCJwYXN0ZVwiXX0sY29tcG9zaXRpb25FbmQ6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvbkVuZFwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvbkVuZENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbmVuZCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25TdGFydDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRcIixcbmNhcHR1cmVkOlwib25Db21wb3NpdGlvblN0YXJ0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uc3RhcnQga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9LGNvbXBvc2l0aW9uVXBkYXRlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVcIixjYXB0dXJlZDpcIm9uQ29tcG9zaXRpb25VcGRhdGVDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb251cGRhdGUga2V5ZG93biBrZXlwcmVzcyBrZXl1cCBtb3VzZWRvd25cIi5zcGxpdChcIiBcIil9fSxwZT0hMTtcbmZ1bmN0aW9uIHFlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJrZXl1cFwiOnJldHVybi0xIT09aWUuaW5kZXhPZihiLmtleUNvZGUpO2Nhc2UgXCJrZXlkb3duXCI6cmV0dXJuIDIyOSE9PWIua2V5Q29kZTtjYXNlIFwia2V5cHJlc3NcIjpjYXNlIFwibW91c2Vkb3duXCI6Y2FzZSBcImJsdXJcIjpyZXR1cm4hMDtkZWZhdWx0OnJldHVybiExfX1mdW5jdGlvbiByZShhKXthPWEuZGV0YWlsO3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmXCJkYXRhXCJpbiBhP2EuZGF0YTpudWxsfXZhciBzZT0hMTtmdW5jdGlvbiB0ZShhLGIpe3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpyZXR1cm4gcmUoYik7Y2FzZSBcImtleXByZXNzXCI6aWYoMzIhPT1iLndoaWNoKXJldHVybiBudWxsO3BlPSEwO3JldHVybiBuZTtjYXNlIFwidGV4dElucHV0XCI6cmV0dXJuIGE9Yi5kYXRhLGE9PT1uZSYmcGU/bnVsbDphO2RlZmF1bHQ6cmV0dXJuIG51bGx9fVxuZnVuY3Rpb24gdWUoYSxiKXtpZihzZSlyZXR1cm5cImNvbXBvc2l0aW9uZW5kXCI9PT1hfHwhamUmJnFlKGEsYik/KGE9YWUoKSwkZD1aZD1ZZD1udWxsLHNlPSExLGEpOm51bGw7c3dpdGNoKGEpe2Nhc2UgXCJwYXN0ZVwiOnJldHVybiBudWxsO2Nhc2UgXCJrZXlwcmVzc1wiOmlmKCEoYi5jdHJsS2V5fHxiLmFsdEtleXx8Yi5tZXRhS2V5KXx8Yi5jdHJsS2V5JiZiLmFsdEtleSl7aWYoYi5jaGFyJiYxPGIuY2hhci5sZW5ndGgpcmV0dXJuIGIuY2hhcjtpZihiLndoaWNoKXJldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKGIud2hpY2gpfXJldHVybiBudWxsO2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiBtZSYmXCJrb1wiIT09Yi5sb2NhbGU/bnVsbDpiLmRhdGE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG52YXIgdmU9e2V2ZW50VHlwZXM6b2UsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkKXt2YXIgZTtpZihqZSliOntzd2l0Y2goYSl7Y2FzZSBcImNvbXBvc2l0aW9uc3RhcnRcIjp2YXIgZj1vZS5jb21wb3NpdGlvblN0YXJ0O2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6Zj1vZS5jb21wb3NpdGlvbkVuZDticmVhayBiO2Nhc2UgXCJjb21wb3NpdGlvbnVwZGF0ZVwiOmY9b2UuY29tcG9zaXRpb25VcGRhdGU7YnJlYWsgYn1mPXZvaWQgMH1lbHNlIHNlP3FlKGEsYykmJihmPW9lLmNvbXBvc2l0aW9uRW5kKTpcImtleWRvd25cIj09PWEmJjIyOT09PWMua2V5Q29kZSYmKGY9b2UuY29tcG9zaXRpb25TdGFydCk7Zj8obWUmJlwia29cIiE9PWMubG9jYWxlJiYoc2V8fGYhPT1vZS5jb21wb3NpdGlvblN0YXJ0P2Y9PT1vZS5jb21wb3NpdGlvbkVuZCYmc2UmJihlPWFlKCkpOihZZD1kLFpkPVwidmFsdWVcImluIFlkP1lkLnZhbHVlOllkLnRleHRDb250ZW50LHNlPSEwKSksZj1nZS5nZXRQb29sZWQoZixcbmIsYyxkKSxlP2YuZGF0YT1lOihlPXJlKGMpLG51bGwhPT1lJiYoZi5kYXRhPWUpKSxYZChmKSxlPWYpOmU9bnVsbDsoYT1sZT90ZShhLGMpOnVlKGEsYykpPyhiPWhlLmdldFBvb2xlZChvZS5iZWZvcmVJbnB1dCxiLGMsZCksYi5kYXRhPWEsWGQoYikpOmI9bnVsbDtyZXR1cm4gbnVsbD09PWU/YjpudWxsPT09Yj9lOltlLGJdfX0sd2U9e2NvbG9yOiEwLGRhdGU6ITAsZGF0ZXRpbWU6ITAsXCJkYXRldGltZS1sb2NhbFwiOiEwLGVtYWlsOiEwLG1vbnRoOiEwLG51bWJlcjohMCxwYXNzd29yZDohMCxyYW5nZTohMCxzZWFyY2g6ITAsdGVsOiEwLHRleHQ6ITAsdGltZTohMCx1cmw6ITAsd2VlazohMH07ZnVuY3Rpb24geGUoYSl7dmFyIGI9YSYmYS5ub2RlTmFtZSYmYS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO3JldHVyblwiaW5wdXRcIj09PWI/ISF3ZVthLnR5cGVdOlwidGV4dGFyZWFcIj09PWI/ITA6ITF9XG52YXIgeWU9e2NoYW5nZTp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNoYW5nZVwiLGNhcHR1cmVkOlwib25DaGFuZ2VDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY2hhbmdlIGNsaWNrIGZvY3VzIGlucHV0IGtleWRvd24ga2V5dXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX07ZnVuY3Rpb24gemUoYSxiLGMpe2E9Ry5nZXRQb29sZWQoeWUuY2hhbmdlLGEsYixjKTthLnR5cGU9XCJjaGFuZ2VcIjtEYShjKTtYZChhKTtyZXR1cm4gYX12YXIgQWU9bnVsbCxCZT1udWxsO2Z1bmN0aW9uIENlKGEpe21jKGEpfWZ1bmN0aW9uIERlKGEpe3ZhciBiPVBkKGEpO2lmKHliKGIpKXJldHVybiBhfWZ1bmN0aW9uIEVlKGEsYil7aWYoXCJjaGFuZ2VcIj09PWEpcmV0dXJuIGJ9dmFyIEZlPSExO3lhJiYoRmU9b2MoXCJpbnB1dFwiKSYmKCFkb2N1bWVudC5kb2N1bWVudE1vZGV8fDk8ZG9jdW1lbnQuZG9jdW1lbnRNb2RlKSk7XG5mdW5jdGlvbiBHZSgpe0FlJiYoQWUuZGV0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpLEJlPUFlPW51bGwpfWZ1bmN0aW9uIEhlKGEpe2lmKFwidmFsdWVcIj09PWEucHJvcGVydHlOYW1lJiZEZShCZSkpaWYoYT16ZShCZSxhLG5jKGEpKSxKYSltYyhhKTtlbHNle0phPSEwO3RyeXtGYShDZSxhKX1maW5hbGx5e0phPSExLExhKCl9fX1mdW5jdGlvbiBJZShhLGIsYyl7XCJmb2N1c1wiPT09YT8oR2UoKSxBZT1iLEJlPWMsQWUuYXR0YWNoRXZlbnQoXCJvbnByb3BlcnR5Y2hhbmdlXCIsSGUpKTpcImJsdXJcIj09PWEmJkdlKCl9ZnVuY3Rpb24gSmUoYSl7aWYoXCJzZWxlY3Rpb25jaGFuZ2VcIj09PWF8fFwia2V5dXBcIj09PWF8fFwia2V5ZG93blwiPT09YSlyZXR1cm4gRGUoQmUpfWZ1bmN0aW9uIEtlKGEsYil7aWYoXCJjbGlja1wiPT09YSlyZXR1cm4gRGUoYil9ZnVuY3Rpb24gTGUoYSxiKXtpZihcImlucHV0XCI9PT1hfHxcImNoYW5nZVwiPT09YSlyZXR1cm4gRGUoYil9XG52YXIgTWU9e2V2ZW50VHlwZXM6eWUsX2lzSW5wdXRFdmVudFN1cHBvcnRlZDpGZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWI/UGQoYik6d2luZG93LGY9ZS5ub2RlTmFtZSYmZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO2lmKFwic2VsZWN0XCI9PT1mfHxcImlucHV0XCI9PT1mJiZcImZpbGVcIj09PWUudHlwZSl2YXIgZz1FZTtlbHNlIGlmKHhlKGUpKWlmKEZlKWc9TGU7ZWxzZXtnPUplO3ZhciBoPUllfWVsc2UoZj1lLm5vZGVOYW1lKSYmXCJpbnB1dFwiPT09Zi50b0xvd2VyQ2FzZSgpJiYoXCJjaGVja2JveFwiPT09ZS50eXBlfHxcInJhZGlvXCI9PT1lLnR5cGUpJiYoZz1LZSk7aWYoZyYmKGc9ZyhhLGIpKSlyZXR1cm4gemUoZyxjLGQpO2gmJmgoYSxlLGIpO1wiYmx1clwiPT09YSYmKGE9ZS5fd3JhcHBlclN0YXRlKSYmYS5jb250cm9sbGVkJiZcIm51bWJlclwiPT09ZS50eXBlJiZEYihlLFwibnVtYmVyXCIsZS52YWx1ZSl9fSxOZT1HLmV4dGVuZCh7dmlldzpudWxsLGRldGFpbDpudWxsfSksXG5PZT17QWx0OlwiYWx0S2V5XCIsQ29udHJvbDpcImN0cmxLZXlcIixNZXRhOlwibWV0YUtleVwiLFNoaWZ0Olwic2hpZnRLZXlcIn07ZnVuY3Rpb24gUGUoYSl7dmFyIGI9dGhpcy5uYXRpdmVFdmVudDtyZXR1cm4gYi5nZXRNb2RpZmllclN0YXRlP2IuZ2V0TW9kaWZpZXJTdGF0ZShhKTooYT1PZVthXSk/ISFiW2FdOiExfWZ1bmN0aW9uIFFlKCl7cmV0dXJuIFBlfVxudmFyIFJlPTAsU2U9MCxUZT0hMSxVZT0hMSxWZT1OZS5leHRlbmQoe3NjcmVlblg6bnVsbCxzY3JlZW5ZOm51bGwsY2xpZW50WDpudWxsLGNsaWVudFk6bnVsbCxwYWdlWDpudWxsLHBhZ2VZOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsYnV0dG9uOm51bGwsYnV0dG9uczpudWxsLHJlbGF0ZWRUYXJnZXQ6ZnVuY3Rpb24oYSl7cmV0dXJuIGEucmVsYXRlZFRhcmdldHx8KGEuZnJvbUVsZW1lbnQ9PT1hLnNyY0VsZW1lbnQ/YS50b0VsZW1lbnQ6YS5mcm9tRWxlbWVudCl9LG1vdmVtZW50WDpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WFwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFg7dmFyIGI9UmU7UmU9YS5zY3JlZW5YO3JldHVybiBUZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWC1iOjA6KFRlPSEwLDApfSxtb3ZlbWVudFk6ZnVuY3Rpb24oYSl7aWYoXCJtb3ZlbWVudFlcImluIGEpcmV0dXJuIGEubW92ZW1lbnRZO1xudmFyIGI9U2U7U2U9YS5zY3JlZW5ZO3JldHVybiBVZT9cIm1vdXNlbW92ZVwiPT09YS50eXBlP2Euc2NyZWVuWS1iOjA6KFVlPSEwLDApfX0pLFdlPVZlLmV4dGVuZCh7cG9pbnRlcklkOm51bGwsd2lkdGg6bnVsbCxoZWlnaHQ6bnVsbCxwcmVzc3VyZTpudWxsLHRhbmdlbnRpYWxQcmVzc3VyZTpudWxsLHRpbHRYOm51bGwsdGlsdFk6bnVsbCx0d2lzdDpudWxsLHBvaW50ZXJUeXBlOm51bGwsaXNQcmltYXJ5Om51bGx9KSxYZT17bW91c2VFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uTW91c2VFbnRlclwiLGRlcGVuZGVuY2llczpbXCJtb3VzZW91dFwiLFwibW91c2VvdmVyXCJdfSxtb3VzZUxlYXZlOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUxlYXZlXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LHBvaW50ZXJFbnRlcjp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckVudGVyXCIsZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfSxwb2ludGVyTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvblBvaW50ZXJMZWF2ZVwiLFxuZGVwZW5kZW5jaWVzOltcInBvaW50ZXJvdXRcIixcInBvaW50ZXJvdmVyXCJdfX0sWWU9e2V2ZW50VHlwZXM6WGUsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVwibW91c2VvdmVyXCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hLGc9XCJtb3VzZW91dFwiPT09YXx8XCJwb2ludGVyb3V0XCI9PT1hO2lmKGYmJjA9PT0oZSYzMikmJihjLnJlbGF0ZWRUYXJnZXR8fGMuZnJvbUVsZW1lbnQpfHwhZyYmIWYpcmV0dXJuIG51bGw7Zj1kLndpbmRvdz09PWQ/ZDooZj1kLm93bmVyRG9jdW1lbnQpP2YuZGVmYXVsdFZpZXd8fGYucGFyZW50V2luZG93OndpbmRvdztpZihnKXtpZihnPWIsYj0oYj1jLnJlbGF0ZWRUYXJnZXR8fGMudG9FbGVtZW50KT90YyhiKTpudWxsLG51bGwhPT1iKXt2YXIgaD1kYyhiKTtpZihiIT09aHx8NSE9PWIudGFnJiY2IT09Yi50YWcpYj1udWxsfX1lbHNlIGc9bnVsbDtpZihnPT09YilyZXR1cm4gbnVsbDtpZihcIm1vdXNlb3V0XCI9PT1hfHxcIm1vdXNlb3ZlclwiPT09XG5hKXt2YXIgaz1WZTt2YXIgbD1YZS5tb3VzZUxlYXZlO3ZhciBtPVhlLm1vdXNlRW50ZXI7dmFyIHA9XCJtb3VzZVwifWVsc2UgaWYoXCJwb2ludGVyb3V0XCI9PT1hfHxcInBvaW50ZXJvdmVyXCI9PT1hKWs9V2UsbD1YZS5wb2ludGVyTGVhdmUsbT1YZS5wb2ludGVyRW50ZXIscD1cInBvaW50ZXJcIjthPW51bGw9PWc/ZjpQZChnKTtmPW51bGw9PWI/ZjpQZChiKTtsPWsuZ2V0UG9vbGVkKGwsZyxjLGQpO2wudHlwZT1wK1wibGVhdmVcIjtsLnRhcmdldD1hO2wucmVsYXRlZFRhcmdldD1mO2M9ay5nZXRQb29sZWQobSxiLGMsZCk7Yy50eXBlPXArXCJlbnRlclwiO2MudGFyZ2V0PWY7Yy5yZWxhdGVkVGFyZ2V0PWE7ZD1nO3A9YjtpZihkJiZwKWE6e2s9ZDttPXA7Zz0wO2ZvcihhPWs7YTthPVJkKGEpKWcrKzthPTA7Zm9yKGI9bTtiO2I9UmQoYikpYSsrO2Zvcig7MDxnLWE7KWs9UmQoayksZy0tO2Zvcig7MDxhLWc7KW09UmQobSksYS0tO2Zvcig7Zy0tOyl7aWYoaz09PW18fGs9PT1tLmFsdGVybmF0ZSlicmVhayBhO1xuaz1SZChrKTttPVJkKG0pfWs9bnVsbH1lbHNlIGs9bnVsbDttPWs7Zm9yKGs9W107ZCYmZCE9PW07KXtnPWQuYWx0ZXJuYXRlO2lmKG51bGwhPT1nJiZnPT09bSlicmVhaztrLnB1c2goZCk7ZD1SZChkKX1mb3IoZD1bXTtwJiZwIT09bTspe2c9cC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2QucHVzaChwKTtwPVJkKHApfWZvcihwPTA7cDxrLmxlbmd0aDtwKyspVmQoa1twXSxcImJ1YmJsZWRcIixsKTtmb3IocD1kLmxlbmd0aDswPHAtLTspVmQoZFtwXSxcImNhcHR1cmVkXCIsYyk7cmV0dXJuIDA9PT0oZSY2NCk/W2xdOltsLGNdfX07ZnVuY3Rpb24gWmUoYSxiKXtyZXR1cm4gYT09PWImJigwIT09YXx8MS9hPT09MS9iKXx8YSE9PWEmJmIhPT1ifXZhciAkZT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgT2JqZWN0LmlzP09iamVjdC5pczpaZSxhZj1PYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xuZnVuY3Rpb24gYmYoYSxiKXtpZigkZShhLGIpKXJldHVybiEwO2lmKFwib2JqZWN0XCIhPT10eXBlb2YgYXx8bnVsbD09PWF8fFwib2JqZWN0XCIhPT10eXBlb2YgYnx8bnVsbD09PWIpcmV0dXJuITE7dmFyIGM9T2JqZWN0LmtleXMoYSksZD1PYmplY3Qua2V5cyhiKTtpZihjLmxlbmd0aCE9PWQubGVuZ3RoKXJldHVybiExO2ZvcihkPTA7ZDxjLmxlbmd0aDtkKyspaWYoIWFmLmNhbGwoYixjW2RdKXx8ISRlKGFbY1tkXV0sYltjW2RdXSkpcmV0dXJuITE7cmV0dXJuITB9XG52YXIgY2Y9eWEmJlwiZG9jdW1lbnRNb2RlXCJpbiBkb2N1bWVudCYmMTE+PWRvY3VtZW50LmRvY3VtZW50TW9kZSxkZj17c2VsZWN0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uU2VsZWN0XCIsY2FwdHVyZWQ6XCJvblNlbGVjdENhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb250ZXh0bWVudSBkcmFnZW5kIGZvY3VzIGtleWRvd24ga2V5dXAgbW91c2Vkb3duIG1vdXNldXAgc2VsZWN0aW9uY2hhbmdlXCIuc3BsaXQoXCIgXCIpfX0sZWY9bnVsbCxmZj1udWxsLGdmPW51bGwsaGY9ITE7XG5mdW5jdGlvbiBqZihhLGIpe3ZhciBjPWIud2luZG93PT09Yj9iLmRvY3VtZW50Ojk9PT1iLm5vZGVUeXBlP2I6Yi5vd25lckRvY3VtZW50O2lmKGhmfHxudWxsPT1lZnx8ZWYhPT10ZChjKSlyZXR1cm4gbnVsbDtjPWVmO1wic2VsZWN0aW9uU3RhcnRcImluIGMmJnlkKGMpP2M9e3N0YXJ0OmMuc2VsZWN0aW9uU3RhcnQsZW5kOmMuc2VsZWN0aW9uRW5kfTooYz0oYy5vd25lckRvY3VtZW50JiZjLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXd8fHdpbmRvdykuZ2V0U2VsZWN0aW9uKCksYz17YW5jaG9yTm9kZTpjLmFuY2hvck5vZGUsYW5jaG9yT2Zmc2V0OmMuYW5jaG9yT2Zmc2V0LGZvY3VzTm9kZTpjLmZvY3VzTm9kZSxmb2N1c09mZnNldDpjLmZvY3VzT2Zmc2V0fSk7cmV0dXJuIGdmJiZiZihnZixjKT9udWxsOihnZj1jLGE9Ry5nZXRQb29sZWQoZGYuc2VsZWN0LGZmLGEsYiksYS50eXBlPVwic2VsZWN0XCIsYS50YXJnZXQ9ZWYsWGQoYSksYSl9XG52YXIga2Y9e2V2ZW50VHlwZXM6ZGYsZXh0cmFjdEV2ZW50czpmdW5jdGlvbihhLGIsYyxkLGUsZil7ZT1mfHwoZC53aW5kb3c9PT1kP2QuZG9jdW1lbnQ6OT09PWQubm9kZVR5cGU/ZDpkLm93bmVyRG9jdW1lbnQpO2lmKCEoZj0hZSkpe2E6e2U9Y2MoZSk7Zj13YS5vblNlbGVjdDtmb3IodmFyIGc9MDtnPGYubGVuZ3RoO2crKylpZighZS5oYXMoZltnXSkpe2U9ITE7YnJlYWsgYX1lPSEwfWY9IWV9aWYoZilyZXR1cm4gbnVsbDtlPWI/UGQoYik6d2luZG93O3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjppZih4ZShlKXx8XCJ0cnVlXCI9PT1lLmNvbnRlbnRFZGl0YWJsZSllZj1lLGZmPWIsZ2Y9bnVsbDticmVhaztjYXNlIFwiYmx1clwiOmdmPWZmPWVmPW51bGw7YnJlYWs7Y2FzZSBcIm1vdXNlZG93blwiOmhmPSEwO2JyZWFrO2Nhc2UgXCJjb250ZXh0bWVudVwiOmNhc2UgXCJtb3VzZXVwXCI6Y2FzZSBcImRyYWdlbmRcIjpyZXR1cm4gaGY9ITEsamYoYyxkKTtjYXNlIFwic2VsZWN0aW9uY2hhbmdlXCI6aWYoY2YpYnJlYWs7XG5jYXNlIFwia2V5ZG93blwiOmNhc2UgXCJrZXl1cFwiOnJldHVybiBqZihjLGQpfXJldHVybiBudWxsfX0sbGY9Ry5leHRlbmQoe2FuaW1hdGlvbk5hbWU6bnVsbCxlbGFwc2VkVGltZTpudWxsLHBzZXVkb0VsZW1lbnQ6bnVsbH0pLG1mPUcuZXh0ZW5kKHtjbGlwYm9hcmREYXRhOmZ1bmN0aW9uKGEpe3JldHVyblwiY2xpcGJvYXJkRGF0YVwiaW4gYT9hLmNsaXBib2FyZERhdGE6d2luZG93LmNsaXBib2FyZERhdGF9fSksbmY9TmUuZXh0ZW5kKHtyZWxhdGVkVGFyZ2V0Om51bGx9KTtmdW5jdGlvbiBvZihhKXt2YXIgYj1hLmtleUNvZGU7XCJjaGFyQ29kZVwiaW4gYT8oYT1hLmNoYXJDb2RlLDA9PT1hJiYxMz09PWImJihhPTEzKSk6YT1iOzEwPT09YSYmKGE9MTMpO3JldHVybiAzMjw9YXx8MTM9PT1hP2E6MH1cbnZhciBwZj17RXNjOlwiRXNjYXBlXCIsU3BhY2ViYXI6XCIgXCIsTGVmdDpcIkFycm93TGVmdFwiLFVwOlwiQXJyb3dVcFwiLFJpZ2h0OlwiQXJyb3dSaWdodFwiLERvd246XCJBcnJvd0Rvd25cIixEZWw6XCJEZWxldGVcIixXaW46XCJPU1wiLE1lbnU6XCJDb250ZXh0TWVudVwiLEFwcHM6XCJDb250ZXh0TWVudVwiLFNjcm9sbDpcIlNjcm9sbExvY2tcIixNb3pQcmludGFibGVLZXk6XCJVbmlkZW50aWZpZWRcIn0scWY9ezg6XCJCYWNrc3BhY2VcIiw5OlwiVGFiXCIsMTI6XCJDbGVhclwiLDEzOlwiRW50ZXJcIiwxNjpcIlNoaWZ0XCIsMTc6XCJDb250cm9sXCIsMTg6XCJBbHRcIiwxOTpcIlBhdXNlXCIsMjA6XCJDYXBzTG9ja1wiLDI3OlwiRXNjYXBlXCIsMzI6XCIgXCIsMzM6XCJQYWdlVXBcIiwzNDpcIlBhZ2VEb3duXCIsMzU6XCJFbmRcIiwzNjpcIkhvbWVcIiwzNzpcIkFycm93TGVmdFwiLDM4OlwiQXJyb3dVcFwiLDM5OlwiQXJyb3dSaWdodFwiLDQwOlwiQXJyb3dEb3duXCIsNDU6XCJJbnNlcnRcIiw0NjpcIkRlbGV0ZVwiLDExMjpcIkYxXCIsMTEzOlwiRjJcIiwxMTQ6XCJGM1wiLDExNTpcIkY0XCIsXG4xMTY6XCJGNVwiLDExNzpcIkY2XCIsMTE4OlwiRjdcIiwxMTk6XCJGOFwiLDEyMDpcIkY5XCIsMTIxOlwiRjEwXCIsMTIyOlwiRjExXCIsMTIzOlwiRjEyXCIsMTQ0OlwiTnVtTG9ja1wiLDE0NTpcIlNjcm9sbExvY2tcIiwyMjQ6XCJNZXRhXCJ9LHJmPU5lLmV4dGVuZCh7a2V5OmZ1bmN0aW9uKGEpe2lmKGEua2V5KXt2YXIgYj1wZlthLmtleV18fGEua2V5O2lmKFwiVW5pZGVudGlmaWVkXCIhPT1iKXJldHVybiBifXJldHVyblwia2V5cHJlc3NcIj09PWEudHlwZT8oYT1vZihhKSwxMz09PWE/XCJFbnRlclwiOlN0cmluZy5mcm9tQ2hhckNvZGUoYSkpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/cWZbYS5rZXlDb2RlXXx8XCJVbmlkZW50aWZpZWRcIjpcIlwifSxsb2NhdGlvbjpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxyZXBlYXQ6bnVsbCxsb2NhbGU6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlLGNoYXJDb2RlOmZ1bmN0aW9uKGEpe3JldHVyblwia2V5cHJlc3NcIj09PVxuYS50eXBlP29mKGEpOjB9LGtleUNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH0sd2hpY2g6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlP29mKGEpOlwia2V5ZG93blwiPT09YS50eXBlfHxcImtleXVwXCI9PT1hLnR5cGU/YS5rZXlDb2RlOjB9fSksc2Y9VmUuZXh0ZW5kKHtkYXRhVHJhbnNmZXI6bnVsbH0pLHRmPU5lLmV4dGVuZCh7dG91Y2hlczpudWxsLHRhcmdldFRvdWNoZXM6bnVsbCxjaGFuZ2VkVG91Y2hlczpudWxsLGFsdEtleTpudWxsLG1ldGFLZXk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxnZXRNb2RpZmllclN0YXRlOlFlfSksdWY9Ry5leHRlbmQoe3Byb3BlcnR5TmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksdmY9VmUuZXh0ZW5kKHtkZWx0YVg6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVhcImluIGE/YS5kZWx0YVg6XCJ3aGVlbERlbHRhWFwiaW5cbmE/LWEud2hlZWxEZWx0YVg6MH0sZGVsdGFZOmZ1bmN0aW9uKGEpe3JldHVyblwiZGVsdGFZXCJpbiBhP2EuZGVsdGFZOlwid2hlZWxEZWx0YVlcImluIGE/LWEud2hlZWxEZWx0YVk6XCJ3aGVlbERlbHRhXCJpbiBhPy1hLndoZWVsRGVsdGE6MH0sZGVsdGFaOm51bGwsZGVsdGFNb2RlOm51bGx9KSx3Zj17ZXZlbnRUeXBlczpXYyxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPVljLmdldChhKTtpZighZSlyZXR1cm4gbnVsbDtzd2l0Y2goYSl7Y2FzZSBcImtleXByZXNzXCI6aWYoMD09PW9mKGMpKXJldHVybiBudWxsO2Nhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6YT1yZjticmVhaztjYXNlIFwiYmx1clwiOmNhc2UgXCJmb2N1c1wiOmE9bmY7YnJlYWs7Y2FzZSBcImNsaWNrXCI6aWYoMj09PWMuYnV0dG9uKXJldHVybiBudWxsO2Nhc2UgXCJhdXhjbGlja1wiOmNhc2UgXCJkYmxjbGlja1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwibW91c2Vtb3ZlXCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwibW91c2VvdXRcIjpjYXNlIFwibW91c2VvdmVyXCI6Y2FzZSBcImNvbnRleHRtZW51XCI6YT1cblZlO2JyZWFrO2Nhc2UgXCJkcmFnXCI6Y2FzZSBcImRyYWdlbmRcIjpjYXNlIFwiZHJhZ2VudGVyXCI6Y2FzZSBcImRyYWdleGl0XCI6Y2FzZSBcImRyYWdsZWF2ZVwiOmNhc2UgXCJkcmFnb3ZlclwiOmNhc2UgXCJkcmFnc3RhcnRcIjpjYXNlIFwiZHJvcFwiOmE9c2Y7YnJlYWs7Y2FzZSBcInRvdWNoY2FuY2VsXCI6Y2FzZSBcInRvdWNoZW5kXCI6Y2FzZSBcInRvdWNobW92ZVwiOmNhc2UgXCJ0b3VjaHN0YXJ0XCI6YT10ZjticmVhaztjYXNlIFhiOmNhc2UgWWI6Y2FzZSBaYjphPWxmO2JyZWFrO2Nhc2UgJGI6YT11ZjticmVhaztjYXNlIFwic2Nyb2xsXCI6YT1OZTticmVhaztjYXNlIFwid2hlZWxcIjphPXZmO2JyZWFrO2Nhc2UgXCJjb3B5XCI6Y2FzZSBcImN1dFwiOmNhc2UgXCJwYXN0ZVwiOmE9bWY7YnJlYWs7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcImxvc3Rwb2ludGVyY2FwdHVyZVwiOmNhc2UgXCJwb2ludGVyY2FuY2VsXCI6Y2FzZSBcInBvaW50ZXJkb3duXCI6Y2FzZSBcInBvaW50ZXJtb3ZlXCI6Y2FzZSBcInBvaW50ZXJvdXRcIjpjYXNlIFwicG9pbnRlcm92ZXJcIjpjYXNlIFwicG9pbnRlcnVwXCI6YT1cbldlO2JyZWFrO2RlZmF1bHQ6YT1HfWI9YS5nZXRQb29sZWQoZSxiLGMsZCk7WGQoYik7cmV0dXJuIGJ9fTtpZihwYSl0aHJvdyBFcnJvcih1KDEwMSkpO3BhPUFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKFwiUmVzcG9uZGVyRXZlbnRQbHVnaW4gU2ltcGxlRXZlbnRQbHVnaW4gRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIENoYW5nZUV2ZW50UGx1Z2luIFNlbGVjdEV2ZW50UGx1Z2luIEJlZm9yZUlucHV0RXZlbnRQbHVnaW5cIi5zcGxpdChcIiBcIikpO3JhKCk7dmFyIHhmPU5jO2xhPVFkO21hPXhmO25hPVBkO3hhKHtTaW1wbGVFdmVudFBsdWdpbjp3ZixFbnRlckxlYXZlRXZlbnRQbHVnaW46WWUsQ2hhbmdlRXZlbnRQbHVnaW46TWUsU2VsZWN0RXZlbnRQbHVnaW46a2YsQmVmb3JlSW5wdXRFdmVudFBsdWdpbjp2ZX0pO3ZhciB5Zj1bXSx6Zj0tMTtmdW5jdGlvbiBIKGEpezA+emZ8fChhLmN1cnJlbnQ9eWZbemZdLHlmW3pmXT1udWxsLHpmLS0pfVxuZnVuY3Rpb24gSShhLGIpe3pmKys7eWZbemZdPWEuY3VycmVudDthLmN1cnJlbnQ9Yn12YXIgQWY9e30sSj17Y3VycmVudDpBZn0sSz17Y3VycmVudDohMX0sQmY9QWY7ZnVuY3Rpb24gQ2YoYSxiKXt2YXIgYz1hLnR5cGUuY29udGV4dFR5cGVzO2lmKCFjKXJldHVybiBBZjt2YXIgZD1hLnN0YXRlTm9kZTtpZihkJiZkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9PT1iKXJldHVybiBkLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0O3ZhciBlPXt9LGY7Zm9yKGYgaW4gYyllW2ZdPWJbZl07ZCYmKGE9YS5zdGF0ZU5vZGUsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZFVubWFza2VkQ2hpbGRDb250ZXh0PWIsYS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1hc2tlZENoaWxkQ29udGV4dD1lKTtyZXR1cm4gZX1mdW5jdGlvbiBMKGEpe2E9YS5jaGlsZENvbnRleHRUeXBlcztyZXR1cm4gbnVsbCE9PWEmJnZvaWQgMCE9PWF9XG5mdW5jdGlvbiBEZigpe0goSyk7SChKKX1mdW5jdGlvbiBFZihhLGIsYyl7aWYoSi5jdXJyZW50IT09QWYpdGhyb3cgRXJyb3IodSgxNjgpKTtJKEosYik7SShLLGMpfWZ1bmN0aW9uIEZmKGEsYixjKXt2YXIgZD1hLnN0YXRlTm9kZTthPWIuY2hpbGRDb250ZXh0VHlwZXM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQuZ2V0Q2hpbGRDb250ZXh0KXJldHVybiBjO2Q9ZC5nZXRDaGlsZENvbnRleHQoKTtmb3IodmFyIGUgaW4gZClpZighKGUgaW4gYSkpdGhyb3cgRXJyb3IodSgxMDgscGIoYil8fFwiVW5rbm93blwiLGUpKTtyZXR1cm4gbih7fSxjLHt9LGQpfWZ1bmN0aW9uIEdmKGEpe2E9KGE9YS5zdGF0ZU5vZGUpJiZhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0fHxBZjtCZj1KLmN1cnJlbnQ7SShKLGEpO0koSyxLLmN1cnJlbnQpO3JldHVybiEwfVxuZnVuY3Rpb24gSGYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2lmKCFkKXRocm93IEVycm9yKHUoMTY5KSk7Yz8oYT1GZihhLGIsQmYpLGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHQ9YSxIKEspLEgoSiksSShKLGEpKTpIKEspO0koSyxjKX1cbnZhciBJZj1yLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSxKZj1yLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2ssS2Y9ci51bnN0YWJsZV9jYW5jZWxDYWxsYmFjayxMZj1yLnVuc3RhYmxlX3JlcXVlc3RQYWludCxNZj1yLnVuc3RhYmxlX25vdyxOZj1yLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsLE9mPXIudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHksUGY9ci51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSxRZj1yLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5LFJmPXIudW5zdGFibGVfTG93UHJpb3JpdHksU2Y9ci51bnN0YWJsZV9JZGxlUHJpb3JpdHksVGY9e30sVWY9ci51bnN0YWJsZV9zaG91bGRZaWVsZCxWZj12b2lkIDAhPT1MZj9MZjpmdW5jdGlvbigpe30sV2Y9bnVsbCxYZj1udWxsLFlmPSExLFpmPU1mKCksJGY9MUU0PlpmP01mOmZ1bmN0aW9uKCl7cmV0dXJuIE1mKCktWmZ9O1xuZnVuY3Rpb24gYWcoKXtzd2l0Y2goTmYoKSl7Y2FzZSBPZjpyZXR1cm4gOTk7Y2FzZSBQZjpyZXR1cm4gOTg7Y2FzZSBRZjpyZXR1cm4gOTc7Y2FzZSBSZjpyZXR1cm4gOTY7Y2FzZSBTZjpyZXR1cm4gOTU7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gYmcoYSl7c3dpdGNoKGEpe2Nhc2UgOTk6cmV0dXJuIE9mO2Nhc2UgOTg6cmV0dXJuIFBmO2Nhc2UgOTc6cmV0dXJuIFFmO2Nhc2UgOTY6cmV0dXJuIFJmO2Nhc2UgOTU6cmV0dXJuIFNmO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMzIpKTt9fWZ1bmN0aW9uIGNnKGEsYil7YT1iZyhhKTtyZXR1cm4gSWYoYSxiKX1mdW5jdGlvbiBkZyhhLGIsYyl7YT1iZyhhKTtyZXR1cm4gSmYoYSxiLGMpfWZ1bmN0aW9uIGVnKGEpe251bGw9PT1XZj8oV2Y9W2FdLFhmPUpmKE9mLGZnKSk6V2YucHVzaChhKTtyZXR1cm4gVGZ9ZnVuY3Rpb24gZ2coKXtpZihudWxsIT09WGYpe3ZhciBhPVhmO1hmPW51bGw7S2YoYSl9ZmcoKX1cbmZ1bmN0aW9uIGZnKCl7aWYoIVlmJiZudWxsIT09V2Ype1lmPSEwO3ZhciBhPTA7dHJ5e3ZhciBiPVdmO2NnKDk5LGZ1bmN0aW9uKCl7Zm9yKDthPGIubGVuZ3RoO2ErKyl7dmFyIGM9YlthXTtkbyBjPWMoITApO3doaWxlKG51bGwhPT1jKX19KTtXZj1udWxsfWNhdGNoKGMpe3Rocm93IG51bGwhPT1XZiYmKFdmPVdmLnNsaWNlKGErMSkpLEpmKE9mLGdnKSxjO31maW5hbGx5e1lmPSExfX19ZnVuY3Rpb24gaGcoYSxiLGMpe2MvPTEwO3JldHVybiAxMDczNzQxODIxLSgoKDEwNzM3NDE4MjEtYStiLzEwKS9jfDApKzEpKmN9ZnVuY3Rpb24gaWcoYSxiKXtpZihhJiZhLmRlZmF1bHRQcm9wcyl7Yj1uKHt9LGIpO2E9YS5kZWZhdWx0UHJvcHM7Zm9yKHZhciBjIGluIGEpdm9pZCAwPT09YltjXSYmKGJbY109YVtjXSl9cmV0dXJuIGJ9dmFyIGpnPXtjdXJyZW50Om51bGx9LGtnPW51bGwsbGc9bnVsbCxtZz1udWxsO2Z1bmN0aW9uIG5nKCl7bWc9bGc9a2c9bnVsbH1cbmZ1bmN0aW9uIG9nKGEpe3ZhciBiPWpnLmN1cnJlbnQ7SChqZyk7YS50eXBlLl9jb250ZXh0Ll9jdXJyZW50VmFsdWU9Yn1mdW5jdGlvbiBwZyhhLGIpe2Zvcig7bnVsbCE9PWE7KXt2YXIgYz1hLmFsdGVybmF0ZTtpZihhLmNoaWxkRXhwaXJhdGlvblRpbWU8YilhLmNoaWxkRXhwaXJhdGlvblRpbWU9YixudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7ZWxzZSBpZihudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGIpYy5jaGlsZEV4cGlyYXRpb25UaW1lPWI7ZWxzZSBicmVhazthPWEucmV0dXJufX1mdW5jdGlvbiBxZyhhLGIpe2tnPWE7bWc9bGc9bnVsbDthPWEuZGVwZW5kZW5jaWVzO251bGwhPT1hJiZudWxsIT09YS5maXJzdENvbnRleHQmJihhLmV4cGlyYXRpb25UaW1lPj1iJiYocmc9ITApLGEuZmlyc3RDb250ZXh0PW51bGwpfVxuZnVuY3Rpb24gc2coYSxiKXtpZihtZyE9PWEmJiExIT09YiYmMCE9PWIpe2lmKFwibnVtYmVyXCIhPT10eXBlb2YgYnx8MTA3Mzc0MTgyMz09PWIpbWc9YSxiPTEwNzM3NDE4MjM7Yj17Y29udGV4dDphLG9ic2VydmVkQml0czpiLG5leHQ6bnVsbH07aWYobnVsbD09PWxnKXtpZihudWxsPT09a2cpdGhyb3cgRXJyb3IodSgzMDgpKTtsZz1iO2tnLmRlcGVuZGVuY2llcz17ZXhwaXJhdGlvblRpbWU6MCxmaXJzdENvbnRleHQ6YixyZXNwb25kZXJzOm51bGx9fWVsc2UgbGc9bGcubmV4dD1ifXJldHVybiBhLl9jdXJyZW50VmFsdWV9dmFyIHRnPSExO2Z1bmN0aW9uIHVnKGEpe2EudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLm1lbW9pemVkU3RhdGUsYmFzZVF1ZXVlOm51bGwsc2hhcmVkOntwZW5kaW5nOm51bGx9LGVmZmVjdHM6bnVsbH19XG5mdW5jdGlvbiB2ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtiLnVwZGF0ZVF1ZXVlPT09YSYmKGIudXBkYXRlUXVldWU9e2Jhc2VTdGF0ZTphLmJhc2VTdGF0ZSxiYXNlUXVldWU6YS5iYXNlUXVldWUsc2hhcmVkOmEuc2hhcmVkLGVmZmVjdHM6YS5lZmZlY3RzfSl9ZnVuY3Rpb24gd2coYSxiKXthPXtleHBpcmF0aW9uVGltZTphLHN1c3BlbnNlQ29uZmlnOmIsdGFnOjAscGF5bG9hZDpudWxsLGNhbGxiYWNrOm51bGwsbmV4dDpudWxsfTtyZXR1cm4gYS5uZXh0PWF9ZnVuY3Rpb24geGcoYSxiKXthPWEudXBkYXRlUXVldWU7aWYobnVsbCE9PWEpe2E9YS5zaGFyZWQ7dmFyIGM9YS5wZW5kaW5nO251bGw9PT1jP2IubmV4dD1iOihiLm5leHQ9Yy5uZXh0LGMubmV4dD1iKTthLnBlbmRpbmc9Yn19XG5mdW5jdGlvbiB5ZyhhLGIpe3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZ2ZyhjLGEpO2E9YS51cGRhdGVRdWV1ZTtjPWEuYmFzZVF1ZXVlO251bGw9PT1jPyhhLmJhc2VRdWV1ZT1iLm5leHQ9YixiLm5leHQ9Yik6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpfVxuZnVuY3Rpb24gemcoYSxiLGMsZCl7dmFyIGU9YS51cGRhdGVRdWV1ZTt0Zz0hMTt2YXIgZj1lLmJhc2VRdWV1ZSxnPWUuc2hhcmVkLnBlbmRpbmc7aWYobnVsbCE9PWcpe2lmKG51bGwhPT1mKXt2YXIgaD1mLm5leHQ7Zi5uZXh0PWcubmV4dDtnLm5leHQ9aH1mPWc7ZS5zaGFyZWQucGVuZGluZz1udWxsO2g9YS5hbHRlcm5hdGU7bnVsbCE9PWgmJihoPWgudXBkYXRlUXVldWUsbnVsbCE9PWgmJihoLmJhc2VRdWV1ZT1nKSl9aWYobnVsbCE9PWYpe2g9Zi5uZXh0O3ZhciBrPWUuYmFzZVN0YXRlLGw9MCxtPW51bGwscD1udWxsLHg9bnVsbDtpZihudWxsIT09aCl7dmFyIHo9aDtkb3tnPXouZXhwaXJhdGlvblRpbWU7aWYoZzxkKXt2YXIgY2E9e2V4cGlyYXRpb25UaW1lOnouZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9O251bGw9PT14PyhwPXg9XG5jYSxtPWspOng9eC5uZXh0PWNhO2c+bCYmKGw9Zyl9ZWxzZXtudWxsIT09eCYmKHg9eC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOnouc3VzcGVuc2VDb25maWcsdGFnOnoudGFnLHBheWxvYWQ6ei5wYXlsb2FkLGNhbGxiYWNrOnouY2FsbGJhY2ssbmV4dDpudWxsfSk7QWcoZyx6LnN1c3BlbnNlQ29uZmlnKTthOnt2YXIgRD1hLHQ9ejtnPWI7Y2E9Yztzd2l0Y2godC50YWcpe2Nhc2UgMTpEPXQucGF5bG9hZDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgRCl7az1ELmNhbGwoY2EsayxnKTticmVhayBhfWs9RDticmVhayBhO2Nhc2UgMzpELmVmZmVjdFRhZz1ELmVmZmVjdFRhZyYtNDA5N3w2NDtjYXNlIDA6RD10LnBheWxvYWQ7Zz1cImZ1bmN0aW9uXCI9PT10eXBlb2YgRD9ELmNhbGwoY2EsayxnKTpEO2lmKG51bGw9PT1nfHx2b2lkIDA9PT1nKWJyZWFrIGE7az1uKHt9LGssZyk7YnJlYWsgYTtjYXNlIDI6dGc9ITB9fW51bGwhPT16LmNhbGxiYWNrJiZcbihhLmVmZmVjdFRhZ3w9MzIsZz1lLmVmZmVjdHMsbnVsbD09PWc/ZS5lZmZlY3RzPVt6XTpnLnB1c2goeikpfXo9ei5uZXh0O2lmKG51bGw9PT16fHx6PT09aClpZihnPWUuc2hhcmVkLnBlbmRpbmcsbnVsbD09PWcpYnJlYWs7ZWxzZSB6PWYubmV4dD1nLm5leHQsZy5uZXh0PWgsZS5iYXNlUXVldWU9Zj1nLGUuc2hhcmVkLnBlbmRpbmc9bnVsbH13aGlsZSgxKX1udWxsPT09eD9tPWs6eC5uZXh0PXA7ZS5iYXNlU3RhdGU9bTtlLmJhc2VRdWV1ZT14O0JnKGwpO2EuZXhwaXJhdGlvblRpbWU9bDthLm1lbW9pemVkU3RhdGU9a319XG5mdW5jdGlvbiBDZyhhLGIsYyl7YT1iLmVmZmVjdHM7Yi5lZmZlY3RzPW51bGw7aWYobnVsbCE9PWEpZm9yKGI9MDtiPGEubGVuZ3RoO2IrKyl7dmFyIGQ9YVtiXSxlPWQuY2FsbGJhY2s7aWYobnVsbCE9PWUpe2QuY2FsbGJhY2s9bnVsbDtkPWU7ZT1jO2lmKFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBkKXRocm93IEVycm9yKHUoMTkxLGQpKTtkLmNhbGwoZSl9fX12YXIgRGc9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsRWc9KG5ldyBhYS5Db21wb25lbnQpLnJlZnM7ZnVuY3Rpb24gRmcoYSxiLGMsZCl7Yj1hLm1lbW9pemVkU3RhdGU7Yz1jKGQsYik7Yz1udWxsPT09Y3x8dm9pZCAwPT09Yz9iOm4oe30sYixjKTthLm1lbW9pemVkU3RhdGU9YzswPT09YS5leHBpcmF0aW9uVGltZSYmKGEudXBkYXRlUXVldWUuYmFzZVN0YXRlPWMpfVxudmFyIEpnPXtpc01vdW50ZWQ6ZnVuY3Rpb24oYSl7cmV0dXJuKGE9YS5fcmVhY3RJbnRlcm5hbEZpYmVyKT9kYyhhKT09PWE6ITF9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbihhLGIsYyl7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGQ9R2coKSxlPURnLnN1c3BlbnNlO2Q9SGcoZCxhLGUpO2U9d2coZCxlKTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlUmVwbGFjZVN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UudGFnPTE7ZS5wYXlsb2FkPWI7dm9pZCAwIT09YyYmbnVsbCE9PWMmJihlLmNhbGxiYWNrPWMpO3hnKGEsZSk7SWcoYSxkKX0sZW5xdWV1ZUZvcmNlVXBkYXRlOmZ1bmN0aW9uKGEsYil7YT1hLl9yZWFjdEludGVybmFsRmliZXI7dmFyIGM9R2coKSxkPURnLnN1c3BlbnNlO1xuYz1IZyhjLGEsZCk7ZD13ZyhjLGQpO2QudGFnPTI7dm9pZCAwIT09YiYmbnVsbCE9PWImJihkLmNhbGxiYWNrPWIpO3hnKGEsZCk7SWcoYSxjKX19O2Z1bmN0aW9uIEtnKGEsYixjLGQsZSxmLGcpe2E9YS5zdGF0ZU5vZGU7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGEuc2hvdWxkQ29tcG9uZW50VXBkYXRlP2Euc2hvdWxkQ29tcG9uZW50VXBkYXRlKGQsZixnKTpiLnByb3RvdHlwZSYmYi5wcm90b3R5cGUuaXNQdXJlUmVhY3RDb21wb25lbnQ/IWJmKGMsZCl8fCFiZihlLGYpOiEwfVxuZnVuY3Rpb24gTGcoYSxiLGMpe3ZhciBkPSExLGU9QWY7dmFyIGY9Yi5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mP2Y9c2coZik6KGU9TChiKT9CZjpKLmN1cnJlbnQsZD1iLmNvbnRleHRUeXBlcyxmPShkPW51bGwhPT1kJiZ2b2lkIDAhPT1kKT9DZihhLGUpOkFmKTtiPW5ldyBiKGMsZik7YS5tZW1vaXplZFN0YXRlPW51bGwhPT1iLnN0YXRlJiZ2b2lkIDAhPT1iLnN0YXRlP2Iuc3RhdGU6bnVsbDtiLnVwZGF0ZXI9Smc7YS5zdGF0ZU5vZGU9YjtiLl9yZWFjdEludGVybmFsRmliZXI9YTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9ZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWYpO3JldHVybiBifVxuZnVuY3Rpb24gTWcoYSxiLGMsZCl7YT1iLnN0YXRlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhjLGQpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZiLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7Yi5zdGF0ZSE9PWEmJkpnLmVucXVldWVSZXBsYWNlU3RhdGUoYixiLnN0YXRlLG51bGwpfVxuZnVuY3Rpb24gTmcoYSxiLGMsZCl7dmFyIGU9YS5zdGF0ZU5vZGU7ZS5wcm9wcz1jO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2UucmVmcz1FZzt1ZyhhKTt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/ZS5jb250ZXh0PXNnKGYpOihmPUwoYik/QmY6Si5jdXJyZW50LGUuY29udGV4dD1DZihhLGYpKTt6ZyhhLGMsZSxkKTtlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtmPWIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBmJiYoRmcoYSxiLGYsYyksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBiLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wc3x8XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudHx8XG4oYj1lLnN0YXRlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudFdpbGxNb3VudCYmZS5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSxiIT09ZS5zdGF0ZSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShlLGUuc3RhdGUsbnVsbCksemcoYSxjLGUsZCksZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGUpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlLmNvbXBvbmVudERpZE1vdW50JiYoYS5lZmZlY3RUYWd8PTQpfXZhciBPZz1BcnJheS5pc0FycmF5O1xuZnVuY3Rpb24gUGcoYSxiLGMpe2E9Yy5yZWY7aWYobnVsbCE9PWEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZcIm9iamVjdFwiIT09dHlwZW9mIGEpe2lmKGMuX293bmVyKXtjPWMuX293bmVyO2lmKGMpe2lmKDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDMwOSkpO3ZhciBkPWMuc3RhdGVOb2RlfWlmKCFkKXRocm93IEVycm9yKHUoMTQ3LGEpKTt2YXIgZT1cIlwiK2E7aWYobnVsbCE9PWImJm51bGwhPT1iLnJlZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGIucmVmJiZiLnJlZi5fc3RyaW5nUmVmPT09ZSlyZXR1cm4gYi5yZWY7Yj1mdW5jdGlvbihhKXt2YXIgYj1kLnJlZnM7Yj09PUVnJiYoYj1kLnJlZnM9e30pO251bGw9PT1hP2RlbGV0ZSBiW2VdOmJbZV09YX07Yi5fc3RyaW5nUmVmPWU7cmV0dXJuIGJ9aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBhKXRocm93IEVycm9yKHUoMjg0KSk7aWYoIWMuX293bmVyKXRocm93IEVycm9yKHUoMjkwLGEpKTt9cmV0dXJuIGF9XG5mdW5jdGlvbiBRZyhhLGIpe2lmKFwidGV4dGFyZWFcIiE9PWEudHlwZSl0aHJvdyBFcnJvcih1KDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1PYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYik/XCJvYmplY3Qgd2l0aCBrZXlzIHtcIitPYmplY3Qua2V5cyhiKS5qb2luKFwiLCBcIikrXCJ9XCI6YixcIlwiKSk7fVxuZnVuY3Rpb24gUmcoYSl7ZnVuY3Rpb24gYihiLGMpe2lmKGEpe3ZhciBkPWIubGFzdEVmZmVjdDtudWxsIT09ZD8oZC5uZXh0RWZmZWN0PWMsYi5sYXN0RWZmZWN0PWMpOmIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PWM7Yy5uZXh0RWZmZWN0PW51bGw7Yy5lZmZlY3RUYWc9OH19ZnVuY3Rpb24gYyhjLGQpe2lmKCFhKXJldHVybiBudWxsO2Zvcig7bnVsbCE9PWQ7KWIoYyxkKSxkPWQuc2libGluZztyZXR1cm4gbnVsbH1mdW5jdGlvbiBkKGEsYil7Zm9yKGE9bmV3IE1hcDtudWxsIT09YjspbnVsbCE9PWIua2V5P2Euc2V0KGIua2V5LGIpOmEuc2V0KGIuaW5kZXgsYiksYj1iLnNpYmxpbmc7cmV0dXJuIGF9ZnVuY3Rpb24gZShhLGIpe2E9U2coYSxiKTthLmluZGV4PTA7YS5zaWJsaW5nPW51bGw7cmV0dXJuIGF9ZnVuY3Rpb24gZihiLGMsZCl7Yi5pbmRleD1kO2lmKCFhKXJldHVybiBjO2Q9Yi5hbHRlcm5hdGU7aWYobnVsbCE9PWQpcmV0dXJuIGQ9ZC5pbmRleCxkPGM/KGIuZWZmZWN0VGFnPVxuMixjKTpkO2IuZWZmZWN0VGFnPTI7cmV0dXJuIGN9ZnVuY3Rpb24gZyhiKXthJiZudWxsPT09Yi5hbHRlcm5hdGUmJihiLmVmZmVjdFRhZz0yKTtyZXR1cm4gYn1mdW5jdGlvbiBoKGEsYixjLGQpe2lmKG51bGw9PT1ifHw2IT09Yi50YWcpcmV0dXJuIGI9VGcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gayhhLGIsYyxkKXtpZihudWxsIT09YiYmYi5lbGVtZW50VHlwZT09PWMudHlwZSlyZXR1cm4gZD1lKGIsYy5wcm9wcyksZC5yZWY9UGcoYSxiLGMpLGQucmV0dXJuPWEsZDtkPVVnKGMudHlwZSxjLmtleSxjLnByb3BzLG51bGwsYS5tb2RlLGQpO2QucmVmPVBnKGEsYixjKTtkLnJldHVybj1hO3JldHVybiBkfWZ1bmN0aW9uIGwoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDQhPT1iLnRhZ3x8Yi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyE9PWMuY29udGFpbmVySW5mb3x8Yi5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb24hPT1cbmMuaW1wbGVtZW50YXRpb24pcmV0dXJuIGI9VmcoYyxhLm1vZGUsZCksYi5yZXR1cm49YSxiO2I9ZShiLGMuY2hpbGRyZW58fFtdKTtiLnJldHVybj1hO3JldHVybiBifWZ1bmN0aW9uIG0oYSxiLGMsZCxmKXtpZihudWxsPT09Ynx8NyE9PWIudGFnKXJldHVybiBiPVdnKGMsYS5tb2RlLGQsZiksYi5yZXR1cm49YSxiO2I9ZShiLGMpO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gcChhLGIsYyl7aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBifHxcIm51bWJlclwiPT09dHlwZW9mIGIpcmV0dXJuIGI9VGcoXCJcIitiLGEubW9kZSxjKSxiLnJldHVybj1hLGI7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBiJiZudWxsIT09Yil7c3dpdGNoKGIuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGM9VWcoYi50eXBlLGIua2V5LGIucHJvcHMsbnVsbCxhLm1vZGUsYyksYy5yZWY9UGcoYSxudWxsLGIpLGMucmV0dXJuPWEsYztjYXNlICRhOnJldHVybiBiPVZnKGIsYS5tb2RlLGMpLGIucmV0dXJuPWEsYn1pZihPZyhiKXx8XG5uYihiKSlyZXR1cm4gYj1XZyhiLGEubW9kZSxjLG51bGwpLGIucmV0dXJuPWEsYjtRZyhhLGIpfXJldHVybiBudWxsfWZ1bmN0aW9uIHgoYSxiLGMsZCl7dmFyIGU9bnVsbCE9PWI/Yi5rZXk6bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGN8fFwibnVtYmVyXCI9PT10eXBlb2YgYylyZXR1cm4gbnVsbCE9PWU/bnVsbDpoKGEsYixcIlwiK2MsZCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7c3dpdGNoKGMuJCR0eXBlb2Ype2Nhc2UgWmE6cmV0dXJuIGMua2V5PT09ZT9jLnR5cGU9PT1hYj9tKGEsYixjLnByb3BzLmNoaWxkcmVuLGQsZSk6ayhhLGIsYyxkKTpudWxsO2Nhc2UgJGE6cmV0dXJuIGMua2V5PT09ZT9sKGEsYixjLGQpOm51bGx9aWYoT2coYyl8fG5iKGMpKXJldHVybiBudWxsIT09ZT9udWxsOm0oYSxiLGMsZCxudWxsKTtRZyhhLGMpfXJldHVybiBudWxsfWZ1bmN0aW9uIHooYSxiLGMsZCxlKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGR8fFwibnVtYmVyXCI9PT10eXBlb2YgZClyZXR1cm4gYT1cbmEuZ2V0KGMpfHxudWxsLGgoYixhLFwiXCIrZCxlKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGQmJm51bGwhPT1kKXtzd2l0Y2goZC4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsZC50eXBlPT09YWI/bShiLGEsZC5wcm9wcy5jaGlsZHJlbixlLGQua2V5KTprKGIsYSxkLGUpO2Nhc2UgJGE6cmV0dXJuIGE9YS5nZXQobnVsbD09PWQua2V5P2M6ZC5rZXkpfHxudWxsLGwoYixhLGQsZSl9aWYoT2coZCl8fG5iKGQpKXJldHVybiBhPWEuZ2V0KGMpfHxudWxsLG0oYixhLGQsZSxudWxsKTtRZyhiLGQpfXJldHVybiBudWxsfWZ1bmN0aW9uIGNhKGUsZyxoLGspe2Zvcih2YXIgbD1udWxsLHQ9bnVsbCxtPWcseT1nPTAsQT1udWxsO251bGwhPT1tJiZ5PGgubGVuZ3RoO3krKyl7bS5pbmRleD55PyhBPW0sbT1udWxsKTpBPW0uc2libGluZzt2YXIgcT14KGUsbSxoW3ldLGspO2lmKG51bGw9PT1xKXtudWxsPT09bSYmKG09QSk7YnJlYWt9YSYmXG5tJiZudWxsPT09cS5hbHRlcm5hdGUmJmIoZSxtKTtnPWYocSxnLHkpO251bGw9PT10P2w9cTp0LnNpYmxpbmc9cTt0PXE7bT1BfWlmKHk9PT1oLmxlbmd0aClyZXR1cm4gYyhlLG0pLGw7aWYobnVsbD09PW0pe2Zvcig7eTxoLmxlbmd0aDt5KyspbT1wKGUsaFt5XSxrKSxudWxsIT09bSYmKGc9ZihtLGcseSksbnVsbD09PXQ/bD1tOnQuc2libGluZz1tLHQ9bSk7cmV0dXJuIGx9Zm9yKG09ZChlLG0pO3k8aC5sZW5ndGg7eSsrKUE9eihtLGUseSxoW3ldLGspLG51bGwhPT1BJiYoYSYmbnVsbCE9PUEuYWx0ZXJuYXRlJiZtLmRlbGV0ZShudWxsPT09QS5rZXk/eTpBLmtleSksZz1mKEEsZyx5KSxudWxsPT09dD9sPUE6dC5zaWJsaW5nPUEsdD1BKTthJiZtLmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBsfWZ1bmN0aW9uIEQoZSxnLGgsbCl7dmFyIGs9bmIoaCk7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGspdGhyb3cgRXJyb3IodSgxNTApKTtoPWsuY2FsbChoKTtcbmlmKG51bGw9PWgpdGhyb3cgRXJyb3IodSgxNTEpKTtmb3IodmFyIG09az1udWxsLHQ9Zyx5PWc9MCxBPW51bGwscT1oLm5leHQoKTtudWxsIT09dCYmIXEuZG9uZTt5KysscT1oLm5leHQoKSl7dC5pbmRleD55PyhBPXQsdD1udWxsKTpBPXQuc2libGluZzt2YXIgRD14KGUsdCxxLnZhbHVlLGwpO2lmKG51bGw9PT1EKXtudWxsPT09dCYmKHQ9QSk7YnJlYWt9YSYmdCYmbnVsbD09PUQuYWx0ZXJuYXRlJiZiKGUsdCk7Zz1mKEQsZyx5KTtudWxsPT09bT9rPUQ6bS5zaWJsaW5nPUQ7bT1EO3Q9QX1pZihxLmRvbmUpcmV0dXJuIGMoZSx0KSxrO2lmKG51bGw9PT10KXtmb3IoOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT1wKGUscS52YWx1ZSxsKSxudWxsIT09cSYmKGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7cmV0dXJuIGt9Zm9yKHQ9ZChlLHQpOyFxLmRvbmU7eSsrLHE9aC5uZXh0KCkpcT16KHQsZSx5LHEudmFsdWUsbCksbnVsbCE9PXEmJihhJiZudWxsIT09XG5xLmFsdGVybmF0ZSYmdC5kZWxldGUobnVsbD09PXEua2V5P3k6cS5rZXkpLGc9ZihxLGcseSksbnVsbD09PW0/az1xOm0uc2libGluZz1xLG09cSk7YSYmdC5mb3JFYWNoKGZ1bmN0aW9uKGEpe3JldHVybiBiKGUsYSl9KTtyZXR1cm4ga31yZXR1cm4gZnVuY3Rpb24oYSxkLGYsaCl7dmFyIGs9XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09ZiYmZi50eXBlPT09YWImJm51bGw9PT1mLmtleTtrJiYoZj1mLnByb3BzLmNoaWxkcmVuKTt2YXIgbD1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mO2lmKGwpc3dpdGNoKGYuJCR0eXBlb2Ype2Nhc2UgWmE6YTp7bD1mLmtleTtmb3Ioaz1kO251bGwhPT1rOyl7aWYoay5rZXk9PT1sKXtzd2l0Y2goay50YWcpe2Nhc2UgNzppZihmLnR5cGU9PT1hYil7YyhhLGsuc2libGluZyk7ZD1lKGssZi5wcm9wcy5jaGlsZHJlbik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1icmVhaztkZWZhdWx0OmlmKGsuZWxlbWVudFR5cGU9PT1mLnR5cGUpe2MoYSxcbmsuc2libGluZyk7ZD1lKGssZi5wcm9wcyk7ZC5yZWY9UGcoYSxrLGYpO2QucmV0dXJuPWE7YT1kO2JyZWFrIGF9fWMoYSxrKTticmVha31lbHNlIGIoYSxrKTtrPWsuc2libGluZ31mLnR5cGU9PT1hYj8oZD1XZyhmLnByb3BzLmNoaWxkcmVuLGEubW9kZSxoLGYua2V5KSxkLnJldHVybj1hLGE9ZCk6KGg9VWcoZi50eXBlLGYua2V5LGYucHJvcHMsbnVsbCxhLm1vZGUsaCksaC5yZWY9UGcoYSxkLGYpLGgucmV0dXJuPWEsYT1oKX1yZXR1cm4gZyhhKTtjYXNlICRhOmE6e2ZvcihrPWYua2V5O251bGwhPT1kOyl7aWYoZC5rZXk9PT1rKWlmKDQ9PT1kLnRhZyYmZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbz09PWYuY29udGFpbmVySW5mbyYmZC5zdGF0ZU5vZGUuaW1wbGVtZW50YXRpb249PT1mLmltcGxlbWVudGF0aW9uKXtjKGEsZC5zaWJsaW5nKTtkPWUoZCxmLmNoaWxkcmVufHxbXSk7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX1lbHNle2MoYSxkKTticmVha31lbHNlIGIoYSxkKTtkPVxuZC5zaWJsaW5nfWQ9VmcoZixhLm1vZGUsaCk7ZC5yZXR1cm49YTthPWR9cmV0dXJuIGcoYSl9aWYoXCJzdHJpbmdcIj09PXR5cGVvZiBmfHxcIm51bWJlclwiPT09dHlwZW9mIGYpcmV0dXJuIGY9XCJcIitmLG51bGwhPT1kJiY2PT09ZC50YWc/KGMoYSxkLnNpYmxpbmcpLGQ9ZShkLGYpLGQucmV0dXJuPWEsYT1kKTooYyhhLGQpLGQ9VGcoZixhLm1vZGUsaCksZC5yZXR1cm49YSxhPWQpLGcoYSk7aWYoT2coZikpcmV0dXJuIGNhKGEsZCxmLGgpO2lmKG5iKGYpKXJldHVybiBEKGEsZCxmLGgpO2wmJlFnKGEsZik7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBmJiYhaylzd2l0Y2goYS50YWcpe2Nhc2UgMTpjYXNlIDA6dGhyb3cgYT1hLnR5cGUsRXJyb3IodSgxNTIsYS5kaXNwbGF5TmFtZXx8YS5uYW1lfHxcIkNvbXBvbmVudFwiKSk7fXJldHVybiBjKGEsZCl9fXZhciBYZz1SZyghMCksWWc9UmcoITEpLFpnPXt9LCRnPXtjdXJyZW50OlpnfSxhaD17Y3VycmVudDpaZ30sYmg9e2N1cnJlbnQ6Wmd9O1xuZnVuY3Rpb24gY2goYSl7aWYoYT09PVpnKXRocm93IEVycm9yKHUoMTc0KSk7cmV0dXJuIGF9ZnVuY3Rpb24gZGgoYSxiKXtJKGJoLGIpO0koYWgsYSk7SSgkZyxaZyk7YT1iLm5vZGVUeXBlO3N3aXRjaChhKXtjYXNlIDk6Y2FzZSAxMTpiPShiPWIuZG9jdW1lbnRFbGVtZW50KT9iLm5hbWVzcGFjZVVSSTpPYihudWxsLFwiXCIpO2JyZWFrO2RlZmF1bHQ6YT04PT09YT9iLnBhcmVudE5vZGU6YixiPWEubmFtZXNwYWNlVVJJfHxudWxsLGE9YS50YWdOYW1lLGI9T2IoYixhKX1IKCRnKTtJKCRnLGIpfWZ1bmN0aW9uIGVoKCl7SCgkZyk7SChhaCk7SChiaCl9ZnVuY3Rpb24gZmgoYSl7Y2goYmguY3VycmVudCk7dmFyIGI9Y2goJGcuY3VycmVudCk7dmFyIGM9T2IoYixhLnR5cGUpO2IhPT1jJiYoSShhaCxhKSxJKCRnLGMpKX1mdW5jdGlvbiBnaChhKXthaC5jdXJyZW50PT09YSYmKEgoJGcpLEgoYWgpKX12YXIgTT17Y3VycmVudDowfTtcbmZ1bmN0aW9uIGhoKGEpe2Zvcih2YXIgYj1hO251bGwhPT1iOyl7aWYoMTM9PT1iLnRhZyl7dmFyIGM9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbD09PWN8fGMuZGF0YT09PUJkfHxjLmRhdGE9PT1DZCkpcmV0dXJuIGJ9ZWxzZSBpZigxOT09PWIudGFnJiZ2b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMucmV2ZWFsT3JkZXIpe2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBifWVsc2UgaWYobnVsbCE9PWIuY2hpbGQpe2IuY2hpbGQucmV0dXJuPWI7Yj1iLmNoaWxkO2NvbnRpbnVlfWlmKGI9PT1hKWJyZWFrO2Zvcig7bnVsbD09PWIuc2libGluZzspe2lmKG51bGw9PT1iLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ31yZXR1cm4gbnVsbH1mdW5jdGlvbiBpaChhLGIpe3JldHVybntyZXNwb25kZXI6YSxwcm9wczpifX1cbnZhciBqaD1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGtoPVdhLlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnLGxoPTAsTj1udWxsLE89bnVsbCxQPW51bGwsbWg9ITE7ZnVuY3Rpb24gUSgpe3Rocm93IEVycm9yKHUoMzIxKSk7fWZ1bmN0aW9uIG5oKGEsYil7aWYobnVsbD09PWIpcmV0dXJuITE7Zm9yKHZhciBjPTA7YzxiLmxlbmd0aCYmYzxhLmxlbmd0aDtjKyspaWYoISRlKGFbY10sYltjXSkpcmV0dXJuITE7cmV0dXJuITB9XG5mdW5jdGlvbiBvaChhLGIsYyxkLGUsZil7bGg9ZjtOPWI7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2IuZXhwaXJhdGlvblRpbWU9MDtqaC5jdXJyZW50PW51bGw9PT1hfHxudWxsPT09YS5tZW1vaXplZFN0YXRlP3BoOnFoO2E9YyhkLGUpO2lmKGIuZXhwaXJhdGlvblRpbWU9PT1saCl7Zj0wO2Rve2IuZXhwaXJhdGlvblRpbWU9MDtpZighKDI1PmYpKXRocm93IEVycm9yKHUoMzAxKSk7Zis9MTtQPU89bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7amguY3VycmVudD1yaDthPWMoZCxlKX13aGlsZShiLmV4cGlyYXRpb25UaW1lPT09bGgpfWpoLmN1cnJlbnQ9c2g7Yj1udWxsIT09TyYmbnVsbCE9PU8ubmV4dDtsaD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYoYil0aHJvdyBFcnJvcih1KDMwMCkpO3JldHVybiBhfVxuZnVuY3Rpb24gdGgoKXt2YXIgYT17bWVtb2l6ZWRTdGF0ZTpudWxsLGJhc2VTdGF0ZTpudWxsLGJhc2VRdWV1ZTpudWxsLHF1ZXVlOm51bGwsbmV4dDpudWxsfTtudWxsPT09UD9OLm1lbW9pemVkU3RhdGU9UD1hOlA9UC5uZXh0PWE7cmV0dXJuIFB9ZnVuY3Rpb24gdWgoKXtpZihudWxsPT09Tyl7dmFyIGE9Ti5hbHRlcm5hdGU7YT1udWxsIT09YT9hLm1lbW9pemVkU3RhdGU6bnVsbH1lbHNlIGE9Ty5uZXh0O3ZhciBiPW51bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZTpQLm5leHQ7aWYobnVsbCE9PWIpUD1iLE89YTtlbHNle2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzEwKSk7Tz1hO2E9e21lbW9pemVkU3RhdGU6Ty5tZW1vaXplZFN0YXRlLGJhc2VTdGF0ZTpPLmJhc2VTdGF0ZSxiYXNlUXVldWU6Ty5iYXNlUXVldWUscXVldWU6Ty5xdWV1ZSxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YX1yZXR1cm4gUH1cbmZ1bmN0aW9uIHZoKGEsYil7cmV0dXJuXCJmdW5jdGlvblwiPT09dHlwZW9mIGI/YihhKTpifVxuZnVuY3Rpb24gd2goYSl7dmFyIGI9dWgoKSxjPWIucXVldWU7aWYobnVsbD09PWMpdGhyb3cgRXJyb3IodSgzMTEpKTtjLmxhc3RSZW5kZXJlZFJlZHVjZXI9YTt2YXIgZD1PLGU9ZC5iYXNlUXVldWUsZj1jLnBlbmRpbmc7aWYobnVsbCE9PWYpe2lmKG51bGwhPT1lKXt2YXIgZz1lLm5leHQ7ZS5uZXh0PWYubmV4dDtmLm5leHQ9Z31kLmJhc2VRdWV1ZT1lPWY7Yy5wZW5kaW5nPW51bGx9aWYobnVsbCE9PWUpe2U9ZS5uZXh0O2Q9ZC5iYXNlU3RhdGU7dmFyIGg9Zz1mPW51bGwsaz1lO2Rve3ZhciBsPWsuZXhwaXJhdGlvblRpbWU7aWYobDxsaCl7dmFyIG09e2V4cGlyYXRpb25UaW1lOmsuZXhwaXJhdGlvblRpbWUsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH07bnVsbD09PWg/KGc9aD1tLGY9ZCk6aD1oLm5leHQ9bTtsPk4uZXhwaXJhdGlvblRpbWUmJlxuKE4uZXhwaXJhdGlvblRpbWU9bCxCZyhsKSl9ZWxzZSBudWxsIT09aCYmKGg9aC5uZXh0PXtleHBpcmF0aW9uVGltZToxMDczNzQxODIzLHN1c3BlbnNlQ29uZmlnOmsuc3VzcGVuc2VDb25maWcsYWN0aW9uOmsuYWN0aW9uLGVhZ2VyUmVkdWNlcjprLmVhZ2VyUmVkdWNlcixlYWdlclN0YXRlOmsuZWFnZXJTdGF0ZSxuZXh0Om51bGx9KSxBZyhsLGsuc3VzcGVuc2VDb25maWcpLGQ9ay5lYWdlclJlZHVjZXI9PT1hP2suZWFnZXJTdGF0ZTphKGQsay5hY3Rpb24pO2s9ay5uZXh0fXdoaWxlKG51bGwhPT1rJiZrIT09ZSk7bnVsbD09PWg/Zj1kOmgubmV4dD1nOyRlKGQsYi5tZW1vaXplZFN0YXRlKXx8KHJnPSEwKTtiLm1lbW9pemVkU3RhdGU9ZDtiLmJhc2VTdGF0ZT1mO2IuYmFzZVF1ZXVlPWg7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1kfXJldHVybltiLm1lbW9pemVkU3RhdGUsYy5kaXNwYXRjaF19XG5mdW5jdGlvbiB4aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPWMuZGlzcGF0Y2gsZT1jLnBlbmRpbmcsZj1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWUpe2MucGVuZGluZz1udWxsO3ZhciBnPWU9ZS5uZXh0O2RvIGY9YShmLGcuYWN0aW9uKSxnPWcubmV4dDt3aGlsZShnIT09ZSk7JGUoZixiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1mO251bGw9PT1iLmJhc2VRdWV1ZSYmKGIuYmFzZVN0YXRlPWYpO2MubGFzdFJlbmRlcmVkU3RhdGU9Zn1yZXR1cm5bZixkXX1cbmZ1bmN0aW9uIHloKGEpe3ZhciBiPXRoKCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGEmJihhPWEoKSk7Yi5tZW1vaXplZFN0YXRlPWIuYmFzZVN0YXRlPWE7YT1iLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOnZoLGxhc3RSZW5kZXJlZFN0YXRlOmF9O2E9YS5kaXNwYXRjaD16aC5iaW5kKG51bGwsTixhKTtyZXR1cm5bYi5tZW1vaXplZFN0YXRlLGFdfWZ1bmN0aW9uIEFoKGEsYixjLGQpe2E9e3RhZzphLGNyZWF0ZTpiLGRlc3Ryb3k6YyxkZXBzOmQsbmV4dDpudWxsfTtiPU4udXBkYXRlUXVldWU7bnVsbD09PWI/KGI9e2xhc3RFZmZlY3Q6bnVsbH0sTi51cGRhdGVRdWV1ZT1iLGIubGFzdEVmZmVjdD1hLm5leHQ9YSk6KGM9Yi5sYXN0RWZmZWN0LG51bGw9PT1jP2IubGFzdEVmZmVjdD1hLm5leHQ9YTooZD1jLm5leHQsYy5uZXh0PWEsYS5uZXh0PWQsYi5sYXN0RWZmZWN0PWEpKTtyZXR1cm4gYX1cbmZ1bmN0aW9uIEJoKCl7cmV0dXJuIHVoKCkubWVtb2l6ZWRTdGF0ZX1mdW5jdGlvbiBDaChhLGIsYyxkKXt2YXIgZT10aCgpO04uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyx2b2lkIDAsdm9pZCAwPT09ZD9udWxsOmQpfWZ1bmN0aW9uIERoKGEsYixjLGQpe3ZhciBlPXVoKCk7ZD12b2lkIDA9PT1kP251bGw6ZDt2YXIgZj12b2lkIDA7aWYobnVsbCE9PU8pe3ZhciBnPU8ubWVtb2l6ZWRTdGF0ZTtmPWcuZGVzdHJveTtpZihudWxsIT09ZCYmbmgoZCxnLmRlcHMpKXtBaChiLGMsZixkKTtyZXR1cm59fU4uZWZmZWN0VGFnfD1hO2UubWVtb2l6ZWRTdGF0ZT1BaCgxfGIsYyxmLGQpfWZ1bmN0aW9uIEVoKGEsYil7cmV0dXJuIENoKDUxNiw0LGEsYil9ZnVuY3Rpb24gRmgoYSxiKXtyZXR1cm4gRGgoNTE2LDQsYSxiKX1mdW5jdGlvbiBHaChhLGIpe3JldHVybiBEaCg0LDIsYSxiKX1cbmZ1bmN0aW9uIEhoKGEsYil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGIpcmV0dXJuIGE9YSgpLGIoYSksZnVuY3Rpb24oKXtiKG51bGwpfTtpZihudWxsIT09YiYmdm9pZCAwIT09YilyZXR1cm4gYT1hKCksYi5jdXJyZW50PWEsZnVuY3Rpb24oKXtiLmN1cnJlbnQ9bnVsbH19ZnVuY3Rpb24gSWgoYSxiLGMpe2M9bnVsbCE9PWMmJnZvaWQgMCE9PWM/Yy5jb25jYXQoW2FdKTpudWxsO3JldHVybiBEaCg0LDIsSGguYmluZChudWxsLGIsYSksYyl9ZnVuY3Rpb24gSmgoKXt9ZnVuY3Rpb24gS2goYSxiKXt0aCgpLm1lbW9pemVkU3RhdGU9W2Esdm9pZCAwPT09Yj9udWxsOmJdO3JldHVybiBhfWZ1bmN0aW9uIExoKGEsYil7dmFyIGM9dWgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO3ZhciBkPWMubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZCYmbnVsbCE9PWImJm5oKGIsZFsxXSkpcmV0dXJuIGRbMF07Yy5tZW1vaXplZFN0YXRlPVthLGJdO3JldHVybiBhfVxuZnVuY3Rpb24gTWgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTthPWEoKTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9ZnVuY3Rpb24gTmgoYSxiLGMpe3ZhciBkPWFnKCk7Y2coOTg+ZD85ODpkLGZ1bmN0aW9uKCl7YSghMCl9KTtjZyg5NzxkPzk3OmQsZnVuY3Rpb24oKXt2YXIgZD1raC5zdXNwZW5zZTtraC5zdXNwZW5zZT12b2lkIDA9PT1iP251bGw6Yjt0cnl7YSghMSksYygpfWZpbmFsbHl7a2guc3VzcGVuc2U9ZH19KX1cbmZ1bmN0aW9uIHpoKGEsYixjKXt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT17ZXhwaXJhdGlvblRpbWU6ZCxzdXNwZW5zZUNvbmZpZzplLGFjdGlvbjpjLGVhZ2VyUmVkdWNlcjpudWxsLGVhZ2VyU3RhdGU6bnVsbCxuZXh0Om51bGx9O3ZhciBmPWIucGVuZGluZztudWxsPT09Zj9lLm5leHQ9ZTooZS5uZXh0PWYubmV4dCxmLm5leHQ9ZSk7Yi5wZW5kaW5nPWU7Zj1hLmFsdGVybmF0ZTtpZihhPT09Tnx8bnVsbCE9PWYmJmY9PT1OKW1oPSEwLGUuZXhwaXJhdGlvblRpbWU9bGgsTi5leHBpcmF0aW9uVGltZT1saDtlbHNle2lmKDA9PT1hLmV4cGlyYXRpb25UaW1lJiYobnVsbD09PWZ8fDA9PT1mLmV4cGlyYXRpb25UaW1lKSYmKGY9Yi5sYXN0UmVuZGVyZWRSZWR1Y2VyLG51bGwhPT1mKSl0cnl7dmFyIGc9Yi5sYXN0UmVuZGVyZWRTdGF0ZSxoPWYoZyxjKTtlLmVhZ2VyUmVkdWNlcj1mO2UuZWFnZXJTdGF0ZT1oO2lmKCRlKGgsZykpcmV0dXJufWNhdGNoKGspe31maW5hbGx5e31JZyhhLFxuZCl9fVxudmFyIHNoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpRLHVzZUNvbnRleHQ6USx1c2VFZmZlY3Q6USx1c2VJbXBlcmF0aXZlSGFuZGxlOlEsdXNlTGF5b3V0RWZmZWN0OlEsdXNlTWVtbzpRLHVzZVJlZHVjZXI6USx1c2VSZWY6USx1c2VTdGF0ZTpRLHVzZURlYnVnVmFsdWU6USx1c2VSZXNwb25kZXI6USx1c2VEZWZlcnJlZFZhbHVlOlEsdXNlVHJhbnNpdGlvbjpRfSxwaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6S2gsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RWgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpmdW5jdGlvbihhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIENoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX0sdXNlTGF5b3V0RWZmZWN0OmZ1bmN0aW9uKGEsYil7cmV0dXJuIENoKDQsMixhLGIpfSx1c2VNZW1vOmZ1bmN0aW9uKGEsYil7dmFyIGM9dGgoKTtiPXZvaWQgMD09PWI/bnVsbDpiO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxcbmJdO3JldHVybiBhfSx1c2VSZWR1Y2VyOmZ1bmN0aW9uKGEsYixjKXt2YXIgZD10aCgpO2I9dm9pZCAwIT09Yz9jKGIpOmI7ZC5tZW1vaXplZFN0YXRlPWQuYmFzZVN0YXRlPWI7YT1kLnF1ZXVlPXtwZW5kaW5nOm51bGwsZGlzcGF0Y2g6bnVsbCxsYXN0UmVuZGVyZWRSZWR1Y2VyOmEsbGFzdFJlbmRlcmVkU3RhdGU6Yn07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltkLm1lbW9pemVkU3RhdGUsYV19LHVzZVJlZjpmdW5jdGlvbihhKXt2YXIgYj10aCgpO2E9e2N1cnJlbnQ6YX07cmV0dXJuIGIubWVtb2l6ZWRTdGF0ZT1hfSx1c2VTdGF0ZTp5aCx1c2VEZWJ1Z1ZhbHVlOkpoLHVzZVJlc3BvbmRlcjppaCx1c2VEZWZlcnJlZFZhbHVlOmZ1bmN0aW9uKGEsYil7dmFyIGM9eWgoYSksZD1jWzBdLGU9Y1sxXTtFaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9XG5jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXloKCExKSxjPWJbMF07Yj1iWzFdO3JldHVybltLaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxxaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOndoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB3aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz13aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj1cbndoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsYixhKSxbYixhXSksY119fSxyaD17cmVhZENvbnRleHQ6c2csdXNlQ2FsbGJhY2s6TGgsdXNlQ29udGV4dDpzZyx1c2VFZmZlY3Q6RmgsdXNlSW1wZXJhdGl2ZUhhbmRsZTpJaCx1c2VMYXlvdXRFZmZlY3Q6R2gsdXNlTWVtbzpNaCx1c2VSZWR1Y2VyOnhoLHVzZVJlZjpCaCx1c2VTdGF0ZTpmdW5jdGlvbigpe3JldHVybiB4aCh2aCl9LHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz14aCh2aCksZD1jWzBdLGU9Y1sxXTtGaChmdW5jdGlvbigpe3ZhciBjPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXtlKGEpfWZpbmFsbHl7a2guc3VzcGVuc2U9Y319LFthLGJdKTtyZXR1cm4gZH0sdXNlVHJhbnNpdGlvbjpmdW5jdGlvbihhKXt2YXIgYj14aCh2aCksYz1iWzBdO2I9YlsxXTtyZXR1cm5bTGgoTmguYmluZChudWxsLFxuYixhKSxbYixhXSksY119fSxPaD1udWxsLFBoPW51bGwsUWg9ITE7ZnVuY3Rpb24gUmgoYSxiKXt2YXIgYz1TaCg1LG51bGwsbnVsbCwwKTtjLmVsZW1lbnRUeXBlPVwiREVMRVRFRFwiO2MudHlwZT1cIkRFTEVURURcIjtjLnN0YXRlTm9kZT1iO2MucmV0dXJuPWE7Yy5lZmZlY3RUYWc9ODtudWxsIT09YS5sYXN0RWZmZWN0PyhhLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGEubGFzdEVmZmVjdD1jKTphLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1jfVxuZnVuY3Rpb24gVGgoYSxiKXtzd2l0Y2goYS50YWcpe2Nhc2UgNTp2YXIgYz1hLnR5cGU7Yj0xIT09Yi5ub2RlVHlwZXx8Yy50b0xvd2VyQ2FzZSgpIT09Yi5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpP251bGw6YjtyZXR1cm4gbnVsbCE9PWI/KGEuc3RhdGVOb2RlPWIsITApOiExO2Nhc2UgNjpyZXR1cm4gYj1cIlwiPT09YS5wZW5kaW5nUHJvcHN8fDMhPT1iLm5vZGVUeXBlP251bGw6YixudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSAxMzpyZXR1cm4hMTtkZWZhdWx0OnJldHVybiExfX1cbmZ1bmN0aW9uIFVoKGEpe2lmKFFoKXt2YXIgYj1QaDtpZihiKXt2YXIgYz1iO2lmKCFUaChhLGIpKXtiPUpkKGMubmV4dFNpYmxpbmcpO2lmKCFifHwhVGgoYSxiKSl7YS5lZmZlY3RUYWc9YS5lZmZlY3RUYWcmLTEwMjV8MjtRaD0hMTtPaD1hO3JldHVybn1SaChPaCxjKX1PaD1hO1BoPUpkKGIuZmlyc3RDaGlsZCl9ZWxzZSBhLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyLFFoPSExLE9oPWF9fWZ1bmN0aW9uIFZoKGEpe2ZvcihhPWEucmV0dXJuO251bGwhPT1hJiY1IT09YS50YWcmJjMhPT1hLnRhZyYmMTMhPT1hLnRhZzspYT1hLnJldHVybjtPaD1hfVxuZnVuY3Rpb24gV2goYSl7aWYoYSE9PU9oKXJldHVybiExO2lmKCFRaClyZXR1cm4gVmgoYSksUWg9ITAsITE7dmFyIGI9YS50eXBlO2lmKDUhPT1hLnRhZ3x8XCJoZWFkXCIhPT1iJiZcImJvZHlcIiE9PWImJiFHZChiLGEubWVtb2l6ZWRQcm9wcykpZm9yKGI9UGg7YjspUmgoYSxiKSxiPUpkKGIubmV4dFNpYmxpbmcpO1ZoKGEpO2lmKDEzPT09YS50YWcpe2E9YS5tZW1vaXplZFN0YXRlO2E9bnVsbCE9PWE/YS5kZWh5ZHJhdGVkOm51bGw7aWYoIWEpdGhyb3cgRXJyb3IodSgzMTcpKTthOnthPWEubmV4dFNpYmxpbmc7Zm9yKGI9MDthOyl7aWYoOD09PWEubm9kZVR5cGUpe3ZhciBjPWEuZGF0YTtpZihjPT09QWQpe2lmKDA9PT1iKXtQaD1KZChhLm5leHRTaWJsaW5nKTticmVhayBhfWItLX1lbHNlIGMhPT16ZCYmYyE9PUNkJiZjIT09QmR8fGIrK31hPWEubmV4dFNpYmxpbmd9UGg9bnVsbH19ZWxzZSBQaD1PaD9KZChhLnN0YXRlTm9kZS5uZXh0U2libGluZyk6bnVsbDtyZXR1cm4hMH1cbmZ1bmN0aW9uIFhoKCl7UGg9T2g9bnVsbDtRaD0hMX12YXIgWWg9V2EuUmVhY3RDdXJyZW50T3duZXIscmc9ITE7ZnVuY3Rpb24gUihhLGIsYyxkKXtiLmNoaWxkPW51bGw9PT1hP1lnKGIsbnVsbCxjLGQpOlhnKGIsYS5jaGlsZCxjLGQpfWZ1bmN0aW9uIFpoKGEsYixjLGQsZSl7Yz1jLnJlbmRlcjt2YXIgZj1iLnJlZjtxZyhiLGUpO2Q9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsZCxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGFpKGEsYixjLGQsZSxmKXtpZihudWxsPT09YSl7dmFyIGc9Yy50eXBlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiYhYmkoZykmJnZvaWQgMD09PWcuZGVmYXVsdFByb3BzJiZudWxsPT09Yy5jb21wYXJlJiZ2b2lkIDA9PT1jLmRlZmF1bHRQcm9wcylyZXR1cm4gYi50YWc9MTUsYi50eXBlPWcsY2koYSxiLGcsZCxlLGYpO2E9VWcoYy50eXBlLG51bGwsZCxudWxsLGIubW9kZSxmKTthLnJlZj1iLnJlZjthLnJldHVybj1iO3JldHVybiBiLmNoaWxkPWF9Zz1hLmNoaWxkO2lmKGU8ZiYmKGU9Zy5tZW1vaXplZFByb3BzLGM9Yy5jb21wYXJlLGM9bnVsbCE9PWM/YzpiZixjKGUsZCkmJmEucmVmPT09Yi5yZWYpKXJldHVybiAkaChhLGIsZik7Yi5lZmZlY3RUYWd8PTE7YT1TZyhnLGQpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1cbmZ1bmN0aW9uIGNpKGEsYixjLGQsZSxmKXtyZXR1cm4gbnVsbCE9PWEmJmJmKGEubWVtb2l6ZWRQcm9wcyxkKSYmYS5yZWY9PT1iLnJlZiYmKHJnPSExLGU8Zik/KGIuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSwkaChhLGIsZikpOmRpKGEsYixjLGQsZil9ZnVuY3Rpb24gZWkoYSxiKXt2YXIgYz1iLnJlZjtpZihudWxsPT09YSYmbnVsbCE9PWN8fG51bGwhPT1hJiZhLnJlZiE9PWMpYi5lZmZlY3RUYWd8PTEyOH1mdW5jdGlvbiBkaShhLGIsYyxkLGUpe3ZhciBmPUwoYyk/QmY6Si5jdXJyZW50O2Y9Q2YoYixmKTtxZyhiLGUpO2M9b2goYSxiLGMsZCxmLGUpO2lmKG51bGwhPT1hJiYhcmcpcmV0dXJuIGIudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxiLmVmZmVjdFRhZyY9LTUxNyxhLmV4cGlyYXRpb25UaW1lPD1lJiYoYS5leHBpcmF0aW9uVGltZT0wKSwkaChhLGIsZSk7Yi5lZmZlY3RUYWd8PTE7UihhLGIsYyxlKTtyZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uIGZpKGEsYixjLGQsZSl7aWYoTChjKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO3FnKGIsZSk7aWYobnVsbD09PWIuc3RhdGVOb2RlKW51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxMZyhiLGMsZCksTmcoYixjLGQsZSksZD0hMDtlbHNlIGlmKG51bGw9PT1hKXt2YXIgZz1iLnN0YXRlTm9kZSxoPWIubWVtb2l6ZWRQcm9wcztnLnByb3BzPWg7dmFyIGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZTtcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKTt2YXIgbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcyxwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZTtwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmXG5cImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCk7dGc9ITE7dmFyIHg9Yi5tZW1vaXplZFN0YXRlO2cuc3RhdGU9eDt6ZyhiLGQsZyxlKTtrPWIubWVtb2l6ZWRTdGF0ZTtoIT09ZHx8eCE9PWt8fEsuY3VycmVudHx8dGc/KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBtJiYoRmcoYixjLG0sZCksaz1iLm1lbW9pemVkU3RhdGUpLChoPXRnfHxLZyhiLGMsaCxkLHgsayxsKSk/KHB8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudHx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxNb3VudCYmZy5jb21wb25lbnRXaWxsTW91bnQoKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbE1vdW50JiZnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQoKSksXCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5jb21wb25lbnREaWRNb3VudCYmKGIuZWZmZWN0VGFnfD00KSk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT1rKSxnLnByb3BzPWQsZy5zdGF0ZT1rLGcuY29udGV4dD1sLGQ9aCk6KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpLGQ9ITEpfWVsc2UgZz1iLnN0YXRlTm9kZSx2ZyhhLGIpLGg9Yi5tZW1vaXplZFByb3BzLGcucHJvcHM9Yi50eXBlPT09Yi5lbGVtZW50VHlwZT9oOmlnKGIudHlwZSxoKSxrPWcuY29udGV4dCxsPWMuY29udGV4dFR5cGUsXCJvYmplY3RcIj09PXR5cGVvZiBsJiZudWxsIT09bD9sPXNnKGwpOihsPUwoYyk/QmY6Si5jdXJyZW50LGw9Q2YoYixsKSksbT1jLmdldERlcml2ZWRTdGF0ZUZyb21Qcm9wcywocD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgbXx8XCJmdW5jdGlvblwiPT09XG50eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSl8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzfHwoaCE9PWR8fGshPT1sKSYmTWcoYixnLGQsbCksdGc9ITEsaz1iLm1lbW9pemVkU3RhdGUsZy5zdGF0ZT1rLHpnKGIsZCxnLGUpLHg9Yi5tZW1vaXplZFN0YXRlLGghPT1kfHxrIT09eHx8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSx4PWIubWVtb2l6ZWRTdGF0ZSksKG09dGd8fEtnKGIsYyxoLGQsayx4LGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGV8fChcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnRXaWxsVXBkYXRlJiZnLmNvbXBvbmVudFdpbGxVcGRhdGUoZCxcbngsbCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUoZCx4LGwpKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGUmJihiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUmJihiLmVmZmVjdFRhZ3w9MjU2KSk6KFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8aD09PWEubWVtb2l6ZWRQcm9wcyYmaz09PWEubWVtb2l6ZWRTdGF0ZXx8KGIuZWZmZWN0VGFnfD0yNTYpLGIubWVtb2l6ZWRQcm9wcz1kLGIubWVtb2l6ZWRTdGF0ZT14KSxnLnByb3BzPWQsZy5zdGF0ZT14LGcuY29udGV4dD1sLGQ9bSk6XG4oXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksZD0hMSk7cmV0dXJuIGdpKGEsYixjLGQsZixlKX1cbmZ1bmN0aW9uIGdpKGEsYixjLGQsZSxmKXtlaShhLGIpO3ZhciBnPTAhPT0oYi5lZmZlY3RUYWcmNjQpO2lmKCFkJiYhZylyZXR1cm4gZSYmSGYoYixjLCExKSwkaChhLGIsZik7ZD1iLnN0YXRlTm9kZTtZaC5jdXJyZW50PWI7dmFyIGg9ZyYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGMuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yP251bGw6ZC5yZW5kZXIoKTtiLmVmZmVjdFRhZ3w9MTtudWxsIT09YSYmZz8oYi5jaGlsZD1YZyhiLGEuY2hpbGQsbnVsbCxmKSxiLmNoaWxkPVhnKGIsbnVsbCxoLGYpKTpSKGEsYixoLGYpO2IubWVtb2l6ZWRTdGF0ZT1kLnN0YXRlO2UmJkhmKGIsYywhMCk7cmV0dXJuIGIuY2hpbGR9ZnVuY3Rpb24gaGkoYSl7dmFyIGI9YS5zdGF0ZU5vZGU7Yi5wZW5kaW5nQ29udGV4dD9FZihhLGIucGVuZGluZ0NvbnRleHQsYi5wZW5kaW5nQ29udGV4dCE9PWIuY29udGV4dCk6Yi5jb250ZXh0JiZFZihhLGIuY29udGV4dCwhMSk7ZGgoYSxiLmNvbnRhaW5lckluZm8pfVxudmFyIGlpPXtkZWh5ZHJhdGVkOm51bGwscmV0cnlUaW1lOjB9O1xuZnVuY3Rpb24gamkoYSxiLGMpe3ZhciBkPWIubW9kZSxlPWIucGVuZGluZ1Byb3BzLGY9TS5jdXJyZW50LGc9ITEsaDsoaD0wIT09KGIuZWZmZWN0VGFnJjY0KSl8fChoPTAhPT0oZiYyKSYmKG51bGw9PT1hfHxudWxsIT09YS5tZW1vaXplZFN0YXRlKSk7aD8oZz0hMCxiLmVmZmVjdFRhZyY9LTY1KTpudWxsIT09YSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZXx8dm9pZCAwPT09ZS5mYWxsYmFja3x8ITA9PT1lLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwoZnw9MSk7SShNLGYmMSk7aWYobnVsbD09PWEpe3ZvaWQgMCE9PWUuZmFsbGJhY2smJlVoKGIpO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49XG5iO2Uuc2libGluZz1jO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWU7cmV0dXJuIGN9ZD1lLmNoaWxkcmVuO2IubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVlnKGIsbnVsbCxkLGMpfWlmKG51bGwhPT1hLm1lbW9pemVkU3RhdGUpe2E9YS5jaGlsZDtkPWEuc2libGluZztpZihnKXtlPWUuZmFsbGJhY2s7Yz1TZyhhLGEucGVuZGluZ1Byb3BzKTtjLnJldHVybj1iO2lmKDA9PT0oYi5tb2RlJjIpJiYoZz1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxnIT09YS5jaGlsZCkpZm9yKGMuY2hpbGQ9ZztudWxsIT09ZzspZy5yZXR1cm49YyxnPWcuc2libGluZztkPVNnKGQsZSk7ZC5yZXR1cm49YjtjLnNpYmxpbmc9ZDtjLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1jO3JldHVybiBkfWM9WGcoYixhLmNoaWxkLGUuY2hpbGRyZW4sYyk7Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9XG5jfWE9YS5jaGlsZDtpZihnKXtnPWUuZmFsbGJhY2s7ZT1XZyhudWxsLGQsMCxudWxsKTtlLnJldHVybj1iO2UuY2hpbGQ9YTtudWxsIT09YSYmKGEucmV0dXJuPWUpO2lmKDA9PT0oYi5tb2RlJjIpKWZvcihhPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGUuY2hpbGQ9YTtudWxsIT09YTspYS5yZXR1cm49ZSxhPWEuc2libGluZztjPVdnKGcsZCxjLG51bGwpO2MucmV0dXJuPWI7ZS5zaWJsaW5nPWM7Yy5lZmZlY3RUYWd8PTI7ZS5jaGlsZEV4cGlyYXRpb25UaW1lPTA7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31iLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1YZyhiLGEsZS5jaGlsZHJlbixjKX1cbmZ1bmN0aW9uIGtpKGEsYil7YS5leHBpcmF0aW9uVGltZTxiJiYoYS5leHBpcmF0aW9uVGltZT1iKTt2YXIgYz1hLmFsdGVybmF0ZTtudWxsIT09YyYmYy5leHBpcmF0aW9uVGltZTxiJiYoYy5leHBpcmF0aW9uVGltZT1iKTtwZyhhLnJldHVybixiKX1mdW5jdGlvbiBsaShhLGIsYyxkLGUsZil7dmFyIGc9YS5tZW1vaXplZFN0YXRlO251bGw9PT1nP2EubWVtb2l6ZWRTdGF0ZT17aXNCYWNrd2FyZHM6YixyZW5kZXJpbmc6bnVsbCxyZW5kZXJpbmdTdGFydFRpbWU6MCxsYXN0OmQsdGFpbDpjLHRhaWxFeHBpcmF0aW9uOjAsdGFpbE1vZGU6ZSxsYXN0RWZmZWN0OmZ9OihnLmlzQmFja3dhcmRzPWIsZy5yZW5kZXJpbmc9bnVsbCxnLnJlbmRlcmluZ1N0YXJ0VGltZT0wLGcubGFzdD1kLGcudGFpbD1jLGcudGFpbEV4cGlyYXRpb249MCxnLnRhaWxNb2RlPWUsZy5sYXN0RWZmZWN0PWYpfVxuZnVuY3Rpb24gbWkoYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzLGU9ZC5yZXZlYWxPcmRlcixmPWQudGFpbDtSKGEsYixkLmNoaWxkcmVuLGMpO2Q9TS5jdXJyZW50O2lmKDAhPT0oZCYyKSlkPWQmMXwyLGIuZWZmZWN0VGFnfD02NDtlbHNle2lmKG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJjY0KSlhOmZvcihhPWIuY2hpbGQ7bnVsbCE9PWE7KXtpZigxMz09PWEudGFnKW51bGwhPT1hLm1lbW9pemVkU3RhdGUmJmtpKGEsYyk7ZWxzZSBpZigxOT09PWEudGFnKWtpKGEsYyk7ZWxzZSBpZihudWxsIT09YS5jaGlsZCl7YS5jaGlsZC5yZXR1cm49YTthPWEuY2hpbGQ7Y29udGludWV9aWYoYT09PWIpYnJlYWsgYTtmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YilicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31kJj0xfUkoTSxkKTtpZigwPT09KGIubW9kZSYyKSliLm1lbW9pemVkU3RhdGU9XG5udWxsO2Vsc2Ugc3dpdGNoKGUpe2Nhc2UgXCJmb3J3YXJkc1wiOmM9Yi5jaGlsZDtmb3IoZT1udWxsO251bGwhPT1jOylhPWMuYWx0ZXJuYXRlLG51bGwhPT1hJiZudWxsPT09aGgoYSkmJihlPWMpLGM9Yy5zaWJsaW5nO2M9ZTtudWxsPT09Yz8oZT1iLmNoaWxkLGIuY2hpbGQ9bnVsbCk6KGU9Yy5zaWJsaW5nLGMuc2libGluZz1udWxsKTtsaShiLCExLGUsYyxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcImJhY2t3YXJkc1wiOmM9bnVsbDtlPWIuY2hpbGQ7Zm9yKGIuY2hpbGQ9bnVsbDtudWxsIT09ZTspe2E9ZS5hbHRlcm5hdGU7aWYobnVsbCE9PWEmJm51bGw9PT1oaChhKSl7Yi5jaGlsZD1lO2JyZWFrfWE9ZS5zaWJsaW5nO2Uuc2libGluZz1jO2M9ZTtlPWF9bGkoYiwhMCxjLG51bGwsZixiLmxhc3RFZmZlY3QpO2JyZWFrO2Nhc2UgXCJ0b2dldGhlclwiOmxpKGIsITEsbnVsbCxudWxsLHZvaWQgMCxiLmxhc3RFZmZlY3QpO2JyZWFrO2RlZmF1bHQ6Yi5tZW1vaXplZFN0YXRlPW51bGx9cmV0dXJuIGIuY2hpbGR9XG5mdW5jdGlvbiAkaChhLGIsYyl7bnVsbCE9PWEmJihiLmRlcGVuZGVuY2llcz1hLmRlcGVuZGVuY2llcyk7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTswIT09ZCYmQmcoZCk7aWYoYi5jaGlsZEV4cGlyYXRpb25UaW1lPGMpcmV0dXJuIG51bGw7aWYobnVsbCE9PWEmJmIuY2hpbGQhPT1hLmNoaWxkKXRocm93IEVycm9yKHUoMTUzKSk7aWYobnVsbCE9PWIuY2hpbGQpe2E9Yi5jaGlsZDtjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2IuY2hpbGQ9Yztmb3IoYy5yZXR1cm49YjtudWxsIT09YS5zaWJsaW5nOylhPWEuc2libGluZyxjPWMuc2libGluZz1TZyhhLGEucGVuZGluZ1Byb3BzKSxjLnJldHVybj1iO2Muc2libGluZz1udWxsfXJldHVybiBiLmNoaWxkfXZhciBuaSxvaSxwaSxxaTtcbm5pPWZ1bmN0aW9uKGEsYil7Zm9yKHZhciBjPWIuY2hpbGQ7bnVsbCE9PWM7KXtpZig1PT09Yy50YWd8fDY9PT1jLnRhZylhLmFwcGVuZENoaWxkKGMuc3RhdGVOb2RlKTtlbHNlIGlmKDQhPT1jLnRhZyYmbnVsbCE9PWMuY2hpbGQpe2MuY2hpbGQucmV0dXJuPWM7Yz1jLmNoaWxkO2NvbnRpbnVlfWlmKGM9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8Yy5yZXR1cm49PT1iKXJldHVybjtjPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Yz1jLnNpYmxpbmd9fTtvaT1mdW5jdGlvbigpe307XG5waT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPWEubWVtb2l6ZWRQcm9wcztpZihmIT09ZCl7dmFyIGc9Yi5zdGF0ZU5vZGU7Y2goJGcuY3VycmVudCk7YT1udWxsO3N3aXRjaChjKXtjYXNlIFwiaW5wdXRcIjpmPXpiKGcsZik7ZD16YihnLGQpO2E9W107YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmY9R2IoZyxmKTtkPUdiKGcsZCk7YT1bXTticmVhaztjYXNlIFwic2VsZWN0XCI6Zj1uKHt9LGYse3ZhbHVlOnZvaWQgMH0pO2Q9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTthPVtdO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOmY9SWIoZyxmKTtkPUliKGcsZCk7YT1bXTticmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBmLm9uQ2xpY2smJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBkLm9uQ2xpY2smJihnLm9uY2xpY2s9c2QpfW9kKGMsZCk7dmFyIGgsaztjPW51bGw7Zm9yKGggaW4gZilpZighZC5oYXNPd25Qcm9wZXJ0eShoKSYmZi5oYXNPd25Qcm9wZXJ0eShoKSYmbnVsbCE9ZltoXSlpZihcInN0eWxlXCI9PT1cbmgpZm9yKGsgaW4gZz1mW2hdLGcpZy5oYXNPd25Qcm9wZXJ0eShrKSYmKGN8fChjPXt9KSxjW2tdPVwiXCIpO2Vsc2VcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCIhPT1oJiZcImNoaWxkcmVuXCIhPT1oJiZcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJlwiYXV0b0ZvY3VzXCIhPT1oJiYodmEuaGFzT3duUHJvcGVydHkoaCk/YXx8KGE9W10pOihhPWF8fFtdKS5wdXNoKGgsbnVsbCkpO2ZvcihoIGluIGQpe3ZhciBsPWRbaF07Zz1udWxsIT1mP2ZbaF06dm9pZCAwO2lmKGQuaGFzT3duUHJvcGVydHkoaCkmJmwhPT1nJiYobnVsbCE9bHx8bnVsbCE9ZykpaWYoXCJzdHlsZVwiPT09aClpZihnKXtmb3IoayBpbiBnKSFnLmhhc093blByb3BlcnR5KGspfHxsJiZsLmhhc093blByb3BlcnR5KGspfHwoY3x8KGM9e30pLGNba109XCJcIik7Zm9yKGsgaW4gbClsLmhhc093blByb3BlcnR5KGspJiZnW2tdIT09bFtrXSYmKGN8fChjPXt9KSxcbmNba109bFtrXSl9ZWxzZSBjfHwoYXx8KGE9W10pLGEucHVzaChoLGMpKSxjPWw7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWg/KGw9bD9sLl9faHRtbDp2b2lkIDAsZz1nP2cuX19odG1sOnZvaWQgMCxudWxsIT1sJiZnIT09bCYmKGE9YXx8W10pLnB1c2goaCxsKSk6XCJjaGlsZHJlblwiPT09aD9nPT09bHx8XCJzdHJpbmdcIiE9PXR5cGVvZiBsJiZcIm51bWJlclwiIT09dHlwZW9mIGx8fChhPWF8fFtdKS5wdXNoKGgsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09aCYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT8obnVsbCE9bCYmcmQoZSxoKSxhfHxnPT09bHx8KGE9W10pKTooYT1hfHxbXSkucHVzaChoLGwpKX1jJiYoYT1hfHxbXSkucHVzaChcInN0eWxlXCIsYyk7ZT1hO2lmKGIudXBkYXRlUXVldWU9ZSliLmVmZmVjdFRhZ3w9NH19O1xucWk9ZnVuY3Rpb24oYSxiLGMsZCl7YyE9PWQmJihiLmVmZmVjdFRhZ3w9NCl9O2Z1bmN0aW9uIHJpKGEsYil7c3dpdGNoKGEudGFpbE1vZGUpe2Nhc2UgXCJoaWRkZW5cIjpiPWEudGFpbDtmb3IodmFyIGM9bnVsbDtudWxsIT09YjspbnVsbCE9PWIuYWx0ZXJuYXRlJiYoYz1iKSxiPWIuc2libGluZztudWxsPT09Yz9hLnRhaWw9bnVsbDpjLnNpYmxpbmc9bnVsbDticmVhaztjYXNlIFwiY29sbGFwc2VkXCI6Yz1hLnRhaWw7Zm9yKHZhciBkPW51bGw7bnVsbCE9PWM7KW51bGwhPT1jLmFsdGVybmF0ZSYmKGQ9YyksYz1jLnNpYmxpbmc7bnVsbD09PWQ/Ynx8bnVsbD09PWEudGFpbD9hLnRhaWw9bnVsbDphLnRhaWwuc2libGluZz1udWxsOmQuc2libGluZz1udWxsfX1cbmZ1bmN0aW9uIHNpKGEsYixjKXt2YXIgZD1iLnBlbmRpbmdQcm9wcztzd2l0Y2goYi50YWcpe2Nhc2UgMjpjYXNlIDE2OmNhc2UgMTU6Y2FzZSAwOmNhc2UgMTE6Y2FzZSA3OmNhc2UgODpjYXNlIDEyOmNhc2UgOTpjYXNlIDE0OnJldHVybiBudWxsO2Nhc2UgMTpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAzOnJldHVybiBlaCgpLEgoSyksSChKKSxjPWIuc3RhdGVOb2RlLGMucGVuZGluZ0NvbnRleHQmJihjLmNvbnRleHQ9Yy5wZW5kaW5nQ29udGV4dCxjLnBlbmRpbmdDb250ZXh0PW51bGwpLG51bGwhPT1hJiZudWxsIT09YS5jaGlsZHx8IVdoKGIpfHwoYi5lZmZlY3RUYWd8PTQpLG9pKGIpLG51bGw7Y2FzZSA1OmdoKGIpO2M9Y2goYmguY3VycmVudCk7dmFyIGU9Yi50eXBlO2lmKG51bGwhPT1hJiZudWxsIT1iLnN0YXRlTm9kZSlwaShhLGIsZSxkLGMpLGEucmVmIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KTtlbHNle2lmKCFkKXtpZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbnJldHVybiBudWxsfWE9Y2goJGcuY3VycmVudCk7aWYoV2goYikpe2Q9Yi5zdGF0ZU5vZGU7ZT1iLnR5cGU7dmFyIGY9Yi5tZW1vaXplZFByb3BzO2RbTWRdPWI7ZFtOZF09Zjtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLGQpO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihhPTA7YTxhYy5sZW5ndGg7YSsrKUYoYWNbYV0sZCk7YnJlYWs7Y2FzZSBcInNvdXJjZVwiOkYoXCJlcnJvclwiLGQpO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGQpO0YoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixkKTtGKFwic3VibWl0XCIsZCk7YnJlYWs7Y2FzZSBcImRldGFpbHNcIjpGKFwidG9nZ2xlXCIsZCk7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoZCxmKTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwic2VsZWN0XCI6ZC5fd3JhcHBlclN0YXRlPVxue3dhc011bHRpcGxlOiEhZi5tdWx0aXBsZX07RihcImludmFsaWRcIixkKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6SmIoZCxmKSxGKFwiaW52YWxpZFwiLGQpLHJkKGMsXCJvbkNoYW5nZVwiKX1vZChlLGYpO2E9bnVsbDtmb3IodmFyIGcgaW4gZilpZihmLmhhc093blByb3BlcnR5KGcpKXt2YXIgaD1mW2ddO1wiY2hpbGRyZW5cIj09PWc/XCJzdHJpbmdcIj09PXR5cGVvZiBoP2QudGV4dENvbnRlbnQhPT1oJiYoYT1bXCJjaGlsZHJlblwiLGhdKTpcIm51bWJlclwiPT09dHlwZW9mIGgmJmQudGV4dENvbnRlbnQhPT1cIlwiK2gmJihhPVtcImNoaWxkcmVuXCIsXCJcIitoXSk6dmEuaGFzT3duUHJvcGVydHkoZykmJm51bGwhPWgmJnJkKGMsZyl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGQpO0ViKGQsZiwhMCk7YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6eGIoZCk7TGIoZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmNhc2UgXCJvcHRpb25cIjpicmVhaztkZWZhdWx0OlwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLm9uQ2xpY2smJlxuKGQub25jbGljaz1zZCl9Yz1hO2IudXBkYXRlUXVldWU9YztudWxsIT09YyYmKGIuZWZmZWN0VGFnfD00KX1lbHNle2c9OT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQ7YT09PXFkJiYoYT1OYihlKSk7YT09PXFkP1wic2NyaXB0XCI9PT1lPyhhPWcuY3JlYXRlRWxlbWVudChcImRpdlwiKSxhLmlubmVySFRNTD1cIjxzY3JpcHQ+XFx4M2Mvc2NyaXB0PlwiLGE9YS5yZW1vdmVDaGlsZChhLmZpcnN0Q2hpbGQpKTpcInN0cmluZ1wiPT09dHlwZW9mIGQuaXM/YT1nLmNyZWF0ZUVsZW1lbnQoZSx7aXM6ZC5pc30pOihhPWcuY3JlYXRlRWxlbWVudChlKSxcInNlbGVjdFwiPT09ZSYmKGc9YSxkLm11bHRpcGxlP2cubXVsdGlwbGU9ITA6ZC5zaXplJiYoZy5zaXplPWQuc2l6ZSkpKTphPWcuY3JlYXRlRWxlbWVudE5TKGEsZSk7YVtNZF09YjthW05kXT1kO25pKGEsYiwhMSwhMSk7Yi5zdGF0ZU5vZGU9YTtnPXBkKGUsZCk7c3dpdGNoKGUpe2Nhc2UgXCJpZnJhbWVcIjpjYXNlIFwib2JqZWN0XCI6Y2FzZSBcImVtYmVkXCI6RihcImxvYWRcIixcbmEpO2g9ZDticmVhaztjYXNlIFwidmlkZW9cIjpjYXNlIFwiYXVkaW9cIjpmb3IoaD0wO2g8YWMubGVuZ3RoO2grKylGKGFjW2hdLGEpO2g9ZDticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJpbWdcIjpjYXNlIFwiaW1hZ2VcIjpjYXNlIFwibGlua1wiOkYoXCJlcnJvclwiLGEpO0YoXCJsb2FkXCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJmb3JtXCI6RihcInJlc2V0XCIsYSk7RihcInN1Ym1pdFwiLGEpO2g9ZDticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImlucHV0XCI6QWIoYSxkKTtoPXpiKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7Y2FzZSBcIm9wdGlvblwiOmg9R2IoYSxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6YS5fd3JhcHBlclN0YXRlPXt3YXNNdWx0aXBsZTohIWQubXVsdGlwbGV9O2g9bih7fSxkLHt2YWx1ZTp2b2lkIDB9KTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihhLFxuZCk7aD1JYihhLGQpO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2RlZmF1bHQ6aD1kfW9kKGUsaCk7dmFyIGs9aDtmb3IoZiBpbiBrKWlmKGsuaGFzT3duUHJvcGVydHkoZikpe3ZhciBsPWtbZl07XCJzdHlsZVwiPT09Zj9tZChhLGwpOlwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIj09PWY/KGw9bD9sLl9faHRtbDp2b2lkIDAsbnVsbCE9bCYmUWIoYSxsKSk6XCJjaGlsZHJlblwiPT09Zj9cInN0cmluZ1wiPT09dHlwZW9mIGw/KFwidGV4dGFyZWFcIiE9PWV8fFwiXCIhPT1sKSYmUmIoYSxsKTpcIm51bWJlclwiPT09dHlwZW9mIGwmJlJiKGEsXCJcIitsKTpcInN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZ1wiIT09ZiYmXCJzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmdcIiE9PWYmJlwiYXV0b0ZvY3VzXCIhPT1mJiYodmEuaGFzT3duUHJvcGVydHkoZik/bnVsbCE9bCYmcmQoYyxmKTpudWxsIT1sJiZYYShhLGYsbCxnKSl9c3dpdGNoKGUpe2Nhc2UgXCJpbnB1dFwiOnhiKGEpO0ViKGEsZCwhMSk7XG5icmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihhKTtMYihhKTticmVhaztjYXNlIFwib3B0aW9uXCI6bnVsbCE9ZC52YWx1ZSYmYS5zZXRBdHRyaWJ1dGUoXCJ2YWx1ZVwiLFwiXCIrcmIoZC52YWx1ZSkpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLm11bHRpcGxlPSEhZC5tdWx0aXBsZTtjPWQudmFsdWU7bnVsbCE9Yz9IYihhLCEhZC5tdWx0aXBsZSxjLCExKTpudWxsIT1kLmRlZmF1bHRWYWx1ZSYmSGIoYSwhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGgub25DbGljayYmKGEub25jbGljaz1zZCl9RmQoZSxkKSYmKGIuZWZmZWN0VGFnfD00KX1udWxsIT09Yi5yZWYmJihiLmVmZmVjdFRhZ3w9MTI4KX1yZXR1cm4gbnVsbDtjYXNlIDY6aWYoYSYmbnVsbCE9Yi5zdGF0ZU5vZGUpcWkoYSxiLGEubWVtb2l6ZWRQcm9wcyxkKTtlbHNle2lmKFwic3RyaW5nXCIhPT10eXBlb2YgZCYmbnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTY2KSk7XG5jPWNoKGJoLmN1cnJlbnQpO2NoKCRnLmN1cnJlbnQpO1doKGIpPyhjPWIuc3RhdGVOb2RlLGQ9Yi5tZW1vaXplZFByb3BzLGNbTWRdPWIsYy5ub2RlVmFsdWUhPT1kJiYoYi5lZmZlY3RUYWd8PTQpKTooYz0oOT09PWMubm9kZVR5cGU/YzpjLm93bmVyRG9jdW1lbnQpLmNyZWF0ZVRleHROb2RlKGQpLGNbTWRdPWIsYi5zdGF0ZU5vZGU9Yyl9cmV0dXJuIG51bGw7Y2FzZSAxMzpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKDAhPT0oYi5lZmZlY3RUYWcmNjQpKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWMsYjtjPW51bGwhPT1kO2Q9ITE7bnVsbD09PWE/dm9pZCAwIT09Yi5tZW1vaXplZFByb3BzLmZhbGxiYWNrJiZXaChiKTooZT1hLm1lbW9pemVkU3RhdGUsZD1udWxsIT09ZSxjfHxudWxsPT09ZXx8KGU9YS5jaGlsZC5zaWJsaW5nLG51bGwhPT1lJiYoZj1iLmZpcnN0RWZmZWN0LG51bGwhPT1mPyhiLmZpcnN0RWZmZWN0PWUsZS5uZXh0RWZmZWN0PWYpOihiLmZpcnN0RWZmZWN0PWIubGFzdEVmZmVjdD1cbmUsZS5uZXh0RWZmZWN0PW51bGwpLGUuZWZmZWN0VGFnPTgpKSk7aWYoYyYmIWQmJjAhPT0oYi5tb2RlJjIpKWlmKG51bGw9PT1hJiYhMCE9PWIubWVtb2l6ZWRQcm9wcy51bnN0YWJsZV9hdm9pZFRoaXNGYWxsYmFja3x8MCE9PShNLmN1cnJlbnQmMSkpUz09PXRpJiYoUz11aSk7ZWxzZXtpZihTPT09dGl8fFM9PT11aSlTPXZpOzAhPT13aSYmbnVsbCE9PVQmJih4aShULFUpLHlpKFQsd2kpKX1pZihjfHxkKWIuZWZmZWN0VGFnfD00O3JldHVybiBudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxvaShiKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGIpLG51bGw7Y2FzZSAxNzpyZXR1cm4gTChiLnR5cGUpJiZEZigpLG51bGw7Y2FzZSAxOTpIKE0pO2Q9Yi5tZW1vaXplZFN0YXRlO2lmKG51bGw9PT1kKXJldHVybiBudWxsO2U9MCE9PShiLmVmZmVjdFRhZyY2NCk7Zj1kLnJlbmRlcmluZztpZihudWxsPT09ZilpZihlKXJpKGQsITEpO2Vsc2V7aWYoUyE9PXRpfHxudWxsIT09YSYmMCE9PShhLmVmZmVjdFRhZyZcbjY0KSlmb3IoZj1iLmNoaWxkO251bGwhPT1mOyl7YT1oaChmKTtpZihudWxsIT09YSl7Yi5lZmZlY3RUYWd8PTY0O3JpKGQsITEpO2U9YS51cGRhdGVRdWV1ZTtudWxsIT09ZSYmKGIudXBkYXRlUXVldWU9ZSxiLmVmZmVjdFRhZ3w9NCk7bnVsbD09PWQubGFzdEVmZmVjdCYmKGIuZmlyc3RFZmZlY3Q9bnVsbCk7Yi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdDtmb3IoZD1iLmNoaWxkO251bGwhPT1kOyllPWQsZj1jLGUuZWZmZWN0VGFnJj0yLGUubmV4dEVmZmVjdD1udWxsLGUuZmlyc3RFZmZlY3Q9bnVsbCxlLmxhc3RFZmZlY3Q9bnVsbCxhPWUuYWx0ZXJuYXRlLG51bGw9PT1hPyhlLmNoaWxkRXhwaXJhdGlvblRpbWU9MCxlLmV4cGlyYXRpb25UaW1lPWYsZS5jaGlsZD1udWxsLGUubWVtb2l6ZWRQcm9wcz1udWxsLGUubWVtb2l6ZWRTdGF0ZT1udWxsLGUudXBkYXRlUXVldWU9bnVsbCxlLmRlcGVuZGVuY2llcz1udWxsKTooZS5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZSxcbmUuZXhwaXJhdGlvblRpbWU9YS5leHBpcmF0aW9uVGltZSxlLmNoaWxkPWEuY2hpbGQsZS5tZW1vaXplZFByb3BzPWEubWVtb2l6ZWRQcm9wcyxlLm1lbW9pemVkU3RhdGU9YS5tZW1vaXplZFN0YXRlLGUudXBkYXRlUXVldWU9YS51cGRhdGVRdWV1ZSxmPWEuZGVwZW5kZW5jaWVzLGUuZGVwZW5kZW5jaWVzPW51bGw9PT1mP251bGw6e2V4cGlyYXRpb25UaW1lOmYuZXhwaXJhdGlvblRpbWUsZmlyc3RDb250ZXh0OmYuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Zi5yZXNwb25kZXJzfSksZD1kLnNpYmxpbmc7SShNLE0uY3VycmVudCYxfDIpO3JldHVybiBiLmNoaWxkfWY9Zi5zaWJsaW5nfX1lbHNle2lmKCFlKWlmKGE9aGgoZiksbnVsbCE9PWEpe2lmKGIuZWZmZWN0VGFnfD02NCxlPSEwLGM9YS51cGRhdGVRdWV1ZSxudWxsIT09YyYmKGIudXBkYXRlUXVldWU9YyxiLmVmZmVjdFRhZ3w9NCkscmkoZCwhMCksbnVsbD09PWQudGFpbCYmXCJoaWRkZW5cIj09PWQudGFpbE1vZGUmJiFmLmFsdGVybmF0ZSlyZXR1cm4gYj1cbmIubGFzdEVmZmVjdD1kLmxhc3RFZmZlY3QsbnVsbCE9PWImJihiLm5leHRFZmZlY3Q9bnVsbCksbnVsbH1lbHNlIDIqJGYoKS1kLnJlbmRlcmluZ1N0YXJ0VGltZT5kLnRhaWxFeHBpcmF0aW9uJiYxPGMmJihiLmVmZmVjdFRhZ3w9NjQsZT0hMCxyaShkLCExKSxiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT1jLTEpO2QuaXNCYWNrd2FyZHM/KGYuc2libGluZz1iLmNoaWxkLGIuY2hpbGQ9Zik6KGM9ZC5sYXN0LG51bGwhPT1jP2Muc2libGluZz1mOmIuY2hpbGQ9ZixkLmxhc3Q9Zil9cmV0dXJuIG51bGwhPT1kLnRhaWw/KDA9PT1kLnRhaWxFeHBpcmF0aW9uJiYoZC50YWlsRXhwaXJhdGlvbj0kZigpKzUwMCksYz1kLnRhaWwsZC5yZW5kZXJpbmc9YyxkLnRhaWw9Yy5zaWJsaW5nLGQubGFzdEVmZmVjdD1iLmxhc3RFZmZlY3QsZC5yZW5kZXJpbmdTdGFydFRpbWU9JGYoKSxjLnNpYmxpbmc9bnVsbCxiPU0uY3VycmVudCxJKE0sZT9iJjF8MjpiJjEpLGMpOm51bGx9dGhyb3cgRXJyb3IodSgxNTYsXG5iLnRhZykpO31mdW5jdGlvbiB6aShhKXtzd2l0Y2goYS50YWcpe2Nhc2UgMTpMKGEudHlwZSkmJkRmKCk7dmFyIGI9YS5lZmZlY3RUYWc7cmV0dXJuIGImNDA5Nj8oYS5lZmZlY3RUYWc9YiYtNDA5N3w2NCxhKTpudWxsO2Nhc2UgMzplaCgpO0goSyk7SChKKTtiPWEuZWZmZWN0VGFnO2lmKDAhPT0oYiY2NCkpdGhyb3cgRXJyb3IodSgyODUpKTthLmVmZmVjdFRhZz1iJi00MDk3fDY0O3JldHVybiBhO2Nhc2UgNTpyZXR1cm4gZ2goYSksbnVsbDtjYXNlIDEzOnJldHVybiBIKE0pLGI9YS5lZmZlY3RUYWcsYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAxOTpyZXR1cm4gSChNKSxudWxsO2Nhc2UgNDpyZXR1cm4gZWgoKSxudWxsO2Nhc2UgMTA6cmV0dXJuIG9nKGEpLG51bGw7ZGVmYXVsdDpyZXR1cm4gbnVsbH19ZnVuY3Rpb24gQWkoYSxiKXtyZXR1cm57dmFsdWU6YSxzb3VyY2U6YixzdGFjazpxYihiKX19XG52YXIgQmk9XCJmdW5jdGlvblwiPT09dHlwZW9mIFdlYWtTZXQ/V2Vha1NldDpTZXQ7ZnVuY3Rpb24gQ2koYSxiKXt2YXIgYz1iLnNvdXJjZSxkPWIuc3RhY2s7bnVsbD09PWQmJm51bGwhPT1jJiYoZD1xYihjKSk7bnVsbCE9PWMmJnBiKGMudHlwZSk7Yj1iLnZhbHVlO251bGwhPT1hJiYxPT09YS50YWcmJnBiKGEudHlwZSk7dHJ5e2NvbnNvbGUuZXJyb3IoYil9Y2F0Y2goZSl7c2V0VGltZW91dChmdW5jdGlvbigpe3Rocm93IGU7fSl9fWZ1bmN0aW9uIERpKGEsYil7dHJ5e2IucHJvcHM9YS5tZW1vaXplZFByb3BzLGIuc3RhdGU9YS5tZW1vaXplZFN0YXRlLGIuY29tcG9uZW50V2lsbFVubW91bnQoKX1jYXRjaChjKXtFaShhLGMpfX1mdW5jdGlvbiBGaShhKXt2YXIgYj1hLnJlZjtpZihudWxsIT09YilpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYil0cnl7YihudWxsKX1jYXRjaChjKXtFaShhLGMpfWVsc2UgYi5jdXJyZW50PW51bGx9XG5mdW5jdGlvbiBHaShhLGIpe3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOnJldHVybjtjYXNlIDE6aWYoYi5lZmZlY3RUYWcmMjU2JiZudWxsIT09YSl7dmFyIGM9YS5tZW1vaXplZFByb3BzLGQ9YS5tZW1vaXplZFN0YXRlO2E9Yi5zdGF0ZU5vZGU7Yj1hLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKGIuZWxlbWVudFR5cGU9PT1iLnR5cGU/YzppZyhiLnR5cGUsYyksZCk7YS5fX3JlYWN0SW50ZXJuYWxTbmFwc2hvdEJlZm9yZVVwZGF0ZT1ifXJldHVybjtjYXNlIDM6Y2FzZSA1OmNhc2UgNjpjYXNlIDQ6Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9XG5mdW5jdGlvbiBIaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmRlc3Ryb3k7Yy5kZXN0cm95PXZvaWQgMDt2b2lkIDAhPT1kJiZkKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1mdW5jdGlvbiBJaShhLGIpe2I9Yi51cGRhdGVRdWV1ZTtiPW51bGwhPT1iP2IubGFzdEVmZmVjdDpudWxsO2lmKG51bGwhPT1iKXt2YXIgYz1iPWIubmV4dDtkb3tpZigoYy50YWcmYSk9PT1hKXt2YXIgZD1jLmNyZWF0ZTtjLmRlc3Ryb3k9ZCgpfWM9Yy5uZXh0fXdoaWxlKGMhPT1iKX19XG5mdW5jdGlvbiBKaShhLGIsYyl7c3dpdGNoKGMudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6SWkoMyxjKTtyZXR1cm47Y2FzZSAxOmE9Yy5zdGF0ZU5vZGU7aWYoYy5lZmZlY3RUYWcmNClpZihudWxsPT09YilhLmNvbXBvbmVudERpZE1vdW50KCk7ZWxzZXt2YXIgZD1jLmVsZW1lbnRUeXBlPT09Yy50eXBlP2IubWVtb2l6ZWRQcm9wczppZyhjLnR5cGUsYi5tZW1vaXplZFByb3BzKTthLmNvbXBvbmVudERpZFVwZGF0ZShkLGIubWVtb2l6ZWRTdGF0ZSxhLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlKX1iPWMudXBkYXRlUXVldWU7bnVsbCE9PWImJkNnKGMsYixhKTtyZXR1cm47Y2FzZSAzOmI9Yy51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YT1udWxsO2lmKG51bGwhPT1jLmNoaWxkKXN3aXRjaChjLmNoaWxkLnRhZyl7Y2FzZSA1OmE9Yy5jaGlsZC5zdGF0ZU5vZGU7YnJlYWs7Y2FzZSAxOmE9Yy5jaGlsZC5zdGF0ZU5vZGV9Q2coYyxiLGEpfXJldHVybjtcbmNhc2UgNTphPWMuc3RhdGVOb2RlO251bGw9PT1iJiZjLmVmZmVjdFRhZyY0JiZGZChjLnR5cGUsYy5tZW1vaXplZFByb3BzKSYmYS5mb2N1cygpO3JldHVybjtjYXNlIDY6cmV0dXJuO2Nhc2UgNDpyZXR1cm47Y2FzZSAxMjpyZXR1cm47Y2FzZSAxMzpudWxsPT09Yy5tZW1vaXplZFN0YXRlJiYoYz1jLmFsdGVybmF0ZSxudWxsIT09YyYmKGM9Yy5tZW1vaXplZFN0YXRlLG51bGwhPT1jJiYoYz1jLmRlaHlkcmF0ZWQsbnVsbCE9PWMmJlZjKGMpKSkpO3JldHVybjtjYXNlIDE5OmNhc2UgMTc6Y2FzZSAyMDpjYXNlIDIxOnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEtpKGEsYixjKXtcImZ1bmN0aW9uXCI9PT10eXBlb2YgTGkmJkxpKGIpO3N3aXRjaChiLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNDpjYXNlIDE1OmNhc2UgMjI6YT1iLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1hJiYoYT1hLmxhc3RFZmZlY3QsbnVsbCE9PWEpKXt2YXIgZD1hLm5leHQ7Y2coOTc8Yz85NzpjLGZ1bmN0aW9uKCl7dmFyIGE9ZDtkb3t2YXIgYz1hLmRlc3Ryb3k7aWYodm9pZCAwIT09Yyl7dmFyIGc9Yjt0cnl7YygpfWNhdGNoKGgpe0VpKGcsaCl9fWE9YS5uZXh0fXdoaWxlKGEhPT1kKX0pfWJyZWFrO2Nhc2UgMTpGaShiKTtjPWIuc3RhdGVOb2RlO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBjLmNvbXBvbmVudFdpbGxVbm1vdW50JiZEaShiLGMpO2JyZWFrO2Nhc2UgNTpGaShiKTticmVhaztjYXNlIDQ6TWkoYSxiLGMpfX1cbmZ1bmN0aW9uIE5pKGEpe3ZhciBiPWEuYWx0ZXJuYXRlO2EucmV0dXJuPW51bGw7YS5jaGlsZD1udWxsO2EubWVtb2l6ZWRTdGF0ZT1udWxsO2EudXBkYXRlUXVldWU9bnVsbDthLmRlcGVuZGVuY2llcz1udWxsO2EuYWx0ZXJuYXRlPW51bGw7YS5maXJzdEVmZmVjdD1udWxsO2EubGFzdEVmZmVjdD1udWxsO2EucGVuZGluZ1Byb3BzPW51bGw7YS5tZW1vaXplZFByb3BzPW51bGw7YS5zdGF0ZU5vZGU9bnVsbDtudWxsIT09YiYmTmkoYil9ZnVuY3Rpb24gT2koYSl7cmV0dXJuIDU9PT1hLnRhZ3x8Mz09PWEudGFnfHw0PT09YS50YWd9XG5mdW5jdGlvbiBQaShhKXthOntmb3IodmFyIGI9YS5yZXR1cm47bnVsbCE9PWI7KXtpZihPaShiKSl7dmFyIGM9YjticmVhayBhfWI9Yi5yZXR1cm59dGhyb3cgRXJyb3IodSgxNjApKTt9Yj1jLnN0YXRlTm9kZTtzd2l0Y2goYy50YWcpe2Nhc2UgNTp2YXIgZD0hMTticmVhaztjYXNlIDM6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztjYXNlIDQ6Yj1iLmNvbnRhaW5lckluZm87ZD0hMDticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMTYxKSk7fWMuZWZmZWN0VGFnJjE2JiYoUmIoYixcIlwiKSxjLmVmZmVjdFRhZyY9LTE3KTthOmI6Zm9yKGM9YTs7KXtmb3IoO251bGw9PT1jLnNpYmxpbmc7KXtpZihudWxsPT09Yy5yZXR1cm58fE9pKGMucmV0dXJuKSl7Yz1udWxsO2JyZWFrIGF9Yz1jLnJldHVybn1jLnNpYmxpbmcucmV0dXJuPWMucmV0dXJuO2ZvcihjPWMuc2libGluZzs1IT09Yy50YWcmJjYhPT1jLnRhZyYmMTghPT1jLnRhZzspe2lmKGMuZWZmZWN0VGFnJjIpY29udGludWUgYjtcbmlmKG51bGw9PT1jLmNoaWxkfHw0PT09Yy50YWcpY29udGludWUgYjtlbHNlIGMuY2hpbGQucmV0dXJuPWMsYz1jLmNoaWxkfWlmKCEoYy5lZmZlY3RUYWcmMikpe2M9Yy5zdGF0ZU5vZGU7YnJlYWsgYX19ZD9RaShhLGMsYik6UmkoYSxjLGIpfVxuZnVuY3Rpb24gUWkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/OD09PWMubm9kZVR5cGU/Yy5wYXJlbnROb2RlLmluc2VydEJlZm9yZShhLGIpOmMuaW5zZXJ0QmVmb3JlKGEsYik6KDg9PT1jLm5vZGVUeXBlPyhiPWMucGFyZW50Tm9kZSxiLmluc2VydEJlZm9yZShhLGMpKTooYj1jLGIuYXBwZW5kQ2hpbGQoYSkpLGM9Yy5fcmVhY3RSb290Q29udGFpbmVyLG51bGwhPT1jJiZ2b2lkIDAhPT1jfHxudWxsIT09Yi5vbmNsaWNrfHwoYi5vbmNsaWNrPXNkKSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFFpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUWkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gUmkoYSxiLGMpe3ZhciBkPWEudGFnLGU9NT09PWR8fDY9PT1kO2lmKGUpYT1lP2Euc3RhdGVOb2RlOmEuc3RhdGVOb2RlLmluc3RhbmNlLGI/Yy5pbnNlcnRCZWZvcmUoYSxiKTpjLmFwcGVuZENoaWxkKGEpO2Vsc2UgaWYoNCE9PWQmJihhPWEuY2hpbGQsbnVsbCE9PWEpKWZvcihSaShhLGIsYyksYT1hLnNpYmxpbmc7bnVsbCE9PWE7KVJpKGEsYixjKSxhPWEuc2libGluZ31cbmZ1bmN0aW9uIE1pKGEsYixjKXtmb3IodmFyIGQ9YixlPSExLGYsZzs7KXtpZighZSl7ZT1kLnJldHVybjthOmZvcig7Oyl7aWYobnVsbD09PWUpdGhyb3cgRXJyb3IodSgxNjApKTtmPWUuc3RhdGVOb2RlO3N3aXRjaChlLnRhZyl7Y2FzZSA1Omc9ITE7YnJlYWsgYTtjYXNlIDM6Zj1mLmNvbnRhaW5lckluZm87Zz0hMDticmVhayBhO2Nhc2UgNDpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGF9ZT1lLnJldHVybn1lPSEwfWlmKDU9PT1kLnRhZ3x8Nj09PWQudGFnKXthOmZvcih2YXIgaD1hLGs9ZCxsPWMsbT1rOzspaWYoS2koaCxtLGwpLG51bGwhPT1tLmNoaWxkJiY0IT09bS50YWcpbS5jaGlsZC5yZXR1cm49bSxtPW0uY2hpbGQ7ZWxzZXtpZihtPT09aylicmVhayBhO2Zvcig7bnVsbD09PW0uc2libGluZzspe2lmKG51bGw9PT1tLnJldHVybnx8bS5yZXR1cm49PT1rKWJyZWFrIGE7bT1tLnJldHVybn1tLnNpYmxpbmcucmV0dXJuPW0ucmV0dXJuO209bS5zaWJsaW5nfWc/KGg9XG5mLGs9ZC5zdGF0ZU5vZGUsOD09PWgubm9kZVR5cGU/aC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKGspOmgucmVtb3ZlQ2hpbGQoaykpOmYucmVtb3ZlQ2hpbGQoZC5zdGF0ZU5vZGUpfWVsc2UgaWYoND09PWQudGFnKXtpZihudWxsIT09ZC5jaGlsZCl7Zj1kLnN0YXRlTm9kZS5jb250YWluZXJJbmZvO2c9ITA7ZC5jaGlsZC5yZXR1cm49ZDtkPWQuY2hpbGQ7Y29udGludWV9fWVsc2UgaWYoS2koYSxkLGMpLG51bGwhPT1kLmNoaWxkKXtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX1pZihkPT09YilicmVhaztmb3IoO251bGw9PT1kLnNpYmxpbmc7KXtpZihudWxsPT09ZC5yZXR1cm58fGQucmV0dXJuPT09YilyZXR1cm47ZD1kLnJldHVybjs0PT09ZC50YWcmJihlPSExKX1kLnNpYmxpbmcucmV0dXJuPWQucmV0dXJuO2Q9ZC5zaWJsaW5nfX1cbmZ1bmN0aW9uIFNpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjpIaSgzLGIpO3JldHVybjtjYXNlIDE6cmV0dXJuO2Nhc2UgNTp2YXIgYz1iLnN0YXRlTm9kZTtpZihudWxsIT1jKXt2YXIgZD1iLm1lbW9pemVkUHJvcHMsZT1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6ZDthPWIudHlwZTt2YXIgZj1iLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9bnVsbDtpZihudWxsIT09Zil7Y1tOZF09ZDtcImlucHV0XCI9PT1hJiZcInJhZGlvXCI9PT1kLnR5cGUmJm51bGwhPWQubmFtZSYmQmIoYyxkKTtwZChhLGUpO2I9cGQoYSxkKTtmb3IoZT0wO2U8Zi5sZW5ndGg7ZSs9Mil7dmFyIGc9ZltlXSxoPWZbZSsxXTtcInN0eWxlXCI9PT1nP21kKGMsaCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zz9RYihjLGgpOlwiY2hpbGRyZW5cIj09PWc/UmIoYyxoKTpYYShjLGcsaCxiKX1zd2l0Y2goYSl7Y2FzZSBcImlucHV0XCI6Q2IoYyxkKTticmVhaztcbmNhc2UgXCJ0ZXh0YXJlYVwiOktiKGMsZCk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlLGMuX3dyYXBwZXJTdGF0ZS53YXNNdWx0aXBsZT0hIWQubXVsdGlwbGUsYT1kLnZhbHVlLG51bGwhPWE/SGIoYywhIWQubXVsdGlwbGUsYSwhMSk6YiE9PSEhZC5tdWx0aXBsZSYmKG51bGwhPWQuZGVmYXVsdFZhbHVlP0hiKGMsISFkLm11bHRpcGxlLGQuZGVmYXVsdFZhbHVlLCEwKTpIYihjLCEhZC5tdWx0aXBsZSxkLm11bHRpcGxlP1tdOlwiXCIsITEpKX19fXJldHVybjtjYXNlIDY6aWYobnVsbD09PWIuc3RhdGVOb2RlKXRocm93IEVycm9yKHUoMTYyKSk7Yi5zdGF0ZU5vZGUubm9kZVZhbHVlPWIubWVtb2l6ZWRQcm9wcztyZXR1cm47Y2FzZSAzOmI9Yi5zdGF0ZU5vZGU7Yi5oeWRyYXRlJiYoYi5oeWRyYXRlPSExLFZjKGIuY29udGFpbmVySW5mbykpO3JldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOmM9YjtudWxsPT09Yi5tZW1vaXplZFN0YXRlP1xuZD0hMTooZD0hMCxjPWIuY2hpbGQsVGk9JGYoKSk7aWYobnVsbCE9PWMpYTpmb3IoYT1jOzspe2lmKDU9PT1hLnRhZylmPWEuc3RhdGVOb2RlLGQ/KGY9Zi5zdHlsZSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5zZXRQcm9wZXJ0eT9mLnNldFByb3BlcnR5KFwiZGlzcGxheVwiLFwibm9uZVwiLFwiaW1wb3J0YW50XCIpOmYuZGlzcGxheT1cIm5vbmVcIik6KGY9YS5zdGF0ZU5vZGUsZT1hLm1lbW9pemVkUHJvcHMuc3R5bGUsZT12b2lkIDAhPT1lJiZudWxsIT09ZSYmZS5oYXNPd25Qcm9wZXJ0eShcImRpc3BsYXlcIik/ZS5kaXNwbGF5Om51bGwsZi5zdHlsZS5kaXNwbGF5PWxkKFwiZGlzcGxheVwiLGUpKTtlbHNlIGlmKDY9PT1hLnRhZylhLnN0YXRlTm9kZS5ub2RlVmFsdWU9ZD9cIlwiOmEubWVtb2l6ZWRQcm9wcztlbHNlIGlmKDEzPT09YS50YWcmJm51bGwhPT1hLm1lbW9pemVkU3RhdGUmJm51bGw9PT1hLm1lbW9pemVkU3RhdGUuZGVoeWRyYXRlZCl7Zj1hLmNoaWxkLnNpYmxpbmc7Zi5yZXR1cm49YTthPVxuZjtjb250aW51ZX1lbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YylicmVhaztmb3IoO251bGw9PT1hLnNpYmxpbmc7KXtpZihudWxsPT09YS5yZXR1cm58fGEucmV0dXJuPT09YylicmVhayBhO2E9YS5yZXR1cm59YS5zaWJsaW5nLnJldHVybj1hLnJldHVybjthPWEuc2libGluZ31VaShiKTtyZXR1cm47Y2FzZSAxOTpVaShiKTtyZXR1cm47Y2FzZSAxNzpyZXR1cm59dGhyb3cgRXJyb3IodSgxNjMpKTt9ZnVuY3Rpb24gVWkoYSl7dmFyIGI9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09Yil7YS51cGRhdGVRdWV1ZT1udWxsO3ZhciBjPWEuc3RhdGVOb2RlO251bGw9PT1jJiYoYz1hLnN0YXRlTm9kZT1uZXcgQmkpO2IuZm9yRWFjaChmdW5jdGlvbihiKXt2YXIgZD1WaS5iaW5kKG51bGwsYSxiKTtjLmhhcyhiKXx8KGMuYWRkKGIpLGIudGhlbihkLGQpKX0pfX1cbnZhciBXaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcDtmdW5jdGlvbiBYaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7Yy5wYXlsb2FkPXtlbGVtZW50Om51bGx9O3ZhciBkPWIudmFsdWU7Yy5jYWxsYmFjaz1mdW5jdGlvbigpe1lpfHwoWWk9ITAsWmk9ZCk7Q2koYSxiKX07cmV0dXJuIGN9XG5mdW5jdGlvbiAkaShhLGIsYyl7Yz13ZyhjLG51bGwpO2MudGFnPTM7dmFyIGQ9YS50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZCl7dmFyIGU9Yi52YWx1ZTtjLnBheWxvYWQ9ZnVuY3Rpb24oKXtDaShhLGIpO3JldHVybiBkKGUpfX12YXIgZj1hLnN0YXRlTm9kZTtudWxsIT09ZiYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGYuY29tcG9uZW50RGlkQ2F0Y2gmJihjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7XCJmdW5jdGlvblwiIT09dHlwZW9mIGQmJihudWxsPT09YWo/YWo9bmV3IFNldChbdGhpc10pOmFqLmFkZCh0aGlzKSxDaShhLGIpKTt2YXIgYz1iLnN0YWNrO3RoaXMuY29tcG9uZW50RGlkQ2F0Y2goYi52YWx1ZSx7Y29tcG9uZW50U3RhY2s6bnVsbCE9PWM/YzpcIlwifSl9KTtyZXR1cm4gY31cbnZhciBiaj1NYXRoLmNlaWwsY2o9V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixkaj1XYS5SZWFjdEN1cnJlbnRPd25lcixWPTAsZWo9OCxmaj0xNixnaj0zMix0aT0wLGhqPTEsaWo9Mix1aT0zLHZpPTQsamo9NSxXPVYsVD1udWxsLFg9bnVsbCxVPTAsUz10aSxraj1udWxsLGxqPTEwNzM3NDE4MjMsbWo9MTA3Mzc0MTgyMyxuaj1udWxsLHdpPTAsb2o9ITEsVGk9MCxwaj01MDAsWT1udWxsLFlpPSExLFppPW51bGwsYWo9bnVsbCxxaj0hMSxyaj1udWxsLHNqPTkwLHRqPW51bGwsdWo9MCx2aj1udWxsLHdqPTA7ZnVuY3Rpb24gR2coKXtyZXR1cm4oVyYoZmp8Z2opKSE9PVY/MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKTowIT09d2o/d2o6d2o9MTA3Mzc0MTgyMS0oJGYoKS8xMHwwKX1cbmZ1bmN0aW9uIEhnKGEsYixjKXtiPWIubW9kZTtpZigwPT09KGImMikpcmV0dXJuIDEwNzM3NDE4MjM7dmFyIGQ9YWcoKTtpZigwPT09KGImNCkpcmV0dXJuIDk5PT09ZD8xMDczNzQxODIzOjEwNzM3NDE4MjI7aWYoKFcmZmopIT09VilyZXR1cm4gVTtpZihudWxsIT09YylhPWhnKGEsYy50aW1lb3V0TXN8MHx8NUUzLDI1MCk7ZWxzZSBzd2l0Y2goZCl7Y2FzZSA5OTphPTEwNzM3NDE4MjM7YnJlYWs7Y2FzZSA5ODphPWhnKGEsMTUwLDEwMCk7YnJlYWs7Y2FzZSA5NzpjYXNlIDk2OmE9aGcoYSw1RTMsMjUwKTticmVhaztjYXNlIDk1OmE9MjticmVhaztkZWZhdWx0OnRocm93IEVycm9yKHUoMzI2KSk7fW51bGwhPT1UJiZhPT09VSYmLS1hO3JldHVybiBhfVxuZnVuY3Rpb24gSWcoYSxiKXtpZig1MDx1ail0aHJvdyB1aj0wLHZqPW51bGwsRXJyb3IodSgxODUpKTthPXhqKGEsYik7aWYobnVsbCE9PWEpe3ZhciBjPWFnKCk7MTA3Mzc0MTgyMz09PWI/KFcmZWopIT09ViYmKFcmKGZqfGdqKSk9PT1WP3lqKGEpOihaKGEpLFc9PT1WJiZnZygpKTpaKGEpOyhXJjQpPT09Vnx8OTghPT1jJiY5OSE9PWN8fChudWxsPT09dGo/dGo9bmV3IE1hcChbW2EsYl1dKTooYz10ai5nZXQoYSksKHZvaWQgMD09PWN8fGM+YikmJnRqLnNldChhLGIpKSl9fVxuZnVuY3Rpb24geGooYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBkPWEucmV0dXJuLGU9bnVsbDtpZihudWxsPT09ZCYmMz09PWEudGFnKWU9YS5zdGF0ZU5vZGU7ZWxzZSBmb3IoO251bGwhPT1kOyl7Yz1kLmFsdGVybmF0ZTtkLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGQuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtudWxsIT09YyYmYy5jaGlsZEV4cGlyYXRpb25UaW1lPGImJihjLmNoaWxkRXhwaXJhdGlvblRpbWU9Yik7aWYobnVsbD09PWQucmV0dXJuJiYzPT09ZC50YWcpe2U9ZC5zdGF0ZU5vZGU7YnJlYWt9ZD1kLnJldHVybn1udWxsIT09ZSYmKFQ9PT1lJiYoQmcoYiksUz09PXZpJiZ4aShlLFUpKSx5aShlLGIpKTtyZXR1cm4gZX1cbmZ1bmN0aW9uIHpqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2lmKDAhPT1iKXJldHVybiBiO2I9YS5maXJzdFBlbmRpbmdUaW1lO2lmKCFBaihhLGIpKXJldHVybiBiO3ZhciBjPWEubGFzdFBpbmdlZFRpbWU7YT1hLm5leHRLbm93blBlbmRpbmdMZXZlbDthPWM+YT9jOmE7cmV0dXJuIDI+PWEmJmIhPT1hPzA6YX1cbmZ1bmN0aW9uIFooYSl7aWYoMCE9PWEubGFzdEV4cGlyZWRUaW1lKWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0xMDczNzQxODIzLGEuY2FsbGJhY2tQcmlvcml0eT05OSxhLmNhbGxiYWNrTm9kZT1lZyh5ai5iaW5kKG51bGwsYSkpO2Vsc2V7dmFyIGI9emooYSksYz1hLmNhbGxiYWNrTm9kZTtpZigwPT09YiludWxsIT09YyYmKGEuY2FsbGJhY2tOb2RlPW51bGwsYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTAsYS5jYWxsYmFja1ByaW9yaXR5PTkwKTtlbHNle3ZhciBkPUdnKCk7MTA3Mzc0MTgyMz09PWI/ZD05OToxPT09Ynx8Mj09PWI/ZD05NTooZD0xMCooMTA3Mzc0MTgyMS1iKS0xMCooMTA3Mzc0MTgyMS1kKSxkPTA+PWQ/OTk6MjUwPj1kPzk4OjUyNTA+PWQ/OTc6OTUpO2lmKG51bGwhPT1jKXt2YXIgZT1hLmNhbGxiYWNrUHJpb3JpdHk7aWYoYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPT09YiYmZT49ZClyZXR1cm47YyE9PVRmJiZLZihjKX1hLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9XG5iO2EuY2FsbGJhY2tQcmlvcml0eT1kO2I9MTA3Mzc0MTgyMz09PWI/ZWcoeWouYmluZChudWxsLGEpKTpkZyhkLEJqLmJpbmQobnVsbCxhKSx7dGltZW91dDoxMCooMTA3Mzc0MTgyMS1iKS0kZigpfSk7YS5jYWxsYmFja05vZGU9Yn19fVxuZnVuY3Rpb24gQmooYSxiKXt3aj0wO2lmKGIpcmV0dXJuIGI9R2coKSxDaihhLGIpLFooYSksbnVsbDt2YXIgYz16aihhKTtpZigwIT09Yyl7Yj1hLmNhbGxiYWNrTm9kZTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZjPT09VXx8RWooYSxjKTtpZihudWxsIT09WCl7dmFyIGQ9VztXfD1majt2YXIgZT1GaigpO2RvIHRyeXtHaigpO2JyZWFrfWNhdGNoKGgpe0hqKGEsaCl9d2hpbGUoMSk7bmcoKTtXPWQ7Y2ouY3VycmVudD1lO2lmKFM9PT1oail0aHJvdyBiPWtqLEVqKGEsYykseGkoYSxjKSxaKGEpLGI7aWYobnVsbD09PVgpc3dpdGNoKGU9YS5maW5pc2hlZFdvcms9YS5jdXJyZW50LmFsdGVybmF0ZSxhLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9YyxkPVMsVD1udWxsLGQpe2Nhc2UgdGk6Y2FzZSBoajp0aHJvdyBFcnJvcih1KDM0NSkpO2Nhc2UgaWo6Q2ooYSwyPGM/MjpjKTticmVhaztjYXNlIHVpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO1xuYz09PWQmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1JaihlKSk7aWYoMTA3Mzc0MTgyMz09PWxqJiYoZT1UaStwai0kZigpLDEwPGUpKXtpZihvail7dmFyIGY9YS5sYXN0UGluZ2VkVGltZTtpZigwPT09Znx8Zj49Yyl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9fWY9emooYSk7aWYoMCE9PWYmJmYhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1kO2JyZWFrfWEudGltZW91dEhhbmRsZT1IZChKai5iaW5kKG51bGwsYSksZSk7YnJlYWt9SmooYSk7YnJlYWs7Y2FzZSB2aTp4aShhLGMpO2Q9YS5sYXN0U3VzcGVuZGVkVGltZTtjPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZihvaiYmKGU9YS5sYXN0UGluZ2VkVGltZSwwPT09ZXx8ZT49Yykpe2EubGFzdFBpbmdlZFRpbWU9YztFaihhLGMpO2JyZWFrfWU9emooYSk7aWYoMCE9PWUmJmUhPT1jKWJyZWFrO2lmKDAhPT1kJiZkIT09Yyl7YS5sYXN0UGluZ2VkVGltZT1cbmQ7YnJlYWt9MTA3Mzc0MTgyMyE9PW1qP2Q9MTAqKDEwNzM3NDE4MjEtbWopLSRmKCk6MTA3Mzc0MTgyMz09PWxqP2Q9MDooZD0xMCooMTA3Mzc0MTgyMS1saiktNUUzLGU9JGYoKSxjPTEwKigxMDczNzQxODIxLWMpLWUsZD1lLWQsMD5kJiYoZD0wKSxkPSgxMjA+ZD8xMjA6NDgwPmQ/NDgwOjEwODA+ZD8xMDgwOjE5MjA+ZD8xOTIwOjNFMz5kPzNFMzo0MzIwPmQ/NDMyMDoxOTYwKmJqKGQvMTk2MCkpLWQsYzxkJiYoZD1jKSk7aWYoMTA8ZCl7YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha31KaihhKTticmVhaztjYXNlIGpqOmlmKDEwNzM3NDE4MjMhPT1saiYmbnVsbCE9PW5qKXtmPWxqO3ZhciBnPW5qO2Q9Zy5idXN5TWluRHVyYXRpb25Nc3wwOzA+PWQ/ZD0wOihlPWcuYnVzeURlbGF5TXN8MCxmPSRmKCktKDEwKigxMDczNzQxODIxLWYpLShnLnRpbWVvdXRNc3wwfHw1RTMpKSxkPWY8PWU/MDplK2QtZik7aWYoMTA8ZCl7eGkoYSxjKTthLnRpbWVvdXRIYW5kbGU9XG5IZChKai5iaW5kKG51bGwsYSksZCk7YnJlYWt9fUpqKGEpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjkpKTt9WihhKTtpZihhLmNhbGxiYWNrTm9kZT09PWIpcmV0dXJuIEJqLmJpbmQobnVsbCxhKX19cmV0dXJuIG51bGx9XG5mdW5jdGlvbiB5aihhKXt2YXIgYj1hLmxhc3RFeHBpcmVkVGltZTtiPTAhPT1iP2I6MTA3Mzc0MTgyMztpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTtEaigpO2E9PT1UJiZiPT09VXx8RWooYSxiKTtpZihudWxsIT09WCl7dmFyIGM9VztXfD1majt2YXIgZD1GaigpO2RvIHRyeXtLaigpO2JyZWFrfWNhdGNoKGUpe0hqKGEsZSl9d2hpbGUoMSk7bmcoKTtXPWM7Y2ouY3VycmVudD1kO2lmKFM9PT1oail0aHJvdyBjPWtqLEVqKGEsYikseGkoYSxiKSxaKGEpLGM7aWYobnVsbCE9PVgpdGhyb3cgRXJyb3IodSgyNjEpKTthLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1iO1Q9bnVsbDtKaihhKTtaKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIExqKCl7aWYobnVsbCE9PXRqKXt2YXIgYT10ajt0aj1udWxsO2EuZm9yRWFjaChmdW5jdGlvbihhLGMpe0NqKGMsYSk7WihjKX0pO2dnKCl9fVxuZnVuY3Rpb24gTWooYSxiKXt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1mdW5jdGlvbiBOaihhLGIpe3ZhciBjPVc7VyY9LTI7V3w9ZWo7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX1cbmZ1bmN0aW9uIEVqKGEsYil7YS5maW5pc2hlZFdvcms9bnVsbDthLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt2YXIgYz1hLnRpbWVvdXRIYW5kbGU7LTEhPT1jJiYoYS50aW1lb3V0SGFuZGxlPS0xLElkKGMpKTtpZihudWxsIT09WClmb3IoYz1YLnJldHVybjtudWxsIT09Yzspe3ZhciBkPWM7c3dpdGNoKGQudGFnKXtjYXNlIDE6ZD1kLnR5cGUuY2hpbGRDb250ZXh0VHlwZXM7bnVsbCE9PWQmJnZvaWQgMCE9PWQmJkRmKCk7YnJlYWs7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2JyZWFrO2Nhc2UgNTpnaChkKTticmVhaztjYXNlIDQ6ZWgoKTticmVhaztjYXNlIDEzOkgoTSk7YnJlYWs7Y2FzZSAxOTpIKE0pO2JyZWFrO2Nhc2UgMTA6b2coZCl9Yz1jLnJldHVybn1UPWE7WD1TZyhhLmN1cnJlbnQsbnVsbCk7VT1iO1M9dGk7a2o9bnVsbDttaj1saj0xMDczNzQxODIzO25qPW51bGw7d2k9MDtvaj0hMX1cbmZ1bmN0aW9uIEhqKGEsYil7ZG97dHJ5e25nKCk7amguY3VycmVudD1zaDtpZihtaClmb3IodmFyIGM9Ti5tZW1vaXplZFN0YXRlO251bGwhPT1jOyl7dmFyIGQ9Yy5xdWV1ZTtudWxsIT09ZCYmKGQucGVuZGluZz1udWxsKTtjPWMubmV4dH1saD0wO1A9Tz1OPW51bGw7bWg9ITE7aWYobnVsbD09PVh8fG51bGw9PT1YLnJldHVybilyZXR1cm4gUz1oaixraj1iLFg9bnVsbDthOnt2YXIgZT1hLGY9WC5yZXR1cm4sZz1YLGg9YjtiPVU7Zy5lZmZlY3RUYWd8PTIwNDg7Zy5maXJzdEVmZmVjdD1nLmxhc3RFZmZlY3Q9bnVsbDtpZihudWxsIT09aCYmXCJvYmplY3RcIj09PXR5cGVvZiBoJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC50aGVuKXt2YXIgaz1oO2lmKDA9PT0oZy5tb2RlJjIpKXt2YXIgbD1nLmFsdGVybmF0ZTtsPyhnLnVwZGF0ZVF1ZXVlPWwudXBkYXRlUXVldWUsZy5tZW1vaXplZFN0YXRlPWwubWVtb2l6ZWRTdGF0ZSxnLmV4cGlyYXRpb25UaW1lPWwuZXhwaXJhdGlvblRpbWUpOihnLnVwZGF0ZVF1ZXVlPVxubnVsbCxnLm1lbW9pemVkU3RhdGU9bnVsbCl9dmFyIG09MCE9PShNLmN1cnJlbnQmMSkscD1mO2Rve3ZhciB4O2lmKHg9MTM9PT1wLnRhZyl7dmFyIHo9cC5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT16KXg9bnVsbCE9PXouZGVoeWRyYXRlZD8hMDohMTtlbHNle3ZhciBjYT1wLm1lbW9pemVkUHJvcHM7eD12b2lkIDA9PT1jYS5mYWxsYmFjaz8hMTohMCE9PWNhLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrPyEwOm0/ITE6ITB9fWlmKHgpe3ZhciBEPXAudXBkYXRlUXVldWU7aWYobnVsbD09PUQpe3ZhciB0PW5ldyBTZXQ7dC5hZGQoayk7cC51cGRhdGVRdWV1ZT10fWVsc2UgRC5hZGQoayk7aWYoMD09PShwLm1vZGUmMikpe3AuZWZmZWN0VGFnfD02NDtnLmVmZmVjdFRhZyY9LTI5ODE7aWYoMT09PWcudGFnKWlmKG51bGw9PT1nLmFsdGVybmF0ZSlnLnRhZz0xNztlbHNle3ZhciB5PXdnKDEwNzM3NDE4MjMsbnVsbCk7eS50YWc9Mjt4ZyhnLHkpfWcuZXhwaXJhdGlvblRpbWU9MTA3Mzc0MTgyMztcbmJyZWFrIGF9aD12b2lkIDA7Zz1iO3ZhciBBPWUucGluZ0NhY2hlO251bGw9PT1BPyhBPWUucGluZ0NhY2hlPW5ldyBXaSxoPW5ldyBTZXQsQS5zZXQoayxoKSk6KGg9QS5nZXQoayksdm9pZCAwPT09aCYmKGg9bmV3IFNldCxBLnNldChrLGgpKSk7aWYoIWguaGFzKGcpKXtoLmFkZChnKTt2YXIgcT1Pai5iaW5kKG51bGwsZSxrLGcpO2sudGhlbihxLHEpfXAuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9YjticmVhayBhfXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApO2g9RXJyb3IoKHBiKGcudHlwZSl8fFwiQSBSZWFjdCBjb21wb25lbnRcIikrXCIgc3VzcGVuZGVkIHdoaWxlIHJlbmRlcmluZywgYnV0IG5vIGZhbGxiYWNrIFVJIHdhcyBzcGVjaWZpZWQuXFxuXFxuQWRkIGEgPFN1c3BlbnNlIGZhbGxiYWNrPS4uLj4gY29tcG9uZW50IGhpZ2hlciBpbiB0aGUgdHJlZSB0byBwcm92aWRlIGEgbG9hZGluZyBpbmRpY2F0b3Igb3IgcGxhY2Vob2xkZXIgdG8gZGlzcGxheS5cIitxYihnKSl9UyE9PVxuamomJihTPWlqKTtoPUFpKGgsZyk7cD1mO2Rve3N3aXRjaChwLnRhZyl7Y2FzZSAzOms9aDtwLmVmZmVjdFRhZ3w9NDA5NjtwLmV4cGlyYXRpb25UaW1lPWI7dmFyIEI9WGkocCxrLGIpO3lnKHAsQik7YnJlYWsgYTtjYXNlIDE6az1oO3ZhciB3PXAudHlwZSx1Yj1wLnN0YXRlTm9kZTtpZigwPT09KHAuZWZmZWN0VGFnJjY0KSYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3LmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8bnVsbCE9PXViJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgdWIuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXModWIpKSkpe3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgdmI9JGkocCxrLGIpO3lnKHAsdmIpO2JyZWFrIGF9fXA9cC5yZXR1cm59d2hpbGUobnVsbCE9PXApfVg9UGooWCl9Y2F0Y2goWGMpe2I9WGM7Y29udGludWV9YnJlYWt9d2hpbGUoMSl9XG5mdW5jdGlvbiBGaigpe3ZhciBhPWNqLmN1cnJlbnQ7Y2ouY3VycmVudD1zaDtyZXR1cm4gbnVsbD09PWE/c2g6YX1mdW5jdGlvbiBBZyhhLGIpe2E8bGomJjI8YSYmKGxqPWEpO251bGwhPT1iJiZhPG1qJiYyPGEmJihtaj1hLG5qPWIpfWZ1bmN0aW9uIEJnKGEpe2E+d2kmJih3aT1hKX1mdW5jdGlvbiBLaigpe2Zvcig7bnVsbCE9PVg7KVg9UWooWCl9ZnVuY3Rpb24gR2ooKXtmb3IoO251bGwhPT1YJiYhVWYoKTspWD1RaihYKX1mdW5jdGlvbiBRaihhKXt2YXIgYj1SaihhLmFsdGVybmF0ZSxhLFUpO2EubWVtb2l6ZWRQcm9wcz1hLnBlbmRpbmdQcm9wcztudWxsPT09YiYmKGI9UGooYSkpO2RqLmN1cnJlbnQ9bnVsbDtyZXR1cm4gYn1cbmZ1bmN0aW9uIFBqKGEpe1g9YTtkb3t2YXIgYj1YLmFsdGVybmF0ZTthPVgucmV0dXJuO2lmKDA9PT0oWC5lZmZlY3RUYWcmMjA0OCkpe2I9c2koYixYLFUpO2lmKDE9PT1VfHwxIT09WC5jaGlsZEV4cGlyYXRpb25UaW1lKXtmb3IodmFyIGM9MCxkPVguY2hpbGQ7bnVsbCE9PWQ7KXt2YXIgZT1kLmV4cGlyYXRpb25UaW1lLGY9ZC5jaGlsZEV4cGlyYXRpb25UaW1lO2U+YyYmKGM9ZSk7Zj5jJiYoYz1mKTtkPWQuc2libGluZ31YLmNoaWxkRXhwaXJhdGlvblRpbWU9Y31pZihudWxsIT09YilyZXR1cm4gYjtudWxsIT09YSYmMD09PShhLmVmZmVjdFRhZyYyMDQ4KSYmKG51bGw9PT1hLmZpcnN0RWZmZWN0JiYoYS5maXJzdEVmZmVjdD1YLmZpcnN0RWZmZWN0KSxudWxsIT09WC5sYXN0RWZmZWN0JiYobnVsbCE9PWEubGFzdEVmZmVjdCYmKGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PVguZmlyc3RFZmZlY3QpLGEubGFzdEVmZmVjdD1YLmxhc3RFZmZlY3QpLDE8WC5lZmZlY3RUYWcmJihudWxsIT09XG5hLmxhc3RFZmZlY3Q/YS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WDphLmZpcnN0RWZmZWN0PVgsYS5sYXN0RWZmZWN0PVgpKX1lbHNle2I9emkoWCk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZWZmZWN0VGFnJj0yMDQ3LGI7bnVsbCE9PWEmJihhLmZpcnN0RWZmZWN0PWEubGFzdEVmZmVjdD1udWxsLGEuZWZmZWN0VGFnfD0yMDQ4KX1iPVguc2libGluZztpZihudWxsIT09YilyZXR1cm4gYjtYPWF9d2hpbGUobnVsbCE9PVgpO1M9PT10aSYmKFM9amopO3JldHVybiBudWxsfWZ1bmN0aW9uIElqKGEpe3ZhciBiPWEuZXhwaXJhdGlvblRpbWU7YT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7cmV0dXJuIGI+YT9iOmF9ZnVuY3Rpb24gSmooYSl7dmFyIGI9YWcoKTtjZyg5OSxTai5iaW5kKG51bGwsYSxiKSk7cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBTaihhLGIpe2RvIERqKCk7d2hpbGUobnVsbCE9PXJqKTtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMjcpKTt2YXIgYz1hLmZpbmlzaGVkV29yayxkPWEuZmluaXNoZWRFeHBpcmF0aW9uVGltZTtpZihudWxsPT09YylyZXR1cm4gbnVsbDthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO2lmKGM9PT1hLmN1cnJlbnQpdGhyb3cgRXJyb3IodSgxNzcpKTthLmNhbGxiYWNrTm9kZT1udWxsO2EuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT0wO2EuY2FsbGJhY2tQcmlvcml0eT05MDthLm5leHRLbm93blBlbmRpbmdMZXZlbD0wO3ZhciBlPUlqKGMpO2EuZmlyc3RQZW5kaW5nVGltZT1lO2Q8PWEubGFzdFN1c3BlbmRlZFRpbWU/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmQ8PWEuZmlyc3RTdXNwZW5kZWRUaW1lJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9XG5kLTEpO2Q8PWEubGFzdFBpbmdlZFRpbWUmJihhLmxhc3RQaW5nZWRUaW1lPTApO2Q8PWEubGFzdEV4cGlyZWRUaW1lJiYoYS5sYXN0RXhwaXJlZFRpbWU9MCk7YT09PVQmJihYPVQ9bnVsbCxVPTApOzE8Yy5lZmZlY3RUYWc/bnVsbCE9PWMubGFzdEVmZmVjdD8oYy5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9YyxlPWMuZmlyc3RFZmZlY3QpOmU9YzplPWMuZmlyc3RFZmZlY3Q7aWYobnVsbCE9PWUpe3ZhciBmPVc7V3w9Z2o7ZGouY3VycmVudD1udWxsO0RkPWZkO3ZhciBnPXhkKCk7aWYoeWQoZykpe2lmKFwic2VsZWN0aW9uU3RhcnRcImluIGcpdmFyIGg9e3N0YXJ0Omcuc2VsZWN0aW9uU3RhcnQsZW5kOmcuc2VsZWN0aW9uRW5kfTtlbHNlIGE6e2g9KGg9Zy5vd25lckRvY3VtZW50KSYmaC5kZWZhdWx0Vmlld3x8d2luZG93O3ZhciBrPWguZ2V0U2VsZWN0aW9uJiZoLmdldFNlbGVjdGlvbigpO2lmKGsmJjAhPT1rLnJhbmdlQ291bnQpe2g9ay5hbmNob3JOb2RlO3ZhciBsPWsuYW5jaG9yT2Zmc2V0LFxubT1rLmZvY3VzTm9kZTtrPWsuZm9jdXNPZmZzZXQ7dHJ5e2gubm9kZVR5cGUsbS5ub2RlVHlwZX1jYXRjaCh3Yil7aD1udWxsO2JyZWFrIGF9dmFyIHA9MCx4PS0xLHo9LTEsY2E9MCxEPTAsdD1nLHk9bnVsbDtiOmZvcig7Oyl7Zm9yKHZhciBBOzspe3QhPT1ofHwwIT09bCYmMyE9PXQubm9kZVR5cGV8fCh4PXArbCk7dCE9PW18fDAhPT1rJiYzIT09dC5ub2RlVHlwZXx8KHo9cCtrKTszPT09dC5ub2RlVHlwZSYmKHArPXQubm9kZVZhbHVlLmxlbmd0aCk7aWYobnVsbD09PShBPXQuZmlyc3RDaGlsZCkpYnJlYWs7eT10O3Q9QX1mb3IoOzspe2lmKHQ9PT1nKWJyZWFrIGI7eT09PWgmJisrY2E9PT1sJiYoeD1wKTt5PT09bSYmKytEPT09ayYmKHo9cCk7aWYobnVsbCE9PShBPXQubmV4dFNpYmxpbmcpKWJyZWFrO3Q9eTt5PXQucGFyZW50Tm9kZX10PUF9aD0tMT09PXh8fC0xPT09ej9udWxsOntzdGFydDp4LGVuZDp6fX1lbHNlIGg9bnVsbH1oPWh8fHtzdGFydDowLGVuZDowfX1lbHNlIGg9XG5udWxsO0VkPXthY3RpdmVFbGVtZW50RGV0YWNoZWQ6bnVsbCxmb2N1c2VkRWxlbTpnLHNlbGVjdGlvblJhbmdlOmh9O2ZkPSExO1k9ZTtkbyB0cnl7VGooKX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1lO2RvIHRyeXtmb3IoZz1hLGg9YjtudWxsIT09WTspe3ZhciBxPVkuZWZmZWN0VGFnO3EmMTYmJlJiKFkuc3RhdGVOb2RlLFwiXCIpO2lmKHEmMTI4KXt2YXIgQj1ZLmFsdGVybmF0ZTtpZihudWxsIT09Qil7dmFyIHc9Qi5yZWY7bnVsbCE9PXcmJihcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdz93KG51bGwpOncuY3VycmVudD1udWxsKX19c3dpdGNoKHEmMTAzOCl7Y2FzZSAyOlBpKFkpO1kuZWZmZWN0VGFnJj0tMzticmVhaztjYXNlIDY6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgMTAyNDpZLmVmZmVjdFRhZyY9LTEwMjU7YnJlYWs7Y2FzZSAxMDI4OlkuZWZmZWN0VGFnJj1cbi0xMDI1O1NpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgNDpTaShZLmFsdGVybmF0ZSxZKTticmVhaztjYXNlIDg6bD1ZLE1pKGcsbCxoKSxOaShsKX1ZPVkubmV4dEVmZmVjdH19Y2F0Y2god2Ipe2lmKG51bGw9PT1ZKXRocm93IEVycm9yKHUoMzMwKSk7RWkoWSx3Yik7WT1ZLm5leHRFZmZlY3R9d2hpbGUobnVsbCE9PVkpO3c9RWQ7Qj14ZCgpO3E9dy5mb2N1c2VkRWxlbTtoPXcuc2VsZWN0aW9uUmFuZ2U7aWYoQiE9PXEmJnEmJnEub3duZXJEb2N1bWVudCYmd2QocS5vd25lckRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxxKSl7bnVsbCE9PWgmJnlkKHEpJiYoQj1oLnN0YXJ0LHc9aC5lbmQsdm9pZCAwPT09dyYmKHc9QiksXCJzZWxlY3Rpb25TdGFydFwiaW4gcT8ocS5zZWxlY3Rpb25TdGFydD1CLHEuc2VsZWN0aW9uRW5kPU1hdGgubWluKHcscS52YWx1ZS5sZW5ndGgpKToodz0oQj1xLm93bmVyRG9jdW1lbnR8fGRvY3VtZW50KSYmQi5kZWZhdWx0Vmlld3x8d2luZG93LHcuZ2V0U2VsZWN0aW9uJiZcbih3PXcuZ2V0U2VsZWN0aW9uKCksbD1xLnRleHRDb250ZW50Lmxlbmd0aCxnPU1hdGgubWluKGguc3RhcnQsbCksaD12b2lkIDA9PT1oLmVuZD9nOk1hdGgubWluKGguZW5kLGwpLCF3LmV4dGVuZCYmZz5oJiYobD1oLGg9ZyxnPWwpLGw9dmQocSxnKSxtPXZkKHEsaCksbCYmbSYmKDEhPT13LnJhbmdlQ291bnR8fHcuYW5jaG9yTm9kZSE9PWwubm9kZXx8dy5hbmNob3JPZmZzZXQhPT1sLm9mZnNldHx8dy5mb2N1c05vZGUhPT1tLm5vZGV8fHcuZm9jdXNPZmZzZXQhPT1tLm9mZnNldCkmJihCPUIuY3JlYXRlUmFuZ2UoKSxCLnNldFN0YXJ0KGwubm9kZSxsLm9mZnNldCksdy5yZW1vdmVBbGxSYW5nZXMoKSxnPmg/KHcuYWRkUmFuZ2UoQiksdy5leHRlbmQobS5ub2RlLG0ub2Zmc2V0KSk6KEIuc2V0RW5kKG0ubm9kZSxtLm9mZnNldCksdy5hZGRSYW5nZShCKSkpKSkpO0I9W107Zm9yKHc9cTt3PXcucGFyZW50Tm9kZTspMT09PXcubm9kZVR5cGUmJkIucHVzaCh7ZWxlbWVudDp3LGxlZnQ6dy5zY3JvbGxMZWZ0LFxudG9wOncuc2Nyb2xsVG9wfSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIHEuZm9jdXMmJnEuZm9jdXMoKTtmb3IocT0wO3E8Qi5sZW5ndGg7cSsrKXc9QltxXSx3LmVsZW1lbnQuc2Nyb2xsTGVmdD13LmxlZnQsdy5lbGVtZW50LnNjcm9sbFRvcD13LnRvcH1mZD0hIURkO0VkPURkPW51bGw7YS5jdXJyZW50PWM7WT1lO2RvIHRyeXtmb3IocT1hO251bGwhPT1ZOyl7dmFyIHViPVkuZWZmZWN0VGFnO3ViJjM2JiZKaShxLFkuYWx0ZXJuYXRlLFkpO2lmKHViJjEyOCl7Qj12b2lkIDA7dmFyIHZiPVkucmVmO2lmKG51bGwhPT12Yil7dmFyIFhjPVkuc3RhdGVOb2RlO3N3aXRjaChZLnRhZyl7Y2FzZSA1OkI9WGM7YnJlYWs7ZGVmYXVsdDpCPVhjfVwiZnVuY3Rpb25cIj09PXR5cGVvZiB2Yj92YihCKTp2Yi5jdXJyZW50PUJ9fVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7WT1cbm51bGw7VmYoKTtXPWZ9ZWxzZSBhLmN1cnJlbnQ9YztpZihxailxaj0hMSxyaj1hLHNqPWI7ZWxzZSBmb3IoWT1lO251bGwhPT1ZOyliPVkubmV4dEVmZmVjdCxZLm5leHRFZmZlY3Q9bnVsbCxZPWI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7MD09PWImJihhaj1udWxsKTsxMDczNzQxODIzPT09Yj9hPT09dmo/dWorKzoodWo9MCx2aj1hKTp1aj0wO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBVaiYmVWooYy5zdGF0ZU5vZGUsZCk7WihhKTtpZihZaSl0aHJvdyBZaT0hMSxhPVppLFppPW51bGwsYTtpZigoVyZlaikhPT1WKXJldHVybiBudWxsO2dnKCk7cmV0dXJuIG51bGx9ZnVuY3Rpb24gVGooKXtmb3IoO251bGwhPT1ZOyl7dmFyIGE9WS5lZmZlY3RUYWc7MCE9PShhJjI1NikmJkdpKFkuYWx0ZXJuYXRlLFkpOzA9PT0oYSY1MTIpfHxxanx8KHFqPSEwLGRnKDk3LGZ1bmN0aW9uKCl7RGooKTtyZXR1cm4gbnVsbH0pKTtZPVkubmV4dEVmZmVjdH19XG5mdW5jdGlvbiBEaigpe2lmKDkwIT09c2ope3ZhciBhPTk3PHNqPzk3OnNqO3NqPTkwO3JldHVybiBjZyhhLFZqKX19ZnVuY3Rpb24gVmooKXtpZihudWxsPT09cmopcmV0dXJuITE7dmFyIGE9cmo7cmo9bnVsbDtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgzMzEpKTt2YXIgYj1XO1d8PWdqO2ZvcihhPWEuY3VycmVudC5maXJzdEVmZmVjdDtudWxsIT09YTspe3RyeXt2YXIgYz1hO2lmKDAhPT0oYy5lZmZlY3RUYWcmNTEyKSlzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpIaSg1LGMpLElpKDUsYyl9fWNhdGNoKGQpe2lmKG51bGw9PT1hKXRocm93IEVycm9yKHUoMzMwKSk7RWkoYSxkKX1jPWEubmV4dEVmZmVjdDthLm5leHRFZmZlY3Q9bnVsbDthPWN9Vz1iO2dnKCk7cmV0dXJuITB9XG5mdW5jdGlvbiBXaihhLGIsYyl7Yj1BaShjLGIpO2I9WGkoYSxiLDEwNzM3NDE4MjMpO3hnKGEsYik7YT14aihhLDEwNzM3NDE4MjMpO251bGwhPT1hJiZaKGEpfWZ1bmN0aW9uIEVpKGEsYil7aWYoMz09PWEudGFnKVdqKGEsYSxiKTtlbHNlIGZvcih2YXIgYz1hLnJldHVybjtudWxsIT09Yzspe2lmKDM9PT1jLnRhZyl7V2ooYyxhLGIpO2JyZWFrfWVsc2UgaWYoMT09PWMudGFnKXt2YXIgZD1jLnN0YXRlTm9kZTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy50eXBlLmdldERlcml2ZWRTdGF0ZUZyb21FcnJvcnx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGQuY29tcG9uZW50RGlkQ2F0Y2gmJihudWxsPT09YWp8fCFhai5oYXMoZCkpKXthPUFpKGIsYSk7YT0kaShjLGEsMTA3Mzc0MTgyMyk7eGcoYyxhKTtjPXhqKGMsMTA3Mzc0MTgyMyk7bnVsbCE9PWMmJlooYyk7YnJlYWt9fWM9Yy5yZXR1cm59fVxuZnVuY3Rpb24gT2ooYSxiLGMpe3ZhciBkPWEucGluZ0NhY2hlO251bGwhPT1kJiZkLmRlbGV0ZShiKTtUPT09YSYmVT09PWM/Uz09PXZpfHxTPT09dWkmJjEwNzM3NDE4MjM9PT1saiYmJGYoKS1UaTxwaj9FaihhLFUpOm9qPSEwOkFqKGEsYykmJihiPWEubGFzdFBpbmdlZFRpbWUsMCE9PWImJmI8Y3x8KGEubGFzdFBpbmdlZFRpbWU9YyxaKGEpKSl9ZnVuY3Rpb24gVmkoYSxiKXt2YXIgYz1hLnN0YXRlTm9kZTtudWxsIT09YyYmYy5kZWxldGUoYik7Yj0wOzA9PT1iJiYoYj1HZygpLGI9SGcoYixhLG51bGwpKTthPXhqKGEsYik7bnVsbCE9PWEmJlooYSl9dmFyIFJqO1xuUmo9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWIuZXhwaXJhdGlvblRpbWU7aWYobnVsbCE9PWEpe3ZhciBlPWIucGVuZGluZ1Byb3BzO2lmKGEubWVtb2l6ZWRQcm9wcyE9PWV8fEsuY3VycmVudClyZz0hMDtlbHNle2lmKGQ8Yyl7cmc9ITE7c3dpdGNoKGIudGFnKXtjYXNlIDM6aGkoYik7WGgoKTticmVhaztjYXNlIDU6ZmgoYik7aWYoYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbilyZXR1cm4gYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxudWxsO2JyZWFrO2Nhc2UgMTpMKGIudHlwZSkmJkdmKGIpO2JyZWFrO2Nhc2UgNDpkaChiLGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8pO2JyZWFrO2Nhc2UgMTA6ZD1iLm1lbW9pemVkUHJvcHMudmFsdWU7ZT1iLnR5cGUuX2NvbnRleHQ7SShqZyxlLl9jdXJyZW50VmFsdWUpO2UuX2N1cnJlbnRWYWx1ZT1kO2JyZWFrO2Nhc2UgMTM6aWYobnVsbCE9PWIubWVtb2l6ZWRTdGF0ZSl7ZD1iLmNoaWxkLmNoaWxkRXhwaXJhdGlvblRpbWU7XG5pZigwIT09ZCYmZD49YylyZXR1cm4gamkoYSxiLGMpO0koTSxNLmN1cnJlbnQmMSk7Yj0kaChhLGIsYyk7cmV0dXJuIG51bGwhPT1iP2Iuc2libGluZzpudWxsfUkoTSxNLmN1cnJlbnQmMSk7YnJlYWs7Y2FzZSAxOTpkPWIuY2hpbGRFeHBpcmF0aW9uVGltZT49YztpZigwIT09KGEuZWZmZWN0VGFnJjY0KSl7aWYoZClyZXR1cm4gbWkoYSxiLGMpO2IuZWZmZWN0VGFnfD02NH1lPWIubWVtb2l6ZWRTdGF0ZTtudWxsIT09ZSYmKGUucmVuZGVyaW5nPW51bGwsZS50YWlsPW51bGwpO0koTSxNLmN1cnJlbnQpO2lmKCFkKXJldHVybiBudWxsfXJldHVybiAkaChhLGIsYyl9cmc9ITF9fWVsc2Ugcmc9ITE7Yi5leHBpcmF0aW9uVGltZT0wO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmQ9Yi50eXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKTthPWIucGVuZGluZ1Byb3BzO2U9Q2YoYixKLmN1cnJlbnQpO3FnKGIsYyk7ZT1vaChudWxsLFxuYixkLGEsZSxjKTtiLmVmZmVjdFRhZ3w9MTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGUmJm51bGwhPT1lJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5yZW5kZXImJnZvaWQgMD09PWUuJCR0eXBlb2Ype2IudGFnPTE7Yi5tZW1vaXplZFN0YXRlPW51bGw7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKEwoZCkpe3ZhciBmPSEwO0dmKGIpfWVsc2UgZj0hMTtiLm1lbW9pemVkU3RhdGU9bnVsbCE9PWUuc3RhdGUmJnZvaWQgMCE9PWUuc3RhdGU/ZS5zdGF0ZTpudWxsO3VnKGIpO3ZhciBnPWQuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBnJiZGZyhiLGQsZyxhKTtlLnVwZGF0ZXI9Smc7Yi5zdGF0ZU5vZGU9ZTtlLl9yZWFjdEludGVybmFsRmliZXI9YjtOZyhiLGQsYSxjKTtiPWdpKG51bGwsYixkLCEwLGYsYyl9ZWxzZSBiLnRhZz0wLFIobnVsbCxiLGUsYyksYj1iLmNoaWxkO3JldHVybiBiO2Nhc2UgMTY6YTp7ZT1iLmVsZW1lbnRUeXBlO251bGwhPT1hJiYoYS5hbHRlcm5hdGU9XG5udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7b2IoZSk7aWYoMSE9PWUuX3N0YXR1cyl0aHJvdyBlLl9yZXN1bHQ7ZT1lLl9yZXN1bHQ7Yi50eXBlPWU7Zj1iLnRhZz1YaihlKTthPWlnKGUsYSk7c3dpdGNoKGYpe2Nhc2UgMDpiPWRpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE6Yj1maShudWxsLGIsZSxhLGMpO2JyZWFrIGE7Y2FzZSAxMTpiPVpoKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDE0OmI9YWkobnVsbCxiLGUsaWcoZS50eXBlLGEpLGQsYyk7YnJlYWsgYX10aHJvdyBFcnJvcih1KDMwNixlLFwiXCIpKTt9cmV0dXJuIGI7Y2FzZSAwOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGRpKGEsYixkLGUsYyk7Y2FzZSAxOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLGZpKGEsYixkLGUsYyk7XG5jYXNlIDM6aGkoYik7ZD1iLnVwZGF0ZVF1ZXVlO2lmKG51bGw9PT1hfHxudWxsPT09ZCl0aHJvdyBFcnJvcih1KDI4MikpO2Q9Yi5wZW5kaW5nUHJvcHM7ZT1iLm1lbW9pemVkU3RhdGU7ZT1udWxsIT09ZT9lLmVsZW1lbnQ6bnVsbDt2ZyhhLGIpO3pnKGIsZCxudWxsLGMpO2Q9Yi5tZW1vaXplZFN0YXRlLmVsZW1lbnQ7aWYoZD09PWUpWGgoKSxiPSRoKGEsYixjKTtlbHNle2lmKGU9Yi5zdGF0ZU5vZGUuaHlkcmF0ZSlQaD1KZChiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvLmZpcnN0Q2hpbGQpLE9oPWIsZT1RaD0hMDtpZihlKWZvcihjPVlnKGIsbnVsbCxkLGMpLGIuY2hpbGQ9YztjOyljLmVmZmVjdFRhZz1jLmVmZmVjdFRhZyYtM3wxMDI0LGM9Yy5zaWJsaW5nO2Vsc2UgUihhLGIsZCxjKSxYaCgpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDU6cmV0dXJuIGZoKGIpLG51bGw9PT1hJiZVaChiKSxkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGY9bnVsbCE9PWE/YS5tZW1vaXplZFByb3BzOlxubnVsbCxnPWUuY2hpbGRyZW4sR2QoZCxlKT9nPW51bGw6bnVsbCE9PWYmJkdkKGQsZikmJihiLmVmZmVjdFRhZ3w9MTYpLGVpKGEsYiksYi5tb2RlJjQmJjEhPT1jJiZlLmhpZGRlbj8oYi5leHBpcmF0aW9uVGltZT1iLmNoaWxkRXhwaXJhdGlvblRpbWU9MSxiPW51bGwpOihSKGEsYixnLGMpLGI9Yi5jaGlsZCksYjtjYXNlIDY6cmV0dXJuIG51bGw9PT1hJiZVaChiKSxudWxsO2Nhc2UgMTM6cmV0dXJuIGppKGEsYixjKTtjYXNlIDQ6cmV0dXJuIGRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyksZD1iLnBlbmRpbmdQcm9wcyxudWxsPT09YT9iLmNoaWxkPVhnKGIsbnVsbCxkLGMpOlIoYSxiLGQsYyksYi5jaGlsZDtjYXNlIDExOnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLFpoKGEsYixkLGUsYyk7Y2FzZSA3OnJldHVybiBSKGEsYixiLnBlbmRpbmdQcm9wcyxjKSxiLmNoaWxkO2Nhc2UgODpyZXR1cm4gUihhLFxuYixiLnBlbmRpbmdQcm9wcy5jaGlsZHJlbixjKSxiLmNoaWxkO2Nhc2UgMTI6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMDphOntkPWIudHlwZS5fY29udGV4dDtlPWIucGVuZGluZ1Byb3BzO2c9Yi5tZW1vaXplZFByb3BzO2Y9ZS52YWx1ZTt2YXIgaD1iLnR5cGUuX2NvbnRleHQ7SShqZyxoLl9jdXJyZW50VmFsdWUpO2guX2N1cnJlbnRWYWx1ZT1mO2lmKG51bGwhPT1nKWlmKGg9Zy52YWx1ZSxmPSRlKGgsZik/MDooXCJmdW5jdGlvblwiPT09dHlwZW9mIGQuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzP2QuX2NhbGN1bGF0ZUNoYW5nZWRCaXRzKGgsZik6MTA3Mzc0MTgyMyl8MCwwPT09Zil7aWYoZy5jaGlsZHJlbj09PWUuY2hpbGRyZW4mJiFLLmN1cnJlbnQpe2I9JGgoYSxiLGMpO2JyZWFrIGF9fWVsc2UgZm9yKGg9Yi5jaGlsZCxudWxsIT09aCYmKGgucmV0dXJuPWIpO251bGwhPT1oOyl7dmFyIGs9aC5kZXBlbmRlbmNpZXM7aWYobnVsbCE9PVxuayl7Zz1oLmNoaWxkO2Zvcih2YXIgbD1rLmZpcnN0Q29udGV4dDtudWxsIT09bDspe2lmKGwuY29udGV4dD09PWQmJjAhPT0obC5vYnNlcnZlZEJpdHMmZikpezE9PT1oLnRhZyYmKGw9d2coYyxudWxsKSxsLnRhZz0yLHhnKGgsbCkpO2guZXhwaXJhdGlvblRpbWU8YyYmKGguZXhwaXJhdGlvblRpbWU9Yyk7bD1oLmFsdGVybmF0ZTtudWxsIT09bCYmbC5leHBpcmF0aW9uVGltZTxjJiYobC5leHBpcmF0aW9uVGltZT1jKTtwZyhoLnJldHVybixjKTtrLmV4cGlyYXRpb25UaW1lPGMmJihrLmV4cGlyYXRpb25UaW1lPWMpO2JyZWFrfWw9bC5uZXh0fX1lbHNlIGc9MTA9PT1oLnRhZz9oLnR5cGU9PT1iLnR5cGU/bnVsbDpoLmNoaWxkOmguY2hpbGQ7aWYobnVsbCE9PWcpZy5yZXR1cm49aDtlbHNlIGZvcihnPWg7bnVsbCE9PWc7KXtpZihnPT09Yil7Zz1udWxsO2JyZWFrfWg9Zy5zaWJsaW5nO2lmKG51bGwhPT1oKXtoLnJldHVybj1nLnJldHVybjtnPWg7YnJlYWt9Zz1nLnJldHVybn1oPVxuZ31SKGEsYixlLmNoaWxkcmVuLGMpO2I9Yi5jaGlsZH1yZXR1cm4gYjtjYXNlIDk6cmV0dXJuIGU9Yi50eXBlLGY9Yi5wZW5kaW5nUHJvcHMsZD1mLmNoaWxkcmVuLHFnKGIsYyksZT1zZyhlLGYudW5zdGFibGVfb2JzZXJ2ZWRCaXRzKSxkPWQoZSksYi5lZmZlY3RUYWd8PTEsUihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTQ6cmV0dXJuIGU9Yi50eXBlLGY9aWcoZSxiLnBlbmRpbmdQcm9wcyksZj1pZyhlLnR5cGUsZiksYWkoYSxiLGUsZixkLGMpO2Nhc2UgMTU6cmV0dXJuIGNpKGEsYixiLnR5cGUsYi5wZW5kaW5nUHJvcHMsZCxjKTtjYXNlIDE3OnJldHVybiBkPWIudHlwZSxlPWIucGVuZGluZ1Byb3BzLGU9Yi5lbGVtZW50VHlwZT09PWQ/ZTppZyhkLGUpLG51bGwhPT1hJiYoYS5hbHRlcm5hdGU9bnVsbCxiLmFsdGVybmF0ZT1udWxsLGIuZWZmZWN0VGFnfD0yKSxiLnRhZz0xLEwoZCk/KGE9ITAsR2YoYikpOmE9ITEscWcoYixjKSxMZyhiLGQsZSksTmcoYixkLGUsYyksZ2kobnVsbCxcbmIsZCwhMCxhLGMpO2Nhc2UgMTk6cmV0dXJuIG1pKGEsYixjKX10aHJvdyBFcnJvcih1KDE1NixiLnRhZykpO307dmFyIFVqPW51bGwsTGk9bnVsbDtmdW5jdGlvbiBZaihhKXtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXylyZXR1cm4hMTt2YXIgYj1fX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX187aWYoYi5pc0Rpc2FibGVkfHwhYi5zdXBwb3J0c0ZpYmVyKXJldHVybiEwO3RyeXt2YXIgYz1iLmluamVjdChhKTtVaj1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyUm9vdChjLGEsdm9pZCAwLDY0PT09KGEuY3VycmVudC5lZmZlY3RUYWcmNjQpKX1jYXRjaChlKXt9fTtMaT1mdW5jdGlvbihhKXt0cnl7Yi5vbkNvbW1pdEZpYmVyVW5tb3VudChjLGEpfWNhdGNoKGUpe319fWNhdGNoKGQpe31yZXR1cm4hMH1cbmZ1bmN0aW9uIFpqKGEsYixjLGQpe3RoaXMudGFnPWE7dGhpcy5rZXk9Yzt0aGlzLnNpYmxpbmc9dGhpcy5jaGlsZD10aGlzLnJldHVybj10aGlzLnN0YXRlTm9kZT10aGlzLnR5cGU9dGhpcy5lbGVtZW50VHlwZT1udWxsO3RoaXMuaW5kZXg9MDt0aGlzLnJlZj1udWxsO3RoaXMucGVuZGluZ1Byb3BzPWI7dGhpcy5kZXBlbmRlbmNpZXM9dGhpcy5tZW1vaXplZFN0YXRlPXRoaXMudXBkYXRlUXVldWU9dGhpcy5tZW1vaXplZFByb3BzPW51bGw7dGhpcy5tb2RlPWQ7dGhpcy5lZmZlY3RUYWc9MDt0aGlzLmxhc3RFZmZlY3Q9dGhpcy5maXJzdEVmZmVjdD10aGlzLm5leHRFZmZlY3Q9bnVsbDt0aGlzLmNoaWxkRXhwaXJhdGlvblRpbWU9dGhpcy5leHBpcmF0aW9uVGltZT0wO3RoaXMuYWx0ZXJuYXRlPW51bGx9ZnVuY3Rpb24gU2goYSxiLGMsZCl7cmV0dXJuIG5ldyBaaihhLGIsYyxkKX1cbmZ1bmN0aW9uIGJpKGEpe2E9YS5wcm90b3R5cGU7cmV0dXJuISghYXx8IWEuaXNSZWFjdENvbXBvbmVudCl9ZnVuY3Rpb24gWGooYSl7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGJpKGEpPzE6MDtpZih2b2lkIDAhPT1hJiZudWxsIT09YSl7YT1hLiQkdHlwZW9mO2lmKGE9PT1nYilyZXR1cm4gMTE7aWYoYT09PWpiKXJldHVybiAxNH1yZXR1cm4gMn1cbmZ1bmN0aW9uIFNnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbD09PWM/KGM9U2goYS50YWcsYixhLmtleSxhLm1vZGUpLGMuZWxlbWVudFR5cGU9YS5lbGVtZW50VHlwZSxjLnR5cGU9YS50eXBlLGMuc3RhdGVOb2RlPWEuc3RhdGVOb2RlLGMuYWx0ZXJuYXRlPWEsYS5hbHRlcm5hdGU9Yyk6KGMucGVuZGluZ1Byb3BzPWIsYy5lZmZlY3RUYWc9MCxjLm5leHRFZmZlY3Q9bnVsbCxjLmZpcnN0RWZmZWN0PW51bGwsYy5sYXN0RWZmZWN0PW51bGwpO2MuY2hpbGRFeHBpcmF0aW9uVGltZT1hLmNoaWxkRXhwaXJhdGlvblRpbWU7Yy5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lO2MuY2hpbGQ9YS5jaGlsZDtjLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzO2MubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGU7Yy51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlO2I9YS5kZXBlbmRlbmNpZXM7Yy5kZXBlbmRlbmNpZXM9bnVsbD09PWI/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Yi5leHBpcmF0aW9uVGltZSxcbmZpcnN0Q29udGV4dDpiLmZpcnN0Q29udGV4dCxyZXNwb25kZXJzOmIucmVzcG9uZGVyc307Yy5zaWJsaW5nPWEuc2libGluZztjLmluZGV4PWEuaW5kZXg7Yy5yZWY9YS5yZWY7cmV0dXJuIGN9XG5mdW5jdGlvbiBVZyhhLGIsYyxkLGUsZil7dmFyIGc9MjtkPWE7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpYmkoYSkmJihnPTEpO2Vsc2UgaWYoXCJzdHJpbmdcIj09PXR5cGVvZiBhKWc9NTtlbHNlIGE6c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuIFdnKGMuY2hpbGRyZW4sZSxmLGIpO2Nhc2UgZmI6Zz04O2V8PTc7YnJlYWs7Y2FzZSBiYjpnPTg7ZXw9MTticmVhaztjYXNlIGNiOnJldHVybiBhPVNoKDEyLGMsYixlfDgpLGEuZWxlbWVudFR5cGU9Y2IsYS50eXBlPWNiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaGI6cmV0dXJuIGE9U2goMTMsYyxiLGUpLGEudHlwZT1oYixhLmVsZW1lbnRUeXBlPWhiLGEuZXhwaXJhdGlvblRpbWU9ZixhO2Nhc2UgaWI6cmV0dXJuIGE9U2goMTksYyxiLGUpLGEuZWxlbWVudFR5cGU9aWIsYS5leHBpcmF0aW9uVGltZT1mLGE7ZGVmYXVsdDppZihcIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hKXN3aXRjaChhLiQkdHlwZW9mKXtjYXNlIGRiOmc9XG4xMDticmVhayBhO2Nhc2UgZWI6Zz05O2JyZWFrIGE7Y2FzZSBnYjpnPTExO2JyZWFrIGE7Y2FzZSBqYjpnPTE0O2JyZWFrIGE7Y2FzZSBrYjpnPTE2O2Q9bnVsbDticmVhayBhO2Nhc2UgbGI6Zz0yMjticmVhayBhfXRocm93IEVycm9yKHUoMTMwLG51bGw9PWE/YTp0eXBlb2YgYSxcIlwiKSk7fWI9U2goZyxjLGIsZSk7Yi5lbGVtZW50VHlwZT1hO2IudHlwZT1kO2IuZXhwaXJhdGlvblRpbWU9ZjtyZXR1cm4gYn1mdW5jdGlvbiBXZyhhLGIsYyxkKXthPVNoKDcsYSxkLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1mdW5jdGlvbiBUZyhhLGIsYyl7YT1TaCg2LGEsbnVsbCxiKTthLmV4cGlyYXRpb25UaW1lPWM7cmV0dXJuIGF9XG5mdW5jdGlvbiBWZyhhLGIsYyl7Yj1TaCg0LG51bGwhPT1hLmNoaWxkcmVuP2EuY2hpbGRyZW46W10sYS5rZXksYik7Yi5leHBpcmF0aW9uVGltZT1jO2Iuc3RhdGVOb2RlPXtjb250YWluZXJJbmZvOmEuY29udGFpbmVySW5mbyxwZW5kaW5nQ2hpbGRyZW46bnVsbCxpbXBsZW1lbnRhdGlvbjphLmltcGxlbWVudGF0aW9ufTtyZXR1cm4gYn1cbmZ1bmN0aW9uIGFrKGEsYixjKXt0aGlzLnRhZz1iO3RoaXMuY3VycmVudD1udWxsO3RoaXMuY29udGFpbmVySW5mbz1hO3RoaXMucGluZ0NhY2hlPXRoaXMucGVuZGluZ0NoaWxkcmVuPW51bGw7dGhpcy5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7dGhpcy5maW5pc2hlZFdvcms9bnVsbDt0aGlzLnRpbWVvdXRIYW5kbGU9LTE7dGhpcy5wZW5kaW5nQ29udGV4dD10aGlzLmNvbnRleHQ9bnVsbDt0aGlzLmh5ZHJhdGU9Yzt0aGlzLmNhbGxiYWNrTm9kZT1udWxsO3RoaXMuY2FsbGJhY2tQcmlvcml0eT05MDt0aGlzLmxhc3RFeHBpcmVkVGltZT10aGlzLmxhc3RQaW5nZWRUaW1lPXRoaXMubmV4dEtub3duUGVuZGluZ0xldmVsPXRoaXMubGFzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFN1c3BlbmRlZFRpbWU9dGhpcy5maXJzdFBlbmRpbmdUaW1lPTB9XG5mdW5jdGlvbiBBaihhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lO2E9YS5sYXN0U3VzcGVuZGVkVGltZTtyZXR1cm4gMCE9PWMmJmM+PWImJmE8PWJ9ZnVuY3Rpb24geGkoYSxiKXt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZSxkPWEubGFzdFN1c3BlbmRlZFRpbWU7YzxiJiYoYS5maXJzdFN1c3BlbmRlZFRpbWU9Yik7aWYoZD5ifHwwPT09YylhLmxhc3RTdXNwZW5kZWRUaW1lPWI7Yjw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7Yjw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKX1cbmZ1bmN0aW9uIHlpKGEsYil7Yj5hLmZpcnN0UGVuZGluZ1RpbWUmJihhLmZpcnN0UGVuZGluZ1RpbWU9Yik7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7MCE9PWMmJihiPj1jP2EuZmlyc3RTdXNwZW5kZWRUaW1lPWEubGFzdFN1c3BlbmRlZFRpbWU9YS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9MDpiPj1hLmxhc3RTdXNwZW5kZWRUaW1lJiYoYS5sYXN0U3VzcGVuZGVkVGltZT1iKzEpLGI+YS5uZXh0S25vd25QZW5kaW5nTGV2ZWwmJihhLm5leHRLbm93blBlbmRpbmdMZXZlbD1iKSl9ZnVuY3Rpb24gQ2ooYSxiKXt2YXIgYz1hLmxhc3RFeHBpcmVkVGltZTtpZigwPT09Y3x8Yz5iKWEubGFzdEV4cGlyZWRUaW1lPWJ9XG5mdW5jdGlvbiBiayhhLGIsYyxkKXt2YXIgZT1iLmN1cnJlbnQsZj1HZygpLGc9RGcuc3VzcGVuc2U7Zj1IZyhmLGUsZyk7YTppZihjKXtjPWMuX3JlYWN0SW50ZXJuYWxGaWJlcjtiOntpZihkYyhjKSE9PWN8fDEhPT1jLnRhZyl0aHJvdyBFcnJvcih1KDE3MCkpO3ZhciBoPWM7ZG97c3dpdGNoKGgudGFnKXtjYXNlIDM6aD1oLnN0YXRlTm9kZS5jb250ZXh0O2JyZWFrIGI7Y2FzZSAxOmlmKEwoaC50eXBlKSl7aD1oLnN0YXRlTm9kZS5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dDticmVhayBifX1oPWgucmV0dXJufXdoaWxlKG51bGwhPT1oKTt0aHJvdyBFcnJvcih1KDE3MSkpO31pZigxPT09Yy50YWcpe3ZhciBrPWMudHlwZTtpZihMKGspKXtjPUZmKGMsayxoKTticmVhayBhfX1jPWh9ZWxzZSBjPUFmO251bGw9PT1iLmNvbnRleHQ/Yi5jb250ZXh0PWM6Yi5wZW5kaW5nQ29udGV4dD1jO2I9d2coZixnKTtiLnBheWxvYWQ9e2VsZW1lbnQ6YX07ZD12b2lkIDA9PT1cbmQ/bnVsbDpkO251bGwhPT1kJiYoYi5jYWxsYmFjaz1kKTt4ZyhlLGIpO0lnKGUsZik7cmV0dXJuIGZ9ZnVuY3Rpb24gY2soYSl7YT1hLmN1cnJlbnQ7aWYoIWEuY2hpbGQpcmV0dXJuIG51bGw7c3dpdGNoKGEuY2hpbGQudGFnKXtjYXNlIDU6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlO2RlZmF1bHQ6cmV0dXJuIGEuY2hpbGQuc3RhdGVOb2RlfX1mdW5jdGlvbiBkayhhLGIpe2E9YS5tZW1vaXplZFN0YXRlO251bGwhPT1hJiZudWxsIT09YS5kZWh5ZHJhdGVkJiZhLnJldHJ5VGltZTxiJiYoYS5yZXRyeVRpbWU9Yil9ZnVuY3Rpb24gZWsoYSxiKXtkayhhLGIpOyhhPWEuYWx0ZXJuYXRlKSYmZGsoYSxiKX1cbmZ1bmN0aW9uIGZrKGEsYixjKXtjPW51bGwhPWMmJiEwPT09Yy5oeWRyYXRlO3ZhciBkPW5ldyBhayhhLGIsYyksZT1TaCgzLG51bGwsbnVsbCwyPT09Yj83OjE9PT1iPzM6MCk7ZC5jdXJyZW50PWU7ZS5zdGF0ZU5vZGU9ZDt1ZyhlKTthW09kXT1kLmN1cnJlbnQ7YyYmMCE9PWImJkpjKGEsOT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQpO3RoaXMuX2ludGVybmFsUm9vdD1kfWZrLnByb3RvdHlwZS5yZW5kZXI9ZnVuY3Rpb24oYSl7YmsoYSx0aGlzLl9pbnRlcm5hbFJvb3QsbnVsbCxudWxsKX07ZmsucHJvdG90eXBlLnVubW91bnQ9ZnVuY3Rpb24oKXt2YXIgYT10aGlzLl9pbnRlcm5hbFJvb3QsYj1hLmNvbnRhaW5lckluZm87YmsobnVsbCxhLG51bGwsZnVuY3Rpb24oKXtiW09kXT1udWxsfSl9O1xuZnVuY3Rpb24gZ2soYSl7cmV0dXJuISghYXx8MSE9PWEubm9kZVR5cGUmJjkhPT1hLm5vZGVUeXBlJiYxMSE9PWEubm9kZVR5cGUmJig4IT09YS5ub2RlVHlwZXx8XCIgcmVhY3QtbW91bnQtcG9pbnQtdW5zdGFibGUgXCIhPT1hLm5vZGVWYWx1ZSkpfWZ1bmN0aW9uIGhrKGEsYil7Ynx8KGI9YT85PT09YS5ub2RlVHlwZT9hLmRvY3VtZW50RWxlbWVudDphLmZpcnN0Q2hpbGQ6bnVsbCxiPSEoIWJ8fDEhPT1iLm5vZGVUeXBlfHwhYi5oYXNBdHRyaWJ1dGUoXCJkYXRhLXJlYWN0cm9vdFwiKSkpO2lmKCFiKWZvcih2YXIgYztjPWEubGFzdENoaWxkOylhLnJlbW92ZUNoaWxkKGMpO3JldHVybiBuZXcgZmsoYSwwLGI/e2h5ZHJhdGU6ITB9OnZvaWQgMCl9XG5mdW5jdGlvbiBpayhhLGIsYyxkLGUpe3ZhciBmPWMuX3JlYWN0Um9vdENvbnRhaW5lcjtpZihmKXt2YXIgZz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBoPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2guY2FsbChhKX19YmsoYixnLGEsZSl9ZWxzZXtmPWMuX3JlYWN0Um9vdENvbnRhaW5lcj1oayhjLGQpO2c9Zi5faW50ZXJuYWxSb290O2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlKXt2YXIgaz1lO2U9ZnVuY3Rpb24oKXt2YXIgYT1jayhnKTtrLmNhbGwoYSl9fU5qKGZ1bmN0aW9uKCl7YmsoYixnLGEsZSl9KX1yZXR1cm4gY2soZyl9ZnVuY3Rpb24gamsoYSxiLGMpe3ZhciBkPTM8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzNdP2FyZ3VtZW50c1szXTpudWxsO3JldHVybnskJHR5cGVvZjokYSxrZXk6bnVsbD09ZD9udWxsOlwiXCIrZCxjaGlsZHJlbjphLGNvbnRhaW5lckluZm86YixpbXBsZW1lbnRhdGlvbjpjfX1cbndjPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPWhnKEdnKCksMTUwLDEwMCk7SWcoYSxiKTtlayhhLGIpfX07eGM9ZnVuY3Rpb24oYSl7MTM9PT1hLnRhZyYmKElnKGEsMyksZWsoYSwzKSl9O3ljPWZ1bmN0aW9uKGEpe2lmKDEzPT09YS50YWcpe3ZhciBiPUdnKCk7Yj1IZyhiLGEsbnVsbCk7SWcoYSxiKTtlayhhLGIpfX07XG56YT1mdW5jdGlvbihhLGIsYyl7c3dpdGNoKGIpe2Nhc2UgXCJpbnB1dFwiOkNiKGEsYyk7Yj1jLm5hbWU7aWYoXCJyYWRpb1wiPT09Yy50eXBlJiZudWxsIT1iKXtmb3IoYz1hO2MucGFyZW50Tm9kZTspYz1jLnBhcmVudE5vZGU7Yz1jLnF1ZXJ5U2VsZWN0b3JBbGwoXCJpbnB1dFtuYW1lPVwiK0pTT04uc3RyaW5naWZ5KFwiXCIrYikrJ11bdHlwZT1cInJhZGlvXCJdJyk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKyl7dmFyIGQ9Y1tiXTtpZihkIT09YSYmZC5mb3JtPT09YS5mb3JtKXt2YXIgZT1RZChkKTtpZighZSl0aHJvdyBFcnJvcih1KDkwKSk7eWIoZCk7Q2IoZCxlKX19fWJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOktiKGEsYyk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmI9Yy52YWx1ZSxudWxsIT1iJiZIYihhLCEhYy5tdWx0aXBsZSxiLCExKX19O0ZhPU1qO1xuR2E9ZnVuY3Rpb24oYSxiLGMsZCxlKXt2YXIgZj1XO1d8PTQ7dHJ5e3JldHVybiBjZyg5OCxhLmJpbmQobnVsbCxiLGMsZCxlKSl9ZmluYWxseXtXPWYsVz09PVYmJmdnKCl9fTtIYT1mdW5jdGlvbigpeyhXJigxfGZqfGdqKSk9PT1WJiYoTGooKSxEaigpKX07SWE9ZnVuY3Rpb24oYSxiKXt2YXIgYz1XO1d8PTI7dHJ5e3JldHVybiBhKGIpfWZpbmFsbHl7Vz1jLFc9PT1WJiZnZygpfX07ZnVuY3Rpb24ga2soYSxiKXt2YXIgYz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXT9hcmd1bWVudHNbMl06bnVsbDtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gamsoYSxiLG51bGwsYyl9dmFyIGxrPXtFdmVudHM6W05jLFBkLFFkLHhhLHRhLFhkLGZ1bmN0aW9uKGEpe2pjKGEsV2QpfSxEYSxFYSxpZCxtYyxEaix7Y3VycmVudDohMX1dfTtcbihmdW5jdGlvbihhKXt2YXIgYj1hLmZpbmRGaWJlckJ5SG9zdEluc3RhbmNlO3JldHVybiBZaihuKHt9LGEse292ZXJyaWRlSG9va1N0YXRlOm51bGwsb3ZlcnJpZGVQcm9wczpudWxsLHNldFN1c3BlbnNlSGFuZGxlcjpudWxsLHNjaGVkdWxlVXBkYXRlOm51bGwsY3VycmVudERpc3BhdGNoZXJSZWY6V2EuUmVhY3RDdXJyZW50RGlzcGF0Y2hlcixmaW5kSG9zdEluc3RhbmNlQnlGaWJlcjpmdW5jdGlvbihhKXthPWhjKGEpO3JldHVybiBudWxsPT09YT9udWxsOmEuc3RhdGVOb2RlfSxmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTpmdW5jdGlvbihhKXtyZXR1cm4gYj9iKGEpOm51bGx9LGZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaDpudWxsLHNjaGVkdWxlUmVmcmVzaDpudWxsLHNjaGVkdWxlUm9vdDpudWxsLHNldFJlZnJlc2hIYW5kbGVyOm51bGwsZ2V0Q3VycmVudEZpYmVyOm51bGx9KSl9KSh7ZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U6dGMsYnVuZGxlVHlwZTowLHZlcnNpb246XCIxNi4xMy4xXCIsXG5yZW5kZXJlclBhY2thZ2VOYW1lOlwicmVhY3QtZG9tXCJ9KTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWxrO2V4cG9ydHMuY3JlYXRlUG9ydGFsPWtrO2V4cG9ydHMuZmluZERPTU5vZGU9ZnVuY3Rpb24oYSl7aWYobnVsbD09YSlyZXR1cm4gbnVsbDtpZigxPT09YS5ub2RlVHlwZSlyZXR1cm4gYTt2YXIgYj1hLl9yZWFjdEludGVybmFsRmliZXI7aWYodm9pZCAwPT09Yil7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEucmVuZGVyKXRocm93IEVycm9yKHUoMTg4KSk7dGhyb3cgRXJyb3IodSgyNjgsT2JqZWN0LmtleXMoYSkpKTt9YT1oYyhiKTthPW51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGU7cmV0dXJuIGF9O1xuZXhwb3J0cy5mbHVzaFN5bmM9ZnVuY3Rpb24oYSxiKXtpZigoVyYoZmp8Z2opKSE9PVYpdGhyb3cgRXJyb3IodSgxODcpKTt2YXIgYz1XO1d8PTE7dHJ5e3JldHVybiBjZyg5OSxhLmJpbmQobnVsbCxiKSl9ZmluYWxseXtXPWMsZ2coKX19O2V4cG9ydHMuaHlkcmF0ZT1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCEwLGMpfTtleHBvcnRzLnJlbmRlcj1mdW5jdGlvbihhLGIsYyl7aWYoIWdrKGIpKXRocm93IEVycm9yKHUoMjAwKSk7cmV0dXJuIGlrKG51bGwsYSxiLCExLGMpfTtcbmV4cG9ydHMudW5tb3VudENvbXBvbmVudEF0Tm9kZT1mdW5jdGlvbihhKXtpZighZ2soYSkpdGhyb3cgRXJyb3IodSg0MCkpO3JldHVybiBhLl9yZWFjdFJvb3RDb250YWluZXI/KE5qKGZ1bmN0aW9uKCl7aWsobnVsbCxudWxsLGEsITEsZnVuY3Rpb24oKXthLl9yZWFjdFJvb3RDb250YWluZXI9bnVsbDthW09kXT1udWxsfSl9KSwhMCk6ITF9O2V4cG9ydHMudW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXM9TWo7ZXhwb3J0cy51bnN0YWJsZV9jcmVhdGVQb3J0YWw9ZnVuY3Rpb24oYSxiKXtyZXR1cm4ga2soYSxiLDI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsKX07XG5leHBvcnRzLnVuc3RhYmxlX3JlbmRlclN1YnRyZWVJbnRvQ29udGFpbmVyPWZ1bmN0aW9uKGEsYixjLGQpe2lmKCFnayhjKSl0aHJvdyBFcnJvcih1KDIwMCkpO2lmKG51bGw9PWF8fHZvaWQgMD09PWEuX3JlYWN0SW50ZXJuYWxGaWJlcil0aHJvdyBFcnJvcih1KDM4KSk7cmV0dXJuIGlrKGEsYixjLCExLGQpfTtleHBvcnRzLnZlcnNpb249XCIxNi4xMy4xXCI7XG4iLCIndXNlIHN0cmljdCc7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViA9PT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE5LjFcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9Yy0xPj4+MSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX0xvd1ByaW9yaXR5PTQ7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfUHJvZmlsaW5nPW51bGw7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX2dldEZpcnN0Q2FsbGJhY2tOb2RlPWZ1bmN0aW9uKCl7cmV0dXJuIEwoTil9O2V4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O2V4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHk9ZnVuY3Rpb24oYSxiKXtzd2l0Y2goYSl7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6Y2FzZSA0OmNhc2UgNTpicmVhaztkZWZhdWx0OmE9M312YXIgYz1SO1I9YTt0cnl7cmV0dXJuIGIoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O1xuZXhwb3J0cy51bnN0YWJsZV9zaG91bGRZaWVsZD1mdW5jdGlvbigpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7VihhKTt2YXIgYj1MKE4pO3JldHVybiBiIT09USYmbnVsbCE9PVEmJm51bGwhPT1iJiZudWxsIT09Yi5jYWxsYmFjayYmYi5zdGFydFRpbWU8PWEmJmIuZXhwaXJhdGlvblRpbWU8US5leHBpcmF0aW9uVGltZXx8aygpfTtleHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07XG4iLCIvKipcbiAqIENvcHlyaWdodCAoYykgMjAxMy1wcmVzZW50LCBGYWNlYm9vaywgSW5jLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztcblxudmFyIFJlYWN0UHJvcFR5cGVzU2VjcmV0ID0gcmVxdWlyZSgnLi9saWIvUmVhY3RQcm9wVHlwZXNTZWNyZXQnKTtcblxuZnVuY3Rpb24gZW1wdHlGdW5jdGlvbigpIHt9XG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0KCkge31cbmVtcHR5RnVuY3Rpb25XaXRoUmVzZXQucmVzZXRXYXJuaW5nQ2FjaGUgPSBlbXB0eUZ1bmN0aW9uO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCkge1xuICBmdW5jdGlvbiBzaGltKHByb3BzLCBwcm9wTmFtZSwgY29tcG9uZW50TmFtZSwgbG9jYXRpb24sIHByb3BGdWxsTmFtZSwgc2VjcmV0KSB7XG4gICAgaWYgKHNlY3JldCA9PT0gUmVhY3RQcm9wVHlwZXNTZWNyZXQpIHtcbiAgICAgIC8vIEl0IGlzIHN0aWxsIHNhZmUgd2hlbiBjYWxsZWQgZnJvbSBSZWFjdC5cbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgdmFyIGVyciA9IG5ldyBFcnJvcihcbiAgICAgICdDYWxsaW5nIFByb3BUeXBlcyB2YWxpZGF0b3JzIGRpcmVjdGx5IGlzIG5vdCBzdXBwb3J0ZWQgYnkgdGhlIGBwcm9wLXR5cGVzYCBwYWNrYWdlLiAnICtcbiAgICAgICdVc2UgUHJvcFR5cGVzLmNoZWNrUHJvcFR5cGVzKCkgdG8gY2FsbCB0aGVtLiAnICtcbiAgICAgICdSZWFkIG1vcmUgYXQgaHR0cDovL2ZiLm1lL3VzZS1jaGVjay1wcm9wLXR5cGVzJ1xuICAgICk7XG4gICAgZXJyLm5hbWUgPSAnSW52YXJpYW50IFZpb2xhdGlvbic7XG4gICAgdGhyb3cgZXJyO1xuICB9O1xuICBzaGltLmlzUmVxdWlyZWQgPSBzaGltO1xuICBmdW5jdGlvbiBnZXRTaGltKCkge1xuICAgIHJldHVybiBzaGltO1xuICB9O1xuICAvLyBJbXBvcnRhbnQhXG4gIC8vIEtlZXAgdGhpcyBsaXN0IGluIHN5bmMgd2l0aCBwcm9kdWN0aW9uIHZlcnNpb24gaW4gYC4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMuanNgLlxuICB2YXIgUmVhY3RQcm9wVHlwZXMgPSB7XG4gICAgYXJyYXk6IHNoaW0sXG4gICAgYm9vbDogc2hpbSxcbiAgICBmdW5jOiBzaGltLFxuICAgIG51bWJlcjogc2hpbSxcbiAgICBvYmplY3Q6IHNoaW0sXG4gICAgc3RyaW5nOiBzaGltLFxuICAgIHN5bWJvbDogc2hpbSxcblxuICAgIGFueTogc2hpbSxcbiAgICBhcnJheU9mOiBnZXRTaGltLFxuICAgIGVsZW1lbnQ6IHNoaW0sXG4gICAgZWxlbWVudFR5cGU6IHNoaW0sXG4gICAgaW5zdGFuY2VPZjogZ2V0U2hpbSxcbiAgICBub2RlOiBzaGltLFxuICAgIG9iamVjdE9mOiBnZXRTaGltLFxuICAgIG9uZU9mOiBnZXRTaGltLFxuICAgIG9uZU9mVHlwZTogZ2V0U2hpbSxcbiAgICBzaGFwZTogZ2V0U2hpbSxcbiAgICBleGFjdDogZ2V0U2hpbSxcblxuICAgIGNoZWNrUHJvcFR5cGVzOiBlbXB0eUZ1bmN0aW9uV2l0aFJlc2V0LFxuICAgIHJlc2V0V2FybmluZ0NhY2hlOiBlbXB0eUZ1bmN0aW9uXG4gIH07XG5cbiAgUmVhY3RQcm9wVHlwZXMuUHJvcFR5cGVzID0gUmVhY3RQcm9wVHlwZXM7XG5cbiAgcmV0dXJuIFJlYWN0UHJvcFR5cGVzO1xufTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSAnU0VDUkVUX0RPX05PVF9QQVNTX1RISVNfT1JfWU9VX1dJTExfQkVfRklSRUQnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IFJlYWN0UHJvcFR5cGVzU2VjcmV0O1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0Jzt2YXIgYj1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLGM9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZWxlbWVudFwiKTo2MDEwMyxkPWI/U3ltYm9sLmZvcihcInJlYWN0LnBvcnRhbFwiKTo2MDEwNixlPWI/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGY9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3RyaWN0X21vZGVcIik6NjAxMDgsZz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm9maWxlclwiKTo2MDExNCxoPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGs9Yj9TeW1ib2wuZm9yKFwicmVhY3QuY29udGV4dFwiKTo2MDExMCxsPWI/U3ltYm9sLmZvcihcInJlYWN0LmFzeW5jX21vZGVcIik6NjAxMTEsbT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb25jdXJyZW50X21vZGVcIik6NjAxMTEsbj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMixwPWI/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHE9Yj9cblN5bWJvbC5mb3IoXCJyZWFjdC5zdXNwZW5zZV9saXN0XCIpOjYwMTIwLHI9Yj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSx0PWI/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsdj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5ibG9ja1wiKTo2MDEyMSx3PWI/U3ltYm9sLmZvcihcInJlYWN0LmZ1bmRhbWVudGFsXCIpOjYwMTE3LHg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucmVzcG9uZGVyXCIpOjYwMTE4LHk9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc2NvcGVcIik6NjAxMTk7XG5mdW5jdGlvbiB6KGEpe2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpe3ZhciB1PWEuJCR0eXBlb2Y7c3dpdGNoKHUpe2Nhc2UgYzpzd2l0Y2goYT1hLnR5cGUsYSl7Y2FzZSBsOmNhc2UgbTpjYXNlIGU6Y2FzZSBnOmNhc2UgZjpjYXNlIHA6cmV0dXJuIGE7ZGVmYXVsdDpzd2l0Y2goYT1hJiZhLiQkdHlwZW9mLGEpe2Nhc2UgazpjYXNlIG46Y2FzZSB0OmNhc2UgcjpjYXNlIGg6cmV0dXJuIGE7ZGVmYXVsdDpyZXR1cm4gdX19Y2FzZSBkOnJldHVybiB1fX19ZnVuY3Rpb24gQShhKXtyZXR1cm4geihhKT09PW19ZXhwb3J0cy5Bc3luY01vZGU9bDtleHBvcnRzLkNvbmN1cnJlbnRNb2RlPW07ZXhwb3J0cy5Db250ZXh0Q29uc3VtZXI9aztleHBvcnRzLkNvbnRleHRQcm92aWRlcj1oO2V4cG9ydHMuRWxlbWVudD1jO2V4cG9ydHMuRm9yd2FyZFJlZj1uO2V4cG9ydHMuRnJhZ21lbnQ9ZTtleHBvcnRzLkxhenk9dDtleHBvcnRzLk1lbW89cjtleHBvcnRzLlBvcnRhbD1kO1xuZXhwb3J0cy5Qcm9maWxlcj1nO2V4cG9ydHMuU3RyaWN0TW9kZT1mO2V4cG9ydHMuU3VzcGVuc2U9cDtleHBvcnRzLmlzQXN5bmNNb2RlPWZ1bmN0aW9uKGEpe3JldHVybiBBKGEpfHx6KGEpPT09bH07ZXhwb3J0cy5pc0NvbmN1cnJlbnRNb2RlPUE7ZXhwb3J0cy5pc0NvbnRleHRDb25zdW1lcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWt9O2V4cG9ydHMuaXNDb250ZXh0UHJvdmlkZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ofTtleHBvcnRzLmlzRWxlbWVudD1mdW5jdGlvbihhKXtyZXR1cm5cIm9iamVjdFwiPT09dHlwZW9mIGEmJm51bGwhPT1hJiZhLiQkdHlwZW9mPT09Y307ZXhwb3J0cy5pc0ZvcndhcmRSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1ufTtleHBvcnRzLmlzRnJhZ21lbnQ9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1lfTtleHBvcnRzLmlzTGF6eT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXR9O1xuZXhwb3J0cy5pc01lbW89ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1yfTtleHBvcnRzLmlzUG9ydGFsPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09ZH07ZXhwb3J0cy5pc1Byb2ZpbGVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09Z307ZXhwb3J0cy5pc1N0cmljdE1vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1mfTtleHBvcnRzLmlzU3VzcGVuc2U9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1wfTtcbmV4cG9ydHMuaXNWYWxpZEVsZW1lbnRUeXBlPWZ1bmN0aW9uKGEpe3JldHVyblwic3RyaW5nXCI9PT10eXBlb2YgYXx8XCJmdW5jdGlvblwiPT09dHlwZW9mIGF8fGE9PT1lfHxhPT09bXx8YT09PWd8fGE9PT1mfHxhPT09cHx8YT09PXF8fFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJihhLiQkdHlwZW9mPT09dHx8YS4kJHR5cGVvZj09PXJ8fGEuJCR0eXBlb2Y9PT1ofHxhLiQkdHlwZW9mPT09a3x8YS4kJHR5cGVvZj09PW58fGEuJCR0eXBlb2Y9PT13fHxhLiQkdHlwZW9mPT09eHx8YS4kJHR5cGVvZj09PXl8fGEuJCR0eXBlb2Y9PT12KX07ZXhwb3J0cy50eXBlT2Y9ejtcbiIsIi8vIGl0ZXJhYmxlIERPTSBjb2xsZWN0aW9uc1xuLy8gZmxhZyAtIGBpdGVyYWJsZWAgaW50ZXJmYWNlIC0gJ2VudHJpZXMnLCAna2V5cycsICd2YWx1ZXMnLCAnZm9yRWFjaCcgbWV0aG9kc1xubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENTU1J1bGVMaXN0OiAwLFxuICBDU1NTdHlsZURlY2xhcmF0aW9uOiAwLFxuICBDU1NWYWx1ZUxpc3Q6IDAsXG4gIENsaWVudFJlY3RMaXN0OiAwLFxuICBET01SZWN0TGlzdDogMCxcbiAgRE9NU3RyaW5nTGlzdDogMCxcbiAgRE9NVG9rZW5MaXN0OiAxLFxuICBEYXRhVHJhbnNmZXJJdGVtTGlzdDogMCxcbiAgRmlsZUxpc3Q6IDAsXG4gIEhUTUxBbGxDb2xsZWN0aW9uOiAwLFxuICBIVE1MQ29sbGVjdGlvbjogMCxcbiAgSFRNTEZvcm1FbGVtZW50OiAwLFxuICBIVE1MU2VsZWN0RWxlbWVudDogMCxcbiAgTWVkaWFMaXN0OiAwLFxuICBNaW1lVHlwZUFycmF5OiAwLFxuICBOYW1lZE5vZGVNYXA6IDAsXG4gIE5vZGVMaXN0OiAxLFxuICBQYWludFJlcXVlc3RMaXN0OiAwLFxuICBQbHVnaW46IDAsXG4gIFBsdWdpbkFycmF5OiAwLFxuICBTVkdMZW5ndGhMaXN0OiAwLFxuICBTVkdOdW1iZXJMaXN0OiAwLFxuICBTVkdQYXRoU2VnTGlzdDogMCxcbiAgU1ZHUG9pbnRMaXN0OiAwLFxuICBTVkdTdHJpbmdMaXN0OiAwLFxuICBTVkdUcmFuc2Zvcm1MaXN0OiAwLFxuICBTb3VyY2VCdWZmZXJMaXN0OiAwLFxuICBTdHlsZVNoZWV0TGlzdDogMCxcbiAgVGV4dFRyYWNrQ3VlTGlzdDogMCxcbiAgVGV4dFRyYWNrTGlzdDogMCxcbiAgVG91Y2hMaXN0OiAwXG59O1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIGFkZFRvVW5zY29wYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcbnZhciBkZWZpbmVJdGVyYXRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZWZpbmUtaXRlcmF0b3InKTtcblxudmFyIEFSUkFZX0lURVJBVE9SID0gJ0FycmF5IEl0ZXJhdG9yJztcbnZhciBzZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5zZXQ7XG52YXIgZ2V0SW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZ2V0dGVyRm9yKEFSUkFZX0lURVJBVE9SKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS5lbnRyaWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5lbnRyaWVzXG4vLyBgQXJyYXkucHJvdG90eXBlLmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmtleXNcbi8vIGBBcnJheS5wcm90b3R5cGUudmFsdWVzYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS52YWx1ZXNcbi8vIGBBcnJheS5wcm90b3R5cGVbQEBpdGVyYXRvcl1gIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAaXRlcmF0b3Jcbi8vIGBDcmVhdGVBcnJheUl0ZXJhdG9yYCBpbnRlcm5hbCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZWFycmF5aXRlcmF0b3Jcbm1vZHVsZS5leHBvcnRzID0gZGVmaW5lSXRlcmF0b3IoQXJyYXksICdBcnJheScsIGZ1bmN0aW9uIChpdGVyYXRlZCwga2luZCkge1xuICBzZXRJbnRlcm5hbFN0YXRlKHRoaXMsIHtcbiAgICB0eXBlOiBBUlJBWV9JVEVSQVRPUixcbiAgICB0YXJnZXQ6IHRvSW5kZXhlZE9iamVjdChpdGVyYXRlZCksIC8vIHRhcmdldFxuICAgIGluZGV4OiAwLCAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gbmV4dCBpbmRleFxuICAgIGtpbmQ6IGtpbmQgICAgICAgICAgICAgICAgICAgICAgICAgLy8ga2luZFxuICB9KTtcbi8vIGAlQXJyYXlJdGVyYXRvclByb3RvdHlwZSUubmV4dGAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy0lYXJyYXlpdGVyYXRvcnByb3RvdHlwZSUubmV4dFxufSwgZnVuY3Rpb24gKCkge1xuICB2YXIgc3RhdGUgPSBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpO1xuICB2YXIgdGFyZ2V0ID0gc3RhdGUudGFyZ2V0O1xuICB2YXIga2luZCA9IHN0YXRlLmtpbmQ7XG4gIHZhciBpbmRleCA9IHN0YXRlLmluZGV4Kys7XG4gIGlmICghdGFyZ2V0IHx8IGluZGV4ID49IHRhcmdldC5sZW5ndGgpIHtcbiAgICBzdGF0ZS50YXJnZXQgPSB1bmRlZmluZWQ7XG4gICAgcmV0dXJuIHsgdmFsdWU6IHVuZGVmaW5lZCwgZG9uZTogdHJ1ZSB9O1xuICB9XG4gIGlmIChraW5kID09ICdrZXlzJykgcmV0dXJuIHsgdmFsdWU6IGluZGV4LCBkb25lOiBmYWxzZSB9O1xuICBpZiAoa2luZCA9PSAndmFsdWVzJykgcmV0dXJuIHsgdmFsdWU6IHRhcmdldFtpbmRleF0sIGRvbmU6IGZhbHNlIH07XG4gIHJldHVybiB7IHZhbHVlOiBbaW5kZXgsIHRhcmdldFtpbmRleF1dLCBkb25lOiBmYWxzZSB9O1xufSwgJ3ZhbHVlcycpO1xuXG4vLyBhcmd1bWVudHNMaXN0W0BAaXRlcmF0b3JdIGlzICVBcnJheVByb3RvX3ZhbHVlcyVcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZXVubWFwcGVkYXJndW1lbnRzb2JqZWN0XG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1jcmVhdGVtYXBwZWRhcmd1bWVudHNvYmplY3Rcbkl0ZXJhdG9ycy5Bcmd1bWVudHMgPSBJdGVyYXRvcnMuQXJyYXk7XG5cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5hZGRUb1Vuc2NvcGFibGVzKCdrZXlzJyk7XG5hZGRUb1Vuc2NvcGFibGVzKCd2YWx1ZXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ2VudHJpZXMnKTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNsYXNzb2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY2xhc3NvZi1yYXcnKTtcblxudmFyIHNwbGl0ID0gJycuc3BsaXQ7XG5cbi8vIGZhbGxiYWNrIGZvciBub24tYXJyYXktbGlrZSBFUzMgYW5kIG5vbi1lbnVtZXJhYmxlIG9sZCBWOCBzdHJpbmdzXG5tb2R1bGUuZXhwb3J0cyA9IGZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gdGhyb3dzIGFuIGVycm9yIGluIHJoaW5vLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL21vemlsbGEvcmhpbm8vaXNzdWVzLzM0NlxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcHJvdG90eXBlLWJ1aWx0aW5zXG4gIHJldHVybiAhT2JqZWN0KCd6JykucHJvcGVydHlJc0VudW1lcmFibGUoMCk7XG59KSA/IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gY2xhc3NvZihpdCkgPT0gJ1N0cmluZycgPyBzcGxpdC5jYWxsKGl0LCAnJykgOiBPYmplY3QoaXQpO1xufSA6IE9iamVjdDtcbiIsInZhciB0b1N0cmluZyA9IHt9LnRvU3RyaW5nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdG9TdHJpbmcuY2FsbChpdCkuc2xpY2UoOCwgLTEpO1xufTtcbiIsInZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcbnZhciBjcmVhdGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWNyZWF0ZScpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxudmFyIFVOU0NPUEFCTEVTID0gd2VsbEtub3duU3ltYm9sKCd1bnNjb3BhYmxlcycpO1xudmFyIEFycmF5UHJvdG90eXBlID0gQXJyYXkucHJvdG90eXBlO1xuXG4vLyBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS1AQHVuc2NvcGFibGVzXG5pZiAoQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdID09IHVuZGVmaW5lZCkge1xuICBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKEFycmF5UHJvdG90eXBlLCBVTlNDT1BBQkxFUywge1xuICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICB2YWx1ZTogY3JlYXRlKG51bGwpXG4gIH0pO1xufVxuXG4vLyBhZGQgYSBrZXkgdG8gQXJyYXkucHJvdG90eXBlW0BAdW5zY29wYWJsZXNdXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgQXJyYXlQcm90b3R5cGVbVU5TQ09QQUJMRVNdW2tleV0gPSB0cnVlO1xufTtcbiIsInZhciBOQVRJVkVfU1lNQk9MID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL25hdGl2ZS1zeW1ib2wnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBOQVRJVkVfU1lNQk9MXG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlZlxuICAmJiAhU3ltYm9sLnNoYW1cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT0gJ3N5bWJvbCc7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBkZWZpbmVQcm9wZXJ0eU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZGVmaW5lLXByb3BlcnR5Jyk7XG52YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgb2JqZWN0S2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qta2V5cycpO1xuXG4vLyBgT2JqZWN0LmRlZmluZVByb3BlcnRpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnRpZXNcbm1vZHVsZS5leHBvcnRzID0gREVTQ1JJUFRPUlMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyA6IGZ1bmN0aW9uIGRlZmluZVByb3BlcnRpZXMoTywgUHJvcGVydGllcykge1xuICBhbk9iamVjdChPKTtcbiAgdmFyIGtleXMgPSBvYmplY3RLZXlzKFByb3BlcnRpZXMpO1xuICB2YXIgbGVuZ3RoID0ga2V5cy5sZW5ndGg7XG4gIHZhciBpbmRleCA9IDA7XG4gIHZhciBrZXk7XG4gIHdoaWxlIChsZW5ndGggPiBpbmRleCkgZGVmaW5lUHJvcGVydHlNb2R1bGUuZihPLCBrZXkgPSBrZXlzW2luZGV4KytdLCBQcm9wZXJ0aWVzW2tleV0pO1xuICByZXR1cm4gTztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG4vLyBgT2JqZWN0LmtleXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmtleXNcbm1vZHVsZS5leHBvcnRzID0gT2JqZWN0LmtleXMgfHwgZnVuY3Rpb24ga2V5cyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgZW51bUJ1Z0tleXMpO1xufTtcbiIsInZhciB0b0luZGV4ZWRPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW5kZXhlZC1vYmplY3QnKTtcbnZhciB0b0xlbmd0aCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1sZW5ndGgnKTtcbnZhciB0b0Fic29sdXRlSW5kZXggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXgnKTtcblxuLy8gYEFycmF5LnByb3RvdHlwZS57IGluZGV4T2YsIGluY2x1ZGVzIH1gIG1ldGhvZHMgaW1wbGVtZW50YXRpb25cbnZhciBjcmVhdGVNZXRob2QgPSBmdW5jdGlvbiAoSVNfSU5DTFVERVMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgkdGhpcywgZWwsIGZyb21JbmRleCkge1xuICAgIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KCR0aGlzKTtcbiAgICB2YXIgbGVuZ3RoID0gdG9MZW5ndGgoTy5sZW5ndGgpO1xuICAgIHZhciBpbmRleCA9IHRvQWJzb2x1dGVJbmRleChmcm9tSW5kZXgsIGxlbmd0aCk7XG4gICAgdmFyIHZhbHVlO1xuICAgIC8vIEFycmF5I2luY2x1ZGVzIHVzZXMgU2FtZVZhbHVlWmVybyBlcXVhbGl0eSBhbGdvcml0aG1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG4gICAgaWYgKElTX0lOQ0xVREVTICYmIGVsICE9IGVsKSB3aGlsZSAobGVuZ3RoID4gaW5kZXgpIHtcbiAgICAgIHZhbHVlID0gT1tpbmRleCsrXTtcbiAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICAgIGlmICh2YWx1ZSAhPSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgLy8gQXJyYXkjaW5kZXhPZiBpZ25vcmVzIGhvbGVzLCBBcnJheSNpbmNsdWRlcyAtIG5vdFxuICAgIH0gZWxzZSBmb3IgKDtsZW5ndGggPiBpbmRleDsgaW5kZXgrKykge1xuICAgICAgaWYgKChJU19JTkNMVURFUyB8fCBpbmRleCBpbiBPKSAmJiBPW2luZGV4XSA9PT0gZWwpIHJldHVybiBJU19JTkNMVURFUyB8fCBpbmRleCB8fCAwO1xuICAgIH0gcmV0dXJuICFJU19JTkNMVURFUyAmJiAtMTtcbiAgfTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICAvLyBgQXJyYXkucHJvdG90eXBlLmluY2x1ZGVzYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluY2x1ZGVzXG4gIGluY2x1ZGVzOiBjcmVhdGVNZXRob2QodHJ1ZSksXG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5kZXhPZmAgbWV0aG9kXG4gIC8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWFycmF5LnByb3RvdHlwZS5pbmRleG9mXG4gIGluZGV4T2Y6IGNyZWF0ZU1ldGhvZChmYWxzZSlcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBgVG9MZW5ndGhgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9sZW5ndGhcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBhcmd1bWVudCA+IDAgPyBtaW4odG9JbnRlZ2VyKGFyZ3VtZW50KSwgMHgxRkZGRkZGRkZGRkZGRikgOiAwOyAvLyAyICoqIDUzIC0gMSA9PSA5MDA3MTk5MjU0NzQwOTkxXG59O1xuIiwidmFyIHRvSW50ZWdlciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbnRlZ2VyJyk7XG5cbnZhciBtYXggPSBNYXRoLm1heDtcbnZhciBtaW4gPSBNYXRoLm1pbjtcblxuLy8gSGVscGVyIGZvciBhIHBvcHVsYXIgcmVwZWF0aW5nIGNhc2Ugb2YgdGhlIHNwZWM6XG4vLyBMZXQgaW50ZWdlciBiZSA/IFRvSW50ZWdlcihpbmRleCkuXG4vLyBJZiBpbnRlZ2VyIDwgMCwgbGV0IHJlc3VsdCBiZSBtYXgoKGxlbmd0aCArIGludGVnZXIpLCAwKTsgZWxzZSBsZXQgcmVzdWx0IGJlIG1pbihpbnRlZ2VyLCBsZW5ndGgpLlxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaW5kZXgsIGxlbmd0aCkge1xuICB2YXIgaW50ZWdlciA9IHRvSW50ZWdlcihpbmRleCk7XG4gIHJldHVybiBpbnRlZ2VyIDwgMCA/IG1heChpbnRlZ2VyICsgbGVuZ3RoLCAwKSA6IG1pbihpbnRlZ2VyLCBsZW5ndGgpO1xufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ2RvY3VtZW50JywgJ2RvY3VtZW50RWxlbWVudCcpO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBnbG9iYWw7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGluc3BlY3RTb3VyY2UgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UnKTtcblxudmFyIFdlYWtNYXAgPSBnbG9iYWwuV2Vha01hcDtcblxubW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgV2Vha01hcCA9PT0gJ2Z1bmN0aW9uJyAmJiAvbmF0aXZlIGNvZGUvLnRlc3QoaW5zcGVjdFNvdXJjZShXZWFrTWFwKSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgJCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9leHBvcnQnKTtcbnZhciBjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1pdGVyYXRvci1jb25zdHJ1Y3RvcicpO1xudmFyIGdldFByb3RvdHlwZU9mID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtcHJvdG90eXBlLW9mJyk7XG52YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LXNldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciByZWRlZmluZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZWRlZmluZScpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcbnZhciBJdGVyYXRvcnNDb3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJyk7XG5cbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IEl0ZXJhdG9yc0NvcmUuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IEl0ZXJhdG9yc0NvcmUuQlVHR1lfU0FGQVJJX0lURVJBVE9SUztcbnZhciBJVEVSQVRPUiA9IHdlbGxLbm93blN5bWJvbCgnaXRlcmF0b3InKTtcbnZhciBLRVlTID0gJ2tleXMnO1xudmFyIFZBTFVFUyA9ICd2YWx1ZXMnO1xudmFyIEVOVFJJRVMgPSAnZW50cmllcyc7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmFibGUsIE5BTUUsIEl0ZXJhdG9yQ29uc3RydWN0b3IsIG5leHQsIERFRkFVTFQsIElTX1NFVCwgRk9SQ0VEKSB7XG4gIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCk7XG5cbiAgdmFyIGdldEl0ZXJhdGlvbk1ldGhvZCA9IGZ1bmN0aW9uIChLSU5EKSB7XG4gICAgaWYgKEtJTkQgPT09IERFRkFVTFQgJiYgZGVmYXVsdEl0ZXJhdG9yKSByZXR1cm4gZGVmYXVsdEl0ZXJhdG9yO1xuICAgIGlmICghQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBLSU5EIGluIEl0ZXJhYmxlUHJvdG90eXBlKSByZXR1cm4gSXRlcmFibGVQcm90b3R5cGVbS0lORF07XG4gICAgc3dpdGNoIChLSU5EKSB7XG4gICAgICBjYXNlIEtFWVM6IHJldHVybiBmdW5jdGlvbiBrZXlzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIFZBTFVFUzogcmV0dXJuIGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgICAgY2FzZSBFTlRSSUVTOiByZXR1cm4gZnVuY3Rpb24gZW50cmllcygpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMsIEtJTkQpOyB9O1xuICAgIH0gcmV0dXJuIGZ1bmN0aW9uICgpIHsgcmV0dXJuIG5ldyBJdGVyYXRvckNvbnN0cnVjdG9yKHRoaXMpOyB9O1xuICB9O1xuXG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICB2YXIgSU5DT1JSRUNUX1ZBTFVFU19OQU1FID0gZmFsc2U7XG4gIHZhciBJdGVyYWJsZVByb3RvdHlwZSA9IEl0ZXJhYmxlLnByb3RvdHlwZTtcbiAgdmFyIG5hdGl2ZUl0ZXJhdG9yID0gSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdXG4gICAgfHwgSXRlcmFibGVQcm90b3R5cGVbJ0BAaXRlcmF0b3InXVxuICAgIHx8IERFRkFVTFQgJiYgSXRlcmFibGVQcm90b3R5cGVbREVGQVVMVF07XG4gIHZhciBkZWZhdWx0SXRlcmF0b3IgPSAhQlVHR1lfU0FGQVJJX0lURVJBVE9SUyAmJiBuYXRpdmVJdGVyYXRvciB8fCBnZXRJdGVyYXRpb25NZXRob2QoREVGQVVMVCk7XG4gIHZhciBhbnlOYXRpdmVJdGVyYXRvciA9IE5BTUUgPT0gJ0FycmF5JyA/IEl0ZXJhYmxlUHJvdG90eXBlLmVudHJpZXMgfHwgbmF0aXZlSXRlcmF0b3IgOiBuYXRpdmVJdGVyYXRvcjtcbiAgdmFyIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgbWV0aG9kcywgS0VZO1xuXG4gIC8vIGZpeCBuYXRpdmVcbiAgaWYgKGFueU5hdGl2ZUl0ZXJhdG9yKSB7XG4gICAgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlID0gZ2V0UHJvdG90eXBlT2YoYW55TmF0aXZlSXRlcmF0b3IuY2FsbChuZXcgSXRlcmFibGUoKSkpO1xuICAgIGlmIChJdGVyYXRvclByb3RvdHlwZSAhPT0gT2JqZWN0LnByb3RvdHlwZSAmJiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUubmV4dCkge1xuICAgICAgaWYgKCFJU19QVVJFICYmIGdldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSkgIT09IEl0ZXJhdG9yUHJvdG90eXBlKSB7XG4gICAgICAgIGlmIChzZXRQcm90b3R5cGVPZikge1xuICAgICAgICAgIHNldFByb3RvdHlwZU9mKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgSXRlcmF0b3JQcm90b3R5cGUpO1xuICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGVbSVRFUkFUT1JdICE9ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJVEVSQVRPUiwgcmV0dXJuVGhpcyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIC8vIFNldCBAQHRvU3RyaW5nVGFnIHRvIG5hdGl2ZSBpdGVyYXRvcnNcbiAgICAgIHNldFRvU3RyaW5nVGFnKEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICBpZiAoSVNfUFVSRSkgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgICB9XG4gIH1cblxuICAvLyBmaXggQXJyYXkje3ZhbHVlcywgQEBpdGVyYXRvcn0ubmFtZSBpbiBWOCAvIEZGXG4gIGlmIChERUZBVUxUID09IFZBTFVFUyAmJiBuYXRpdmVJdGVyYXRvciAmJiBuYXRpdmVJdGVyYXRvci5uYW1lICE9PSBWQUxVRVMpIHtcbiAgICBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSB0cnVlO1xuICAgIGRlZmF1bHRJdGVyYXRvciA9IGZ1bmN0aW9uIHZhbHVlcygpIHsgcmV0dXJuIG5hdGl2ZUl0ZXJhdG9yLmNhbGwodGhpcyk7IH07XG4gIH1cblxuICAvLyBkZWZpbmUgaXRlcmF0b3JcbiAgaWYgKCghSVNfUFVSRSB8fCBGT1JDRUQpICYmIEl0ZXJhYmxlUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gZGVmYXVsdEl0ZXJhdG9yKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KEl0ZXJhYmxlUHJvdG90eXBlLCBJVEVSQVRPUiwgZGVmYXVsdEl0ZXJhdG9yKTtcbiAgfVxuICBJdGVyYXRvcnNbTkFNRV0gPSBkZWZhdWx0SXRlcmF0b3I7XG5cbiAgLy8gZXhwb3J0IGFkZGl0aW9uYWwgbWV0aG9kc1xuICBpZiAoREVGQVVMVCkge1xuICAgIG1ldGhvZHMgPSB7XG4gICAgICB2YWx1ZXM6IGdldEl0ZXJhdGlvbk1ldGhvZChWQUxVRVMpLFxuICAgICAga2V5czogSVNfU0VUID8gZGVmYXVsdEl0ZXJhdG9yIDogZ2V0SXRlcmF0aW9uTWV0aG9kKEtFWVMpLFxuICAgICAgZW50cmllczogZ2V0SXRlcmF0aW9uTWV0aG9kKEVOVFJJRVMpXG4gICAgfTtcbiAgICBpZiAoRk9SQ0VEKSBmb3IgKEtFWSBpbiBtZXRob2RzKSB7XG4gICAgICBpZiAoQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfHwgIShLRVkgaW4gSXRlcmFibGVQcm90b3R5cGUpKSB7XG4gICAgICAgIHJlZGVmaW5lKEl0ZXJhYmxlUHJvdG90eXBlLCBLRVksIG1ldGhvZHNbS0VZXSk7XG4gICAgICB9XG4gICAgfSBlbHNlICQoeyB0YXJnZXQ6IE5BTUUsIHByb3RvOiB0cnVlLCBmb3JjZWQ6IEJVR0dZX1NBRkFSSV9JVEVSQVRPUlMgfHwgSU5DT1JSRUNUX1ZBTFVFU19OQU1FIH0sIG1ldGhvZHMpO1xuICB9XG5cbiAgcmV0dXJuIG1ldGhvZHM7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpLmY7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgc2V0R2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC1nbG9iYWwnKTtcbnZhciBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NvcHktY29uc3RydWN0b3ItcHJvcGVydGllcycpO1xudmFyIGlzRm9yY2VkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLWZvcmNlZCcpO1xuXG4vKlxuICBvcHRpb25zLnRhcmdldCAgICAgIC0gbmFtZSBvZiB0aGUgdGFyZ2V0IG9iamVjdFxuICBvcHRpb25zLmdsb2JhbCAgICAgIC0gdGFyZ2V0IGlzIHRoZSBnbG9iYWwgb2JqZWN0XG4gIG9wdGlvbnMuc3RhdCAgICAgICAgLSBleHBvcnQgYXMgc3RhdGljIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucHJvdG8gICAgICAgLSBleHBvcnQgYXMgcHJvdG90eXBlIG1ldGhvZHMgb2YgdGFyZ2V0XG4gIG9wdGlvbnMucmVhbCAgICAgICAgLSByZWFsIHByb3RvdHlwZSBtZXRob2QgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLmZvcmNlZCAgICAgIC0gZXhwb3J0IGV2ZW4gaWYgdGhlIG5hdGl2ZSBmZWF0dXJlIGlzIGF2YWlsYWJsZVxuICBvcHRpb25zLmJpbmQgICAgICAgIC0gYmluZCBtZXRob2RzIHRvIHRoZSB0YXJnZXQsIHJlcXVpcmVkIGZvciB0aGUgYHB1cmVgIHZlcnNpb25cbiAgb3B0aW9ucy53cmFwICAgICAgICAtIHdyYXAgY29uc3RydWN0b3JzIHRvIHByZXZlbnRpbmcgZ2xvYmFsIHBvbGx1dGlvbiwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLnVuc2FmZSAgICAgIC0gdXNlIHRoZSBzaW1wbGUgYXNzaWdubWVudCBvZiBwcm9wZXJ0eSBpbnN0ZWFkIG9mIGRlbGV0ZSArIGRlZmluZVByb3BlcnR5XG4gIG9wdGlvbnMuc2hhbSAgICAgICAgLSBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gIG9wdGlvbnMuZW51bWVyYWJsZSAgLSBleHBvcnQgYXMgZW51bWVyYWJsZSBwcm9wZXJ0eVxuICBvcHRpb25zLm5vVGFyZ2V0R2V0IC0gcHJldmVudCBjYWxsaW5nIGEgZ2V0dGVyIG9uIHRhcmdldFxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG9wdGlvbnMsIHNvdXJjZSkge1xuICB2YXIgVEFSR0VUID0gb3B0aW9ucy50YXJnZXQ7XG4gIHZhciBHTE9CQUwgPSBvcHRpb25zLmdsb2JhbDtcbiAgdmFyIFNUQVRJQyA9IG9wdGlvbnMuc3RhdDtcbiAgdmFyIEZPUkNFRCwgdGFyZ2V0LCBrZXksIHRhcmdldFByb3BlcnR5LCBzb3VyY2VQcm9wZXJ0eSwgZGVzY3JpcHRvcjtcbiAgaWYgKEdMT0JBTCkge1xuICAgIHRhcmdldCA9IGdsb2JhbDtcbiAgfSBlbHNlIGlmIChTVEFUSUMpIHtcbiAgICB0YXJnZXQgPSBnbG9iYWxbVEFSR0VUXSB8fCBzZXRHbG9iYWwoVEFSR0VULCB7fSk7XG4gIH0gZWxzZSB7XG4gICAgdGFyZ2V0ID0gKGdsb2JhbFtUQVJHRVRdIHx8IHt9KS5wcm90b3R5cGU7XG4gIH1cbiAgaWYgKHRhcmdldCkgZm9yIChrZXkgaW4gc291cmNlKSB7XG4gICAgc291cmNlUHJvcGVydHkgPSBzb3VyY2Vba2V5XTtcbiAgICBpZiAob3B0aW9ucy5ub1RhcmdldEdldCkge1xuICAgICAgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0YXJnZXQsIGtleSk7XG4gICAgICB0YXJnZXRQcm9wZXJ0eSA9IGRlc2NyaXB0b3IgJiYgZGVzY3JpcHRvci52YWx1ZTtcbiAgICB9IGVsc2UgdGFyZ2V0UHJvcGVydHkgPSB0YXJnZXRba2V5XTtcbiAgICBGT1JDRUQgPSBpc0ZvcmNlZChHTE9CQUwgPyBrZXkgOiBUQVJHRVQgKyAoU1RBVElDID8gJy4nIDogJyMnKSArIGtleSwgb3B0aW9ucy5mb3JjZWQpO1xuICAgIC8vIGNvbnRhaW5lZCBpbiB0YXJnZXRcbiAgICBpZiAoIUZPUkNFRCAmJiB0YXJnZXRQcm9wZXJ0eSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpZiAodHlwZW9mIHNvdXJjZVByb3BlcnR5ID09PSB0eXBlb2YgdGFyZ2V0UHJvcGVydHkpIGNvbnRpbnVlO1xuICAgICAgY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyhzb3VyY2VQcm9wZXJ0eSwgdGFyZ2V0UHJvcGVydHkpO1xuICAgIH1cbiAgICAvLyBhZGQgYSBmbGFnIHRvIG5vdCBjb21wbGV0ZWx5IGZ1bGwgcG9seWZpbGxzXG4gICAgaWYgKG9wdGlvbnMuc2hhbSB8fCAodGFyZ2V0UHJvcGVydHkgJiYgdGFyZ2V0UHJvcGVydHkuc2hhbSkpIHtcbiAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShzb3VyY2VQcm9wZXJ0eSwgJ3NoYW0nLCB0cnVlKTtcbiAgICB9XG4gICAgLy8gZXh0ZW5kIGdsb2JhbFxuICAgIHJlZGVmaW5lKHRhcmdldCwga2V5LCBzb3VyY2VQcm9wZXJ0eSwgb3B0aW9ucyk7XG4gIH1cbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUgPSB7fS5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xuXG4vLyBOYXNob3JuIH4gSkRLOCBidWdcbnZhciBOQVNIT1JOX0JVRyA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvciAmJiAhbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh7IDE6IDIgfSwgMSk7XG5cbi8vIGBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlYCBtZXRob2QgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5wcm90b3R5cGUucHJvcGVydHlpc2VudW1lcmFibGVcbmV4cG9ydHMuZiA9IE5BU0hPUk5fQlVHID8gZnVuY3Rpb24gcHJvcGVydHlJc0VudW1lcmFibGUoVikge1xuICB2YXIgZGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvcih0aGlzLCBWKTtcbiAgcmV0dXJuICEhZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLmVudW1lcmFibGU7XG59IDogbmF0aXZlUHJvcGVydHlJc0VudW1lcmFibGU7XG4iLCJ2YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIG93bktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb3duLWtleXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAodGFyZ2V0LCBzb3VyY2UpIHtcbiAgdmFyIGtleXMgPSBvd25LZXlzKHNvdXJjZSk7XG4gIHZhciBkZWZpbmVQcm9wZXJ0eSA9IGRlZmluZVByb3BlcnR5TW9kdWxlLmY7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUuZjtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IGtleXNbaV07XG4gICAgaWYgKCFoYXModGFyZ2V0LCBrZXkpKSBkZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZSwga2V5KSk7XG4gIH1cbn07XG4iLCJ2YXIgZ2V0QnVpbHRJbiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nZXQtYnVpbHQtaW4nKTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LW5hbWVzJyk7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LXN5bWJvbHMnKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcblxuLy8gYWxsIG9iamVjdCBrZXlzLCBpbmNsdWRlcyBub24tZW51bWVyYWJsZSBhbmQgc3ltYm9sc1xubW9kdWxlLmV4cG9ydHMgPSBnZXRCdWlsdEluKCdSZWZsZWN0JywgJ293bktleXMnKSB8fCBmdW5jdGlvbiBvd25LZXlzKGl0KSB7XG4gIHZhciBrZXlzID0gZ2V0T3duUHJvcGVydHlOYW1lc01vZHVsZS5mKGFuT2JqZWN0KGl0KSk7XG4gIHZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUuZjtcbiAgcmV0dXJuIGdldE93blByb3BlcnR5U3ltYm9scyA/IGtleXMuY29uY2F0KGdldE93blByb3BlcnR5U3ltYm9scyhpdCkpIDoga2V5cztcbn07XG4iLCJ2YXIgaW50ZXJuYWxPYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzLWludGVybmFsJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xuXG52YXIgaGlkZGVuS2V5cyA9IGVudW1CdWdLZXlzLmNvbmNhdCgnbGVuZ3RoJywgJ3Byb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5bmFtZXNcbmV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzIHx8IGZ1bmN0aW9uIGdldE93blByb3BlcnR5TmFtZXMoTykge1xuICByZXR1cm4gaW50ZXJuYWxPYmplY3RLZXlzKE8sIGhpZGRlbktleXMpO1xufTtcbiIsImV4cG9ydHMuZiA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxudmFyIHJlcGxhY2VtZW50ID0gLyN8XFwucHJvdG90eXBlXFwuLztcblxudmFyIGlzRm9yY2VkID0gZnVuY3Rpb24gKGZlYXR1cmUsIGRldGVjdGlvbikge1xuICB2YXIgdmFsdWUgPSBkYXRhW25vcm1hbGl6ZShmZWF0dXJlKV07XG4gIHJldHVybiB2YWx1ZSA9PSBQT0xZRklMTCA/IHRydWVcbiAgICA6IHZhbHVlID09IE5BVElWRSA/IGZhbHNlXG4gICAgOiB0eXBlb2YgZGV0ZWN0aW9uID09ICdmdW5jdGlvbicgPyBmYWlscyhkZXRlY3Rpb24pXG4gICAgOiAhIWRldGVjdGlvbjtcbn07XG5cbnZhciBub3JtYWxpemUgPSBpc0ZvcmNlZC5ub3JtYWxpemUgPSBmdW5jdGlvbiAoc3RyaW5nKSB7XG4gIHJldHVybiBTdHJpbmcoc3RyaW5nKS5yZXBsYWNlKHJlcGxhY2VtZW50LCAnLicpLnRvTG93ZXJDYXNlKCk7XG59O1xuXG52YXIgZGF0YSA9IGlzRm9yY2VkLmRhdGEgPSB7fTtcbnZhciBOQVRJVkUgPSBpc0ZvcmNlZC5OQVRJVkUgPSAnTic7XG52YXIgUE9MWUZJTEwgPSBpc0ZvcmNlZC5QT0xZRklMTCA9ICdQJztcblxubW9kdWxlLmV4cG9ydHMgPSBpc0ZvcmNlZDtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBJdGVyYXRvclByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMtY29yZScpLkl0ZXJhdG9yUHJvdG90eXBlO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgc2V0VG9TdHJpbmdUYWcgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LXRvLXN0cmluZy10YWcnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG5cbnZhciByZXR1cm5UaGlzID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gdGhpczsgfTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoSXRlcmF0b3JDb25zdHJ1Y3RvciwgTkFNRSwgbmV4dCkge1xuICB2YXIgVE9fU1RSSU5HX1RBRyA9IE5BTUUgKyAnIEl0ZXJhdG9yJztcbiAgSXRlcmF0b3JDb25zdHJ1Y3Rvci5wcm90b3R5cGUgPSBjcmVhdGUoSXRlcmF0b3JQcm90b3R5cGUsIHsgbmV4dDogY3JlYXRlUHJvcGVydHlEZXNjcmlwdG9yKDEsIG5leHQpIH0pO1xuICBzZXRUb1N0cmluZ1RhZyhJdGVyYXRvckNvbnN0cnVjdG9yLCBUT19TVFJJTkdfVEFHLCBmYWxzZSwgdHJ1ZSk7XG4gIEl0ZXJhdG9yc1tUT19TVFJJTkdfVEFHXSA9IHJldHVyblRoaXM7XG4gIHJldHVybiBJdGVyYXRvckNvbnN0cnVjdG9yO1xufTtcbiIsInZhciByZXF1aXJlT2JqZWN0Q29lcmNpYmxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlcXVpcmUtb2JqZWN0LWNvZXJjaWJsZScpO1xuXG4vLyBgVG9PYmplY3RgIGFic3RyYWN0IG9wZXJhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtdG9vYmplY3Rcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGFyZ3VtZW50KSB7XG4gIHJldHVybiBPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShhcmd1bWVudCkpO1xufTtcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICFmYWlscyhmdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIEYoKSB7IC8qIGVtcHR5ICovIH1cbiAgRi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBudWxsO1xuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5ldyBGKCkpICE9PSBGLnByb3RvdHlwZTtcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGFQb3NzaWJsZVByb3RvdHlwZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hLXBvc3NpYmxlLXByb3RvdHlwZScpO1xuXG4vLyBgT2JqZWN0LnNldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5zZXRwcm90b3R5cGVvZlxuLy8gV29ya3Mgd2l0aCBfX3Byb3RvX18gb25seS4gT2xkIHY4IGNhbid0IHdvcmsgd2l0aCBudWxsIHByb3RvIG9iamVjdHMuXG4vKiBlc2xpbnQtZGlzYWJsZSBuby1wcm90byAqL1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHwgKCdfX3Byb3RvX18nIGluIHt9ID8gZnVuY3Rpb24gKCkge1xuICB2YXIgQ09SUkVDVF9TRVRURVIgPSBmYWxzZTtcbiAgdmFyIHRlc3QgPSB7fTtcbiAgdmFyIHNldHRlcjtcbiAgdHJ5IHtcbiAgICBzZXR0ZXIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE9iamVjdC5wcm90b3R5cGUsICdfX3Byb3RvX18nKS5zZXQ7XG4gICAgc2V0dGVyLmNhbGwodGVzdCwgW10pO1xuICAgIENPUlJFQ1RfU0VUVEVSID0gdGVzdCBpbnN0YW5jZW9mIEFycmF5O1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIHJldHVybiBmdW5jdGlvbiBzZXRQcm90b3R5cGVPZihPLCBwcm90bykge1xuICAgIGFuT2JqZWN0KE8pO1xuICAgIGFQb3NzaWJsZVByb3RvdHlwZShwcm90byk7XG4gICAgaWYgKENPUlJFQ1RfU0VUVEVSKSBzZXR0ZXIuY2FsbChPLCBwcm90byk7XG4gICAgZWxzZSBPLl9fcHJvdG9fXyA9IHByb3RvO1xuICAgIHJldHVybiBPO1xuICB9O1xufSgpIDogdW5kZWZpbmVkKTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkgJiYgaXQgIT09IG51bGwpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBzZXQgXCIgKyBTdHJpbmcoaXQpICsgJyBhcyBhIHByb3RvdHlwZScpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IEFycmF5LmlzQXJyYXkgfHwgZnVuY3Rpb24gKGFycikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKGFycikgPT0gJ1tvYmplY3QgQXJyYXldJztcbn07XG4iLCIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW5cbm1vZHVsZS5leHBvcnRzID0ge1wic3Bpbm5lclwiOlwiXzMwQU5iQ2pwVjJ6aEx5TV9FNUozNDJcIn07IiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYwLjE4LjBcbiAqIHNjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qc1xuICpcbiAqIENvcHlyaWdodCAoYykgRmFjZWJvb2ssIEluYy4gYW5kIGl0cyBhZmZpbGlhdGVzLlxuICpcbiAqIFRoaXMgc291cmNlIGNvZGUgaXMgbGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlIGZvdW5kIGluIHRoZVxuICogTElDRU5TRSBmaWxlIGluIHRoZSByb290IGRpcmVjdG9yeSBvZiB0aGlzIHNvdXJjZSB0cmVlLlxuICovXG5cbid1c2Ugc3RyaWN0JztPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cyxcIl9fZXNNb2R1bGVcIix7dmFsdWU6ITB9KTt2YXIgZixnLGgsayxsO1xuaWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3d8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBNZXNzYWdlQ2hhbm5lbCl7dmFyIHA9bnVsbCxxPW51bGwsdD1mdW5jdGlvbigpe2lmKG51bGwhPT1wKXRyeXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO3AoITAsYSk7cD1udWxsfWNhdGNoKGIpe3Rocm93IHNldFRpbWVvdXQodCwwKSxiO319LHU9RGF0ZS5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiBEYXRlLm5vdygpLXV9O2Y9ZnVuY3Rpb24oYSl7bnVsbCE9PXA/c2V0VGltZW91dChmLDAsYSk6KHA9YSxzZXRUaW1lb3V0KHQsMCkpfTtnPWZ1bmN0aW9uKGEsYil7cT1zZXRUaW1lb3V0KGEsYil9O2g9ZnVuY3Rpb24oKXtjbGVhclRpbWVvdXQocSl9O2s9ZnVuY3Rpb24oKXtyZXR1cm4hMX07bD1leHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKCl7fX1lbHNle3ZhciB3PXdpbmRvdy5wZXJmb3JtYW5jZSx4PXdpbmRvdy5EYXRlLFxueT13aW5kb3cuc2V0VGltZW91dCx6PXdpbmRvdy5jbGVhclRpbWVvdXQ7aWYoXCJ1bmRlZmluZWRcIiE9PXR5cGVvZiBjb25zb2xlKXt2YXIgQT13aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWU7XCJmdW5jdGlvblwiIT09dHlwZW9mIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IHJlcXVlc3RBbmltYXRpb25GcmFtZS4gTWFrZSBzdXJlIHRoYXQgeW91IGxvYWQgYSBwb2x5ZmlsbCBpbiBvbGRlciBicm93c2Vycy4gaHR0cHM6Ly9mYi5tZS9yZWFjdC1wb2x5ZmlsbHNcIik7XCJmdW5jdGlvblwiIT09dHlwZW9mIEEmJmNvbnNvbGUuZXJyb3IoXCJUaGlzIGJyb3dzZXIgZG9lc24ndCBzdXBwb3J0IGNhbmNlbEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKX1pZihcIm9iamVjdFwiPT09XG50eXBlb2YgdyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIHcubm93KWV4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHcubm93KCl9O2Vsc2V7dmFyIEI9eC5ub3coKTtleHBvcnRzLnVuc3RhYmxlX25vdz1mdW5jdGlvbigpe3JldHVybiB4Lm5vdygpLUJ9fXZhciBDPSExLEQ9bnVsbCxFPS0xLEY9NSxHPTA7az1mdW5jdGlvbigpe3JldHVybiBleHBvcnRzLnVuc3RhYmxlX25vdygpPj1HfTtsPWZ1bmN0aW9uKCl7fTtleHBvcnRzLnVuc3RhYmxlX2ZvcmNlRnJhbWVSYXRlPWZ1bmN0aW9uKGEpezA+YXx8MTI1PGE/Y29uc29sZS5lcnJvcihcImZvcmNlRnJhbWVSYXRlIHRha2VzIGEgcG9zaXRpdmUgaW50IGJldHdlZW4gMCBhbmQgMTI1LCBmb3JjaW5nIGZyYW1lcmF0ZXMgaGlnaGVyIHRoYW4gMTI1IGZwcyBpcyBub3QgdW5zdXBwb3J0ZWRcIik6Rj0wPGE/TWF0aC5mbG9vcigxRTMvYSk6NX07dmFyIEg9bmV3IE1lc3NhZ2VDaGFubmVsLEk9SC5wb3J0MjtILnBvcnQxLm9ubWVzc2FnZT1cbmZ1bmN0aW9uKCl7aWYobnVsbCE9PUQpe3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7Rz1hK0Y7dHJ5e0QoITAsYSk/SS5wb3N0TWVzc2FnZShudWxsKTooQz0hMSxEPW51bGwpfWNhdGNoKGIpe3Rocm93IEkucG9zdE1lc3NhZ2UobnVsbCksYjt9fWVsc2UgQz0hMX07Zj1mdW5jdGlvbihhKXtEPWE7Q3x8KEM9ITAsSS5wb3N0TWVzc2FnZShudWxsKSl9O2c9ZnVuY3Rpb24oYSxiKXtFPXkoZnVuY3Rpb24oKXthKGV4cG9ydHMudW5zdGFibGVfbm93KCkpfSxiKX07aD1mdW5jdGlvbigpe3ooRSk7RT0tMX19ZnVuY3Rpb24gSihhLGIpe3ZhciBjPWEubGVuZ3RoO2EucHVzaChiKTthOmZvcig7Oyl7dmFyIGQ9TWF0aC5mbG9vcigoYy0xKS8yKSxlPWFbZF07aWYodm9pZCAwIT09ZSYmMDxLKGUsYikpYVtkXT1iLGFbY109ZSxjPWQ7ZWxzZSBicmVhayBhfX1mdW5jdGlvbiBMKGEpe2E9YVswXTtyZXR1cm4gdm9pZCAwPT09YT9udWxsOmF9XG5mdW5jdGlvbiBNKGEpe3ZhciBiPWFbMF07aWYodm9pZCAwIT09Yil7dmFyIGM9YS5wb3AoKTtpZihjIT09Yil7YVswXT1jO2E6Zm9yKHZhciBkPTAsZT1hLmxlbmd0aDtkPGU7KXt2YXIgbT0yKihkKzEpLTEsbj1hW21dLHY9bSsxLHI9YVt2XTtpZih2b2lkIDAhPT1uJiYwPksobixjKSl2b2lkIDAhPT1yJiYwPksocixuKT8oYVtkXT1yLGFbdl09YyxkPXYpOihhW2RdPW4sYVttXT1jLGQ9bSk7ZWxzZSBpZih2b2lkIDAhPT1yJiYwPksocixjKSlhW2RdPXIsYVt2XT1jLGQ9djtlbHNlIGJyZWFrIGF9fXJldHVybiBifXJldHVybiBudWxsfWZ1bmN0aW9uIEsoYSxiKXt2YXIgYz1hLnNvcnRJbmRleC1iLnNvcnRJbmRleDtyZXR1cm4gMCE9PWM/YzphLmlkLWIuaWR9dmFyIE49W10sTz1bXSxQPTEsUT1udWxsLFI9MyxTPSExLFQ9ITEsVT0hMTtcbmZ1bmN0aW9uIFYoYSl7Zm9yKHZhciBiPUwoTyk7bnVsbCE9PWI7KXtpZihudWxsPT09Yi5jYWxsYmFjaylNKE8pO2Vsc2UgaWYoYi5zdGFydFRpbWU8PWEpTShPKSxiLnNvcnRJbmRleD1iLmV4cGlyYXRpb25UaW1lLEooTixiKTtlbHNlIGJyZWFrO2I9TChPKX19ZnVuY3Rpb24gVyhhKXtVPSExO1YoYSk7aWYoIVQpaWYobnVsbCE9PUwoTikpVD0hMCxmKFgpO2Vsc2V7dmFyIGI9TChPKTtudWxsIT09YiYmZyhXLGIuc3RhcnRUaW1lLWEpfX1cbmZ1bmN0aW9uIFgoYSxiKXtUPSExO1UmJihVPSExLGgoKSk7Uz0hMDt2YXIgYz1SO3RyeXtWKGIpO2ZvcihRPUwoTik7bnVsbCE9PVEmJighKFEuZXhwaXJhdGlvblRpbWU+Yil8fGEmJiFrKCkpOyl7dmFyIGQ9US5jYWxsYmFjaztpZihudWxsIT09ZCl7US5jYWxsYmFjaz1udWxsO1I9US5wcmlvcml0eUxldmVsO3ZhciBlPWQoUS5leHBpcmF0aW9uVGltZTw9Yik7Yj1leHBvcnRzLnVuc3RhYmxlX25vdygpO1wiZnVuY3Rpb25cIj09PXR5cGVvZiBlP1EuY2FsbGJhY2s9ZTpRPT09TChOKSYmTShOKTtWKGIpfWVsc2UgTShOKTtRPUwoTil9aWYobnVsbCE9PVEpdmFyIG09ITA7ZWxzZXt2YXIgbj1MKE8pO251bGwhPT1uJiZnKFcsbi5zdGFydFRpbWUtYik7bT0hMX1yZXR1cm4gbX1maW5hbGx5e1E9bnVsbCxSPWMsUz0hMX19XG5mdW5jdGlvbiBZKGEpe3N3aXRjaChhKXtjYXNlIDE6cmV0dXJuLTE7Y2FzZSAyOnJldHVybiAyNTA7Y2FzZSA1OnJldHVybiAxMDczNzQxODIzO2Nhc2UgNDpyZXR1cm4gMUU0O2RlZmF1bHQ6cmV0dXJuIDVFM319dmFyIFo9bDtleHBvcnRzLnVuc3RhYmxlX0ltbWVkaWF0ZVByaW9yaXR5PTE7ZXhwb3J0cy51bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eT0yO2V4cG9ydHMudW5zdGFibGVfTm9ybWFsUHJpb3JpdHk9MztleHBvcnRzLnVuc3RhYmxlX0lkbGVQcmlvcml0eT01O2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX25leHQ9ZnVuY3Rpb24oYSl7c3dpdGNoKFIpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOnZhciBiPTM7YnJlYWs7ZGVmYXVsdDpiPVJ9dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjaz1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXt2YXIgZT1jLmRlbGF5O2U9XCJudW1iZXJcIj09PXR5cGVvZiBlJiYwPGU/ZCtlOmQ7Yz1cIm51bWJlclwiPT09dHlwZW9mIGMudGltZW91dD9jLnRpbWVvdXQ6WShhKX1lbHNlIGM9WShhKSxlPWQ7Yz1lK2M7YT17aWQ6UCsrLGNhbGxiYWNrOmIscHJpb3JpdHlMZXZlbDphLHN0YXJ0VGltZTplLGV4cGlyYXRpb25UaW1lOmMsc29ydEluZGV4Oi0xfTtlPmQ/KGEuc29ydEluZGV4PWUsSihPLGEpLG51bGw9PT1MKE4pJiZhPT09TChPKSYmKFU/aCgpOlU9ITAsZyhXLGUtZCkpKTooYS5zb3J0SW5kZXg9YyxKKE4sYSksVHx8U3x8KFQ9ITAsZihYKSkpO3JldHVybiBhfTtleHBvcnRzLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrPWZ1bmN0aW9uKGEpe2EuY2FsbGJhY2s9bnVsbH07XG5leHBvcnRzLnVuc3RhYmxlX3dyYXBDYWxsYmFjaz1mdW5jdGlvbihhKXt2YXIgYj1SO3JldHVybiBmdW5jdGlvbigpe3ZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYS5hcHBseSh0aGlzLGFyZ3VtZW50cyl9ZmluYWxseXtSPWN9fX07ZXhwb3J0cy51bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbD1mdW5jdGlvbigpe3JldHVybiBSfTtleHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfcmVxdWVzdFBhaW50PVo7ZXhwb3J0cy51bnN0YWJsZV9jb250aW51ZUV4ZWN1dGlvbj1mdW5jdGlvbigpe1R8fFN8fChUPSEwLGYoWCkpfTtcbmV4cG9ydHMudW5zdGFibGVfcGF1c2VFeGVjdXRpb249ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cblJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxyXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcclxuICogICByZXR1cm4gKFxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cclxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cclxuICogICAgIDwvZGl2PlxyXG4gKiAgIClcclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VEaXNwYXRjaCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yc1wiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHJldHVybiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vayB9IGZyb20gJy4vaG9va3MvdXNlRGlzcGF0Y2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vayB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rLCB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rLCB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rLCBzaGFsbG93RXF1YWwgfTsiLCJpbXBvcnQge2NyZWF0ZVN0b3JlfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCB7XG4gICAgc2V0VXNlcixcbiAgICBhZGROb3RlXG59IGZyb20gJy4vcmVkdWNlcnMnXG5cblxuY29uc3QgaW5pY2lhbFN0YXRlID0ge1xuICAgIHVzZXI6IHtcbiAgICAgICAgbmFtZTogbnVsbCxcbiAgICAgICAgZW1haWw6IG51bGwsXG4gICAgfSxcbiAgICBub3RlczogW1xuICAgICAgICAvKntcbiAgICAgICAgICAgIHRleHQ6ICcnLFxuICAgICAgICAgICAgaW1wb3J0YW50OiBmYWxzZVxuICAgICAgICB9Ki9cbiAgICBdXG59XG5cblxuZnVuY3Rpb24gcmVkdWNlcihzdGF0ZSA9IGluaWNpYWxTdGF0ZSwgYWN0aW9uKSB7XG4gICAgc3dpdGNoIChhY3Rpb24udHlwZSkge1xuICAgICAgICBjYXNlICdTRVRfVVNFUic6XG4gICAgICAgICAgICByZXR1cm4gc2V0VXNlcihzdGF0ZSwgYWN0aW9uKVxuICAgICAgICBjYXNlICdBRERfTk9URSc6XG4gICAgICAgICAgICByZXR1cm4gYWRkTm90ZShzdGF0ZSwgYWN0aW9uKVxuICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgcmV0dXJuIHN0YXRlXG4gICAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVTdG9yZShyZWR1Y2VyKSIsIlxuZXhwb3J0IGZ1bmN0aW9uIHNldFVzZXIoc3RhdGUsIGFjdGlvbikge1xuICAgIGNvbnN0IGNvcHlTdGF0ZSA9IHsuLi5zdGF0ZX1cbiAgICBjb25zdCBjb3B5VXNlciA9IHsuLi5jb3B5U3RhdGUudXNlcn1cbiAgICBcbiAgICBjb3B5VXNlci5uYW1lID0gYWN0aW9uLm5hbWVcbiAgICBjb3B5VXNlci5lbWFpbCA9IGFjdGlvbi5lbWFpbFxuICAgIFxuICAgIGNvcHlTdGF0ZS51c2VyID0gY29weVVzZXJcbiAgICBcbiAgICByZXR1cm4gY29weVN0YXRlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGROb3RlKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBjb25zdCBjb3B5U3RhdGUgPSB7Li4uc3RhdGV9XG4gICAgY29uc3QgY29weU5vdGVzID0gWy4uLmNvcHlTdGF0ZS5ub3Rlc11cbiAgICBcbiAgICBjb25zdCBuZXdOb3RlID0ge1xuICAgICAgICB0ZXh0OiBhY3Rpb24udGV4dCxcbiAgICAgICAgaW1wb3J0YW50OiBmYWxzZVxuICAgIH1cbiAgICBcbiAgICBjb3B5Tm90ZXMudW5zaGlmdChuZXdOb3RlKVxuICAgIFxuICAgIGNvcHlTdGF0ZS5ub3RlcyA9IGNvcHlOb3Rlc1xuICAgIFxuICAgIHJldHVybiBjb3B5U3RhdGVcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBjcmVhdGVOYW1lZENvbnRleHQgZnJvbSBcIi4vY3JlYXRlTmFtZUNvbnRleHRcIjtcblxuY29uc3QgaGlzdG9yeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuZXhwb3J0IGRlZmF1bHQgaGlzdG9yeUNvbnRleHQ7XG4iLCIvLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tIFwibWluaS1jcmVhdGUtcmVhY3QtY29udGV4dFwiO1xuXG5jb25zdCBjcmVhdGVOYW1lZENvbnRleHQgPSBuYW1lID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVOYW1lZENvbnRleHQ7XG4iLCIvLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tIFwibWluaS1jcmVhdGUtcmVhY3QtY29udGV4dFwiO1xuXG5jb25zdCBjcmVhdGVOYW1lZENvbnRleHQgPSBuYW1lID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5jb25zdCBjb250ZXh0ID0gLyojX19QVVJFX18qLyBjcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5leHBvcnQgZGVmYXVsdCBjb250ZXh0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgSGlzdG9yeUNvbnRleHQgZnJvbSBcIi4vSGlzdG9yeUNvbnRleHQuanNcIjtcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cbmNsYXNzIFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHsgcGF0aDogXCIvXCIsIHVybDogXCIvXCIsIHBhcmFtczoge30sIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIiB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICB0aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4obG9jYXRpb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb24gfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8SGlzdG9yeUNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmhpc3Rvcnl9XG4gICAgICAgIC8+XG4gICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5jbGFzcyBNZW1vcnlSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh0aGlzLnByb3BzKTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17dGhpcy5oaXN0b3J5fSBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArXG4gICAgICAgIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY2xhc3MgTGlmZWN5Y2xlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpZmVjeWNsZTtcbiIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG5cbiAgY29uc3QgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCA9IFwiL1wiLCBwYXJhbXMgPSB7fSkge1xuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBMaWZlY3ljbGUgZnJvbSBcIi4vTGlmZWN5Y2xlLmpzXCI7XG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gUmVkaXJlY3QoeyBjb21wdXRlZE1hdGNoLCB0bywgcHVzaCA9IGZhbHNlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgIGNvbnN0IHsgaGlzdG9yeSwgc3RhdGljQ29udGV4dCB9ID0gY29udGV4dDtcblxuICAgICAgICBjb25zdCBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFxuICAgICAgICAgIGNvbXB1dGVkTWF0Y2hcbiAgICAgICAgICAgID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAuLi50byxcbiAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdG9cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgICAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cbiAgICAgICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TGlmZWN5Y2xlXG4gICAgICAgICAgICBvbk1vdW50PXsoKSA9PiB7XG4gICAgICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25VcGRhdGU9eyhzZWxmLCBwcmV2UHJvcHMpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIHtcbiAgICAgICAgICAgICAgICAgIC4uLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHRvPXt0b31cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICk7XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDtcbiIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHtvcHRpb25zLmVuZH0ke29wdGlvbnMuc3RyaWN0fSR7b3B0aW9ucy5zZW5zaXRpdmV9YDtcbiAgY29uc3QgcGF0aENhY2hlID0gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcblxuICBjb25zdCBrZXlzID0gW107XG4gIGNvbnN0IHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgY29uc3QgcmVzdWx0ID0geyByZWdleHAsIGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuICB9XG5cbiAgY29uc3QgeyBwYXRoLCBleGFjdCA9IGZhbHNlLCBzdHJpY3QgPSBmYWxzZSwgc2Vuc2l0aXZlID0gZmFsc2UgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG5cbiAgcmV0dXJuIHBhdGhzLnJlZHVjZSgobWF0Y2hlZCwgcGF0aCkgPT4ge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICBjb25zdCB7IHJlZ2V4cCwga2V5cyB9ID0gY29tcGlsZVBhdGgocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZVxuICAgIH0pO1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBbdXJsLCAuLi52YWx1ZXNdID0gbWF0Y2g7XG4gICAgY29uc3QgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKChtZW1vLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSBcInJlYWN0LWlzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICBjb25zdCB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcblxuICB3YXJuaW5nKFxuICAgIHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArXG4gICAgICBgPFJvdXRlJHtwYXRoID8gYCBwYXRoPVwiJHtwYXRofVwiYCA6IFwiXCJ9PiwgYnV0IHlvdSBgICtcbiAgICAgIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiXG4gICk7XG5cbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuY2xhc3MgUm91dGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2hcbiAgICAgICAgICAgID8gdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgICAgICAgOiB0aGlzLnByb3BzLnBhdGhcbiAgICAgICAgICAgID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB0aGlzLnByb3BzKVxuICAgICAgICAgICAgOiBjb250ZXh0Lm1hdGNoO1xuXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSB7IC4uLmNvbnRleHQsIGxvY2F0aW9uLCBtYXRjaCB9O1xuXG4gICAgICAgICAgbGV0IHsgY2hpbGRyZW4sIGNvbXBvbmVudCwgcmVuZGVyIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgICAgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Um91dGVyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17cHJvcHN9PlxuICAgICAgICAgICAgICB7cHJvcHMubWF0Y2hcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgID8gX19ERVZfX1xuICAgICAgICAgICAgICAgICAgICAgID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgdGhpcy5wcm9wcy5wYXRoKVxuICAgICAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW4ocHJvcHMpXG4gICAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgIDogY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcylcbiAgICAgICAgICAgICAgICAgIDogcmVuZGVyXG4gICAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcylcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICA/IF9fREVWX19cbiAgICAgICAgICAgICAgICAgID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgdGhpcy5wcm9wcy5wYXRoKVxuICAgICAgICAgICAgICAgICAgOiBjaGlsZHJlbihwcm9wcylcbiAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiAocHJvcHMsIHByb3BOYW1lKSA9PiB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXG4gICAgXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIShcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJlxuICAgICAgICAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmXG4gICAgICAgIHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICApLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuICYmXG4gICAgICAgICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5yZW5kZXJcbiAgICAgICksXG4gICAgICBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCJcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIlxuICAgICk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uKHByZXZQcm9wcykge1xuICAgIHdhcm5pbmcoXG4gICAgICAhKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksXG4gICAgICAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgY3JlYXRlUGF0aCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlci5qc1wiO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4ge1xuICAgIC4uLmxvY2F0aW9uLFxuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIGNvbnN0IGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5sb2NhdGlvbixcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cbmNsYXNzIFN0YXRpY1JvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIGNvbnN0IHsgYmFzZW5hbWUgPSBcIlwiLCBjb250ZXh0ID0ge30gfSA9IHRoaXMucHJvcHM7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9XG5cbiAgaGFuZGxlUHVzaCA9IGxvY2F0aW9uID0+IHRoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICBoYW5kbGVSZXBsYWNlID0gbG9jYXRpb24gPT4gdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gIGhhbmRsZUxpc3RlbiA9ICgpID0+IG5vb3A7XG4gIGhhbmRsZUJsb2NrID0gKCkgPT4gbm9vcDtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBiYXNlbmFtZSA9IFwiXCIsIGNvbnRleHQgPSB7fSwgbG9jYXRpb24gPSBcIi9cIiwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBwYXRoID0+IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSksXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIDxSb3V0ZXIgey4uLnJlc3R9IGhpc3Rvcnk9e2hpc3Rvcnl9IHN0YXRpY0NvbnRleHQ9e2NvbnRleHR9IC8+O1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArXG4gICAgICAgIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cbmNsYXNzIFN3aXRjaCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG5cbiAgICAgICAgICBsZXQgZWxlbWVudCwgbWF0Y2g7XG5cbiAgICAgICAgICAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG4gICAgICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh0aGlzLnByb3BzLmNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG5cbiAgICAgICAgICAgICAgbWF0Y2ggPSBwYXRoXG4gICAgICAgICAgICAgICAgPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgLi4uY2hpbGQucHJvcHMsIHBhdGggfSlcbiAgICAgICAgICAgICAgICA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgICAgID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHsgbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBIaXN0b3J5Q29udGV4dCBmcm9tIFwiLi9IaXN0b3J5Q29udGV4dC5qc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGguanNcIjtcblxuY29uc3QgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChIaXN0b3J5Q29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KENvbnRleHQpLmxvY2F0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gdXNlQ29udGV4dChDb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCJcbiAgICApO1xuICB9XG5cbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBtYXRjaCA9IHVzZUNvbnRleHQoQ29udGV4dCkubWF0Y2g7XG5cbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuY2xhc3MgQnJvd3NlclJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuY2xhc3MgSGFzaFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjtcbiIsImltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxuZXhwb3J0IGNvbnN0IHJlc29sdmVUb0xvY2F0aW9uID0gKHRvLCBjdXJyZW50TG9jYXRpb24pID0+XG4gIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplVG9Mb2NhdGlvbiA9ICh0bywgY3VycmVudExvY2F0aW9uKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCJcbiAgICA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pXG4gICAgOiB0bztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQge1xuICByZXNvbHZlVG9Mb2NhdGlvbixcbiAgbm9ybWFsaXplVG9Mb2NhdGlvblxufSBmcm9tIFwiLi91dGlscy9sb2NhdGlvblV0aWxzLmpzXCI7XG5cbi8vIFJlYWN0IDE1IGNvbXBhdFxuY29uc3QgZm9yd2FyZFJlZlNoaW0gPSBDID0+IEM7XG5sZXQgeyBmb3J3YXJkUmVmIH0gPSBSZWFjdDtcbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbmNvbnN0IExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKFxuICAoXG4gICAge1xuICAgICAgaW5uZXJSZWYsIC8vIFRPRE86IGRlcHJlY2F0ZVxuICAgICAgbmF2aWdhdGUsXG4gICAgICBvbkNsaWNrLFxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSByZXN0O1xuXG4gICAgbGV0IHByb3BzID0ge1xuICAgICAgLi4ucmVzdCxcbiAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgICAgICghdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuICAgIHJldHVybiA8YSB7Li4ucHJvcHN9IC8+O1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gZm9yd2FyZFJlZihcbiAgKFxuICAgIHtcbiAgICAgIGNvbXBvbmVudCA9IExpbmtBbmNob3IsXG4gICAgICByZXBsYWNlLFxuICAgICAgdG8sXG4gICAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCB7IGhpc3RvcnkgfSA9IGNvbnRleHQ7XG5cbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24oXG4gICAgICAgICAgICByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksXG4gICAgICAgICAgICBjb250ZXh0LmxvY2F0aW9uXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuICAgICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG5cbiAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gUmVhY3QgMTUgY29tcGF0XG4gICAgICAgICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICAgICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgY29uc3QgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgIFByb3BUeXBlcy5mdW5jXG4gIF0pO1xuICBjb25zdCByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoeyBjdXJyZW50OiBQcm9wVHlwZXMuYW55IH0pXG4gIF0pO1xuXG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcblxuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbms7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmsuanNcIjtcbmltcG9ydCB7XG4gIHJlc29sdmVUb0xvY2F0aW9uLFxuICBub3JtYWxpemVUb0xvY2F0aW9uXG59IGZyb20gXCIuL3V0aWxzL2xvY2F0aW9uVXRpbHMuanNcIjtcblxuLy8gUmVhY3QgMTUgY29tcGF0XG5jb25zdCBmb3J3YXJkUmVmU2hpbSA9IEMgPT4gQztcbmxldCB7IGZvcndhcmRSZWYgfSA9IFJlYWN0O1xuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoLi4uY2xhc3NuYW1lcykge1xuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoaSA9PiBpKS5qb2luKFwiIFwiKTtcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCA9IFwicGFnZVwiLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gXCJhY3RpdmVcIixcbiAgICAgIGFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wLFxuICAgICAgZXhhY3QsXG4gICAgICBpc0FjdGl2ZTogaXNBY3RpdmVQcm9wLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICAgIHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCxcbiAgICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgICB0byxcbiAgICAgIGlubmVyUmVmLCAvLyBUT0RPOiBkZXByZWNhdGVcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIGZvcndhcmRlZFJlZlxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgICAgIGNvbnN0IHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKFxuICAgICAgICAgICAgcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb25cbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWU6IHBhdGggfSA9IHRvTG9jYXRpb247XG4gICAgICAgICAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgICAgICAgICBjb25zdCBlc2NhcGVkUGF0aCA9XG4gICAgICAgICAgICBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVkUGF0aFxuICAgICAgICAgICAgPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICAgICAgICAgICAgZXhhY3QsXG4gICAgICAgICAgICAgICAgc2Vuc2l0aXZlLFxuICAgICAgICAgICAgICAgIHN0cmljdFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wXG4gICAgICAgICAgICA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKVxuICAgICAgICAgICAgOiBtYXRjaCk7XG5cbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBpc0FjdGl2ZVxuICAgICAgICAgICAgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpXG4gICAgICAgICAgICA6IGNsYXNzTmFtZVByb3A7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSBpc0FjdGl2ZSA/IHsgLi4uc3R5bGVQcm9wLCAuLi5hY3RpdmVTdHlsZSB9IDogc3R5bGVQcm9wO1xuXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBcImFyaWEtY3VycmVudFwiOiAoaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQpIHx8IG51bGwsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIHRvOiB0b0xvY2F0aW9uLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICAgICAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgICAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gPExpbmsgey4uLnByb3BzfSAvPjtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG5cbiAgY29uc3QgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcbiAgICBcInBhZ2VcIixcbiAgICBcInN0ZXBcIixcbiAgICBcImxvY2F0aW9uXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJ0aW1lXCIsXG4gICAgXCJ0cnVlXCJcbiAgXSk7XG5cbiAgTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gICAgLi4uTGluay5wcm9wVHlwZXMsXG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluaztcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7UmVkaXJlY3R9IGZyb20gJ3JlYWN0LXJvdXRlci1kb20nXG5pbXBvcnQge3VzZVNlbGVjdG9yfSBmcm9tIFwicmVhY3QtcmVkdXhcIjtcblxuXG5mdW5jdGlvbiBNYWluUGFnZSgpIHtcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0YMg0LjQvNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgIGNvbnN0IHtuYW1lfSA9IHVzZVNlbGVjdG9yKHN0b3JlID0+IHN0b3JlLnVzZXIpXG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0LjQvNC10L3QuCDQvdC10YIsINGC0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINC10YnQtSDQvdC1INCy0L7RiNGR0LssINC/0LXRgNC10L3QsNC/0YDQsNCy0LjRgtGMINC90LAg0YHRgtGA0LDQvdC40YbRgyDQstGF0L7QtNCwXG4gICAgaWYoIW5hbWUpIHtcbiAgICAgICAgcmV0dXJuIDxSZWRpcmVjdCB0bz0nL2VudGVyJyAvPlxuICAgICAgICBcbiAgICB9XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0LjQvNGPINC10YHRgtGMLCDQt9C90LDRh9C40YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GMINCy0L7RiNGR0LsuINCf0LXRgNC10L3QsNC/0YDQsNCy0LjRgtGMINC90LAg0YHRgtGA0LDQvdC40YbRgyDQt9Cw0LzQtdGC0L7QulxuICAgIHJldHVybiA8UmVkaXJlY3QgdG89Jy9ub3RlcycgLz5cbiAgICAvLyByZXR1cm4gJ0luZGV4UGFnZSdcbn1cblxuZXhwb3J0IGRlZmF1bHQgTWFpblBhZ2UiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCAnLi9jc3MvYnV0dG9uLnNjc3MnXG5pbXBvcnQgJy4vY3NzL3NwaW5uZXIuc2NzcydcblxuXG5mdW5jdGlvbiBCdXR0b24ocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHRleHQgPSBgVGV4dCBkaWRuJ3QgcGFzc2AsIC8vINCi0LXQutGB0YIg0L3QsCDQutC90L7Qv9C60LVcbiAgICAgICAgaSxcbiAgICAgICAgY291bnRlciwgLy8g0KHRh9GR0YLRh9C40Log0L3QsCDQutC90L7Qv9C60LVcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSwgLy8g0JfQsNCx0LvQvtC60LjRgNC+0LLQsNC90LAg0LvQuCDQutC90L7Qv9C60LBcbiAgICB9ID0gcHJvcHNcbiAgICBcbiAgICBjb25zdCBhdHRycyA9IHt9XG4gICAgXG4gICAgLy8g0KLQuNC/INC60L3QvtC/0LrQuFxuICAgIGF0dHJzLnR5cGUgPSBwcm9wcy50eXBlID8gcHJvcHMudHlwZSA6ICdidXR0b24nXG4gICAgaWYocHJvcHMuaHJlZikgZGVsZXRlIGF0dHJzLnR5cGVcbiAgICBcbiAgICAvLyDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQu9Cw0YHRgdC+0LJcbiAgICBsZXQgY2xzID0gJ2J0bidcbiAgICBpZihwcm9wcy5tb2RlMSkgY2xzICs9ICcgYnRuLS1tb2RlLTEnXG4gICAgaWYocHJvcHMubW9kZTIpIGNscyArPSAnIGJ0bi0tbW9kZS0yJ1xuICAgIGF0dHJzLmNsYXNzTmFtZSA9IGNsc1xuICAgIFxuICAgIC8vINCQ0YLRgtGA0LjQsdGD0YIgaHJlZlxuICAgIGlmKHByb3BzLmhyZWYpIGF0dHJzLnRvID0gcHJvcHMuaHJlZlxuICAgIFxuICAgIC8vINCQ0YLRgtGA0LjQsdGD0YIgZGlzYWJsZWRcbiAgICBpZihkaXNhYmxlZCkgYXR0cnMuZGlzYWJsZWQgPSB0cnVlXG4gICAgXG4gICAgaWYoaSkgYXR0cnMua2V5ID0gaVxuICAgIFxuICAgIC8vINCa0L7QvdGC0LXQvdGCXG4gICAgY29uc3Qgc2lnbkVsID0gY3JlYXRlU2lnbihwcm9wcy5zaWduKVxuICAgIGNvbnN0IGNvdW50ZXJFbCA9IDxzcGFuIGNsYXNzTmFtZT0nYnRuX19jb3VudGVyJyBrZXk9J2InPntjb3VudGVyfTwvc3Bhbj5cbiAgICBjb25zdCBpbm5lckNvbnRlbnQgPSBbc2lnbkVsLCB0ZXh0LCBjb3VudGVyRWxdXG4gICAgXG4gICAgXG4gICAgcmV0dXJuICBwcm9wcy50YWcgPT09ICdhJ1xuICAgICAgICA/IDxMaW5rIHsuLi5hdHRyc30+e2lubmVyQ29udGVudH08L0xpbms+XG4gICAgICAgIDogPGJ1dHRvbiB7Li4uYXR0cnN9Pntpbm5lckNvbnRlbnR9PC9idXR0b24+XG59XG5cbi8vIHR5cGUg4oCULSDQt9C90LDRh9GR0Log0L3QsCDQutC90L7Qv9C60LUuINCX0L3QsNGH0LXQvdC40Y86IHBlcnNvbiwgZXhpdCwgY2hlY2stYWxsLCBzdW4sIGNsb3NlLCBzcGlubmVyXG5mdW5jdGlvbiBjcmVhdGVTaWduKHR5cGUpIHtcbiAgICBpZighdHlwZSkgcmV0dXJuIG51bGxcbiAgICBpZih0eXBlID09PSAnc3Bpbm5lcicpIHJldHVybiBjcmVhdGVTcGlubmVyKClcbiAgICBcbiAgICBsZXQgY2xzID0gJ2J0bl9fc2lnbiAnO1xuICAgIFxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdwZXJzb24nOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLXBlcnNvbidcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2V4aXQnOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLWV4aXQnXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdjaGVjay1hbGwnOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLWNoZWNrLWFsbCdcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3N1bic6XG4gICAgICAgICAgICBjbHMgKz0gJ2J0bl9fc2lnbi0tc3VuJ1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnY2xvc2UnOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLWNsb3NlJ1xuICAgICAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17Y2xzfSBrZXk9J2EnIC8+XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwaW5uZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2J0blNwaW5uZXJXcmFwcGVyJyBrZXk9J2gnPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2J0blNwaW5uZXInPlxuICAgICAgICAgICAgICAgIDxkaXYgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi9idXR0b24nXG5leHBvcnQgZGVmYXVsdCBCdXR0b24iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9mb3JtRWxlbWVudHMvYnV0dG9uXCI7XG5pbXBvcnQgcyBmcm9tICcuL2Nzcy90b3BOYXZpZ2F0aW9uLnNjc3MnXG5cbmltcG9ydCB7IHVzZVJvdXRlTWF0Y2ggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5cbmZ1bmN0aW9uIFRvcE5hdkVudHJhbmNlKCkge1xuICAgIGNvbnN0IHJlZ0J0biA9ICAgPFRvcE5hdkxpbmsgdG89Jy9yZWcnIGxhYmVsPSdTaWduIHVwJyBpPScxJyAvPlxuICAgIGNvbnN0IGVudGVyQnRuID0gPFRvcE5hdkxpbmsgdG89Jy9lbnRlcicgbGFiZWw9J0xvZyBpbicgaT0nMicgLz5cbiAgICBcbiAgICByZXR1cm4gPG5hdiBjbGFzc05hbWU9e3Mud3JhcHBlcn0+XG4gICAgICAgIHtlbnRlckJ0bn1cbiAgICAgICAge3JlZ0J0bn1cbiAgICA8L25hdj5cbn1cblxuXG5mdW5jdGlvbiBUb3BOYXZMaW5rKHsgbGFiZWwsIHRvLCBpIH0pIHtcbiAgICBsZXQgbWF0Y2ggPSB1c2VSb3V0ZU1hdGNoKHtcbiAgICAgICAgcGF0aDogdG9cbiAgICB9KTtcbiAgICBcbiAgICBpZihtYXRjaCkge1xuICAgICAgICByZXR1cm4gPEJ1dHRvbiB0YWc9J2EnIGhyZWY9e3RvfSB0ZXh0PXtsYWJlbH0gaT17aX0gLz5cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIDxCdXR0b24gdGFnPSdhJyBocmVmPXt0b30gdGV4dD17bGFiZWx9IG1vZGUxPXt0cnVlfSBpPXtpfSAvPlxufVxuXG5leHBvcnQgZGVmYXVsdCBUb3BOYXZFbnRyYW5jZSIsImltcG9ydCBUb3BOYXZpZ2F0aW9uIGZyb20gJy4vdG9wTmF2RW50cmFuY2UnXG5leHBvcnQgZGVmYXVsdCBUb3BOYXZpZ2F0aW9uIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHMgZnJvbSAnLi9jc3MvYXV0aFNwbGl0Q29udGFpbmVyLnNjc3MnXG5cblxuZnVuY3Rpb24gQXV0aFNwbGl0Q29udGFpbmVyKHtjaGlsZHJlbn0pIHtcbiAgICBcbiAgICBcbiAgICByZXR1cm4gPHNlY3Rpb24gY2xhc3NOYW1lPXtzLndyYXBwZXJ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cy5sZWZ0UGFydH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3MucmlnaHRQYXJ0fT5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxufVxuXG5leHBvcnQgZGVmYXVsdCBBdXRoU3BsaXRDb250YWluZXIiLCJpbXBvcnQgQXV0aFNwbGl0Q29udGFpbmVyIGZyb20gJy4vYXV0aFNwbGl0Q29udGFpbmVyJ1xuZXhwb3J0IGRlZmF1bHQgQXV0aFNwbGl0Q29udGFpbmVyIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFRvcE5hdmlnYXRpb24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdG9wTmF2RW50cmFuY2VcIjtcbmltcG9ydCBBdXRoU3BsaXRDb250YWluZXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvY29udGFpbmVycy9hdXRoU3BsaXRDb250YWluZXJcIjtcblxuXG5cbmZ1bmN0aW9uIFJlZ1BhZ2UoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUb3BOYXZpZ2F0aW9uIC8+XG4gICAgICAgICAgICA8QXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIFJlZ1xuICAgICAgICAgICAgPC9BdXRoU3BsaXRDb250YWluZXI+XG4gICAgICAgIDwvPlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUmVnUGFnZSIsInZhciBpc01lcmdlYWJsZU9iamVjdCA9IGZ1bmN0aW9uIGlzTWVyZ2VhYmxlT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiBpc05vbk51bGxPYmplY3QodmFsdWUpXG5cdFx0JiYgIWlzU3BlY2lhbCh2YWx1ZSlcbn07XG5cbmZ1bmN0aW9uIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSkge1xuXHRyZXR1cm4gISF2YWx1ZSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnXG59XG5cbmZ1bmN0aW9uIGlzU3BlY2lhbCh2YWx1ZSkge1xuXHR2YXIgc3RyaW5nVmFsdWUgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpO1xuXG5cdHJldHVybiBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcblx0XHR8fCBzdHJpbmdWYWx1ZSA9PT0gJ1tvYmplY3QgRGF0ZV0nXG5cdFx0fHwgaXNSZWFjdEVsZW1lbnQodmFsdWUpXG59XG5cbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QvYmxvYi9iNWFjOTYzZmI3OTFkMTI5OGU3ZjM5NjIzNjM4M2JjOTU1ZjkxNmMxL3NyYy9pc29tb3JwaGljL2NsYXNzaWMvZWxlbWVudC9SZWFjdEVsZW1lbnQuanMjTDIxLUwyNVxudmFyIGNhblVzZVN5bWJvbCA9IHR5cGVvZiBTeW1ib2wgPT09ICdmdW5jdGlvbicgJiYgU3ltYm9sLmZvcjtcbnZhciBSRUFDVF9FTEVNRU5UX1RZUEUgPSBjYW5Vc2VTeW1ib2wgPyBTeW1ib2wuZm9yKCdyZWFjdC5lbGVtZW50JykgOiAweGVhYzc7XG5cbmZ1bmN0aW9uIGlzUmVhY3RFbGVtZW50KHZhbHVlKSB7XG5cdHJldHVybiB2YWx1ZS4kJHR5cGVvZiA9PT0gUkVBQ1RfRUxFTUVOVF9UWVBFXG59XG5cbmZ1bmN0aW9uIGVtcHR5VGFyZ2V0KHZhbCkge1xuXHRyZXR1cm4gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fVxufVxuXG5mdW5jdGlvbiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZCh2YWx1ZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gKG9wdGlvbnMuY2xvbmUgIT09IGZhbHNlICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QodmFsdWUpKVxuXHRcdD8gZGVlcG1lcmdlKGVtcHR5VGFyZ2V0KHZhbHVlKSwgdmFsdWUsIG9wdGlvbnMpXG5cdFx0OiB2YWx1ZVxufVxuXG5mdW5jdGlvbiBkZWZhdWx0QXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucykge1xuXHRyZXR1cm4gdGFyZ2V0LmNvbmNhdChzb3VyY2UpLm1hcChmdW5jdGlvbihlbGVtZW50KSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKGVsZW1lbnQsIG9wdGlvbnMpXG5cdH0pXG59XG5cbmZ1bmN0aW9uIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHZhciBkZXN0aW5hdGlvbiA9IHt9O1xuXHRpZiAob3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh0YXJnZXQpKSB7XG5cdFx0T2JqZWN0LmtleXModGFyZ2V0KS5mb3JFYWNoKGZ1bmN0aW9uKGtleSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHRhcmdldFtrZXldLCBvcHRpb25zKTtcblx0XHR9KTtcblx0fVxuXHRPYmplY3Qua2V5cyhzb3VyY2UpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0aWYgKCFvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHNvdXJjZVtrZXldKSB8fCAhdGFyZ2V0W2tleV0pIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2Vba2V5XSwgb3B0aW9ucyk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRlc3RpbmF0aW9uW2tleV0gPSBkZWVwbWVyZ2UodGFyZ2V0W2tleV0sIHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9XG5cdH0pO1xuXHRyZXR1cm4gZGVzdGluYXRpb25cbn1cblxuZnVuY3Rpb24gZGVlcG1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXHRvcHRpb25zLmFycmF5TWVyZ2UgPSBvcHRpb25zLmFycmF5TWVyZ2UgfHwgZGVmYXVsdEFycmF5TWVyZ2U7XG5cdG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgPSBvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0IHx8IGlzTWVyZ2VhYmxlT2JqZWN0O1xuXG5cdHZhciBzb3VyY2VJc0FycmF5ID0gQXJyYXkuaXNBcnJheShzb3VyY2UpO1xuXHR2YXIgdGFyZ2V0SXNBcnJheSA9IEFycmF5LmlzQXJyYXkodGFyZ2V0KTtcblx0dmFyIHNvdXJjZUFuZFRhcmdldFR5cGVzTWF0Y2ggPSBzb3VyY2VJc0FycmF5ID09PSB0YXJnZXRJc0FycmF5O1xuXG5cdGlmICghc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCkge1xuXHRcdHJldHVybiBjbG9uZVVubGVzc090aGVyd2lzZVNwZWNpZmllZChzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSBpZiAoc291cmNlSXNBcnJheSkge1xuXHRcdHJldHVybiBvcHRpb25zLmFycmF5TWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH0gZWxzZSB7XG5cdFx0cmV0dXJuIG1lcmdlT2JqZWN0KHRhcmdldCwgc291cmNlLCBvcHRpb25zKVxuXHR9XG59XG5cbmRlZXBtZXJnZS5hbGwgPSBmdW5jdGlvbiBkZWVwbWVyZ2VBbGwoYXJyYXksIG9wdGlvbnMpIHtcblx0aWYgKCFBcnJheS5pc0FycmF5KGFycmF5KSkge1xuXHRcdHRocm93IG5ldyBFcnJvcignZmlyc3QgYXJndW1lbnQgc2hvdWxkIGJlIGFuIGFycmF5Jylcblx0fVxuXG5cdHJldHVybiBhcnJheS5yZWR1Y2UoZnVuY3Rpb24ocHJldiwgbmV4dCkge1xuXHRcdHJldHVybiBkZWVwbWVyZ2UocHJldiwgbmV4dCwgb3B0aW9ucylcblx0fSwge30pXG59O1xuXG52YXIgZGVlcG1lcmdlXzEgPSBkZWVwbWVyZ2U7XG5cbmV4cG9ydCBkZWZhdWx0IGRlZXBtZXJnZV8xO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5leHBvcnQgZGVmYXVsdCBTeW1ib2w7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVXNlZCB0byByZXNvbHZlIHRoZVxuICogW2B0b1N0cmluZ1RhZ2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5wcm90b3R5cGUudG9zdHJpbmcpXG4gKiBvZiB2YWx1ZXMuXG4gKi9cbnZhciBuYXRpdmVPYmplY3RUb1N0cmluZyA9IG9iamVjdFByb3RvLnRvU3RyaW5nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1Ub1N0cmluZ1RhZyA9IFN5bWJvbCA/IFN5bWJvbC50b1N0cmluZ1RhZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VHZXRUYWdgIHdoaWNoIGlnbm9yZXMgYFN5bWJvbC50b1N0cmluZ1RhZ2AgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHJhdyBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBnZXRSYXdUYWcodmFsdWUpIHtcbiAgdmFyIGlzT3duID0gaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgc3ltVG9TdHJpbmdUYWcpLFxuICAgICAgdGFnID0gdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuXG4gIHRyeSB7XG4gICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdW5kZWZpbmVkO1xuICAgIHZhciB1bm1hc2tlZCA9IHRydWU7XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgdmFyIHJlc3VsdCA9IG5hdGl2ZU9iamVjdFRvU3RyaW5nLmNhbGwodmFsdWUpO1xuICBpZiAodW5tYXNrZWQpIHtcbiAgICBpZiAoaXNPd24pIHtcbiAgICAgIHZhbHVlW3N5bVRvU3RyaW5nVGFnXSA9IHRhZztcbiAgICB9IGVsc2Uge1xuICAgICAgZGVsZXRlIHZhbHVlW3N5bVRvU3RyaW5nVGFnXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0UmF3VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKlxuICogQ29udmVydHMgYHZhbHVlYCB0byBhIHN0cmluZyB1c2luZyBgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZ2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBvYmplY3RUb1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG9iamVjdFRvU3RyaW5nO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGdldFJhd1RhZyBmcm9tICcuL19nZXRSYXdUYWcuanMnO1xuaW1wb3J0IG9iamVjdFRvU3RyaW5nIGZyb20gJy4vX29iamVjdFRvU3RyaW5nLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG51bGxUYWcgPSAnW29iamVjdCBOdWxsXScsXG4gICAgdW5kZWZpbmVkVGFnID0gJ1tvYmplY3QgVW5kZWZpbmVkXSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRUYWdgIHdpdGhvdXQgZmFsbGJhY2tzIGZvciBidWdneSBlbnZpcm9ubWVudHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUdldFRhZyh2YWx1ZSkge1xuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gdW5kZWZpbmVkID8gdW5kZWZpbmVkVGFnIDogbnVsbFRhZztcbiAgfVxuICByZXR1cm4gKHN5bVRvU3RyaW5nVGFnICYmIHN5bVRvU3RyaW5nVGFnIGluIE9iamVjdCh2YWx1ZSkpXG4gICAgPyBnZXRSYXdUYWcodmFsdWUpXG4gICAgOiBvYmplY3RUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRUYWc7XG4iLCIvKipcbiAqIENyZWF0ZXMgYSB1bmFyeSBmdW5jdGlvbiB0aGF0IGludm9rZXMgYGZ1bmNgIHdpdGggaXRzIGFyZ3VtZW50IHRyYW5zZm9ybWVkLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB3cmFwLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gdHJhbnNmb3JtIFRoZSBhcmd1bWVudCB0cmFuc2Zvcm0uXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gb3ZlckFyZyhmdW5jLCB0cmFuc2Zvcm0pIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGFyZykge1xuICAgIHJldHVybiBmdW5jKHRyYW5zZm9ybShhcmcpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb3ZlckFyZztcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBnZXRQcm90b3R5cGUgPSBvdmVyQXJnKE9iamVjdC5nZXRQcm90b3R5cGVPZiwgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0UHJvdG90eXBlO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZS4gQSB2YWx1ZSBpcyBvYmplY3QtbGlrZSBpZiBpdCdzIG5vdCBgbnVsbGBcbiAqIGFuZCBoYXMgYSBgdHlwZW9mYCByZXN1bHQgb2YgXCJvYmplY3RcIi5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBvYmplY3QtbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZSh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShfLm5vb3ApO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB0eXBlb2YgdmFsdWUgPT0gJ29iamVjdCc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzT2JqZWN0TGlrZTtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGluZmVyIHRoZSBgT2JqZWN0YCBjb25zdHJ1Y3Rvci4gKi9cbnZhciBvYmplY3RDdG9yU3RyaW5nID0gZnVuY1RvU3RyaW5nLmNhbGwoT2JqZWN0KTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgdGhhdCBpcywgYW4gb2JqZWN0IGNyZWF0ZWQgYnkgdGhlXG4gKiBgT2JqZWN0YCBjb25zdHJ1Y3RvciBvciBvbmUgd2l0aCBhIGBbW1Byb3RvdHlwZV1dYCBvZiBgbnVsbGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjguMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwbGFpbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogfVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChuZXcgRm9vKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdCh7ICd4JzogMCwgJ3knOiAwIH0pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNQbGFpbk9iamVjdChPYmplY3QuY3JlYXRlKG51bGwpKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdCh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgfHwgYmFzZUdldFRhZyh2YWx1ZSkgIT0gb2JqZWN0VGFnKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBwcm90byA9IGdldFByb3RvdHlwZSh2YWx1ZSk7XG4gIGlmIChwcm90byA9PT0gbnVsbCkge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIHZhciBDdG9yID0gaGFzT3duUHJvcGVydHkuY2FsbChwcm90bywgJ2NvbnN0cnVjdG9yJykgJiYgcHJvdG8uY29uc3RydWN0b3I7XG4gIHJldHVybiB0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IgaW5zdGFuY2VvZiBDdG9yICYmXG4gICAgZnVuY1RvU3RyaW5nLmNhbGwoQ3RvcikgPT0gb2JqZWN0Q3RvclN0cmluZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNQbGFpbk9iamVjdDtcbiIsIi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbGlzdCBjYWNoZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBbXTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIFBlcmZvcm1zIGFcbiAqIFtgU2FtZVZhbHVlWmVyb2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXNhbWV2YWx1ZXplcm8pXG4gKiBjb21wYXJpc29uIGJldHdlZW4gdHdvIHZhbHVlcyB0byBkZXRlcm1pbmUgaWYgdGhleSBhcmUgZXF1aXZhbGVudC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIHZhbHVlcyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqIHZhciBvdGhlciA9IHsgJ2EnOiAxIH07XG4gKlxuICogXy5lcShvYmplY3QsIG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcShvYmplY3QsIG90aGVyKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcSgnYScsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5lcSgnYScsIE9iamVjdCgnYScpKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5lcShOYU4sIE5hTik7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGVxKHZhbHVlLCBvdGhlcikge1xuICByZXR1cm4gdmFsdWUgPT09IG90aGVyIHx8ICh2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXE7XG4iLCJpbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgaW5kZXggYXQgd2hpY2ggdGhlIGBrZXlgIGlzIGZvdW5kIGluIGBhcnJheWAgb2Yga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7Kn0ga2V5IFRoZSBrZXkgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIGluZGV4IG9mIHRoZSBtYXRjaGVkIHZhbHVlLCBlbHNlIGAtMWAuXG4gKi9cbmZ1bmN0aW9uIGFzc29jSW5kZXhPZihhcnJheSwga2V5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIGlmIChlcShhcnJheVtsZW5ndGhdWzBdLCBrZXkpKSB7XG4gICAgICByZXR1cm4gbGVuZ3RoO1xuICAgIH1cbiAgfVxuICByZXR1cm4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc29jSW5kZXhPZjtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHNwbGljZSA9IGFycmF5UHJvdG8uc3BsaWNlO1xuXG4vKipcbiAqIFJlbW92ZXMgYGtleWAgYW5kIGl0cyB2YWx1ZSBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBMaXN0Q2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgbGFzdEluZGV4ID0gZGF0YS5sZW5ndGggLSAxO1xuICBpZiAoaW5kZXggPT0gbGFzdEluZGV4KSB7XG4gICAgZGF0YS5wb3AoKTtcbiAgfSBlbHNlIHtcbiAgICBzcGxpY2UuY2FsbChkYXRhLCBpbmRleCwgMSk7XG4gIH1cbiAgLS10aGlzLnNpemU7XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVEZWxldGU7XG4iLCJpbXBvcnQgYXNzb2NJbmRleE9mIGZyb20gJy4vX2Fzc29jSW5kZXhPZi5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbGlzdCBjYWNoZSB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICByZXR1cm4gaW5kZXggPCAwID8gdW5kZWZpbmVkIDogZGF0YVtpbmRleF1bMV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUdldDtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGFzc29jSW5kZXhPZih0aGlzLl9fZGF0YV9fLCBrZXkpID4gLTE7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZUhhcztcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBsaXN0IGNhY2hlIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBsaXN0IGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIGlmIChpbmRleCA8IDApIHtcbiAgICArK3RoaXMuc2l6ZTtcbiAgICBkYXRhLnB1c2goW2tleSwgdmFsdWVdKTtcbiAgfSBlbHNlIHtcbiAgICBkYXRhW2luZGV4XVsxXSA9IHZhbHVlO1xuICB9XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVTZXQ7XG4iLCJpbXBvcnQgbGlzdENhY2hlQ2xlYXIgZnJvbSAnLi9fbGlzdENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IGxpc3RDYWNoZURlbGV0ZSBmcm9tICcuL19saXN0Q2FjaGVEZWxldGUuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUdldCBmcm9tICcuL19saXN0Q2FjaGVHZXQuanMnO1xuaW1wb3J0IGxpc3RDYWNoZUhhcyBmcm9tICcuL19saXN0Q2FjaGVIYXMuanMnO1xuaW1wb3J0IGxpc3RDYWNoZVNldCBmcm9tICcuL19saXN0Q2FjaGVTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gbGlzdCBjYWNoZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIExpc3RDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBMaXN0Q2FjaGVgLlxuTGlzdENhY2hlLnByb3RvdHlwZS5jbGVhciA9IGxpc3RDYWNoZUNsZWFyO1xuTGlzdENhY2hlLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBsaXN0Q2FjaGVEZWxldGU7XG5MaXN0Q2FjaGUucHJvdG90eXBlLmdldCA9IGxpc3RDYWNoZUdldDtcbkxpc3RDYWNoZS5wcm90b3R5cGUuaGFzID0gbGlzdENhY2hlSGFzO1xuTGlzdENhY2hlLnByb3RvdHlwZS5zZXQgPSBsaXN0Q2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IExpc3RDYWNoZTtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBzdGFjay5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBTdGFja1xuICovXG5mdW5jdGlvbiBzdGFja0NsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmV3IExpc3RDYWNoZTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrRGVsZXRlKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICByZXN1bHQgPSBkYXRhWydkZWxldGUnXShrZXkpO1xuXG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tEZWxldGU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHN0YWNrIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBzdGFja0dldChrZXkpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrR2V0O1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYSBzdGFjayB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrSGFzKGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tIYXM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHRoZVxuICogW2xhbmd1YWdlIHR5cGVdKGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1lY21hc2NyaXB0LWxhbmd1YWdlLXR5cGVzKVxuICogb2YgYE9iamVjdGAuIChlLmcuIGFycmF5cywgZnVuY3Rpb25zLCBvYmplY3RzLCByZWdleGVzLCBgbmV3IE51bWJlcigwKWAsIGFuZCBgbmV3IFN0cmluZygnJylgKVxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzT2JqZWN0KHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChfLm5vb3ApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdCh2YWx1ZSkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgcmV0dXJuIHZhbHVlICE9IG51bGwgJiYgKHR5cGUgPT0gJ29iamVjdCcgfHwgdHlwZSA9PSAnZnVuY3Rpb24nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3Q7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFzeW5jVGFnID0gJ1tvYmplY3QgQXN5bmNGdW5jdGlvbl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgcHJveHlUYWcgPSAnW29iamVjdCBQcm94eV0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgRnVuY3Rpb25gIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIGZ1bmN0aW9uLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNGdW5jdGlvbihfKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzRnVuY3Rpb24oL2FiYy8pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNGdW5jdGlvbih2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBUaGUgdXNlIG9mIGBPYmplY3QjdG9TdHJpbmdgIGF2b2lkcyBpc3N1ZXMgd2l0aCB0aGUgYHR5cGVvZmAgb3BlcmF0b3JcbiAgLy8gaW4gU2FmYXJpIDkgd2hpY2ggcmV0dXJucyAnb2JqZWN0JyBmb3IgdHlwZWQgYXJyYXlzIGFuZCBvdGhlciBjb25zdHJ1Y3RvcnMuXG4gIHZhciB0YWcgPSBiYXNlR2V0VGFnKHZhbHVlKTtcbiAgcmV0dXJuIHRhZyA9PSBmdW5jVGFnIHx8IHRhZyA9PSBnZW5UYWcgfHwgdGFnID09IGFzeW5jVGFnIHx8IHRhZyA9PSBwcm94eVRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNGdW5jdGlvbjtcbiIsImltcG9ydCBjb3JlSnNEYXRhIGZyb20gJy4vX2NvcmVKc0RhdGEuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgbWV0aG9kcyBtYXNxdWVyYWRpbmcgYXMgbmF0aXZlLiAqL1xudmFyIG1hc2tTcmNLZXkgPSAoZnVuY3Rpb24oKSB7XG4gIHZhciB1aWQgPSAvW14uXSskLy5leGVjKGNvcmVKc0RhdGEgJiYgY29yZUpzRGF0YS5rZXlzICYmIGNvcmVKc0RhdGEua2V5cy5JRV9QUk9UTyB8fCAnJyk7XG4gIHJldHVybiB1aWQgPyAoJ1N5bWJvbChzcmMpXzEuJyArIHVpZCkgOiAnJztcbn0oKSk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBmdW5jYCBoYXMgaXRzIHNvdXJjZSBtYXNrZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBmdW5jYCBpcyBtYXNrZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNNYXNrZWQoZnVuYykge1xuICByZXR1cm4gISFtYXNrU3JjS2V5ICYmIChtYXNrU3JjS2V5IGluIGZ1bmMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc01hc2tlZDtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogVXNlZCB0byBkZXRlY3Qgb3ZlcnJlYWNoaW5nIGNvcmUtanMgc2hpbXMuICovXG52YXIgY29yZUpzRGF0YSA9IHJvb3RbJ19fY29yZS1qc19zaGFyZWRfXyddO1xuXG5leHBvcnQgZGVmYXVsdCBjb3JlSnNEYXRhO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgZnVuY2AgdG8gaXRzIHNvdXJjZSBjb2RlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc291cmNlIGNvZGUuXG4gKi9cbmZ1bmN0aW9uIHRvU291cmNlKGZ1bmMpIHtcbiAgaWYgKGZ1bmMgIT0gbnVsbCkge1xuICAgIHRyeSB7XG4gICAgICByZXR1cm4gZnVuY1RvU3RyaW5nLmNhbGwoZnVuYyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgICB0cnkge1xuICAgICAgcmV0dXJuIChmdW5jICsgJycpO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbiAgcmV0dXJuICcnO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1NvdXJjZTtcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNNYXNrZWQgZnJvbSAnLi9faXNNYXNrZWQuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgXG4gKiBbc3ludGF4IGNoYXJhY3RlcnNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLXBhdHRlcm5zKS5cbiAqL1xudmFyIHJlUmVnRXhwQ2hhciA9IC9bXFxcXF4kLiorPygpW1xcXXt9fF0vZztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IGhvc3QgY29uc3RydWN0b3JzIChTYWZhcmkpLiAqL1xudmFyIHJlSXNIb3N0Q3RvciA9IC9eXFxbb2JqZWN0IC4rP0NvbnN0cnVjdG9yXFxdJC87XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBmdW5jUHJvdG8gPSBGdW5jdGlvbi5wcm90b3R5cGUsXG4gICAgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaWYgYSBtZXRob2QgaXMgbmF0aXZlLiAqL1xudmFyIHJlSXNOYXRpdmUgPSBSZWdFeHAoJ14nICtcbiAgZnVuY1RvU3RyaW5nLmNhbGwoaGFzT3duUHJvcGVydHkpLnJlcGxhY2UocmVSZWdFeHBDaGFyLCAnXFxcXCQmJylcbiAgLnJlcGxhY2UoL2hhc093blByb3BlcnR5fChmdW5jdGlvbikuKj8oPz1cXFxcXFwoKXwgZm9yIC4rPyg/PVxcXFxcXF0pL2csICckMS4qPycpICsgJyQnXG4pO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTmF0aXZlYCB3aXRob3V0IGJhZCBzaGltIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG5hdGl2ZSBmdW5jdGlvbixcbiAqICBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc05hdGl2ZSh2YWx1ZSkge1xuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSB8fCBpc01hc2tlZCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHBhdHRlcm4gPSBpc0Z1bmN0aW9uKHZhbHVlKSA/IHJlSXNOYXRpdmUgOiByZUlzSG9zdEN0b3I7XG4gIHJldHVybiBwYXR0ZXJuLnRlc3QodG9Tb3VyY2UodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTmF0aXZlO1xuIiwiLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gZ2V0VmFsdWUob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFZhbHVlO1xuIiwiaW1wb3J0IGJhc2VJc05hdGl2ZSBmcm9tICcuL19iYXNlSXNOYXRpdmUuanMnO1xuaW1wb3J0IGdldFZhbHVlIGZyb20gJy4vX2dldFZhbHVlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBuYXRpdmUgZnVuY3Rpb24gYXQgYGtleWAgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgbWV0aG9kIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBmdW5jdGlvbiBpZiBpdCdzIG5hdGl2ZSwgZWxzZSBgdW5kZWZpbmVkYC5cbiAqL1xuZnVuY3Rpb24gZ2V0TmF0aXZlKG9iamVjdCwga2V5KSB7XG4gIHZhciB2YWx1ZSA9IGdldFZhbHVlKG9iamVjdCwga2V5KTtcbiAgcmV0dXJuIGJhc2VJc05hdGl2ZSh2YWx1ZSkgPyB2YWx1ZSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TmF0aXZlO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBNYXAgPSBnZXROYXRpdmUocm9vdCwgJ01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBNYXA7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBuYXRpdmVDcmVhdGUgPSBnZXROYXRpdmUoT2JqZWN0LCAnY3JlYXRlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUNyZWF0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBoYXNoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIEhhc2hcbiAqL1xuZnVuY3Rpb24gaGFzaENsZWFyKCkge1xuICB0aGlzLl9fZGF0YV9fID0gbmF0aXZlQ3JlYXRlID8gbmF0aXZlQ3JlYXRlKG51bGwpIDoge307XG4gIHRoaXMuc2l6ZSA9IDA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hDbGVhcjtcbiIsIi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7T2JqZWN0fSBoYXNoIFRoZSBoYXNoIHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gdGhpcy5oYXMoa2V5KSAmJiBkZWxldGUgdGhpcy5fX2RhdGFfX1trZXldO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hEZWxldGU7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBHZXRzIHRoZSBoYXNoIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGhhc2hHZXQoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgaWYgKG5hdGl2ZUNyZWF0ZSkge1xuICAgIHZhciByZXN1bHQgPSBkYXRhW2tleV07XG4gICAgcmV0dXJuIHJlc3VsdCA9PT0gSEFTSF9VTkRFRklORUQgPyB1bmRlZmluZWQgOiByZXN1bHQ7XG4gIH1cbiAgcmV0dXJuIGhhc093blByb3BlcnR5LmNhbGwoZGF0YSwga2V5KSA/IGRhdGFba2V5XSA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaEdldDtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBoYXNoIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNoSGFzKGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHJldHVybiBuYXRpdmVDcmVhdGUgPyAoZGF0YVtrZXldICE9PSB1bmRlZmluZWQpIDogaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoSGFzO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCB0byBzdGFuZC1pbiBmb3IgYHVuZGVmaW5lZGAgaGFzaCB2YWx1ZXMuICovXG52YXIgSEFTSF9VTkRFRklORUQgPSAnX19sb2Rhc2hfaGFzaF91bmRlZmluZWRfXyc7XG5cbi8qKlxuICogU2V0cyB0aGUgaGFzaCBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGhhc2ggaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGhhc2hTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIHRoaXMuc2l6ZSArPSB0aGlzLmhhcyhrZXkpID8gMCA6IDE7XG4gIGRhdGFba2V5XSA9IChuYXRpdmVDcmVhdGUgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkgPyBIQVNIX1VOREVGSU5FRCA6IHZhbHVlO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaFNldDtcbiIsImltcG9ydCBoYXNoQ2xlYXIgZnJvbSAnLi9faGFzaENsZWFyLmpzJztcbmltcG9ydCBoYXNoRGVsZXRlIGZyb20gJy4vX2hhc2hEZWxldGUuanMnO1xuaW1wb3J0IGhhc2hHZXQgZnJvbSAnLi9faGFzaEdldC5qcyc7XG5pbXBvcnQgaGFzaEhhcyBmcm9tICcuL19oYXNoSGFzLmpzJztcbmltcG9ydCBoYXNoU2V0IGZyb20gJy4vX2hhc2hTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBoYXNoIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gSGFzaChlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBIYXNoYC5cbkhhc2gucHJvdG90eXBlLmNsZWFyID0gaGFzaENsZWFyO1xuSGFzaC5wcm90b3R5cGVbJ2RlbGV0ZSddID0gaGFzaERlbGV0ZTtcbkhhc2gucHJvdG90eXBlLmdldCA9IGhhc2hHZXQ7XG5IYXNoLnByb3RvdHlwZS5oYXMgPSBoYXNoSGFzO1xuSGFzaC5wcm90b3R5cGUuc2V0ID0gaGFzaFNldDtcblxuZXhwb3J0IGRlZmF1bHQgSGFzaDtcbiIsImltcG9ydCBIYXNoIGZyb20gJy4vX0hhc2guanMnO1xuaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgY2xlYXJcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUNsZWFyKCkge1xuICB0aGlzLnNpemUgPSAwO1xuICB0aGlzLl9fZGF0YV9fID0ge1xuICAgICdoYXNoJzogbmV3IEhhc2gsXG4gICAgJ21hcCc6IG5ldyAoTWFwIHx8IExpc3RDYWNoZSksXG4gICAgJ3N0cmluZyc6IG5ldyBIYXNoXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlQ2xlYXI7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIHN1aXRhYmxlIGZvciB1c2UgYXMgdW5pcXVlIG9iamVjdCBrZXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXlhYmxlKHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gKHR5cGUgPT0gJ3N0cmluZycgfHwgdHlwZSA9PSAnbnVtYmVyJyB8fCB0eXBlID09ICdzeW1ib2wnIHx8IHR5cGUgPT0gJ2Jvb2xlYW4nKVxuICAgID8gKHZhbHVlICE9PSAnX19wcm90b19fJylcbiAgICA6ICh2YWx1ZSA9PT0gbnVsbCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5YWJsZTtcbiIsImltcG9ydCBpc0tleWFibGUgZnJvbSAnLi9faXNLZXlhYmxlLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBkYXRhIGZvciBgbWFwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUgcmVmZXJlbmNlIGtleS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBtYXAgZGF0YS5cbiAqL1xuZnVuY3Rpb24gZ2V0TWFwRGF0YShtYXAsIGtleSkge1xuICB2YXIgZGF0YSA9IG1hcC5fX2RhdGFfXztcbiAgcmV0dXJuIGlzS2V5YWJsZShrZXkpXG4gICAgPyBkYXRhW3R5cGVvZiBrZXkgPT0gJ3N0cmluZycgPyAnc3RyaW5nJyA6ICdoYXNoJ11cbiAgICA6IGRhdGEubWFwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRNYXBEYXRhO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIG1hcC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gcmVtb3ZlLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBlbnRyeSB3YXMgcmVtb3ZlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIHJlc3VsdCA9IGdldE1hcERhdGEodGhpcywga2V5KVsnZGVsZXRlJ10oa2V5KTtcbiAgdGhpcy5zaXplIC09IHJlc3VsdCA/IDEgOiAwO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBnZXRNYXBEYXRhIGZyb20gJy4vX2dldE1hcERhdGEuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG1hcCB2YWx1ZSBmb3IgYGtleWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGdldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVHZXQoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuZ2V0KGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlR2V0O1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGEgbWFwIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVIYXMoa2V5KSB7XG4gIHJldHVybiBnZXRNYXBEYXRhKHRoaXMsIGtleSkuaGFzKGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlSGFzO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogU2V0cyB0aGUgbWFwIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG1hcCBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gbWFwQ2FjaGVTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IGdldE1hcERhdGEodGhpcywga2V5KSxcbiAgICAgIHNpemUgPSBkYXRhLnNpemU7XG5cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSArPSBkYXRhLnNpemUgPT0gc2l6ZSA/IDAgOiAxO1xuICByZXR1cm4gdGhpcztcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVTZXQ7XG4iLCJpbXBvcnQgbWFwQ2FjaGVDbGVhciBmcm9tICcuL19tYXBDYWNoZUNsZWFyLmpzJztcbmltcG9ydCBtYXBDYWNoZURlbGV0ZSBmcm9tICcuL19tYXBDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVHZXQgZnJvbSAnLi9fbWFwQ2FjaGVHZXQuanMnO1xuaW1wb3J0IG1hcENhY2hlSGFzIGZyb20gJy4vX21hcENhY2hlSGFzLmpzJztcbmltcG9ydCBtYXBDYWNoZVNldCBmcm9tICcuL19tYXBDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIG1hcCBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBNYXBDYWNoZShlbnRyaWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gZW50cmllcyA9PSBudWxsID8gMCA6IGVudHJpZXMubGVuZ3RoO1xuXG4gIHRoaXMuY2xlYXIoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgZW50cnkgPSBlbnRyaWVzW2luZGV4XTtcbiAgICB0aGlzLnNldChlbnRyeVswXSwgZW50cnlbMV0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBNYXBDYWNoZWAuXG5NYXBDYWNoZS5wcm90b3R5cGUuY2xlYXIgPSBtYXBDYWNoZUNsZWFyO1xuTWFwQ2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IG1hcENhY2hlRGVsZXRlO1xuTWFwQ2FjaGUucHJvdG90eXBlLmdldCA9IG1hcENhY2hlR2V0O1xuTWFwQ2FjaGUucHJvdG90eXBlLmhhcyA9IG1hcENhY2hlSGFzO1xuTWFwQ2FjaGUucHJvdG90eXBlLnNldCA9IG1hcENhY2hlU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBNYXBDYWNoZTtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcbmltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBzaXplIHRvIGVuYWJsZSBsYXJnZSBhcnJheSBvcHRpbWl6YXRpb25zLiAqL1xudmFyIExBUkdFX0FSUkFZX1NJWkUgPSAyMDA7XG5cbi8qKlxuICogU2V0cyB0aGUgc3RhY2sgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgU3RhY2tcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgc3RhY2sgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrU2V0KGtleSwgdmFsdWUpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAoZGF0YSBpbnN0YW5jZW9mIExpc3RDYWNoZSkge1xuICAgIHZhciBwYWlycyA9IGRhdGEuX19kYXRhX187XG4gICAgaWYgKCFNYXAgfHwgKHBhaXJzLmxlbmd0aCA8IExBUkdFX0FSUkFZX1NJWkUgLSAxKSkge1xuICAgICAgcGFpcnMucHVzaChba2V5LCB2YWx1ZV0pO1xuICAgICAgdGhpcy5zaXplID0gKytkYXRhLnNpemU7XG4gICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGUocGFpcnMpO1xuICB9XG4gIGRhdGEuc2V0KGtleSwgdmFsdWUpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja1NldDtcbiIsImltcG9ydCBMaXN0Q2FjaGUgZnJvbSAnLi9fTGlzdENhY2hlLmpzJztcbmltcG9ydCBzdGFja0NsZWFyIGZyb20gJy4vX3N0YWNrQ2xlYXIuanMnO1xuaW1wb3J0IHN0YWNrRGVsZXRlIGZyb20gJy4vX3N0YWNrRGVsZXRlLmpzJztcbmltcG9ydCBzdGFja0dldCBmcm9tICcuL19zdGFja0dldC5qcyc7XG5pbXBvcnQgc3RhY2tIYXMgZnJvbSAnLi9fc3RhY2tIYXMuanMnO1xuaW1wb3J0IHN0YWNrU2V0IGZyb20gJy4vX3N0YWNrU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgc3RhY2sgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU3RhY2soZW50cmllcykge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlKGVudHJpZXMpO1xuICB0aGlzLnNpemUgPSBkYXRhLnNpemU7XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTdGFja2AuXG5TdGFjay5wcm90b3R5cGUuY2xlYXIgPSBzdGFja0NsZWFyO1xuU3RhY2sucHJvdG90eXBlWydkZWxldGUnXSA9IHN0YWNrRGVsZXRlO1xuU3RhY2sucHJvdG90eXBlLmdldCA9IHN0YWNrR2V0O1xuU3RhY2sucHJvdG90eXBlLmhhcyA9IHN0YWNrSGFzO1xuU3RhY2sucHJvdG90eXBlLnNldCA9IHN0YWNrU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBTdGFjaztcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZvckVhY2hgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBhcnJheUVhY2goYXJyYXksIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBpZiAoaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpID09PSBmYWxzZSkge1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG4gIHJldHVybiBhcnJheTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlFYWNoO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuXG52YXIgZGVmaW5lUHJvcGVydHkgPSAoZnVuY3Rpb24oKSB7XG4gIHRyeSB7XG4gICAgdmFyIGZ1bmMgPSBnZXROYXRpdmUoT2JqZWN0LCAnZGVmaW5lUHJvcGVydHknKTtcbiAgICBmdW5jKHt9LCAnJywge30pO1xuICAgIHJldHVybiBmdW5jO1xuICB9IGNhdGNoIChlKSB7fVxufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgZGVmaW5lUHJvcGVydHk7XG4iLCJpbXBvcnQgZGVmaW5lUHJvcGVydHkgZnJvbSAnLi9fZGVmaW5lUHJvcGVydHkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBhc3NpZ25WYWx1ZWAgYW5kIGBhc3NpZ25NZXJnZVZhbHVlYCB3aXRob3V0XG4gKiB2YWx1ZSBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGFzc2lnbi5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGFzc2lnbi5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICBpZiAoa2V5ID09ICdfX3Byb3RvX18nICYmIGRlZmluZVByb3BlcnR5KSB7XG4gICAgZGVmaW5lUHJvcGVydHkob2JqZWN0LCBrZXksIHtcbiAgICAgICdjb25maWd1cmFibGUnOiB0cnVlLFxuICAgICAgJ2VudW1lcmFibGUnOiB0cnVlLFxuICAgICAgJ3ZhbHVlJzogdmFsdWUsXG4gICAgICAnd3JpdGFibGUnOiB0cnVlXG4gICAgfSk7XG4gIH0gZWxzZSB7XG4gICAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgZXEgZnJvbSAnLi9lcS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQXNzaWducyBgdmFsdWVgIHRvIGBrZXlgIG9mIGBvYmplY3RgIGlmIHRoZSBleGlzdGluZyB2YWx1ZSBpcyBub3QgZXF1aXZhbGVudFxuICogdXNpbmcgW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGZvciBlcXVhbGl0eSBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBhc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV07XG4gIGlmICghKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGVxKG9ialZhbHVlLCB2YWx1ZSkpIHx8XG4gICAgICAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShvYmplY3QsIGtleSwgdmFsdWUpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzc2lnblZhbHVlO1xuIiwiaW1wb3J0IGFzc2lnblZhbHVlIGZyb20gJy4vX2Fzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgcHJvcGVydGllcyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gcHJvcHMgVGhlIHByb3BlcnR5IGlkZW50aWZpZXJzIHRvIGNvcHkuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHByb3BlcnRpZXMgdG8uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb3BpZWQgdmFsdWVzLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weU9iamVjdChzb3VyY2UsIHByb3BzLCBvYmplY3QsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGlzTmV3ID0gIW9iamVjdDtcbiAgb2JqZWN0IHx8IChvYmplY3QgPSB7fSk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwcm9wcy5sZW5ndGg7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gcHJvcHNbaW5kZXhdO1xuXG4gICAgdmFyIG5ld1ZhbHVlID0gY3VzdG9taXplclxuICAgICAgPyBjdXN0b21pemVyKG9iamVjdFtrZXldLCBzb3VyY2Vba2V5XSwga2V5LCBvYmplY3QsIHNvdXJjZSlcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgaWYgKG5ld1ZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICAgIG5ld1ZhbHVlID0gc291cmNlW2tleV07XG4gICAgfVxuICAgIGlmIChpc05ldykge1xuICAgICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9XG4gIHJldHVybiBvYmplY3Q7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlPYmplY3Q7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnRpbWVzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHNcbiAqIG9yIG1heCBhcnJheSBsZW5ndGggY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge251bWJlcn0gbiBUaGUgbnVtYmVyIG9mIHRpbWVzIHRvIGludm9rZSBgaXRlcmF0ZWVgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcmVzdWx0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRpbWVzKG4sIGl0ZXJhdGVlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobik7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBuKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGl0ZXJhdGVlKGluZGV4KTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVGltZXM7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzQXJndW1lbnRzYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBgYXJndW1lbnRzYCBvYmplY3QsXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0FyZ3VtZW50cyh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBhcmdzVGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNBcmd1bWVudHM7XG4iLCJpbXBvcnQgYmFzZUlzQXJndW1lbnRzIGZyb20gJy4vX2Jhc2VJc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgcHJvcGVydHlJc0VudW1lcmFibGUgPSBvYmplY3RQcm90by5wcm9wZXJ0eUlzRW51bWVyYWJsZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqICBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhbMSwgMiwgM10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzQXJndW1lbnRzID0gYmFzZUlzQXJndW1lbnRzKGZ1bmN0aW9uKCkgeyByZXR1cm4gYXJndW1lbnRzOyB9KCkpID8gYmFzZUlzQXJndW1lbnRzIDogZnVuY3Rpb24odmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpICYmXG4gICAgIXByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwodmFsdWUsICdjYWxsZWUnKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJndW1lbnRzO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGFuIGBBcnJheWAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0FycmF5KF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQXJyYXk7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHVuc2lnbmVkIGludGVnZXIgdmFsdWVzLiAqL1xudmFyIHJlSXNVaW50ID0gL14oPzowfFsxLTldXFxkKikkLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgaW5kZXguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtudW1iZXJ9IFtsZW5ndGg9TUFYX1NBRkVfSU5URUdFUl0gVGhlIHVwcGVyIGJvdW5kcyBvZiBhIHZhbGlkIGluZGV4LlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBpbmRleCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0luZGV4KHZhbHVlLCBsZW5ndGgpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGxlbmd0aCA9IGxlbmd0aCA9PSBudWxsID8gTUFYX1NBRkVfSU5URUdFUiA6IGxlbmd0aDtcblxuICByZXR1cm4gISFsZW5ndGggJiZcbiAgICAodHlwZSA9PSAnbnVtYmVyJyB8fFxuICAgICAgKHR5cGUgIT0gJ3N5bWJvbCcgJiYgcmVJc1VpbnQudGVzdCh2YWx1ZSkpKSAmJlxuICAgICAgICAodmFsdWUgPiAtMSAmJiB2YWx1ZSAlIDEgPT0gMCAmJiB2YWx1ZSA8IGxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzSW5kZXg7XG4iLCIvKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBNQVhfU0FGRV9JTlRFR0VSID0gOTAwNzE5OTI1NDc0MDk5MTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGFycmF5LWxpa2UgbGVuZ3RoLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uXG4gKiBbYFRvTGVuZ3RoYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtdG9sZW5ndGgpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgbGVuZ3RoLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNMZW5ndGgoMyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0xlbmd0aChOdW1iZXIuTUlOX1ZBTFVFKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aChJbmZpbml0eSk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNMZW5ndGgoJzMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzTGVuZ3RoKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ251bWJlcicgJiZcbiAgICB2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDw9IE1BWF9TQUZFX0lOVEVHRVI7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTGVuZ3RoO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgYm9vbFRhZyA9ICdbb2JqZWN0IEJvb2xlYW5dJyxcbiAgICBkYXRlVGFnID0gJ1tvYmplY3QgRGF0ZV0nLFxuICAgIGVycm9yVGFnID0gJ1tvYmplY3QgRXJyb3JdJyxcbiAgICBmdW5jVGFnID0gJ1tvYmplY3QgRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgb2YgdHlwZWQgYXJyYXlzLiAqL1xudmFyIHR5cGVkQXJyYXlUYWdzID0ge307XG50eXBlZEFycmF5VGFnc1tmbG9hdDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Zsb2F0NjRUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDhUYWddID0gdHlwZWRBcnJheVRhZ3NbaW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW2ludDMyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW3VpbnQ4VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50OENsYW1wZWRUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDE2VGFnXSA9XG50eXBlZEFycmF5VGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbnR5cGVkQXJyYXlUYWdzW2FyZ3NUYWddID0gdHlwZWRBcnJheVRhZ3NbYXJyYXlUYWddID1cbnR5cGVkQXJyYXlUYWdzW2FycmF5QnVmZmVyVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Jvb2xUYWddID1cbnR5cGVkQXJyYXlUYWdzW2RhdGFWaWV3VGFnXSA9IHR5cGVkQXJyYXlUYWdzW2RhdGVUYWddID1cbnR5cGVkQXJyYXlUYWdzW2Vycm9yVGFnXSA9IHR5cGVkQXJyYXlUYWdzW2Z1bmNUYWddID1cbnR5cGVkQXJyYXlUYWdzW21hcFRhZ10gPSB0eXBlZEFycmF5VGFnc1tudW1iZXJUYWddID1cbnR5cGVkQXJyYXlUYWdzW29iamVjdFRhZ10gPSB0eXBlZEFycmF5VGFnc1tyZWdleHBUYWddID1cbnR5cGVkQXJyYXlUYWdzW3NldFRhZ10gPSB0eXBlZEFycmF5VGFnc1tzdHJpbmdUYWddID1cbnR5cGVkQXJyYXlUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNUeXBlZEFycmF5YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc1R5cGVkQXJyYXkodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiZcbiAgICBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICEhdHlwZWRBcnJheVRhZ3NbYmFzZUdldFRhZyh2YWx1ZSldO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNUeXBlZEFycmF5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy51bmFyeWAgd2l0aG91dCBzdXBwb3J0IGZvciBzdG9yaW5nIG1ldGFkYXRhLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBjYXAgYXJndW1lbnRzIGZvci5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhcHBlZCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVVuYXJ5KGZ1bmMpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmV0dXJuIGZ1bmModmFsdWUpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlVW5hcnk7XG4iLCJpbXBvcnQgYmFzZUlzVHlwZWRBcnJheSBmcm9tICcuL19iYXNlSXNUeXBlZEFycmF5LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzVHlwZWRBcnJheSA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzVHlwZWRBcnJheTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgdHlwZWQgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB0eXBlZCBhcnJheSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShuZXcgVWludDhBcnJheSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1R5cGVkQXJyYXkoW10pO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzVHlwZWRBcnJheSA9IG5vZGVJc1R5cGVkQXJyYXkgPyBiYXNlVW5hcnkobm9kZUlzVHlwZWRBcnJheSkgOiBiYXNlSXNUeXBlZEFycmF5O1xuXG5leHBvcnQgZGVmYXVsdCBpc1R5cGVkQXJyYXk7XG4iLCJpbXBvcnQgYmFzZVRpbWVzIGZyb20gJy4vX2Jhc2VUaW1lcy5qcyc7XG5pbXBvcnQgaXNBcmd1bWVudHMgZnJvbSAnLi9pc0FyZ3VtZW50cy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzSW5kZXggZnJvbSAnLi9faXNJbmRleC5qcyc7XG5pbXBvcnQgaXNUeXBlZEFycmF5IGZyb20gJy4vaXNUeXBlZEFycmF5LmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIHRoZSBhcnJheS1saWtlIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtib29sZWFufSBpbmhlcml0ZWQgU3BlY2lmeSByZXR1cm5pbmcgaW5oZXJpdGVkIHByb3BlcnR5IG5hbWVzLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYXJyYXlMaWtlS2V5cyh2YWx1ZSwgaW5oZXJpdGVkKSB7XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpLFxuICAgICAgaXNBcmcgPSAhaXNBcnIgJiYgaXNBcmd1bWVudHModmFsdWUpLFxuICAgICAgaXNCdWZmID0gIWlzQXJyICYmICFpc0FyZyAmJiBpc0J1ZmZlcih2YWx1ZSksXG4gICAgICBpc1R5cGUgPSAhaXNBcnIgJiYgIWlzQXJnICYmICFpc0J1ZmYgJiYgaXNUeXBlZEFycmF5KHZhbHVlKSxcbiAgICAgIHNraXBJbmRleGVzID0gaXNBcnIgfHwgaXNBcmcgfHwgaXNCdWZmIHx8IGlzVHlwZSxcbiAgICAgIHJlc3VsdCA9IHNraXBJbmRleGVzID8gYmFzZVRpbWVzKHZhbHVlLmxlbmd0aCwgU3RyaW5nKSA6IFtdLFxuICAgICAgbGVuZ3RoID0gcmVzdWx0Lmxlbmd0aDtcblxuICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICBpZiAoKGluaGVyaXRlZCB8fCBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBrZXkpKSAmJlxuICAgICAgICAhKHNraXBJbmRleGVzICYmIChcbiAgICAgICAgICAgLy8gU2FmYXJpIDkgaGFzIGVudW1lcmFibGUgYGFyZ3VtZW50cy5sZW5ndGhgIGluIHN0cmljdCBtb2RlLlxuICAgICAgICAgICBrZXkgPT0gJ2xlbmd0aCcgfHxcbiAgICAgICAgICAgLy8gTm9kZS5qcyAwLjEwIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIGJ1ZmZlcnMuXG4gICAgICAgICAgIChpc0J1ZmYgJiYgKGtleSA9PSAnb2Zmc2V0JyB8fCBrZXkgPT0gJ3BhcmVudCcpKSB8fFxuICAgICAgICAgICAvLyBQaGFudG9tSlMgMiBoYXMgZW51bWVyYWJsZSBub24taW5kZXggcHJvcGVydGllcyBvbiB0eXBlZCBhcnJheXMuXG4gICAgICAgICAgIChpc1R5cGUgJiYgKGtleSA9PSAnYnVmZmVyJyB8fCBrZXkgPT0gJ2J5dGVMZW5ndGgnIHx8IGtleSA9PSAnYnl0ZU9mZnNldCcpKSB8fFxuICAgICAgICAgICAvLyBTa2lwIGluZGV4IHByb3BlcnRpZXMuXG4gICAgICAgICAgIGlzSW5kZXgoa2V5LCBsZW5ndGgpXG4gICAgICAgICkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUxpa2VLZXlzO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBsaWtlbHkgYSBwcm90b3R5cGUgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvdG90eXBlLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzUHJvdG90eXBlKHZhbHVlKSB7XG4gIHZhciBDdG9yID0gdmFsdWUgJiYgdmFsdWUuY29uc3RydWN0b3IsXG4gICAgICBwcm90byA9ICh0eXBlb2YgQ3RvciA9PSAnZnVuY3Rpb24nICYmIEN0b3IucHJvdG90eXBlKSB8fCBvYmplY3RQcm90bztcblxuICByZXR1cm4gdmFsdWUgPT09IHByb3RvO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1Byb3RvdHlwZTtcbiIsImltcG9ydCBvdmVyQXJnIGZyb20gJy4vX292ZXJBcmcuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlS2V5cyA9IG92ZXJBcmcoT2JqZWN0LmtleXMsIE9iamVjdCk7XG5cbmV4cG9ydCBkZWZhdWx0IG5hdGl2ZUtleXM7XG4iLCJpbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXMgZnJvbSAnLi9fbmF0aXZlS2V5cy5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8ua2V5c2Agd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5cyhvYmplY3QpIHtcbiAgaWYgKCFpc1Byb3RvdHlwZShvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXMob2JqZWN0KTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gW107XG4gIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgIGlmIChoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSAmJiBrZXkgIT0gJ2NvbnN0cnVjdG9yJykge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXM7XG4iLCJpbXBvcnQgaXNGdW5jdGlvbiBmcm9tICcuL2lzRnVuY3Rpb24uanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGFycmF5LWxpa2UuIEEgdmFsdWUgaXMgY29uc2lkZXJlZCBhcnJheS1saWtlIGlmIGl0J3NcbiAqIG5vdCBhIGZ1bmN0aW9uIGFuZCBoYXMgYSBgdmFsdWUubGVuZ3RoYCB0aGF0J3MgYW4gaW50ZWdlciBncmVhdGVyIHRoYW4gb3JcbiAqIGVxdWFsIHRvIGAwYCBhbmQgbGVzcyB0aGFuIG9yIGVxdWFsIHRvIGBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUmAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZSwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5TGlrZShkb2N1bWVudC5ib2R5LmNoaWxkcmVuKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKCdhYmMnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0FycmF5TGlrZSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiBpc0xlbmd0aCh2YWx1ZS5sZW5ndGgpICYmICFpc0Z1bmN0aW9uKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheUxpa2U7XG4iLCJpbXBvcnQgYXJyYXlMaWtlS2V5cyBmcm9tICcuL19hcnJheUxpa2VLZXlzLmpzJztcbmltcG9ydCBiYXNlS2V5cyBmcm9tICcuL19iYXNlS2V5cy5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgYG9iamVjdGAuXG4gKlxuICogKipOb3RlOioqIE5vbi1vYmplY3QgdmFsdWVzIGFyZSBjb2VyY2VkIHRvIG9iamVjdHMuIFNlZSB0aGVcbiAqIFtFUyBzcGVjXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3Qua2V5cylcbiAqIGZvciBtb3JlIGRldGFpbHMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy5rZXlzKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8ua2V5cygnaGknKTtcbiAqIC8vID0+IFsnMCcsICcxJ11cbiAqL1xuZnVuY3Rpb24ga2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCkgOiBiYXNlS2V5cyhvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzO1xuIiwiaW1wb3J0IGNvcHlPYmplY3QgZnJvbSAnLi9fY29weU9iamVjdC5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbmAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzXG4gKiBvciBgY3VzdG9taXplcmAgZnVuY3Rpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUFzc2lnbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ247XG4iLCIvKipcbiAqIFRoaXMgZnVuY3Rpb24gaXMgbGlrZVxuICogW2BPYmplY3Qua2V5c2BdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZXhjZXB0IHRoYXQgaXQgaW5jbHVkZXMgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydGllcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gbmF0aXZlS2V5c0luKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIGlmIChvYmplY3QgIT0gbnVsbCkge1xuICAgIGZvciAodmFyIGtleSBpbiBPYmplY3Qob2JqZWN0KSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5c0luO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcbmltcG9ydCBuYXRpdmVLZXlzSW4gZnJvbSAnLi9fbmF0aXZlS2V5c0luLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzSW5gIHdoaWNoIGRvZXNuJ3QgdHJlYXQgc3BhcnNlIGFycmF5cyBhcyBkZW5zZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcy5cbiAqL1xuZnVuY3Rpb24gYmFzZUtleXNJbihvYmplY3QpIHtcbiAgaWYgKCFpc09iamVjdChvYmplY3QpKSB7XG4gICAgcmV0dXJuIG5hdGl2ZUtleXNJbihvYmplY3QpO1xuICB9XG4gIHZhciBpc1Byb3RvID0gaXNQcm90b3R5cGUob2JqZWN0KSxcbiAgICAgIHJlc3VsdCA9IFtdO1xuXG4gIGZvciAodmFyIGtleSBpbiBvYmplY3QpIHtcbiAgICBpZiAoIShrZXkgPT0gJ2NvbnN0cnVjdG9yJyAmJiAoaXNQcm90byB8fCAhaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkpKSkge1xuICAgICAgcmVzdWx0LnB1c2goa2V5KTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUtleXNJbjtcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzSW4gZnJvbSAnLi9fYmFzZUtleXNJbi5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXNJbihuZXcgRm9vKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICovXG5mdW5jdGlvbiBrZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBpc0FycmF5TGlrZShvYmplY3QpID8gYXJyYXlMaWtlS2V5cyhvYmplY3QsIHRydWUpIDogYmFzZUtleXNJbihvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBrZXlzSW47XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzSW4gZnJvbSAnLi9rZXlzSW4uanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmFzc2lnbkluYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduSW4ob2JqZWN0LCBzb3VyY2UpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBjb3B5T2JqZWN0KHNvdXJjZSwga2V5c0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25JbjtcbiIsIi8qKlxuICogQ29waWVzIHRoZSB2YWx1ZXMgb2YgYHNvdXJjZWAgdG8gYGFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gc291cmNlIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyBmcm9tLlxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5PVtdXSBUaGUgYXJyYXkgdG8gY29weSB2YWx1ZXMgdG8uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gY29weUFycmF5KHNvdXJjZSwgYXJyYXkpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBzb3VyY2UubGVuZ3RoO1xuXG4gIGFycmF5IHx8IChhcnJheSA9IEFycmF5KGxlbmd0aCkpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W2luZGV4XSA9IHNvdXJjZVtpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5QXJyYXk7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5maWx0ZXJgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBmaWx0ZXJlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlGaWx0ZXIoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzSW5kZXggPSAwLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgdmFsdWUgPSBhcnJheVtpbmRleF07XG4gICAgaWYgKHByZWRpY2F0ZSh2YWx1ZSwgaW5kZXgsIGFycmF5KSkge1xuICAgICAgcmVzdWx0W3Jlc0luZGV4KytdID0gdmFsdWU7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5RmlsdGVyO1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIGEgbmV3IGVtcHR5IGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4xMy4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgZW1wdHkgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBhcnJheXMgPSBfLnRpbWVzKDIsIF8uc3R1YkFycmF5KTtcbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXMpO1xuICogLy8gPT4gW1tdLCBbXV1cbiAqXG4gKiBjb25zb2xlLmxvZyhhcnJheXNbMF0gPT09IGFycmF5c1sxXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBzdHViQXJyYXkoKSB7XG4gIHJldHVybiBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3R1YkFycmF5O1xuIiwiaW1wb3J0IGFycmF5RmlsdGVyIGZyb20gJy4vX2FycmF5RmlsdGVyLmpzJztcbmltcG9ydCBzdHViQXJyYXkgZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBzeW1ib2xzLlxuICovXG52YXIgZ2V0U3ltYm9scyA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiBbXTtcbiAgfVxuICBvYmplY3QgPSBPYmplY3Qob2JqZWN0KTtcbiAgcmV0dXJuIGFycmF5RmlsdGVyKG5hdGl2ZUdldFN5bWJvbHMob2JqZWN0KSwgZnVuY3Rpb24oc3ltYm9sKSB7XG4gICAgcmV0dXJuIHByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwob2JqZWN0LCBzeW1ib2wpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN5bWJvbHM7XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuXG4vKipcbiAqIENvcGllcyBvd24gc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHMoc291cmNlLCBvYmplY3QpIHtcbiAgcmV0dXJuIGNvcHlPYmplY3Qoc291cmNlLCBnZXRTeW1ib2xzKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlTeW1ib2xzO1xuIiwiLyoqXG4gKiBBcHBlbmRzIHRoZSBlbGVtZW50cyBvZiBgdmFsdWVzYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtBcnJheX0gdmFsdWVzIFRoZSB2YWx1ZXMgdG8gYXBwZW5kLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UHVzaChhcnJheSwgdmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzLmxlbmd0aCxcbiAgICAgIG9mZnNldCA9IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFycmF5W29mZnNldCArIGluZGV4XSA9IHZhbHVlc1tpbmRleF07XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVB1c2g7XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcbmltcG9ydCBzdHViQXJyYXkgZnJvbSAnLi9zdHViQXJyYXkuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyBmb3IgdGhvc2Ugd2l0aCB0aGUgc2FtZSBuYW1lIGFzIG90aGVyIGBsb2Rhc2hgIG1ldGhvZHMuICovXG52YXIgbmF0aXZlR2V0U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGFuZCBpbmhlcml0ZWQgZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzSW4gPSAhbmF0aXZlR2V0U3ltYm9scyA/IHN0dWJBcnJheSA6IGZ1bmN0aW9uKG9iamVjdCkge1xuICB2YXIgcmVzdWx0ID0gW107XG4gIHdoaWxlIChvYmplY3QpIHtcbiAgICBhcnJheVB1c2gocmVzdWx0LCBnZXRTeW1ib2xzKG9iamVjdCkpO1xuICAgIG9iamVjdCA9IGdldFByb3RvdHlwZShvYmplY3QpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBnZXRTeW1ib2xzSW47XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBnZXRTeW1ib2xzSW4gZnJvbSAnLi9fZ2V0U3ltYm9sc0luLmpzJztcblxuLyoqXG4gKiBDb3BpZXMgb3duIGFuZCBpbmhlcml0ZWQgc3ltYm9scyBvZiBgc291cmNlYCB0byBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IHRvIGNvcHkgc3ltYm9scyBmcm9tLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3Q9e31dIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIHRvLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gY29weVN5bWJvbHNJbihzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHNJbihzb3VyY2UpLCBvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb3B5U3ltYm9sc0luO1xuIiwiaW1wb3J0IGFycmF5UHVzaCBmcm9tICcuL19hcnJheVB1c2guanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgZ2V0QWxsS2V5c2AgYW5kIGBnZXRBbGxLZXlzSW5gIHdoaWNoIHVzZXNcbiAqIGBrZXlzRnVuY2AgYW5kIGBzeW1ib2xzRnVuY2AgdG8gZ2V0IHRoZSBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtGdW5jdGlvbn0ga2V5c0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUga2V5cyBvZiBgb2JqZWN0YC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHN5bWJvbHNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNGdW5jLCBzeW1ib2xzRnVuYykge1xuICB2YXIgcmVzdWx0ID0ga2V5c0Z1bmMob2JqZWN0KTtcbiAgcmV0dXJuIGlzQXJyYXkob2JqZWN0KSA/IHJlc3VsdCA6IGFycmF5UHVzaChyZXN1bHQsIHN5bWJvbHNGdW5jKG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlR2V0QWxsS2V5cztcbiIsImltcG9ydCBiYXNlR2V0QWxsS2V5cyBmcm9tICcuL19iYXNlR2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9scyBmcm9tICcuL19nZXRTeW1ib2xzLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5cyhvYmplY3QpIHtcbiAgcmV0dXJuIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5cywgZ2V0U3ltYm9scyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXM7XG4iLCJpbXBvcnQgYmFzZUdldEFsbEtleXMgZnJvbSAnLi9fYmFzZUdldEFsbEtleXMuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZFxuICogc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSBuYW1lcyBhbmQgc3ltYm9scy5cbiAqL1xuZnVuY3Rpb24gZ2V0QWxsS2V5c0luKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzSW4sIGdldFN5bWJvbHNJbik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldEFsbEtleXNJbjtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgRGF0YVZpZXcgPSBnZXROYXRpdmUocm9vdCwgJ0RhdGFWaWV3Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IERhdGFWaWV3O1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBQcm9taXNlID0gZ2V0TmF0aXZlKHJvb3QsICdQcm9taXNlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFByb21pc2U7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFNldCA9IGdldE5hdGl2ZShyb290LCAnU2V0Jyk7XG5cbmV4cG9ydCBkZWZhdWx0IFNldDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgV2Vha01hcCA9IGdldE5hdGl2ZShyb290LCAnV2Vha01hcCcpO1xuXG5leHBvcnQgZGVmYXVsdCBXZWFrTWFwO1xuIiwiaW1wb3J0IERhdGFWaWV3IGZyb20gJy4vX0RhdGFWaWV3LmpzJztcbmltcG9ydCBNYXAgZnJvbSAnLi9fTWFwLmpzJztcbmltcG9ydCBQcm9taXNlIGZyb20gJy4vX1Byb21pc2UuanMnO1xuaW1wb3J0IFNldCBmcm9tICcuL19TZXQuanMnO1xuaW1wb3J0IFdlYWtNYXAgZnJvbSAnLi9fV2Vha01hcC5qcyc7XG5pbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCB0b1NvdXJjZSBmcm9tICcuL190b1NvdXJjZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICBwcm9taXNlVGFnID0gJ1tvYmplY3QgUHJvbWlzZV0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XSc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtYXBzLCBzZXRzLCBhbmQgd2Vha21hcHMuICovXG52YXIgZGF0YVZpZXdDdG9yU3RyaW5nID0gdG9Tb3VyY2UoRGF0YVZpZXcpLFxuICAgIG1hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShNYXApLFxuICAgIHByb21pc2VDdG9yU3RyaW5nID0gdG9Tb3VyY2UoUHJvbWlzZSksXG4gICAgc2V0Q3RvclN0cmluZyA9IHRvU291cmNlKFNldCksXG4gICAgd2Vha01hcEN0b3JTdHJpbmcgPSB0b1NvdXJjZShXZWFrTWFwKTtcblxuLyoqXG4gKiBHZXRzIHRoZSBgdG9TdHJpbmdUYWdgIG9mIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgYHRvU3RyaW5nVGFnYC5cbiAqL1xudmFyIGdldFRhZyA9IGJhc2VHZXRUYWc7XG5cbi8vIEZhbGxiYWNrIGZvciBkYXRhIHZpZXdzLCBtYXBzLCBzZXRzLCBhbmQgd2VhayBtYXBzIGluIElFIDExIGFuZCBwcm9taXNlcyBpbiBOb2RlLmpzIDwgNi5cbmlmICgoRGF0YVZpZXcgJiYgZ2V0VGFnKG5ldyBEYXRhVmlldyhuZXcgQXJyYXlCdWZmZXIoMSkpKSAhPSBkYXRhVmlld1RhZykgfHxcbiAgICAoTWFwICYmIGdldFRhZyhuZXcgTWFwKSAhPSBtYXBUYWcpIHx8XG4gICAgKFByb21pc2UgJiYgZ2V0VGFnKFByb21pc2UucmVzb2x2ZSgpKSAhPSBwcm9taXNlVGFnKSB8fFxuICAgIChTZXQgJiYgZ2V0VGFnKG5ldyBTZXQpICE9IHNldFRhZykgfHxcbiAgICAoV2Vha01hcCAmJiBnZXRUYWcobmV3IFdlYWtNYXApICE9IHdlYWtNYXBUYWcpKSB7XG4gIGdldFRhZyA9IGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGJhc2VHZXRUYWcodmFsdWUpLFxuICAgICAgICBDdG9yID0gcmVzdWx0ID09IG9iamVjdFRhZyA/IHZhbHVlLmNvbnN0cnVjdG9yIDogdW5kZWZpbmVkLFxuICAgICAgICBjdG9yU3RyaW5nID0gQ3RvciA/IHRvU291cmNlKEN0b3IpIDogJyc7XG5cbiAgICBpZiAoY3RvclN0cmluZykge1xuICAgICAgc3dpdGNoIChjdG9yU3RyaW5nKSB7XG4gICAgICAgIGNhc2UgZGF0YVZpZXdDdG9yU3RyaW5nOiByZXR1cm4gZGF0YVZpZXdUYWc7XG4gICAgICAgIGNhc2UgbWFwQ3RvclN0cmluZzogcmV0dXJuIG1hcFRhZztcbiAgICAgICAgY2FzZSBwcm9taXNlQ3RvclN0cmluZzogcmV0dXJuIHByb21pc2VUYWc7XG4gICAgICAgIGNhc2Ugc2V0Q3RvclN0cmluZzogcmV0dXJuIHNldFRhZztcbiAgICAgICAgY2FzZSB3ZWFrTWFwQ3RvclN0cmluZzogcmV0dXJuIHdlYWtNYXBUYWc7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldFRhZztcbiIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gYXJyYXkgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUFycmF5KGFycmF5KSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBuZXcgYXJyYXkuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICAvLyBBZGQgcHJvcGVydGllcyBhc3NpZ25lZCBieSBgUmVnRXhwI2V4ZWNgLlxuICBpZiAobGVuZ3RoICYmIHR5cGVvZiBhcnJheVswXSA9PSAnc3RyaW5nJyAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGFycmF5LCAnaW5kZXgnKSkge1xuICAgIHJlc3VsdC5pbmRleCA9IGFycmF5LmluZGV4O1xuICAgIHJlc3VsdC5pbnB1dCA9IGFycmF5LmlucHV0O1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZUFycmF5O1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIFVpbnQ4QXJyYXkgPSByb290LlVpbnQ4QXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IFVpbnQ4QXJyYXk7XG4iLCJpbXBvcnQgVWludDhBcnJheSBmcm9tICcuL19VaW50OEFycmF5LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGFycmF5QnVmZmVyYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheUJ1ZmZlcn0gYXJyYXlCdWZmZXIgVGhlIGFycmF5IGJ1ZmZlciB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtBcnJheUJ1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGFycmF5IGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVBcnJheUJ1ZmZlcihhcnJheUJ1ZmZlcikge1xuICB2YXIgcmVzdWx0ID0gbmV3IGFycmF5QnVmZmVyLmNvbnN0cnVjdG9yKGFycmF5QnVmZmVyLmJ5dGVMZW5ndGgpO1xuICBuZXcgVWludDhBcnJheShyZXN1bHQpLnNldChuZXcgVWludDhBcnJheShhcnJheUJ1ZmZlcikpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUFycmF5QnVmZmVyO1xuIiwiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGBkYXRhVmlld2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBkYXRhVmlldyBUaGUgZGF0YSB2aWV3IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBkYXRhIHZpZXcuXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGF0YVZpZXcoZGF0YVZpZXcsIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcihkYXRhVmlldy5idWZmZXIpIDogZGF0YVZpZXcuYnVmZmVyO1xuICByZXR1cm4gbmV3IGRhdGFWaWV3LmNvbnN0cnVjdG9yKGJ1ZmZlciwgZGF0YVZpZXcuYnl0ZU9mZnNldCwgZGF0YVZpZXcuYnl0ZUxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGF0YVZpZXc7XG4iLCIvKiogVXNlZCB0byBtYXRjaCBgUmVnRXhwYCBmbGFncyBmcm9tIHRoZWlyIGNvZXJjZWQgc3RyaW5nIHZhbHVlcy4gKi9cbnZhciByZUZsYWdzID0gL1xcdyokLztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYHJlZ2V4cGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSByZWdleHAgVGhlIHJlZ2V4cCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCByZWdleHAuXG4gKi9cbmZ1bmN0aW9uIGNsb25lUmVnRXhwKHJlZ2V4cCkge1xuICB2YXIgcmVzdWx0ID0gbmV3IHJlZ2V4cC5jb25zdHJ1Y3RvcihyZWdleHAuc291cmNlLCByZUZsYWdzLmV4ZWMocmVnZXhwKSk7XG4gIHJlc3VsdC5sYXN0SW5kZXggPSByZWdleHAubGFzdEluZGV4O1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVJlZ0V4cDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIHRoZSBgc3ltYm9sYCBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzeW1ib2wgVGhlIHN5bWJvbCBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgc3ltYm9sIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVTeW1ib2woc3ltYm9sKSB7XG4gIHJldHVybiBzeW1ib2xWYWx1ZU9mID8gT2JqZWN0KHN5bWJvbFZhbHVlT2YuY2FsbChzeW1ib2wpKSA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVN5bWJvbDtcbiIsImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgdHlwZWRBcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSB0eXBlZEFycmF5IFRoZSB0eXBlZCBhcnJheSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2lzRGVlcF0gU3BlY2lmeSBhIGRlZXAgY2xvbmUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjbG9uZWQgdHlwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNsb25lVHlwZWRBcnJheSh0eXBlZEFycmF5LCBpc0RlZXApIHtcbiAgdmFyIGJ1ZmZlciA9IGlzRGVlcCA/IGNsb25lQXJyYXlCdWZmZXIodHlwZWRBcnJheS5idWZmZXIpIDogdHlwZWRBcnJheS5idWZmZXI7XG4gIHJldHVybiBuZXcgdHlwZWRBcnJheS5jb25zdHJ1Y3RvcihidWZmZXIsIHR5cGVkQXJyYXkuYnl0ZU9mZnNldCwgdHlwZWRBcnJheS5sZW5ndGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZVR5cGVkQXJyYXk7XG4iLCJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcbmltcG9ydCBjbG9uZURhdGFWaWV3IGZyb20gJy4vX2Nsb25lRGF0YVZpZXcuanMnO1xuaW1wb3J0IGNsb25lUmVnRXhwIGZyb20gJy4vX2Nsb25lUmVnRXhwLmpzJztcbmltcG9ydCBjbG9uZVN5bWJvbCBmcm9tICcuL19jbG9uZVN5bWJvbC5qcyc7XG5pbXBvcnQgY2xvbmVUeXBlZEFycmF5IGZyb20gJy4vX2Nsb25lVHlwZWRBcnJheS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZSBiYXNlZCBvbiBpdHMgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNsb25pbmcgdmFsdWVzIHdpdGggdGFncyBvZlxuICogYEJvb2xlYW5gLCBgRGF0ZWAsIGBFcnJvcmAsIGBNYXBgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIGBTZXRgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVCeVRhZyhvYmplY3QsIHRhZywgaXNEZWVwKSB7XG4gIHZhciBDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yO1xuICBzd2l0Y2ggKHRhZykge1xuICAgIGNhc2UgYXJyYXlCdWZmZXJUYWc6XG4gICAgICByZXR1cm4gY2xvbmVBcnJheUJ1ZmZlcihvYmplY3QpO1xuXG4gICAgY2FzZSBib29sVGFnOlxuICAgIGNhc2UgZGF0ZVRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3Rvcigrb2JqZWN0KTtcblxuICAgIGNhc2UgZGF0YVZpZXdUYWc6XG4gICAgICByZXR1cm4gY2xvbmVEYXRhVmlldyhvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIGZsb2F0MzJUYWc6IGNhc2UgZmxvYXQ2NFRhZzpcbiAgICBjYXNlIGludDhUYWc6IGNhc2UgaW50MTZUYWc6IGNhc2UgaW50MzJUYWc6XG4gICAgY2FzZSB1aW50OFRhZzogY2FzZSB1aW50OENsYW1wZWRUYWc6IGNhc2UgdWludDE2VGFnOiBjYXNlIHVpbnQzMlRhZzpcbiAgICAgIHJldHVybiBjbG9uZVR5cGVkQXJyYXkob2JqZWN0LCBpc0RlZXApO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIG51bWJlclRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcihvYmplY3QpO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgICByZXR1cm4gY2xvbmVSZWdFeHAob2JqZWN0KTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yO1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICByZXR1cm4gY2xvbmVTeW1ib2wob2JqZWN0KTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVCeVRhZztcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0Q3JlYXRlID0gT2JqZWN0LmNyZWF0ZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5jcmVhdGVgIHdpdGhvdXQgc3VwcG9ydCBmb3IgYXNzaWduaW5nXG4gKiBwcm9wZXJ0aWVzIHRvIHRoZSBjcmVhdGVkIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHByb3RvIFRoZSBvYmplY3QgdG8gaW5oZXJpdCBmcm9tLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG9iamVjdC5cbiAqL1xudmFyIGJhc2VDcmVhdGUgPSAoZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIG9iamVjdCgpIHt9XG4gIHJldHVybiBmdW5jdGlvbihwcm90bykge1xuICAgIGlmICghaXNPYmplY3QocHJvdG8pKSB7XG4gICAgICByZXR1cm4ge307XG4gICAgfVxuICAgIGlmIChvYmplY3RDcmVhdGUpIHtcbiAgICAgIHJldHVybiBvYmplY3RDcmVhdGUocHJvdG8pO1xuICAgIH1cbiAgICBvYmplY3QucHJvdG90eXBlID0gcHJvdG87XG4gICAgdmFyIHJlc3VsdCA9IG5ldyBvYmplY3Q7XG4gICAgb2JqZWN0LnByb3RvdHlwZSA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9O1xufSgpKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNyZWF0ZTtcbiIsImltcG9ydCBiYXNlQ3JlYXRlIGZyb20gJy4vX2Jhc2VDcmVhdGUuanMnO1xuaW1wb3J0IGdldFByb3RvdHlwZSBmcm9tICcuL19nZXRQcm90b3R5cGUuanMnO1xuaW1wb3J0IGlzUHJvdG90eXBlIGZyb20gJy4vX2lzUHJvdG90eXBlLmpzJztcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBvYmplY3QgY2xvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGluaXRpYWxpemVkIGNsb25lLlxuICovXG5mdW5jdGlvbiBpbml0Q2xvbmVPYmplY3Qob2JqZWN0KSB7XG4gIHJldHVybiAodHlwZW9mIG9iamVjdC5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmICFpc1Byb3RvdHlwZShvYmplY3QpKVxuICAgID8gYmFzZUNyZWF0ZShnZXRQcm90b3R5cGUob2JqZWN0KSlcbiAgICA6IHt9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbml0Q2xvbmVPYmplY3Q7XG4iLCJpbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzTWFwYCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXAodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBtYXBUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc01hcDtcbiIsImltcG9ydCBiYXNlSXNNYXAgZnJvbSAnLi9fYmFzZUlzTWFwLmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzTWFwID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNNYXA7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBNYXBgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIG1hcCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzTWFwKG5ldyBNYXApO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNNYXAobmV3IFdlYWtNYXApO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzTWFwID0gbm9kZUlzTWFwID8gYmFzZVVuYXJ5KG5vZGVJc01hcCkgOiBiYXNlSXNNYXA7XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFwO1xuIiwiaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBzZXRUYWcgPSAnW29iamVjdCBTZXRdJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1NldGAgd2l0aG91dCBOb2RlLmpzIG9wdGltaXphdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzU2V0KHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGdldFRhZyh2YWx1ZSkgPT0gc2V0VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNTZXQ7XG4iLCJpbXBvcnQgYmFzZUlzU2V0IGZyb20gJy4vX2Jhc2VJc1NldC5qcyc7XG5pbXBvcnQgYmFzZVVuYXJ5IGZyb20gJy4vX2Jhc2VVbmFyeS5qcyc7XG5pbXBvcnQgbm9kZVV0aWwgZnJvbSAnLi9fbm9kZVV0aWwuanMnO1xuXG4vKiBOb2RlLmpzIGhlbHBlciByZWZlcmVuY2VzLiAqL1xudmFyIG5vZGVJc1NldCA9IG5vZGVVdGlsICYmIG5vZGVVdGlsLmlzU2V0O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU2V0YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjMuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzZXQsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1NldChuZXcgU2V0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU2V0KG5ldyBXZWFrU2V0KTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc1NldCA9IG5vZGVJc1NldCA/IGJhc2VVbmFyeShub2RlSXNTZXQpIDogYmFzZUlzU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBpc1NldDtcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgYXJyYXlFYWNoIGZyb20gJy4vX2FycmF5RWFjaC5qcyc7XG5pbXBvcnQgYXNzaWduVmFsdWUgZnJvbSAnLi9fYXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VBc3NpZ24gZnJvbSAnLi9fYmFzZUFzc2lnbi5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnbkluIGZyb20gJy4vX2Jhc2VBc3NpZ25Jbi5qcyc7XG5pbXBvcnQgY2xvbmVCdWZmZXIgZnJvbSAnLi9fY2xvbmVCdWZmZXIuanMnO1xuaW1wb3J0IGNvcHlBcnJheSBmcm9tICcuL19jb3B5QXJyYXkuanMnO1xuaW1wb3J0IGNvcHlTeW1ib2xzIGZyb20gJy4vX2NvcHlTeW1ib2xzLmpzJztcbmltcG9ydCBjb3B5U3ltYm9sc0luIGZyb20gJy4vX2NvcHlTeW1ib2xzSW4uanMnO1xuaW1wb3J0IGdldEFsbEtleXMgZnJvbSAnLi9fZ2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0QWxsS2V5c0luIGZyb20gJy4vX2dldEFsbEtleXNJbi5qcyc7XG5pbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaW5pdENsb25lQXJyYXkgZnJvbSAnLi9faW5pdENsb25lQXJyYXkuanMnO1xuaW1wb3J0IGluaXRDbG9uZUJ5VGFnIGZyb20gJy4vX2luaXRDbG9uZUJ5VGFnLmpzJztcbmltcG9ydCBpbml0Q2xvbmVPYmplY3QgZnJvbSAnLi9faW5pdENsb25lT2JqZWN0LmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNNYXAgZnJvbSAnLi9pc01hcC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNTZXQgZnJvbSAnLi9pc1NldC5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfRkxBVF9GTEFHID0gMixcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIGdlblRhZyA9ICdbb2JqZWN0IEdlbmVyYXRvckZ1bmN0aW9uXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKiBVc2VkIHRvIGlkZW50aWZ5IGB0b1N0cmluZ1RhZ2AgdmFsdWVzIHN1cHBvcnRlZCBieSBgXy5jbG9uZWAuICovXG52YXIgY2xvbmVhYmxlVGFncyA9IHt9O1xuY2xvbmVhYmxlVGFnc1thcmdzVGFnXSA9IGNsb25lYWJsZVRhZ3NbYXJyYXlUYWddID1cbmNsb25lYWJsZVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRhVmlld1RhZ10gPVxuY2xvbmVhYmxlVGFnc1tib29sVGFnXSA9IGNsb25lYWJsZVRhZ3NbZGF0ZVRhZ10gPVxuY2xvbmVhYmxlVGFnc1tmbG9hdDMyVGFnXSA9IGNsb25lYWJsZVRhZ3NbZmxvYXQ2NFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQ4VGFnXSA9IGNsb25lYWJsZVRhZ3NbaW50MTZUYWddID1cbmNsb25lYWJsZVRhZ3NbaW50MzJUYWddID0gY2xvbmVhYmxlVGFnc1ttYXBUYWddID1cbmNsb25lYWJsZVRhZ3NbbnVtYmVyVGFnXSA9IGNsb25lYWJsZVRhZ3Nbb2JqZWN0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3JlZ2V4cFRhZ10gPSBjbG9uZWFibGVUYWdzW3NldFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tzdHJpbmdUYWddID0gY2xvbmVhYmxlVGFnc1tzeW1ib2xUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDhUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50OENsYW1wZWRUYWddID1cbmNsb25lYWJsZVRhZ3NbdWludDE2VGFnXSA9IGNsb25lYWJsZVRhZ3NbdWludDMyVGFnXSA9IHRydWU7XG5jbG9uZWFibGVUYWdzW2Vycm9yVGFnXSA9IGNsb25lYWJsZVRhZ3NbZnVuY1RhZ10gPVxuY2xvbmVhYmxlVGFnc1t3ZWFrTWFwVGFnXSA9IGZhbHNlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNsb25lYCBhbmQgYF8uY2xvbmVEZWVwYCB3aGljaCB0cmFja3NcbiAqIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gRGVlcCBjbG9uZVxuICogIDIgLSBGbGF0dGVuIGluaGVyaXRlZCBwcm9wZXJ0aWVzXG4gKiAgNCAtIENsb25lIHN5bWJvbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcGFyYW0ge3N0cmluZ30gW2tleV0gVGhlIGtleSBvZiBgdmFsdWVgLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBwYXJlbnQgb2JqZWN0IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIG9iamVjdHMgYW5kIHRoZWlyIGNsb25lIGNvdW50ZXJwYXJ0cy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VDbG9uZSh2YWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwga2V5LCBvYmplY3QsIHN0YWNrKSB7XG4gIHZhciByZXN1bHQsXG4gICAgICBpc0RlZXAgPSBiaXRtYXNrICYgQ0xPTkVfREVFUF9GTEFHLFxuICAgICAgaXNGbGF0ID0gYml0bWFzayAmIENMT05FX0ZMQVRfRkxBRyxcbiAgICAgIGlzRnVsbCA9IGJpdG1hc2sgJiBDTE9ORV9TWU1CT0xTX0ZMQUc7XG5cbiAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICByZXN1bHQgPSBvYmplY3QgPyBjdXN0b21pemVyKHZhbHVlLCBrZXksIG9iamVjdCwgc3RhY2spIDogY3VzdG9taXplcih2YWx1ZSk7XG4gIH1cbiAgaWYgKHJlc3VsdCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBpZiAoIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgaXNBcnIgPSBpc0FycmF5KHZhbHVlKTtcbiAgaWYgKGlzQXJyKSB7XG4gICAgcmVzdWx0ID0gaW5pdENsb25lQXJyYXkodmFsdWUpO1xuICAgIGlmICghaXNEZWVwKSB7XG4gICAgICByZXR1cm4gY29weUFycmF5KHZhbHVlLCByZXN1bHQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgICAgaXNGdW5jID0gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZztcblxuICAgIGlmIChpc0J1ZmZlcih2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBjbG9uZUJ1ZmZlcih2YWx1ZSwgaXNEZWVwKTtcbiAgICB9XG4gICAgaWYgKHRhZyA9PSBvYmplY3RUYWcgfHwgdGFnID09IGFyZ3NUYWcgfHwgKGlzRnVuYyAmJiAhb2JqZWN0KSkge1xuICAgICAgcmVzdWx0ID0gKGlzRmxhdCB8fCBpc0Z1bmMpID8ge30gOiBpbml0Q2xvbmVPYmplY3QodmFsdWUpO1xuICAgICAgaWYgKCFpc0RlZXApIHtcbiAgICAgICAgcmV0dXJuIGlzRmxhdFxuICAgICAgICAgID8gY29weVN5bWJvbHNJbih2YWx1ZSwgYmFzZUFzc2lnbkluKHJlc3VsdCwgdmFsdWUpKVxuICAgICAgICAgIDogY29weVN5bWJvbHModmFsdWUsIGJhc2VBc3NpZ24ocmVzdWx0LCB2YWx1ZSkpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBpZiAoIWNsb25lYWJsZVRhZ3NbdGFnXSkge1xuICAgICAgICByZXR1cm4gb2JqZWN0ID8gdmFsdWUgOiB7fTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGluaXRDbG9uZUJ5VGFnKHZhbHVlLCB0YWcsIGlzRGVlcCk7XG4gICAgfVxuICB9XG4gIC8vIENoZWNrIGZvciBjaXJjdWxhciByZWZlcmVuY2VzIGFuZCByZXR1cm4gaXRzIGNvcnJlc3BvbmRpbmcgY2xvbmUuXG4gIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KHZhbHVlKTtcbiAgaWYgKHN0YWNrZWQpIHtcbiAgICByZXR1cm4gc3RhY2tlZDtcbiAgfVxuICBzdGFjay5zZXQodmFsdWUsIHJlc3VsdCk7XG5cbiAgaWYgKGlzU2V0KHZhbHVlKSkge1xuICAgIHZhbHVlLmZvckVhY2goZnVuY3Rpb24oc3ViVmFsdWUpIHtcbiAgICAgIHJlc3VsdC5hZGQoYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdWJWYWx1ZSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH0gZWxzZSBpZiAoaXNNYXAodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHQuc2V0KGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICAgIH0pO1xuICB9XG5cbiAgdmFyIGtleXNGdW5jID0gaXNGdWxsXG4gICAgPyAoaXNGbGF0ID8gZ2V0QWxsS2V5c0luIDogZ2V0QWxsS2V5cylcbiAgICA6IChpc0ZsYXQgPyBrZXlzSW4gOiBrZXlzKTtcblxuICB2YXIgcHJvcHMgPSBpc0FyciA/IHVuZGVmaW5lZCA6IGtleXNGdW5jKHZhbHVlKTtcbiAgYXJyYXlFYWNoKHByb3BzIHx8IHZhbHVlLCBmdW5jdGlvbihzdWJWYWx1ZSwga2V5KSB7XG4gICAgaWYgKHByb3BzKSB7XG4gICAgICBrZXkgPSBzdWJWYWx1ZTtcbiAgICAgIHN1YlZhbHVlID0gdmFsdWVba2V5XTtcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgcG9wdWxhdGUgY2xvbmUgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBhc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgYmFzZUNsb25lKHN1YlZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIHZhbHVlLCBzdGFjaykpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUNsb25lO1xuIiwiaW1wb3J0IGJhc2VDbG9uZSBmcm9tICcuL19iYXNlQ2xvbmUuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogQ3JlYXRlcyBhIHNoYWxsb3cgY2xvbmUgb2YgYHZhbHVlYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBtZXRob2QgaXMgbG9vc2VseSBiYXNlZCBvbiB0aGVcbiAqIFtzdHJ1Y3R1cmVkIGNsb25lIGFsZ29yaXRobV0oaHR0cHM6Ly9tZG4uaW8vU3RydWN0dXJlZF9jbG9uZV9hbGdvcml0aG0pXG4gKiBhbmQgc3VwcG9ydHMgY2xvbmluZyBhcnJheXMsIGFycmF5IGJ1ZmZlcnMsIGJvb2xlYW5zLCBkYXRlIG9iamVjdHMsIG1hcHMsXG4gKiBudW1iZXJzLCBgT2JqZWN0YCBvYmplY3RzLCByZWdleGVzLCBzZXRzLCBzdHJpbmdzLCBzeW1ib2xzLCBhbmQgdHlwZWRcbiAqIGFycmF5cy4gVGhlIG93biBlbnVtZXJhYmxlIHByb3BlcnRpZXMgb2YgYGFyZ3VtZW50c2Agb2JqZWN0cyBhcmUgY2xvbmVkXG4gKiBhcyBwbGFpbiBvYmplY3RzLiBBbiBlbXB0eSBvYmplY3QgaXMgcmV0dXJuZWQgZm9yIHVuY2xvbmVhYmxlIHZhbHVlcyBzdWNoXG4gKiBhcyBlcnJvciBvYmplY3RzLCBmdW5jdGlvbnMsIERPTSBub2RlcywgYW5kIFdlYWtNYXBzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVEZWVwXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBzaGFsbG93ID0gXy5jbG9uZShvYmplY3RzKTtcbiAqIGNvbnNvbGUubG9nKHNoYWxsb3dbMF0gPT09IG9iamVjdHNbMF0pO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBjbG9uZSh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1hcGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlXG4gKiBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgbWFwcGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheU1hcChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TWFwO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBiYXNlR2V0VGFnKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1N5bWJvbDtcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5cbi8qKiBFcnJvciBtZXNzYWdlIGNvbnN0YW50cy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIHRoYXQgbWVtb2l6ZXMgdGhlIHJlc3VsdCBvZiBgZnVuY2AuIElmIGByZXNvbHZlcmAgaXNcbiAqIHByb3ZpZGVkLCBpdCBkZXRlcm1pbmVzIHRoZSBjYWNoZSBrZXkgZm9yIHN0b3JpbmcgdGhlIHJlc3VsdCBiYXNlZCBvbiB0aGVcbiAqIGFyZ3VtZW50cyBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uIEJ5IGRlZmF1bHQsIHRoZSBmaXJzdCBhcmd1bWVudFxuICogcHJvdmlkZWQgdG8gdGhlIG1lbW9pemVkIGZ1bmN0aW9uIGlzIHVzZWQgYXMgdGhlIG1hcCBjYWNoZSBrZXkuIFRoZSBgZnVuY2BcbiAqIGlzIGludm9rZWQgd2l0aCB0aGUgYHRoaXNgIGJpbmRpbmcgb2YgdGhlIG1lbW9pemVkIGZ1bmN0aW9uLlxuICpcbiAqICoqTm90ZToqKiBUaGUgY2FjaGUgaXMgZXhwb3NlZCBhcyB0aGUgYGNhY2hlYCBwcm9wZXJ0eSBvbiB0aGUgbWVtb2l6ZWRcbiAqIGZ1bmN0aW9uLiBJdHMgY3JlYXRpb24gbWF5IGJlIGN1c3RvbWl6ZWQgYnkgcmVwbGFjaW5nIHRoZSBgXy5tZW1vaXplLkNhY2hlYFxuICogY29uc3RydWN0b3Igd2l0aCBvbmUgd2hvc2UgaW5zdGFuY2VzIGltcGxlbWVudCB0aGVcbiAqIFtgTWFwYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcHJvcGVydGllcy1vZi10aGUtbWFwLXByb3RvdHlwZS1vYmplY3QpXG4gKiBtZXRob2QgaW50ZXJmYWNlIG9mIGBjbGVhcmAsIGBkZWxldGVgLCBgZ2V0YCwgYGhhc2AsIGFuZCBgc2V0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgRnVuY3Rpb25cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtyZXNvbHZlcl0gVGhlIGZ1bmN0aW9uIHRvIHJlc29sdmUgdGhlIGNhY2hlIGtleS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEsICdiJzogMiB9O1xuICogdmFyIG90aGVyID0geyAnYyc6IDMsICdkJzogNCB9O1xuICpcbiAqIHZhciB2YWx1ZXMgPSBfLm1lbW9pemUoXy52YWx1ZXMpO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiB2YWx1ZXMob3RoZXIpO1xuICogLy8gPT4gWzMsIDRdXG4gKlxuICogb2JqZWN0LmEgPSAyO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiAvLyBNb2RpZnkgdGhlIHJlc3VsdCBjYWNoZS5cbiAqIHZhbHVlcy5jYWNoZS5zZXQob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIHZhbHVlcyhvYmplY3QpO1xuICogLy8gPT4gWydhJywgJ2InXVxuICpcbiAqIC8vIFJlcGxhY2UgYF8ubWVtb2l6ZS5DYWNoZWAuXG4gKiBfLm1lbW9pemUuQ2FjaGUgPSBXZWFrTWFwO1xuICovXG5mdW5jdGlvbiBtZW1vaXplKGZ1bmMsIHJlc29sdmVyKSB7XG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nIHx8IChyZXNvbHZlciAhPSBudWxsICYmIHR5cGVvZiByZXNvbHZlciAhPSAnZnVuY3Rpb24nKSkge1xuICAgIHRocm93IG5ldyBUeXBlRXJyb3IoRlVOQ19FUlJPUl9URVhUKTtcbiAgfVxuICB2YXIgbWVtb2l6ZWQgPSBmdW5jdGlvbigpIHtcbiAgICB2YXIgYXJncyA9IGFyZ3VtZW50cyxcbiAgICAgICAga2V5ID0gcmVzb2x2ZXIgPyByZXNvbHZlci5hcHBseSh0aGlzLCBhcmdzKSA6IGFyZ3NbMF0sXG4gICAgICAgIGNhY2hlID0gbWVtb2l6ZWQuY2FjaGU7XG5cbiAgICBpZiAoY2FjaGUuaGFzKGtleSkpIHtcbiAgICAgIHJldHVybiBjYWNoZS5nZXQoa2V5KTtcbiAgICB9XG4gICAgdmFyIHJlc3VsdCA9IGZ1bmMuYXBwbHkodGhpcywgYXJncyk7XG4gICAgbWVtb2l6ZWQuY2FjaGUgPSBjYWNoZS5zZXQoa2V5LCByZXN1bHQpIHx8IGNhY2hlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG4gIG1lbW9pemVkLmNhY2hlID0gbmV3IChtZW1vaXplLkNhY2hlIHx8IE1hcENhY2hlKTtcbiAgcmV0dXJuIG1lbW9pemVkO1xufVxuXG4vLyBFeHBvc2UgYE1hcENhY2hlYC5cbm1lbW9pemUuQ2FjaGUgPSBNYXBDYWNoZTtcblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZTtcbiIsImltcG9ydCBtZW1vaXplIGZyb20gJy4vbWVtb2l6ZS5qcyc7XG5cbi8qKiBVc2VkIGFzIHRoZSBtYXhpbXVtIG1lbW9pemUgY2FjaGUgc2l6ZS4gKi9cbnZhciBNQVhfTUVNT0laRV9TSVpFID0gNTAwO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5tZW1vaXplYCB3aGljaCBjbGVhcnMgdGhlIG1lbW9pemVkIGZ1bmN0aW9uJ3NcbiAqIGNhY2hlIHdoZW4gaXQgZXhjZWVkcyBgTUFYX01FTU9JWkVfU0laRWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGhhdmUgaXRzIG91dHB1dCBtZW1vaXplZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IG1lbW9pemVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtZW1vaXplQ2FwcGVkKGZ1bmMpIHtcbiAgdmFyIHJlc3VsdCA9IG1lbW9pemUoZnVuYywgZnVuY3Rpb24oa2V5KSB7XG4gICAgaWYgKGNhY2hlLnNpemUgPT09IE1BWF9NRU1PSVpFX1NJWkUpIHtcbiAgICAgIGNhY2hlLmNsZWFyKCk7XG4gICAgfVxuICAgIHJldHVybiBrZXk7XG4gIH0pO1xuXG4gIHZhciBjYWNoZSA9IHJlc3VsdC5jYWNoZTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWVtb2l6ZUNhcHBlZDtcbiIsImltcG9ydCBtZW1vaXplQ2FwcGVkIGZyb20gJy4vX21lbW9pemVDYXBwZWQuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVQcm9wTmFtZSA9IC9bXi5bXFxdXSt8XFxbKD86KC0/XFxkKyg/OlxcLlxcZCspPyl8KFtcIiddKSgoPzooPyFcXDIpW15cXFxcXXxcXFxcLikqPylcXDIpXFxdfCg/PSg/OlxcLnxcXFtcXF0pKD86XFwufFxcW1xcXXwkKSkvZztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggYmFja3NsYXNoZXMgaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVFc2NhcGVDaGFyID0gL1xcXFwoXFxcXCk/L2c7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqL1xudmFyIHN0cmluZ1RvUGF0aCA9IG1lbW9pemVDYXBwZWQoZnVuY3Rpb24oc3RyaW5nKSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKHN0cmluZy5jaGFyQ29kZUF0KDApID09PSA0NiAvKiAuICovKSB7XG4gICAgcmVzdWx0LnB1c2goJycpO1xuICB9XG4gIHN0cmluZy5yZXBsYWNlKHJlUHJvcE5hbWUsIGZ1bmN0aW9uKG1hdGNoLCBudW1iZXIsIHF1b3RlLCBzdWJTdHJpbmcpIHtcbiAgICByZXN1bHQucHVzaChxdW90ZSA/IHN1YlN0cmluZy5yZXBsYWNlKHJlRXNjYXBlQ2hhciwgJyQxJykgOiAobnVtYmVyIHx8IG1hdGNoKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ1RvUGF0aDtcbiIsImltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIGtleSBpZiBpdCdzIG5vdCBhIHN0cmluZyBvciBzeW1ib2wuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7c3RyaW5nfHN5bWJvbH0gUmV0dXJucyB0aGUga2V5LlxuICovXG5mdW5jdGlvbiB0b0tleSh2YWx1ZSkge1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8IGlzU3ltYm9sKHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvS2V5O1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIElORklOSVRZID0gMSAvIDA7XG5cbi8qKiBVc2VkIHRvIGNvbnZlcnQgc3ltYm9scyB0byBwcmltaXRpdmVzIGFuZCBzdHJpbmdzLiAqL1xudmFyIHN5bWJvbFByb3RvID0gU3ltYm9sID8gU3ltYm9sLnByb3RvdHlwZSA6IHVuZGVmaW5lZCxcbiAgICBzeW1ib2xUb1N0cmluZyA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udG9TdHJpbmcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udG9TdHJpbmdgIHdoaWNoIGRvZXNuJ3QgY29udmVydCBudWxsaXNoXG4gKiB2YWx1ZXMgdG8gZW1wdHkgc3RyaW5ncy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcHJvY2Vzcy5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHN0cmluZy5cbiAqL1xuZnVuY3Rpb24gYmFzZVRvU3RyaW5nKHZhbHVlKSB7XG4gIC8vIEV4aXQgZWFybHkgZm9yIHN0cmluZ3MgdG8gYXZvaWQgYSBwZXJmb3JtYW5jZSBoaXQgaW4gc29tZSBlbnZpcm9ubWVudHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgLy8gUmVjdXJzaXZlbHkgY29udmVydCB2YWx1ZXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIGJhc2VUb1N0cmluZykgKyAnJztcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHN5bWJvbFRvU3RyaW5nID8gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWx1ZSkgOiAnJztcbiAgfVxuICB2YXIgcmVzdWx0ID0gKHZhbHVlICsgJycpO1xuICByZXR1cm4gKHJlc3VsdCA9PSAnMCcgJiYgKDEgLyB2YWx1ZSkgPT0gLUlORklOSVRZKSA/ICctMCcgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUb1N0cmluZztcbiIsImltcG9ydCBiYXNlVG9TdHJpbmcgZnJvbSAnLi9fYmFzZVRvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nLiBBbiBlbXB0eSBzdHJpbmcgaXMgcmV0dXJuZWQgZm9yIGBudWxsYFxuICogYW5kIGB1bmRlZmluZWRgIHZhbHVlcy4gVGhlIHNpZ24gb2YgYC0wYCBpcyBwcmVzZXJ2ZWQuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnRvU3RyaW5nKG51bGwpO1xuICogLy8gPT4gJydcbiAqXG4gKiBfLnRvU3RyaW5nKC0wKTtcbiAqIC8vID0+ICctMCdcbiAqXG4gKiBfLnRvU3RyaW5nKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiAnMSwyLDMnXG4gKi9cbmZ1bmN0aW9uIHRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PSBudWxsID8gJycgOiBiYXNlVG9TdHJpbmcodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1N0cmluZztcbiIsImltcG9ydCBhcnJheU1hcCBmcm9tICcuL19hcnJheU1hcC5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuaW1wb3J0IHN0cmluZ1RvUGF0aCBmcm9tICcuL19zdHJpbmdUb1BhdGguanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9QYXRoKCdhLmIuYycpO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gKlxuICogXy50b1BhdGgoJ2FbMF0uYi5jJyk7XG4gKiAvLyA9PiBbJ2EnLCAnMCcsICdiJywgJ2MnXVxuICovXG5mdW5jdGlvbiB0b1BhdGgodmFsdWUpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIGFycmF5TWFwKHZhbHVlLCB0b0tleSk7XG4gIH1cbiAgcmV0dXJuIGlzU3ltYm9sKHZhbHVlKSA/IFt2YWx1ZV0gOiBjb3B5QXJyYXkoc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b1BhdGg7XG4iLCJpbXBvcnQgYmFzZUNsb25lIGZyb20gJy4vX2Jhc2VDbG9uZS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9TWU1CT0xTX0ZMQUcgPSA0O1xuXG4vKipcbiAqIFRoaXMgbWV0aG9kIGlzIGxpa2UgYF8uY2xvbmVgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMS4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFt7ICdhJzogMSB9LCB7ICdiJzogMiB9XTtcbiAqXG4gKiB2YXIgZGVlcCA9IF8uY2xvbmVEZWVwKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coZGVlcFswXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBjbG9uZURlZXAodmFsdWUpIHtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVEZWVwO1xuIiwiaW1wb3J0IGNsb25lIGZyb20gJ2xvZGFzaC9jbG9uZSc7XG5pbXBvcnQgdG9QYXRoIGZyb20gJ2xvZGFzaC90b1BhdGgnO1xuaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG4vLyBBc3NlcnRpb25zXG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgdmFsdWUgYW4gZW1wdHkgYXJyYXk/ICovXG5leHBvcnQgY29uc3QgaXNFbXB0eUFycmF5ID0gKHZhbHVlPzogYW55KSA9PlxuICBBcnJheS5pc0FycmF5KHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPT09IDA7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0IGEgRnVuY3Rpb24/ICovXG5leHBvcnQgY29uc3QgaXNGdW5jdGlvbiA9IChvYmo6IGFueSk6IG9iaiBpcyBGdW5jdGlvbiA9PlxuICB0eXBlb2Ygb2JqID09PSAnZnVuY3Rpb24nO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdCBhbiBPYmplY3Q/ICovXG5leHBvcnQgY29uc3QgaXNPYmplY3QgPSAob2JqOiBhbnkpOiBvYmogaXMgT2JqZWN0ID0+XG4gIG9iaiAhPT0gbnVsbCAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0JztcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYW4gaW50ZWdlcj8gKi9cbmV4cG9ydCBjb25zdCBpc0ludGVnZXIgPSAob2JqOiBhbnkpOiBib29sZWFuID0+XG4gIFN0cmluZyhNYXRoLmZsb29yKE51bWJlcihvYmopKSkgPT09IG9iajtcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYSBzdHJpbmc/ICovXG5leHBvcnQgY29uc3QgaXNTdHJpbmcgPSAob2JqOiBhbnkpOiBvYmogaXMgc3RyaW5nID0+XG4gIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBTdHJpbmddJztcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYSBOYU4/ICovXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tc2VsZi1jb21wYXJlXG5leHBvcnQgY29uc3QgaXNOYU4gPSAob2JqOiBhbnkpOiBib29sZWFuID0+IG9iaiAhPT0gb2JqO1xuXG4vKiogQHByaXZhdGUgRG9lcyBhIFJlYWN0IGNvbXBvbmVudCBoYXZlIGV4YWN0bHkgMCBjaGlsZHJlbj8gKi9cbmV4cG9ydCBjb25zdCBpc0VtcHR5Q2hpbGRyZW4gPSAoY2hpbGRyZW46IGFueSk6IGJvb2xlYW4gPT5cbiAgUmVhY3QuQ2hpbGRyZW4uY291bnQoY2hpbGRyZW4pID09PSAwO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdC92YWx1ZSBhIHByb21pc2U/ICovXG5leHBvcnQgY29uc3QgaXNQcm9taXNlID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBQcm9taXNlTGlrZTxhbnk+ID0+XG4gIGlzT2JqZWN0KHZhbHVlKSAmJiBpc0Z1bmN0aW9uKHZhbHVlLnRoZW4pO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdC92YWx1ZSBhIHR5cGUgb2Ygc3ludGhldGljIGV2ZW50PyAqL1xuZXhwb3J0IGNvbnN0IGlzSW5wdXRFdmVudCA9ICh2YWx1ZTogYW55KTogdmFsdWUgaXMgUmVhY3QuU3ludGhldGljRXZlbnQ8YW55PiA9PlxuICB2YWx1ZSAmJiBpc09iamVjdCh2YWx1ZSkgJiYgaXNPYmplY3QodmFsdWUudGFyZ2V0KTtcblxuLyoqXG4gKiBTYW1lIGFzIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgYnV0IHdyYXBzIGluIGEgdHJ5LWNhdGNoIGJsb2NrLiBJbiBJRSBpdCBpc1xuICogbm90IHNhZmUgdG8gY2FsbCBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGlmIHRoZXJlIGlzIG5vdGhpbmcgZm9jdXNlZC5cbiAqXG4gKiBUaGUgYWN0aXZlRWxlbWVudCB3aWxsIGJlIG51bGwgb25seSBpZiB0aGUgZG9jdW1lbnQgb3IgZG9jdW1lbnQgYm9keSBpcyBub3RcbiAqIHlldCBkZWZpbmVkLlxuICpcbiAqIEBwYXJhbSB7P0RvY3VtZW50fSBkb2MgRGVmYXVsdHMgdG8gY3VycmVudCBkb2N1bWVudC5cbiAqIEByZXR1cm4ge0VsZW1lbnQgfCBudWxsfVxuICogQHNlZSBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmJqcy9ibG9iL21hc3Rlci9wYWNrYWdlcy9mYmpzL3NyYy9jb3JlL2RvbS9nZXRBY3RpdmVFbGVtZW50LmpzXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRBY3RpdmVFbGVtZW50KGRvYz86IERvY3VtZW50KTogRWxlbWVudCB8IG51bGwge1xuICBkb2MgPSBkb2MgfHwgKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgPyBkb2N1bWVudCA6IHVuZGVmaW5lZCk7XG4gIGlmICh0eXBlb2YgZG9jID09PSAndW5kZWZpbmVkJykge1xuICAgIHJldHVybiBudWxsO1xuICB9XG4gIHRyeSB7XG4gICAgcmV0dXJuIGRvYy5hY3RpdmVFbGVtZW50IHx8IGRvYy5ib2R5O1xuICB9IGNhdGNoIChlKSB7XG4gICAgcmV0dXJuIGRvYy5ib2R5O1xuICB9XG59XG5cbi8qKlxuICogRGVlcGx5IGdldCBhIHZhbHVlIGZyb20gYW4gb2JqZWN0IHZpYSBpdHMgcGF0aC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEluKFxuICBvYmo6IGFueSxcbiAga2V5OiBzdHJpbmcgfCBzdHJpbmdbXSxcbiAgZGVmPzogYW55LFxuICBwOiBudW1iZXIgPSAwXG4pIHtcbiAgY29uc3QgcGF0aCA9IHRvUGF0aChrZXkpO1xuICB3aGlsZSAob2JqICYmIHAgPCBwYXRoLmxlbmd0aCkge1xuICAgIG9iaiA9IG9ialtwYXRoW3ArK11dO1xuICB9XG4gIHJldHVybiBvYmogPT09IHVuZGVmaW5lZCA/IGRlZiA6IG9iajtcbn1cblxuLyoqXG4gKiBEZWVwbHkgc2V0IGEgdmFsdWUgZnJvbSBpbiBvYmplY3QgdmlhIGl0J3MgcGF0aC4gSWYgdGhlIHZhbHVlIGF0IGBwYXRoYFxuICogaGFzIGNoYW5nZWQsIHJldHVybiBhIHNoYWxsb3cgY29weSBvZiBvYmogd2l0aCBgdmFsdWVgIHNldCBhdCBgcGF0aGAuXG4gKiBJZiBgdmFsdWVgIGhhcyBub3QgY2hhbmdlZCwgcmV0dXJuIHRoZSBvcmlnaW5hbCBgb2JqYC5cbiAqXG4gKiBFeGlzdGluZyBvYmplY3RzIC8gYXJyYXlzIGFsb25nIGBwYXRoYCBhcmUgYWxzbyBzaGFsbG93IGNvcGllZC4gU2libGluZ1xuICogb2JqZWN0cyBhbG9uZyBwYXRoIHJldGFpbiB0aGUgc2FtZSBpbnRlcm5hbCBqcyByZWZlcmVuY2UuIFNpbmNlIG5ld1xuICogb2JqZWN0cyAvIGFycmF5cyBhcmUgb25seSBjcmVhdGVkIGFsb25nIGBwYXRoYCwgd2UgY2FuIHRlc3QgaWYgYW55dGhpbmdcbiAqIGNoYW5nZWQgaW4gYSBuZXN0ZWQgc3RydWN0dXJlIGJ5IGNvbXBhcmluZyB0aGUgb2JqZWN0J3MgcmVmZXJlbmNlIGluXG4gKiB0aGUgb2xkIGFuZCBuZXcgb2JqZWN0LCBzaW1pbGFyIHRvIGhvdyBydXNzaWFuIGRvbGwgY2FjaGUgaW52YWxpZGF0aW9uXG4gKiB3b3Jrcy5cbiAqXG4gKiBJbiBlYXJsaWVyIHZlcnNpb25zIG9mIHRoaXMgZnVuY3Rpb24sIHdoaWNoIHVzZWQgY2xvbmVEZWVwLCB0aGVyZSB3ZXJlXG4gKiBpc3N1ZXMgd2hlcmVieSBzZXR0aW5ncyBhIG5lc3RlZCB2YWx1ZSB3b3VsZCBtdXRhdGUgdGhlIHBhcmVudFxuICogaW5zdGVhZCBvZiBjcmVhdGluZyBhIG5ldyBvYmplY3QuIGBjbG9uZWAgYXZvaWRzIHRoYXQgYnVnIG1ha2luZyBhXG4gKiBzaGFsbG93IGNvcHkgb2YgdGhlIG9iamVjdHMgYWxvbmcgdGhlIHVwZGF0ZSBwYXRoXG4gKiBzbyBubyBvYmplY3QgaXMgbXV0YXRlZCBpbiBwbGFjZS5cbiAqXG4gKiBCZWZvcmUgY2hhbmdpbmcgdGhpcyBmdW5jdGlvbiwgcGxlYXNlIHJlYWQgdGhyb3VnaCB0aGUgZm9sbG93aW5nXG4gKiBkaXNjdXNzaW9ucy5cbiAqXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9kZXZlbG9waXQvbGlua3N0YXRlXG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qYXJlZHBhbG1lci9mb3JtaWsvcHVsbC8xMjNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldEluKG9iajogYW55LCBwYXRoOiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xuICBsZXQgcmVzOiBhbnkgPSBjbG9uZShvYmopOyAvLyB0aGlzIGtlZXBzIGluaGVyaXRhbmNlIHdoZW4gb2JqIGlzIGEgY2xhc3NcbiAgbGV0IHJlc1ZhbDogYW55ID0gcmVzO1xuICBsZXQgaSA9IDA7XG4gIGxldCBwYXRoQXJyYXkgPSB0b1BhdGgocGF0aCk7XG5cbiAgZm9yICg7IGkgPCBwYXRoQXJyYXkubGVuZ3RoIC0gMTsgaSsrKSB7XG4gICAgY29uc3QgY3VycmVudFBhdGg6IHN0cmluZyA9IHBhdGhBcnJheVtpXTtcbiAgICBsZXQgY3VycmVudE9iajogYW55ID0gZ2V0SW4ob2JqLCBwYXRoQXJyYXkuc2xpY2UoMCwgaSArIDEpKTtcblxuICAgIGlmIChjdXJyZW50T2JqICYmIChpc09iamVjdChjdXJyZW50T2JqKSB8fCBBcnJheS5pc0FycmF5KGN1cnJlbnRPYmopKSkge1xuICAgICAgcmVzVmFsID0gcmVzVmFsW2N1cnJlbnRQYXRoXSA9IGNsb25lKGN1cnJlbnRPYmopO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBuZXh0UGF0aDogc3RyaW5nID0gcGF0aEFycmF5W2kgKyAxXTtcbiAgICAgIHJlc1ZhbCA9IHJlc1ZhbFtjdXJyZW50UGF0aF0gPVxuICAgICAgICBpc0ludGVnZXIobmV4dFBhdGgpICYmIE51bWJlcihuZXh0UGF0aCkgPj0gMCA/IFtdIDoge307XG4gICAgfVxuICB9XG5cbiAgLy8gUmV0dXJuIG9yaWdpbmFsIG9iamVjdCBpZiBuZXcgdmFsdWUgaXMgdGhlIHNhbWUgYXMgY3VycmVudFxuICBpZiAoKGkgPT09IDAgPyBvYmogOiByZXNWYWwpW3BhdGhBcnJheVtpXV0gPT09IHZhbHVlKSB7XG4gICAgcmV0dXJuIG9iajtcbiAgfVxuXG4gIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHJlc1ZhbFtwYXRoQXJyYXlbaV1dO1xuICB9IGVsc2Uge1xuICAgIHJlc1ZhbFtwYXRoQXJyYXlbaV1dID0gdmFsdWU7XG4gIH1cblxuICAvLyBJZiB0aGUgcGF0aCBhcnJheSBoYXMgYSBzaW5nbGUgZWxlbWVudCwgdGhlIGxvb3AgZGlkIG5vdCBydW4uXG4gIC8vIERlbGV0aW5nIG9uIGByZXNWYWxgIGhhZCBubyBlZmZlY3QgaW4gdGhpcyBzY2VuYXJpbywgc28gd2UgZGVsZXRlIG9uIHRoZSByZXN1bHQgaW5zdGVhZC5cbiAgaWYgKGkgPT09IDAgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgIGRlbGV0ZSByZXNbcGF0aEFycmF5W2ldXTtcbiAgfVxuXG4gIHJldHVybiByZXM7XG59XG5cbi8qKlxuICogUmVjdXJzaXZlbHkgYSBzZXQgdGhlIHNhbWUgdmFsdWUgZm9yIGFsbCBrZXlzIGFuZCBhcnJheXMgbmVzdGVkIG9iamVjdCwgY2xvbmluZ1xuICogQHBhcmFtIG9iamVjdFxuICogQHBhcmFtIHZhbHVlXG4gKiBAcGFyYW0gdmlzaXRlZFxuICogQHBhcmFtIHJlc3BvbnNlXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBzZXROZXN0ZWRPYmplY3RWYWx1ZXM8VD4oXG4gIG9iamVjdDogYW55LFxuICB2YWx1ZTogYW55LFxuICB2aXNpdGVkOiBhbnkgPSBuZXcgV2Vha01hcCgpLFxuICByZXNwb25zZTogYW55ID0ge31cbik6IFQge1xuICBmb3IgKGxldCBrIG9mIE9iamVjdC5rZXlzKG9iamVjdCkpIHtcbiAgICBjb25zdCB2YWwgPSBvYmplY3Rba107XG4gICAgaWYgKGlzT2JqZWN0KHZhbCkpIHtcbiAgICAgIGlmICghdmlzaXRlZC5nZXQodmFsKSkge1xuICAgICAgICB2aXNpdGVkLnNldCh2YWwsIHRydWUpO1xuICAgICAgICAvLyBJbiBvcmRlciB0byBrZWVwIGFycmF5IHZhbHVlcyBjb25zaXN0ZW50IGZvciBib3RoIGRvdCBwYXRoICBhbmRcbiAgICAgICAgLy8gYnJhY2tldCBzeW50YXgsIHdlIG5lZWQgdG8gY2hlY2sgaWYgdGhpcyBpcyBhbiBhcnJheSBzbyB0aGF0XG4gICAgICAgIC8vIHRoaXMgd2lsbCBvdXRwdXQgIHsgZnJpZW5kczogW3RydWVdIH0gYW5kIG5vdCB7IGZyaWVuZHM6IHsgXCIwXCI6IHRydWUgfSB9XG4gICAgICAgIHJlc3BvbnNlW2tdID0gQXJyYXkuaXNBcnJheSh2YWwpID8gW10gOiB7fTtcbiAgICAgICAgc2V0TmVzdGVkT2JqZWN0VmFsdWVzKHZhbCwgdmFsdWUsIHZpc2l0ZWQsIHJlc3BvbnNlW2tdKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcmVzcG9uc2Vba10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cblxuICByZXR1cm4gcmVzcG9uc2U7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtaWtDb250ZXh0VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG5leHBvcnQgY29uc3QgRm9ybWlrQ29udGV4dCA9IFJlYWN0LmNyZWF0ZUNvbnRleHQ8Rm9ybWlrQ29udGV4dFR5cGU8YW55Pj4oXG4gIHVuZGVmaW5lZCBhcyBhbnlcbik7XG5leHBvcnQgY29uc3QgRm9ybWlrUHJvdmlkZXIgPSBGb3JtaWtDb250ZXh0LlByb3ZpZGVyO1xuZXhwb3J0IGNvbnN0IEZvcm1pa0NvbnN1bWVyID0gRm9ybWlrQ29udGV4dC5Db25zdW1lcjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZvcm1pa0NvbnRleHQ8VmFsdWVzPigpIHtcbiAgY29uc3QgZm9ybWlrID0gUmVhY3QudXNlQ29udGV4dDxGb3JtaWtDb250ZXh0VHlwZTxWYWx1ZXM+PihGb3JtaWtDb250ZXh0KTtcblxuICBpbnZhcmlhbnQoXG4gICAgISFmb3JtaWssXG4gICAgYEZvcm1payBjb250ZXh0IGlzIHVuZGVmaW5lZCwgcGxlYXNlIHZlcmlmeSB5b3UgYXJlIGNhbGxpbmcgdXNlRm9ybWlrQ29udGV4dCgpIGFzIGNoaWxkIG9mIGEgPEZvcm1paz4gY29tcG9uZW50LmBcbiAgKTtcblxuICByZXR1cm4gZm9ybWlrO1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGlzRXF1YWwgZnJvbSAncmVhY3QtZmFzdC1jb21wYXJlJztcbmltcG9ydCBkZWVwbWVyZ2UgZnJvbSAnZGVlcG1lcmdlJztcbmltcG9ydCBpc1BsYWluT2JqZWN0IGZyb20gJ2xvZGFzaC9pc1BsYWluT2JqZWN0JztcbmltcG9ydCB7XG4gIEZvcm1pa0NvbmZpZyxcbiAgRm9ybWlrRXJyb3JzLFxuICBGb3JtaWtTdGF0ZSxcbiAgRm9ybWlrVG91Y2hlZCxcbiAgRm9ybWlrVmFsdWVzLFxuICBGb3JtaWtQcm9wcyxcbiAgRmllbGRNZXRhUHJvcHMsXG4gIEZpZWxkSGVscGVyUHJvcHMsXG4gIEZpZWxkSW5wdXRQcm9wcyxcbiAgRm9ybWlrSGVscGVycyxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBpc0Z1bmN0aW9uLFxuICBpc1N0cmluZyxcbiAgc2V0SW4sXG4gIGlzRW1wdHlDaGlsZHJlbixcbiAgaXNQcm9taXNlLFxuICBzZXROZXN0ZWRPYmplY3RWYWx1ZXMsXG4gIGdldEFjdGl2ZUVsZW1lbnQsXG4gIGdldEluLFxuICBpc09iamVjdCxcbn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgeyBGb3JtaWtQcm92aWRlciB9IGZyb20gJy4vRm9ybWlrQ29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3Rpbnktd2FybmluZyc7XG5pbXBvcnQgeyBMb3dQcmlvcml0eSwgdW5zdGFibGVfcnVuV2l0aFByaW9yaXR5IH0gZnJvbSAnc2NoZWR1bGVyJztcblxudHlwZSBGb3JtaWtNZXNzYWdlPFZhbHVlcz4gPVxuICB8IHsgdHlwZTogJ1NVQk1JVF9BVFRFTVBUJyB9XG4gIHwgeyB0eXBlOiAnU1VCTUlUX0ZBSUxVUkUnIH1cbiAgfCB7IHR5cGU6ICdTVUJNSVRfU1VDQ0VTUycgfVxuICB8IHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnOyBwYXlsb2FkOiBib29sZWFuIH1cbiAgfCB7IHR5cGU6ICdTRVRfSVNTVUJNSVRUSU5HJzsgcGF5bG9hZDogYm9vbGVhbiB9XG4gIHwgeyB0eXBlOiAnU0VUX1ZBTFVFUyc7IHBheWxvYWQ6IFZhbHVlcyB9XG4gIHwgeyB0eXBlOiAnU0VUX0ZJRUxEX1ZBTFVFJzsgcGF5bG9hZDogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZT86IGFueSB9IH1cbiAgfCB7IHR5cGU6ICdTRVRfRklFTERfVE9VQ0hFRCc7IHBheWxvYWQ6IHsgZmllbGQ6IHN0cmluZzsgdmFsdWU/OiBib29sZWFuIH0gfVxuICB8IHsgdHlwZTogJ1NFVF9GSUVMRF9FUlJPUic7IHBheWxvYWQ6IHsgZmllbGQ6IHN0cmluZzsgdmFsdWU/OiBzdHJpbmcgfSB9XG4gIHwgeyB0eXBlOiAnU0VUX1RPVUNIRUQnOyBwYXlsb2FkOiBGb3JtaWtUb3VjaGVkPFZhbHVlcz4gfVxuICB8IHsgdHlwZTogJ1NFVF9FUlJPUlMnOyBwYXlsb2FkOiBGb3JtaWtFcnJvcnM8VmFsdWVzPiB9XG4gIHwgeyB0eXBlOiAnU0VUX1NUQVRVUyc7IHBheWxvYWQ6IGFueSB9XG4gIHwge1xuICAgICAgdHlwZTogJ1NFVF9GT1JNSUtfU1RBVEUnO1xuICAgICAgcGF5bG9hZDogKHM6IEZvcm1pa1N0YXRlPFZhbHVlcz4pID0+IEZvcm1pa1N0YXRlPFZhbHVlcz47XG4gICAgfVxuICB8IHtcbiAgICAgIHR5cGU6ICdSRVNFVF9GT1JNJztcbiAgICAgIHBheWxvYWQ6IEZvcm1pa1N0YXRlPFZhbHVlcz47XG4gICAgfTtcblxuLy8gU3RhdGUgcmVkdWNlclxuZnVuY3Rpb24gZm9ybWlrUmVkdWNlcjxWYWx1ZXM+KFxuICBzdGF0ZTogRm9ybWlrU3RhdGU8VmFsdWVzPixcbiAgbXNnOiBGb3JtaWtNZXNzYWdlPFZhbHVlcz5cbikge1xuICBzd2l0Y2ggKG1zZy50eXBlKSB7XG4gICAgY2FzZSAnU0VUX1ZBTFVFUyc6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgdmFsdWVzOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9UT1VDSEVEJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB0b3VjaGVkOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9FUlJPUlMnOlxuICAgICAgaWYgKGlzRXF1YWwoc3RhdGUuZXJyb3JzLCBtc2cucGF5bG9hZCkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXRlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgZXJyb3JzOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9TVEFUVVMnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHN0YXR1czogbXNnLnBheWxvYWQgfTtcbiAgICBjYXNlICdTRVRfSVNTVUJNSVRUSU5HJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1N1Ym1pdHRpbmc6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0lTVkFMSURBVElORyc6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgaXNWYWxpZGF0aW5nOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9GSUVMRF9WQUxVRSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdmFsdWVzOiBzZXRJbihzdGF0ZS52YWx1ZXMsIG1zZy5wYXlsb2FkLmZpZWxkLCBtc2cucGF5bG9hZC52YWx1ZSksXG4gICAgICB9O1xuICAgIGNhc2UgJ1NFVF9GSUVMRF9UT1VDSEVEJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0b3VjaGVkOiBzZXRJbihzdGF0ZS50b3VjaGVkLCBtc2cucGF5bG9hZC5maWVsZCwgbXNnLnBheWxvYWQudmFsdWUpLFxuICAgICAgfTtcbiAgICBjYXNlICdTRVRfRklFTERfRVJST1InOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGVycm9yczogc2V0SW4oc3RhdGUuZXJyb3JzLCBtc2cucGF5bG9hZC5maWVsZCwgbXNnLnBheWxvYWQudmFsdWUpLFxuICAgICAgfTtcbiAgICBjYXNlICdSRVNFVF9GT1JNJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCAuLi5tc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9GT1JNSUtfU1RBVEUnOlxuICAgICAgcmV0dXJuIG1zZy5wYXlsb2FkKHN0YXRlKTtcbiAgICBjYXNlICdTVUJNSVRfQVRURU1QVCc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgdG91Y2hlZDogc2V0TmVzdGVkT2JqZWN0VmFsdWVzPEZvcm1pa1RvdWNoZWQ8VmFsdWVzPj4oXG4gICAgICAgICAgc3RhdGUudmFsdWVzLFxuICAgICAgICAgIHRydWVcbiAgICAgICAgKSxcbiAgICAgICAgaXNTdWJtaXR0aW5nOiB0cnVlLFxuICAgICAgICBzdWJtaXRDb3VudDogc3RhdGUuc3VibWl0Q291bnQgKyAxLFxuICAgICAgfTtcbiAgICBjYXNlICdTVUJNSVRfRkFJTFVSRSc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIH07XG4gICAgY2FzZSAnU1VCTUlUX1NVQ0NFU1MnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgICB9O1xuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gc3RhdGU7XG4gIH1cbn1cblxuLy8gSW5pdGlhbCBlbXB0eSBzdGF0ZXMgLy8gb2JqZWN0c1xuY29uc3QgZW1wdHlFcnJvcnM6IEZvcm1pa0Vycm9yczx1bmtub3duPiA9IHt9O1xuY29uc3QgZW1wdHlUb3VjaGVkOiBGb3JtaWtUb3VjaGVkPHVua25vd24+ID0ge307XG5cbi8vIFRoaXMgaXMgYW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSBtYXAgb2YgYWxsIHJlZ2lzdGVyZWQgZmllbGRzXG4vLyBhbmQgdGhlaXIgdmFsaWRhdGUgZnVuY3Rpb25zXG5pbnRlcmZhY2UgRmllbGRSZWdpc3RyeSB7XG4gIFtmaWVsZDogc3RyaW5nXToge1xuICAgIHZhbGlkYXRlOiAodmFsdWU6IGFueSkgPT4gc3RyaW5nIHwgUHJvbWlzZTxzdHJpbmc+IHwgdW5kZWZpbmVkO1xuICB9O1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybWlrPFZhbHVlcyBleHRlbmRzIEZvcm1pa1ZhbHVlcyA9IEZvcm1pa1ZhbHVlcz4oe1xuICB2YWxpZGF0ZU9uQ2hhbmdlID0gdHJ1ZSxcbiAgdmFsaWRhdGVPbkJsdXIgPSB0cnVlLFxuICB2YWxpZGF0ZU9uTW91bnQgPSBmYWxzZSxcbiAgaXNJbml0aWFsVmFsaWQsXG4gIGVuYWJsZVJlaW5pdGlhbGl6ZSA9IGZhbHNlLFxuICBvblN1Ym1pdCxcbiAgLi4ucmVzdFxufTogRm9ybWlrQ29uZmlnPFZhbHVlcz4pIHtcbiAgY29uc3QgcHJvcHMgPSB7XG4gICAgdmFsaWRhdGVPbkNoYW5nZSxcbiAgICB2YWxpZGF0ZU9uQmx1cixcbiAgICB2YWxpZGF0ZU9uTW91bnQsXG4gICAgb25TdWJtaXQsXG4gICAgLi4ucmVzdCxcbiAgfTtcbiAgY29uc3QgaW5pdGlhbFZhbHVlcyA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsVmFsdWVzKTtcbiAgY29uc3QgaW5pdGlhbEVycm9ycyA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsRXJyb3JzIHx8IGVtcHR5RXJyb3JzKTtcbiAgY29uc3QgaW5pdGlhbFRvdWNoZWQgPSBSZWFjdC51c2VSZWYocHJvcHMuaW5pdGlhbFRvdWNoZWQgfHwgZW1wdHlUb3VjaGVkKTtcbiAgY29uc3QgaW5pdGlhbFN0YXR1cyA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsU3RhdHVzKTtcbiAgY29uc3QgaXNNb3VudGVkID0gUmVhY3QudXNlUmVmPGJvb2xlYW4+KGZhbHNlKTtcbiAgY29uc3QgZmllbGRSZWdpc3RyeSA9IFJlYWN0LnVzZVJlZjxGaWVsZFJlZ2lzdHJ5Pih7fSk7XG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgdHlwZW9mIGlzSW5pdGlhbFZhbGlkID09PSAndW5kZWZpbmVkJyxcbiAgICAgICAgJ2lzSW5pdGlhbFZhbGlkIGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgRm9ybWlrLiBQbGVhc2UgdXNlIGluaXRpYWxFcnJvcnMgb3IgdmFsaWRhdGVPbk1vdW50IGluc3RlYWQuJ1xuICAgICAgKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIH0sIFtdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlzTW91bnRlZC5jdXJyZW50ID0gdHJ1ZTtcblxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9IGZhbHNlO1xuICAgIH07XG4gIH0sIFtdKTtcblxuICBjb25zdCBbc3RhdGUsIGRpc3BhdGNoXSA9IFJlYWN0LnVzZVJlZHVjZXI8XG4gICAgUmVhY3QuUmVkdWNlcjxGb3JtaWtTdGF0ZTxWYWx1ZXM+LCBGb3JtaWtNZXNzYWdlPFZhbHVlcz4+XG4gID4oZm9ybWlrUmVkdWNlciwge1xuICAgIHZhbHVlczogcHJvcHMuaW5pdGlhbFZhbHVlcyxcbiAgICBlcnJvcnM6IHByb3BzLmluaXRpYWxFcnJvcnMgfHwgZW1wdHlFcnJvcnMsXG4gICAgdG91Y2hlZDogcHJvcHMuaW5pdGlhbFRvdWNoZWQgfHwgZW1wdHlUb3VjaGVkLFxuICAgIHN0YXR1czogcHJvcHMuaW5pdGlhbFN0YXR1cyxcbiAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgIGlzVmFsaWRhdGluZzogZmFsc2UsXG4gICAgc3VibWl0Q291bnQ6IDAsXG4gIH0pO1xuXG4gIGNvbnN0IHJ1blZhbGlkYXRlSGFuZGxlciA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZXM6IFZhbHVlcywgZmllbGQ/OiBzdHJpbmcpOiBQcm9taXNlPEZvcm1pa0Vycm9yczxWYWx1ZXM+PiA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBjb25zdCBtYXliZVByb21pc2VkRXJyb3JzID0gKHByb3BzLnZhbGlkYXRlIGFzIGFueSkodmFsdWVzLCBmaWVsZCk7XG4gICAgICAgIGlmIChtYXliZVByb21pc2VkRXJyb3JzID09IG51bGwpIHtcbiAgICAgICAgICAvLyB1c2UgbG9vc2UgbnVsbCBjaGVjayBoZXJlIG9uIHB1cnBvc2VcbiAgICAgICAgICByZXNvbHZlKGVtcHR5RXJyb3JzKTtcbiAgICAgICAgfSBlbHNlIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlZEVycm9ycykpIHtcbiAgICAgICAgICAobWF5YmVQcm9taXNlZEVycm9ycyBhcyBQcm9taXNlPGFueT4pLnRoZW4oXG4gICAgICAgICAgICBlcnJvcnMgPT4ge1xuICAgICAgICAgICAgICByZXNvbHZlKGVycm9ycyB8fCBlbXB0eUVycm9ycyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWN0dWFsRXhjZXB0aW9uID0+IHtcbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICBgV2FybmluZzogQW4gdW5oYW5kbGVkIGVycm9yIHdhcyBjYXVnaHQgZHVyaW5nIHZhbGlkYXRpb24gaW4gPEZvcm1payB2YWxpZGF0ZSAvPmAsXG4gICAgICAgICAgICAgICAgICBhY3R1YWxFeGNlcHRpb25cbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVqZWN0KGFjdHVhbEV4Y2VwdGlvbik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXNvbHZlKG1heWJlUHJvbWlzZWRFcnJvcnMpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtwcm9wcy52YWxpZGF0ZV1cbiAgKTtcblxuICAvKipcbiAgICogUnVuIHZhbGlkYXRpb24gYWdhaW5zdCBhIFl1cCBzY2hlbWEgYW5kIG9wdGlvbmFsbHkgcnVuIGEgZnVuY3Rpb24gaWYgc3VjY2Vzc2Z1bFxuICAgKi9cbiAgY29uc3QgcnVuVmFsaWRhdGlvblNjaGVtYSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZXM6IFZhbHVlcywgZmllbGQ/OiBzdHJpbmcpOiBQcm9taXNlPEZvcm1pa0Vycm9yczxWYWx1ZXM+PiA9PiB7XG4gICAgICBjb25zdCB2YWxpZGF0aW9uU2NoZW1hID0gcHJvcHMudmFsaWRhdGlvblNjaGVtYTtcbiAgICAgIGNvbnN0IHNjaGVtYSA9IGlzRnVuY3Rpb24odmFsaWRhdGlvblNjaGVtYSlcbiAgICAgICAgPyB2YWxpZGF0aW9uU2NoZW1hKGZpZWxkKVxuICAgICAgICA6IHZhbGlkYXRpb25TY2hlbWE7XG4gICAgICBjb25zdCBwcm9taXNlID1cbiAgICAgICAgZmllbGQgJiYgc2NoZW1hLnZhbGlkYXRlQXRcbiAgICAgICAgICA/IHNjaGVtYS52YWxpZGF0ZUF0KGZpZWxkLCB2YWx1ZXMpXG4gICAgICAgICAgOiB2YWxpZGF0ZVl1cFNjaGVtYSh2YWx1ZXMsIHNjaGVtYSk7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xuICAgICAgICBwcm9taXNlLnRoZW4oXG4gICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgcmVzb2x2ZShlbXB0eUVycm9ycyk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICAoZXJyOiBhbnkpID0+IHtcbiAgICAgICAgICAgIC8vIFl1cCB3aWxsIHRocm93IGEgdmFsaWRhdGlvbiBlcnJvciBpZiB2YWxpZGF0aW9uIGZhaWxzLiBXZSBjYXRjaCB0aG9zZSBhbmRcbiAgICAgICAgICAgIC8vIHJlc29sdmUgdGhlbSBpbnRvIEZvcm1payBlcnJvcnMuIFdlIGNhbiBzbmlmZiBpZiBzb21ldGhpbmcgaXMgYSBZdXAgZXJyb3JcbiAgICAgICAgICAgIC8vIGJ5IGNoZWNraW5nIGVycm9yLm5hbWUuXG4gICAgICAgICAgICAvLyBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9qcXVlbnNlL3l1cCN2YWxpZGF0aW9uZXJyb3JlcnJvcnMtc3RyaW5nLS1hcnJheXN0cmluZy12YWx1ZS1hbnktcGF0aC1zdHJpbmdcbiAgICAgICAgICAgIGlmIChlcnIubmFtZSA9PT0gJ1ZhbGlkYXRpb25FcnJvcicpIHtcbiAgICAgICAgICAgICAgcmVzb2x2ZSh5dXBUb0Zvcm1FcnJvcnMoZXJyKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBXZSB0aHJvdyBhbnkgb3RoZXIgZXJyb3JzXG4gICAgICAgICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgICAgICAgICAgYFdhcm5pbmc6IEFuIHVuaGFuZGxlZCBlcnJvciB3YXMgY2F1Z2h0IGR1cmluZyB2YWxpZGF0aW9uIGluIDxGb3JtaWsgdmFsaWRhdGlvblNjaGVtYSAvPmAsXG4gICAgICAgICAgICAgICAgICBlcnJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgcmVqZWN0KGVycik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBbcHJvcHMudmFsaWRhdGlvblNjaGVtYV1cbiAgKTtcblxuICBjb25zdCBydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbiA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChmaWVsZDogc3RyaW5nLCB2YWx1ZTogdm9pZCB8IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiA9PiB7XG4gICAgICByZXR1cm4gbmV3IFByb21pc2UocmVzb2x2ZSA9PlxuICAgICAgICByZXNvbHZlKGZpZWxkUmVnaXN0cnkuY3VycmVudFtmaWVsZF0udmFsaWRhdGUodmFsdWUpKVxuICAgICAgKTtcbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3QgcnVuRmllbGRMZXZlbFZhbGlkYXRpb25zID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzKTogUHJvbWlzZTxGb3JtaWtFcnJvcnM8VmFsdWVzPj4gPT4ge1xuICAgICAgY29uc3QgZmllbGRLZXlzV2l0aFZhbGlkYXRpb246IHN0cmluZ1tdID0gT2JqZWN0LmtleXMoXG4gICAgICAgIGZpZWxkUmVnaXN0cnkuY3VycmVudFxuICAgICAgKS5maWx0ZXIoZiA9PiBpc0Z1bmN0aW9uKGZpZWxkUmVnaXN0cnkuY3VycmVudFtmXS52YWxpZGF0ZSkpO1xuXG4gICAgICAvLyBDb25zdHJ1Y3QgYW4gYXJyYXkgd2l0aCBhbGwgb2YgdGhlIGZpZWxkIHZhbGlkYXRpb24gZnVuY3Rpb25zXG4gICAgICBjb25zdCBmaWVsZFZhbGlkYXRpb25zOiBQcm9taXNlPHN0cmluZz5bXSA9XG4gICAgICAgIGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uLmxlbmd0aCA+IDBcbiAgICAgICAgICA/IGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uLm1hcChmID0+XG4gICAgICAgICAgICAgIHJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uKGYsIGdldEluKHZhbHVlcywgZikpXG4gICAgICAgICAgICApXG4gICAgICAgICAgOiBbUHJvbWlzZS5yZXNvbHZlKCdET19OT1RfREVMRVRFX1lPVV9XSUxMX0JFX0ZJUkVEJyldOyAvLyB1c2Ugc3BlY2lhbCBjYXNlIDspXG5cbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChmaWVsZFZhbGlkYXRpb25zKS50aGVuKChmaWVsZEVycm9yc0xpc3Q6IHN0cmluZ1tdKSA9PlxuICAgICAgICBmaWVsZEVycm9yc0xpc3QucmVkdWNlKChwcmV2LCBjdXJyLCBpbmRleCkgPT4ge1xuICAgICAgICAgIGlmIChjdXJyID09PSAnRE9fTk9UX0RFTEVURV9ZT1VfV0lMTF9CRV9GSVJFRCcpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY3Vycikge1xuICAgICAgICAgICAgcHJldiA9IHNldEluKHByZXYsIGZpZWxkS2V5c1dpdGhWYWxpZGF0aW9uW2luZGV4XSwgY3Vycik7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiBwcmV2O1xuICAgICAgICB9LCB7fSlcbiAgICAgICk7XG4gICAgfSxcbiAgICBbcnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb25dXG4gICk7XG5cbiAgLy8gUnVuIGFsbCB2YWxpZGF0aW9ucyBhbmQgcmV0dXJuIHRoZSByZXN1bHRcbiAgY29uc3QgcnVuQWxsVmFsaWRhdGlvbnMgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMpID0+IHtcbiAgICAgIHJldHVybiBQcm9taXNlLmFsbChbXG4gICAgICAgIHJ1bkZpZWxkTGV2ZWxWYWxpZGF0aW9ucyh2YWx1ZXMpLFxuICAgICAgICBwcm9wcy52YWxpZGF0aW9uU2NoZW1hID8gcnVuVmFsaWRhdGlvblNjaGVtYSh2YWx1ZXMpIDoge30sXG4gICAgICAgIHByb3BzLnZhbGlkYXRlID8gcnVuVmFsaWRhdGVIYW5kbGVyKHZhbHVlcykgOiB7fSxcbiAgICAgIF0pLnRoZW4oKFtmaWVsZEVycm9ycywgc2NoZW1hRXJyb3JzLCB2YWxpZGF0ZUVycm9yc10pID0+IHtcbiAgICAgICAgY29uc3QgY29tYmluZWRFcnJvcnMgPSBkZWVwbWVyZ2UuYWxsPEZvcm1pa0Vycm9yczxWYWx1ZXM+PihcbiAgICAgICAgICBbZmllbGRFcnJvcnMsIHNjaGVtYUVycm9ycywgdmFsaWRhdGVFcnJvcnNdLFxuICAgICAgICAgIHsgYXJyYXlNZXJnZSB9XG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBjb21iaW5lZEVycm9ycztcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW1xuICAgICAgcHJvcHMudmFsaWRhdGUsXG4gICAgICBwcm9wcy52YWxpZGF0aW9uU2NoZW1hLFxuICAgICAgcnVuRmllbGRMZXZlbFZhbGlkYXRpb25zLFxuICAgICAgcnVuVmFsaWRhdGVIYW5kbGVyLFxuICAgICAgcnVuVmFsaWRhdGlvblNjaGVtYSxcbiAgICBdXG4gICk7XG5cbiAgLy8gUnVuIHZhbGlkYXRpb25zIGFuZCBkaXNwYXRjaGluZyB0aGUgcmVzdWx0IGFzIGxvdy1wcmlvcml0eSB2aWEgckFGLlxuICAvL1xuICAvLyBUaGUgdGhpbmtpbmcgaXMgdGhhdCB2YWxpZGF0aW9uIGFzIGEgcmVzdWx0IG9mIG9uQ2hhbmdlIGFuZCBvbkJsdXJcbiAgLy8gc2hvdWxkIG5ldmVyIGJsb2NrIHVzZXIgaW5wdXQuIE5vdGU6IFRoaXMgbWV0aG9kIHNob3VsZCBuZXZlciBiZSBjYWxsZWRcbiAgLy8gZHVyaW5nIHRoZSBzdWJtaXNzaW9uIHBoYXNlIGJlY2F1c2UgdmFsaWRhdGlvbiBwcmlvciB0byBzdWJtaXNzaW9uXG4gIC8vIGlzIGFjdGF1bGx5IGhpZ2gtcHJpb3JpdHkgc2luY2Ugd2UgYWJzb2x1dGVseSBuZWVkIHRvIGd1YXJhbnRlZSB0aGVcbiAgLy8gZm9ybSBpcyB2YWxpZCBiZWZvcmUgZXhlY3V0aW5nIHByb3BzLm9uU3VibWl0LlxuICBjb25zdCB2YWxpZGF0ZUZvcm1XaXRoTG93UHJpb3JpdHkgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgICh2YWx1ZXM6IFZhbHVlcyA9IHN0YXRlLnZhbHVlcykgPT4ge1xuICAgICAgcmV0dXJuIHVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShMb3dQcmlvcml0eSwgKCkgPT4ge1xuICAgICAgICByZXR1cm4gcnVuQWxsVmFsaWRhdGlvbnModmFsdWVzKVxuICAgICAgICAgIC50aGVuKGNvbWJpbmVkRXJyb3JzID0+IHtcbiAgICAgICAgICAgIGlmICghIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9FUlJPUlMnLCBwYXlsb2FkOiBjb21iaW5lZEVycm9ycyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBjb21iaW5lZEVycm9ycztcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5jYXRjaChhY3R1YWxFeGNlcHRpb24gPT4ge1xuICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgLy8gVXNlcnMgY2FuIHRocm93IGR1cmluZyB2YWxpZGF0ZSwgaG93ZXZlciB0aGV5IGhhdmUgbm8gd2F5IG9mIGhhbmRsaW5nIHRoZWlyIGVycm9yIG9uIHRvdWNoIC8gYmx1ci4gSW4gbG93IHByaW9yaXR5LCB3ZSBuZWVkIHRvIGhhbmRsZSBpdFxuICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgYFdhcm5pbmc6IEFuIHVuaGFuZGxlZCBlcnJvciB3YXMgY2F1Z2h0IGR1cmluZyBsb3cgcHJpb3JpdHkgdmFsaWRhdGlvbiBpbiA8Rm9ybWlrIHZhbGlkYXRlIC8+YCxcbiAgICAgICAgICAgICAgICBhY3R1YWxFeGNlcHRpb25cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcblxuICAvLyBSdW4gYWxsIHZhbGlkYXRpb25zIG1ldGhvZHMgYW5kIHVwZGF0ZSBzdGF0ZSBhY2NvcmRpbmdseVxuICBjb25zdCB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5ID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMgPSBzdGF0ZS52YWx1ZXMpID0+IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIHJ1bkFsbFZhbGlkYXRpb25zKHZhbHVlcykudGhlbihjb21iaW5lZEVycm9ycyA9PiB7XG4gICAgICAgIGlmICghIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IGZhbHNlIH0pO1xuICAgICAgICAgIGlmICghaXNFcXVhbChzdGF0ZS5lcnJvcnMsIGNvbWJpbmVkRXJyb3JzKSkge1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VSUk9SUycsIHBheWxvYWQ6IGNvbWJpbmVkRXJyb3JzIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29tYmluZWRFcnJvcnM7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAodmFsaWRhdGVPbk1vdW50ICYmIGlzTW91bnRlZC5jdXJyZW50ID09PSB0cnVlKSB7XG4gICAgICB2YWxpZGF0ZUZvcm1XaXRoTG93UHJpb3JpdHkoaW5pdGlhbFZhbHVlcy5jdXJyZW50KTtcbiAgICB9XG4gIH0sIFt2YWxpZGF0ZU9uTW91bnQsIHZhbGlkYXRlRm9ybVdpdGhMb3dQcmlvcml0eV0pO1xuXG4gIGNvbnN0IHJlc2V0Rm9ybSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuZXh0U3RhdGU/OiBQYXJ0aWFsPEZvcm1pa1N0YXRlPFZhbHVlcz4+KSA9PiB7XG4gICAgICBjb25zdCB2YWx1ZXMgPVxuICAgICAgICBuZXh0U3RhdGUgJiYgbmV4dFN0YXRlLnZhbHVlc1xuICAgICAgICAgID8gbmV4dFN0YXRlLnZhbHVlc1xuICAgICAgICAgIDogaW5pdGlhbFZhbHVlcy5jdXJyZW50O1xuICAgICAgY29uc3QgZXJyb3JzID1cbiAgICAgICAgbmV4dFN0YXRlICYmIG5leHRTdGF0ZS5lcnJvcnNcbiAgICAgICAgICA/IG5leHRTdGF0ZS5lcnJvcnNcbiAgICAgICAgICA6IGluaXRpYWxFcnJvcnMuY3VycmVudFxuICAgICAgICAgID8gaW5pdGlhbEVycm9ycy5jdXJyZW50XG4gICAgICAgICAgOiBwcm9wcy5pbml0aWFsRXJyb3JzIHx8IHt9O1xuICAgICAgY29uc3QgdG91Y2hlZCA9XG4gICAgICAgIG5leHRTdGF0ZSAmJiBuZXh0U3RhdGUudG91Y2hlZFxuICAgICAgICAgID8gbmV4dFN0YXRlLnRvdWNoZWRcbiAgICAgICAgICA6IGluaXRpYWxUb3VjaGVkLmN1cnJlbnRcbiAgICAgICAgICA/IGluaXRpYWxUb3VjaGVkLmN1cnJlbnRcbiAgICAgICAgICA6IHByb3BzLmluaXRpYWxUb3VjaGVkIHx8IHt9O1xuICAgICAgY29uc3Qgc3RhdHVzID1cbiAgICAgICAgbmV4dFN0YXRlICYmIG5leHRTdGF0ZS5zdGF0dXNcbiAgICAgICAgICA/IG5leHRTdGF0ZS5zdGF0dXNcbiAgICAgICAgICA6IGluaXRpYWxTdGF0dXMuY3VycmVudFxuICAgICAgICAgID8gaW5pdGlhbFN0YXR1cy5jdXJyZW50XG4gICAgICAgICAgOiBwcm9wcy5pbml0aWFsU3RhdHVzO1xuICAgICAgaW5pdGlhbFZhbHVlcy5jdXJyZW50ID0gdmFsdWVzO1xuICAgICAgaW5pdGlhbEVycm9ycy5jdXJyZW50ID0gZXJyb3JzO1xuICAgICAgaW5pdGlhbFRvdWNoZWQuY3VycmVudCA9IHRvdWNoZWQ7XG4gICAgICBpbml0aWFsU3RhdHVzLmN1cnJlbnQgPSBzdGF0dXM7XG5cbiAgICAgIGNvbnN0IGRpc3BhdGNoRm4gPSAoKSA9PiB7XG4gICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICB0eXBlOiAnUkVTRVRfRk9STScsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgaXNTdWJtaXR0aW5nOiAhIW5leHRTdGF0ZSAmJiAhIW5leHRTdGF0ZS5pc1N1Ym1pdHRpbmcsXG4gICAgICAgICAgICBlcnJvcnMsXG4gICAgICAgICAgICB0b3VjaGVkLFxuICAgICAgICAgICAgc3RhdHVzLFxuICAgICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgICAgaXNWYWxpZGF0aW5nOiAhIW5leHRTdGF0ZSAmJiAhIW5leHRTdGF0ZS5pc1ZhbGlkYXRpbmcsXG4gICAgICAgICAgICBzdWJtaXRDb3VudDpcbiAgICAgICAgICAgICAgISFuZXh0U3RhdGUgJiZcbiAgICAgICAgICAgICAgISFuZXh0U3RhdGUuc3VibWl0Q291bnQgJiZcbiAgICAgICAgICAgICAgdHlwZW9mIG5leHRTdGF0ZS5zdWJtaXRDb3VudCA9PT0gJ251bWJlcidcbiAgICAgICAgICAgICAgICA/IG5leHRTdGF0ZS5zdWJtaXRDb3VudFxuICAgICAgICAgICAgICAgIDogMCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgIH07XG5cbiAgICAgIGlmIChwcm9wcy5vblJlc2V0KSB7XG4gICAgICAgIGNvbnN0IG1heWJlUHJvbWlzZWRPblJlc2V0ID0gKHByb3BzLm9uUmVzZXQgYXMgYW55KShcbiAgICAgICAgICBzdGF0ZS52YWx1ZXMsXG4gICAgICAgICAgaW1wZXJhdGl2ZU1ldGhvZHNcbiAgICAgICAgKTtcblxuICAgICAgICBpZiAoaXNQcm9taXNlKG1heWJlUHJvbWlzZWRPblJlc2V0KSkge1xuICAgICAgICAgIChtYXliZVByb21pc2VkT25SZXNldCBhcyBQcm9taXNlPGFueT4pLnRoZW4oZGlzcGF0Y2hGbik7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGlzcGF0Y2hGbigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaEZuKCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbcHJvcHMuaW5pdGlhbEVycm9ycywgcHJvcHMuaW5pdGlhbFN0YXR1cywgcHJvcHMuaW5pdGlhbFRvdWNoZWRdXG4gICk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoIWVuYWJsZVJlaW5pdGlhbGl6ZSkge1xuICAgICAgaW5pdGlhbFZhbHVlcy5jdXJyZW50ID0gcHJvcHMuaW5pdGlhbFZhbHVlcztcbiAgICB9XG4gIH0sIFtlbmFibGVSZWluaXRpYWxpemUsIHByb3BzLmluaXRpYWxWYWx1ZXNdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGVuYWJsZVJlaW5pdGlhbGl6ZSAmJlxuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPT09IHRydWUgJiZcbiAgICAgICFpc0VxdWFsKGluaXRpYWxWYWx1ZXMuY3VycmVudCwgcHJvcHMuaW5pdGlhbFZhbHVlcylcbiAgICApIHtcbiAgICAgIGluaXRpYWxWYWx1ZXMuY3VycmVudCA9IHByb3BzLmluaXRpYWxWYWx1ZXM7XG4gICAgICByZXNldEZvcm0oKTtcbiAgICB9XG4gIH0sIFtlbmFibGVSZWluaXRpYWxpemUsIHByb3BzLmluaXRpYWxWYWx1ZXMsIHJlc2V0Rm9ybV0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZW5hYmxlUmVpbml0aWFsaXplICYmXG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9PT0gdHJ1ZSAmJlxuICAgICAgIWlzRXF1YWwoaW5pdGlhbEVycm9ycy5jdXJyZW50LCBwcm9wcy5pbml0aWFsRXJyb3JzKVxuICAgICkge1xuICAgICAgaW5pdGlhbEVycm9ycy5jdXJyZW50ID0gcHJvcHMuaW5pdGlhbEVycm9ycyB8fCBlbXB0eUVycm9ycztcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9FUlJPUlMnLFxuICAgICAgICBwYXlsb2FkOiBwcm9wcy5pbml0aWFsRXJyb3JzIHx8IGVtcHR5RXJyb3JzLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZW5hYmxlUmVpbml0aWFsaXplLCBwcm9wcy5pbml0aWFsRXJyb3JzXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBlbmFibGVSZWluaXRpYWxpemUgJiZcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID09PSB0cnVlICYmXG4gICAgICAhaXNFcXVhbChpbml0aWFsVG91Y2hlZC5jdXJyZW50LCBwcm9wcy5pbml0aWFsVG91Y2hlZClcbiAgICApIHtcbiAgICAgIGluaXRpYWxUb3VjaGVkLmN1cnJlbnQgPSBwcm9wcy5pbml0aWFsVG91Y2hlZCB8fCBlbXB0eVRvdWNoZWQ7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfVE9VQ0hFRCcsXG4gICAgICAgIHBheWxvYWQ6IHByb3BzLmluaXRpYWxUb3VjaGVkIHx8IGVtcHR5VG91Y2hlZCxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VuYWJsZVJlaW5pdGlhbGl6ZSwgcHJvcHMuaW5pdGlhbFRvdWNoZWRdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGVuYWJsZVJlaW5pdGlhbGl6ZSAmJlxuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPT09IHRydWUgJiZcbiAgICAgICFpc0VxdWFsKGluaXRpYWxTdGF0dXMuY3VycmVudCwgcHJvcHMuaW5pdGlhbFN0YXR1cylcbiAgICApIHtcbiAgICAgIGluaXRpYWxTdGF0dXMuY3VycmVudCA9IHByb3BzLmluaXRpYWxTdGF0dXM7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfU1RBVFVTJyxcbiAgICAgICAgcGF5bG9hZDogcHJvcHMuaW5pdGlhbFN0YXR1cyxcbiAgICAgIH0pO1xuICAgIH1cbiAgfSwgW2VuYWJsZVJlaW5pdGlhbGl6ZSwgcHJvcHMuaW5pdGlhbFN0YXR1cywgcHJvcHMuaW5pdGlhbFRvdWNoZWRdKTtcblxuICBjb25zdCB2YWxpZGF0ZUZpZWxkID0gdXNlRXZlbnRDYWxsYmFjaygobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgLy8gVGhpcyB3aWxsIGVmZmljaWVudGx5IHZhbGlkYXRlIGEgc2luZ2xlIGZpZWxkIGJ5IGF2b2lkaW5nIHN0YXRlXG4gICAgLy8gY2hhbmdlcyBpZiB0aGUgdmFsaWRhdGlvbiBmdW5jdGlvbiBpcyBzeW5jaHJvbm91cy4gSXQncyBkaWZmZXJlbnQgZnJvbVxuICAgIC8vIHdoYXQgaXMgY2FsbGVkIHdoZW4gdXNpbmcgdmFsaWRhdGVGb3JtLlxuXG4gICAgaWYgKGlzRnVuY3Rpb24oZmllbGRSZWdpc3RyeS5jdXJyZW50W25hbWVdLnZhbGlkYXRlKSkge1xuICAgICAgY29uc3QgdmFsdWUgPSBnZXRJbihzdGF0ZS52YWx1ZXMsIG5hbWUpO1xuICAgICAgY29uc3QgbWF5YmVQcm9taXNlID0gZmllbGRSZWdpc3RyeS5jdXJyZW50W25hbWVdLnZhbGlkYXRlKHZhbHVlKTtcbiAgICAgIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlKSkge1xuICAgICAgICAvLyBPbmx5IGZsaXAgaXNWYWxpZGF0aW5nIGlmIHRoZSBmdW5jdGlvbiBpcyBhc3luYy5cbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IHRydWUgfSk7XG4gICAgICAgIHJldHVybiBtYXliZVByb21pc2VcbiAgICAgICAgICAudGhlbigoeDogYW55KSA9PiB4KVxuICAgICAgICAgIC50aGVuKChlcnJvcjogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICAgIHR5cGU6ICdTRVRfRklFTERfRVJST1InLFxuICAgICAgICAgICAgICBwYXlsb2FkOiB7IGZpZWxkOiBuYW1lLCB2YWx1ZTogZXJyb3IgfSxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IGZhbHNlIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdTRVRfRklFTERfRVJST1InLFxuICAgICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICAgIGZpZWxkOiBuYW1lLFxuICAgICAgICAgICAgdmFsdWU6IG1heWJlUHJvbWlzZSBhcyBzdHJpbmcgfCB1bmRlZmluZWQsXG4gICAgICAgICAgfSxcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUobWF5YmVQcm9taXNlIGFzIHN0cmluZyB8IHVuZGVmaW5lZCk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChwcm9wcy52YWxpZGF0aW9uU2NoZW1hKSB7XG4gICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNWQUxJREFUSU5HJywgcGF5bG9hZDogdHJ1ZSB9KTtcbiAgICAgIHJldHVybiBydW5WYWxpZGF0aW9uU2NoZW1hKHN0YXRlLnZhbHVlcywgbmFtZSlcbiAgICAgICAgLnRoZW4oKHg6IGFueSkgPT4geClcbiAgICAgICAgLnRoZW4oKGVycm9yOiBhbnkpID0+IHtcbiAgICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgICB0eXBlOiAnU0VUX0ZJRUxEX0VSUk9SJyxcbiAgICAgICAgICAgIHBheWxvYWQ6IHsgZmllbGQ6IG5hbWUsIHZhbHVlOiBlcnJvcltuYW1lXSB9LFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiBmYWxzZSB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO1xuICB9KTtcblxuICBjb25zdCByZWdpc3RlckZpZWxkID0gUmVhY3QudXNlQ2FsbGJhY2soKG5hbWU6IHN0cmluZywgeyB2YWxpZGF0ZSB9OiBhbnkpID0+IHtcbiAgICBmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbbmFtZV0gPSB7XG4gICAgICB2YWxpZGF0ZSxcbiAgICB9O1xuICB9LCBbXSk7XG5cbiAgY29uc3QgdW5yZWdpc3RlckZpZWxkID0gUmVhY3QudXNlQ2FsbGJhY2soKG5hbWU6IHN0cmluZykgPT4ge1xuICAgIGRlbGV0ZSBmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbbmFtZV07XG4gIH0sIFtdKTtcblxuICBjb25zdCBzZXRUb3VjaGVkID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAodG91Y2hlZDogRm9ybWlrVG91Y2hlZDxWYWx1ZXM+LCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9UT1VDSEVEJywgcGF5bG9hZDogdG91Y2hlZCB9KTtcbiAgICAgIGNvbnN0IHdpbGxWYWxpZGF0ZSA9XG4gICAgICAgIHNob3VsZFZhbGlkYXRlID09PSB1bmRlZmluZWQgPyB2YWxpZGF0ZU9uQmx1ciA6IHNob3VsZFZhbGlkYXRlO1xuICAgICAgcmV0dXJuIHdpbGxWYWxpZGF0ZVxuICAgICAgICA/IHZhbGlkYXRlRm9ybVdpdGhMb3dQcmlvcml0eShzdGF0ZS52YWx1ZXMpXG4gICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IHNldEVycm9ycyA9IFJlYWN0LnVzZUNhbGxiYWNrKChlcnJvcnM6IEZvcm1pa0Vycm9yczxWYWx1ZXM+KSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VSUk9SUycsIHBheWxvYWQ6IGVycm9ycyB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHNldFZhbHVlcyA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzLCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9WQUxVRVMnLCBwYXlsb2FkOiB2YWx1ZXMgfSk7XG4gICAgICBjb25zdCB3aWxsVmFsaWRhdGUgPVxuICAgICAgICBzaG91bGRWYWxpZGF0ZSA9PT0gdW5kZWZpbmVkID8gdmFsaWRhdGVPbkNoYW5nZSA6IHNob3VsZFZhbGlkYXRlO1xuICAgICAgcmV0dXJuIHdpbGxWYWxpZGF0ZVxuICAgICAgICA/IHZhbGlkYXRlRm9ybVdpdGhMb3dQcmlvcml0eSh2YWx1ZXMpXG4gICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IHNldEZpZWxkRXJyb3IgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoZmllbGQ6IHN0cmluZywgdmFsdWU6IHN0cmluZyB8IHVuZGVmaW5lZCkgPT4ge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU0VUX0ZJRUxEX0VSUk9SJyxcbiAgICAgICAgcGF5bG9hZDogeyBmaWVsZCwgdmFsdWUgfSxcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBzZXRGaWVsZFZhbHVlID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAoZmllbGQ6IHN0cmluZywgdmFsdWU6IGFueSwgc2hvdWxkVmFsaWRhdGU/OiBib29sZWFuKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfRklFTERfVkFMVUUnLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZmllbGQsXG4gICAgICAgICAgdmFsdWUsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHdpbGxWYWxpZGF0ZSA9XG4gICAgICAgIHNob3VsZFZhbGlkYXRlID09PSB1bmRlZmluZWQgPyB2YWxpZGF0ZU9uQ2hhbmdlIDogc2hvdWxkVmFsaWRhdGU7XG4gICAgICByZXR1cm4gd2lsbFZhbGlkYXRlXG4gICAgICAgID8gdmFsaWRhdGVGb3JtV2l0aExvd1ByaW9yaXR5KHNldEluKHN0YXRlLnZhbHVlcywgZmllbGQsIHZhbHVlKSlcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgZXhlY3V0ZUNoYW5nZSA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChldmVudE9yVGV4dFZhbHVlOiBzdHJpbmcgfCBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+LCBtYXliZVBhdGg/OiBzdHJpbmcpID0+IHtcbiAgICAgIC8vIEJ5IGRlZmF1bHQsIGFzc3VtZSB0aGF0IHRoZSBmaXJzdCBhcmd1bWVudCBpcyBhIHN0cmluZy4gVGhpcyBhbGxvd3MgdXMgdG8gdXNlXG4gICAgICAvLyBoYW5kbGVDaGFuZ2Ugd2l0aCBSZWFjdCBOYXRpdmUgYW5kIFJlYWN0IE5hdGl2ZSBXZWIncyBvbkNoYW5nZVRleHQgcHJvcCB3aGljaFxuICAgICAgLy8gcHJvdmlkZXMganVzdCB0aGUgdmFsdWUgb2YgdGhlIGlucHV0LlxuICAgICAgbGV0IGZpZWxkID0gbWF5YmVQYXRoO1xuICAgICAgbGV0IHZhbCA9IGV2ZW50T3JUZXh0VmFsdWU7XG4gICAgICBsZXQgcGFyc2VkO1xuICAgICAgLy8gSWYgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIG5vdCBhIHN0cmluZyB0aG91Z2gsIGl0IGhhcyB0byBiZSBhIHN5bnRoZXRpYyBSZWFjdCBFdmVudCAob3IgYSBmYWtlIG9uZSksXG4gICAgICAvLyBzbyB3ZSBoYW5kbGUgbGlrZSB3ZSB3b3VsZCBhIG5vcm1hbCBIVE1MIGNoYW5nZSBldmVudC5cbiAgICAgIGlmICghaXNTdHJpbmcoZXZlbnRPclRleHRWYWx1ZSkpIHtcbiAgICAgICAgLy8gSWYgd2UgY2FuLCBwZXJzaXN0IHRoZSBldmVudFxuICAgICAgICAvLyBAc2VlIGh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9ldmVudHMuaHRtbCNldmVudC1wb29saW5nXG4gICAgICAgIGlmICgoZXZlbnRPclRleHRWYWx1ZSBhcyBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+KS5wZXJzaXN0KSB7XG4gICAgICAgICAgKGV2ZW50T3JUZXh0VmFsdWUgYXMgUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PikucGVyc2lzdCgpO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHRhcmdldCA9IGV2ZW50T3JUZXh0VmFsdWUudGFyZ2V0XG4gICAgICAgICAgPyAoZXZlbnRPclRleHRWYWx1ZSBhcyBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+KS50YXJnZXRcbiAgICAgICAgICA6IChldmVudE9yVGV4dFZhbHVlIGFzIFJlYWN0LkNoYW5nZUV2ZW50PGFueT4pLmN1cnJlbnRUYXJnZXQ7XG5cbiAgICAgICAgY29uc3Qge1xuICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgbmFtZSxcbiAgICAgICAgICBpZCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICBjaGVja2VkLFxuICAgICAgICAgIG91dGVySFRNTCxcbiAgICAgICAgICBvcHRpb25zLFxuICAgICAgICAgIG11bHRpcGxlLFxuICAgICAgICB9ID0gdGFyZ2V0O1xuXG4gICAgICAgIGZpZWxkID0gbWF5YmVQYXRoID8gbWF5YmVQYXRoIDogbmFtZSA/IG5hbWUgOiBpZDtcbiAgICAgICAgaWYgKCFmaWVsZCAmJiBfX0RFVl9fKSB7XG4gICAgICAgICAgd2FybkFib3V0TWlzc2luZ0lkZW50aWZpZXIoe1xuICAgICAgICAgICAgaHRtbENvbnRlbnQ6IG91dGVySFRNTCxcbiAgICAgICAgICAgIGRvY3VtZW50YXRpb25BbmNob3JMaW5rOiAnaGFuZGxlY2hhbmdlLWUtcmVhY3RjaGFuZ2VldmVudGFueS0tdm9pZCcsXG4gICAgICAgICAgICBoYW5kbGVyTmFtZTogJ2hhbmRsZUNoYW5nZScsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgdmFsID0gL251bWJlcnxyYW5nZS8udGVzdCh0eXBlKVxuICAgICAgICAgID8gKChwYXJzZWQgPSBwYXJzZUZsb2F0KHZhbHVlKSksIGlzTmFOKHBhcnNlZCkgPyAnJyA6IHBhcnNlZClcbiAgICAgICAgICA6IC9jaGVja2JveC8udGVzdCh0eXBlKSAvLyBjaGVja2JveGVzXG4gICAgICAgICAgPyBnZXRWYWx1ZUZvckNoZWNrYm94KGdldEluKHN0YXRlLnZhbHVlcywgZmllbGQhKSwgY2hlY2tlZCwgdmFsdWUpXG4gICAgICAgICAgOiAhIW11bHRpcGxlIC8vIDxzZWxlY3QgbXVsdGlwbGU+XG4gICAgICAgICAgPyBnZXRTZWxlY3RlZFZhbHVlcyhvcHRpb25zKVxuICAgICAgICAgIDogdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICAvLyBTZXQgZm9ybSBmaWVsZHMgYnkgbmFtZVxuICAgICAgICBzZXRGaWVsZFZhbHVlKGZpZWxkLCB2YWwpO1xuICAgICAgfVxuICAgIH0sXG4gICAgW3NldEZpZWxkVmFsdWUsIHN0YXRlLnZhbHVlc11cbiAgKTtcblxuICBjb25zdCBoYW5kbGVDaGFuZ2UgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgIChcbiAgICAgIGV2ZW50T3JQYXRoOiBzdHJpbmcgfCBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+XG4gICAgKTogdm9pZCB8ICgoZXZlbnRPclRleHRWYWx1ZTogc3RyaW5nIHwgUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PikgPT4gdm9pZCkgPT4ge1xuICAgICAgaWYgKGlzU3RyaW5nKGV2ZW50T3JQYXRoKSkge1xuICAgICAgICByZXR1cm4gZXZlbnQgPT4gZXhlY3V0ZUNoYW5nZShldmVudCwgZXZlbnRPclBhdGgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZXhlY3V0ZUNoYW5nZShldmVudE9yUGF0aCk7XG4gICAgICB9XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IHNldEZpZWxkVG91Y2hlZCA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKGZpZWxkOiBzdHJpbmcsIHRvdWNoZWQ6IGJvb2xlYW4gPSB0cnVlLCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9UT1VDSEVEJyxcbiAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgIGZpZWxkLFxuICAgICAgICAgIHZhbHVlOiB0b3VjaGVkLFxuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICBjb25zdCB3aWxsVmFsaWRhdGUgPVxuICAgICAgICBzaG91bGRWYWxpZGF0ZSA9PT0gdW5kZWZpbmVkID8gdmFsaWRhdGVPbkJsdXIgOiBzaG91bGRWYWxpZGF0ZTtcbiAgICAgIHJldHVybiB3aWxsVmFsaWRhdGVcbiAgICAgICAgPyB2YWxpZGF0ZUZvcm1XaXRoTG93UHJpb3JpdHkoc3RhdGUudmFsdWVzKVxuICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBleGVjdXRlQmx1ciA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChlOiBhbnksIHBhdGg/OiBzdHJpbmcpID0+IHtcbiAgICAgIGlmIChlLnBlcnNpc3QpIHtcbiAgICAgICAgZS5wZXJzaXN0KCk7XG4gICAgICB9XG4gICAgICBjb25zdCB7IG5hbWUsIGlkLCBvdXRlckhUTUwgfSA9IGUudGFyZ2V0O1xuICAgICAgY29uc3QgZmllbGQgPSBwYXRoID8gcGF0aCA6IG5hbWUgPyBuYW1lIDogaWQ7XG5cbiAgICAgIGlmICghZmllbGQgJiYgX19ERVZfXykge1xuICAgICAgICB3YXJuQWJvdXRNaXNzaW5nSWRlbnRpZmllcih7XG4gICAgICAgICAgaHRtbENvbnRlbnQ6IG91dGVySFRNTCxcbiAgICAgICAgICBkb2N1bWVudGF0aW9uQW5jaG9yTGluazogJ2hhbmRsZWJsdXItZS1hbnktLXZvaWQnLFxuICAgICAgICAgIGhhbmRsZXJOYW1lOiAnaGFuZGxlQmx1cicsXG4gICAgICAgIH0pO1xuICAgICAgfVxuXG4gICAgICBzZXRGaWVsZFRvdWNoZWQoZmllbGQsIHRydWUpO1xuICAgIH0sXG4gICAgW3NldEZpZWxkVG91Y2hlZF1cbiAgKTtcblxuICBjb25zdCBoYW5kbGVCbHVyID0gdXNlRXZlbnRDYWxsYmFjaygoZXZlbnRPclN0cmluZzogYW55KTpcbiAgICB8IHZvaWRcbiAgICB8ICgoZTogYW55KSA9PiB2b2lkKSA9PiB7XG4gICAgaWYgKGlzU3RyaW5nKGV2ZW50T3JTdHJpbmcpKSB7XG4gICAgICByZXR1cm4gZXZlbnQgPT4gZXhlY3V0ZUJsdXIoZXZlbnQsIGV2ZW50T3JTdHJpbmcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBleGVjdXRlQmx1cihldmVudE9yU3RyaW5nKTtcbiAgICB9XG4gIH0pO1xuXG4gIGNvbnN0IHNldEZvcm1pa1N0YXRlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKFxuICAgICAgc3RhdGVPckNiOlxuICAgICAgICB8IEZvcm1pa1N0YXRlPFZhbHVlcz5cbiAgICAgICAgfCAoKHN0YXRlOiBGb3JtaWtTdGF0ZTxWYWx1ZXM+KSA9PiBGb3JtaWtTdGF0ZTxWYWx1ZXM+KVxuICAgICk6IHZvaWQgPT4ge1xuICAgICAgaWYgKGlzRnVuY3Rpb24oc3RhdGVPckNiKSkge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRk9STUlLX1NUQVRFJywgcGF5bG9hZDogc3RhdGVPckNiIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0ZPUk1JS19TVEFURScsIHBheWxvYWQ6ICgpID0+IHN0YXRlT3JDYiB9KTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtdXG4gICk7XG5cbiAgY29uc3Qgc2V0U3RhdHVzID0gUmVhY3QudXNlQ2FsbGJhY2soKHN0YXR1czogYW55KSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX1NUQVRVUycsIHBheWxvYWQ6IHN0YXR1cyB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHNldFN1Ym1pdHRpbmcgPSBSZWFjdC51c2VDYWxsYmFjaygoaXNTdWJtaXR0aW5nOiBib29sZWFuKSA9PiB7XG4gICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTU1VCTUlUVElORycsIHBheWxvYWQ6IGlzU3VibWl0dGluZyB9KTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHN1Ym1pdEZvcm0gPSB1c2VFdmVudENhbGxiYWNrKCgpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTVUJNSVRfQVRURU1QVCcgfSk7XG4gICAgcmV0dXJuIHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkoKS50aGVuKFxuICAgICAgKGNvbWJpbmVkRXJyb3JzOiBGb3JtaWtFcnJvcnM8VmFsdWVzPikgPT4ge1xuICAgICAgICAvLyBJbiBjYXNlIGFuIGVycm9yIHdhcyB0aHJvd24gYW5kIHBhc3NlZCB0byB0aGUgcmVzb2x2ZWQgUHJvbWlzZSxcbiAgICAgICAgLy8gYGNvbWJpbmVkRXJyb3JzYCBjYW4gYmUgYW4gaW5zdGFuY2Ugb2YgYW4gRXJyb3IuIFdlIG5lZWQgdG8gY2hlY2tcbiAgICAgICAgLy8gdGhhdCBhbmQgYWJvcnQgdGhlIHN1Ym1pdC5cbiAgICAgICAgLy8gSWYgd2UgZG9uJ3QgZG8gdGhhdCwgY2FsbGluZyBgT2JqZWN0LmtleXMobmV3IEVycm9yKCkpYCB5aWVsZHMgYW5cbiAgICAgICAgLy8gZW1wdHkgYXJyYXksIHdoaWNoIGNhdXNlcyB0aGUgdmFsaWRhdGlvbiB0byBwYXNzIGFuZCB0aGUgZm9ybVxuICAgICAgICAvLyB0byBiZSBzdWJtaXR0ZWQuXG5cbiAgICAgICAgY29uc3QgaXNJbnN0YW5jZU9mRXJyb3IgPSBjb21iaW5lZEVycm9ycyBpbnN0YW5jZW9mIEVycm9yO1xuICAgICAgICBjb25zdCBpc0FjdHVhbGx5VmFsaWQgPVxuICAgICAgICAgICFpc0luc3RhbmNlT2ZFcnJvciAmJiBPYmplY3Qua2V5cyhjb21iaW5lZEVycm9ycykubGVuZ3RoID09PSAwO1xuICAgICAgICBpZiAoaXNBY3R1YWxseVZhbGlkKSB7XG4gICAgICAgICAgLy8gUHJvY2VlZCB3aXRoIHN1Ym1pdC4uLlxuICAgICAgICAgIC8vXG4gICAgICAgICAgLy8gVG8gcmVzcGVjdCBzeW5jIHN1Ym1pdCBmbnMsIHdlIGNhbid0IHNpbXBseSB3cmFwIGV4ZWN1dGVTdWJtaXQgaW4gYSBwcm9taXNlIGFuZFxuICAgICAgICAgIC8vIF9hbHdheXNfIGRpc3BhdGNoIFNVQk1JVF9TVUNDRVNTIGJlY2F1c2UgaXNTdWJtaXR0aW5nIHdvdWxkIHRoZW4gYWx3YXlzIGJlIGZhbHNlLlxuICAgICAgICAgIC8vIFRoaXMgd291bGQgYmUgZmluZSBpbiBzaW1wbGUgY2FzZXMsIGJ1dCBtYWtlIGl0IGltcG9zc2libGUgdG8gZGlzYWJsZSBzdWJtaXRcbiAgICAgICAgICAvLyBidXR0b25zIHdoZXJlIHBlb3BsZSB1c2UgY2FsbGJhY2tzIG9yIHByb21pc2VzIGFzIHNpZGUgZWZmZWN0cyAod2hpY2ggaXMgYmFzaWNhbGx5XG4gICAgICAgICAgLy8gYWxsIG9mIHYxIEZvcm1payBjb2RlKS4gSW5zdGVhZCwgcmVjYWxsIHRoYXQgd2UgYXJlIGluc2lkZSBvZiBhIHByb21pc2UgY2hhaW4gYWxyZWFkeSxcbiAgICAgICAgICAvLyAgc28gd2UgY2FuIHRyeS9jYXRjaCBleGVjdXRlU3VibWl0KCksIGlmIGl0IHJldHVybnMgdW5kZWZpbmVkLCB0aGVuIGp1c3QgYmFpbC5cbiAgICAgICAgICAvLyBJZiB0aGVyZSBhcmUgZXJyb3JzLCB0aHJvdyBlbS4gT3RoZXJ3aXNlLCB3cmFwIGV4ZWN1dGVTdWJtaXQgaW4gYSBwcm9taXNlIGFuZCBoYW5kbGVcbiAgICAgICAgICAvLyBjbGVhbnVwIG9mIGlzU3VibWl0dGluZyBvbiBiZWhhbGYgb2YgdGhlIGNvbnN1bWVyLlxuICAgICAgICAgIGxldCBwcm9taXNlT3JVbmRlZmluZWQ7XG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIHByb21pc2VPclVuZGVmaW5lZCA9IGV4ZWN1dGVTdWJtaXQoKTtcbiAgICAgICAgICAgIC8vIEJhaWwgaWYgaXQncyBzeW5jLCBjb25zdW1lciBpcyByZXNwb25zaWJsZSBmb3IgY2xlYW5pbmcgdXBcbiAgICAgICAgICAgIC8vIHZpYSBzZXRTdWJtaXR0aW5nKGZhbHNlKVxuICAgICAgICAgICAgaWYgKHByb21pc2VPclVuZGVmaW5lZCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShwcm9taXNlT3JVbmRlZmluZWQpXG4gICAgICAgICAgICAudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgIGlmICghIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU1VCTUlUX1NVQ0NFU1MnIH0pO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KVxuICAgICAgICAgICAgLmNhdGNoKF9lcnJvcnMgPT4ge1xuICAgICAgICAgICAgICBpZiAoISFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NVQk1JVF9GQUlMVVJFJyB9KTtcbiAgICAgICAgICAgICAgICAvLyBUaGlzIGlzIGEgbGVnaXQgZXJyb3IgcmVqZWN0ZWQgYnkgdGhlIG9uU3VibWl0IGZuXG4gICAgICAgICAgICAgICAgLy8gc28gd2UgZG9uJ3Qgd2FudCB0byBicmVhayB0aGUgcHJvbWlzZSBjaGFpblxuICAgICAgICAgICAgICAgIHRocm93IF9lcnJvcnM7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2UgaWYgKCEhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAvLyBeXl4gTWFrZSBzdXJlIEZvcm1payBpcyBzdGlsbCBtb3VudGVkIGJlZm9yZSB1cGRhdGluZyBzdGF0ZVxuICAgICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NVQk1JVF9GQUlMVVJFJyB9KTtcbiAgICAgICAgICAvLyB0aHJvdyBjb21iaW5lZEVycm9ycztcbiAgICAgICAgICBpZiAoaXNJbnN0YW5jZU9mRXJyb3IpIHtcbiAgICAgICAgICAgIHRocm93IGNvbWJpbmVkRXJyb3JzO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgKTtcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlU3VibWl0ID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAoZT86IFJlYWN0LkZvcm1FdmVudDxIVE1MRm9ybUVsZW1lbnQ+KSA9PiB7XG4gICAgICBpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0ICYmIGlzRnVuY3Rpb24oZS5wcmV2ZW50RGVmYXVsdCkpIHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgfVxuXG4gICAgICBpZiAoZSAmJiBlLnN0b3BQcm9wYWdhdGlvbiAmJiBpc0Z1bmN0aW9uKGUuc3RvcFByb3BhZ2F0aW9uKSkge1xuICAgICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgICAgfVxuXG4gICAgICAvLyBXYXJuIGlmIGZvcm0gc3VibWlzc2lvbiBpcyB0cmlnZ2VyZWQgYnkgYSA8YnV0dG9uPiB3aXRob3V0IGFcbiAgICAgIC8vIHNwZWNpZmllZCBgdHlwZWAgYXR0cmlidXRlIGR1cmluZyBkZXZlbG9wbWVudC4gVGhpcyBtaXRpZ2F0ZXNcbiAgICAgIC8vIGEgY29tbW9uIGdvdGNoYSBpbiBmb3JtcyB3aXRoIGJvdGggcmVzZXQgYW5kIHN1Ym1pdCBidXR0b25zLFxuICAgICAgLy8gd2hlcmUgdGhlIGRldiBmb3JnZXRzIHRvIGFkZCB0eXBlPVwiYnV0dG9uXCIgdG8gdGhlIHJlc2V0IGJ1dHRvbi5cbiAgICAgIGlmIChfX0RFVl9fICYmIHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gU2FmZWx5IGdldCB0aGUgYWN0aXZlIGVsZW1lbnQgKHdvcmtzIHdpdGggSUUpXG4gICAgICAgIGNvbnN0IGFjdGl2ZUVsZW1lbnQgPSBnZXRBY3RpdmVFbGVtZW50KCk7XG4gICAgICAgIGlmIChcbiAgICAgICAgICBhY3RpdmVFbGVtZW50ICE9PSBudWxsICYmXG4gICAgICAgICAgYWN0aXZlRWxlbWVudCBpbnN0YW5jZW9mIEhUTUxCdXR0b25FbGVtZW50XG4gICAgICAgICkge1xuICAgICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuYXR0cmlidXRlcyAmJlxuICAgICAgICAgICAgICBhY3RpdmVFbGVtZW50LmF0dHJpYnV0ZXMuZ2V0TmFtZWRJdGVtKCd0eXBlJyksXG4gICAgICAgICAgICAnWW91IHN1Ym1pdHRlZCBhIEZvcm1payBmb3JtIHVzaW5nIGEgYnV0dG9uIHdpdGggYW4gdW5zcGVjaWZpZWQgYHR5cGVgIGF0dHJpYnV0ZS4gIE1vc3QgYnJvd3NlcnMgZGVmYXVsdCBidXR0b24gZWxlbWVudHMgdG8gYHR5cGU9XCJzdWJtaXRcImAuIElmIHRoaXMgaXMgbm90IGEgc3VibWl0IGJ1dHRvbiwgcGxlYXNlIGFkZCBgdHlwZT1cImJ1dHRvblwiYC4nXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBzdWJtaXRGb3JtKCkuY2F0Y2gocmVhc29uID0+IHtcbiAgICAgICAgY29uc29sZS53YXJuKFxuICAgICAgICAgIGBXYXJuaW5nOiBBbiB1bmhhbmRsZWQgZXJyb3Igd2FzIGNhdWdodCBmcm9tIHN1Ym1pdEZvcm0oKWAsXG4gICAgICAgICAgcmVhc29uXG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3QgaW1wZXJhdGl2ZU1ldGhvZHM6IEZvcm1pa0hlbHBlcnM8VmFsdWVzPiA9IHtcbiAgICByZXNldEZvcm0sXG5cbiAgICB2YWxpZGF0ZUZvcm06IHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHksXG4gICAgdmFsaWRhdGVGaWVsZCxcbiAgICBzZXRFcnJvcnMsXG4gICAgc2V0RmllbGRFcnJvcixcbiAgICBzZXRGaWVsZFRvdWNoZWQsXG4gICAgc2V0RmllbGRWYWx1ZSxcbiAgICBzZXRTdGF0dXMsXG4gICAgc2V0U3VibWl0dGluZyxcbiAgICBzZXRUb3VjaGVkLFxuICAgIHNldFZhbHVlcyxcbiAgICBzZXRGb3JtaWtTdGF0ZSxcbiAgICBzdWJtaXRGb3JtLFxuICB9O1xuXG4gIGNvbnN0IGV4ZWN1dGVTdWJtaXQgPSB1c2VFdmVudENhbGxiYWNrKCgpID0+IHtcbiAgICByZXR1cm4gb25TdWJtaXQoc3RhdGUudmFsdWVzLCBpbXBlcmF0aXZlTWV0aG9kcyk7XG4gIH0pO1xuXG4gIGNvbnN0IGhhbmRsZVJlc2V0ID0gdXNlRXZlbnRDYWxsYmFjayhlID0+IHtcbiAgICBpZiAoZSAmJiBlLnByZXZlbnREZWZhdWx0ICYmIGlzRnVuY3Rpb24oZS5wcmV2ZW50RGVmYXVsdCkpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICB9XG5cbiAgICBpZiAoZSAmJiBlLnN0b3BQcm9wYWdhdGlvbiAmJiBpc0Z1bmN0aW9uKGUuc3RvcFByb3BhZ2F0aW9uKSkge1xuICAgICAgZS5zdG9wUHJvcGFnYXRpb24oKTtcbiAgICB9XG5cbiAgICByZXNldEZvcm0oKTtcbiAgfSk7XG5cbiAgY29uc3QgZ2V0RmllbGRNZXRhID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5hbWU6IHN0cmluZyk6IEZpZWxkTWV0YVByb3BzPGFueT4gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsdWU6IGdldEluKHN0YXRlLnZhbHVlcywgbmFtZSksXG4gICAgICAgIGVycm9yOiBnZXRJbihzdGF0ZS5lcnJvcnMsIG5hbWUpLFxuICAgICAgICB0b3VjaGVkOiAhIWdldEluKHN0YXRlLnRvdWNoZWQsIG5hbWUpLFxuICAgICAgICBpbml0aWFsVmFsdWU6IGdldEluKGluaXRpYWxWYWx1ZXMuY3VycmVudCwgbmFtZSksXG4gICAgICAgIGluaXRpYWxUb3VjaGVkOiAhIWdldEluKGluaXRpYWxUb3VjaGVkLmN1cnJlbnQsIG5hbWUpLFxuICAgICAgICBpbml0aWFsRXJyb3I6IGdldEluKGluaXRpYWxFcnJvcnMuY3VycmVudCwgbmFtZSksXG4gICAgICB9O1xuICAgIH0sXG4gICAgW3N0YXRlLmVycm9ycywgc3RhdGUudG91Y2hlZCwgc3RhdGUudmFsdWVzXVxuICApO1xuXG4gIGNvbnN0IGdldEZpZWxkSGVscGVycyA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuYW1lOiBzdHJpbmcpOiBGaWVsZEhlbHBlclByb3BzPGFueT4gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgc2V0VmFsdWU6ICh2YWx1ZTogYW55KSA9PiBzZXRGaWVsZFZhbHVlKG5hbWUsIHZhbHVlKSxcbiAgICAgICAgc2V0VG91Y2hlZDogKHZhbHVlOiBib29sZWFuKSA9PiBzZXRGaWVsZFRvdWNoZWQobmFtZSwgdmFsdWUpLFxuICAgICAgICBzZXRFcnJvcjogKHZhbHVlOiBhbnkpID0+IHNldEZpZWxkRXJyb3IobmFtZSwgdmFsdWUpLFxuICAgICAgfTtcbiAgICB9LFxuICAgIFtzZXRGaWVsZFZhbHVlLCBzZXRGaWVsZFRvdWNoZWQsIHNldEZpZWxkRXJyb3JdXG4gICk7XG5cbiAgY29uc3QgZ2V0RmllbGRQcm9wcyA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChuYW1lT3JPcHRpb25zKTogRmllbGRJbnB1dFByb3BzPGFueT4gPT4ge1xuICAgICAgY29uc3QgaXNBbk9iamVjdCA9IGlzT2JqZWN0KG5hbWVPck9wdGlvbnMpO1xuICAgICAgY29uc3QgbmFtZSA9IGlzQW5PYmplY3QgPyBuYW1lT3JPcHRpb25zLm5hbWUgOiBuYW1lT3JPcHRpb25zO1xuICAgICAgY29uc3QgdmFsdWVTdGF0ZSA9IGdldEluKHN0YXRlLnZhbHVlcywgbmFtZSk7XG5cbiAgICAgIGNvbnN0IGZpZWxkOiBGaWVsZElucHV0UHJvcHM8YW55PiA9IHtcbiAgICAgICAgbmFtZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlU3RhdGUsXG4gICAgICAgIG9uQ2hhbmdlOiBoYW5kbGVDaGFuZ2UsXG4gICAgICAgIG9uQmx1cjogaGFuZGxlQmx1cixcbiAgICAgIH07XG4gICAgICBpZiAoaXNBbk9iamVjdCkge1xuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICB2YWx1ZTogdmFsdWVQcm9wLCAvLyB2YWx1ZSBpcyBzcGVjaWFsIGZvciBjaGVja2JveGVzXG4gICAgICAgICAgYXM6IGlzLFxuICAgICAgICAgIG11bHRpcGxlLFxuICAgICAgICB9ID0gbmFtZU9yT3B0aW9ucztcblxuICAgICAgICBpZiAodHlwZSA9PT0gJ2NoZWNrYm94Jykge1xuICAgICAgICAgIGlmICh2YWx1ZVByb3AgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgZmllbGQuY2hlY2tlZCA9ICEhdmFsdWVTdGF0ZTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgZmllbGQuY2hlY2tlZCA9ICEhKFxuICAgICAgICAgICAgICBBcnJheS5pc0FycmF5KHZhbHVlU3RhdGUpICYmIH52YWx1ZVN0YXRlLmluZGV4T2YodmFsdWVQcm9wKVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIGZpZWxkLnZhbHVlID0gdmFsdWVQcm9wO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0eXBlID09PSAncmFkaW8nKSB7XG4gICAgICAgICAgZmllbGQuY2hlY2tlZCA9IHZhbHVlU3RhdGUgPT09IHZhbHVlUHJvcDtcbiAgICAgICAgICBmaWVsZC52YWx1ZSA9IHZhbHVlUHJvcDtcbiAgICAgICAgfSBlbHNlIGlmIChpcyA9PT0gJ3NlbGVjdCcgJiYgbXVsdGlwbGUpIHtcbiAgICAgICAgICBmaWVsZC52YWx1ZSA9IGZpZWxkLnZhbHVlIHx8IFtdO1xuICAgICAgICAgIGZpZWxkLm11bHRpcGxlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIGZpZWxkO1xuICAgIH0sXG4gICAgW2hhbmRsZUJsdXIsIGhhbmRsZUNoYW5nZSwgc3RhdGUudmFsdWVzXVxuICApO1xuXG4gIGNvbnN0IGRpcnR5ID0gUmVhY3QudXNlTWVtbyhcbiAgICAoKSA9PiAhaXNFcXVhbChpbml0aWFsVmFsdWVzLmN1cnJlbnQsIHN0YXRlLnZhbHVlcyksXG4gICAgW2luaXRpYWxWYWx1ZXMuY3VycmVudCwgc3RhdGUudmFsdWVzXVxuICApO1xuXG4gIGNvbnN0IGlzVmFsaWQgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+XG4gICAgICB0eXBlb2YgaXNJbml0aWFsVmFsaWQgIT09ICd1bmRlZmluZWQnXG4gICAgICAgID8gZGlydHlcbiAgICAgICAgICA/IHN0YXRlLmVycm9ycyAmJiBPYmplY3Qua2V5cyhzdGF0ZS5lcnJvcnMpLmxlbmd0aCA9PT0gMFxuICAgICAgICAgIDogaXNJbml0aWFsVmFsaWQgIT09IGZhbHNlICYmIGlzRnVuY3Rpb24oaXNJbml0aWFsVmFsaWQpXG4gICAgICAgICAgPyAoaXNJbml0aWFsVmFsaWQgYXMgKHByb3BzOiBGb3JtaWtDb25maWc8VmFsdWVzPikgPT4gYm9vbGVhbikocHJvcHMpXG4gICAgICAgICAgOiAoaXNJbml0aWFsVmFsaWQgYXMgYm9vbGVhbilcbiAgICAgICAgOiBzdGF0ZS5lcnJvcnMgJiYgT2JqZWN0LmtleXMoc3RhdGUuZXJyb3JzKS5sZW5ndGggPT09IDAsXG4gICAgW2lzSW5pdGlhbFZhbGlkLCBkaXJ0eSwgc3RhdGUuZXJyb3JzLCBwcm9wc11cbiAgKTtcblxuICBjb25zdCBjdHggPSB7XG4gICAgLi4uc3RhdGUsXG4gICAgaW5pdGlhbFZhbHVlczogaW5pdGlhbFZhbHVlcy5jdXJyZW50LFxuICAgIGluaXRpYWxFcnJvcnM6IGluaXRpYWxFcnJvcnMuY3VycmVudCxcbiAgICBpbml0aWFsVG91Y2hlZDogaW5pdGlhbFRvdWNoZWQuY3VycmVudCxcbiAgICBpbml0aWFsU3RhdHVzOiBpbml0aWFsU3RhdHVzLmN1cnJlbnQsXG4gICAgaGFuZGxlQmx1cixcbiAgICBoYW5kbGVDaGFuZ2UsXG4gICAgaGFuZGxlUmVzZXQsXG4gICAgaGFuZGxlU3VibWl0LFxuICAgIHJlc2V0Rm9ybSxcbiAgICBzZXRFcnJvcnMsXG4gICAgc2V0Rm9ybWlrU3RhdGUsXG4gICAgc2V0RmllbGRUb3VjaGVkLFxuICAgIHNldEZpZWxkVmFsdWUsXG4gICAgc2V0RmllbGRFcnJvcixcbiAgICBzZXRTdGF0dXMsXG4gICAgc2V0U3VibWl0dGluZyxcbiAgICBzZXRUb3VjaGVkLFxuICAgIHNldFZhbHVlcyxcbiAgICBzdWJtaXRGb3JtLFxuICAgIHZhbGlkYXRlRm9ybTogdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSxcbiAgICB2YWxpZGF0ZUZpZWxkLFxuICAgIGlzVmFsaWQsXG4gICAgZGlydHksXG4gICAgdW5yZWdpc3RlckZpZWxkLFxuICAgIHJlZ2lzdGVyRmllbGQsXG4gICAgZ2V0RmllbGRQcm9wcyxcbiAgICBnZXRGaWVsZE1ldGEsXG4gICAgZ2V0RmllbGRIZWxwZXJzLFxuICAgIHZhbGlkYXRlT25CbHVyLFxuICAgIHZhbGlkYXRlT25DaGFuZ2UsXG4gICAgdmFsaWRhdGVPbk1vdW50LFxuICB9O1xuXG4gIHJldHVybiBjdHg7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGb3JtaWs8XG4gIFZhbHVlcyBleHRlbmRzIEZvcm1pa1ZhbHVlcyA9IEZvcm1pa1ZhbHVlcyxcbiAgRXh0cmFQcm9wcyA9IHt9XG4+KHByb3BzOiBGb3JtaWtDb25maWc8VmFsdWVzPiAmIEV4dHJhUHJvcHMpIHtcbiAgY29uc3QgZm9ybWlrYmFnID0gdXNlRm9ybWlrPFZhbHVlcz4ocHJvcHMpO1xuICBjb25zdCB7IGNvbXBvbmVudCwgY2hpbGRyZW4sIHJlbmRlciwgaW5uZXJSZWYgfSA9IHByb3BzO1xuXG4gIC8vIFRoaXMgYWxsb3dzIGZvbGtzIHRvIHBhc3MgYSByZWYgdG8gPEZvcm1payAvPlxuICBSZWFjdC51c2VJbXBlcmF0aXZlSGFuZGxlKGlubmVyUmVmLCAoKSA9PiBmb3JtaWtiYWcpO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKF9fREVWX18pIHtcbiAgICAgIGludmFyaWFudChcbiAgICAgICAgIXByb3BzLnJlbmRlcixcbiAgICAgICAgYDxGb3JtaWsgcmVuZGVyPiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIEZvcm1pay4gUGxlYXNlIHVzZSBhIGNoaWxkIGNhbGxiYWNrIGZ1bmN0aW9uIGluc3RlYWQuIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCByZXBsYWNlIDxGb3JtaWsgcmVuZGVyPXsocHJvcHMpID0+IC4uLn0gLz4gd2l0aCA8Rm9ybWlrPnsocHJvcHMpID0+IC4uLn08L0Zvcm1paz5gXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgfSwgW10pO1xuICByZXR1cm4gKFxuICAgIDxGb3JtaWtQcm92aWRlciB2YWx1ZT17Zm9ybWlrYmFnfT5cbiAgICAgIHtjb21wb25lbnRcbiAgICAgICAgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCBhcyBhbnksIGZvcm1pa2JhZylcbiAgICAgICAgOiByZW5kZXJcbiAgICAgICAgPyByZW5kZXIoZm9ybWlrYmFnKVxuICAgICAgICA6IGNoaWxkcmVuIC8vIGNoaWxkcmVuIGNvbWUgbGFzdCwgYWx3YXlzIGNhbGxlZFxuICAgICAgICA/IGlzRnVuY3Rpb24oY2hpbGRyZW4pXG4gICAgICAgICAgPyAoY2hpbGRyZW4gYXMgKGJhZzogRm9ybWlrUHJvcHM8VmFsdWVzPikgPT4gUmVhY3QuUmVhY3ROb2RlKShcbiAgICAgICAgICAgICAgZm9ybWlrYmFnIGFzIEZvcm1pa1Byb3BzPFZhbHVlcz5cbiAgICAgICAgICAgIClcbiAgICAgICAgICA6ICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICAgICAgPyBSZWFjdC5DaGlsZHJlbi5vbmx5KGNoaWxkcmVuKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgICA6IG51bGx9XG4gICAgPC9Gb3JtaWtQcm92aWRlcj5cbiAgKTtcbn1cblxuZnVuY3Rpb24gd2FybkFib3V0TWlzc2luZ0lkZW50aWZpZXIoe1xuICBodG1sQ29udGVudCxcbiAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbmssXG4gIGhhbmRsZXJOYW1lLFxufToge1xuICBodG1sQ29udGVudDogc3RyaW5nO1xuICBkb2N1bWVudGF0aW9uQW5jaG9yTGluazogc3RyaW5nO1xuICBoYW5kbGVyTmFtZTogc3RyaW5nO1xufSkge1xuICBjb25zb2xlLndhcm4oXG4gICAgYFdhcm5pbmc6IEZvcm1payBjYWxsZWQgXFxgJHtoYW5kbGVyTmFtZX1cXGAsIGJ1dCB5b3UgZm9yZ290IHRvIHBhc3MgYW4gXFxgaWRcXGAgb3IgXFxgbmFtZVxcYCBhdHRyaWJ1dGUgdG8geW91ciBpbnB1dDpcbiAgICAke2h0bWxDb250ZW50fVxuICAgIEZvcm1payBjYW5ub3QgZGV0ZXJtaW5lIHdoaWNoIHZhbHVlIHRvIHVwZGF0ZS4gRm9yIG1vcmUgaW5mbyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phcmVkcGFsbWVyL2Zvcm1payMke2RvY3VtZW50YXRpb25BbmNob3JMaW5rfVxuICBgXG4gICk7XG59XG5cbi8qKlxuICogVHJhbnNmb3JtIFl1cCBWYWxpZGF0aW9uRXJyb3IgdG8gYSBtb3JlIHVzYWJsZSBvYmplY3RcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHl1cFRvRm9ybUVycm9yczxWYWx1ZXM+KHl1cEVycm9yOiBhbnkpOiBGb3JtaWtFcnJvcnM8VmFsdWVzPiB7XG4gIGxldCBlcnJvcnM6IEZvcm1pa0Vycm9yczxWYWx1ZXM+ID0ge307XG4gIGlmICh5dXBFcnJvci5pbm5lcikge1xuICAgIGlmICh5dXBFcnJvci5pbm5lci5sZW5ndGggPT09IDApIHtcbiAgICAgIHJldHVybiBzZXRJbihlcnJvcnMsIHl1cEVycm9yLnBhdGgsIHl1cEVycm9yLm1lc3NhZ2UpO1xuICAgIH1cbiAgICBmb3IgKGxldCBlcnIgb2YgeXVwRXJyb3IuaW5uZXIpIHtcbiAgICAgIGlmICghZ2V0SW4oZXJyb3JzLCBlcnIucGF0aCkpIHtcbiAgICAgICAgZXJyb3JzID0gc2V0SW4oZXJyb3JzLCBlcnIucGF0aCwgZXJyLm1lc3NhZ2UpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZXJyb3JzO1xufVxuXG4vKipcbiAqIFZhbGlkYXRlIGEgeXVwIHNjaGVtYS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHZhbGlkYXRlWXVwU2NoZW1hPFQgZXh0ZW5kcyBGb3JtaWtWYWx1ZXM+KFxuICB2YWx1ZXM6IFQsXG4gIHNjaGVtYTogYW55LFxuICBzeW5jOiBib29sZWFuID0gZmFsc2UsXG4gIGNvbnRleHQ6IGFueSA9IHt9XG4pOiBQcm9taXNlPFBhcnRpYWw8VD4+IHtcbiAgY29uc3QgdmFsaWRhdGVEYXRhOiBGb3JtaWtWYWx1ZXMgPSBwcmVwYXJlRGF0YUZvclZhbGlkYXRpb24odmFsdWVzKTtcbiAgcmV0dXJuIHNjaGVtYVtzeW5jID8gJ3ZhbGlkYXRlU3luYycgOiAndmFsaWRhdGUnXSh2YWxpZGF0ZURhdGEsIHtcbiAgICBhYm9ydEVhcmx5OiBmYWxzZSxcbiAgICBjb250ZXh0OiBjb250ZXh0LFxuICB9KTtcbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBwcmVwYXJlIHZhbHVlcy5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbjxUIGV4dGVuZHMgRm9ybWlrVmFsdWVzPihcbiAgdmFsdWVzOiBUXG4pOiBGb3JtaWtWYWx1ZXMge1xuICBsZXQgZGF0YTogRm9ybWlrVmFsdWVzID0ge307XG4gIGZvciAobGV0IGsgaW4gdmFsdWVzKSB7XG4gICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbCh2YWx1ZXMsIGspKSB7XG4gICAgICBjb25zdCBrZXkgPSBTdHJpbmcoayk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZXNba2V5XSkgPT09IHRydWUpIHtcbiAgICAgICAgZGF0YVtrZXldID0gdmFsdWVzW2tleV0ubWFwKCh2YWx1ZTogYW55KSA9PiB7XG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodmFsdWUpID09PSB0cnVlIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgICAgICByZXR1cm4gcHJlcGFyZURhdGFGb3JWYWxpZGF0aW9uKHZhbHVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIHZhbHVlICE9PSAnJyA/IHZhbHVlIDogdW5kZWZpbmVkO1xuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9IGVsc2UgaWYgKGlzUGxhaW5PYmplY3QodmFsdWVzW2tleV0pKSB7XG4gICAgICAgIGRhdGFba2V5XSA9IHByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbih2YWx1ZXNba2V5XSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZXNba2V5XSAhPT0gJycgPyB2YWx1ZXNba2V5XSA6IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgcmV0dXJuIGRhdGE7XG59XG5cbi8qKlxuICogZGVlcG1lcmdlIGFycmF5IG1lcmdpbmcgYWxnb3JpdGhtXG4gKiBodHRwczovL2dpdGh1Yi5jb20vS3lsZUFNYXRoZXdzL2RlZXBtZXJnZSNjb21iaW5lLWFycmF5XG4gKi9cbmZ1bmN0aW9uIGFycmF5TWVyZ2UodGFyZ2V0OiBhbnlbXSwgc291cmNlOiBhbnlbXSwgb3B0aW9uczogYW55KTogYW55W10ge1xuICBjb25zdCBkZXN0aW5hdGlvbiA9IHRhcmdldC5zbGljZSgpO1xuXG4gIHNvdXJjZS5mb3JFYWNoKGZ1bmN0aW9uKGU6IGFueSwgaTogbnVtYmVyKSB7XG4gICAgaWYgKHR5cGVvZiBkZXN0aW5hdGlvbltpXSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnN0IGNsb25lUmVxdWVzdGVkID0gb3B0aW9ucy5jbG9uZSAhPT0gZmFsc2U7XG4gICAgICBjb25zdCBzaG91bGRDbG9uZSA9IGNsb25lUmVxdWVzdGVkICYmIG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QoZSk7XG4gICAgICBkZXN0aW5hdGlvbltpXSA9IHNob3VsZENsb25lXG4gICAgICAgID8gZGVlcG1lcmdlKEFycmF5LmlzQXJyYXkoZSkgPyBbXSA6IHt9LCBlLCBvcHRpb25zKVxuICAgICAgICA6IGU7XG4gICAgfSBlbHNlIGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KGUpKSB7XG4gICAgICBkZXN0aW5hdGlvbltpXSA9IGRlZXBtZXJnZSh0YXJnZXRbaV0sIGUsIG9wdGlvbnMpO1xuICAgIH0gZWxzZSBpZiAodGFyZ2V0LmluZGV4T2YoZSkgPT09IC0xKSB7XG4gICAgICBkZXN0aW5hdGlvbi5wdXNoKGUpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBkZXN0aW5hdGlvbjtcbn1cblxuLyoqIFJldHVybiBtdWx0aSBzZWxlY3QgdmFsdWVzIGJhc2VkIG9uIGFuIGFycmF5IG9mIG9wdGlvbnMgKi9cbmZ1bmN0aW9uIGdldFNlbGVjdGVkVmFsdWVzKG9wdGlvbnM6IGFueVtdKSB7XG4gIHJldHVybiBBcnJheS5mcm9tKG9wdGlvbnMpXG4gICAgLmZpbHRlcihlbCA9PiBlbC5zZWxlY3RlZClcbiAgICAubWFwKGVsID0+IGVsLnZhbHVlKTtcbn1cblxuLyoqIFJldHVybiB0aGUgbmV4dCB2YWx1ZSBmb3IgYSBjaGVja2JveCAqL1xuZnVuY3Rpb24gZ2V0VmFsdWVGb3JDaGVja2JveChcbiAgY3VycmVudFZhbHVlOiBzdHJpbmcgfCBhbnlbXSxcbiAgY2hlY2tlZDogYm9vbGVhbixcbiAgdmFsdWVQcm9wOiBhbnlcbikge1xuICAvLyBJZiB0aGUgY3VycmVudCB2YWx1ZSB3YXMgYSBib29sZWFuLCByZXR1cm4gYSBib29sZWFuXG4gIGlmICh0eXBlb2YgY3VycmVudFZhbHVlID09PSAnYm9vbGVhbicpIHtcbiAgICByZXR1cm4gQm9vbGVhbihjaGVja2VkKTtcbiAgfVxuXG4gIC8vIElmIHRoZSBjdXJyZW50VmFsdWUgd2FzIG5vdCBhIGJvb2xlYW4gd2Ugd2FudCB0byByZXR1cm4gYW4gYXJyYXlcbiAgbGV0IGN1cnJlbnRBcnJheU9mVmFsdWVzID0gW107XG4gIGxldCBpc1ZhbHVlSW5BcnJheSA9IGZhbHNlO1xuICBsZXQgaW5kZXggPSAtMTtcblxuICBpZiAoIUFycmF5LmlzQXJyYXkoY3VycmVudFZhbHVlKSkge1xuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBlcWVxZXFcbiAgICBpZiAoIXZhbHVlUHJvcCB8fCB2YWx1ZVByb3AgPT0gJ3RydWUnIHx8IHZhbHVlUHJvcCA9PSAnZmFsc2UnKSB7XG4gICAgICByZXR1cm4gQm9vbGVhbihjaGVja2VkKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gSWYgdGhlIGN1cnJlbnQgdmFsdWUgaXMgYWxyZWFkeSBhbiBhcnJheSwgdXNlIGl0XG4gICAgY3VycmVudEFycmF5T2ZWYWx1ZXMgPSBjdXJyZW50VmFsdWU7XG4gICAgaW5kZXggPSBjdXJyZW50VmFsdWUuaW5kZXhPZih2YWx1ZVByb3ApO1xuICAgIGlzVmFsdWVJbkFycmF5ID0gaW5kZXggPj0gMDtcbiAgfVxuXG4gIC8vIElmIHRoZSBjaGVja2JveCB3YXMgY2hlY2tlZCBhbmQgdGhlIHZhbHVlIGlzIG5vdCBhbHJlYWR5IHByZXNlbnQgaW4gdGhlIGFyYXkgd2Ugd2FudCB0byBhZGQgdGhlIG5ldyB2YWx1ZSB0byB0aGUgYXJyYXkgb2YgdmFsdWVzXG4gIGlmIChjaGVja2VkICYmIHZhbHVlUHJvcCAmJiAhaXNWYWx1ZUluQXJyYXkpIHtcbiAgICByZXR1cm4gY3VycmVudEFycmF5T2ZWYWx1ZXMuY29uY2F0KHZhbHVlUHJvcCk7XG4gIH1cblxuICAvLyBJZiB0aGUgY2hlY2tib3ggd2FzIHVuY2hlY2tlZCBhbmQgdGhlIHZhbHVlIGlzIG5vdCBpbiB0aGUgYXJyYXksIHNpbXBseSByZXR1cm4gdGhlIGFscmVhZHkgZXhpc3RpbmcgYXJyYXkgb2YgdmFsdWVzXG4gIGlmICghaXNWYWx1ZUluQXJyYXkpIHtcbiAgICByZXR1cm4gY3VycmVudEFycmF5T2ZWYWx1ZXM7XG4gIH1cblxuICAvLyBJZiB0aGUgY2hlY2tib3ggd2FzIHVuY2hlY2tlZCBhbmQgdGhlIHZhbHVlIGlzIGluIHRoZSBhcnJheSwgcmVtb3ZlIHRoZSB2YWx1ZSBhbmQgcmV0dXJuIHRoZSBhcnJheVxuICByZXR1cm4gY3VycmVudEFycmF5T2ZWYWx1ZXNcbiAgICAuc2xpY2UoMCwgaW5kZXgpXG4gICAgLmNvbmNhdChjdXJyZW50QXJyYXlPZlZhbHVlcy5zbGljZShpbmRleCArIDEpKTtcbn1cblxuLy8gUmVhY3QgY3VycmVudGx5IHRocm93cyBhIHdhcm5pbmcgd2hlbiB1c2luZyB1c2VMYXlvdXRFZmZlY3Qgb24gdGhlIHNlcnZlci5cbi8vIFRvIGdldCBhcm91bmQgaXQsIHdlIGNhbiBjb25kaXRpb25hbGx5IHVzZUVmZmVjdCBvbiB0aGUgc2VydmVyIChuby1vcCkgYW5kXG4vLyB1c2VMYXlvdXRFZmZlY3QgaW4gdGhlIGJyb3dzZXIuXG4vLyBAc2VlIGh0dHBzOi8vZ2lzdC5naXRodWIuY29tL2dhZWFyb24vZTdkOTdjZGYzOGEyOTA3OTI0ZWExMmU0ZWJkZjNjODVcbmNvbnN0IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgPVxuICB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyAmJlxuICB0eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgIT09ICd1bmRlZmluZWQnXG4gICAgPyBSZWFjdC51c2VMYXlvdXRFZmZlY3RcbiAgICA6IFJlYWN0LnVzZUVmZmVjdDtcblxuZnVuY3Rpb24gdXNlRXZlbnRDYWxsYmFjazxUIGV4dGVuZHMgKC4uLmFyZ3M6IGFueVtdKSA9PiBhbnk+KGZuOiBUKTogVCB7XG4gIGNvbnN0IHJlZjogYW55ID0gUmVhY3QudXNlUmVmKGZuKTtcblxuICAvLyB3ZSBjb3B5IGEgcmVmIHRvIHRoZSBjYWxsYmFjayBzY29wZWQgdG8gdGhlIGN1cnJlbnQgc3RhdGUvcHJvcHMgb24gZWFjaCByZW5kZXJcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCgoKSA9PiB7XG4gICAgcmVmLmN1cnJlbnQgPSBmbjtcbiAgfSk7XG5cbiAgcmV0dXJuIFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICguLi5hcmdzOiBhbnlbXSkgPT4gcmVmLmN1cnJlbnQuYXBwbHkodm9pZCAwLCBhcmdzKSxcbiAgICBbXVxuICApIGFzIFQ7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VGb3JtaWtDb250ZXh0IH0gZnJvbSAnLi9Gb3JtaWtDb250ZXh0JztcblxuZXhwb3J0IHR5cGUgRm9ybWlrRm9ybVByb3BzID0gUGljazxcbiAgUmVhY3QuRm9ybUhUTUxBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD4sXG4gIEV4Y2x1ZGU8XG4gICAga2V5b2YgUmVhY3QuRm9ybUhUTUxBdHRyaWJ1dGVzPEhUTUxGb3JtRWxlbWVudD4sXG4gICAgJ29uUmVzZXQnIHwgJ29uU3VibWl0J1xuICA+XG4+O1xuXG50eXBlIEZvcm1Qcm9wcyA9IFJlYWN0LkNvbXBvbmVudFByb3BzV2l0aG91dFJlZjwnZm9ybSc+O1xuXG4vLyBAdG9kbyB0ZXN0c1xuZXhwb3J0IGNvbnN0IEZvcm0gPSBSZWFjdC5mb3J3YXJkUmVmPEhUTUxGb3JtRWxlbWVudCwgRm9ybVByb3BzPihcbiAgKHByb3BzOiBGb3JtaWtGb3JtUHJvcHMsIHJlZikgPT4ge1xuICAgIC8vIGlPUyBuZWVkcyBhbiBcImFjdGlvblwiIGF0dHJpYnV0ZSBmb3IgbmljZSBpbnB1dDogaHR0cHM6Ly9zdGFja292ZXJmbG93LmNvbS9hLzM5NDg1MTYyLzQwNjcyNVxuICAgIC8vIFdlIGRlZmF1bHQgdGhlIGFjdGlvbiB0byBcIiNcIiBpbiBjYXNlIHRoZSBwcmV2ZW50RGVmYXVsdCBmYWlscyAoanVzdCB1cGRhdGVzIHRoZSBVUkwgaGFzaClcbiAgICBjb25zdCB7IGFjdGlvbiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgY29uc3QgX2FjdGlvbiA9IGFjdGlvbiB8fCAnIyc7XG4gICAgY29uc3QgeyBoYW5kbGVSZXNldCwgaGFuZGxlU3VibWl0IH0gPSB1c2VGb3JtaWtDb250ZXh0KCk7XG4gICAgcmV0dXJuIChcbiAgICAgIDxmb3JtXG4gICAgICAgIG9uU3VibWl0PXtoYW5kbGVTdWJtaXR9XG4gICAgICAgIHJlZj17cmVmfVxuICAgICAgICBvblJlc2V0PXtoYW5kbGVSZXNldH1cbiAgICAgICAgYWN0aW9uPXtfYWN0aW9ufVxuICAgICAgICB7Li4ucmVzdH1cbiAgICAgIC8+XG4gICAgKTtcbiAgfVxuKTtcblxuRm9ybS5kaXNwbGF5TmFtZSA9ICdGb3JtJztcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBob2lzdE5vblJlYWN0U3RhdGljcyBmcm9tICdob2lzdC1ub24tcmVhY3Qtc3RhdGljcyc7XG5cbmltcG9ydCB7IEZvcm1pa0NvbnRleHRUeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBGb3JtaWtDb25zdW1lciB9IGZyb20gJy4vRm9ybWlrQ29udGV4dCc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbi8qKlxuICogQ29ubmVjdCBhbnkgY29tcG9uZW50IHRvIEZvcm1payBjb250ZXh0LCBhbmQgaW5qZWN0IGFzIGEgcHJvcCBjYWxsZWQgYGZvcm1pa2A7XG4gKiBAcGFyYW0gQ29tcCBSZWFjdCBDb21wb25lbnRcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNvbm5lY3Q8T3V0ZXJQcm9wcywgVmFsdWVzID0ge30+KFxuICBDb21wOiBSZWFjdC5Db21wb25lbnRUeXBlPE91dGVyUHJvcHMgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9PlxuKSB7XG4gIGNvbnN0IEM6IFJlYWN0LlNGQzxPdXRlclByb3BzPiA9IChwcm9wczogT3V0ZXJQcm9wcykgPT4gKFxuICAgIDxGb3JtaWtDb25zdW1lcj5cbiAgICAgIHtmb3JtaWsgPT4ge1xuICAgICAgICBpbnZhcmlhbnQoXG4gICAgICAgICAgISFmb3JtaWssXG4gICAgICAgICAgYEZvcm1payBjb250ZXh0IGlzIHVuZGVmaW5lZCwgcGxlYXNlIHZlcmlmeSB5b3UgYXJlIHJlbmRlcmluZyA8Rm9ybT4sIDxGaWVsZD4sIDxGYXN0RmllbGQ+LCA8RmllbGRBcnJheT4sIG9yIHlvdXIgY3VzdG9tIGNvbnRleHQtdXNpbmcgY29tcG9uZW50IGFzIGEgY2hpbGQgb2YgYSA8Rm9ybWlrPiBjb21wb25lbnQuIENvbXBvbmVudCBuYW1lOiAke0NvbXAubmFtZX1gXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiA8Q29tcCB7Li4ucHJvcHN9IGZvcm1paz17Zm9ybWlrfSAvPjtcbiAgICAgIH19XG4gICAgPC9Gb3JtaWtDb25zdW1lcj5cbiAgKTtcbiAgY29uc3QgY29tcG9uZW50RGlzcGxheU5hbWUgPVxuICAgIENvbXAuZGlzcGxheU5hbWUgfHxcbiAgICBDb21wLm5hbWUgfHxcbiAgICAoQ29tcC5jb25zdHJ1Y3RvciAmJiBDb21wLmNvbnN0cnVjdG9yLm5hbWUpIHx8XG4gICAgJ0NvbXBvbmVudCc7XG5cbiAgLy8gQXNzaWduIENvbXAgdG8gQy5XcmFwcGVkQ29tcG9uZW50IHNvIHdlIGNhbiBhY2Nlc3MgdGhlIGlubmVyIGNvbXBvbmVudCBpbiB0ZXN0c1xuICAvLyBGb3IgZXhhbXBsZSwgPEZpZWxkLldyYXBwZWRDb21wb25lbnQgLz4gZ2V0cyB1cyA8RmllbGRJbm5lci8+XG4gIChDIGFzIFJlYWN0LlNGQzxPdXRlclByb3BzPiAmIHtcbiAgICBXcmFwcGVkQ29tcG9uZW50OiBSZWFjdC5SZWFjdE5vZGU7XG4gIH0pLldyYXBwZWRDb21wb25lbnQgPSBDb21wO1xuXG4gIEMuZGlzcGxheU5hbWUgPSBgRm9ybWlrQ29ubmVjdCgke2NvbXBvbmVudERpc3BsYXlOYW1lfSlgO1xuXG4gIHJldHVybiBob2lzdE5vblJlYWN0U3RhdGljcyhcbiAgICBDLFxuICAgIENvbXAgYXMgUmVhY3QuQ29tcG9uZW50Q2xhc3M8XG4gICAgICBPdXRlclByb3BzICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPFZhbHVlcz4gfVxuICAgID4gLy8gY2FzdCB0eXBlIHRvIENvbXBvbmVudENsYXNzIChldmVuIGlmIFNGQylcbiAgKSBhcyBSZWFjdC5Db21wb25lbnRUeXBlPE91dGVyUHJvcHM+O1xufVxuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGNsb25lRGVlcCBmcm9tICdsb2Rhc2gvY2xvbmVEZWVwJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICcuL2Nvbm5lY3QnO1xuaW1wb3J0IHtcbiAgRm9ybWlrQ29udGV4dFR5cGUsXG4gIEZvcm1pa1N0YXRlLFxuICBTaGFyZWRSZW5kZXJQcm9wcyxcbiAgRm9ybWlrUHJvcHMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHtcbiAgZ2V0SW4sXG4gIGlzRW1wdHlDaGlsZHJlbixcbiAgaXNGdW5jdGlvbixcbiAgc2V0SW4sXG4gIGlzRW1wdHlBcnJheSxcbn0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgaXNFcXVhbCBmcm9tICdyZWFjdC1mYXN0LWNvbXBhcmUnO1xuXG5leHBvcnQgdHlwZSBGaWVsZEFycmF5UmVuZGVyUHJvcHMgPSBBcnJheUhlbHBlcnMgJiB7XG4gIGZvcm06IEZvcm1pa1Byb3BzPGFueT47XG4gIG5hbWU6IHN0cmluZztcbn07XG5cbmV4cG9ydCB0eXBlIEZpZWxkQXJyYXlDb25maWcgPSB7XG4gIC8qKiBSZWFsbHkgdGhlIHBhdGggdG8gdGhlIGFycmF5IGZpZWxkIHRvIGJlIHVwZGF0ZWQgKi9cbiAgbmFtZTogc3RyaW5nO1xuICAvKiogU2hvdWxkIGZpZWxkIGFycmF5IHZhbGlkYXRlIHRoZSBmb3JtIEFGVEVSIGFycmF5IHVwZGF0ZXMvY2hhbmdlcz8gKi9cbiAgdmFsaWRhdGVPbkNoYW5nZT86IGJvb2xlYW47XG59ICYgU2hhcmVkUmVuZGVyUHJvcHM8RmllbGRBcnJheVJlbmRlclByb3BzPjtcbmV4cG9ydCBpbnRlcmZhY2UgQXJyYXlIZWxwZXJzIHtcbiAgLyoqIEltcGVyYXRpdmVseSBhZGQgYSB2YWx1ZSB0byB0aGUgZW5kIG9mIGFuIGFycmF5ICovXG4gIHB1c2g6IChvYmo6IGFueSkgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gYWRkIGEgdmFsdWUgdG8gdGhlIGVuZCBvZiBhbiBhcnJheSAqL1xuICBoYW5kbGVQdXNoOiAob2JqOiBhbnkpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgc3dhcCB0d28gdmFsdWVzIGluIGFuIGFycmF5ICovXG4gIHN3YXA6IChpbmRleEE6IG51bWJlciwgaW5kZXhCOiBudW1iZXIpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIHN3YXAgdHdvIHZhbHVlcyBpbiBhbiBhcnJheSAqL1xuICBoYW5kbGVTd2FwOiAoaW5kZXhBOiBudW1iZXIsIGluZGV4QjogbnVtYmVyKSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IG1vdmUgYW4gZWxlbWVudCBpbiBhbiBhcnJheSB0byBhbm90aGVyIGluZGV4ICovXG4gIG1vdmU6IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgbW92ZSBhbiBlbGVtZW50IGluIGFuIGFycmF5IHRvIGFub3RoZXIgaW5kZXggKi9cbiAgaGFuZGxlTW92ZTogKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSBpbnNlcnQgYW4gZWxlbWVudCBhdCBhIGdpdmVuIGluZGV4IGludG8gdGhlIGFycmF5ICovXG4gIGluc2VydDogKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIGluc2VydCBhbiBlbGVtZW50IGF0IGEgZ2l2ZW4gaW5kZXggaW50byB0aGUgYXJyYXkgKi9cbiAgaGFuZGxlSW5zZXJ0OiAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSByZXBsYWNlIGEgdmFsdWUgYXQgYW4gaW5kZXggb2YgYW4gYXJyYXkgICovXG4gIHJlcGxhY2U6IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiB2b2lkO1xuICAvKiogQ3VycmllZCBmbiB0byByZXBsYWNlIGFuIGVsZW1lbnQgYXQgYSBnaXZlbiBpbmRleCBpbnRvIHRoZSBhcnJheSAqL1xuICBoYW5kbGVSZXBsYWNlOiAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSBhZGQgYW4gZWxlbWVudCB0byB0aGUgYmVnaW5uaW5nIG9mIGFuIGFycmF5IGFuZCByZXR1cm4gaXRzIGxlbmd0aCAqL1xuICB1bnNoaWZ0OiAodmFsdWU6IGFueSkgPT4gbnVtYmVyO1xuICAvKiogQ3VycmllZCBmbiB0byBhZGQgYW4gZWxlbWVudCB0byB0aGUgYmVnaW5uaW5nIG9mIGFuIGFycmF5ICovXG4gIGhhbmRsZVVuc2hpZnQ6ICh2YWx1ZTogYW55KSA9PiAoKSA9PiB2b2lkO1xuICAvKiogQ3VycmllZCBmbiB0byByZW1vdmUgYW4gZWxlbWVudCBhdCBhbiBpbmRleCBvZiBhbiBhcnJheSAqL1xuICBoYW5kbGVSZW1vdmU6IChpbmRleDogbnVtYmVyKSA9PiAoKSA9PiB2b2lkO1xuICAvKiogQ3VycmllZCBmbiB0byByZW1vdmUgYSB2YWx1ZSBmcm9tIHRoZSBlbmQgb2YgdGhlIGFycmF5ICovXG4gIGhhbmRsZVBvcDogKCkgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSByZW1vdmUgYW5kIGVsZW1lbnQgYXQgYW4gaW5kZXggb2YgYW4gYXJyYXkgKi9cbiAgcmVtb3ZlPFQ+KGluZGV4OiBudW1iZXIpOiBUIHwgdW5kZWZpbmVkO1xuICAvKiogSW1wZXJhdGl2ZWx5IHJlbW92ZSBhbmQgcmV0dXJuIHZhbHVlIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkgKi9cbiAgcG9wPFQ+KCk6IFQgfCB1bmRlZmluZWQ7XG59XG5cbi8qKlxuICogU29tZSBhcnJheSBoZWxwZXJzIVxuICovXG5leHBvcnQgY29uc3QgbW92ZSA9IChhcnJheTogYW55W10sIGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4ge1xuICBjb25zdCBjb3B5ID0gY29weUFycmF5TGlrZShhcnJheSk7XG4gIGNvbnN0IHZhbHVlID0gY29weVtmcm9tXTtcbiAgY29weS5zcGxpY2UoZnJvbSwgMSk7XG4gIGNvcHkuc3BsaWNlKHRvLCAwLCB2YWx1ZSk7XG4gIHJldHVybiBjb3B5O1xufTtcblxuZXhwb3J0IGNvbnN0IHN3YXAgPSAoXG4gIGFycmF5TGlrZTogQXJyYXlMaWtlPGFueT4sXG4gIGluZGV4QTogbnVtYmVyLFxuICBpbmRleEI6IG51bWJlclxuKSA9PiB7XG4gIGNvbnN0IGNvcHkgPSBjb3B5QXJyYXlMaWtlKGFycmF5TGlrZSk7XG4gIGNvbnN0IGEgPSBjb3B5W2luZGV4QV07XG4gIGNvcHlbaW5kZXhBXSA9IGNvcHlbaW5kZXhCXTtcbiAgY29weVtpbmRleEJdID0gYTtcbiAgcmV0dXJuIGNvcHk7XG59O1xuXG5leHBvcnQgY29uc3QgaW5zZXJ0ID0gKFxuICBhcnJheUxpa2U6IEFycmF5TGlrZTxhbnk+LFxuICBpbmRleDogbnVtYmVyLFxuICB2YWx1ZTogYW55XG4pID0+IHtcbiAgY29uc3QgY29weSA9IGNvcHlBcnJheUxpa2UoYXJyYXlMaWtlKTtcbiAgY29weS5zcGxpY2UoaW5kZXgsIDAsIHZhbHVlKTtcbiAgcmV0dXJuIGNvcHk7XG59O1xuXG5leHBvcnQgY29uc3QgcmVwbGFjZSA9IChcbiAgYXJyYXlMaWtlOiBBcnJheUxpa2U8YW55PixcbiAgaW5kZXg6IG51bWJlcixcbiAgdmFsdWU6IGFueVxuKSA9PiB7XG4gIGNvbnN0IGNvcHkgPSBjb3B5QXJyYXlMaWtlKGFycmF5TGlrZSk7XG4gIGNvcHlbaW5kZXhdID0gdmFsdWU7XG4gIHJldHVybiBjb3B5O1xufTtcblxuY29uc3QgY29weUFycmF5TGlrZSA9IChhcnJheUxpa2U6IEFycmF5TGlrZTxhbnk+KSA9PiB7XG4gIGlmICghYXJyYXlMaWtlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoYXJyYXlMaWtlKSkge1xuICAgIHJldHVybiBbLi4uYXJyYXlMaWtlXTtcbiAgfSBlbHNlIHtcbiAgICBjb25zdCBtYXhJbmRleCA9IE9iamVjdC5rZXlzKGFycmF5TGlrZSlcbiAgICAgIC5tYXAoa2V5ID0+IHBhcnNlSW50KGtleSkpXG4gICAgICAucmVkdWNlKChtYXgsIGVsKSA9PiAoZWwgPiBtYXggPyBlbCA6IG1heCksIDApO1xuICAgIHJldHVybiBBcnJheS5mcm9tKHsgLi4uYXJyYXlMaWtlLCBsZW5ndGg6IG1heEluZGV4ICsgMSB9KTtcbiAgfVxufTtcblxuY2xhc3MgRmllbGRBcnJheUlubmVyPFZhbHVlcyA9IHt9PiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcbiAgRmllbGRBcnJheUNvbmZpZyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxWYWx1ZXM+IH0sXG4gIHt9XG4+IHtcbiAgc3RhdGljIGRlZmF1bHRQcm9wcyA9IHtcbiAgICB2YWxpZGF0ZU9uQ2hhbmdlOiB0cnVlLFxuICB9O1xuXG4gIGNvbnN0cnVjdG9yKHByb3BzOiBGaWVsZEFycmF5Q29uZmlnICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPFZhbHVlcz4gfSkge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICAvLyBXZSBuZWVkIFR5cGVTY3JpcHQgZ2VuZXJpY3Mgb24gdGhlc2UsIHNvIHdlJ2xsIGJpbmQgdGhlbSBpbiB0aGUgY29uc3RydWN0b3JcbiAgICAvLyBAdG9kbyBGaXggVFMgMy4yLjFcbiAgICB0aGlzLnJlbW92ZSA9IHRoaXMucmVtb3ZlLmJpbmQodGhpcykgYXMgYW55O1xuICAgIHRoaXMucG9wID0gdGhpcy5wb3AuYmluZCh0aGlzKSBhcyBhbnk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUoXG4gICAgcHJldlByb3BzOiBGaWVsZEFycmF5Q29uZmlnICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPFZhbHVlcz4gfVxuICApIHtcbiAgICBpZiAoXG4gICAgICAhaXNFcXVhbChcbiAgICAgICAgZ2V0SW4ocHJldlByb3BzLmZvcm1pay52YWx1ZXMsIHByZXZQcm9wcy5uYW1lKSxcbiAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudmFsdWVzLCB0aGlzLnByb3BzLm5hbWUpXG4gICAgICApICYmXG4gICAgICB0aGlzLnByb3BzLmZvcm1pay52YWxpZGF0ZU9uQ2hhbmdlXG4gICAgKSB7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay52YWxpZGF0ZUZvcm0odGhpcy5wcm9wcy5mb3JtaWsudmFsdWVzKTtcbiAgICB9XG4gIH1cblxuICB1cGRhdGVBcnJheUZpZWxkID0gKFxuICAgIGZuOiBGdW5jdGlvbixcbiAgICBhbHRlclRvdWNoZWQ6IGJvb2xlYW4gfCBGdW5jdGlvbixcbiAgICBhbHRlckVycm9yczogYm9vbGVhbiB8IEZ1bmN0aW9uXG4gICkgPT4ge1xuICAgIGNvbnN0IHtcbiAgICAgIG5hbWUsXG5cbiAgICAgIGZvcm1pazogeyBzZXRGb3JtaWtTdGF0ZSB9LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIHNldEZvcm1pa1N0YXRlKChwcmV2U3RhdGU6IEZvcm1pa1N0YXRlPGFueT4pID0+IHtcbiAgICAgIGxldCB1cGRhdGVFcnJvcnMgPSB0eXBlb2YgYWx0ZXJFcnJvcnMgPT09ICdmdW5jdGlvbicgPyBhbHRlckVycm9ycyA6IGZuO1xuICAgICAgbGV0IHVwZGF0ZVRvdWNoZWQgPVxuICAgICAgICB0eXBlb2YgYWx0ZXJUb3VjaGVkID09PSAnZnVuY3Rpb24nID8gYWx0ZXJUb3VjaGVkIDogZm47XG5cbiAgICAgIC8vIHZhbHVlcyBmbiBzaG91bGQgYmUgZXhlY3V0ZWQgYmVmb3JlIHVwZGF0ZUVycm9ycyBhbmQgdXBkYXRlVG91Y2hlZCxcbiAgICAgIC8vIG90aGVyd2lzZSBpdCBjYXVzZXMgYW4gZXJyb3Igd2l0aCB1bnNoaWZ0LlxuICAgICAgbGV0IHZhbHVlcyA9IHNldEluKFxuICAgICAgICBwcmV2U3RhdGUudmFsdWVzLFxuICAgICAgICBuYW1lLFxuICAgICAgICBmbihnZXRJbihwcmV2U3RhdGUudmFsdWVzLCBuYW1lKSlcbiAgICAgICk7XG5cbiAgICAgIGxldCBmaWVsZEVycm9yID0gYWx0ZXJFcnJvcnNcbiAgICAgICAgPyB1cGRhdGVFcnJvcnMoZ2V0SW4ocHJldlN0YXRlLmVycm9ycywgbmFtZSkpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuICAgICAgbGV0IGZpZWxkVG91Y2hlZCA9IGFsdGVyVG91Y2hlZFxuICAgICAgICA/IHVwZGF0ZVRvdWNoZWQoZ2V0SW4ocHJldlN0YXRlLnRvdWNoZWQsIG5hbWUpKVxuICAgICAgICA6IHVuZGVmaW5lZDtcblxuICAgICAgaWYgKGlzRW1wdHlBcnJheShmaWVsZEVycm9yKSkge1xuICAgICAgICBmaWVsZEVycm9yID0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgICAgaWYgKGlzRW1wdHlBcnJheShmaWVsZFRvdWNoZWQpKSB7XG4gICAgICAgIGZpZWxkVG91Y2hlZCA9IHVuZGVmaW5lZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4ucHJldlN0YXRlLFxuICAgICAgICB2YWx1ZXMsXG4gICAgICAgIGVycm9yczogYWx0ZXJFcnJvcnNcbiAgICAgICAgICA/IHNldEluKHByZXZTdGF0ZS5lcnJvcnMsIG5hbWUsIGZpZWxkRXJyb3IpXG4gICAgICAgICAgOiBwcmV2U3RhdGUuZXJyb3JzLFxuICAgICAgICB0b3VjaGVkOiBhbHRlclRvdWNoZWRcbiAgICAgICAgICA/IHNldEluKHByZXZTdGF0ZS50b3VjaGVkLCBuYW1lLCBmaWVsZFRvdWNoZWQpXG4gICAgICAgICAgOiBwcmV2U3RhdGUudG91Y2hlZCxcbiAgICAgIH07XG4gICAgfSk7XG4gIH07XG5cbiAgcHVzaCA9ICh2YWx1ZTogYW55KSA9PlxuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheUxpa2U6IEFycmF5TGlrZTxhbnk+KSA9PiBbXG4gICAgICAgIC4uLmNvcHlBcnJheUxpa2UoYXJyYXlMaWtlKSxcbiAgICAgICAgY2xvbmVEZWVwKHZhbHVlKSxcbiAgICAgIF0sXG4gICAgICBmYWxzZSxcbiAgICAgIGZhbHNlXG4gICAgKTtcblxuICBoYW5kbGVQdXNoID0gKHZhbHVlOiBhbnkpID0+ICgpID0+IHRoaXMucHVzaCh2YWx1ZSk7XG5cbiAgc3dhcCA9IChpbmRleEE6IG51bWJlciwgaW5kZXhCOiBudW1iZXIpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gc3dhcChhcnJheSwgaW5kZXhBLCBpbmRleEIpLFxuICAgICAgdHJ1ZSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gIGhhbmRsZVN3YXAgPSAoaW5kZXhBOiBudW1iZXIsIGluZGV4QjogbnVtYmVyKSA9PiAoKSA9PlxuICAgIHRoaXMuc3dhcChpbmRleEEsIGluZGV4Qik7XG5cbiAgbW92ZSA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKChhcnJheTogYW55W10pID0+IG1vdmUoYXJyYXksIGZyb20sIHRvKSwgdHJ1ZSwgdHJ1ZSk7XG5cbiAgaGFuZGxlTW92ZSA9IChmcm9tOiBudW1iZXIsIHRvOiBudW1iZXIpID0+ICgpID0+IHRoaXMubW92ZShmcm9tLCB0byk7XG5cbiAgaW5zZXJ0ID0gKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gaW5zZXJ0KGFycmF5LCBpbmRleCwgdmFsdWUpLFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gaW5zZXJ0KGFycmF5LCBpbmRleCwgbnVsbCksXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiBpbnNlcnQoYXJyYXksIGluZGV4LCBudWxsKVxuICAgICk7XG5cbiAgaGFuZGxlSW5zZXJ0ID0gKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+ICgpID0+IHRoaXMuaW5zZXJ0KGluZGV4LCB2YWx1ZSk7XG5cbiAgcmVwbGFjZSA9IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PlxuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheTogYW55W10pID0+IHJlcGxhY2UoYXJyYXksIGluZGV4LCB2YWx1ZSksXG4gICAgICBmYWxzZSxcbiAgICAgIGZhbHNlXG4gICAgKTtcblxuICBoYW5kbGVSZXBsYWNlID0gKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+ICgpID0+XG4gICAgdGhpcy5yZXBsYWNlKGluZGV4LCB2YWx1ZSk7XG5cbiAgdW5zaGlmdCA9ICh2YWx1ZTogYW55KSA9PiB7XG4gICAgbGV0IGxlbmd0aCA9IC0xO1xuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIChhcnJheTogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgYXJyID0gYXJyYXkgPyBbdmFsdWUsIC4uLmFycmF5XSA6IFt2YWx1ZV07XG4gICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIChhcnJheTogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgYXJyID0gYXJyYXkgPyBbbnVsbCwgLi4uYXJyYXldIDogW251bGxdO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH0sXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGFyciA9IGFycmF5ID8gW251bGwsIC4uLmFycmF5XSA6IFtudWxsXTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9XG4gICAgKTtcbiAgICByZXR1cm4gbGVuZ3RoO1xuICB9O1xuXG4gIGhhbmRsZVVuc2hpZnQgPSAodmFsdWU6IGFueSkgPT4gKCkgPT4gdGhpcy51bnNoaWZ0KHZhbHVlKTtcblxuICByZW1vdmU8VD4oaW5kZXg6IG51bWJlcik6IFQge1xuICAgIC8vIFdlIG5lZWQgdG8gbWFrZSBzdXJlIHdlIGFsc28gcmVtb3ZlIHJlbGV2YW50IHBpZWNlcyBvZiBgdG91Y2hlZGAgYW5kIGBlcnJvcnNgXG4gICAgbGV0IHJlc3VsdDogYW55O1xuICAgIHRoaXMudXBkYXRlQXJyYXlGaWVsZChcbiAgICAgIC8vIHNvIHRoaXMgZ2V0cyBjYWxsIDMgdGltZXNcbiAgICAgIChhcnJheT86IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IGNvcHkgPSBhcnJheSA/IGNvcHlBcnJheUxpa2UoYXJyYXkpIDogW107XG4gICAgICAgIGlmICghcmVzdWx0KSB7XG4gICAgICAgICAgcmVzdWx0ID0gY29weVtpbmRleF07XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRnVuY3Rpb24oY29weS5zcGxpY2UpKSB7XG4gICAgICAgICAgY29weS5zcGxpY2UoaW5kZXgsIDEpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb3B5O1xuICAgICAgfSxcbiAgICAgIHRydWUsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIHJldHVybiByZXN1bHQgYXMgVDtcbiAgfVxuXG4gIGhhbmRsZVJlbW92ZSA9IChpbmRleDogbnVtYmVyKSA9PiAoKSA9PiB0aGlzLnJlbW92ZTxhbnk+KGluZGV4KTtcblxuICBwb3A8VD4oKTogVCB7XG4gICAgLy8gUmVtb3ZlIHJlbGV2YW50IHBpZWNlcyBvZiBgdG91Y2hlZGAgYW5kIGBlcnJvcnNgIHRvbyFcbiAgICBsZXQgcmVzdWx0OiBhbnk7XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgLy8gc28gdGhpcyBnZXRzIGNhbGwgMyB0aW1lc1xuICAgICAgKGFycmF5OiBhbnlbXSkgPT4ge1xuICAgICAgICBjb25zdCB0bXAgPSBhcnJheTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSB0bXAgJiYgdG1wLnBvcCAmJiB0bXAucG9wKCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRtcDtcbiAgICAgIH0sXG4gICAgICB0cnVlLFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgICByZXR1cm4gcmVzdWx0IGFzIFQ7XG4gIH1cblxuICBoYW5kbGVQb3AgPSAoKSA9PiAoKSA9PiB0aGlzLnBvcDxhbnk+KCk7XG5cbiAgcmVuZGVyKCkge1xuICAgIGNvbnN0IGFycmF5SGVscGVyczogQXJyYXlIZWxwZXJzID0ge1xuICAgICAgcHVzaDogdGhpcy5wdXNoLFxuICAgICAgcG9wOiB0aGlzLnBvcCxcbiAgICAgIHN3YXA6IHRoaXMuc3dhcCxcbiAgICAgIG1vdmU6IHRoaXMubW92ZSxcbiAgICAgIGluc2VydDogdGhpcy5pbnNlcnQsXG4gICAgICByZXBsYWNlOiB0aGlzLnJlcGxhY2UsXG4gICAgICB1bnNoaWZ0OiB0aGlzLnVuc2hpZnQsXG4gICAgICByZW1vdmU6IHRoaXMucmVtb3ZlLFxuICAgICAgaGFuZGxlUHVzaDogdGhpcy5oYW5kbGVQdXNoLFxuICAgICAgaGFuZGxlUG9wOiB0aGlzLmhhbmRsZVBvcCxcbiAgICAgIGhhbmRsZVN3YXA6IHRoaXMuaGFuZGxlU3dhcCxcbiAgICAgIGhhbmRsZU1vdmU6IHRoaXMuaGFuZGxlTW92ZSxcbiAgICAgIGhhbmRsZUluc2VydDogdGhpcy5oYW5kbGVJbnNlcnQsXG4gICAgICBoYW5kbGVSZXBsYWNlOiB0aGlzLmhhbmRsZVJlcGxhY2UsXG4gICAgICBoYW5kbGVVbnNoaWZ0OiB0aGlzLmhhbmRsZVVuc2hpZnQsXG4gICAgICBoYW5kbGVSZW1vdmU6IHRoaXMuaGFuZGxlUmVtb3ZlLFxuICAgIH07XG5cbiAgICBjb25zdCB7XG4gICAgICBjb21wb25lbnQsXG4gICAgICByZW5kZXIsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIG5hbWUsXG4gICAgICBmb3JtaWs6IHtcbiAgICAgICAgdmFsaWRhdGU6IF92YWxpZGF0ZSxcbiAgICAgICAgdmFsaWRhdGlvblNjaGVtYTogX3ZhbGlkYXRpb25TY2hlbWEsXG4gICAgICAgIC4uLnJlc3RPZkZvcm1pa1xuICAgICAgfSxcbiAgICB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IHByb3BzOiBGaWVsZEFycmF5UmVuZGVyUHJvcHMgPSB7XG4gICAgICAuLi5hcnJheUhlbHBlcnMsXG4gICAgICBmb3JtOiByZXN0T2ZGb3JtaWssXG4gICAgICBuYW1lLFxuICAgIH07XG5cbiAgICByZXR1cm4gY29tcG9uZW50XG4gICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50IGFzIGFueSwgcHJvcHMpXG4gICAgICA6IHJlbmRlclxuICAgICAgPyAocmVuZGVyIGFzIGFueSkocHJvcHMpXG4gICAgICA6IGNoaWxkcmVuIC8vIGNoaWxkcmVuIGNvbWUgbGFzdCwgYWx3YXlzIGNhbGxlZFxuICAgICAgPyB0eXBlb2YgY2hpbGRyZW4gPT09ICdmdW5jdGlvbidcbiAgICAgICAgPyAoY2hpbGRyZW4gYXMgYW55KShwcm9wcylcbiAgICAgICAgOiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgICA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pXG4gICAgICAgIDogbnVsbFxuICAgICAgOiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBGaWVsZEFycmF5ID0gY29ubmVjdDxGaWVsZEFycmF5Q29uZmlnLCBhbnk+KEZpZWxkQXJyYXlJbm5lcik7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBGb3JtaWtDb250ZXh0VHlwZSB9IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgZ2V0SW4sIGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICcuL2Nvbm5lY3QnO1xuXG5leHBvcnQgaW50ZXJmYWNlIEVycm9yTWVzc2FnZVByb3BzIHtcbiAgbmFtZTogc3RyaW5nO1xuICBjbGFzc05hbWU/OiBzdHJpbmc7XG4gIGNvbXBvbmVudD86IHN0cmluZyB8IFJlYWN0LkNvbXBvbmVudFR5cGU7XG4gIGNoaWxkcmVuPzogKGVycm9yTWVzc2FnZTogc3RyaW5nKSA9PiBSZWFjdC5SZWFjdE5vZGU7XG4gIHJlbmRlcj86IChlcnJvck1lc3NhZ2U6IHN0cmluZykgPT4gUmVhY3QuUmVhY3ROb2RlO1xufVxuXG5jbGFzcyBFcnJvck1lc3NhZ2VJbXBsIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBFcnJvck1lc3NhZ2VQcm9wcyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxhbnk+IH1cbj4ge1xuICBzaG91bGRDb21wb25lbnRVcGRhdGUoXG4gICAgcHJvcHM6IEVycm9yTWVzc2FnZVByb3BzICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPGFueT4gfVxuICApIHtcbiAgICBpZiAoXG4gICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGhcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIGxldCB7IGNvbXBvbmVudCwgZm9ybWlrLCByZW5kZXIsIGNoaWxkcmVuLCBuYW1lLCAuLi5yZXN0IH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgdG91Y2ggPSBnZXRJbihmb3JtaWsudG91Y2hlZCwgbmFtZSk7XG4gICAgY29uc3QgZXJyb3IgPSBnZXRJbihmb3JtaWsuZXJyb3JzLCBuYW1lKTtcblxuICAgIHJldHVybiAhIXRvdWNoICYmICEhZXJyb3JcbiAgICAgID8gcmVuZGVyXG4gICAgICAgID8gaXNGdW5jdGlvbihyZW5kZXIpXG4gICAgICAgICAgPyByZW5kZXIoZXJyb3IpXG4gICAgICAgICAgOiBudWxsXG4gICAgICAgIDogY2hpbGRyZW5cbiAgICAgICAgPyBpc0Z1bmN0aW9uKGNoaWxkcmVuKVxuICAgICAgICAgID8gY2hpbGRyZW4oZXJyb3IpXG4gICAgICAgICAgOiBudWxsXG4gICAgICAgIDogY29tcG9uZW50XG4gICAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQsIHJlc3QgYXMgYW55LCBlcnJvcilcbiAgICAgICAgOiBlcnJvclxuICAgICAgOiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBjb25zdCBFcnJvck1lc3NhZ2UgPSBjb25uZWN0PFxuICBFcnJvck1lc3NhZ2VQcm9wcyxcbiAgRXJyb3JNZXNzYWdlUHJvcHMgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8YW55PiB9XG4+KEVycm9yTWVzc2FnZUltcGwpO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuXG5pbXBvcnQge1xuICBGb3JtaWtQcm9wcyxcbiAgR2VuZXJpY0ZpZWxkSFRNTEF0dHJpYnV0ZXMsXG4gIEZvcm1pa0NvbnRleHRUeXBlLFxuICBGaWVsZE1ldGFQcm9wcyxcbiAgRmllbGRJbnB1dFByb3BzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IGdldEluLCBpc0VtcHR5Q2hpbGRyZW4sIGlzRnVuY3Rpb24gfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEZpZWxkQ29uZmlnIH0gZnJvbSAnLi9GaWVsZCc7XG5pbXBvcnQgeyBjb25uZWN0IH0gZnJvbSAnLi9jb25uZWN0JztcblxudHlwZSAkRml4TWUgPSBhbnk7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmFzdEZpZWxkUHJvcHM8ViA9IGFueT4ge1xuICBmaWVsZDogRmllbGRJbnB1dFByb3BzPFY+O1xuICBtZXRhOiBGaWVsZE1ldGFQcm9wczxWPjtcbiAgZm9ybTogRm9ybWlrUHJvcHM8Vj47IC8vIGlmIHBwbCB3YW50IHRvIHJlc3RyaWN0IHRoaXMgZm9yIGEgZ2l2ZW4gZm9ybSwgbGV0IHRoZW0uXG59XG5cbmV4cG9ydCB0eXBlIEZhc3RGaWVsZENvbmZpZzxUPiA9IEZpZWxkQ29uZmlnICYge1xuICAvKiogT3ZlcnJpZGUgRmFzdEZpZWxkJ3MgZGVmYXVsdCBzaG91bGRDb21wb25lbnRVcGRhdGUgKi9cbiAgc2hvdWxkVXBkYXRlPzogKFxuICAgIG5leHRQcm9wczogVCAmIEdlbmVyaWNGaWVsZEhUTUxBdHRyaWJ1dGVzLFxuICAgIHByb3BzOiB7fVxuICApID0+IGJvb2xlYW47XG59O1xuXG5leHBvcnQgdHlwZSBGYXN0RmllbGRBdHRyaWJ1dGVzPFQ+ID0gR2VuZXJpY0ZpZWxkSFRNTEF0dHJpYnV0ZXMgJlxuICBGYXN0RmllbGRDb25maWc8VD4gJlxuICBUO1xuXG50eXBlIEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzID0ge30sIFByb3BzID0ge30+ID0gRmFzdEZpZWxkQXR0cmlidXRlczxcbiAgUHJvcHNcbj4gJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9O1xuXG4vKipcbiAqIEN1c3RvbSBGaWVsZCBjb21wb25lbnQgZm9yIHF1aWNrbHkgaG9va2luZyBpbnRvIEZvcm1pa1xuICogY29udGV4dCBhbmQgd2lyaW5nIHVwIGZvcm1zLlxuICovXG5jbGFzcyBGYXN0RmllbGRJbm5lcjxWYWx1ZXMgPSB7fSwgUHJvcHMgPSB7fT4gZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XG4gIEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzLCBQcm9wcz4sXG4gIHt9XG4+IHtcbiAgY29uc3RydWN0b3IocHJvcHM6IEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzLCBQcm9wcz4pIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgY29uc3QgeyByZW5kZXIsIGNoaWxkcmVuLCBjb21wb25lbnQsIGFzOiBpcywgbmFtZSB9ID0gcHJvcHM7XG4gICAgaW52YXJpYW50KFxuICAgICAgIXJlbmRlcixcbiAgICAgIGA8RmFzdEZpZWxkIHJlbmRlcj4gaGFzIGJlZW4gZGVwcmVjYXRlZC4gUGxlYXNlIHVzZSBhIGNoaWxkIGNhbGxiYWNrIGZ1bmN0aW9uIGluc3RlYWQ6IDxGYXN0RmllbGQgbmFtZT17JHtuYW1lfX0+e3Byb3BzID0+IC4uLn08L0Zhc3RGaWVsZD4gaW5zdGVhZC5gXG4gICAgKTtcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhKGNvbXBvbmVudCAmJiByZW5kZXIpLFxuICAgICAgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIGNvbXBvbmVudD4gYW5kIDxGYXN0RmllbGQgcmVuZGVyPiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWQnXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEoaXMgJiYgY2hpbGRyZW4gJiYgaXNGdW5jdGlvbihjaGlsZHJlbikpLFxuICAgICAgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIGFzPiBhbmQgPEZhc3RGaWVsZCBjaGlsZHJlbj4gYXMgYSBmdW5jdGlvbiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgYXM+IHdpbGwgYmUgaWdub3JlZC4nXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEoY29tcG9uZW50ICYmIGNoaWxkcmVuICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4pKSxcbiAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCBjb21wb25lbnQ+IGFuZCA8RmFzdEZpZWxkIGNoaWxkcmVuPiBhcyBhIGZ1bmN0aW9uIGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZC4nXG4gICAgKTtcblxuICAgIGludmFyaWFudChcbiAgICAgICEocmVuZGVyICYmIGNoaWxkcmVuICYmICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pKSxcbiAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZhc3RGaWVsZCByZW5kZXI+IGFuZCA8RmFzdEZpZWxkIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSA8RmFzdEZpZWxkPiBjb21wb25lbnQ7IDxGYXN0RmllbGQgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCdcbiAgICApO1xuICB9XG5cbiAgc2hvdWxkQ29tcG9uZW50VXBkYXRlKHByb3BzOiBGYXN0RmllbGRJbm5lclByb3BzPFZhbHVlcywgUHJvcHM+KSB7XG4gICAgaWYgKHRoaXMucHJvcHMuc2hvdWxkVXBkYXRlKSB7XG4gICAgICByZXR1cm4gdGhpcy5wcm9wcy5zaG91bGRVcGRhdGUocHJvcHMsIHRoaXMucHJvcHMpO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBwcm9wcy5uYW1lICE9PSB0aGlzLnByb3BzLm5hbWUgfHxcbiAgICAgIGdldEluKHByb3BzLmZvcm1pay52YWx1ZXMsIHRoaXMucHJvcHMubmFtZSkgIT09XG4gICAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLnZhbHVlcywgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLmVycm9ycywgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICBnZXRJbihwcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgT2JqZWN0LmtleXModGhpcy5wcm9wcykubGVuZ3RoICE9PSBPYmplY3Qua2V5cyhwcm9wcykubGVuZ3RoIHx8XG4gICAgICBwcm9wcy5mb3JtaWsuaXNTdWJtaXR0aW5nICE9PSB0aGlzLnByb3BzLmZvcm1pay5pc1N1Ym1pdHRpbmdcbiAgICApIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgLy8gUmVnaXN0ZXIgdGhlIEZpZWxkIHdpdGggdGhlIHBhcmVudCBGb3JtaWsuIFBhcmVudCB3aWxsIGN5Y2xlIHRocm91Z2hcbiAgICAvLyByZWdpc3RlcmVkIEZpZWxkJ3MgdmFsaWRhdGUgZm5zIHJpZ2h0IHByaW9yIHRvIHN1Ym1pdFxuICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB7XG4gICAgICB2YWxpZGF0ZTogdGhpcy5wcm9wcy52YWxpZGF0ZSxcbiAgICB9KTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShwcmV2UHJvcHM6IEZhc3RGaWVsZEF0dHJpYnV0ZXM8UHJvcHM+KSB7XG4gICAgaWYgKHRoaXMucHJvcHMubmFtZSAhPT0gcHJldlByb3BzLm5hbWUpIHtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnVucmVnaXN0ZXJGaWVsZChwcmV2UHJvcHMubmFtZSk7XG4gICAgICB0aGlzLnByb3BzLmZvcm1pay5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSwge1xuICAgICAgICB2YWxpZGF0ZTogdGhpcy5wcm9wcy52YWxpZGF0ZSxcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICh0aGlzLnByb3BzLnZhbGlkYXRlICE9PSBwcmV2UHJvcHMudmFsaWRhdGUpIHtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB7XG4gICAgICAgIHZhbGlkYXRlOiB0aGlzLnByb3BzLnZhbGlkYXRlLFxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgdGhpcy5wcm9wcy5mb3JtaWsudW5yZWdpc3RlckZpZWxkKHRoaXMucHJvcHMubmFtZSk7XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgY29uc3Qge1xuICAgICAgdmFsaWRhdGUsXG4gICAgICBuYW1lLFxuICAgICAgcmVuZGVyLFxuICAgICAgYXM6IGlzLFxuICAgICAgY2hpbGRyZW4sXG4gICAgICBjb21wb25lbnQsXG4gICAgICBzaG91bGRVcGRhdGUsXG4gICAgICBmb3JtaWssXG4gICAgICAuLi5wcm9wc1xuICAgIH0gPSB0aGlzLnByb3BzIGFzIEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzLCBQcm9wcz47XG5cbiAgICBjb25zdCB7XG4gICAgICB2YWxpZGF0ZTogX3ZhbGlkYXRlLFxuICAgICAgdmFsaWRhdGlvblNjaGVtYTogX3ZhbGlkYXRpb25TY2hlbWEsXG4gICAgICAuLi5yZXN0T2ZGb3JtaWtcbiAgICB9ID0gZm9ybWlrO1xuICAgIGNvbnN0IGZpZWxkID0ge1xuICAgICAgdmFsdWU6XG4gICAgICAgIHByb3BzLnR5cGUgPT09ICdyYWRpbycgfHwgcHJvcHMudHlwZSA9PT0gJ2NoZWNrYm94J1xuICAgICAgICAgID8gcHJvcHMudmFsdWUgLy8gUmVhY3QgdXNlcyBjaGVja2VkPXt9IGZvciB0aGVzZSBpbnB1dHNcbiAgICAgICAgICA6IGdldEluKGZvcm1pay52YWx1ZXMsIG5hbWUpLFxuICAgICAgbmFtZSxcbiAgICAgIG9uQ2hhbmdlOiBmb3JtaWsuaGFuZGxlQ2hhbmdlLFxuICAgICAgb25CbHVyOiBmb3JtaWsuaGFuZGxlQmx1cixcbiAgICB9O1xuICAgIGNvbnN0IG1ldGEgPSB7XG4gICAgICB2YWx1ZTogZ2V0SW4oZm9ybWlrLnZhbHVlcywgbmFtZSksXG4gICAgICBlcnJvcjogZ2V0SW4oZm9ybWlrLmVycm9ycywgbmFtZSksXG4gICAgICB0b3VjaGVkOiAhIWdldEluKGZvcm1pay50b3VjaGVkLCBuYW1lKSxcbiAgICAgIGluaXRpYWxWYWx1ZTogZ2V0SW4oZm9ybWlrLmluaXRpYWxWYWx1ZXMsIG5hbWUpLFxuICAgICAgaW5pdGlhbFRvdWNoZWQ6ICEhZ2V0SW4oZm9ybWlrLmluaXRpYWxUb3VjaGVkLCBuYW1lKSxcbiAgICAgIGluaXRpYWxFcnJvcjogZ2V0SW4oZm9ybWlrLmluaXRpYWxFcnJvcnMsIG5hbWUpLFxuICAgIH07XG5cbiAgICBjb25zdCBiYWcgPSB7IGZpZWxkLCBtZXRhLCBmb3JtOiByZXN0T2ZGb3JtaWsgfTtcblxuICAgIGlmIChyZW5kZXIpIHtcbiAgICAgIHJldHVybiAocmVuZGVyIGFzIGFueSkoYmFnKTtcbiAgICB9XG5cbiAgICBpZiAoaXNGdW5jdGlvbihjaGlsZHJlbikpIHtcbiAgICAgIHJldHVybiAoY2hpbGRyZW4gYXMgKHByb3BzOiBGYXN0RmllbGRQcm9wczxhbnk+KSA9PiBSZWFjdC5SZWFjdE5vZGUpKGJhZyk7XG4gICAgfVxuXG4gICAgaWYgKGNvbXBvbmVudCkge1xuICAgICAgLy8gVGhpcyBiZWhhdmlvciBpcyBiYWNrd2FyZHMgY29tcGF0IHdpdGggZWFybGllciBGb3JtaWsgMC45IHRvIDEueFxuICAgICAgaWYgKHR5cGVvZiBjb21wb25lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGNvbnN0IHsgaW5uZXJSZWYsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgICBjb21wb25lbnQsXG4gICAgICAgICAgeyByZWY6IGlubmVyUmVmLCAuLi5maWVsZCwgLi4uKHJlc3QgYXMgJEZpeE1lKSB9LFxuICAgICAgICAgIGNoaWxkcmVuXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICAvLyBXZSBkb24ndCBwYXNzIGBtZXRhYCBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIGNvbXBvbmVudCBhcyBSZWFjdC5Db21wb25lbnRDbGFzczwkRml4TWU+LFxuICAgICAgICB7IGZpZWxkLCBmb3JtOiBmb3JtaWssIC4uLnByb3BzIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIGRlZmF1bHQgdG8gaW5wdXQgaGVyZSBzbyB3ZSBjYW4gY2hlY2sgZm9yIGJvdGggYGFzYCBhbmQgYGNoaWxkcmVuYCBhYm92ZVxuICAgIGNvbnN0IGFzRWxlbWVudCA9IGlzIHx8ICdpbnB1dCc7XG5cbiAgICBpZiAodHlwZW9mIGFzRWxlbWVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHsgaW5uZXJSZWYsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIGFzRWxlbWVudCxcbiAgICAgICAgeyByZWY6IGlubmVyUmVmLCAuLi5maWVsZCwgLi4uKHJlc3QgYXMgJEZpeE1lKSB9LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG5cbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIGFzRWxlbWVudCBhcyBSZWFjdC5Db21wb25lbnRDbGFzcyxcbiAgICAgIHsgLi4uZmllbGQsIC4uLnByb3BzIH0sXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEZhc3RGaWVsZCA9IGNvbm5lY3Q8RmFzdEZpZWxkQXR0cmlidXRlczxhbnk+LCBhbnk+KEZhc3RGaWVsZElubmVyKTtcbiIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzIGZyb20gJy4vY3NzL2Zvcm1IZWFkZXIuc2NzcydcblxuXG5mdW5jdGlvbiBGb3JtSGVhZGVyKHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICB0YWcgPSAnaDInLFxuICAgICAgICB0eXBlID0gJ2gyJyxcbiAgICAgICAgdGV4dFxuICAgIH0gPSBwcm9wc1xuICAgIFxuICAgIC8vINCi0LXQs1xuICAgIGNvbnN0IFRhZyA9IHRhZ1xuICAgIFxuICAgIC8vINCa0LvQsNGB0YHRi1xuICAgIGxldCBjbHMgPSAnJ1xuICAgIGlmKHR5cGUgPT09ICdoMicpIGNscyArPSBzLmgyXG4gICAgaWYodHlwZSA9PT0gJ2gzJykgY2xzICs9IHMuaDNcbiAgICBcbiAgICByZXR1cm4gPFRhZyBjbGFzc05hbWU9e2Nsc30+e3RleHR9PC9UYWc+XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcm1IZWFkZXIiLCJpbXBvcnQgRm9ybUhlYWRlciBmcm9tICcuL2Zvcm1IZWFkZXInXG5leHBvcnQgZGVmYXVsdCBGb3JtSGVhZGVyIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICcuL2Nzcy9lcnJvci5zY3NzJ1xuXG5cbmZ1bmN0aW9uIEVycm9yKHByb3BzKSB7XG4gICAgY29uc3Qge1xuICAgICAgICB0ZXh0ID0gYEVycm9yIG1lc3NhZ2UgZGlkbid0IHBhc3NlZGAsIC8vINCi0LXQutGB0YIg0L7RiNC40LHQutC4XG4gICAgICAgIGluZGVudCxcbiAgICB9ID0gcHJvcHNcbiAgICBcbiAgICBsZXQgY2xzID0gJ2Vycm9yJ1xuICAgIGlmKGluZGVudCAqIDEgPT09IDEpIGNscyArPSAnIGVycm9yLS1wYWRkaW5nLTEnXG4gICAgaWYoaW5kZW50ICogMSA9PT0gMikgY2xzICs9ICcgZXJyb3ItLXBhZGRpbmctMidcbiAgICBpZihpbmRlbnQgKiAxID09PSAzKSBjbHMgKz0gJyBlcnJvci0tcGFkZGluZy0zJ1xuICAgIFxuICAgIHJldHVybiA8cCBjbGFzc05hbWU9e2Nsc30+e3RleHR9PC9wPlxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEVycm9yIiwiaW1wb3J0IEVycm9yIGZyb20gJy4vZXJyb3InXG5leHBvcnQgZGVmYXVsdCBFcnJvciIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn0iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc2Agd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBrZXkgVGhlIGtleSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUhhcyhvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VIYXM7XG4iLCJpbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBwcm9wZXJ0eSBuYW1lcyB3aXRoaW4gcHJvcGVydHkgcGF0aHMuICovXG52YXIgcmVJc0RlZXBQcm9wID0gL1xcLnxcXFsoPzpbXltcXF1dKnwoW1wiJ10pKD86KD8hXFwxKVteXFxcXF18XFxcXC4pKj9cXDEpXFxdLyxcbiAgICByZUlzUGxhaW5Qcm9wID0gL15cXHcqJC87XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYSBwcm9wZXJ0eSBuYW1lIGFuZCBub3QgYSBwcm9wZXJ0eSBwYXRoLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5IGtleXMgb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNLZXkodmFsdWUsIG9iamVjdCkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIGlmICh0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicgfHxcbiAgICAgIHZhbHVlID09IG51bGwgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgcmV0dXJuIHJlSXNQbGFpblByb3AudGVzdCh2YWx1ZSkgfHwgIXJlSXNEZWVwUHJvcC50ZXN0KHZhbHVlKSB8fFxuICAgIChvYmplY3QgIT0gbnVsbCAmJiB2YWx1ZSBpbiBPYmplY3Qob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzS2V5O1xuIiwiaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0tleSBmcm9tICcuL19pc0tleS5qcyc7XG5pbXBvcnQgc3RyaW5nVG9QYXRoIGZyb20gJy4vX3N0cmluZ1RvUGF0aC5qcyc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5cbi8qKlxuICogQ2FzdHMgYHZhbHVlYCB0byBhIHBhdGggYXJyYXkgaWYgaXQncyBub3Qgb25lLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG5mdW5jdGlvbiBjYXN0UGF0aCh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICByZXR1cm4gaXNLZXkodmFsdWUsIG9iamVjdCkgPyBbdmFsdWVdIDogc3RyaW5nVG9QYXRoKHRvU3RyaW5nKHZhbHVlKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNhc3RQYXRoO1xuIiwiaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vX2Nhc3RQYXRoLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBleGlzdHMgb24gYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaGFzRnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2sgcHJvcGVydGllcy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBoYXNGdW5jKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGgsXG4gICAgICByZXN1bHQgPSBmYWxzZTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSB0b0tleShwYXRoW2luZGV4XSk7XG4gICAgaWYgKCEocmVzdWx0ID0gb2JqZWN0ICE9IG51bGwgJiYgaGFzRnVuYyhvYmplY3QsIGtleSkpKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgb2JqZWN0ID0gb2JqZWN0W2tleV07XG4gIH1cbiAgaWYgKHJlc3VsdCB8fCArK2luZGV4ICE9IGxlbmd0aCkge1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cbiAgbGVuZ3RoID0gb2JqZWN0ID09IG51bGwgPyAwIDogb2JqZWN0Lmxlbmd0aDtcbiAgcmV0dXJuICEhbGVuZ3RoICYmIGlzTGVuZ3RoKGxlbmd0aCkgJiYgaXNJbmRleChrZXksIGxlbmd0aCkgJiZcbiAgICAoaXNBcnJheShvYmplY3QpIHx8IGlzQXJndW1lbnRzKG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNQYXRoO1xuIiwiaW1wb3J0IGJhc2VIYXMgZnJvbSAnLi9fYmFzZUhhcy5qcyc7XG5pbXBvcnQgaGFzUGF0aCBmcm9tICcuL19oYXNQYXRoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IHByb3BlcnR5IG9mIGBvYmplY3RgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiB7ICdiJzogMiB9IH07XG4gKiB2YXIgb3RoZXIgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXMob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG9iamVjdCwgJ2EuYicpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXMob3RoZXIsICdhJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXMob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhcyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhcztcbiIsImltcG9ydCBiYXNlQ2xvbmUgZnJvbSAnLi9fYmFzZUNsb25lLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZVdpdGhgIGV4Y2VwdCB0aGF0IGl0IHJlY3Vyc2l2ZWx5IGNsb25lcyBgdmFsdWVgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byByZWN1cnNpdmVseSBjbG9uZS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNsb25pbmcuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZGVlcCBjbG9uZWQgdmFsdWUuXG4gKiBAc2VlIF8uY2xvbmVXaXRoXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIGN1c3RvbWl6ZXIodmFsdWUpIHtcbiAqICAgaWYgKF8uaXNFbGVtZW50KHZhbHVlKSkge1xuICogICAgIHJldHVybiB2YWx1ZS5jbG9uZU5vZGUodHJ1ZSk7XG4gKiAgIH1cbiAqIH1cbiAqXG4gKiB2YXIgZWwgPSBfLmNsb25lRGVlcFdpdGgoZG9jdW1lbnQuYm9keSwgY3VzdG9taXplcik7XG4gKlxuICogY29uc29sZS5sb2coZWwgPT09IGRvY3VtZW50LmJvZHkpO1xuICogLy8gPT4gZmFsc2VcbiAqIGNvbnNvbGUubG9nKGVsLm5vZGVOYW1lKTtcbiAqIC8vID0+ICdCT0RZJ1xuICogY29uc29sZS5sb2coZWwuY2hpbGROb2Rlcy5sZW5ndGgpO1xuICogLy8gPT4gMjBcbiAqL1xuZnVuY3Rpb24gY2xvbmVEZWVwV2l0aCh2YWx1ZSwgY3VzdG9taXplcikge1xuICBjdXN0b21pemVyID0gdHlwZW9mIGN1c3RvbWl6ZXIgPT0gJ2Z1bmN0aW9uJyA/IGN1c3RvbWl6ZXIgOiB1bmRlZmluZWQ7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX0RFRVBfRkxBRyB8IENMT05FX1NZTUJPTFNfRkxBRywgY3VzdG9taXplcik7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lRGVlcFdpdGg7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3RyaW5nYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3RyaW5nLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTdHJpbmcoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTdHJpbmcoMSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc1N0cmluZyh2YWx1ZSkge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09ICdzdHJpbmcnIHx8XG4gICAgKCFpc0FycmF5KHZhbHVlKSAmJiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN0cmluZ1RhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3RyaW5nO1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgaXRlcmF0b3JgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gaXRlcmF0b3IgVGhlIGl0ZXJhdG9yIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gaXRlcmF0b3JUb0FycmF5KGl0ZXJhdG9yKSB7XG4gIHZhciBkYXRhLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgd2hpbGUgKCEoZGF0YSA9IGl0ZXJhdG9yLm5leHQoKSkuZG9uZSkge1xuICAgIHJlc3VsdC5wdXNoKGRhdGEudmFsdWUpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGl0ZXJhdG9yVG9BcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYG1hcGAgdG8gaXRzIGtleS12YWx1ZSBwYWlycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG1hcCBUaGUgbWFwIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGtleS12YWx1ZSBwYWlycy5cbiAqL1xuZnVuY3Rpb24gbWFwVG9BcnJheShtYXApIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShtYXAuc2l6ZSk7XG5cbiAgbWFwLmZvckVhY2goZnVuY3Rpb24odmFsdWUsIGtleSkge1xuICAgIHJlc3VsdFsrK2luZGV4XSA9IFtrZXksIHZhbHVlXTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcFRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBzZXRgIHRvIGFuIGFycmF5IG9mIGl0cyB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzZXQgVGhlIHNldCB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIHNldFRvQXJyYXkoc2V0KSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gQXJyYXkoc2V0LnNpemUpO1xuXG4gIHNldC5mb3JFYWNoKGZ1bmN0aW9uKHZhbHVlKSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gdmFsdWU7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRUb0FycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBhbiBBU0NJSSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gYXNjaWlUb0FycmF5KHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLnNwbGl0KCcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNjaWlUb0FycmF5O1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBzdHJpbmdzIHdpdGggW3plcm8td2lkdGggam9pbmVycyBvciBjb2RlIHBvaW50cyBmcm9tIHRoZSBhc3RyYWwgcGxhbmVzXShodHRwOi8vZWV2LmVlL2Jsb2cvMjAxNS8wOS8xMi9kYXJrLWNvcm5lcnMtb2YtdW5pY29kZS8pLiAqL1xudmFyIHJlSGFzVW5pY29kZSA9IFJlZ0V4cCgnWycgKyByc1pXSiArIHJzQXN0cmFsUmFuZ2UgICsgcnNDb21ib1JhbmdlICsgcnNWYXJSYW5nZSArICddJyk7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBzdHJpbmdgIGNvbnRhaW5zIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSBzeW1ib2wgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZShzdHJpbmcpIHtcbiAgcmV0dXJuIHJlSGFzVW5pY29kZS50ZXN0KHN0cmluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc1VuaWNvZGU7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBc3RyYWwgPSAnWycgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzWldKID0gJ1xcXFx1MjAwZCc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSByZWdleGVzLiAqL1xudmFyIHJlT3B0TW9kID0gcnNNb2RpZmllciArICc/JyxcbiAgICByc09wdFZhciA9ICdbJyArIHJzVmFyUmFuZ2UgKyAnXT8nLFxuICAgIHJzT3B0Sm9pbiA9ICcoPzonICsgcnNaV0ogKyAnKD86JyArIFtyc05vbkFzdHJhbCwgcnNSZWdpb25hbCwgcnNTdXJyUGFpcl0uam9pbignfCcpICsgJyknICsgcnNPcHRWYXIgKyByZU9wdE1vZCArICcpKicsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzU3ltYm9sID0gJyg/OicgKyBbcnNOb25Bc3RyYWwgKyByc0NvbWJvICsgJz8nLCByc0NvbWJvLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyLCByc0FzdHJhbF0uam9pbignfCcpICsgJyknO1xuXG4vKiogVXNlZCB0byBtYXRjaCBbc3RyaW5nIHN5bWJvbHNdKGh0dHBzOi8vbWF0aGlhc2J5bmVucy5iZS9ub3Rlcy9qYXZhc2NyaXB0LXVuaWNvZGUpLiAqL1xudmFyIHJlVW5pY29kZSA9IFJlZ0V4cChyc0ZpdHogKyAnKD89JyArIHJzRml0eiArICcpfCcgKyByc1N5bWJvbCArIHJzU2VxLCAnZycpO1xuXG4vKipcbiAqIENvbnZlcnRzIGEgVW5pY29kZSBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlKSB8fCBbXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdW5pY29kZVRvQXJyYXk7XG4iLCJpbXBvcnQgYXNjaWlUb0FycmF5IGZyb20gJy4vX2FzY2lpVG9BcnJheS5qcyc7XG5pbXBvcnQgaGFzVW5pY29kZSBmcm9tICcuL19oYXNVbmljb2RlLmpzJztcbmltcG9ydCB1bmljb2RlVG9BcnJheSBmcm9tICcuL191bmljb2RlVG9BcnJheS5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBoYXNVbmljb2RlKHN0cmluZylcbiAgICA/IHVuaWNvZGVUb0FycmF5KHN0cmluZylcbiAgICA6IGFzY2lpVG9BcnJheShzdHJpbmcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHJpbmdUb0FycmF5O1xuIiwiaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy52YWx1ZXNgIGFuZCBgXy52YWx1ZXNJbmAgd2hpY2ggY3JlYXRlcyBhblxuICogYXJyYXkgb2YgYG9iamVjdGAgcHJvcGVydHkgdmFsdWVzIGNvcnJlc3BvbmRpbmcgdG8gdGhlIHByb3BlcnR5IG5hbWVzXG4gKiBvZiBgcHJvcHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgbmFtZXMgdG8gZ2V0IHZhbHVlcyBmb3IuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBhcnJheSBvZiBwcm9wZXJ0eSB2YWx1ZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VWYWx1ZXMob2JqZWN0LCBwcm9wcykge1xuICByZXR1cm4gYXJyYXlNYXAocHJvcHMsIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3Rba2V5XTtcbiAgfSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VWYWx1ZXM7XG4iLCJpbXBvcnQgYmFzZVZhbHVlcyBmcm9tICcuL19iYXNlVmFsdWVzLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBhcnJheSBvZiB0aGUgb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IHZhbHVlcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gRm9vKCkge1xuICogICB0aGlzLmEgPSAxO1xuICogICB0aGlzLmIgPSAyO1xuICogfVxuICpcbiAqIEZvby5wcm90b3R5cGUuYyA9IDM7XG4gKlxuICogXy52YWx1ZXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbMSwgMl0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiBfLnZhbHVlcygnaGknKTtcbiAqIC8vID0+IFsnaCcsICdpJ11cbiAqL1xuZnVuY3Rpb24gdmFsdWVzKG9iamVjdCkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyBbXSA6IGJhc2VWYWx1ZXMob2JqZWN0LCBrZXlzKG9iamVjdCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB2YWx1ZXM7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNBcnJheUxpa2UgZnJvbSAnLi9pc0FycmF5TGlrZS5qcyc7XG5pbXBvcnQgaXNTdHJpbmcgZnJvbSAnLi9pc1N0cmluZy5qcyc7XG5pbXBvcnQgaXRlcmF0b3JUb0FycmF5IGZyb20gJy4vX2l0ZXJhdG9yVG9BcnJheS5qcyc7XG5pbXBvcnQgbWFwVG9BcnJheSBmcm9tICcuL19tYXBUb0FycmF5LmpzJztcbmltcG9ydCBzZXRUb0FycmF5IGZyb20gJy4vX3NldFRvQXJyYXkuanMnO1xuaW1wb3J0IHN0cmluZ1RvQXJyYXkgZnJvbSAnLi9fc3RyaW5nVG9BcnJheS5qcyc7XG5pbXBvcnQgdmFsdWVzIGZyb20gJy4vdmFsdWVzLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBzeW1JdGVyYXRvciA9IFN5bWJvbCA/IFN5bWJvbC5pdGVyYXRvciA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgYXJyYXkuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9BcnJheSh7ICdhJzogMSwgJ2InOiAyIH0pO1xuICogLy8gPT4gWzEsIDJdXG4gKlxuICogXy50b0FycmF5KCdhYmMnKTtcbiAqIC8vID0+IFsnYScsICdiJywgJ2MnXVxuICpcbiAqIF8udG9BcnJheSgxKTtcbiAqIC8vID0+IFtdXG4gKlxuICogXy50b0FycmF5KG51bGwpO1xuICogLy8gPT4gW11cbiAqL1xuZnVuY3Rpb24gdG9BcnJheSh2YWx1ZSkge1xuICBpZiAoIXZhbHVlKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIGlmIChpc0FycmF5TGlrZSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gaXNTdHJpbmcodmFsdWUpID8gc3RyaW5nVG9BcnJheSh2YWx1ZSkgOiBjb3B5QXJyYXkodmFsdWUpO1xuICB9XG4gIGlmIChzeW1JdGVyYXRvciAmJiB2YWx1ZVtzeW1JdGVyYXRvcl0pIHtcbiAgICByZXR1cm4gaXRlcmF0b3JUb0FycmF5KHZhbHVlW3N5bUl0ZXJhdG9yXSgpKTtcbiAgfVxuICB2YXIgdGFnID0gZ2V0VGFnKHZhbHVlKSxcbiAgICAgIGZ1bmMgPSB0YWcgPT0gbWFwVGFnID8gbWFwVG9BcnJheSA6ICh0YWcgPT0gc2V0VGFnID8gc2V0VG9BcnJheSA6IHZhbHVlcyk7XG5cbiAgcmV0dXJuIGZ1bmModmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCB0b0FycmF5O1xuIiwidmFyIHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbnZhciBlcnJvclRvU3RyaW5nID0gRXJyb3IucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHJlZ0V4cFRvU3RyaW5nID0gUmVnRXhwLnByb3RvdHlwZS50b1N0cmluZztcbnZhciBzeW1ib2xUb1N0cmluZyA9IHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnID8gU3ltYm9sLnByb3RvdHlwZS50b1N0cmluZyA6IGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuICcnO1xufTtcbnZhciBTWU1CT0xfUkVHRVhQID0gL15TeW1ib2xcXCgoLiopXFwpKC4qKSQvO1xuXG5mdW5jdGlvbiBwcmludE51bWJlcih2YWwpIHtcbiAgaWYgKHZhbCAhPSArdmFsKSByZXR1cm4gJ05hTic7XG4gIHZhciBpc05lZ2F0aXZlWmVybyA9IHZhbCA9PT0gMCAmJiAxIC8gdmFsIDwgMDtcbiAgcmV0dXJuIGlzTmVnYXRpdmVaZXJvID8gJy0wJyA6ICcnICsgdmFsO1xufVxuXG5mdW5jdGlvbiBwcmludFNpbXBsZVZhbHVlKHZhbCwgcXVvdGVTdHJpbmdzKSB7XG4gIGlmIChxdW90ZVN0cmluZ3MgPT09IHZvaWQgMCkge1xuICAgIHF1b3RlU3RyaW5ncyA9IGZhbHNlO1xuICB9XG5cbiAgaWYgKHZhbCA9PSBudWxsIHx8IHZhbCA9PT0gdHJ1ZSB8fCB2YWwgPT09IGZhbHNlKSByZXR1cm4gJycgKyB2YWw7XG4gIHZhciB0eXBlT2YgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZU9mID09PSAnbnVtYmVyJykgcmV0dXJuIHByaW50TnVtYmVyKHZhbCk7XG4gIGlmICh0eXBlT2YgPT09ICdzdHJpbmcnKSByZXR1cm4gcXVvdGVTdHJpbmdzID8gXCJcXFwiXCIgKyB2YWwgKyBcIlxcXCJcIiA6IHZhbDtcbiAgaWYgKHR5cGVPZiA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuICdbRnVuY3Rpb24gJyArICh2YWwubmFtZSB8fCAnYW5vbnltb3VzJykgKyAnXSc7XG4gIGlmICh0eXBlT2YgPT09ICdzeW1ib2wnKSByZXR1cm4gc3ltYm9sVG9TdHJpbmcuY2FsbCh2YWwpLnJlcGxhY2UoU1lNQk9MX1JFR0VYUCwgJ1N5bWJvbCgkMSknKTtcbiAgdmFyIHRhZyA9IHRvU3RyaW5nLmNhbGwodmFsKS5zbGljZSg4LCAtMSk7XG4gIGlmICh0YWcgPT09ICdEYXRlJykgcmV0dXJuIGlzTmFOKHZhbC5nZXRUaW1lKCkpID8gJycgKyB2YWwgOiB2YWwudG9JU09TdHJpbmcodmFsKTtcbiAgaWYgKHRhZyA9PT0gJ0Vycm9yJyB8fCB2YWwgaW5zdGFuY2VvZiBFcnJvcikgcmV0dXJuICdbJyArIGVycm9yVG9TdHJpbmcuY2FsbCh2YWwpICsgJ10nO1xuICBpZiAodGFnID09PSAnUmVnRXhwJykgcmV0dXJuIHJlZ0V4cFRvU3RyaW5nLmNhbGwodmFsKTtcbiAgcmV0dXJuIG51bGw7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByaW50VmFsdWUodmFsdWUsIHF1b3RlU3RyaW5ncykge1xuICB2YXIgcmVzdWx0ID0gcHJpbnRTaW1wbGVWYWx1ZSh2YWx1ZSwgcXVvdGVTdHJpbmdzKTtcbiAgaWYgKHJlc3VsdCAhPT0gbnVsbCkgcmV0dXJuIHJlc3VsdDtcbiAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHZhbHVlLCBmdW5jdGlvbiAoa2V5LCB2YWx1ZSkge1xuICAgIHZhciByZXN1bHQgPSBwcmludFNpbXBsZVZhbHVlKHRoaXNba2V5XSwgcXVvdGVTdHJpbmdzKTtcbiAgICBpZiAocmVzdWx0ICE9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSwgMik7XG59IiwiaW1wb3J0IHByaW50VmFsdWUgZnJvbSAnLi91dGlsL3ByaW50VmFsdWUnO1xuZXhwb3J0IHZhciBtaXhlZCA9IHtcbiAgZGVmYXVsdDogJyR7cGF0aH0gaXMgaW52YWxpZCcsXG4gIHJlcXVpcmVkOiAnJHtwYXRofSBpcyBhIHJlcXVpcmVkIGZpZWxkJyxcbiAgb25lT2Y6ICcke3BhdGh9IG11c3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiAke3ZhbHVlc30nLFxuICBub3RPbmVPZjogJyR7cGF0aH0gbXVzdCBub3QgYmUgb25lIG9mIHRoZSBmb2xsb3dpbmcgdmFsdWVzOiAke3ZhbHVlc30nLFxuICBub3RUeXBlOiBmdW5jdGlvbiBub3RUeXBlKF9yZWYpIHtcbiAgICB2YXIgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgICAgdHlwZSA9IF9yZWYudHlwZSxcbiAgICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgICBvcmlnaW5hbFZhbHVlID0gX3JlZi5vcmlnaW5hbFZhbHVlO1xuICAgIHZhciBpc0Nhc3QgPSBvcmlnaW5hbFZhbHVlICE9IG51bGwgJiYgb3JpZ2luYWxWYWx1ZSAhPT0gdmFsdWU7XG4gICAgdmFyIG1zZyA9IHBhdGggKyBcIiBtdXN0IGJlIGEgYFwiICsgdHlwZSArIFwiYCB0eXBlLCBcIiArIChcImJ1dCB0aGUgZmluYWwgdmFsdWUgd2FzOiBgXCIgKyBwcmludFZhbHVlKHZhbHVlLCB0cnVlKSArIFwiYFwiKSArIChpc0Nhc3QgPyBcIiAoY2FzdCBmcm9tIHRoZSB2YWx1ZSBgXCIgKyBwcmludFZhbHVlKG9yaWdpbmFsVmFsdWUsIHRydWUpICsgXCJgKS5cIiA6ICcuJyk7XG5cbiAgICBpZiAodmFsdWUgPT09IG51bGwpIHtcbiAgICAgIG1zZyArPSBcIlxcbiBJZiBcXFwibnVsbFxcXCIgaXMgaW50ZW5kZWQgYXMgYW4gZW1wdHkgdmFsdWUgYmUgc3VyZSB0byBtYXJrIHRoZSBzY2hlbWEgYXMgYC5udWxsYWJsZSgpYFwiO1xuICAgIH1cblxuICAgIHJldHVybiBtc2c7XG4gIH0sXG4gIGRlZmluZWQ6ICcke3BhdGh9IG11c3QgYmUgZGVmaW5lZCdcbn07XG5leHBvcnQgdmFyIHN0cmluZyA9IHtcbiAgbGVuZ3RoOiAnJHtwYXRofSBtdXN0IGJlIGV4YWN0bHkgJHtsZW5ndGh9IGNoYXJhY3RlcnMnLFxuICBtaW46ICcke3BhdGh9IG11c3QgYmUgYXQgbGVhc3QgJHttaW59IGNoYXJhY3RlcnMnLFxuICBtYXg6ICcke3BhdGh9IG11c3QgYmUgYXQgbW9zdCAke21heH0gY2hhcmFjdGVycycsXG4gIG1hdGNoZXM6ICcke3BhdGh9IG11c3QgbWF0Y2ggdGhlIGZvbGxvd2luZzogXCIke3JlZ2V4fVwiJyxcbiAgZW1haWw6ICcke3BhdGh9IG11c3QgYmUgYSB2YWxpZCBlbWFpbCcsXG4gIHVybDogJyR7cGF0aH0gbXVzdCBiZSBhIHZhbGlkIFVSTCcsXG4gIHRyaW06ICcke3BhdGh9IG11c3QgYmUgYSB0cmltbWVkIHN0cmluZycsXG4gIGxvd2VyY2FzZTogJyR7cGF0aH0gbXVzdCBiZSBhIGxvd2VyY2FzZSBzdHJpbmcnLFxuICB1cHBlcmNhc2U6ICcke3BhdGh9IG11c3QgYmUgYSB1cHBlciBjYXNlIHN0cmluZydcbn07XG5leHBvcnQgdmFyIG51bWJlciA9IHtcbiAgbWluOiAnJHtwYXRofSBtdXN0IGJlIGdyZWF0ZXIgdGhhbiBvciBlcXVhbCB0byAke21pbn0nLFxuICBtYXg6ICcke3BhdGh9IG11c3QgYmUgbGVzcyB0aGFuIG9yIGVxdWFsIHRvICR7bWF4fScsXG4gIGxlc3NUaGFuOiAnJHtwYXRofSBtdXN0IGJlIGxlc3MgdGhhbiAke2xlc3N9JyxcbiAgbW9yZVRoYW46ICcke3BhdGh9IG11c3QgYmUgZ3JlYXRlciB0aGFuICR7bW9yZX0nLFxuICBub3RFcXVhbDogJyR7cGF0aH0gbXVzdCBiZSBub3QgZXF1YWwgdG8gJHtub3RFcXVhbH0nLFxuICBwb3NpdGl2ZTogJyR7cGF0aH0gbXVzdCBiZSBhIHBvc2l0aXZlIG51bWJlcicsXG4gIG5lZ2F0aXZlOiAnJHtwYXRofSBtdXN0IGJlIGEgbmVnYXRpdmUgbnVtYmVyJyxcbiAgaW50ZWdlcjogJyR7cGF0aH0gbXVzdCBiZSBhbiBpbnRlZ2VyJ1xufTtcbmV4cG9ydCB2YXIgZGF0ZSA9IHtcbiAgbWluOiAnJHtwYXRofSBmaWVsZCBtdXN0IGJlIGxhdGVyIHRoYW4gJHttaW59JyxcbiAgbWF4OiAnJHtwYXRofSBmaWVsZCBtdXN0IGJlIGF0IGVhcmxpZXIgdGhhbiAke21heH0nXG59O1xuZXhwb3J0IHZhciBib29sZWFuID0ge307XG5leHBvcnQgdmFyIG9iamVjdCA9IHtcbiAgbm9Vbmtub3duOiAnJHtwYXRofSBmaWVsZCBoYXMgdW5zcGVjaWZpZWQga2V5czogJHt1bmtub3dufSdcbn07XG5leHBvcnQgdmFyIGFycmF5ID0ge1xuICBtaW46ICcke3BhdGh9IGZpZWxkIG11c3QgaGF2ZSBhdCBsZWFzdCAke21pbn0gaXRlbXMnLFxuICBtYXg6ICcke3BhdGh9IGZpZWxkIG11c3QgaGF2ZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJHttYXh9IGl0ZW1zJ1xufTtcbmV4cG9ydCBkZWZhdWx0IHtcbiAgbWl4ZWQ6IG1peGVkLFxuICBzdHJpbmc6IHN0cmluZyxcbiAgbnVtYmVyOiBudW1iZXIsXG4gIGRhdGU6IGRhdGUsXG4gIG9iamVjdDogb2JqZWN0LFxuICBhcnJheTogYXJyYXksXG4gIGJvb2xlYW46IGJvb2xlYW5cbn07IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uIChvYmopIHtcbiAgcmV0dXJuIG9iaiAmJiBvYmouX19pc1l1cFNjaGVtYV9fO1xufSk7IiwiaW1wb3J0IGhhcyBmcm9tIFwibG9kYXNoLWVzL2hhc1wiO1xuaW1wb3J0IGlzU2NoZW1hIGZyb20gJy4vdXRpbC9pc1NjaGVtYSc7XG5cbnZhciBDb25kaXRpb24gPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBDb25kaXRpb24ocmVmcywgb3B0aW9ucykge1xuICAgIHRoaXMucmVmcyA9IHJlZnM7XG5cbiAgICBpZiAodHlwZW9mIG9wdGlvbnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuZm4gPSBvcHRpb25zO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICghaGFzKG9wdGlvbnMsICdpcycpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdgaXM6YCBpcyByZXF1aXJlZCBmb3IgYHdoZW4oKWAgY29uZGl0aW9ucycpO1xuICAgIGlmICghb3B0aW9ucy50aGVuICYmICFvcHRpb25zLm90aGVyd2lzZSkgdGhyb3cgbmV3IFR5cGVFcnJvcignZWl0aGVyIGB0aGVuOmAgb3IgYG90aGVyd2lzZTpgIGlzIHJlcXVpcmVkIGZvciBgd2hlbigpYCBjb25kaXRpb25zJyk7XG4gICAgdmFyIGlzID0gb3B0aW9ucy5pcyxcbiAgICAgICAgdGhlbiA9IG9wdGlvbnMudGhlbixcbiAgICAgICAgb3RoZXJ3aXNlID0gb3B0aW9ucy5vdGhlcndpc2U7XG4gICAgdmFyIGNoZWNrID0gdHlwZW9mIGlzID09PSAnZnVuY3Rpb24nID8gaXMgOiBmdW5jdGlvbiAoKSB7XG4gICAgICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgICB2YWx1ZXNbX2tleV0gPSBhcmd1bWVudHNbX2tleV07XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB2YWx1ZXMuZXZlcnkoZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSA9PT0gaXM7XG4gICAgICB9KTtcbiAgICB9O1xuXG4gICAgdGhpcy5mbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4yID0gYXJndW1lbnRzLmxlbmd0aCwgYXJncyA9IG5ldyBBcnJheShfbGVuMiksIF9rZXkyID0gMDsgX2tleTIgPCBfbGVuMjsgX2tleTIrKykge1xuICAgICAgICBhcmdzW19rZXkyXSA9IGFyZ3VtZW50c1tfa2V5Ml07XG4gICAgICB9XG5cbiAgICAgIHZhciBvcHRpb25zID0gYXJncy5wb3AoKTtcbiAgICAgIHZhciBzY2hlbWEgPSBhcmdzLnBvcCgpO1xuICAgICAgdmFyIGJyYW5jaCA9IGNoZWNrLmFwcGx5KHZvaWQgMCwgYXJncykgPyB0aGVuIDogb3RoZXJ3aXNlO1xuICAgICAgaWYgKCFicmFuY2gpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICBpZiAodHlwZW9mIGJyYW5jaCA9PT0gJ2Z1bmN0aW9uJykgcmV0dXJuIGJyYW5jaChzY2hlbWEpO1xuICAgICAgcmV0dXJuIHNjaGVtYS5jb25jYXQoYnJhbmNoLnJlc29sdmUob3B0aW9ucykpO1xuICAgIH07XG4gIH1cblxuICB2YXIgX3Byb3RvID0gQ29uZGl0aW9uLnByb3RvdHlwZTtcblxuICBfcHJvdG8ucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoYmFzZSwgb3B0aW9ucykge1xuICAgIHZhciB2YWx1ZXMgPSB0aGlzLnJlZnMubWFwKGZ1bmN0aW9uIChyZWYpIHtcbiAgICAgIHJldHVybiByZWYuZ2V0VmFsdWUob3B0aW9ucyk7XG4gICAgfSk7XG4gICAgdmFyIHNjaGVtYSA9IHRoaXMuZm4uYXBwbHkoYmFzZSwgdmFsdWVzLmNvbmNhdChiYXNlLCBvcHRpb25zKSk7XG4gICAgaWYgKHNjaGVtYSA9PT0gdW5kZWZpbmVkIHx8IHNjaGVtYSA9PT0gYmFzZSkgcmV0dXJuIGJhc2U7XG4gICAgaWYgKCFpc1NjaGVtYShzY2hlbWEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdjb25kaXRpb25zIG11c3QgcmV0dXJuIGEgc2NoZW1hIG9iamVjdCcpO1xuICAgIHJldHVybiBzY2hlbWEucmVzb2x2ZShvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gQ29uZGl0aW9uO1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBDb25kaXRpb247IiwiaW1wb3J0IHByaW50VmFsdWUgZnJvbSAnLi91dGlsL3ByaW50VmFsdWUnO1xudmFyIHN0clJlZyA9IC9cXCRcXHtcXHMqKFxcdyspXFxzKlxcfS9nO1xuXG52YXIgcmVwbGFjZSA9IGZ1bmN0aW9uIHJlcGxhY2Uoc3RyKSB7XG4gIHJldHVybiBmdW5jdGlvbiAocGFyYW1zKSB7XG4gICAgcmV0dXJuIHN0ci5yZXBsYWNlKHN0clJlZywgZnVuY3Rpb24gKF8sIGtleSkge1xuICAgICAgcmV0dXJuIHByaW50VmFsdWUocGFyYW1zW2tleV0pO1xuICAgIH0pO1xuICB9O1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gVmFsaWRhdGlvbkVycm9yKGVycm9ycywgdmFsdWUsIGZpZWxkLCB0eXBlKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgdGhpcy5uYW1lID0gJ1ZhbGlkYXRpb25FcnJvcic7XG4gIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgdGhpcy5wYXRoID0gZmllbGQ7XG4gIHRoaXMudHlwZSA9IHR5cGU7XG4gIHRoaXMuZXJyb3JzID0gW107XG4gIHRoaXMuaW5uZXIgPSBbXTtcbiAgaWYgKGVycm9ycykgW10uY29uY2F0KGVycm9ycykuZm9yRWFjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgX3RoaXMuZXJyb3JzID0gX3RoaXMuZXJyb3JzLmNvbmNhdChlcnIuZXJyb3JzIHx8IGVycik7XG4gICAgaWYgKGVyci5pbm5lcikgX3RoaXMuaW5uZXIgPSBfdGhpcy5pbm5lci5jb25jYXQoZXJyLmlubmVyLmxlbmd0aCA/IGVyci5pbm5lciA6IGVycik7XG4gIH0pO1xuICB0aGlzLm1lc3NhZ2UgPSB0aGlzLmVycm9ycy5sZW5ndGggPiAxID8gdGhpcy5lcnJvcnMubGVuZ3RoICsgXCIgZXJyb3JzIG9jY3VycmVkXCIgOiB0aGlzLmVycm9yc1swXTtcbiAgaWYgKEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKSBFcnJvci5jYXB0dXJlU3RhY2tUcmFjZSh0aGlzLCBWYWxpZGF0aW9uRXJyb3IpO1xufVxuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoRXJyb3IucHJvdG90eXBlKTtcblZhbGlkYXRpb25FcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBWYWxpZGF0aW9uRXJyb3I7XG5cblZhbGlkYXRpb25FcnJvci5pc0Vycm9yID0gZnVuY3Rpb24gKGVycikge1xuICByZXR1cm4gZXJyICYmIGVyci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJztcbn07XG5cblZhbGlkYXRpb25FcnJvci5mb3JtYXRFcnJvciA9IGZ1bmN0aW9uIChtZXNzYWdlLCBwYXJhbXMpIHtcbiAgaWYgKHR5cGVvZiBtZXNzYWdlID09PSAnc3RyaW5nJykgbWVzc2FnZSA9IHJlcGxhY2UobWVzc2FnZSk7XG5cbiAgdmFyIGZuID0gZnVuY3Rpb24gZm4ocGFyYW1zKSB7XG4gICAgcGFyYW1zLnBhdGggPSBwYXJhbXMubGFiZWwgfHwgcGFyYW1zLnBhdGggfHwgJ3RoaXMnO1xuICAgIHJldHVybiB0eXBlb2YgbWVzc2FnZSA9PT0gJ2Z1bmN0aW9uJyA/IG1lc3NhZ2UocGFyYW1zKSA6IG1lc3NhZ2U7XG4gIH07XG5cbiAgcmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPT09IDEgPyBmbiA6IGZuKHBhcmFtcyk7XG59OyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IHsgU3luY2hyb25vdXNQcm9taXNlIH0gZnJvbSAnc3luY2hyb25vdXMtcHJvbWlzZSc7XG5pbXBvcnQgVmFsaWRhdGlvbkVycm9yIGZyb20gJy4uL1ZhbGlkYXRpb25FcnJvcic7XG5cbnZhciBwcm9taXNlID0gZnVuY3Rpb24gcHJvbWlzZShzeW5jKSB7XG4gIHJldHVybiBzeW5jID8gU3luY2hyb25vdXNQcm9taXNlIDogUHJvbWlzZTtcbn07XG5cbnZhciB1bndyYXBFcnJvciA9IGZ1bmN0aW9uIHVud3JhcEVycm9yKGVycm9ycykge1xuICBpZiAoZXJyb3JzID09PSB2b2lkIDApIHtcbiAgICBlcnJvcnMgPSBbXTtcbiAgfVxuXG4gIHJldHVybiBlcnJvcnMuaW5uZXIgJiYgZXJyb3JzLmlubmVyLmxlbmd0aCA/IGVycm9ycy5pbm5lciA6IFtdLmNvbmNhdChlcnJvcnMpO1xufTtcblxuZnVuY3Rpb24gc2NvcGVUb1ZhbHVlKHByb21pc2VzLCB2YWx1ZSwgc3luYykge1xuICAvL2NvbnNvbGUubG9nKCdzY29wZVRvVmFsdWUnLCBwcm9taXNlcywgdmFsdWUpXG4gIHZhciBwID0gcHJvbWlzZShzeW5jKS5hbGwocHJvbWlzZXMpOyAvL2NvbnNvbGUubG9nKCdzY29wZVRvVmFsdWUgQicsIHApXG5cbiAgdmFyIGIgPSBwLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBpZiAoZXJyLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSBlcnIudmFsdWUgPSB2YWx1ZTtcbiAgICB0aHJvdyBlcnI7XG4gIH0pOyAvL2NvbnNvbGUubG9nKCdzY29wZVRvVmFsdWUgYycsIGIpXG5cbiAgdmFyIGMgPSBiLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfSk7IC8vY29uc29sZS5sb2coJ3Njb3BlVG9WYWx1ZSBkJywgYylcblxuICByZXR1cm4gYztcbn1cbi8qKlxuICogSWYgbm90IGZhaWxpbmcgb24gdGhlIGZpcnN0IGVycm9yLCBjYXRjaCB0aGUgZXJyb3JzXG4gKiBhbmQgY29sbGVjdCB0aGVtIGluIGFuIGFycmF5XG4gKi9cblxuXG5leHBvcnQgZnVuY3Rpb24gcHJvcGFnYXRlRXJyb3JzKGVuZEVhcmx5LCBlcnJvcnMpIHtcbiAgcmV0dXJuIGVuZEVhcmx5ID8gbnVsbCA6IGZ1bmN0aW9uIChlcnIpIHtcbiAgICBlcnJvcnMucHVzaChlcnIpO1xuICAgIHJldHVybiBlcnIudmFsdWU7XG4gIH07XG59XG5leHBvcnQgZnVuY3Rpb24gc2V0dGxlZChwcm9taXNlcywgc3luYykge1xuICB2YXIgUHJvbWlzZSA9IHByb21pc2Uoc3luYyk7XG4gIHJldHVybiBQcm9taXNlLmFsbChwcm9taXNlcy5tYXAoZnVuY3Rpb24gKHApIHtcbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHApLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBmdWxmaWxsZWQ6IHRydWUsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9LCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZ1bGZpbGxlZDogZmFsc2UsXG4gICAgICAgIHZhbHVlOiB2YWx1ZVxuICAgICAgfTtcbiAgICB9KTtcbiAgfSkpO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGNvbGxlY3RFcnJvcnMoX3JlZikge1xuICB2YXIgdmFsaWRhdGlvbnMgPSBfcmVmLnZhbGlkYXRpb25zLFxuICAgICAgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgcGF0aCA9IF9yZWYucGF0aCxcbiAgICAgIHN5bmMgPSBfcmVmLnN5bmMsXG4gICAgICBlcnJvcnMgPSBfcmVmLmVycm9ycyxcbiAgICAgIHNvcnQgPSBfcmVmLnNvcnQ7XG4gIGVycm9ycyA9IHVud3JhcEVycm9yKGVycm9ycyk7XG4gIHJldHVybiBzZXR0bGVkKHZhbGlkYXRpb25zLCBzeW5jKS50aGVuKGZ1bmN0aW9uIChyZXN1bHRzKSB7XG4gICAgdmFyIG5lc3RlZEVycm9ycyA9IHJlc3VsdHMuZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gIXIuZnVsZmlsbGVkO1xuICAgIH0pLnJlZHVjZShmdW5jdGlvbiAoYXJyLCBfcmVmMikge1xuICAgICAgdmFyIGVycm9yID0gX3JlZjIudmFsdWU7XG5cbiAgICAgIC8vIHdlIGFyZSBvbmx5IGNvbGxlY3RpbmcgdmFsaWRhdGlvbiBlcnJvcnNcbiAgICAgIGlmICghVmFsaWRhdGlvbkVycm9yLmlzRXJyb3IoZXJyb3IpKSB7XG4gICAgICAgIHRocm93IGVycm9yO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gYXJyLmNvbmNhdChlcnJvcik7XG4gICAgfSwgW10pO1xuICAgIGlmIChzb3J0KSBuZXN0ZWRFcnJvcnMuc29ydChzb3J0KTsgLy9zaG93IHBhcmVudCBlcnJvcnMgYWZ0ZXIgdGhlIG5lc3RlZCBvbmVzOiBuYW1lLmZpcnN0LCBuYW1lXG5cbiAgICBlcnJvcnMgPSBuZXN0ZWRFcnJvcnMuY29uY2F0KGVycm9ycyk7XG4gICAgaWYgKGVycm9ycy5sZW5ndGgpIHRocm93IG5ldyBWYWxpZGF0aW9uRXJyb3IoZXJyb3JzLCB2YWx1ZSwgcGF0aCk7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHJ1blZhbGlkYXRpb25zKF9yZWYzKSB7XG4gIHZhciBlbmRFYXJseSA9IF9yZWYzLmVuZEVhcmx5LFxuICAgICAgb3B0aW9ucyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKF9yZWYzLCBbXCJlbmRFYXJseVwiXSk7XG5cbiAgaWYgKGVuZEVhcmx5KSByZXR1cm4gc2NvcGVUb1ZhbHVlKG9wdGlvbnMudmFsaWRhdGlvbnMsIG9wdGlvbnMudmFsdWUsIG9wdGlvbnMuc3luYyk7XG4gIHJldHVybiBjb2xsZWN0RXJyb3JzKG9wdGlvbnMpO1xufSIsImltcG9ydCBoYXMgZnJvbSBcImxvZGFzaC1lcy9oYXNcIjtcbmltcG9ydCBpc1NjaGVtYSBmcm9tICcuL2lzU2NoZW1hJztcblxudmFyIGlzT2JqZWN0ID0gZnVuY3Rpb24gaXNPYmplY3Qob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgT2JqZWN0XSc7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwcmVwZW5kRGVlcCh0YXJnZXQsIHNvdXJjZSkge1xuICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgaWYgKGhhcyhzb3VyY2UsIGtleSkpIHtcbiAgICAgIHZhciBzb3VyY2VWYWwgPSBzb3VyY2Vba2V5XSxcbiAgICAgICAgICB0YXJnZXRWYWwgPSB0YXJnZXRba2V5XTtcblxuICAgICAgaWYgKHRhcmdldFZhbCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIHRhcmdldFtrZXldID0gc291cmNlVmFsO1xuICAgICAgfSBlbHNlIGlmICh0YXJnZXRWYWwgPT09IHNvdXJjZVZhbCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH0gZWxzZSBpZiAoaXNTY2hlbWEodGFyZ2V0VmFsKSkge1xuICAgICAgICBpZiAoaXNTY2hlbWEoc291cmNlVmFsKSkgdGFyZ2V0W2tleV0gPSBzb3VyY2VWYWwuY29uY2F0KHRhcmdldFZhbCk7XG4gICAgICB9IGVsc2UgaWYgKGlzT2JqZWN0KHRhcmdldFZhbCkpIHtcbiAgICAgICAgaWYgKGlzT2JqZWN0KHNvdXJjZVZhbCkpIHRhcmdldFtrZXldID0gcHJlcGVuZERlZXAodGFyZ2V0VmFsLCBzb3VyY2VWYWwpO1xuICAgICAgfSBlbHNlIGlmIChBcnJheS5pc0FycmF5KHRhcmdldFZhbCkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc291cmNlVmFsKSkgdGFyZ2V0W2tleV0gPSBzb3VyY2VWYWwuY29uY2F0KHRhcmdldFZhbCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn0iLCIvKipcbiAqIENyZWF0ZXMgYSBiYXNlIGZ1bmN0aW9uIGZvciBtZXRob2RzIGxpa2UgYF8uZm9ySW5gIGFuZCBgXy5mb3JPd25gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtmcm9tUmlnaHRdIFNwZWNpZnkgaXRlcmF0aW5nIGZyb20gcmlnaHQgdG8gbGVmdC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGJhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJhc2VGb3IoZnJvbVJpZ2h0KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzRnVuYykge1xuICAgIHZhciBpbmRleCA9IC0xLFxuICAgICAgICBpdGVyYWJsZSA9IE9iamVjdChvYmplY3QpLFxuICAgICAgICBwcm9wcyA9IGtleXNGdW5jKG9iamVjdCksXG4gICAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICAgIHdoaWxlIChsZW5ndGgtLSkge1xuICAgICAgdmFyIGtleSA9IHByb3BzW2Zyb21SaWdodCA/IGxlbmd0aCA6ICsraW5kZXhdO1xuICAgICAgaWYgKGl0ZXJhdGVlKGl0ZXJhYmxlW2tleV0sIGtleSwgaXRlcmFibGUpID09PSBmYWxzZSkge1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQmFzZUZvcjtcbiIsImltcG9ydCBjcmVhdGVCYXNlRm9yIGZyb20gJy4vX2NyZWF0ZUJhc2VGb3IuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBiYXNlRm9yT3duYCB3aGljaCBpdGVyYXRlcyBvdmVyIGBvYmplY3RgXG4gKiBwcm9wZXJ0aWVzIHJldHVybmVkIGJ5IGBrZXlzRnVuY2AgYW5kIGludm9rZXMgYGl0ZXJhdGVlYCBmb3IgZWFjaCBwcm9wZXJ0eS5cbiAqIEl0ZXJhdGVlIGZ1bmN0aW9ucyBtYXkgZXhpdCBpdGVyYXRpb24gZWFybHkgYnkgZXhwbGljaXRseSByZXR1cm5pbmcgYGZhbHNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xudmFyIGJhc2VGb3IgPSBjcmVhdGVCYXNlRm9yKCk7XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VGb3I7XG4iLCJpbXBvcnQgYmFzZUZvciBmcm9tICcuL19iYXNlRm9yLmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZm9yT3duYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZUZvck93bihvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgYmFzZUZvcihvYmplY3QsIGl0ZXJhdGVlLCBrZXlzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUZvck93bjtcbiIsIi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBBZGRzIGB2YWx1ZWAgdG8gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBhZGRcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQGFsaWFzIHB1c2hcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNhY2hlLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIHNldENhY2hlQWRkKHZhbHVlKSB7XG4gIHRoaXMuX19kYXRhX18uc2V0KHZhbHVlLCBIQVNIX1VOREVGSU5FRCk7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRDYWNoZUFkZDtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgaW4gdGhlIGFycmF5IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBoYXNcbiAqIEBtZW1iZXJPZiBTZXRDYWNoZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2VhcmNoIGZvci5cbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVIYXModmFsdWUpIHtcbiAgcmV0dXJuIHRoaXMuX19kYXRhX18uaGFzKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc2V0Q2FjaGVIYXM7XG4iLCJpbXBvcnQgTWFwQ2FjaGUgZnJvbSAnLi9fTWFwQ2FjaGUuanMnO1xuaW1wb3J0IHNldENhY2hlQWRkIGZyb20gJy4vX3NldENhY2hlQWRkLmpzJztcbmltcG9ydCBzZXRDYWNoZUhhcyBmcm9tICcuL19zZXRDYWNoZUhhcy5qcyc7XG5cbi8qKlxuICpcbiAqIENyZWF0ZXMgYW4gYXJyYXkgY2FjaGUgb2JqZWN0IHRvIHN0b3JlIHVuaXF1ZSB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW3ZhbHVlc10gVGhlIHZhbHVlcyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gU2V0Q2FjaGUodmFsdWVzKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gdmFsdWVzID09IG51bGwgPyAwIDogdmFsdWVzLmxlbmd0aDtcblxuICB0aGlzLl9fZGF0YV9fID0gbmV3IE1hcENhY2hlO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHRoaXMuYWRkKHZhbHVlc1tpbmRleF0pO1xuICB9XG59XG5cbi8vIEFkZCBtZXRob2RzIHRvIGBTZXRDYWNoZWAuXG5TZXRDYWNoZS5wcm90b3R5cGUuYWRkID0gU2V0Q2FjaGUucHJvdG90eXBlLnB1c2ggPSBzZXRDYWNoZUFkZDtcblNldENhY2hlLnByb3RvdHlwZS5oYXMgPSBzZXRDYWNoZUhhcztcblxuZXhwb3J0IGRlZmF1bHQgU2V0Q2FjaGU7XG4iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5zb21lYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHByZWRpY2F0ZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFueSBlbGVtZW50IHBhc3NlcyB0aGUgcHJlZGljYXRlIGNoZWNrLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlTb21lKGFycmF5LCBwcmVkaWNhdGUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChwcmVkaWNhdGUoYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheVNvbWU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIGBjYWNoZWAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGNhY2hlIFRoZSBjYWNoZSB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBjYWNoZUhhcyhjYWNoZSwga2V5KSB7XG4gIHJldHVybiBjYWNoZS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FjaGVIYXM7XG4iLCJpbXBvcnQgU2V0Q2FjaGUgZnJvbSAnLi9fU2V0Q2FjaGUuanMnO1xuaW1wb3J0IGFycmF5U29tZSBmcm9tICcuL19hcnJheVNvbWUuanMnO1xuaW1wb3J0IGNhY2hlSGFzIGZyb20gJy4vX2NhY2hlSGFzLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3IgYXJyYXlzIHdpdGggc3VwcG9ydCBmb3JcbiAqIHBhcnRpYWwgZGVlcCBjb21wYXJpc29ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge0FycmF5fSBvdGhlciBUaGUgb3RoZXIgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYGFycmF5YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBhcnJheXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxBcnJheXMoYXJyYXksIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcsXG4gICAgICBhcnJMZW5ndGggPSBhcnJheS5sZW5ndGgsXG4gICAgICBvdGhMZW5ndGggPSBvdGhlci5sZW5ndGg7XG5cbiAgaWYgKGFyckxlbmd0aCAhPSBvdGhMZW5ndGggJiYgIShpc1BhcnRpYWwgJiYgb3RoTGVuZ3RoID4gYXJyTGVuZ3RoKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gIHZhciBzdGFja2VkID0gc3RhY2suZ2V0KGFycmF5KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgcmVzdWx0ID0gdHJ1ZSxcbiAgICAgIHNlZW4gPSAoYml0bWFzayAmIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpID8gbmV3IFNldENhY2hlIDogdW5kZWZpbmVkO1xuXG4gIHN0YWNrLnNldChhcnJheSwgb3RoZXIpO1xuICBzdGFjay5zZXQob3RoZXIsIGFycmF5KTtcblxuICAvLyBJZ25vcmUgbm9uLWluZGV4IHByb3BlcnRpZXMuXG4gIHdoaWxlICgrK2luZGV4IDwgYXJyTGVuZ3RoKSB7XG4gICAgdmFyIGFyclZhbHVlID0gYXJyYXlbaW5kZXhdLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2luZGV4XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBhcnJWYWx1ZSwgaW5kZXgsIG90aGVyLCBhcnJheSwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihhcnJWYWx1ZSwgb3RoVmFsdWUsIGluZGV4LCBhcnJheSwgb3RoZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgaWYgKGNvbXBhcmVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmIChjb21wYXJlZCkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgYXJyYXlzIChzdXNjZXB0aWJsZSB0byBjYWxsIHN0YWNrIGxpbWl0cykuXG4gICAgaWYgKHNlZW4pIHtcbiAgICAgIGlmICghYXJyYXlTb21lKG90aGVyLCBmdW5jdGlvbihvdGhWYWx1ZSwgb3RoSW5kZXgpIHtcbiAgICAgICAgICAgIGlmICghY2FjaGVIYXMoc2Vlbiwgb3RoSW5kZXgpICYmXG4gICAgICAgICAgICAgICAgKGFyclZhbHVlID09PSBvdGhWYWx1ZSB8fCBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykpKSB7XG4gICAgICAgICAgICAgIHJldHVybiBzZWVuLnB1c2gob3RoSW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pKSB7XG4gICAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgICBicmVhaztcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKCEoXG4gICAgICAgICAgYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8XG4gICAgICAgICAgICBlcXVhbEZ1bmMoYXJyVmFsdWUsIG90aFZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKGFycmF5KTtcbiAgc3RhY2tbJ2RlbGV0ZSddKG90aGVyKTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZXF1YWxBcnJheXM7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgVWludDhBcnJheSBmcm9tICcuL19VaW50OEFycmF5LmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcbmltcG9ydCBlcXVhbEFycmF5cyBmcm9tICcuL19lcXVhbEFycmF5cy5qcyc7XG5pbXBvcnQgbWFwVG9BcnJheSBmcm9tICcuL19tYXBUb0FycmF5LmpzJztcbmltcG9ydCBzZXRUb0FycmF5IGZyb20gJy4vX3NldFRvQXJyYXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHN5bWJvbFRhZyA9ICdbb2JqZWN0IFN5bWJvbF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFZhbHVlT2YgPSBzeW1ib2xQcm90byA/IHN5bWJvbFByb3RvLnZhbHVlT2YgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBjb21wYXJpbmcgb2JqZWN0cyBvZlxuICogdGhlIHNhbWUgYHRvU3RyaW5nVGFnYC5cbiAqXG4gKiAqKk5vdGU6KiogVGhpcyBmdW5jdGlvbiBvbmx5IHN1cHBvcnRzIGNvbXBhcmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE51bWJlcmAsIGBSZWdFeHBgLCBvciBgU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtzdHJpbmd9IHRhZyBUaGUgYHRvU3RyaW5nVGFnYCBvZiB0aGUgb2JqZWN0cyB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgdGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAob2JqZWN0LmJ5dGVPZmZzZXQgIT0gb3RoZXIuYnl0ZU9mZnNldCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgb2JqZWN0ID0gb2JqZWN0LmJ1ZmZlcjtcbiAgICAgIG90aGVyID0gb3RoZXIuYnVmZmVyO1xuXG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIGlmICgob2JqZWN0LmJ5dGVMZW5ndGggIT0gb3RoZXIuYnl0ZUxlbmd0aCkgfHxcbiAgICAgICAgICAhZXF1YWxGdW5jKG5ldyBVaW50OEFycmF5KG9iamVjdCksIG5ldyBVaW50OEFycmF5KG90aGVyKSkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHRydWU7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgICAgLy8gQ29lcmNlIGJvb2xlYW5zIHRvIGAxYCBvciBgMGAgYW5kIGRhdGVzIHRvIG1pbGxpc2Vjb25kcy5cbiAgICAgIC8vIEludmFsaWQgZGF0ZXMgYXJlIGNvZXJjZWQgdG8gYE5hTmAuXG4gICAgICByZXR1cm4gZXEoK29iamVjdCwgK290aGVyKTtcblxuICAgIGNhc2UgZXJyb3JUYWc6XG4gICAgICByZXR1cm4gb2JqZWN0Lm5hbWUgPT0gb3RoZXIubmFtZSAmJiBvYmplY3QubWVzc2FnZSA9PSBvdGhlci5tZXNzYWdlO1xuXG4gICAgY2FzZSByZWdleHBUYWc6XG4gICAgY2FzZSBzdHJpbmdUYWc6XG4gICAgICAvLyBDb2VyY2UgcmVnZXhlcyB0byBzdHJpbmdzIGFuZCB0cmVhdCBzdHJpbmdzLCBwcmltaXRpdmVzIGFuZCBvYmplY3RzLFxuICAgICAgLy8gYXMgZXF1YWwuIFNlZSBodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcmVnZXhwLnByb3RvdHlwZS50b3N0cmluZ1xuICAgICAgLy8gZm9yIG1vcmUgZGV0YWlscy5cbiAgICAgIHJldHVybiBvYmplY3QgPT0gKG90aGVyICsgJycpO1xuXG4gICAgY2FzZSBtYXBUYWc6XG4gICAgICB2YXIgY29udmVydCA9IG1hcFRvQXJyYXk7XG5cbiAgICBjYXNlIHNldFRhZzpcbiAgICAgIHZhciBpc1BhcnRpYWwgPSBiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUc7XG4gICAgICBjb252ZXJ0IHx8IChjb252ZXJ0ID0gc2V0VG9BcnJheSk7XG5cbiAgICAgIGlmIChvYmplY3Quc2l6ZSAhPSBvdGhlci5zaXplICYmICFpc1BhcnRpYWwpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgICAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICAgICAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgICAgIGlmIChzdGFja2VkKSB7XG4gICAgICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICAgICAgfVxuICAgICAgYml0bWFzayB8PSBDT01QQVJFX1VOT1JERVJFRF9GTEFHO1xuXG4gICAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICAgIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgICAgIHZhciByZXN1bHQgPSBlcXVhbEFycmF5cyhjb252ZXJ0KG9iamVjdCksIGNvbnZlcnQob3RoZXIpLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgICAgIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcblxuICAgIGNhc2Ugc3ltYm9sVGFnOlxuICAgICAgaWYgKHN5bWJvbFZhbHVlT2YpIHtcbiAgICAgICAgcmV0dXJuIHN5bWJvbFZhbHVlT2YuY2FsbChvYmplY3QpID09IHN5bWJvbFZhbHVlT2YuY2FsbChvdGhlcik7XG4gICAgICB9XG4gIH1cbiAgcmV0dXJuIGZhbHNlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbEJ5VGFnO1xuIiwiaW1wb3J0IGdldEFsbEtleXMgZnJvbSAnLi9fZ2V0QWxsS2V5cy5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIG9iamVjdHMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIG9ialByb3BzID0gZ2V0QWxsS2V5cyhvYmplY3QpLFxuICAgICAgb2JqTGVuZ3RoID0gb2JqUHJvcHMubGVuZ3RoLFxuICAgICAgb3RoUHJvcHMgPSBnZXRBbGxLZXlzKG90aGVyKSxcbiAgICAgIG90aExlbmd0aCA9IG90aFByb3BzLmxlbmd0aDtcblxuICBpZiAob2JqTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhaXNQYXJ0aWFsKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBpbmRleCA9IG9iakxlbmd0aDtcbiAgd2hpbGUgKGluZGV4LS0pIHtcbiAgICB2YXIga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIGlmICghKGlzUGFydGlhbCA/IGtleSBpbiBvdGhlciA6IGhhc093blByb3BlcnR5LmNhbGwob3RoZXIsIGtleSkpKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQob2JqZWN0KTtcbiAgaWYgKHN0YWNrZWQgJiYgc3RhY2suZ2V0KG90aGVyKSkge1xuICAgIHJldHVybiBzdGFja2VkID09IG90aGVyO1xuICB9XG4gIHZhciByZXN1bHQgPSB0cnVlO1xuICBzdGFjay5zZXQob2JqZWN0LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgb2JqZWN0KTtcblxuICB2YXIgc2tpcEN0b3IgPSBpc1BhcnRpYWw7XG4gIHdoaWxlICgrK2luZGV4IDwgb2JqTGVuZ3RoKSB7XG4gICAga2V5ID0gb2JqUHJvcHNbaW5kZXhdO1xuICAgIHZhciBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBvdGhWYWx1ZSA9IG90aGVyW2tleV07XG5cbiAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgdmFyIGNvbXBhcmVkID0gaXNQYXJ0aWFsXG4gICAgICAgID8gY3VzdG9taXplcihvdGhWYWx1ZSwgb2JqVmFsdWUsIGtleSwgb3RoZXIsIG9iamVjdCwgc3RhY2spXG4gICAgICAgIDogY3VzdG9taXplcihvYmpWYWx1ZSwgb3RoVmFsdWUsIGtleSwgb2JqZWN0LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBjb21wYXJlIG9iamVjdHMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoIShjb21wYXJlZCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgPyAob2JqVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhvYmpWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSlcbiAgICAgICAgICA6IGNvbXBhcmVkXG4gICAgICAgICkpIHtcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICAgIHNraXBDdG9yIHx8IChza2lwQ3RvciA9IGtleSA9PSAnY29uc3RydWN0b3InKTtcbiAgfVxuICBpZiAocmVzdWx0ICYmICFza2lwQ3Rvcikge1xuICAgIHZhciBvYmpDdG9yID0gb2JqZWN0LmNvbnN0cnVjdG9yLFxuICAgICAgICBvdGhDdG9yID0gb3RoZXIuY29uc3RydWN0b3I7XG5cbiAgICAvLyBOb24gYE9iamVjdGAgb2JqZWN0IGluc3RhbmNlcyB3aXRoIGRpZmZlcmVudCBjb25zdHJ1Y3RvcnMgYXJlIG5vdCBlcXVhbC5cbiAgICBpZiAob2JqQ3RvciAhPSBvdGhDdG9yICYmXG4gICAgICAgICgnY29uc3RydWN0b3InIGluIG9iamVjdCAmJiAnY29uc3RydWN0b3InIGluIG90aGVyKSAmJlxuICAgICAgICAhKHR5cGVvZiBvYmpDdG9yID09ICdmdW5jdGlvbicgJiYgb2JqQ3RvciBpbnN0YW5jZW9mIG9iakN0b3IgJiZcbiAgICAgICAgICB0eXBlb2Ygb3RoQ3RvciA9PSAnZnVuY3Rpb24nICYmIG90aEN0b3IgaW5zdGFuY2VvZiBvdGhDdG9yKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgfVxuICB9XG4gIHN0YWNrWydkZWxldGUnXShvYmplY3QpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbE9iamVjdHM7XG4iLCJpbXBvcnQgU3RhY2sgZnJvbSAnLi9fU3RhY2suanMnO1xuaW1wb3J0IGVxdWFsQXJyYXlzIGZyb20gJy4vX2VxdWFsQXJyYXlzLmpzJztcbmltcG9ydCBlcXVhbEJ5VGFnIGZyb20gJy4vX2VxdWFsQnlUYWcuanMnO1xuaW1wb3J0IGVxdWFsT2JqZWN0cyBmcm9tICcuL19lcXVhbE9iamVjdHMuanMnO1xuaW1wb3J0IGdldFRhZyBmcm9tICcuL19nZXRUYWcuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDE7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxgIGZvciBhcnJheXMgYW5kIG9iamVjdHMgd2hpY2ggcGVyZm9ybXNcbiAqIGRlZXAgY29tcGFyaXNvbnMgYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBlbmFibGluZyBvYmplY3RzIHdpdGggY2lyY3VsYXJcbiAqIHJlZmVyZW5jZXMgdG8gYmUgY29tcGFyZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IFtzdGFja10gVHJhY2tzIHRyYXZlcnNlZCBgb2JqZWN0YCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSBvYmplY3RzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsRGVlcChvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKSB7XG4gIHZhciBvYmpJc0FyciA9IGlzQXJyYXkob2JqZWN0KSxcbiAgICAgIG90aElzQXJyID0gaXNBcnJheShvdGhlciksXG4gICAgICBvYmpUYWcgPSBvYmpJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG9iamVjdCksXG4gICAgICBvdGhUYWcgPSBvdGhJc0FyciA/IGFycmF5VGFnIDogZ2V0VGFnKG90aGVyKTtcblxuICBvYmpUYWcgPSBvYmpUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG9ialRhZztcbiAgb3RoVGFnID0gb3RoVGFnID09IGFyZ3NUYWcgPyBvYmplY3RUYWcgOiBvdGhUYWc7XG5cbiAgdmFyIG9iaklzT2JqID0gb2JqVGFnID09IG9iamVjdFRhZyxcbiAgICAgIG90aElzT2JqID0gb3RoVGFnID09IG9iamVjdFRhZyxcbiAgICAgIGlzU2FtZVRhZyA9IG9ialRhZyA9PSBvdGhUYWc7XG5cbiAgaWYgKGlzU2FtZVRhZyAmJiBpc0J1ZmZlcihvYmplY3QpKSB7XG4gICAgaWYgKCFpc0J1ZmZlcihvdGhlcikpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgb2JqSXNBcnIgPSB0cnVlO1xuICAgIG9iaklzT2JqID0gZmFsc2U7XG4gIH1cbiAgaWYgKGlzU2FtZVRhZyAmJiAhb2JqSXNPYmopIHtcbiAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgIHJldHVybiAob2JqSXNBcnIgfHwgaXNUeXBlZEFycmF5KG9iamVjdCkpXG4gICAgICA/IGVxdWFsQXJyYXlzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spXG4gICAgICA6IGVxdWFsQnlUYWcob2JqZWN0LCBvdGhlciwgb2JqVGFnLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbiAgfVxuICBpZiAoIShiaXRtYXNrICYgQ09NUEFSRV9QQVJUSUFMX0ZMQUcpKSB7XG4gICAgdmFyIG9iaklzV3JhcHBlZCA9IG9iaklzT2JqICYmIGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCAnX193cmFwcGVkX18nKSxcbiAgICAgICAgb3RoSXNXcmFwcGVkID0gb3RoSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwgJ19fd3JhcHBlZF9fJyk7XG5cbiAgICBpZiAob2JqSXNXcmFwcGVkIHx8IG90aElzV3JhcHBlZCkge1xuICAgICAgdmFyIG9ialVud3JhcHBlZCA9IG9iaklzV3JhcHBlZCA/IG9iamVjdC52YWx1ZSgpIDogb2JqZWN0LFxuICAgICAgICAgIG90aFVud3JhcHBlZCA9IG90aElzV3JhcHBlZCA/IG90aGVyLnZhbHVlKCkgOiBvdGhlcjtcblxuICAgICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICAgIHJldHVybiBlcXVhbEZ1bmMob2JqVW53cmFwcGVkLCBvdGhVbndyYXBwZWQsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gIH1cbiAgaWYgKCFpc1NhbWVUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgcmV0dXJuIGVxdWFsT2JqZWN0cyhvYmplY3QsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBlcXVhbEZ1bmMsIHN0YWNrKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzRXF1YWxEZWVwO1xuIiwiaW1wb3J0IGJhc2VJc0VxdWFsRGVlcCBmcm9tICcuL19iYXNlSXNFcXVhbERlZXAuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNFcXVhbGAgd2hpY2ggc3VwcG9ydHMgcGFydGlhbCBjb21wYXJpc29uc1xuICogYW5kIHRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Kn0gb3RoZXIgVGhlIG90aGVyIHZhbHVlIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuXG4gKiAgMSAtIFVub3JkZXJlZCBjb21wYXJpc29uXG4gKiAgMiAtIFBhcnRpYWwgY29tcGFyaXNvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGB2YWx1ZWAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc0VxdWFsKHZhbHVlLCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKHZhbHVlID09PSBvdGhlcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG4gIGlmICh2YWx1ZSA9PSBudWxsIHx8IG90aGVyID09IG51bGwgfHwgKCFpc09iamVjdExpa2UodmFsdWUpICYmICFpc09iamVjdExpa2Uob3RoZXIpKSkge1xuICAgIHJldHVybiB2YWx1ZSAhPT0gdmFsdWUgJiYgb3RoZXIgIT09IG90aGVyO1xuICB9XG4gIHJldHVybiBiYXNlSXNFcXVhbERlZXAodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBiYXNlSXNFcXVhbCwgc3RhY2spO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNFcXVhbDtcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgYmFzZUlzRXF1YWwgZnJvbSAnLi9fYmFzZUlzRXF1YWwuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXRjaGAgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0FycmF5fSBtYXRjaERhdGEgVGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIHRvIG1hdGNoLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYG9iamVjdGAgaXMgYSBtYXRjaCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhLCBjdXN0b21pemVyKSB7XG4gIHZhciBpbmRleCA9IG1hdGNoRGF0YS5sZW5ndGgsXG4gICAgICBsZW5ndGggPSBpbmRleCxcbiAgICAgIG5vQ3VzdG9taXplciA9ICFjdXN0b21pemVyO1xuXG4gIGlmIChvYmplY3QgPT0gbnVsbCkge1xuICAgIHJldHVybiAhbGVuZ3RoO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICBpZiAoKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKVxuICAgICAgICAgID8gZGF0YVsxXSAhPT0gb2JqZWN0W2RhdGFbMF1dXG4gICAgICAgICAgOiAhKGRhdGFbMF0gaW4gb2JqZWN0KVxuICAgICAgICApIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICBkYXRhID0gbWF0Y2hEYXRhW2luZGV4XTtcbiAgICB2YXIga2V5ID0gZGF0YVswXSxcbiAgICAgICAgb2JqVmFsdWUgPSBvYmplY3Rba2V5XSxcbiAgICAgICAgc3JjVmFsdWUgPSBkYXRhWzFdO1xuXG4gICAgaWYgKG5vQ3VzdG9taXplciAmJiBkYXRhWzJdKSB7XG4gICAgICBpZiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiAhKGtleSBpbiBvYmplY3QpKSB7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIHN0YWNrID0gbmV3IFN0YWNrO1xuICAgICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgICAgdmFyIHJlc3VsdCA9IGN1c3RvbWl6ZXIob2JqVmFsdWUsIHNyY1ZhbHVlLCBrZXksIG9iamVjdCwgc291cmNlLCBzdGFjayk7XG4gICAgICB9XG4gICAgICBpZiAoIShyZXN1bHQgPT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBiYXNlSXNFcXVhbChzcmNWYWx1ZSwgb2JqVmFsdWUsIENPTVBBUkVfUEFSVElBTF9GTEFHIHwgQ09NUEFSRV9VTk9SREVSRURfRkxBRywgY3VzdG9taXplciwgc3RhY2spXG4gICAgICAgICAgICA6IHJlc3VsdFxuICAgICAgICAgICkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gdHJ1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTWF0Y2g7XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHN0cmljdCBlcXVhbGl0eSBjb21wYXJpc29ucywgaS5lLiBgPT09YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpZiBzdWl0YWJsZSBmb3Igc3RyaWN0XG4gKiAgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gdmFsdWUgJiYgIWlzT2JqZWN0KHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNTdHJpY3RDb21wYXJhYmxlO1xuIiwiaW1wb3J0IGlzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19pc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBwcm9wZXJ0eSBuYW1lcywgdmFsdWVzLCBhbmQgY29tcGFyZSBmbGFncyBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBtYXRjaCBkYXRhIG9mIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBnZXRNYXRjaERhdGEob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBrZXlzKG9iamVjdCksXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIHdoaWxlIChsZW5ndGgtLSkge1xuICAgIHZhciBrZXkgPSByZXN1bHRbbGVuZ3RoXSxcbiAgICAgICAgdmFsdWUgPSBvYmplY3Rba2V5XTtcblxuICAgIHJlc3VsdFtsZW5ndGhdID0gW2tleSwgdmFsdWUsIGlzU3RyaWN0Q29tcGFyYWJsZSh2YWx1ZSldO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE1hdGNoRGF0YTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBtYXRjaGVzUHJvcGVydHlgIGZvciBzb3VyY2UgdmFsdWVzIHN1aXRhYmxlXG4gKiBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUoa2V5LCBzcmNWYWx1ZSkge1xuICByZXR1cm4gZnVuY3Rpb24ob2JqZWN0KSB7XG4gICAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBvYmplY3Rba2V5XSA9PT0gc3JjVmFsdWUgJiZcbiAgICAgIChzcmNWYWx1ZSAhPT0gdW5kZWZpbmVkIHx8IChrZXkgaW4gT2JqZWN0KG9iamVjdCkpKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hlc1N0cmljdENvbXBhcmFibGU7XG4iLCJpbXBvcnQgYmFzZUlzTWF0Y2ggZnJvbSAnLi9fYmFzZUlzTWF0Y2guanMnO1xuaW1wb3J0IGdldE1hdGNoRGF0YSBmcm9tICcuL19nZXRNYXRjaERhdGEuanMnO1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzYCB3aGljaCBkb2Vzbid0IGNsb25lIGBzb3VyY2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3Qgb2YgcHJvcGVydHkgdmFsdWVzIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXMoc291cmNlKSB7XG4gIHZhciBtYXRjaERhdGEgPSBnZXRNYXRjaERhdGEoc291cmNlKTtcbiAgaWYgKG1hdGNoRGF0YS5sZW5ndGggPT0gMSAmJiBtYXRjaERhdGFbMF1bMl0pIHtcbiAgICByZXR1cm4gbWF0Y2hlc1N0cmljdENvbXBhcmFibGUobWF0Y2hEYXRhWzBdWzBdLCBtYXRjaERhdGFbMF1bMV0pO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09PSBzb3VyY2UgfHwgYmFzZUlzTWF0Y2gob2JqZWN0LCBzb3VyY2UsIG1hdGNoRGF0YSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VNYXRjaGVzO1xuIiwiaW1wb3J0IGNhc3RQYXRoIGZyb20gJy4vX2Nhc3RQYXRoLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uZ2V0YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZmF1bHQgdmFsdWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHJlc29sdmVkIHZhbHVlLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0KG9iamVjdCwgcGF0aCkge1xuICBwYXRoID0gY2FzdFBhdGgocGF0aCwgb2JqZWN0KTtcblxuICB2YXIgaW5kZXggPSAwLFxuICAgICAgbGVuZ3RoID0gcGF0aC5sZW5ndGg7XG5cbiAgd2hpbGUgKG9iamVjdCAhPSBudWxsICYmIGluZGV4IDwgbGVuZ3RoKSB7XG4gICAgb2JqZWN0ID0gb2JqZWN0W3RvS2V5KHBhdGhbaW5kZXgrK10pXTtcbiAgfVxuICByZXR1cm4gKGluZGV4ICYmIGluZGV4ID09IGxlbmd0aCkgPyBvYmplY3QgOiB1bmRlZmluZWQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXQ7XG4iLCJpbXBvcnQgYmFzZUdldCBmcm9tICcuL19iYXNlR2V0LmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYG9iamVjdGAuIElmIHRoZSByZXNvbHZlZCB2YWx1ZSBpc1xuICogYHVuZGVmaW5lZGAsIHRoZSBgZGVmYXVsdFZhbHVlYCBpcyByZXR1cm5lZCBpbiBpdHMgcGxhY2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjcuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gW2RlZmF1bHRWYWx1ZV0gVGhlIHZhbHVlIHJldHVybmVkIGZvciBgdW5kZWZpbmVkYCByZXNvbHZlZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogW3sgJ2InOiB7ICdjJzogMyB9IH1dIH07XG4gKlxuICogXy5nZXQob2JqZWN0LCAnYVswXS5iLmMnKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsIFsnYScsICcwJywgJ2InLCAnYyddKTtcbiAqIC8vID0+IDNcbiAqXG4gKiBfLmdldChvYmplY3QsICdhLmIuYycsICdkZWZhdWx0Jyk7XG4gKiAvLyA9PiAnZGVmYXVsdCdcbiAqL1xuZnVuY3Rpb24gZ2V0KG9iamVjdCwgcGF0aCwgZGVmYXVsdFZhbHVlKSB7XG4gIHZhciByZXN1bHQgPSBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IGJhc2VHZXQob2JqZWN0LCBwYXRoKTtcbiAgcmV0dXJuIHJlc3VsdCA9PT0gdW5kZWZpbmVkID8gZGVmYXVsdFZhbHVlIDogcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXQ7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmhhc0luYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzSW4ob2JqZWN0LCBrZXkpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGtleSBpbiBPYmplY3Qob2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUhhc0luO1xuIiwiaW1wb3J0IGJhc2VIYXNJbiBmcm9tICcuL19iYXNlSGFzSW4uanMnO1xuaW1wb3J0IGhhc1BhdGggZnJvbSAnLi9faGFzUGF0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGBwYXRoYCBpcyBhIGRpcmVjdCBvciBpbmhlcml0ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0gXy5jcmVhdGUoeyAnYSc6IF8uY3JlYXRlKHsgJ2InOiAyIH0pIH0pO1xuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYScpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsIFsnYScsICdiJ10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaGFzSW4ob2JqZWN0LCAnYicpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaGFzSW4ob2JqZWN0LCBwYXRoKSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNQYXRoKG9iamVjdCwgcGF0aCwgYmFzZUhhc0luKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzSW47XG4iLCJpbXBvcnQgYmFzZUlzRXF1YWwgZnJvbSAnLi9fYmFzZUlzRXF1YWwuanMnO1xuaW1wb3J0IGdldCBmcm9tICcuL2dldC5qcyc7XG5pbXBvcnQgaGFzSW4gZnJvbSAnLi9oYXNJbi5qcyc7XG5pbXBvcnQgaXNLZXkgZnJvbSAnLi9faXNLZXkuanMnO1xuaW1wb3J0IGlzU3RyaWN0Q29tcGFyYWJsZSBmcm9tICcuL19pc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzJztcbmltcG9ydCB0b0tleSBmcm9tICcuL190b0tleS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tYXRjaGVzUHJvcGVydHlgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNyY1ZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEBwYXJhbSB7Kn0gc3JjVmFsdWUgVGhlIHZhbHVlIHRvIG1hdGNoLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgc3BlYyBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZU1hdGNoZXNQcm9wZXJ0eShwYXRoLCBzcmNWYWx1ZSkge1xuICBpZiAoaXNLZXkocGF0aCkgJiYgaXNTdHJpY3RDb21wYXJhYmxlKHNyY1ZhbHVlKSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSh0b0tleShwYXRoKSwgc3JjVmFsdWUpO1xuICB9XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICB2YXIgb2JqVmFsdWUgPSBnZXQob2JqZWN0LCBwYXRoKTtcbiAgICByZXR1cm4gKG9ialZhbHVlID09PSB1bmRlZmluZWQgJiYgb2JqVmFsdWUgPT09IHNyY1ZhbHVlKVxuICAgICAgPyBoYXNJbihvYmplY3QsIHBhdGgpXG4gICAgICA6IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU1hdGNoZXNQcm9wZXJ0eTtcbiIsIi8qKlxuICogVGhpcyBtZXRob2QgcmV0dXJucyB0aGUgZmlyc3QgYXJndW1lbnQgaXQgcmVjZWl2ZXMuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgQW55IHZhbHVlLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgYHZhbHVlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiAxIH07XG4gKlxuICogY29uc29sZS5sb2coXy5pZGVudGl0eShvYmplY3QpID09PSBvYmplY3QpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpZGVudGl0eSh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlkZW50aXR5O1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eWAgd2l0aG91dCBzdXBwb3J0IGZvciBkZWVwIHBhdGhzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHkoa2V5KSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVByb3BlcnR5O1xuIiwiaW1wb3J0IGJhc2VHZXQgZnJvbSAnLi9fYmFzZUdldC5qcyc7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlUHJvcGVydHlgIHdoaWNoIHN1cHBvcnRzIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gYmFzZVByb3BlcnR5RGVlcChwYXRoKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICByZXR1cm4gYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlUHJvcGVydHlEZWVwO1xuIiwiaW1wb3J0IGJhc2VQcm9wZXJ0eSBmcm9tICcuL19iYXNlUHJvcGVydHkuanMnO1xuaW1wb3J0IGJhc2VQcm9wZXJ0eURlZXAgZnJvbSAnLi9fYmFzZVByb3BlcnR5RGVlcC5qcyc7XG5pbXBvcnQgaXNLZXkgZnJvbSAnLi9faXNLZXkuanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSB2YWx1ZSBhdCBgcGF0aGAgb2YgYSBnaXZlbiBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBhY2Nlc3NvciBmdW5jdGlvbi5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbXG4gKiAgIHsgJ2EnOiB7ICdiJzogMiB9IH0sXG4gKiAgIHsgJ2EnOiB7ICdiJzogMSB9IH1cbiAqIF07XG4gKlxuICogXy5tYXAob2JqZWN0cywgXy5wcm9wZXJ0eSgnYS5iJykpO1xuICogLy8gPT4gWzIsIDFdXG4gKlxuICogXy5tYXAoXy5zb3J0Qnkob2JqZWN0cywgXy5wcm9wZXJ0eShbJ2EnLCAnYiddKSksICdhLmInKTtcbiAqIC8vID0+IFsxLCAyXVxuICovXG5mdW5jdGlvbiBwcm9wZXJ0eShwYXRoKSB7XG4gIHJldHVybiBpc0tleShwYXRoKSA/IGJhc2VQcm9wZXJ0eSh0b0tleShwYXRoKSkgOiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBwcm9wZXJ0eTtcbiIsImltcG9ydCBiYXNlTWF0Y2hlcyBmcm9tICcuL19iYXNlTWF0Y2hlcy5qcyc7XG5pbXBvcnQgYmFzZU1hdGNoZXNQcm9wZXJ0eSBmcm9tICcuL19iYXNlTWF0Y2hlc1Byb3BlcnR5LmpzJztcbmltcG9ydCBpZGVudGl0eSBmcm9tICcuL2lkZW50aXR5LmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgcHJvcGVydHkgZnJvbSAnLi9wcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXRlcmF0ZWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IFt2YWx1ZT1fLmlkZW50aXR5XSBUaGUgdmFsdWUgdG8gY29udmVydCB0byBhbiBpdGVyYXRlZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgaXRlcmF0ZWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJdGVyYXRlZSh2YWx1ZSkge1xuICAvLyBEb24ndCBzdG9yZSB0aGUgYHR5cGVvZmAgcmVzdWx0IGluIGEgdmFyaWFibGUgdG8gYXZvaWQgYSBKSVQgYnVnIGluIFNhZmFyaSA5LlxuICAvLyBTZWUgaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NjAzNCBmb3IgbW9yZSBkZXRhaWxzLlxuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwpIHtcbiAgICByZXR1cm4gaWRlbnRpdHk7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpc0FycmF5KHZhbHVlKVxuICAgICAgPyBiYXNlTWF0Y2hlc1Byb3BlcnR5KHZhbHVlWzBdLCB2YWx1ZVsxXSlcbiAgICAgIDogYmFzZU1hdGNoZXModmFsdWUpO1xuICB9XG4gIHJldHVybiBwcm9wZXJ0eSh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJdGVyYXRlZTtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBiYXNlRm9yT3duIGZyb20gJy4vX2Jhc2VGb3JPd24uanMnO1xuaW1wb3J0IGJhc2VJdGVyYXRlZSBmcm9tICcuL19iYXNlSXRlcmF0ZWUuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlIHNhbWUga2V5cyBhcyBgb2JqZWN0YCBhbmQgdmFsdWVzIGdlbmVyYXRlZFxuICogYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1XG4gKiBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZCB3aXRoIHRocmVlIGFyZ3VtZW50czpcbiAqICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMi40LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICogQHNlZSBfLm1hcEtleXNcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIHVzZXJzID0ge1xuICogICAnZnJlZCc6ICAgIHsgJ3VzZXInOiAnZnJlZCcsICAgICdhZ2UnOiA0MCB9LFxuICogICAncGViYmxlcyc6IHsgJ3VzZXInOiAncGViYmxlcycsICdhZ2UnOiAxIH1cbiAqIH07XG4gKlxuICogXy5tYXBWYWx1ZXModXNlcnMsIGZ1bmN0aW9uKG8pIHsgcmV0dXJuIG8uYWdlOyB9KTtcbiAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqXG4gKiAvLyBUaGUgYF8ucHJvcGVydHlgIGl0ZXJhdGVlIHNob3J0aGFuZC5cbiAqIF8ubWFwVmFsdWVzKHVzZXJzLCAnYWdlJyk7XG4gKiAvLyA9PiB7ICdmcmVkJzogNDAsICdwZWJibGVzJzogMSB9IChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIG1hcFZhbHVlcyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBrZXksIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCkpO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwVmFsdWVzO1xuIiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgeyBnZXR0ZXIgfSBmcm9tICdwcm9wZXJ0eS1leHByJztcbnZhciBwcmVmaXhlcyA9IHtcbiAgY29udGV4dDogJyQnLFxuICB2YWx1ZTogJy4nXG59O1xuXG52YXIgUmVmZXJlbmNlID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVmZXJlbmNlKGtleSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGtleSAhPT0gJ3N0cmluZycpIHRocm93IG5ldyBUeXBlRXJyb3IoJ3JlZiBtdXN0IGJlIGEgc3RyaW5nLCBnb3Q6ICcgKyBrZXkpO1xuICAgIHRoaXMua2V5ID0ga2V5LnRyaW0oKTtcbiAgICBpZiAoa2V5ID09PSAnJykgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVmIG11c3QgYmUgYSBub24tZW1wdHkgc3RyaW5nJyk7XG4gICAgdGhpcy5pc0NvbnRleHQgPSB0aGlzLmtleVswXSA9PT0gcHJlZml4ZXMuY29udGV4dDtcbiAgICB0aGlzLmlzVmFsdWUgPSB0aGlzLmtleVswXSA9PT0gcHJlZml4ZXMudmFsdWU7XG4gICAgdGhpcy5pc1NpYmxpbmcgPSAhdGhpcy5pc0NvbnRleHQgJiYgIXRoaXMuaXNWYWx1ZTtcbiAgICB2YXIgcHJlZml4ID0gdGhpcy5pc0NvbnRleHQgPyBwcmVmaXhlcy5jb250ZXh0IDogdGhpcy5pc1ZhbHVlID8gcHJlZml4ZXMudmFsdWUgOiAnJztcbiAgICB0aGlzLnBhdGggPSB0aGlzLmtleS5zbGljZShwcmVmaXgubGVuZ3RoKTtcbiAgICB0aGlzLmdldHRlciA9IHRoaXMucGF0aCAmJiBnZXR0ZXIodGhpcy5wYXRoLCB0cnVlKTtcbiAgICB0aGlzLm1hcCA9IG9wdGlvbnMubWFwO1xuICB9XG5cbiAgdmFyIF9wcm90byA9IFJlZmVyZW5jZS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLmdldFZhbHVlID0gZnVuY3Rpb24gZ2V0VmFsdWUob3B0aW9ucykge1xuICAgIHZhciByZXN1bHQgPSB0aGlzLmlzQ29udGV4dCA/IG9wdGlvbnMuY29udGV4dCA6IHRoaXMuaXNWYWx1ZSA/IG9wdGlvbnMudmFsdWUgOiBvcHRpb25zLnBhcmVudDtcbiAgICBpZiAodGhpcy5nZXR0ZXIpIHJlc3VsdCA9IHRoaXMuZ2V0dGVyKHJlc3VsdCB8fCB7fSk7XG4gICAgaWYgKHRoaXMubWFwKSByZXN1bHQgPSB0aGlzLm1hcChyZXN1bHQpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG5cbiAgX3Byb3RvLmNhc3QgPSBmdW5jdGlvbiBjYXN0KHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0VmFsdWUoX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pKTtcbiAgfTtcblxuICBfcHJvdG8ucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUoKSB7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH07XG5cbiAgX3Byb3RvLmRlc2NyaWJlID0gZnVuY3Rpb24gZGVzY3JpYmUoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6ICdyZWYnLFxuICAgICAga2V5OiB0aGlzLmtleVxuICAgIH07XG4gIH07XG5cbiAgX3Byb3RvLnRvU3RyaW5nID0gZnVuY3Rpb24gdG9TdHJpbmcoKSB7XG4gICAgcmV0dXJuIFwiUmVmKFwiICsgdGhpcy5rZXkgKyBcIilcIjtcbiAgfTtcblxuICBSZWZlcmVuY2UuaXNSZWYgPSBmdW5jdGlvbiBpc1JlZih2YWx1ZSkge1xuICAgIHJldHVybiB2YWx1ZSAmJiB2YWx1ZS5fX2lzWXVwUmVmO1xuICB9O1xuXG4gIHJldHVybiBSZWZlcmVuY2U7XG59KCk7XG5cbmV4cG9ydCB7IFJlZmVyZW5jZSBhcyBkZWZhdWx0IH07XG5SZWZlcmVuY2UucHJvdG90eXBlLl9faXNZdXBSZWYgPSB0cnVlOyIsImltcG9ydCBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgbWFwVmFsdWVzIGZyb20gXCJsb2Rhc2gtZXMvbWFwVmFsdWVzXCI7XG5pbXBvcnQgVmFsaWRhdGlvbkVycm9yIGZyb20gJy4uL1ZhbGlkYXRpb25FcnJvcic7XG5pbXBvcnQgUmVmIGZyb20gJy4uL1JlZmVyZW5jZSc7XG5pbXBvcnQgeyBTeW5jaHJvbm91c1Byb21pc2UgfSBmcm9tICdzeW5jaHJvbm91cy1wcm9taXNlJztcbnZhciBmb3JtYXRFcnJvciA9IFZhbGlkYXRpb25FcnJvci5mb3JtYXRFcnJvcjtcblxudmFyIHRoZW5hYmxlID0gZnVuY3Rpb24gdGhlbmFibGUocCkge1xuICByZXR1cm4gcCAmJiB0eXBlb2YgcC50aGVuID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBwLmNhdGNoID09PSAnZnVuY3Rpb24nO1xufTtcblxuZnVuY3Rpb24gcnVuVGVzdCh0ZXN0Rm4sIGN0eCwgdmFsdWUsIHN5bmMpIHtcbiAgdmFyIHJlc3VsdCA9IHRlc3RGbi5jYWxsKGN0eCwgdmFsdWUpO1xuICBpZiAoIXN5bmMpIHJldHVybiBQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcblxuICBpZiAodGhlbmFibGUocmVzdWx0KSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIlZhbGlkYXRpb24gdGVzdCBvZiB0eXBlOiBcXFwiXCIgKyBjdHgudHlwZSArIFwiXFxcIiByZXR1cm5lZCBhIFByb21pc2UgZHVyaW5nIGEgc3luY2hyb25vdXMgdmFsaWRhdGUuIFwiICsgXCJUaGlzIHRlc3Qgd2lsbCBmaW5pc2ggYWZ0ZXIgdGhlIHZhbGlkYXRlIGNhbGwgaGFzIHJldHVybmVkXCIpO1xuICB9XG5cbiAgcmV0dXJuIFN5bmNocm9ub3VzUHJvbWlzZS5yZXNvbHZlKHJlc3VsdCk7XG59XG5cbmZ1bmN0aW9uIHJlc29sdmVQYXJhbXMob2xkUGFyYW1zLCBuZXdQYXJhbXMsIHJlc29sdmUpIHtcbiAgcmV0dXJuIG1hcFZhbHVlcyhfZXh0ZW5kcyh7fSwgb2xkUGFyYW1zLCB7fSwgbmV3UGFyYW1zKSwgcmVzb2x2ZSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVFcnJvckZhY3RvcnkoX3JlZikge1xuICB2YXIgdmFsdWUgPSBfcmVmLnZhbHVlLFxuICAgICAgbGFiZWwgPSBfcmVmLmxhYmVsLFxuICAgICAgcmVzb2x2ZSA9IF9yZWYucmVzb2x2ZSxcbiAgICAgIG9yaWdpbmFsVmFsdWUgPSBfcmVmLm9yaWdpbmFsVmFsdWUsXG4gICAgICBvcHRzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZiwgW1widmFsdWVcIiwgXCJsYWJlbFwiLCBcInJlc29sdmVcIiwgXCJvcmlnaW5hbFZhbHVlXCJdKTtcblxuICByZXR1cm4gZnVuY3Rpb24gY3JlYXRlRXJyb3IoX3RlbXApIHtcbiAgICB2YXIgX3JlZjIgPSBfdGVtcCA9PT0gdm9pZCAwID8ge30gOiBfdGVtcCxcbiAgICAgICAgX3JlZjIkcGF0aCA9IF9yZWYyLnBhdGgsXG4gICAgICAgIHBhdGggPSBfcmVmMiRwYXRoID09PSB2b2lkIDAgPyBvcHRzLnBhdGggOiBfcmVmMiRwYXRoLFxuICAgICAgICBfcmVmMiRtZXNzYWdlID0gX3JlZjIubWVzc2FnZSxcbiAgICAgICAgbWVzc2FnZSA9IF9yZWYyJG1lc3NhZ2UgPT09IHZvaWQgMCA/IG9wdHMubWVzc2FnZSA6IF9yZWYyJG1lc3NhZ2UsXG4gICAgICAgIF9yZWYyJHR5cGUgPSBfcmVmMi50eXBlLFxuICAgICAgICB0eXBlID0gX3JlZjIkdHlwZSA9PT0gdm9pZCAwID8gb3B0cy5uYW1lIDogX3JlZjIkdHlwZSxcbiAgICAgICAgcGFyYW1zID0gX3JlZjIucGFyYW1zO1xuXG4gICAgcGFyYW1zID0gX2V4dGVuZHMoe1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG9yaWdpbmFsVmFsdWU6IG9yaWdpbmFsVmFsdWUsXG4gICAgICBsYWJlbDogbGFiZWxcbiAgICB9LCByZXNvbHZlUGFyYW1zKG9wdHMucGFyYW1zLCBwYXJhbXMsIHJlc29sdmUpKTtcbiAgICByZXR1cm4gX2V4dGVuZHMobmV3IFZhbGlkYXRpb25FcnJvcihmb3JtYXRFcnJvcihtZXNzYWdlLCBwYXJhbXMpLCB2YWx1ZSwgcGF0aCwgdHlwZSksIHtcbiAgICAgIHBhcmFtczogcGFyYW1zXG4gICAgfSk7XG4gIH07XG59XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBjcmVhdGVWYWxpZGF0aW9uKG9wdGlvbnMpIHtcbiAgdmFyIG5hbWUgPSBvcHRpb25zLm5hbWUsXG4gICAgICBtZXNzYWdlID0gb3B0aW9ucy5tZXNzYWdlLFxuICAgICAgdGVzdCA9IG9wdGlvbnMudGVzdCxcbiAgICAgIHBhcmFtcyA9IG9wdGlvbnMucGFyYW1zO1xuXG4gIGZ1bmN0aW9uIHZhbGlkYXRlKF9yZWYzKSB7XG4gICAgdmFyIHZhbHVlID0gX3JlZjMudmFsdWUsXG4gICAgICAgIHBhdGggPSBfcmVmMy5wYXRoLFxuICAgICAgICBsYWJlbCA9IF9yZWYzLmxhYmVsLFxuICAgICAgICBvcHRpb25zID0gX3JlZjMub3B0aW9ucyxcbiAgICAgICAgb3JpZ2luYWxWYWx1ZSA9IF9yZWYzLm9yaWdpbmFsVmFsdWUsXG4gICAgICAgIHN5bmMgPSBfcmVmMy5zeW5jLFxuICAgICAgICByZXN0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcInZhbHVlXCIsIFwicGF0aFwiLCBcImxhYmVsXCIsIFwib3B0aW9uc1wiLCBcIm9yaWdpbmFsVmFsdWVcIiwgXCJzeW5jXCJdKTtcblxuICAgIHZhciBwYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcblxuICAgIHZhciByZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShpdGVtKSB7XG4gICAgICByZXR1cm4gUmVmLmlzUmVmKGl0ZW0pID8gaXRlbS5nZXRWYWx1ZSh7XG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICAgIGNvbnRleHQ6IG9wdGlvbnMuY29udGV4dFxuICAgICAgfSkgOiBpdGVtO1xuICAgIH07XG5cbiAgICB2YXIgY3JlYXRlRXJyb3IgPSBjcmVhdGVFcnJvckZhY3Rvcnkoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBvcmlnaW5hbFZhbHVlOiBvcmlnaW5hbFZhbHVlLFxuICAgICAgcGFyYW1zOiBwYXJhbXMsXG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgbmFtZTogbmFtZVxuICAgIH0pO1xuXG4gICAgdmFyIGN0eCA9IF9leHRlbmRzKHtcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIHR5cGU6IG5hbWUsXG4gICAgICBjcmVhdGVFcnJvcjogY3JlYXRlRXJyb3IsXG4gICAgICByZXNvbHZlOiByZXNvbHZlLFxuICAgICAgb3B0aW9uczogb3B0aW9uc1xuICAgIH0sIHJlc3QpO1xuXG4gICAgcmV0dXJuIHJ1blRlc3QodGVzdCwgY3R4LCB2YWx1ZSwgc3luYykudGhlbihmdW5jdGlvbiAodmFsaWRPckVycm9yKSB7XG4gICAgICBpZiAoVmFsaWRhdGlvbkVycm9yLmlzRXJyb3IodmFsaWRPckVycm9yKSkgdGhyb3cgdmFsaWRPckVycm9yO2Vsc2UgaWYgKCF2YWxpZE9yRXJyb3IpIHRocm93IGNyZWF0ZUVycm9yKCk7XG4gICAgfSk7XG4gIH1cblxuICB2YWxpZGF0ZS5PUFRJT05TID0gb3B0aW9ucztcbiAgcmV0dXJuIHZhbGlkYXRlO1xufSIsImltcG9ydCB7IGZvckVhY2ggfSBmcm9tICdwcm9wZXJ0eS1leHByJztcblxudmFyIHRyaW0gPSBmdW5jdGlvbiB0cmltKHBhcnQpIHtcbiAgcmV0dXJuIHBhcnQuc3Vic3RyKDAsIHBhcnQubGVuZ3RoIC0gMSkuc3Vic3RyKDEpO1xufTtcblxuZXhwb3J0IGZ1bmN0aW9uIGdldEluKHNjaGVtYSwgcGF0aCwgdmFsdWUsIGNvbnRleHQpIHtcbiAgaWYgKGNvbnRleHQgPT09IHZvaWQgMCkge1xuICAgIGNvbnRleHQgPSB2YWx1ZTtcbiAgfVxuXG4gIHZhciBwYXJlbnQsIGxhc3RQYXJ0LCBsYXN0UGFydERlYnVnOyAvLyByb290IHBhdGg6ICcnXG5cbiAgaWYgKCFwYXRoKSByZXR1cm4ge1xuICAgIHBhcmVudDogcGFyZW50LFxuICAgIHBhcmVudFBhdGg6IHBhdGgsXG4gICAgc2NoZW1hOiBzY2hlbWFcbiAgfTtcbiAgZm9yRWFjaChwYXRoLCBmdW5jdGlvbiAoX3BhcnQsIGlzQnJhY2tldCwgaXNBcnJheSkge1xuICAgIHZhciBwYXJ0ID0gaXNCcmFja2V0ID8gdHJpbShfcGFydCkgOiBfcGFydDtcbiAgICBzY2hlbWEgPSBzY2hlbWEucmVzb2x2ZSh7XG4gICAgICBjb250ZXh0OiBjb250ZXh0LFxuICAgICAgcGFyZW50OiBwYXJlbnQsXG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KTtcblxuICAgIGlmIChzY2hlbWEuaW5uZXJUeXBlKSB7XG4gICAgICB2YXIgaWR4ID0gaXNBcnJheSA/IHBhcnNlSW50KHBhcnQsIDEwKSA6IDA7XG5cbiAgICAgIGlmICh2YWx1ZSAmJiBpZHggPj0gdmFsdWUubGVuZ3RoKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcIll1cC5yZWFjaCBjYW5ub3QgcmVzb2x2ZSBhbiBhcnJheSBpdGVtIGF0IGluZGV4OiBcIiArIF9wYXJ0ICsgXCIsIGluIHRoZSBwYXRoOiBcIiArIHBhdGggKyBcIi4gXCIgKyBcImJlY2F1c2UgdGhlcmUgaXMgbm8gdmFsdWUgYXQgdGhhdCBpbmRleC4gXCIpO1xuICAgICAgfVxuXG4gICAgICBwYXJlbnQgPSB2YWx1ZTtcbiAgICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWVbaWR4XTtcbiAgICAgIHNjaGVtYSA9IHNjaGVtYS5pbm5lclR5cGU7XG4gICAgfSAvLyBzb21ldGltZXMgdGhlIGFycmF5IGluZGV4IHBhcnQgb2YgYSBwYXRoIGRvZXNuJ3QgZXhpc3Q6IFwibmVzdGVkLmFyci5jaGlsZFwiXG4gICAgLy8gaW4gdGhlc2UgY2FzZXMgdGhlIGN1cnJlbnQgcGFydCBpcyB0aGUgbmV4dCBzY2hlbWEgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWRcbiAgICAvLyBpbiB0aGlzIGl0ZXJhdGlvbi4gRm9yIGNhc2VzIHdoZXJlIHRoZSBpbmRleCBzaWduYXR1cmUgaXMgaW5jbHVkZWQgdGhpc1xuICAgIC8vIGNoZWNrIHdpbGwgZmFpbCBhbmQgd2UnbGwgaGFuZGxlIHRoZSBgY2hpbGRgIHBhcnQgb24gdGhlIG5leHQgaXRlcmF0aW9uIGxpa2Ugbm9ybWFsXG5cblxuICAgIGlmICghaXNBcnJheSkge1xuICAgICAgaWYgKCFzY2hlbWEuZmllbGRzIHx8ICFzY2hlbWEuZmllbGRzW3BhcnRdKSB0aHJvdyBuZXcgRXJyb3IoXCJUaGUgc2NoZW1hIGRvZXMgbm90IGNvbnRhaW4gdGhlIHBhdGg6IFwiICsgcGF0aCArIFwiLiBcIiArIChcIihmYWlsZWQgYXQ6IFwiICsgbGFzdFBhcnREZWJ1ZyArIFwiIHdoaWNoIGlzIGEgdHlwZTogXFxcIlwiICsgc2NoZW1hLl90eXBlICsgXCJcXFwiKVwiKSk7XG4gICAgICBwYXJlbnQgPSB2YWx1ZTtcbiAgICAgIHZhbHVlID0gdmFsdWUgJiYgdmFsdWVbcGFydF07XG4gICAgICBzY2hlbWEgPSBzY2hlbWEuZmllbGRzW3BhcnRdO1xuICAgIH1cblxuICAgIGxhc3RQYXJ0ID0gcGFydDtcbiAgICBsYXN0UGFydERlYnVnID0gaXNCcmFja2V0ID8gJ1snICsgX3BhcnQgKyAnXScgOiAnLicgKyBfcGFydDtcbiAgfSk7XG4gIHJldHVybiB7XG4gICAgc2NoZW1hOiBzY2hlbWEsXG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgcGFyZW50UGF0aDogbGFzdFBhcnRcbiAgfTtcbn1cblxudmFyIHJlYWNoID0gZnVuY3Rpb24gcmVhY2gob2JqLCBwYXRoLCB2YWx1ZSwgY29udGV4dCkge1xuICByZXR1cm4gZ2V0SW4ob2JqLCBwYXRoLCB2YWx1ZSwgY29udGV4dCkuc2NoZW1hO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgcmVhY2g7IiwiaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5pbXBvcnQgX2NyZWF0ZUNsYXNzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9jcmVhdGVDbGFzc1wiO1xuaW1wb3J0IGhhcyBmcm9tIFwibG9kYXNoLWVzL2hhc1wiO1xuaW1wb3J0IGNsb25lRGVlcFdpdGggZnJvbSBcImxvZGFzaC1lcy9jbG9uZURlZXBXaXRoXCI7XG5pbXBvcnQgX3RvQXJyYXkgZnJvbSBcImxvZGFzaC1lcy90b0FycmF5XCI7XG5pbXBvcnQgeyBtaXhlZCBhcyBsb2NhbGUgfSBmcm9tICcuL2xvY2FsZSc7XG5pbXBvcnQgQ29uZGl0aW9uIGZyb20gJy4vQ29uZGl0aW9uJztcbmltcG9ydCBydW5WYWxpZGF0aW9ucyBmcm9tICcuL3V0aWwvcnVuVmFsaWRhdGlvbnMnO1xuaW1wb3J0IHByZXBlbmREZWVwIGZyb20gJy4vdXRpbC9wcmVwZW5kRGVlcCc7XG5pbXBvcnQgaXNTY2hlbWEgZnJvbSAnLi91dGlsL2lzU2NoZW1hJztcbmltcG9ydCBjcmVhdGVWYWxpZGF0aW9uIGZyb20gJy4vdXRpbC9jcmVhdGVWYWxpZGF0aW9uJztcbmltcG9ydCBwcmludFZhbHVlIGZyb20gJy4vdXRpbC9wcmludFZhbHVlJztcbmltcG9ydCBSZWYgZnJvbSAnLi9SZWZlcmVuY2UnO1xuaW1wb3J0IHsgZ2V0SW4gfSBmcm9tICcuL3V0aWwvcmVhY2gnO1xuXG52YXIgUmVmU2V0ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gUmVmU2V0KCkge1xuICAgIHRoaXMubGlzdCA9IG5ldyBTZXQoKTtcbiAgICB0aGlzLnJlZnMgPSBuZXcgTWFwKCk7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVmU2V0LnByb3RvdHlwZTtcblxuICBfcHJvdG8uZGVzY3JpYmUgPSBmdW5jdGlvbiBkZXNjcmliZSgpIHtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSBbXTtcblxuICAgIGZvciAodmFyIF9pdGVyYXRvciA9IHRoaXMubGlzdCwgX2lzQXJyYXkgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvciksIF9pID0gMCwgX2l0ZXJhdG9yID0gX2lzQXJyYXkgPyBfaXRlcmF0b3IgOiBfaXRlcmF0b3JbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmO1xuXG4gICAgICBpZiAoX2lzQXJyYXkpIHtcbiAgICAgICAgaWYgKF9pID49IF9pdGVyYXRvci5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmID0gX2l0ZXJhdG9yW19pKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kgPSBfaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICBpZiAoX2kuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaS52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIGl0ZW0gPSBfcmVmO1xuICAgICAgZGVzY3JpcHRpb24ucHVzaChpdGVtKTtcbiAgICB9XG5cbiAgICBmb3IgKHZhciBfaXRlcmF0b3IyID0gdGhpcy5yZWZzLCBfaXNBcnJheTIgPSBBcnJheS5pc0FycmF5KF9pdGVyYXRvcjIpLCBfaTIgPSAwLCBfaXRlcmF0b3IyID0gX2lzQXJyYXkyID8gX2l0ZXJhdG9yMiA6IF9pdGVyYXRvcjJbU3ltYm9sLml0ZXJhdG9yXSgpOzspIHtcbiAgICAgIHZhciBfcmVmMjtcblxuICAgICAgaWYgKF9pc0FycmF5Mikge1xuICAgICAgICBpZiAoX2kyID49IF9pdGVyYXRvcjIubGVuZ3RoKSBicmVhaztcbiAgICAgICAgX3JlZjIgPSBfaXRlcmF0b3IyW19pMisrXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIF9pMiA9IF9pdGVyYXRvcjIubmV4dCgpO1xuICAgICAgICBpZiAoX2kyLmRvbmUpIGJyZWFrO1xuICAgICAgICBfcmVmMiA9IF9pMi52YWx1ZTtcbiAgICAgIH1cblxuICAgICAgdmFyIF9yZWYzID0gX3JlZjIsXG4gICAgICAgICAgcmVmID0gX3JlZjNbMV07XG4gICAgICBkZXNjcmlwdGlvbi5wdXNoKHJlZi5kZXNjcmliZSgpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gIH07XG5cbiAgX3Byb3RvLnRvQXJyYXkgPSBmdW5jdGlvbiB0b0FycmF5KCkge1xuICAgIHJldHVybiBfdG9BcnJheSh0aGlzLmxpc3QpLmNvbmNhdChfdG9BcnJheSh0aGlzLnJlZnMudmFsdWVzKCkpKTtcbiAgfTtcblxuICBfcHJvdG8uYWRkID0gZnVuY3Rpb24gYWRkKHZhbHVlKSB7XG4gICAgUmVmLmlzUmVmKHZhbHVlKSA/IHRoaXMucmVmcy5zZXQodmFsdWUua2V5LCB2YWx1ZSkgOiB0aGlzLmxpc3QuYWRkKHZhbHVlKTtcbiAgfTtcblxuICBfcHJvdG8uZGVsZXRlID0gZnVuY3Rpb24gX2RlbGV0ZSh2YWx1ZSkge1xuICAgIFJlZi5pc1JlZih2YWx1ZSkgPyB0aGlzLnJlZnMuZGVsZXRlKHZhbHVlLmtleSkgOiB0aGlzLmxpc3QuZGVsZXRlKHZhbHVlKTtcbiAgfTtcblxuICBfcHJvdG8uaGFzID0gZnVuY3Rpb24gaGFzKHZhbHVlLCByZXNvbHZlKSB7XG4gICAgaWYgKHRoaXMubGlzdC5oYXModmFsdWUpKSByZXR1cm4gdHJ1ZTtcbiAgICB2YXIgaXRlbSxcbiAgICAgICAgdmFsdWVzID0gdGhpcy5yZWZzLnZhbHVlcygpO1xuXG4gICAgd2hpbGUgKGl0ZW0gPSB2YWx1ZXMubmV4dCgpLCAhaXRlbS5kb25lKSB7XG4gICAgICBpZiAocmVzb2x2ZShpdGVtLnZhbHVlKSA9PT0gdmFsdWUpIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmYWxzZTtcbiAgfTtcblxuICBfcHJvdG8uY2xvbmUgPSBmdW5jdGlvbiBjbG9uZSgpIHtcbiAgICB2YXIgbmV4dCA9IG5ldyBSZWZTZXQoKTtcbiAgICBuZXh0Lmxpc3QgPSBuZXcgU2V0KHRoaXMubGlzdCk7XG4gICAgbmV4dC5yZWZzID0gbmV3IE1hcCh0aGlzLnJlZnMpO1xuICAgIHJldHVybiBuZXh0O1xuICB9O1xuXG4gIF9wcm90by5tZXJnZSA9IGZ1bmN0aW9uIG1lcmdlKG5ld0l0ZW1zLCByZW1vdmVJdGVtcykge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5ld0l0ZW1zLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXh0LmFkZCh2YWx1ZSk7XG4gICAgfSk7XG4gICAgbmV3SXRlbXMucmVmcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5leHQuYWRkKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZW1vdmVJdGVtcy5saXN0LmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmV4dC5kZWxldGUodmFsdWUpO1xuICAgIH0pO1xuICAgIHJlbW92ZUl0ZW1zLnJlZnMuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXh0LmRlbGV0ZSh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH07XG5cbiAgX2NyZWF0ZUNsYXNzKFJlZlNldCwgW3tcbiAgICBrZXk6IFwic2l6ZVwiLFxuICAgIGdldDogZnVuY3Rpb24gZ2V0KCkge1xuICAgICAgcmV0dXJuIHRoaXMubGlzdC5zaXplICsgdGhpcy5yZWZzLnNpemU7XG4gICAgfVxuICB9XSk7XG5cbiAgcmV0dXJuIFJlZlNldDtcbn0oKTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU2NoZW1hVHlwZShvcHRpb25zKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgIG9wdGlvbnMgPSB7fTtcbiAgfVxuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTY2hlbWFUeXBlKSkgcmV0dXJuIG5ldyBTY2hlbWFUeXBlKCk7XG4gIHRoaXMuX2RlcHMgPSBbXTtcbiAgdGhpcy5fY29uZGl0aW9ucyA9IFtdO1xuICB0aGlzLl9vcHRpb25zID0ge1xuICAgIGFib3J0RWFybHk6IHRydWUsXG4gICAgcmVjdXJzaXZlOiB0cnVlXG4gIH07XG4gIHRoaXMuX2V4Y2x1c2l2ZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX3doaXRlbGlzdCA9IG5ldyBSZWZTZXQoKTtcbiAgdGhpcy5fYmxhY2tsaXN0ID0gbmV3IFJlZlNldCgpO1xuICB0aGlzLnRlc3RzID0gW107XG4gIHRoaXMudHJhbnNmb3JtcyA9IFtdO1xuICB0aGlzLndpdGhNdXRhdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMudHlwZUVycm9yKGxvY2FsZS5ub3RUeXBlKTtcbiAgfSk7XG4gIGlmIChoYXMob3B0aW9ucywgJ2RlZmF1bHQnKSkgdGhpcy5fZGVmYXVsdERlZmF1bHQgPSBvcHRpb25zLmRlZmF1bHQ7XG4gIHRoaXMudHlwZSA9IG9wdGlvbnMudHlwZSB8fCAnbWl4ZWQnOyAvLyBUT0RPOiByZW1vdmVcblxuICB0aGlzLl90eXBlID0gb3B0aW9ucy50eXBlIHx8ICdtaXhlZCc7XG59XG52YXIgcHJvdG8gPSBTY2hlbWFUeXBlLnByb3RvdHlwZSA9IHtcbiAgX19pc1l1cFNjaGVtYV9fOiB0cnVlLFxuICBjb25zdHJ1Y3RvcjogU2NoZW1hVHlwZSxcbiAgY2xvbmU6IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHZhciBfdGhpczIgPSB0aGlzO1xuXG4gICAgaWYgKHRoaXMuX211dGF0ZSkgcmV0dXJuIHRoaXM7IC8vIGlmIHRoZSBuZXN0ZWQgdmFsdWUgaXMgYSBzY2hlbWEgd2UgY2FuIHNraXAgY2xvbmluZywgc2luY2VcbiAgICAvLyB0aGV5IGFyZSBhbHJlYWR5IGltbXV0YWJsZVxuXG4gICAgcmV0dXJuIGNsb25lRGVlcFdpdGgodGhpcywgZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoaXNTY2hlbWEodmFsdWUpICYmIHZhbHVlICE9PSBfdGhpczIpIHJldHVybiB2YWx1ZTtcbiAgICB9KTtcbiAgfSxcbiAgbGFiZWw6IGZ1bmN0aW9uIGxhYmVsKF9sYWJlbCkge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX2xhYmVsID0gX2xhYmVsO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBtZXRhOiBmdW5jdGlvbiBtZXRhKG9iaikge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSByZXR1cm4gdGhpcy5fbWV0YTtcbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll9tZXRhID0gX2V4dGVuZHMobmV4dC5fbWV0YSB8fCB7fSwgb2JqKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgd2l0aE11dGF0aW9uOiBmdW5jdGlvbiB3aXRoTXV0YXRpb24oZm4pIHtcbiAgICB2YXIgYmVmb3JlID0gdGhpcy5fbXV0YXRlO1xuICAgIHRoaXMuX211dGF0ZSA9IHRydWU7XG4gICAgdmFyIHJlc3VsdCA9IGZuKHRoaXMpO1xuICAgIHRoaXMuX211dGF0ZSA9IGJlZm9yZTtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBjb25jYXQ6IGZ1bmN0aW9uIGNvbmNhdChzY2hlbWEpIHtcbiAgICBpZiAoIXNjaGVtYSB8fCBzY2hlbWEgPT09IHRoaXMpIHJldHVybiB0aGlzO1xuICAgIGlmIChzY2hlbWEuX3R5cGUgIT09IHRoaXMuX3R5cGUgJiYgdGhpcy5fdHlwZSAhPT0gJ21peGVkJykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIllvdSBjYW5ub3QgYGNvbmNhdCgpYCBzY2hlbWEncyBvZiBkaWZmZXJlbnQgdHlwZXM6IFwiICsgdGhpcy5fdHlwZSArIFwiIGFuZCBcIiArIHNjaGVtYS5fdHlwZSk7XG4gICAgdmFyIG5leHQgPSBwcmVwZW5kRGVlcChzY2hlbWEuY2xvbmUoKSwgdGhpcyk7IC8vIG5ldyB1bmRlZmluZWQgZGVmYXVsdCBpcyBvdmVycmlkZGVuIGJ5IG9sZCBub24tdW5kZWZpbmVkIG9uZSwgcmV2ZXJ0XG5cbiAgICBpZiAoaGFzKHNjaGVtYSwgJ19kZWZhdWx0JykpIG5leHQuX2RlZmF1bHQgPSBzY2hlbWEuX2RlZmF1bHQ7XG4gICAgbmV4dC50ZXN0cyA9IHRoaXMudGVzdHM7XG4gICAgbmV4dC5fZXhjbHVzaXZlID0gdGhpcy5fZXhjbHVzaXZlOyAvLyBtYW51YWxseSBtZXJnZSB0aGUgYmxhY2tsaXN0L3doaXRlbGlzdCAodGhlIG90aGVyIGBzY2hlbWFgIHRha2VzXG4gICAgLy8gcHJlY2VkZW5jZSBpbiBjYXNlIG9mIGNvbmZsaWN0cylcblxuICAgIG5leHQuX3doaXRlbGlzdCA9IHRoaXMuX3doaXRlbGlzdC5tZXJnZShzY2hlbWEuX3doaXRlbGlzdCwgc2NoZW1hLl9ibGFja2xpc3QpO1xuICAgIG5leHQuX2JsYWNrbGlzdCA9IHRoaXMuX2JsYWNrbGlzdC5tZXJnZShzY2hlbWEuX2JsYWNrbGlzdCwgc2NoZW1hLl93aGl0ZWxpc3QpOyAvLyBtYW51YWxseSBhZGQgdGhlIG5ldyB0ZXN0cyB0byBlbnN1cmVcbiAgICAvLyB0aGUgZGVkdXBpbmcgbG9naWMgaXMgY29uc2lzdGVudFxuXG4gICAgbmV4dC53aXRoTXV0YXRpb24oZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHNjaGVtYS50ZXN0cy5mb3JFYWNoKGZ1bmN0aW9uIChmbikge1xuICAgICAgICBuZXh0LnRlc3QoZm4uT1BUSU9OUyk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgaXNUeXBlOiBmdW5jdGlvbiBpc1R5cGUodikge1xuICAgIGlmICh0aGlzLl9udWxsYWJsZSAmJiB2ID09PSBudWxsKSByZXR1cm4gdHJ1ZTtcbiAgICByZXR1cm4gIXRoaXMuX3R5cGVDaGVjayB8fCB0aGlzLl90eXBlQ2hlY2sodik7XG4gIH0sXG4gIHJlc29sdmU6IGZ1bmN0aW9uIHJlc29sdmUob3B0aW9ucykge1xuICAgIHZhciBzY2hlbWEgPSB0aGlzO1xuXG4gICAgaWYgKHNjaGVtYS5fY29uZGl0aW9ucy5sZW5ndGgpIHtcbiAgICAgIHZhciBjb25kaXRpb25zID0gc2NoZW1hLl9jb25kaXRpb25zO1xuICAgICAgc2NoZW1hID0gc2NoZW1hLmNsb25lKCk7XG4gICAgICBzY2hlbWEuX2NvbmRpdGlvbnMgPSBbXTtcbiAgICAgIHNjaGVtYSA9IGNvbmRpdGlvbnMucmVkdWNlKGZ1bmN0aW9uIChzY2hlbWEsIGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm4gY29uZGl0aW9uLnJlc29sdmUoc2NoZW1hLCBvcHRpb25zKTtcbiAgICAgIH0sIHNjaGVtYSk7XG4gICAgICBzY2hlbWEgPSBzY2hlbWEucmVzb2x2ZShvcHRpb25zKTtcbiAgICB9XG5cbiAgICByZXR1cm4gc2NoZW1hO1xuICB9LFxuICBjYXN0OiBmdW5jdGlvbiBjYXN0KHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciByZXNvbHZlZFNjaGVtYSA9IHRoaXMucmVzb2x2ZShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSkpO1xuXG4gICAgdmFyIHJlc3VsdCA9IHJlc29sdmVkU2NoZW1hLl9jYXN0KHZhbHVlLCBvcHRpb25zKTtcblxuICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIG9wdGlvbnMuYXNzZXJ0ICE9PSBmYWxzZSAmJiByZXNvbHZlZFNjaGVtYS5pc1R5cGUocmVzdWx0KSAhPT0gdHJ1ZSkge1xuICAgICAgdmFyIGZvcm1hdHRlZFZhbHVlID0gcHJpbnRWYWx1ZSh2YWx1ZSk7XG4gICAgICB2YXIgZm9ybWF0dGVkUmVzdWx0ID0gcHJpbnRWYWx1ZShyZXN1bHQpO1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlRoZSB2YWx1ZSBvZiBcIiArIChvcHRpb25zLnBhdGggfHwgJ2ZpZWxkJykgKyBcIiBjb3VsZCBub3QgYmUgY2FzdCB0byBhIHZhbHVlIFwiICsgKFwidGhhdCBzYXRpc2ZpZXMgdGhlIHNjaGVtYSB0eXBlOiBcXFwiXCIgKyByZXNvbHZlZFNjaGVtYS5fdHlwZSArIFwiXFxcIi4gXFxuXFxuXCIpICsgKFwiYXR0ZW1wdGVkIHZhbHVlOiBcIiArIGZvcm1hdHRlZFZhbHVlICsgXCIgXFxuXCIpICsgKGZvcm1hdHRlZFJlc3VsdCAhPT0gZm9ybWF0dGVkVmFsdWUgPyBcInJlc3VsdCBvZiBjYXN0OiBcIiArIGZvcm1hdHRlZFJlc3VsdCA6ICcnKSk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfSxcbiAgX2Nhc3Q6IGZ1bmN0aW9uIF9jYXN0KHJhd1ZhbHVlKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICB2YXIgdmFsdWUgPSByYXdWYWx1ZSA9PT0gdW5kZWZpbmVkID8gcmF3VmFsdWUgOiB0aGlzLnRyYW5zZm9ybXMucmVkdWNlKGZ1bmN0aW9uICh2YWx1ZSwgZm4pIHtcbiAgICAgIHJldHVybiBmbi5jYWxsKF90aGlzMywgdmFsdWUsIHJhd1ZhbHVlKTtcbiAgICB9LCByYXdWYWx1ZSk7XG5cbiAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCAmJiBoYXModGhpcywgJ19kZWZhdWx0JykpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5kZWZhdWx0KCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LFxuICBfdmFsaWRhdGU6IGZ1bmN0aW9uIF92YWxpZGF0ZShfdmFsdWUsIG9wdGlvbnMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgdmFsdWUgPSBfdmFsdWU7XG4gICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBvcHRpb25zLm9yaWdpbmFsVmFsdWUgIT0gbnVsbCA/IG9wdGlvbnMub3JpZ2luYWxWYWx1ZSA6IF92YWx1ZTtcblxuICAgIHZhciBpc1N0cmljdCA9IHRoaXMuX29wdGlvbignc3RyaWN0Jywgb3B0aW9ucyk7XG5cbiAgICB2YXIgZW5kRWFybHkgPSB0aGlzLl9vcHRpb24oJ2Fib3J0RWFybHknLCBvcHRpb25zKTtcblxuICAgIHZhciBzeW5jID0gb3B0aW9ucy5zeW5jO1xuICAgIHZhciBwYXRoID0gb3B0aW9ucy5wYXRoO1xuICAgIHZhciBsYWJlbCA9IHRoaXMuX2xhYmVsO1xuXG4gICAgaWYgKCFpc1N0cmljdCkge1xuICAgICAgdmFsdWUgPSB0aGlzLl9jYXN0KHZhbHVlLCBfZXh0ZW5kcyh7XG4gICAgICAgIGFzc2VydDogZmFsc2VcbiAgICAgIH0sIG9wdGlvbnMpKTtcbiAgICB9IC8vIHZhbHVlIGlzIGNhc3QsIHdlIGNhbiBjaGVjayBpZiBpdCBtZWV0cyB0eXBlIHJlcXVpcmVtZW50c1xuXG5cbiAgICB2YXIgdmFsaWRhdGlvblBhcmFtcyA9IHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIHBhdGg6IHBhdGgsXG4gICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICBvcHRpb25zOiBvcHRpb25zLFxuICAgICAgbGFiZWw6IGxhYmVsLFxuICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZSxcbiAgICAgIHN5bmM6IHN5bmNcbiAgICB9O1xuXG4gICAgaWYgKG9wdGlvbnMuZnJvbSkge1xuICAgICAgdmFsaWRhdGlvblBhcmFtcy5mcm9tID0gb3B0aW9ucy5mcm9tO1xuICAgIH1cblxuICAgIHZhciBpbml0aWFsVGVzdHMgPSBbXTtcbiAgICBpZiAodGhpcy5fdHlwZUVycm9yKSBpbml0aWFsVGVzdHMucHVzaCh0aGlzLl90eXBlRXJyb3IodmFsaWRhdGlvblBhcmFtcykpO1xuICAgIGlmICh0aGlzLl93aGl0ZWxpc3RFcnJvcikgaW5pdGlhbFRlc3RzLnB1c2godGhpcy5fd2hpdGVsaXN0RXJyb3IodmFsaWRhdGlvblBhcmFtcykpO1xuICAgIGlmICh0aGlzLl9ibGFja2xpc3RFcnJvcikgaW5pdGlhbFRlc3RzLnB1c2godGhpcy5fYmxhY2tsaXN0RXJyb3IodmFsaWRhdGlvblBhcmFtcykpO1xuICAgIHJldHVybiBydW5WYWxpZGF0aW9ucyh7XG4gICAgICB2YWxpZGF0aW9uczogaW5pdGlhbFRlc3RzLFxuICAgICAgZW5kRWFybHk6IGVuZEVhcmx5LFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHN5bmM6IHN5bmNcbiAgICB9KS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHJ1blZhbGlkYXRpb25zKHtcbiAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgc3luYzogc3luYyxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlbmRFYXJseTogZW5kRWFybHksXG4gICAgICAgIHZhbGlkYXRpb25zOiBfdGhpczQudGVzdHMubWFwKGZ1bmN0aW9uIChmbikge1xuICAgICAgICAgIHJldHVybiBmbih2YWxpZGF0aW9uUGFyYW1zKTtcbiAgICAgICAgfSlcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICB2YWxpZGF0ZTogZnVuY3Rpb24gdmFsaWRhdGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHNjaGVtYSA9IHRoaXMucmVzb2x2ZShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSkpO1xuICAgIHJldHVybiBzY2hlbWEuX3ZhbGlkYXRlKHZhbHVlLCBvcHRpb25zKTtcbiAgfSxcbiAgdmFsaWRhdGVTeW5jOiBmdW5jdGlvbiB2YWxpZGF0ZVN5bmModmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHNjaGVtYSA9IHRoaXMucmVzb2x2ZShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSkpO1xuICAgIHZhciByZXN1bHQsIGVycjtcblxuICAgIHNjaGVtYS5fdmFsaWRhdGUodmFsdWUsIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBzeW5jOiB0cnVlXG4gICAgfSkpLnRoZW4oZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiByZXN1bHQgPSByO1xuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlKSB7XG4gICAgICByZXR1cm4gZXJyID0gZTtcbiAgICB9KTtcblxuICAgIGlmIChlcnIpIHRocm93IGVycjtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMudmFsaWRhdGUodmFsdWUsIG9wdGlvbnMpLnRoZW4oZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgICAgaWYgKGVyci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJykgcmV0dXJuIGZhbHNlO1xuICAgICAgdGhyb3cgZXJyO1xuICAgIH0pO1xuICB9LFxuICBpc1ZhbGlkU3luYzogZnVuY3Rpb24gaXNWYWxpZFN5bmModmFsdWUsIG9wdGlvbnMpIHtcbiAgICB0cnkge1xuICAgICAgdGhpcy52YWxpZGF0ZVN5bmModmFsdWUsIG9wdGlvbnMpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfVxuICB9LFxuICBnZXREZWZhdWx0OiBmdW5jdGlvbiBnZXREZWZhdWx0KG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHNjaGVtYSA9IHRoaXMucmVzb2x2ZShvcHRpb25zKTtcbiAgICByZXR1cm4gc2NoZW1hLmRlZmF1bHQoKTtcbiAgfSxcbiAgZGVmYXVsdDogZnVuY3Rpb24gX2RlZmF1bHQoZGVmKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHtcbiAgICAgIHZhciBkZWZhdWx0VmFsdWUgPSBoYXModGhpcywgJ19kZWZhdWx0JykgPyB0aGlzLl9kZWZhdWx0IDogdGhpcy5fZGVmYXVsdERlZmF1bHQ7XG4gICAgICByZXR1cm4gdHlwZW9mIGRlZmF1bHRWYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IGRlZmF1bHRWYWx1ZS5jYWxsKHRoaXMpIDogY2xvbmVEZWVwV2l0aChkZWZhdWx0VmFsdWUpO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX2RlZmF1bHQgPSBkZWY7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHN0cmljdDogZnVuY3Rpb24gc3RyaWN0KGlzU3RyaWN0KSB7XG4gICAgaWYgKGlzU3RyaWN0ID09PSB2b2lkIDApIHtcbiAgICAgIGlzU3RyaWN0ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll9vcHRpb25zLnN0cmljdCA9IGlzU3RyaWN0O1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBfaXNQcmVzZW50OiBmdW5jdGlvbiBfaXNQcmVzZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9IG51bGw7XG4gIH0sXG4gIHJlcXVpcmVkOiBmdW5jdGlvbiByZXF1aXJlZChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5yZXF1aXJlZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAncmVxdWlyZWQnLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gdGhpcy5zY2hlbWEuX2lzUHJlc2VudCh2YWx1ZSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG5vdFJlcXVpcmVkOiBmdW5jdGlvbiBub3RSZXF1aXJlZCgpIHtcbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0LnRlc3RzID0gbmV4dC50ZXN0cy5maWx0ZXIoZnVuY3Rpb24gKHRlc3QpIHtcbiAgICAgIHJldHVybiB0ZXN0Lk9QVElPTlMubmFtZSAhPT0gJ3JlcXVpcmVkJztcbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgbnVsbGFibGU6IGZ1bmN0aW9uIG51bGxhYmxlKGlzTnVsbGFibGUpIHtcbiAgICBpZiAoaXNOdWxsYWJsZSA9PT0gdm9pZCAwKSB7XG4gICAgICBpc051bGxhYmxlID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll9udWxsYWJsZSA9IGlzTnVsbGFibGU7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHRyYW5zZm9ybTogZnVuY3Rpb24gdHJhbnNmb3JtKGZuKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC50cmFuc2Zvcm1zLnB1c2goZm4pO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuXG4gIC8qKlxuICAgKiBBZGRzIGEgdGVzdCBmdW5jdGlvbiB0byB0aGUgc2NoZW1hJ3MgcXVldWUgb2YgdGVzdHMuXG4gICAqIHRlc3RzIGNhbiBiZSBleGNsdXNpdmUgb3Igbm9uLWV4Y2x1c2l2ZS5cbiAgICpcbiAgICogLSBleGNsdXNpdmUgdGVzdHMsIHdpbGwgcmVwbGFjZSBhbnkgZXhpc3RpbmcgdGVzdHMgb2YgdGhlIHNhbWUgbmFtZS5cbiAgICogLSBub24tZXhjbHVzaXZlOiBjYW4gYmUgc3RhY2tlZFxuICAgKlxuICAgKiBJZiBhIG5vbi1leGNsdXNpdmUgdGVzdCBpcyBhZGRlZCB0byBhIHNjaGVtYSB3aXRoIGFuIGV4Y2x1c2l2ZSB0ZXN0IG9mIHRoZSBzYW1lIG5hbWVcbiAgICogdGhlIGV4Y2x1c2l2ZSB0ZXN0IGlzIHJlbW92ZWQgYW5kIGZ1cnRoZXIgdGVzdHMgb2YgdGhlIHNhbWUgbmFtZSB3aWxsIGJlIHN0YWNrZWQuXG4gICAqXG4gICAqIElmIGFuIGV4Y2x1c2l2ZSB0ZXN0IGlzIGFkZGVkIHRvIGEgc2NoZW1hIHdpdGggbm9uLWV4Y2x1c2l2ZSB0ZXN0cyBvZiB0aGUgc2FtZSBuYW1lXG4gICAqIHRoZSBwcmV2aW91cyB0ZXN0cyBhcmUgcmVtb3ZlZCBhbmQgZnVydGhlciB0ZXN0cyBvZiB0aGUgc2FtZSBuYW1lIHdpbGwgcmVwbGFjZSBlYWNoIG90aGVyLlxuICAgKi9cbiAgdGVzdDogZnVuY3Rpb24gdGVzdCgpIHtcbiAgICB2YXIgb3B0cztcblxuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBpZiAodHlwZW9mIChhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0pID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG9wdHMgPSB7XG4gICAgICAgICAgdGVzdDogYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdXG4gICAgICAgIH07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBvcHRzID0gYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMikge1xuICAgICAgb3B0cyA9IHtcbiAgICAgICAgbmFtZTogYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdLFxuICAgICAgICB0ZXN0OiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV1cbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIG9wdHMgPSB7XG4gICAgICAgIG5hbWU6IGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSxcbiAgICAgICAgbWVzc2FnZTogYXJndW1lbnRzLmxlbmd0aCA8PSAxID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzFdLFxuICAgICAgICB0ZXN0OiBhcmd1bWVudHMubGVuZ3RoIDw9IDIgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMl1cbiAgICAgIH07XG4gICAgfVxuXG4gICAgaWYgKG9wdHMubWVzc2FnZSA9PT0gdW5kZWZpbmVkKSBvcHRzLm1lc3NhZ2UgPSBsb2NhbGUuZGVmYXVsdDtcbiAgICBpZiAodHlwZW9mIG9wdHMudGVzdCAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignYHRlc3RgIGlzIGEgcmVxdWlyZWQgcGFyYW1ldGVycycpO1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciB2YWxpZGF0ZSA9IGNyZWF0ZVZhbGlkYXRpb24ob3B0cyk7XG4gICAgdmFyIGlzRXhjbHVzaXZlID0gb3B0cy5leGNsdXNpdmUgfHwgb3B0cy5uYW1lICYmIG5leHQuX2V4Y2x1c2l2ZVtvcHRzLm5hbWVdID09PSB0cnVlO1xuXG4gICAgaWYgKG9wdHMuZXhjbHVzaXZlICYmICFvcHRzLm5hbWUpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4Y2x1c2l2ZSB0ZXN0cyBtdXN0IHByb3ZpZGUgYSB1bmlxdWUgYG5hbWVgIGlkZW50aWZ5aW5nIHRoZSB0ZXN0Jyk7XG4gICAgfVxuXG4gICAgbmV4dC5fZXhjbHVzaXZlW29wdHMubmFtZV0gPSAhIW9wdHMuZXhjbHVzaXZlO1xuICAgIG5leHQudGVzdHMgPSBuZXh0LnRlc3RzLmZpbHRlcihmdW5jdGlvbiAoZm4pIHtcbiAgICAgIGlmIChmbi5PUFRJT05TLm5hbWUgPT09IG9wdHMubmFtZSkge1xuICAgICAgICBpZiAoaXNFeGNsdXNpdmUpIHJldHVybiBmYWxzZTtcbiAgICAgICAgaWYgKGZuLk9QVElPTlMudGVzdCA9PT0gdmFsaWRhdGUuT1BUSU9OUy50ZXN0KSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xuICAgIG5leHQudGVzdHMucHVzaCh2YWxpZGF0ZSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHdoZW46IGZ1bmN0aW9uIHdoZW4oa2V5cywgb3B0aW9ucykge1xuICAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG4gICAgICBvcHRpb25zID0ga2V5cztcbiAgICAgIGtleXMgPSAnLic7XG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCksXG4gICAgICAgIGRlcHMgPSBbXS5jb25jYXQoa2V5cykubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBuZXcgUmVmKGtleSk7XG4gICAgfSk7XG4gICAgZGVwcy5mb3JFYWNoKGZ1bmN0aW9uIChkZXApIHtcbiAgICAgIGlmIChkZXAuaXNTaWJsaW5nKSBuZXh0Ll9kZXBzLnB1c2goZGVwLmtleSk7XG4gICAgfSk7XG5cbiAgICBuZXh0Ll9jb25kaXRpb25zLnB1c2gobmV3IENvbmRpdGlvbihkZXBzLCBvcHRpb25zKSk7XG5cbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgdHlwZUVycm9yOiBmdW5jdGlvbiB0eXBlRXJyb3IobWVzc2FnZSkge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX3R5cGVFcnJvciA9IGNyZWF0ZVZhbGlkYXRpb24oe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICd0eXBlRXJyb3InLFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgIT09IHVuZGVmaW5lZCAmJiAhdGhpcy5zY2hlbWEuaXNUeXBlKHZhbHVlKSkgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Ioe1xuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgdHlwZTogdGhpcy5zY2hlbWEuX3R5cGVcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgb25lT2Y6IGZ1bmN0aW9uIG9uZU9mKGVudW1zLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5vbmVPZjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBlbnVtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIG5leHQuX3doaXRlbGlzdC5hZGQodmFsKTtcblxuICAgICAgbmV4dC5fYmxhY2tsaXN0LmRlbGV0ZSh2YWwpO1xuICAgIH0pO1xuICAgIG5leHQuX3doaXRlbGlzdEVycm9yID0gY3JlYXRlVmFsaWRhdGlvbih7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ29uZU9mJyxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgdmFsaWRzID0gdGhpcy5zY2hlbWEuX3doaXRlbGlzdDtcbiAgICAgICAgcmV0dXJuIHZhbGlkcy5oYXModmFsdWUsIHRoaXMucmVzb2x2ZSkgPyB0cnVlIDogdGhpcy5jcmVhdGVFcnJvcih7XG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICB2YWx1ZXM6IHZhbGlkcy50b0FycmF5KCkuam9pbignLCAnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIG5vdE9uZU9mOiBmdW5jdGlvbiBub3RPbmVPZihlbnVtcywgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubm90T25lT2Y7XG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgZW51bXMuZm9yRWFjaChmdW5jdGlvbiAodmFsKSB7XG4gICAgICBuZXh0Ll9ibGFja2xpc3QuYWRkKHZhbCk7XG5cbiAgICAgIG5leHQuX3doaXRlbGlzdC5kZWxldGUodmFsKTtcbiAgICB9KTtcbiAgICBuZXh0Ll9ibGFja2xpc3RFcnJvciA9IGNyZWF0ZVZhbGlkYXRpb24oe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdub3RPbmVPZicsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHZhciBpbnZhbGlkcyA9IHRoaXMuc2NoZW1hLl9ibGFja2xpc3Q7XG4gICAgICAgIGlmIChpbnZhbGlkcy5oYXModmFsdWUsIHRoaXMucmVzb2x2ZSkpIHJldHVybiB0aGlzLmNyZWF0ZUVycm9yKHtcbiAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHZhbHVlczogaW52YWxpZHMudG9BcnJheSgpLmpvaW4oJywgJylcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgc3RyaXA6IGZ1bmN0aW9uIHN0cmlwKF9zdHJpcCkge1xuICAgIGlmIChfc3RyaXAgPT09IHZvaWQgMCkge1xuICAgICAgX3N0cmlwID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0Ll9zdHJpcCA9IF9zdHJpcDtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgX29wdGlvbjogZnVuY3Rpb24gX29wdGlvbihrZXksIG92ZXJyaWRlcykge1xuICAgIHJldHVybiBoYXMob3ZlcnJpZGVzLCBrZXkpID8gb3ZlcnJpZGVzW2tleV0gOiB0aGlzLl9vcHRpb25zW2tleV07XG4gIH0sXG4gIGRlc2NyaWJlOiBmdW5jdGlvbiBkZXNjcmliZSgpIHtcbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICB2YXIgZGVzY3JpcHRpb24gPSB7XG4gICAgICB0eXBlOiBuZXh0Ll90eXBlLFxuICAgICAgbWV0YTogbmV4dC5fbWV0YSxcbiAgICAgIGxhYmVsOiBuZXh0Ll9sYWJlbCxcbiAgICAgIHRlc3RzOiBuZXh0LnRlc3RzLm1hcChmdW5jdGlvbiAoZm4pIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBuYW1lOiBmbi5PUFRJT05TLm5hbWUsXG4gICAgICAgICAgcGFyYW1zOiBmbi5PUFRJT05TLnBhcmFtc1xuICAgICAgICB9O1xuICAgICAgfSkuZmlsdGVyKGZ1bmN0aW9uIChuLCBpZHgsIGxpc3QpIHtcbiAgICAgICAgcmV0dXJuIGxpc3QuZmluZEluZGV4KGZ1bmN0aW9uIChjKSB7XG4gICAgICAgICAgcmV0dXJuIGMubmFtZSA9PT0gbi5uYW1lO1xuICAgICAgICB9KSA9PT0gaWR4O1xuICAgICAgfSlcbiAgICB9O1xuICAgIGlmIChuZXh0Ll93aGl0ZWxpc3Quc2l6ZSkgZGVzY3JpcHRpb24ub25lT2YgPSBuZXh0Ll93aGl0ZWxpc3QuZGVzY3JpYmUoKTtcbiAgICBpZiAobmV4dC5fYmxhY2tsaXN0LnNpemUpIGRlc2NyaXB0aW9uLm5vdE9uZU9mID0gbmV4dC5fYmxhY2tsaXN0LmRlc2NyaWJlKCk7XG4gICAgcmV0dXJuIGRlc2NyaXB0aW9uO1xuICB9LFxuICBkZWZpbmVkOiBmdW5jdGlvbiBkZWZpbmVkKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLmRlZmluZWQ7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubnVsbGFibGUoKS50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnZGVmaW5lZCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59O1xuXG52YXIgX2xvb3AgPSBmdW5jdGlvbiBfbG9vcCgpIHtcbiAgdmFyIG1ldGhvZCA9IF9hcnJbX2kzXTtcblxuICBwcm90b1ttZXRob2QgKyBcIkF0XCJdID0gZnVuY3Rpb24gKHBhdGgsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBfZ2V0SW4gPSBnZXRJbih0aGlzLCBwYXRoLCB2YWx1ZSwgb3B0aW9ucy5jb250ZXh0KSxcbiAgICAgICAgcGFyZW50ID0gX2dldEluLnBhcmVudCxcbiAgICAgICAgcGFyZW50UGF0aCA9IF9nZXRJbi5wYXJlbnRQYXRoLFxuICAgICAgICBzY2hlbWEgPSBfZ2V0SW4uc2NoZW1hO1xuXG4gICAgcmV0dXJuIHNjaGVtYVttZXRob2RdKHBhcmVudCAmJiBwYXJlbnRbcGFyZW50UGF0aF0sIF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIHBhdGg6IHBhdGhcbiAgICB9KSk7XG4gIH07XG59O1xuXG5mb3IgKHZhciBfaTMgPSAwLCBfYXJyID0gWyd2YWxpZGF0ZScsICd2YWxpZGF0ZVN5bmMnXTsgX2kzIDwgX2Fyci5sZW5ndGg7IF9pMysrKSB7XG4gIF9sb29wKCk7XG59XG5cbmZvciAodmFyIF9pNCA9IDAsIF9hcnIyID0gWydlcXVhbHMnLCAnaXMnXTsgX2k0IDwgX2FycjIubGVuZ3RoOyBfaTQrKykge1xuICB2YXIgYWxpYXMgPSBfYXJyMltfaTRdO1xuICBwcm90b1thbGlhc10gPSBwcm90by5vbmVPZjtcbn1cblxuZm9yICh2YXIgX2k1ID0gMCwgX2FycjMgPSBbJ25vdCcsICdub3BlJ107IF9pNSA8IF9hcnIzLmxlbmd0aDsgX2k1KyspIHtcbiAgdmFyIF9hbGlhcyA9IF9hcnIzW19pNV07XG4gIHByb3RvW19hbGlhc10gPSBwcm90by5ub3RPbmVPZjtcbn1cblxucHJvdG8ub3B0aW9uYWwgPSBwcm90by5ub3RSZXF1aXJlZDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGluaGVyaXRzKGN0b3IsIHN1cGVyQ3Rvciwgc3BlYykge1xuICBjdG9yLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoc3VwZXJDdG9yLnByb3RvdHlwZSwge1xuICAgIGNvbnN0cnVjdG9yOiB7XG4gICAgICB2YWx1ZTogY3RvcixcbiAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuXG4gIF9leHRlbmRzKGN0b3IucHJvdG90eXBlLCBzcGVjKTtcbn0iLCJpbXBvcnQgaW5oZXJpdHMgZnJvbSAnLi91dGlsL2luaGVyaXRzJztcbmltcG9ydCBNaXhlZFNjaGVtYSBmcm9tICcuL21peGVkJztcbmV4cG9ydCBkZWZhdWx0IEJvb2xlYW5TY2hlbWE7XG5cbmZ1bmN0aW9uIEJvb2xlYW5TY2hlbWEoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIEJvb2xlYW5TY2hlbWEpKSByZXR1cm4gbmV3IEJvb2xlYW5TY2hlbWEoKTtcbiAgTWl4ZWRTY2hlbWEuY2FsbCh0aGlzLCB7XG4gICAgdHlwZTogJ2Jvb2xlYW4nXG4gIH0pO1xuICB0aGlzLndpdGhNdXRhdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCF0aGlzLmlzVHlwZSh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKC9eKHRydWV8MSkkL2kudGVzdCh2YWx1ZSkpIHJldHVybiB0cnVlO1xuICAgICAgICBpZiAoL14oZmFsc2V8MCkkL2kudGVzdCh2YWx1ZSkpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICB9KTtcbn1cblxuaW5oZXJpdHMoQm9vbGVhblNjaGVtYSwgTWl4ZWRTY2hlbWEsIHtcbiAgX3R5cGVDaGVjazogZnVuY3Rpb24gX3R5cGVDaGVjayh2KSB7XG4gICAgaWYgKHYgaW5zdGFuY2VvZiBCb29sZWFuKSB2ID0gdi52YWx1ZU9mKCk7XG4gICAgcmV0dXJuIHR5cGVvZiB2ID09PSAnYm9vbGVhbic7XG4gIH1cbn0pOyIsImV4cG9ydCBkZWZhdWx0IChmdW5jdGlvbiAodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGw7XG59KTsiLCJpbXBvcnQgaW5oZXJpdHMgZnJvbSAnLi91dGlsL2luaGVyaXRzJztcbmltcG9ydCBNaXhlZFNjaGVtYSBmcm9tICcuL21peGVkJztcbmltcG9ydCB7IHN0cmluZyBhcyBsb2NhbGUgfSBmcm9tICcuL2xvY2FsZSc7XG5pbXBvcnQgaXNBYnNlbnQgZnJvbSAnLi91dGlsL2lzQWJzZW50JzsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbnZhciByRW1haWwgPSAvXigoKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSsoXFwuKFthLXpdfFxcZHxbISNcXCQlJidcXCpcXCtcXC1cXC89XFw/XFxeX2B7XFx8fX5dfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSspKil8KChcXHgyMikoKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPygoW1xceDAxLVxceDA4XFx4MGJcXHgwY1xceDBlLVxceDFmXFx4N2ZdfFxceDIxfFtcXHgyMy1cXHg1Yl18W1xceDVkLVxceDdlXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KFxcXFwoW1xceDAxLVxceDA5XFx4MGJcXHgwY1xceDBkLVxceDdmXXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSkqKCgoXFx4MjB8XFx4MDkpKihcXHgwZFxceDBhKSk/KFxceDIwfFxceDA5KSspPyhcXHgyMikpKUAoKChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuKSsoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKShbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSooW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSkkL2k7IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuXG52YXIgclVybCA9IC9eKChodHRwcz98ZnRwKTopP1xcL1xcLygoKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6KSpAKT8oKChcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSkpfCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLj8pKDpcXGQqKT8pKFxcLygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCkrKFxcLygoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSopKik/KT8oXFw/KCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKXxbXFx1RTAwMC1cXHVGOEZGXXxcXC98XFw/KSopPyhcXCMoKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFxcL3xcXD8pKik/JC9pO1xuXG52YXIgaXNUcmltbWVkID0gZnVuY3Rpb24gaXNUcmltbWVkKHZhbHVlKSB7XG4gIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUgPT09IHZhbHVlLnRyaW0oKTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIFN0cmluZ1NjaGVtYSgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgU3RyaW5nU2NoZW1hKSkgcmV0dXJuIG5ldyBTdHJpbmdTY2hlbWEoKTtcbiAgTWl4ZWRTY2hlbWEuY2FsbCh0aGlzLCB7XG4gICAgdHlwZTogJ3N0cmluZydcbiAgfSk7XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5pc1R5cGUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiB2YWx1ZS50b1N0cmluZyA/IHZhbHVlLnRvU3RyaW5nKCkgOiB2YWx1ZTtcbiAgICB9KTtcbiAgfSk7XG59XG5pbmhlcml0cyhTdHJpbmdTY2hlbWEsIE1peGVkU2NoZW1hLCB7XG4gIF90eXBlQ2hlY2s6IGZ1bmN0aW9uIF90eXBlQ2hlY2sodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBTdHJpbmcpIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnO1xuICB9LFxuICBfaXNQcmVzZW50OiBmdW5jdGlvbiBfaXNQcmVzZW50KHZhbHVlKSB7XG4gICAgcmV0dXJuIE1peGVkU2NoZW1hLnByb3RvdHlwZS5faXNQcmVzZW50LmNhbGwodGhpcywgdmFsdWUpICYmIHZhbHVlLmxlbmd0aCA+IDA7XG4gIH0sXG4gIGxlbmd0aDogZnVuY3Rpb24gbGVuZ3RoKF9sZW5ndGgsIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLmxlbmd0aDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbGVuZ3RoJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBsZW5ndGg6IF9sZW5ndGhcbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID09PSB0aGlzLnJlc29sdmUoX2xlbmd0aCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG1pbjogZnVuY3Rpb24gbWluKF9taW4sIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLm1pbjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtaW46IF9taW5cbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID49IHRoaXMucmVzb2x2ZShfbWluKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWF4OiBmdW5jdGlvbiBtYXgoX21heCwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubWF4O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1heDogX21heFxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPD0gdGhpcy5yZXNvbHZlKF9tYXgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtYXRjaGVzOiBmdW5jdGlvbiBtYXRjaGVzKHJlZ2V4LCBvcHRpb25zKSB7XG4gICAgdmFyIGV4Y2x1ZGVFbXB0eVN0cmluZyA9IGZhbHNlO1xuICAgIHZhciBtZXNzYWdlO1xuICAgIHZhciBuYW1lO1xuXG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgZXhjbHVkZUVtcHR5U3RyaW5nID0gb3B0aW9ucy5leGNsdWRlRW1wdHlTdHJpbmc7XG4gICAgICAgIG1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2U7XG4gICAgICAgIG5hbWUgPSBvcHRpb25zLm5hbWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtZXNzYWdlID0gb3B0aW9ucztcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG5hbWU6IG5hbWUgfHwgJ21hdGNoZXMnLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSB8fCBsb2NhbGUubWF0Y2hlcyxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICByZWdleDogcmVnZXhcbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUgPT09ICcnICYmIGV4Y2x1ZGVFbXB0eVN0cmluZyB8fCB2YWx1ZS5zZWFyY2gocmVnZXgpICE9PSAtMTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZW1haWw6IGZ1bmN0aW9uIGVtYWlsKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLmVtYWlsO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1hdGNoZXMockVtYWlsLCB7XG4gICAgICBuYW1lOiAnZW1haWwnLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIGV4Y2x1ZGVFbXB0eVN0cmluZzogdHJ1ZVxuICAgIH0pO1xuICB9LFxuICB1cmw6IGZ1bmN0aW9uIHVybChtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS51cmw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhyVXJsLCB7XG4gICAgICBuYW1lOiAndXJsJyxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBleGNsdWRlRW1wdHlTdHJpbmc6IHRydWVcbiAgICB9KTtcbiAgfSxcbiAgLy8tLSB0cmFuc2Zvcm1zIC0tXG4gIGVuc3VyZTogZnVuY3Rpb24gZW5zdXJlKCkge1xuICAgIHJldHVybiB0aGlzLmRlZmF1bHQoJycpLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gdmFsID09PSBudWxsID8gJycgOiB2YWw7XG4gICAgfSk7XG4gIH0sXG4gIHRyaW06IGZ1bmN0aW9uIHRyaW0obWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUudHJpbTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbCkge1xuICAgICAgcmV0dXJuIHZhbCAhPSBudWxsID8gdmFsLnRyaW0oKSA6IHZhbDtcbiAgICB9KS50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAndHJpbScsXG4gICAgICB0ZXN0OiBpc1RyaW1tZWRcbiAgICB9KTtcbiAgfSxcbiAgbG93ZXJjYXNlOiBmdW5jdGlvbiBsb3dlcmNhc2UobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubG93ZXJjYXNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAhaXNBYnNlbnQodmFsdWUpID8gdmFsdWUudG9Mb3dlckNhc2UoKSA6IHZhbHVlO1xuICAgIH0pLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdzdHJpbmdfY2FzZScsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUgPT09IHZhbHVlLnRvTG93ZXJDYXNlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHVwcGVyY2FzZTogZnVuY3Rpb24gdXBwZXJjYXNlKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLnVwcGVyY2FzZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gIWlzQWJzZW50KHZhbHVlKSA/IHZhbHVlLnRvVXBwZXJDYXNlKCkgOiB2YWx1ZTtcbiAgICB9KS50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnc3RyaW5nX2Nhc2UnLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlID09PSB2YWx1ZS50b1VwcGVyQ2FzZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTsiLCJpbXBvcnQgaW5oZXJpdHMgZnJvbSAnLi91dGlsL2luaGVyaXRzJztcbmltcG9ydCBNaXhlZFNjaGVtYSBmcm9tICcuL21peGVkJztcbmltcG9ydCB7IG51bWJlciBhcyBsb2NhbGUgfSBmcm9tICcuL2xvY2FsZSc7XG5pbXBvcnQgaXNBYnNlbnQgZnJvbSAnLi91dGlsL2lzQWJzZW50JztcblxudmFyIGlzTmFOID0gZnVuY3Rpb24gaXNOYU4odmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlICE9ICt2YWx1ZTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE51bWJlclNjaGVtYSgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgTnVtYmVyU2NoZW1hKSkgcmV0dXJuIG5ldyBOdW1iZXJTY2hlbWEoKTtcbiAgTWl4ZWRTY2hlbWEuY2FsbCh0aGlzLCB7XG4gICAgdHlwZTogJ251bWJlcidcbiAgfSk7XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICB2YXIgcGFyc2VkID0gdmFsdWU7XG5cbiAgICAgIGlmICh0eXBlb2YgcGFyc2VkID09PSAnc3RyaW5nJykge1xuICAgICAgICBwYXJzZWQgPSBwYXJzZWQucmVwbGFjZSgvXFxzL2csICcnKTtcbiAgICAgICAgaWYgKHBhcnNlZCA9PT0gJycpIHJldHVybiBOYU47IC8vIGRvbid0IHVzZSBwYXJzZUZsb2F0IHRvIGF2b2lkIHBvc2l0aXZlcyBvbiBhbHBoYS1udW1lcmljIHN0cmluZ3NcblxuICAgICAgICBwYXJzZWQgPSArcGFyc2VkO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1R5cGUocGFyc2VkKSkgcmV0dXJuIHBhcnNlZDtcbiAgICAgIHJldHVybiBwYXJzZUZsb2F0KHBhcnNlZCk7XG4gICAgfSk7XG4gIH0pO1xufVxuaW5oZXJpdHMoTnVtYmVyU2NoZW1hLCBNaXhlZFNjaGVtYSwge1xuICBfdHlwZUNoZWNrOiBmdW5jdGlvbiBfdHlwZUNoZWNrKHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlIGluc3RhbmNlb2YgTnVtYmVyKSB2YWx1ZSA9IHZhbHVlLnZhbHVlT2YoKTtcbiAgICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnbnVtYmVyJyAmJiAhaXNOYU4odmFsdWUpO1xuICB9LFxuICBtaW46IGZ1bmN0aW9uIG1pbihfbWluLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5taW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21pbicsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWluOiBfbWluXG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlID49IHRoaXMucmVzb2x2ZShfbWluKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWF4OiBmdW5jdGlvbiBtYXgoX21heCwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubWF4O1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtYXgnLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1heDogX21heFxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZSA8PSB0aGlzLnJlc29sdmUoX21heCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGxlc3NUaGFuOiBmdW5jdGlvbiBsZXNzVGhhbihsZXNzLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5sZXNzVGhhbjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWF4JyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBsZXNzOiBsZXNzXG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlIDwgdGhpcy5yZXNvbHZlKGxlc3MpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtb3JlVGhhbjogZnVuY3Rpb24gbW9yZVRoYW4obW9yZSwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubW9yZVRoYW47XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21pbicsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbW9yZTogbW9yZVxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZSA+IHRoaXMucmVzb2x2ZShtb3JlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgcG9zaXRpdmU6IGZ1bmN0aW9uIHBvc2l0aXZlKG1zZykge1xuICAgIGlmIChtc2cgPT09IHZvaWQgMCkge1xuICAgICAgbXNnID0gbG9jYWxlLnBvc2l0aXZlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm1vcmVUaGFuKDAsIG1zZyk7XG4gIH0sXG4gIG5lZ2F0aXZlOiBmdW5jdGlvbiBuZWdhdGl2ZShtc2cpIHtcbiAgICBpZiAobXNnID09PSB2b2lkIDApIHtcbiAgICAgIG1zZyA9IGxvY2FsZS5uZWdhdGl2ZTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5sZXNzVGhhbigwLCBtc2cpO1xuICB9LFxuICBpbnRlZ2VyOiBmdW5jdGlvbiBpbnRlZ2VyKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLmludGVnZXI7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBuYW1lOiAnaW50ZWdlcicsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWwpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbCkgfHwgTnVtYmVyLmlzSW50ZWdlcih2YWwpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICB0cnVuY2F0ZTogZnVuY3Rpb24gdHJ1bmNhdGUoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuICFpc0Fic2VudCh2YWx1ZSkgPyB2YWx1ZSB8IDAgOiB2YWx1ZTtcbiAgICB9KTtcbiAgfSxcbiAgcm91bmQ6IGZ1bmN0aW9uIHJvdW5kKG1ldGhvZCkge1xuICAgIHZhciBhdmFpbCA9IFsnY2VpbCcsICdmbG9vcicsICdyb3VuZCcsICd0cnVuYyddO1xuICAgIG1ldGhvZCA9IG1ldGhvZCAmJiBtZXRob2QudG9Mb3dlckNhc2UoKSB8fCAncm91bmQnOyAvLyB0aGlzIGV4aXN0cyBmb3Igc3ltZW10cnkgd2l0aCB0aGUgbmV3IE1hdGgudHJ1bmNcblxuICAgIGlmIChtZXRob2QgPT09ICd0cnVuYycpIHJldHVybiB0aGlzLnRydW5jYXRlKCk7XG4gICAgaWYgKGF2YWlsLmluZGV4T2YobWV0aG9kLnRvTG93ZXJDYXNlKCkpID09PSAtMSkgdGhyb3cgbmV3IFR5cGVFcnJvcignT25seSB2YWxpZCBvcHRpb25zIGZvciByb3VuZCgpIGFyZTogJyArIGF2YWlsLmpvaW4oJywgJykpO1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAhaXNBYnNlbnQodmFsdWUpID8gTWF0aFttZXRob2RdKHZhbHVlKSA6IHZhbHVlO1xuICAgIH0pO1xuICB9XG59KTsiLCIvKiBlc2xpbnQtZGlzYWJsZSAqL1xuXG4vKipcbiAqXG4gKiBEYXRlLnBhcnNlIHdpdGggcHJvZ3Jlc3NpdmUgZW5oYW5jZW1lbnQgZm9yIElTTyA4NjAxIDxodHRwczovL2dpdGh1Yi5jb20vY3Nub3Zlci9qcy1pc284NjAxPlxuICogTk9OLUNPTkZPUk1BTlQgRURJVElPTi5cbiAqIMKpIDIwMTEgQ29saW4gU25vdmVyIDxodHRwOi8vemV0YWZsZWV0LmNvbT5cbiAqIFJlbGVhc2VkIHVuZGVyIE1JVCBsaWNlbnNlLlxuICovXG4vLyAgICAgICAgICAgICAgMSBZWVlZICAgICAgICAgICAgICAgICAyIE1NICAgICAgICAzIEREICAgICAgICAgICAgICA0IEhIICAgICA1IG1tICAgICAgICA2IHNzICAgICAgICAgICAgNyBtc2VjICAgICAgICAgOCBaIDkgwrEgICAgMTAgdHpISCAgICAxMSB0em1tXG52YXIgaXNvUmVnID0gL14oXFxkezR9fFsrXFwtXVxcZHs2fSkoPzotPyhcXGR7Mn0pKD86LT8oXFxkezJ9KSk/KT8oPzpbIFRdPyhcXGR7Mn0pOj8oXFxkezJ9KSg/Ojo/KFxcZHsyfSkoPzpbLFxcLl0oXFxkezEsfSkpPyk/KD86KFopfChbK1xcLV0pKFxcZHsyfSkoPzo6PyhcXGR7Mn0pKT8pPyk/JC87XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBwYXJzZUlzb0RhdGUoZGF0ZSkge1xuICB2YXIgbnVtZXJpY0tleXMgPSBbMSwgNCwgNSwgNiwgNywgMTAsIDExXSxcbiAgICAgIG1pbnV0ZXNPZmZzZXQgPSAwLFxuICAgICAgdGltZXN0YW1wLFxuICAgICAgc3RydWN0O1xuXG4gIGlmIChzdHJ1Y3QgPSBpc29SZWcuZXhlYyhkYXRlKSkge1xuICAgIC8vIGF2b2lkIE5hTiB0aW1lc3RhbXBzIGNhdXNlZCBieSDigJx1bmRlZmluZWTigJ0gdmFsdWVzIGJlaW5nIHBhc3NlZCB0byBEYXRlLlVUQ1xuICAgIGZvciAodmFyIGkgPSAwLCBrOyBrID0gbnVtZXJpY0tleXNbaV07ICsraSkge1xuICAgICAgc3RydWN0W2tdID0gK3N0cnVjdFtrXSB8fCAwO1xuICAgIH0gLy8gYWxsb3cgdW5kZWZpbmVkIGRheXMgYW5kIG1vbnRoc1xuXG5cbiAgICBzdHJ1Y3RbMl0gPSAoK3N0cnVjdFsyXSB8fCAxKSAtIDE7XG4gICAgc3RydWN0WzNdID0gK3N0cnVjdFszXSB8fCAxOyAvLyBhbGxvdyBhcmJpdHJhcnkgc3ViLXNlY29uZCBwcmVjaXNpb24gYmV5b25kIG1pbGxpc2Vjb25kc1xuXG4gICAgc3RydWN0WzddID0gc3RydWN0WzddID8gU3RyaW5nKHN0cnVjdFs3XSkuc3Vic3RyKDAsIDMpIDogMDsgLy8gdGltZXN0YW1wcyB3aXRob3V0IHRpbWV6b25lIGlkZW50aWZpZXJzIHNob3VsZCBiZSBjb25zaWRlcmVkIGxvY2FsIHRpbWVcblxuICAgIGlmICgoc3RydWN0WzhdID09PSB1bmRlZmluZWQgfHwgc3RydWN0WzhdID09PSAnJykgJiYgKHN0cnVjdFs5XSA9PT0gdW5kZWZpbmVkIHx8IHN0cnVjdFs5XSA9PT0gJycpKSB0aW1lc3RhbXAgPSArbmV3IERhdGUoc3RydWN0WzFdLCBzdHJ1Y3RbMl0sIHN0cnVjdFszXSwgc3RydWN0WzRdLCBzdHJ1Y3RbNV0sIHN0cnVjdFs2XSwgc3RydWN0WzddKTtlbHNlIHtcbiAgICAgIGlmIChzdHJ1Y3RbOF0gIT09ICdaJyAmJiBzdHJ1Y3RbOV0gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBtaW51dGVzT2Zmc2V0ID0gc3RydWN0WzEwXSAqIDYwICsgc3RydWN0WzExXTtcbiAgICAgICAgaWYgKHN0cnVjdFs5XSA9PT0gJysnKSBtaW51dGVzT2Zmc2V0ID0gMCAtIG1pbnV0ZXNPZmZzZXQ7XG4gICAgICB9XG5cbiAgICAgIHRpbWVzdGFtcCA9IERhdGUuVVRDKHN0cnVjdFsxXSwgc3RydWN0WzJdLCBzdHJ1Y3RbM10sIHN0cnVjdFs0XSwgc3RydWN0WzVdICsgbWludXRlc09mZnNldCwgc3RydWN0WzZdLCBzdHJ1Y3RbN10pO1xuICAgIH1cbiAgfSBlbHNlIHRpbWVzdGFtcCA9IERhdGUucGFyc2UgPyBEYXRlLnBhcnNlKGRhdGUpIDogTmFOO1xuXG4gIHJldHVybiB0aW1lc3RhbXA7XG59IiwiaW1wb3J0IE1peGVkU2NoZW1hIGZyb20gJy4vbWl4ZWQnO1xuaW1wb3J0IGluaGVyaXRzIGZyb20gJy4vdXRpbC9pbmhlcml0cyc7XG5pbXBvcnQgaXNvUGFyc2UgZnJvbSAnLi91dGlsL2lzb2RhdGUnO1xuaW1wb3J0IHsgZGF0ZSBhcyBsb2NhbGUgfSBmcm9tICcuL2xvY2FsZSc7XG5pbXBvcnQgaXNBYnNlbnQgZnJvbSAnLi91dGlsL2lzQWJzZW50JztcbmltcG9ydCBSZWYgZnJvbSAnLi9SZWZlcmVuY2UnO1xudmFyIGludmFsaWREYXRlID0gbmV3IERhdGUoJycpO1xuXG52YXIgaXNEYXRlID0gZnVuY3Rpb24gaXNEYXRlKG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IERhdGVdJztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IERhdGVTY2hlbWE7XG5cbmZ1bmN0aW9uIERhdGVTY2hlbWEoKSB7XG4gIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIERhdGVTY2hlbWEpKSByZXR1cm4gbmV3IERhdGVTY2hlbWEoKTtcbiAgTWl4ZWRTY2hlbWEuY2FsbCh0aGlzLCB7XG4gICAgdHlwZTogJ2RhdGUnXG4gIH0pO1xuICB0aGlzLndpdGhNdXRhdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKHRoaXMuaXNUeXBlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgdmFsdWUgPSBpc29QYXJzZSh2YWx1ZSk7IC8vIDAgaXMgYSB2YWxpZCB0aW1lc3RhbXAgZXF1aXZhbGVudCB0byAxOTcwLTAxLTAxVDAwOjAwOjAwWih1bml4IGVwb2NoKSBvciBiZWZvcmUuXG5cbiAgICAgIHJldHVybiAhaXNOYU4odmFsdWUpID8gbmV3IERhdGUodmFsdWUpIDogaW52YWxpZERhdGU7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhEYXRlU2NoZW1hLCBNaXhlZFNjaGVtYSwge1xuICBfdHlwZUNoZWNrOiBmdW5jdGlvbiBfdHlwZUNoZWNrKHYpIHtcbiAgICByZXR1cm4gaXNEYXRlKHYpICYmICFpc05hTih2LmdldFRpbWUoKSk7XG4gIH0sXG4gIG1pbjogZnVuY3Rpb24gbWluKF9taW4sIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLm1pbjtcbiAgICB9XG5cbiAgICB2YXIgbGltaXQgPSBfbWluO1xuXG4gICAgaWYgKCFSZWYuaXNSZWYobGltaXQpKSB7XG4gICAgICBsaW1pdCA9IHRoaXMuY2FzdChfbWluKTtcbiAgICAgIGlmICghdGhpcy5fdHlwZUNoZWNrKGxpbWl0KSkgdGhyb3cgbmV3IFR5cGVFcnJvcignYG1pbmAgbXVzdCBiZSBhIERhdGUgb3IgYSB2YWx1ZSB0aGF0IGNhbiBiZSBgY2FzdCgpYCB0byBhIERhdGUnKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtaW46IF9taW5cbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUgPj0gdGhpcy5yZXNvbHZlKGxpbWl0KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWF4OiBmdW5jdGlvbiBtYXgoX21heCwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubWF4O1xuICAgIH1cblxuICAgIHZhciBsaW1pdCA9IF9tYXg7XG5cbiAgICBpZiAoIVJlZi5pc1JlZihsaW1pdCkpIHtcbiAgICAgIGxpbWl0ID0gdGhpcy5jYXN0KF9tYXgpO1xuICAgICAgaWYgKCF0aGlzLl90eXBlQ2hlY2sobGltaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdgbWF4YCBtdXN0IGJlIGEgRGF0ZSBvciBhIHZhbHVlIHRoYXQgY2FuIGJlIGBjYXN0KClgIHRvIGEgRGF0ZScpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtYXgnLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1heDogX21heFxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZSA8PSB0aGlzLnJlc29sdmUobGltaXQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG59KTsiLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2Uoc3RyaW5ncywgcmF3KSB7XG4gIGlmICghcmF3KSB7XG4gICAgcmF3ID0gc3RyaW5ncy5zbGljZSgwKTtcbiAgfVxuXG4gIHN0cmluZ3MucmF3ID0gcmF3O1xuICByZXR1cm4gc3RyaW5ncztcbn0iLCIvKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgXy5yZWR1Y2VgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvclxuICogaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7Kn0gW2FjY3VtdWxhdG9yXSBUaGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2luaXRBY2N1bV0gU3BlY2lmeSB1c2luZyB0aGUgZmlyc3QgZWxlbWVudCBvZiBgYXJyYXlgIGFzXG4gKiAgdGhlIGluaXRpYWwgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgYWNjdW11bGF0ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGFycmF5UmVkdWNlKGFycmF5LCBpdGVyYXRlZSwgYWNjdW11bGF0b3IsIGluaXRBY2N1bSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIGlmIChpbml0QWNjdW0gJiYgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBhcnJheVsrK2luZGV4XTtcbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGFjY3VtdWxhdG9yID0gaXRlcmF0ZWUoYWNjdW11bGF0b3IsIGFycmF5W2luZGV4XSwgaW5kZXgsIGFycmF5KTtcbiAgfVxuICByZXR1cm4gYWNjdW11bGF0b3I7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5UmVkdWNlO1xuIiwiLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5wcm9wZXJ0eU9mYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlPZihvYmplY3QpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKGtleSkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlUHJvcGVydHlPZjtcbiIsImltcG9ydCBiYXNlUHJvcGVydHlPZiBmcm9tICcuL19iYXNlUHJvcGVydHlPZi5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hcCBMYXRpbiBVbmljb2RlIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy4gKi9cbnZhciBkZWJ1cnJlZExldHRlcnMgPSB7XG4gIC8vIExhdGluLTEgU3VwcGxlbWVudCBibG9jay5cbiAgJ1xceGMwJzogJ0EnLCAgJ1xceGMxJzogJ0EnLCAnXFx4YzInOiAnQScsICdcXHhjMyc6ICdBJywgJ1xceGM0JzogJ0EnLCAnXFx4YzUnOiAnQScsXG4gICdcXHhlMCc6ICdhJywgICdcXHhlMSc6ICdhJywgJ1xceGUyJzogJ2EnLCAnXFx4ZTMnOiAnYScsICdcXHhlNCc6ICdhJywgJ1xceGU1JzogJ2EnLFxuICAnXFx4YzcnOiAnQycsICAnXFx4ZTcnOiAnYycsXG4gICdcXHhkMCc6ICdEJywgICdcXHhmMCc6ICdkJyxcbiAgJ1xceGM4JzogJ0UnLCAgJ1xceGM5JzogJ0UnLCAnXFx4Y2EnOiAnRScsICdcXHhjYic6ICdFJyxcbiAgJ1xceGU4JzogJ2UnLCAgJ1xceGU5JzogJ2UnLCAnXFx4ZWEnOiAnZScsICdcXHhlYic6ICdlJyxcbiAgJ1xceGNjJzogJ0knLCAgJ1xceGNkJzogJ0knLCAnXFx4Y2UnOiAnSScsICdcXHhjZic6ICdJJyxcbiAgJ1xceGVjJzogJ2knLCAgJ1xceGVkJzogJ2knLCAnXFx4ZWUnOiAnaScsICdcXHhlZic6ICdpJyxcbiAgJ1xceGQxJzogJ04nLCAgJ1xceGYxJzogJ24nLFxuICAnXFx4ZDInOiAnTycsICAnXFx4ZDMnOiAnTycsICdcXHhkNCc6ICdPJywgJ1xceGQ1JzogJ08nLCAnXFx4ZDYnOiAnTycsICdcXHhkOCc6ICdPJyxcbiAgJ1xceGYyJzogJ28nLCAgJ1xceGYzJzogJ28nLCAnXFx4ZjQnOiAnbycsICdcXHhmNSc6ICdvJywgJ1xceGY2JzogJ28nLCAnXFx4ZjgnOiAnbycsXG4gICdcXHhkOSc6ICdVJywgICdcXHhkYSc6ICdVJywgJ1xceGRiJzogJ1UnLCAnXFx4ZGMnOiAnVScsXG4gICdcXHhmOSc6ICd1JywgICdcXHhmYSc6ICd1JywgJ1xceGZiJzogJ3UnLCAnXFx4ZmMnOiAndScsXG4gICdcXHhkZCc6ICdZJywgICdcXHhmZCc6ICd5JywgJ1xceGZmJzogJ3knLFxuICAnXFx4YzYnOiAnQWUnLCAnXFx4ZTYnOiAnYWUnLFxuICAnXFx4ZGUnOiAnVGgnLCAnXFx4ZmUnOiAndGgnLFxuICAnXFx4ZGYnOiAnc3MnLFxuICAvLyBMYXRpbiBFeHRlbmRlZC1BIGJsb2NrLlxuICAnXFx1MDEwMCc6ICdBJywgICdcXHUwMTAyJzogJ0EnLCAnXFx1MDEwNCc6ICdBJyxcbiAgJ1xcdTAxMDEnOiAnYScsICAnXFx1MDEwMyc6ICdhJywgJ1xcdTAxMDUnOiAnYScsXG4gICdcXHUwMTA2JzogJ0MnLCAgJ1xcdTAxMDgnOiAnQycsICdcXHUwMTBhJzogJ0MnLCAnXFx1MDEwYyc6ICdDJyxcbiAgJ1xcdTAxMDcnOiAnYycsICAnXFx1MDEwOSc6ICdjJywgJ1xcdTAxMGInOiAnYycsICdcXHUwMTBkJzogJ2MnLFxuICAnXFx1MDEwZSc6ICdEJywgICdcXHUwMTEwJzogJ0QnLCAnXFx1MDEwZic6ICdkJywgJ1xcdTAxMTEnOiAnZCcsXG4gICdcXHUwMTEyJzogJ0UnLCAgJ1xcdTAxMTQnOiAnRScsICdcXHUwMTE2JzogJ0UnLCAnXFx1MDExOCc6ICdFJywgJ1xcdTAxMWEnOiAnRScsXG4gICdcXHUwMTEzJzogJ2UnLCAgJ1xcdTAxMTUnOiAnZScsICdcXHUwMTE3JzogJ2UnLCAnXFx1MDExOSc6ICdlJywgJ1xcdTAxMWInOiAnZScsXG4gICdcXHUwMTFjJzogJ0cnLCAgJ1xcdTAxMWUnOiAnRycsICdcXHUwMTIwJzogJ0cnLCAnXFx1MDEyMic6ICdHJyxcbiAgJ1xcdTAxMWQnOiAnZycsICAnXFx1MDExZic6ICdnJywgJ1xcdTAxMjEnOiAnZycsICdcXHUwMTIzJzogJ2cnLFxuICAnXFx1MDEyNCc6ICdIJywgICdcXHUwMTI2JzogJ0gnLCAnXFx1MDEyNSc6ICdoJywgJ1xcdTAxMjcnOiAnaCcsXG4gICdcXHUwMTI4JzogJ0knLCAgJ1xcdTAxMmEnOiAnSScsICdcXHUwMTJjJzogJ0knLCAnXFx1MDEyZSc6ICdJJywgJ1xcdTAxMzAnOiAnSScsXG4gICdcXHUwMTI5JzogJ2knLCAgJ1xcdTAxMmInOiAnaScsICdcXHUwMTJkJzogJ2knLCAnXFx1MDEyZic6ICdpJywgJ1xcdTAxMzEnOiAnaScsXG4gICdcXHUwMTM0JzogJ0onLCAgJ1xcdTAxMzUnOiAnaicsXG4gICdcXHUwMTM2JzogJ0snLCAgJ1xcdTAxMzcnOiAnaycsICdcXHUwMTM4JzogJ2snLFxuICAnXFx1MDEzOSc6ICdMJywgICdcXHUwMTNiJzogJ0wnLCAnXFx1MDEzZCc6ICdMJywgJ1xcdTAxM2YnOiAnTCcsICdcXHUwMTQxJzogJ0wnLFxuICAnXFx1MDEzYSc6ICdsJywgICdcXHUwMTNjJzogJ2wnLCAnXFx1MDEzZSc6ICdsJywgJ1xcdTAxNDAnOiAnbCcsICdcXHUwMTQyJzogJ2wnLFxuICAnXFx1MDE0Myc6ICdOJywgICdcXHUwMTQ1JzogJ04nLCAnXFx1MDE0Nyc6ICdOJywgJ1xcdTAxNGEnOiAnTicsXG4gICdcXHUwMTQ0JzogJ24nLCAgJ1xcdTAxNDYnOiAnbicsICdcXHUwMTQ4JzogJ24nLCAnXFx1MDE0Yic6ICduJyxcbiAgJ1xcdTAxNGMnOiAnTycsICAnXFx1MDE0ZSc6ICdPJywgJ1xcdTAxNTAnOiAnTycsXG4gICdcXHUwMTRkJzogJ28nLCAgJ1xcdTAxNGYnOiAnbycsICdcXHUwMTUxJzogJ28nLFxuICAnXFx1MDE1NCc6ICdSJywgICdcXHUwMTU2JzogJ1InLCAnXFx1MDE1OCc6ICdSJyxcbiAgJ1xcdTAxNTUnOiAncicsICAnXFx1MDE1Nyc6ICdyJywgJ1xcdTAxNTknOiAncicsXG4gICdcXHUwMTVhJzogJ1MnLCAgJ1xcdTAxNWMnOiAnUycsICdcXHUwMTVlJzogJ1MnLCAnXFx1MDE2MCc6ICdTJyxcbiAgJ1xcdTAxNWInOiAncycsICAnXFx1MDE1ZCc6ICdzJywgJ1xcdTAxNWYnOiAncycsICdcXHUwMTYxJzogJ3MnLFxuICAnXFx1MDE2Mic6ICdUJywgICdcXHUwMTY0JzogJ1QnLCAnXFx1MDE2Nic6ICdUJyxcbiAgJ1xcdTAxNjMnOiAndCcsICAnXFx1MDE2NSc6ICd0JywgJ1xcdTAxNjcnOiAndCcsXG4gICdcXHUwMTY4JzogJ1UnLCAgJ1xcdTAxNmEnOiAnVScsICdcXHUwMTZjJzogJ1UnLCAnXFx1MDE2ZSc6ICdVJywgJ1xcdTAxNzAnOiAnVScsICdcXHUwMTcyJzogJ1UnLFxuICAnXFx1MDE2OSc6ICd1JywgICdcXHUwMTZiJzogJ3UnLCAnXFx1MDE2ZCc6ICd1JywgJ1xcdTAxNmYnOiAndScsICdcXHUwMTcxJzogJ3UnLCAnXFx1MDE3Myc6ICd1JyxcbiAgJ1xcdTAxNzQnOiAnVycsICAnXFx1MDE3NSc6ICd3JyxcbiAgJ1xcdTAxNzYnOiAnWScsICAnXFx1MDE3Nyc6ICd5JywgJ1xcdTAxNzgnOiAnWScsXG4gICdcXHUwMTc5JzogJ1onLCAgJ1xcdTAxN2InOiAnWicsICdcXHUwMTdkJzogJ1onLFxuICAnXFx1MDE3YSc6ICd6JywgICdcXHUwMTdjJzogJ3onLCAnXFx1MDE3ZSc6ICd6JyxcbiAgJ1xcdTAxMzInOiAnSUonLCAnXFx1MDEzMyc6ICdpaicsXG4gICdcXHUwMTUyJzogJ09lJywgJ1xcdTAxNTMnOiAnb2UnLFxuICAnXFx1MDE0OSc6IFwiJ25cIiwgJ1xcdTAxN2YnOiAncydcbn07XG5cbi8qKlxuICogVXNlZCBieSBgXy5kZWJ1cnJgIHRvIGNvbnZlcnQgTGF0aW4tMSBTdXBwbGVtZW50IGFuZCBMYXRpbiBFeHRlbmRlZC1BXG4gKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBsZXR0ZXIgVGhlIG1hdGNoZWQgbGV0dGVyIHRvIGRlYnVyci5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIGxldHRlci5cbiAqL1xudmFyIGRlYnVyckxldHRlciA9IGJhc2VQcm9wZXJ0eU9mKGRlYnVycmVkTGV0dGVycyk7XG5cbmV4cG9ydCBkZWZhdWx0IGRlYnVyckxldHRlcjtcbiIsImltcG9ydCBkZWJ1cnJMZXR0ZXIgZnJvbSAnLi9fZGVidXJyTGV0dGVyLmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqIFVzZWQgdG8gbWF0Y2ggTGF0aW4gVW5pY29kZSBsZXR0ZXJzIChleGNsdWRpbmcgbWF0aGVtYXRpY2FsIG9wZXJhdG9ycykuICovXG52YXIgcmVMYXRpbiA9IC9bXFx4YzAtXFx4ZDZcXHhkOC1cXHhmNlxceGY4LVxceGZmXFx1MDEwMC1cXHUwMTdmXS9nO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJztcblxuLyoqXG4gKiBVc2VkIHRvIG1hdGNoIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3NdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrcykgYW5kXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzIGZvciBzeW1ib2xzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3NfZm9yX1N5bWJvbHMpLlxuICovXG52YXIgcmVDb21ib01hcmsgPSBSZWdFeHAocnNDb21ibywgJ2cnKTtcblxuLyoqXG4gKiBEZWJ1cnJzIGBzdHJpbmdgIGJ5IGNvbnZlcnRpbmdcbiAqIFtMYXRpbi0xIFN1cHBsZW1lbnRdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluLTFfU3VwcGxlbWVudF8oVW5pY29kZV9ibG9jaykjQ2hhcmFjdGVyX3RhYmxlKVxuICogYW5kIFtMYXRpbiBFeHRlbmRlZC1BXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9MYXRpbl9FeHRlbmRlZC1BKVxuICogbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzIGFuZCByZW1vdmluZ1xuICogW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBkZWJ1cnIuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBkZWJ1cnJlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uZGVidXJyKCdkw6lqw6AgdnUnKTtcbiAqIC8vID0+ICdkZWphIHZ1J1xuICovXG5mdW5jdGlvbiBkZWJ1cnIoc3RyaW5nKSB7XG4gIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG4gIHJldHVybiBzdHJpbmcgJiYgc3RyaW5nLnJlcGxhY2UocmVMYXRpbiwgZGVidXJyTGV0dGVyKS5yZXBsYWNlKHJlQ29tYm9NYXJrLCAnJyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGRlYnVycjtcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIHdvcmRzIGNvbXBvc2VkIG9mIGFscGhhbnVtZXJpYyBjaGFyYWN0ZXJzLiAqL1xudmFyIHJlQXNjaWlXb3JkID0gL1teXFx4MDAtXFx4MmZcXHgzYS1cXHg0MFxceDViLVxceDYwXFx4N2ItXFx4N2ZdKy9nO1xuXG4vKipcbiAqIFNwbGl0cyBhbiBBU0NJSSBgc3RyaW5nYCBpbnRvIGFuIGFycmF5IG9mIGl0cyB3b3Jkcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKi9cbmZ1bmN0aW9uIGFzY2lpV29yZHMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocmVBc2NpaVdvcmQpIHx8IFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc2NpaVdvcmRzO1xuIiwiLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3MgdGhhdCBuZWVkIGEgbW9yZSByb2J1c3QgcmVnZXhwIHRvIG1hdGNoIHdvcmRzLiAqL1xudmFyIHJlSGFzVW5pY29kZVdvcmQgPSAvW2Etel1bQS1aXXxbQS1aXXsyfVthLXpdfFswLTldW2EtekEtWl18W2EtekEtWl1bMC05XXxbXmEtekEtWjAtOSBdLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgYSB3b3JkIGNvbXBvc2VkIG9mIFVuaWNvZGUgc3ltYm9scy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYSB3b3JkIGlzIGZvdW5kLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc1VuaWNvZGVXb3JkKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlV29yZC50ZXN0KHN0cmluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc1VuaWNvZGVXb3JkO1xuIiwiLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNoYXJhY3RlciBjbGFzc2VzLiAqL1xudmFyIHJzQXN0cmFsUmFuZ2UgPSAnXFxcXHVkODAwLVxcXFx1ZGZmZicsXG4gICAgcnNDb21ib01hcmtzUmFuZ2UgPSAnXFxcXHUwMzAwLVxcXFx1MDM2ZicsXG4gICAgcmVDb21ib0hhbGZNYXJrc1JhbmdlID0gJ1xcXFx1ZmUyMC1cXFxcdWZlMmYnLFxuICAgIHJzQ29tYm9TeW1ib2xzUmFuZ2UgPSAnXFxcXHUyMGQwLVxcXFx1MjBmZicsXG4gICAgcnNDb21ib1JhbmdlID0gcnNDb21ib01hcmtzUmFuZ2UgKyByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgKyByc0NvbWJvU3ltYm9sc1JhbmdlLFxuICAgIHJzRGluZ2JhdFJhbmdlID0gJ1xcXFx1MjcwMC1cXFxcdTI3YmYnLFxuICAgIHJzTG93ZXJSYW5nZSA9ICdhLXpcXFxceGRmLVxcXFx4ZjZcXFxceGY4LVxcXFx4ZmYnLFxuICAgIHJzTWF0aE9wUmFuZ2UgPSAnXFxcXHhhY1xcXFx4YjFcXFxceGQ3XFxcXHhmNycsXG4gICAgcnNOb25DaGFyUmFuZ2UgPSAnXFxcXHgwMC1cXFxceDJmXFxcXHgzYS1cXFxceDQwXFxcXHg1Yi1cXFxceDYwXFxcXHg3Yi1cXFxceGJmJyxcbiAgICByc1B1bmN0dWF0aW9uUmFuZ2UgPSAnXFxcXHUyMDAwLVxcXFx1MjA2ZicsXG4gICAgcnNTcGFjZVJhbmdlID0gJyBcXFxcdFxcXFx4MGJcXFxcZlxcXFx4YTBcXFxcdWZlZmZcXFxcblxcXFxyXFxcXHUyMDI4XFxcXHUyMDI5XFxcXHUxNjgwXFxcXHUxODBlXFxcXHUyMDAwXFxcXHUyMDAxXFxcXHUyMDAyXFxcXHUyMDAzXFxcXHUyMDA0XFxcXHUyMDA1XFxcXHUyMDA2XFxcXHUyMDA3XFxcXHUyMDA4XFxcXHUyMDA5XFxcXHUyMDBhXFxcXHUyMDJmXFxcXHUyMDVmXFxcXHUzMDAwJyxcbiAgICByc1VwcGVyUmFuZ2UgPSAnQS1aXFxcXHhjMC1cXFxceGQ2XFxcXHhkOC1cXFxceGRlJyxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZicsXG4gICAgcnNCcmVha1JhbmdlID0gcnNNYXRoT3BSYW5nZSArIHJzTm9uQ2hhclJhbmdlICsgcnNQdW5jdHVhdGlvblJhbmdlICsgcnNTcGFjZVJhbmdlO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCIsXG4gICAgcnNCcmVhayA9ICdbJyArIHJzQnJlYWtSYW5nZSArICddJyxcbiAgICByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nLFxuICAgIHJzRGlnaXRzID0gJ1xcXFxkKycsXG4gICAgcnNEaW5nYmF0ID0gJ1snICsgcnNEaW5nYmF0UmFuZ2UgKyAnXScsXG4gICAgcnNMb3dlciA9ICdbJyArIHJzTG93ZXJSYW5nZSArICddJyxcbiAgICByc01pc2MgPSAnW14nICsgcnNBc3RyYWxSYW5nZSArIHJzQnJlYWtSYW5nZSArIHJzRGlnaXRzICsgcnNEaW5nYmF0UmFuZ2UgKyByc0xvd2VyUmFuZ2UgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNGaXR6ID0gJ1xcXFx1ZDgzY1tcXFxcdWRmZmItXFxcXHVkZmZmXScsXG4gICAgcnNNb2RpZmllciA9ICcoPzonICsgcnNDb21ibyArICd8JyArIHJzRml0eiArICcpJyxcbiAgICByc05vbkFzdHJhbCA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgJ10nLFxuICAgIHJzUmVnaW9uYWwgPSAnKD86XFxcXHVkODNjW1xcXFx1ZGRlNi1cXFxcdWRkZmZdKXsyfScsXG4gICAgcnNTdXJyUGFpciA9ICdbXFxcXHVkODAwLVxcXFx1ZGJmZl1bXFxcXHVkYzAwLVxcXFx1ZGZmZl0nLFxuICAgIHJzVXBwZXIgPSAnWycgKyByc1VwcGVyUmFuZ2UgKyAnXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcnNNaXNjTG93ZXIgPSAnKD86JyArIHJzTG93ZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNNaXNjVXBwZXIgPSAnKD86JyArIHJzVXBwZXIgKyAnfCcgKyByc01pc2MgKyAnKScsXG4gICAgcnNPcHRDb250ckxvd2VyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86ZHxsbHxtfHJlfHN8dHx2ZSkpPycsXG4gICAgcnNPcHRDb250clVwcGVyID0gJyg/OicgKyByc0Fwb3MgKyAnKD86RHxMTHxNfFJFfFN8VHxWRSkpPycsXG4gICAgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc09yZExvd2VyID0gJ1xcXFxkKig/OjFzdHwybmR8M3JkfCg/IVsxMjNdKVxcXFxkdGgpKD89XFxcXGJ8W0EtWl9dKScsXG4gICAgcnNPcmRVcHBlciA9ICdcXFxcZCooPzoxU1R8Mk5EfDNSRHwoPyFbMTIzXSlcXFxcZFRIKSg/PVxcXFxifFthLXpfXSknLFxuICAgIHJzU2VxID0gcnNPcHRWYXIgKyByZU9wdE1vZCArIHJzT3B0Sm9pbixcbiAgICByc0Vtb2ppID0gJyg/OicgKyBbcnNEaW5nYmF0LCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc1NlcTtcblxuLyoqIFVzZWQgdG8gbWF0Y2ggY29tcGxleCBvciBjb21wb3VuZCB3b3Jkcy4gKi9cbnZhciByZVVuaWNvZGVXb3JkID0gUmVnRXhwKFtcbiAgcnNVcHBlciArICc/JyArIHJzTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyLCAnJCddLmpvaW4oJ3wnKSArICcpJyxcbiAgcnNNaXNjVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIgKyAnKD89JyArIFtyc0JyZWFrLCByc1VwcGVyICsgcnNNaXNjTG93ZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc1VwcGVyICsgJz8nICsgcnNNaXNjTG93ZXIgKyAnKycgKyByc09wdENvbnRyTG93ZXIsXG4gIHJzVXBwZXIgKyAnKycgKyByc09wdENvbnRyVXBwZXIsXG4gIHJzT3JkVXBwZXIsXG4gIHJzT3JkTG93ZXIsXG4gIHJzRGlnaXRzLFxuICByc0Vtb2ppXG5dLmpvaW4oJ3wnKSwgJ2cnKTtcblxuLyoqXG4gKiBTcGxpdHMgYSBVbmljb2RlIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gdW5pY29kZVdvcmRzKHN0cmluZykge1xuICByZXR1cm4gc3RyaW5nLm1hdGNoKHJlVW5pY29kZVdvcmQpIHx8IFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1bmljb2RlV29yZHM7XG4iLCJpbXBvcnQgYXNjaWlXb3JkcyBmcm9tICcuL19hc2NpaVdvcmRzLmpzJztcbmltcG9ydCBoYXNVbmljb2RlV29yZCBmcm9tICcuL19oYXNVbmljb2RlV29yZC5qcyc7XG5pbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5pbXBvcnQgdW5pY29kZVdvcmRzIGZyb20gJy4vX3VuaWNvZGVXb3Jkcy5qcyc7XG5cbi8qKlxuICogU3BsaXRzIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge1JlZ0V4cHxzdHJpbmd9IFtwYXR0ZXJuXSBUaGUgcGF0dGVybiB0byBtYXRjaCB3b3Jkcy5cbiAqIEBwYXJhbS0ge09iamVjdH0gW2d1YXJkXSBFbmFibGVzIHVzZSBhcyBhbiBpdGVyYXRlZSBmb3IgbWV0aG9kcyBsaWtlIGBfLm1hcGAuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycpO1xuICogLy8gPT4gWydmcmVkJywgJ2Jhcm5leScsICdwZWJibGVzJ11cbiAqXG4gKiBfLndvcmRzKCdmcmVkLCBiYXJuZXksICYgcGViYmxlcycsIC9bXiwgXSsvZyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJyYnLCAncGViYmxlcyddXG4gKi9cbmZ1bmN0aW9uIHdvcmRzKHN0cmluZywgcGF0dGVybiwgZ3VhcmQpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcGF0dGVybiA9IGd1YXJkID8gdW5kZWZpbmVkIDogcGF0dGVybjtcblxuICBpZiAocGF0dGVybiA9PT0gdW5kZWZpbmVkKSB7XG4gICAgcmV0dXJuIGhhc1VuaWNvZGVXb3JkKHN0cmluZykgPyB1bmljb2RlV29yZHMoc3RyaW5nKSA6IGFzY2lpV29yZHMoc3RyaW5nKTtcbiAgfVxuICByZXR1cm4gc3RyaW5nLm1hdGNoKHBhdHRlcm4pIHx8IFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB3b3JkcztcbiIsImltcG9ydCBhcnJheVJlZHVjZSBmcm9tICcuL19hcnJheVJlZHVjZS5qcyc7XG5pbXBvcnQgZGVidXJyIGZyb20gJy4vZGVidXJyLmpzJztcbmltcG9ydCB3b3JkcyBmcm9tICcuL3dvcmRzLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIGNhcHR1cmUgZ3JvdXBzLiAqL1xudmFyIHJzQXBvcyA9IFwiWydcXHUyMDE5XVwiO1xuXG4vKiogVXNlZCB0byBtYXRjaCBhcG9zdHJvcGhlcy4gKi9cbnZhciByZUFwb3MgPSBSZWdFeHAocnNBcG9zLCAnZycpO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmNhbWVsQ2FzZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGNhbGxiYWNrIFRoZSBmdW5jdGlvbiB0byBjb21iaW5lIGVhY2ggd29yZC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNvbXBvdW5kZXIgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNvbXBvdW5kZXIoY2FsbGJhY2spIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHJldHVybiBhcnJheVJlZHVjZSh3b3JkcyhkZWJ1cnIoc3RyaW5nKS5yZXBsYWNlKHJlQXBvcywgJycpKSwgY2FsbGJhY2ssICcnKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlQ29tcG91bmRlcjtcbiIsImltcG9ydCBjcmVhdGVDb21wb3VuZGVyIGZyb20gJy4vX2NyZWF0ZUNvbXBvdW5kZXIuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvXG4gKiBbc25ha2UgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU25ha2VfY2FzZSkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIHNuYWtlIGNhc2VkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5zbmFrZUNhc2UoJ0ZvbyBCYXInKTtcbiAqIC8vID0+ICdmb29fYmFyJ1xuICpcbiAqIF8uc25ha2VDYXNlKCdmb29CYXInKTtcbiAqIC8vID0+ICdmb29fYmFyJ1xuICpcbiAqIF8uc25ha2VDYXNlKCctLUZPTy1CQVItLScpO1xuICogLy8gPT4gJ2Zvb19iYXInXG4gKi9cbnZhciBzbmFrZUNhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/ICdfJyA6ICcnKSArIHdvcmQudG9Mb3dlckNhc2UoKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBzbmFrZUNhc2U7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnNsaWNlYCB3aXRob3V0IGFuIGl0ZXJhdGVlIGNhbGwgZ3VhcmQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBzbGljZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbc3RhcnQ9MF0gVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBzbGljZSBvZiBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKHN0YXJ0IDwgMCkge1xuICAgIHN0YXJ0ID0gLXN0YXJ0ID4gbGVuZ3RoID8gMCA6IChsZW5ndGggKyBzdGFydCk7XG4gIH1cbiAgZW5kID0gZW5kID4gbGVuZ3RoID8gbGVuZ3RoIDogZW5kO1xuICBpZiAoZW5kIDwgMCkge1xuICAgIGVuZCArPSBsZW5ndGg7XG4gIH1cbiAgbGVuZ3RoID0gc3RhcnQgPiBlbmQgPyAwIDogKChlbmQgLSBzdGFydCkgPj4+IDApO1xuICBzdGFydCA+Pj49IDA7XG5cbiAgdmFyIHJlc3VsdCA9IEFycmF5KGxlbmd0aCk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgcmVzdWx0W2luZGV4XSA9IGFycmF5W2luZGV4ICsgc3RhcnRdO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VTbGljZTtcbiIsImltcG9ydCBiYXNlU2xpY2UgZnJvbSAnLi9fYmFzZVNsaWNlLmpzJztcblxuLyoqXG4gKiBDYXN0cyBgYXJyYXlgIHRvIGEgc2xpY2UgaWYgaXQncyBuZWVkZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IFRoZSBzdGFydCBwb3NpdGlvbi5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbZW5kPWFycmF5Lmxlbmd0aF0gVGhlIGVuZCBwb3NpdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY2FzdCBzbGljZS5cbiAqL1xuZnVuY3Rpb24gY2FzdFNsaWNlKGFycmF5LCBzdGFydCwgZW5kKSB7XG4gIHZhciBsZW5ndGggPSBhcnJheS5sZW5ndGg7XG4gIGVuZCA9IGVuZCA9PT0gdW5kZWZpbmVkID8gbGVuZ3RoIDogZW5kO1xuICByZXR1cm4gKCFzdGFydCAmJiBlbmQgPj0gbGVuZ3RoKSA/IGFycmF5IDogYmFzZVNsaWNlKGFycmF5LCBzdGFydCwgZW5kKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FzdFNsaWNlO1xuIiwiaW1wb3J0IGNhc3RTbGljZSBmcm9tICcuL19jYXN0U2xpY2UuanMnO1xuaW1wb3J0IGhhc1VuaWNvZGUgZnJvbSAnLi9faGFzVW5pY29kZS5qcyc7XG5pbXBvcnQgc3RyaW5nVG9BcnJheSBmcm9tICcuL19zdHJpbmdUb0FycmF5LmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gbGlrZSBgXy5sb3dlckZpcnN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IG1ldGhvZE5hbWUgVGhlIG5hbWUgb2YgdGhlIGBTdHJpbmdgIGNhc2UgbWV0aG9kIHRvIHVzZS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGNhc2UgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUNhc2VGaXJzdChtZXRob2ROYW1lKSB7XG4gIHJldHVybiBmdW5jdGlvbihzdHJpbmcpIHtcbiAgICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuXG4gICAgdmFyIHN0clN5bWJvbHMgPSBoYXNVbmljb2RlKHN0cmluZylcbiAgICAgID8gc3RyaW5nVG9BcnJheShzdHJpbmcpXG4gICAgICA6IHVuZGVmaW5lZDtcblxuICAgIHZhciBjaHIgPSBzdHJTeW1ib2xzXG4gICAgICA/IHN0clN5bWJvbHNbMF1cbiAgICAgIDogc3RyaW5nLmNoYXJBdCgwKTtcblxuICAgIHZhciB0cmFpbGluZyA9IHN0clN5bWJvbHNcbiAgICAgID8gY2FzdFNsaWNlKHN0clN5bWJvbHMsIDEpLmpvaW4oJycpXG4gICAgICA6IHN0cmluZy5zbGljZSgxKTtcblxuICAgIHJldHVybiBjaHJbbWV0aG9kTmFtZV0oKSArIHRyYWlsaW5nO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDYXNlRmlyc3Q7XG4iLCJpbXBvcnQgY3JlYXRlQ2FzZUZpcnN0IGZyb20gJy4vX2NyZWF0ZUNhc2VGaXJzdC5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgdGhlIGZpcnN0IGNoYXJhY3RlciBvZiBgc3RyaW5nYCB0byB1cHBlciBjYXNlLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjb252ZXJ0ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnVwcGVyRmlyc3QoJ2ZyZWQnKTtcbiAqIC8vID0+ICdGcmVkJ1xuICpcbiAqIF8udXBwZXJGaXJzdCgnRlJFRCcpO1xuICogLy8gPT4gJ0ZSRUQnXG4gKi9cbnZhciB1cHBlckZpcnN0ID0gY3JlYXRlQ2FzZUZpcnN0KCd0b1VwcGVyQ2FzZScpO1xuXG5leHBvcnQgZGVmYXVsdCB1cHBlckZpcnN0O1xuIiwiaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuaW1wb3J0IHVwcGVyRmlyc3QgZnJvbSAnLi91cHBlckZpcnN0LmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UgYW5kIHRoZSByZW1haW5pbmdcbiAqIHRvIGxvd2VyIGNhc2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY2FwaXRhbGl6ZS5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNhcGl0YWxpemVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5jYXBpdGFsaXplKCdGUkVEJyk7XG4gKiAvLyA9PiAnRnJlZCdcbiAqL1xuZnVuY3Rpb24gY2FwaXRhbGl6ZShzdHJpbmcpIHtcbiAgcmV0dXJuIHVwcGVyRmlyc3QodG9TdHJpbmcoc3RyaW5nKS50b0xvd2VyQ2FzZSgpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FwaXRhbGl6ZTtcbiIsImltcG9ydCBjYXBpdGFsaXplIGZyb20gJy4vY2FwaXRhbGl6ZS5qcyc7XG5pbXBvcnQgY3JlYXRlQ29tcG91bmRlciBmcm9tICcuL19jcmVhdGVDb21wb3VuZGVyLmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBbY2FtZWwgY2FzZV0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ2FtZWxDYXNlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FtZWwgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNhbWVsQ2FzZSgnRm9vIEJhcicpO1xuICogLy8gPT4gJ2Zvb0JhcidcbiAqXG4gKiBfLmNhbWVsQ2FzZSgnLS1mb28tYmFyLS0nKTtcbiAqIC8vID0+ICdmb29CYXInXG4gKlxuICogXy5jYW1lbENhc2UoJ19fRk9PX0JBUl9fJyk7XG4gKiAvLyA9PiAnZm9vQmFyJ1xuICovXG52YXIgY2FtZWxDYXNlID0gY3JlYXRlQ29tcG91bmRlcihmdW5jdGlvbihyZXN1bHQsIHdvcmQsIGluZGV4KSB7XG4gIHdvcmQgPSB3b3JkLnRvTG93ZXJDYXNlKCk7XG4gIHJldHVybiByZXN1bHQgKyAoaW5kZXggPyBjYXBpdGFsaXplKHdvcmQpIDogd29yZCk7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgY2FtZWxDYXNlO1xuIiwiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VGb3JPd24gZnJvbSAnLi9fYmFzZUZvck93bi5qcyc7XG5pbXBvcnQgYmFzZUl0ZXJhdGVlIGZyb20gJy4vX2Jhc2VJdGVyYXRlZS5qcyc7XG5cbi8qKlxuICogVGhlIG9wcG9zaXRlIG9mIGBfLm1hcFZhbHVlc2A7IHRoaXMgbWV0aG9kIGNyZWF0ZXMgYW4gb2JqZWN0IHdpdGggdGhlXG4gKiBzYW1lIHZhbHVlcyBhcyBgb2JqZWN0YCBhbmQga2V5cyBnZW5lcmF0ZWQgYnkgcnVubmluZyBlYWNoIG93biBlbnVtZXJhYmxlXG4gKiBzdHJpbmcga2V5ZWQgcHJvcGVydHkgb2YgYG9iamVjdGAgdGhydSBgaXRlcmF0ZWVgLiBUaGUgaXRlcmF0ZWUgaXMgaW52b2tlZFxuICogd2l0aCB0aHJlZSBhcmd1bWVudHM6ICh2YWx1ZSwga2V5LCBvYmplY3QpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy44LjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbaXRlcmF0ZWU9Xy5pZGVudGl0eV0gVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgb2JqZWN0LlxuICogQHNlZSBfLm1hcFZhbHVlc1xuICogQGV4YW1wbGVcbiAqXG4gKiBfLm1hcEtleXMoeyAnYSc6IDEsICdiJzogMiB9LCBmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gKiAgIHJldHVybiBrZXkgKyB2YWx1ZTtcbiAqIH0pO1xuICogLy8gPT4geyAnYTEnOiAxLCAnYjInOiAyIH1cbiAqL1xuZnVuY3Rpb24gbWFwS2V5cyhvYmplY3QsIGl0ZXJhdGVlKSB7XG4gIHZhciByZXN1bHQgPSB7fTtcbiAgaXRlcmF0ZWUgPSBiYXNlSXRlcmF0ZWUoaXRlcmF0ZWUsIDMpO1xuXG4gIGJhc2VGb3JPd24ob2JqZWN0LCBmdW5jdGlvbih2YWx1ZSwga2V5LCBvYmplY3QpIHtcbiAgICBiYXNlQXNzaWduVmFsdWUocmVzdWx0LCBpdGVyYXRlZSh2YWx1ZSwga2V5LCBvYmplY3QpLCB2YWx1ZSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBLZXlzO1xuIiwiaW1wb3J0IGhhcyBmcm9tIFwibG9kYXNoLWVzL2hhc1wiO1xuaW1wb3J0IHRvcG9zb3J0IGZyb20gJ3RvcG9zb3J0JztcbmltcG9ydCB7IHNwbGl0IH0gZnJvbSAncHJvcGVydHktZXhwcic7XG5pbXBvcnQgUmVmIGZyb20gJy4uL1JlZmVyZW5jZSc7XG5pbXBvcnQgaXNTY2hlbWEgZnJvbSAnLi9pc1NjaGVtYSc7XG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBzb3J0RmllbGRzKGZpZWxkcywgZXhjbHVkZXMpIHtcbiAgaWYgKGV4Y2x1ZGVzID09PSB2b2lkIDApIHtcbiAgICBleGNsdWRlcyA9IFtdO1xuICB9XG5cbiAgdmFyIGVkZ2VzID0gW10sXG4gICAgICBub2RlcyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFkZE5vZGUoZGVwUGF0aCwga2V5KSB7XG4gICAgdmFyIG5vZGUgPSBzcGxpdChkZXBQYXRoKVswXTtcbiAgICBpZiAoIX5ub2Rlcy5pbmRleE9mKG5vZGUpKSBub2Rlcy5wdXNoKG5vZGUpO1xuICAgIGlmICghfmV4Y2x1ZGVzLmluZGV4T2Yoa2V5ICsgXCItXCIgKyBub2RlKSkgZWRnZXMucHVzaChba2V5LCBub2RlXSk7XG4gIH1cblxuICBmb3IgKHZhciBrZXkgaW4gZmllbGRzKSB7XG4gICAgaWYgKGhhcyhmaWVsZHMsIGtleSkpIHtcbiAgICAgIHZhciB2YWx1ZSA9IGZpZWxkc1trZXldO1xuICAgICAgaWYgKCF+bm9kZXMuaW5kZXhPZihrZXkpKSBub2Rlcy5wdXNoKGtleSk7XG4gICAgICBpZiAoUmVmLmlzUmVmKHZhbHVlKSAmJiB2YWx1ZS5pc1NpYmxpbmcpIGFkZE5vZGUodmFsdWUucGF0aCwga2V5KTtlbHNlIGlmIChpc1NjaGVtYSh2YWx1ZSkgJiYgdmFsdWUuX2RlcHMpIHZhbHVlLl9kZXBzLmZvckVhY2goZnVuY3Rpb24gKHBhdGgpIHtcbiAgICAgICAgcmV0dXJuIGFkZE5vZGUocGF0aCwga2V5KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB0b3Bvc29ydC5hcnJheShub2RlcywgZWRnZXMpLnJldmVyc2UoKTtcbn0iLCJmdW5jdGlvbiBmaW5kSW5kZXgoYXJyLCBlcnIpIHtcbiAgdmFyIGlkeCA9IEluZmluaXR5O1xuICBhcnIuc29tZShmdW5jdGlvbiAoa2V5LCBpaSkge1xuICAgIGlmIChlcnIucGF0aC5pbmRleE9mKGtleSkgIT09IC0xKSB7XG4gICAgICBpZHggPSBpaTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiBpZHg7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvcnRCeUtleU9yZGVyKGZpZWxkcykge1xuICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGZpZWxkcyk7XG4gIHJldHVybiBmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmaW5kSW5kZXgoa2V5cywgYSkgLSBmaW5kSW5kZXgoa2V5cywgYik7XG4gIH07XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gbWFrZVBhdGgoc3RyaW5ncykge1xuICBmb3IgKHZhciBfbGVuID0gYXJndW1lbnRzLmxlbmd0aCwgdmFsdWVzID0gbmV3IEFycmF5KF9sZW4gPiAxID8gX2xlbiAtIDEgOiAwKSwgX2tleSA9IDE7IF9rZXkgPCBfbGVuOyBfa2V5KyspIHtcbiAgICB2YWx1ZXNbX2tleSAtIDFdID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgdmFyIHBhdGggPSBzdHJpbmdzLnJlZHVjZShmdW5jdGlvbiAoc3RyLCBuZXh0KSB7XG4gICAgdmFyIHZhbHVlID0gdmFsdWVzLnNoaWZ0KCk7XG4gICAgcmV0dXJuIHN0ciArICh2YWx1ZSA9PSBudWxsID8gJycgOiB2YWx1ZSkgKyBuZXh0O1xuICB9KTtcbiAgcmV0dXJuIHBhdGgucmVwbGFjZSgvXlxcLi8sICcnKTtcbn0iLCJpbXBvcnQgX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5cbmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDMoKSB7XG4gIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKFtcIlwiLCBcIltcXFwiXCIsIFwiXFxcIl1cIl0pO1xuXG4gIF90ZW1wbGF0ZU9iamVjdDMgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QzKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QyKCkge1xuICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShbXCJcIiwgXCIuXCIsIFwiXCJdKTtcblxuICBfdGVtcGxhdGVPYmplY3QyID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MigpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0KCkge1xuICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShbXCJcIiwgXCIuXCIsIFwiXCJdKTtcblxuICBfdGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmltcG9ydCBoYXMgZnJvbSBcImxvZGFzaC1lcy9oYXNcIjtcbmltcG9ydCBfc25ha2VDYXNlIGZyb20gXCJsb2Rhc2gtZXMvc25ha2VDYXNlXCI7XG5pbXBvcnQgX2NhbWVsQ2FzZSBmcm9tIFwibG9kYXNoLWVzL2NhbWVsQ2FzZVwiO1xuaW1wb3J0IG1hcEtleXMgZnJvbSBcImxvZGFzaC1lcy9tYXBLZXlzXCI7XG5pbXBvcnQgbWFwVmFsdWVzIGZyb20gXCJsb2Rhc2gtZXMvbWFwVmFsdWVzXCI7XG5pbXBvcnQgeyBnZXR0ZXIgfSBmcm9tICdwcm9wZXJ0eS1leHByJztcbmltcG9ydCBNaXhlZFNjaGVtYSBmcm9tICcuL21peGVkJztcbmltcG9ydCB7IG9iamVjdCBhcyBsb2NhbGUgfSBmcm9tICcuL2xvY2FsZS5qcyc7XG5pbXBvcnQgc29ydEZpZWxkcyBmcm9tICcuL3V0aWwvc29ydEZpZWxkcyc7XG5pbXBvcnQgc29ydEJ5S2V5T3JkZXIgZnJvbSAnLi91dGlsL3NvcnRCeUtleU9yZGVyJztcbmltcG9ydCBpbmhlcml0cyBmcm9tICcuL3V0aWwvaW5oZXJpdHMnO1xuaW1wb3J0IG1ha2VQYXRoIGZyb20gJy4vdXRpbC9tYWtlUGF0aCc7XG5pbXBvcnQgcnVuVmFsaWRhdGlvbnMsIHsgcHJvcGFnYXRlRXJyb3JzIH0gZnJvbSAnLi91dGlsL3J1blZhbGlkYXRpb25zJztcbmltcG9ydCB7IFN5bmNocm9ub3VzUHJvbWlzZSB9IGZyb20gJ3N5bmNocm9ub3VzLXByb21pc2UnO1xuXG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cbnZhciBwcm9taXNlID0gZnVuY3Rpb24gcHJvbWlzZShzeW5jKSB7XG4gIHJldHVybiBzeW5jID8gU3luY2hyb25vdXNQcm9taXNlIDogUHJvbWlzZTtcbn07XG5cbmZ1bmN0aW9uIHVua25vd24oY3R4LCB2YWx1ZSkge1xuICB2YXIga25vd24gPSBPYmplY3Qua2V5cyhjdHguZmllbGRzKTtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHZhbHVlKS5maWx0ZXIoZnVuY3Rpb24gKGtleSkge1xuICAgIHJldHVybiBrbm93bi5pbmRleE9mKGtleSkgPT09IC0xO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gT2JqZWN0U2NoZW1hKHNwZWMpIHtcbiAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIE9iamVjdFNjaGVtYSkpIHJldHVybiBuZXcgT2JqZWN0U2NoZW1hKHNwZWMpO1xuICBNaXhlZFNjaGVtYS5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnb2JqZWN0JyxcbiAgICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdCgpIHtcbiAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG5cbiAgICAgIGlmICghdGhpcy5fbm9kZXMubGVuZ3RoKSByZXR1cm4gdW5kZWZpbmVkO1xuICAgICAgdmFyIGRmdCA9IHt9O1xuXG4gICAgICB0aGlzLl9ub2Rlcy5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgZGZ0W2tleV0gPSBfdGhpcy5maWVsZHNba2V5XS5kZWZhdWx0ID8gX3RoaXMuZmllbGRzW2tleV0uZGVmYXVsdCgpIDogdW5kZWZpbmVkO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBkZnQ7XG4gICAgfVxuICB9KTtcbiAgdGhpcy5maWVsZHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICB0aGlzLl9ub2RlcyA9IFtdO1xuICB0aGlzLl9leGNsdWRlZEVkZ2VzID0gW107XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpczIudHJhbnNmb3JtKGZ1bmN0aW9uIGNvZXJjZSh2YWx1ZSkge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB2YWx1ZSA9IEpTT04ucGFyc2UodmFsdWUpO1xuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICB2YWx1ZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuaXNUeXBlKHZhbHVlKSkgcmV0dXJuIHZhbHVlO1xuICAgICAgcmV0dXJuIG51bGw7XG4gICAgfSk7XG5cbiAgICBpZiAoc3BlYykge1xuICAgICAgX3RoaXMyLnNoYXBlKHNwZWMpO1xuICAgIH1cbiAgfSk7XG59XG5pbmhlcml0cyhPYmplY3RTY2hlbWEsIE1peGVkU2NoZW1hLCB7XG4gIF90eXBlQ2hlY2s6IGZ1bmN0aW9uIF90eXBlQ2hlY2sodmFsdWUpIHtcbiAgICByZXR1cm4gaXNPYmplY3QodmFsdWUpIHx8IHR5cGVvZiB2YWx1ZSA9PT0gJ2Z1bmN0aW9uJztcbiAgfSxcbiAgX2Nhc3Q6IGZ1bmN0aW9uIF9jYXN0KF92YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IE1peGVkU2NoZW1hLnByb3RvdHlwZS5fY2FzdC5jYWxsKHRoaXMsIF92YWx1ZSwgb3B0aW9ucyk7IC8vc2hvdWxkIGlnbm9yZSBudWxscyBoZXJlXG5cblxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSByZXR1cm4gdGhpcy5kZWZhdWx0KCk7XG4gICAgaWYgKCF0aGlzLl90eXBlQ2hlY2sodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgdmFyIGZpZWxkcyA9IHRoaXMuZmllbGRzO1xuICAgIHZhciBzdHJpcCA9IHRoaXMuX29wdGlvbignc3RyaXBVbmtub3duJywgb3B0aW9ucykgPT09IHRydWU7XG5cbiAgICB2YXIgcHJvcHMgPSB0aGlzLl9ub2Rlcy5jb25jYXQoT2JqZWN0LmtleXModmFsdWUpLmZpbHRlcihmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuIF90aGlzMy5fbm9kZXMuaW5kZXhPZih2KSA9PT0gLTE7XG4gICAgfSkpO1xuXG4gICAgdmFyIGludGVybWVkaWF0ZVZhbHVlID0ge307IC8vIGlzIGZpbGxlZCBkdXJpbmcgdGhlIHRyYW5zZm9ybSBiZWxvd1xuXG4gICAgdmFyIGlubmVyT3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICBwYXJlbnQ6IGludGVybWVkaWF0ZVZhbHVlLFxuICAgICAgX192YWxpZGF0aW5nOiBvcHRpb25zLl9fdmFsaWRhdGluZyB8fCBmYWxzZVxuICAgIH0pO1xuXG4gICAgdmFyIGlzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHByb3BzLmZvckVhY2goZnVuY3Rpb24gKHByb3ApIHtcbiAgICAgIHZhciBmaWVsZCA9IGZpZWxkc1twcm9wXTtcbiAgICAgIHZhciBleGlzdHMgPSBoYXModmFsdWUsIHByb3ApO1xuXG4gICAgICBpZiAoZmllbGQpIHtcbiAgICAgICAgdmFyIGZpZWxkVmFsdWU7XG4gICAgICAgIHZhciBzdHJpY3QgPSBmaWVsZC5fb3B0aW9ucyAmJiBmaWVsZC5fb3B0aW9ucy5zdHJpY3Q7IC8vIHNhZmUgdG8gbXV0YXRlIHNpbmNlIHRoaXMgaXMgZmlyZWQgaW4gc2VxdWVuY2VcblxuICAgICAgICBpbm5lck9wdGlvbnMucGF0aCA9IG1ha2VQYXRoKF90ZW1wbGF0ZU9iamVjdCgpLCBvcHRpb25zLnBhdGgsIHByb3ApO1xuICAgICAgICBpbm5lck9wdGlvbnMudmFsdWUgPSB2YWx1ZVtwcm9wXTtcbiAgICAgICAgZmllbGQgPSBmaWVsZC5yZXNvbHZlKGlubmVyT3B0aW9ucyk7XG5cbiAgICAgICAgaWYgKGZpZWxkLl9zdHJpcCA9PT0gdHJ1ZSkge1xuICAgICAgICAgIGlzQ2hhbmdlZCA9IGlzQ2hhbmdlZCB8fCBwcm9wIGluIHZhbHVlO1xuICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuXG4gICAgICAgIGZpZWxkVmFsdWUgPSAhb3B0aW9ucy5fX3ZhbGlkYXRpbmcgfHwgIXN0cmljdCA/IGZpZWxkLmNhc3QodmFsdWVbcHJvcF0sIGlubmVyT3B0aW9ucykgOiB2YWx1ZVtwcm9wXTtcbiAgICAgICAgaWYgKGZpZWxkVmFsdWUgIT09IHVuZGVmaW5lZCkgaW50ZXJtZWRpYXRlVmFsdWVbcHJvcF0gPSBmaWVsZFZhbHVlO1xuICAgICAgfSBlbHNlIGlmIChleGlzdHMgJiYgIXN0cmlwKSBpbnRlcm1lZGlhdGVWYWx1ZVtwcm9wXSA9IHZhbHVlW3Byb3BdO1xuXG4gICAgICBpZiAoaW50ZXJtZWRpYXRlVmFsdWVbcHJvcF0gIT09IHZhbHVlW3Byb3BdKSBpc0NoYW5nZWQgPSB0cnVlO1xuICAgIH0pO1xuICAgIHJldHVybiBpc0NoYW5nZWQgPyBpbnRlcm1lZGlhdGVWYWx1ZSA6IHZhbHVlO1xuICB9LFxuICBfdmFsaWRhdGU6IGZ1bmN0aW9uIF92YWxpZGF0ZShfdmFsdWUsIG9wdHMpIHtcbiAgICB2YXIgX3RoaXM0ID0gdGhpcztcblxuICAgIGlmIChvcHRzID09PSB2b2lkIDApIHtcbiAgICAgIG9wdHMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgZW5kRWFybHksIHJlY3Vyc2l2ZTtcbiAgICB2YXIgc3luYyA9IG9wdHMuc3luYztcbiAgICB2YXIgZXJyb3JzID0gW107XG4gICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBvcHRzLm9yaWdpbmFsVmFsdWUgIT0gbnVsbCA/IG9wdHMub3JpZ2luYWxWYWx1ZSA6IF92YWx1ZTtcbiAgICB2YXIgZnJvbSA9IFt7XG4gICAgICBzY2hlbWE6IHRoaXMsXG4gICAgICB2YWx1ZTogb3JpZ2luYWxWYWx1ZVxuICAgIH1dLmNvbmNhdChvcHRzLmZyb20gfHwgW10pO1xuICAgIGVuZEVhcmx5ID0gdGhpcy5fb3B0aW9uKCdhYm9ydEVhcmx5Jywgb3B0cyk7XG4gICAgcmVjdXJzaXZlID0gdGhpcy5fb3B0aW9uKCdyZWN1cnNpdmUnLCBvcHRzKTtcbiAgICBvcHRzID0gX2V4dGVuZHMoe30sIG9wdHMsIHtcbiAgICAgIF9fdmFsaWRhdGluZzogdHJ1ZSxcbiAgICAgIG9yaWdpbmFsVmFsdWU6IG9yaWdpbmFsVmFsdWUsXG4gICAgICBmcm9tOiBmcm9tXG4gICAgfSk7XG4gICAgcmV0dXJuIE1peGVkU2NoZW1hLnByb3RvdHlwZS5fdmFsaWRhdGUuY2FsbCh0aGlzLCBfdmFsdWUsIG9wdHMpLmNhdGNoKHByb3BhZ2F0ZUVycm9ycyhlbmRFYXJseSwgZXJyb3JzKSkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICghcmVjdXJzaXZlIHx8ICFpc09iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgLy8gb25seSBpdGVyYXRlIHRob3VnaCBhY3R1YWwgb2JqZWN0c1xuICAgICAgICBpZiAoZXJyb3JzLmxlbmd0aCkgdGhyb3cgZXJyb3JzWzBdO1xuICAgICAgICByZXR1cm4gdmFsdWU7XG4gICAgICB9XG5cbiAgICAgIGZyb20gPSBvcmlnaW5hbFZhbHVlID8gW10uY29uY2F0KGZyb20pIDogW3tcbiAgICAgICAgc2NoZW1hOiBfdGhpczQsXG4gICAgICAgIHZhbHVlOiBvcmlnaW5hbFZhbHVlIHx8IHZhbHVlXG4gICAgICB9XS5jb25jYXQob3B0cy5mcm9tIHx8IFtdKTtcbiAgICAgIG9yaWdpbmFsVmFsdWUgPSBvcmlnaW5hbFZhbHVlIHx8IHZhbHVlO1xuXG4gICAgICB2YXIgdmFsaWRhdGlvbnMgPSBfdGhpczQuX25vZGVzLm1hcChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIHZhciBwYXRoID0ga2V5LmluZGV4T2YoJy4nKSA9PT0gLTEgPyBtYWtlUGF0aChfdGVtcGxhdGVPYmplY3QyKCksIG9wdHMucGF0aCwga2V5KSA6IG1ha2VQYXRoKF90ZW1wbGF0ZU9iamVjdDMoKSwgb3B0cy5wYXRoLCBrZXkpO1xuICAgICAgICB2YXIgZmllbGQgPSBfdGhpczQuZmllbGRzW2tleV07XG5cbiAgICAgICAgdmFyIGlubmVyT3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRzLCB7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBmcm9tOiBmcm9tLFxuICAgICAgICAgIHBhcmVudDogdmFsdWUsXG4gICAgICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZVtrZXldXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChmaWVsZCAmJiBmaWVsZC52YWxpZGF0ZSkge1xuICAgICAgICAgIC8vIGlubmVyIGZpZWxkcyBhcmUgYWx3YXlzIHN0cmljdDpcbiAgICAgICAgICAvLyAxLiB0aGlzIGlzbid0IHN0cmljdCBzbyB0aGUgY2FzdGluZyB3aWxsIGFsc28gaGF2ZSBjYXN0IGlubmVyIHZhbHVlc1xuICAgICAgICAgIC8vIDIuIHRoaXMgaXMgc3RyaWN0IGluIHdoaWNoIGNhc2UgdGhlIG5lc3RlZCB2YWx1ZXMgd2VyZW4ndCBjYXN0IGVpdGhlclxuICAgICAgICAgIGlubmVyT3B0aW9ucy5zdHJpY3QgPSB0cnVlO1xuICAgICAgICAgIHJldHVybiBmaWVsZC52YWxpZGF0ZSh2YWx1ZVtrZXldLCBpbm5lck9wdGlvbnMpO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIHByb21pc2Uoc3luYykucmVzb2x2ZSh0cnVlKTtcbiAgICAgIH0pO1xuXG4gICAgICByZXR1cm4gcnVuVmFsaWRhdGlvbnMoe1xuICAgICAgICBzeW5jOiBzeW5jLFxuICAgICAgICB2YWxpZGF0aW9uczogdmFsaWRhdGlvbnMsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgIGVuZEVhcmx5OiBlbmRFYXJseSxcbiAgICAgICAgcGF0aDogb3B0cy5wYXRoLFxuICAgICAgICBzb3J0OiBzb3J0QnlLZXlPcmRlcihfdGhpczQuZmllbGRzKVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KHNjaGVtYSkge1xuICAgIHZhciBuZXh0ID0gTWl4ZWRTY2hlbWEucHJvdG90eXBlLmNvbmNhdC5jYWxsKHRoaXMsIHNjaGVtYSk7XG4gICAgbmV4dC5fbm9kZXMgPSBzb3J0RmllbGRzKG5leHQuZmllbGRzLCBuZXh0Ll9leGNsdWRlZEVkZ2VzKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgc2hhcGU6IGZ1bmN0aW9uIHNoYXBlKHNjaGVtYSwgZXhjbHVkZXMpIHtcbiAgICBpZiAoZXhjbHVkZXMgPT09IHZvaWQgMCkge1xuICAgICAgZXhjbHVkZXMgPSBbXTtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcblxuICAgIHZhciBmaWVsZHMgPSBfZXh0ZW5kcyhuZXh0LmZpZWxkcywgc2NoZW1hKTtcblxuICAgIG5leHQuZmllbGRzID0gZmllbGRzO1xuXG4gICAgaWYgKGV4Y2x1ZGVzLmxlbmd0aCkge1xuICAgICAgaWYgKCFBcnJheS5pc0FycmF5KGV4Y2x1ZGVzWzBdKSkgZXhjbHVkZXMgPSBbZXhjbHVkZXNdO1xuICAgICAgdmFyIGtleXMgPSBleGNsdWRlcy5tYXAoZnVuY3Rpb24gKF9yZWYpIHtcbiAgICAgICAgdmFyIGZpcnN0ID0gX3JlZlswXSxcbiAgICAgICAgICAgIHNlY29uZCA9IF9yZWZbMV07XG4gICAgICAgIHJldHVybiBmaXJzdCArIFwiLVwiICsgc2Vjb25kO1xuICAgICAgfSk7XG4gICAgICBuZXh0Ll9leGNsdWRlZEVkZ2VzID0gbmV4dC5fZXhjbHVkZWRFZGdlcy5jb25jYXQoa2V5cyk7XG4gICAgfVxuXG4gICAgbmV4dC5fbm9kZXMgPSBzb3J0RmllbGRzKGZpZWxkcywgbmV4dC5fZXhjbHVkZWRFZGdlcyk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIGZyb206IGZ1bmN0aW9uIGZyb20oX2Zyb20sIHRvLCBhbGlhcykge1xuICAgIHZhciBmcm9tR2V0dGVyID0gZ2V0dGVyKF9mcm9tLCB0cnVlKTtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKG9iaikge1xuICAgICAgaWYgKG9iaiA9PSBudWxsKSByZXR1cm4gb2JqO1xuICAgICAgdmFyIG5ld09iaiA9IG9iajtcblxuICAgICAgaWYgKGhhcyhvYmosIF9mcm9tKSkge1xuICAgICAgICBuZXdPYmogPSBfZXh0ZW5kcyh7fSwgb2JqKTtcbiAgICAgICAgaWYgKCFhbGlhcykgZGVsZXRlIG5ld09ialtfZnJvbV07XG4gICAgICAgIG5ld09ialt0b10gPSBmcm9tR2V0dGVyKG9iaik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBuZXdPYmo7XG4gICAgfSk7XG4gIH0sXG4gIG5vVW5rbm93bjogZnVuY3Rpb24gbm9Vbmtub3duKG5vQWxsb3csIG1lc3NhZ2UpIHtcbiAgICBpZiAobm9BbGxvdyA9PT0gdm9pZCAwKSB7XG4gICAgICBub0FsbG93ID0gdHJ1ZTtcbiAgICB9XG5cbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLm5vVW5rbm93bjtcbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIG5vQWxsb3cgPT09ICdzdHJpbmcnKSB7XG4gICAgICBtZXNzYWdlID0gbm9BbGxvdztcbiAgICAgIG5vQWxsb3cgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy50ZXN0KHtcbiAgICAgIG5hbWU6ICdub1Vua25vd24nLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgaWYgKHZhbHVlID09IG51bGwpIHJldHVybiB0cnVlO1xuICAgICAgICB2YXIgdW5rbm93bktleXMgPSB1bmtub3duKHRoaXMuc2NoZW1hLCB2YWx1ZSk7XG4gICAgICAgIHJldHVybiAhbm9BbGxvdyB8fCB1bmtub3duS2V5cy5sZW5ndGggPT09IDAgfHwgdGhpcy5jcmVhdGVFcnJvcih7XG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICB1bmtub3duOiB1bmtub3duS2V5cy5qb2luKCcsICcpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICBuZXh0Ll9vcHRpb25zLnN0cmlwVW5rbm93biA9IG5vQWxsb3c7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIHVua25vd246IGZ1bmN0aW9uIHVua25vd24oYWxsb3csIG1lc3NhZ2UpIHtcbiAgICBpZiAoYWxsb3cgPT09IHZvaWQgMCkge1xuICAgICAgYWxsb3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubm9Vbmtub3duO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLm5vVW5rbm93bighYWxsb3csIG1lc3NhZ2UpO1xuICB9LFxuICB0cmFuc2Zvcm1LZXlzOiBmdW5jdGlvbiB0cmFuc2Zvcm1LZXlzKGZuKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgbWFwS2V5cyhvYmosIGZ1bmN0aW9uIChfLCBrZXkpIHtcbiAgICAgICAgcmV0dXJuIGZuKGtleSk7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgY2FtZWxDYXNlOiBmdW5jdGlvbiBjYW1lbENhc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtS2V5cyhfY2FtZWxDYXNlKTtcbiAgfSxcbiAgc25ha2VDYXNlOiBmdW5jdGlvbiBzbmFrZUNhc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtS2V5cyhfc25ha2VDYXNlKTtcbiAgfSxcbiAgY29uc3RhbnRDYXNlOiBmdW5jdGlvbiBjb25zdGFudENhc2UoKSB7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtS2V5cyhmdW5jdGlvbiAoa2V5KSB7XG4gICAgICByZXR1cm4gX3NuYWtlQ2FzZShrZXkpLnRvVXBwZXJDYXNlKCk7XG4gICAgfSk7XG4gIH0sXG4gIGRlc2NyaWJlOiBmdW5jdGlvbiBkZXNjcmliZSgpIHtcbiAgICB2YXIgYmFzZSA9IE1peGVkU2NoZW1hLnByb3RvdHlwZS5kZXNjcmliZS5jYWxsKHRoaXMpO1xuICAgIGJhc2UuZmllbGRzID0gbWFwVmFsdWVzKHRoaXMuZmllbGRzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB2YWx1ZS5kZXNjcmliZSgpO1xuICAgIH0pO1xuICAgIHJldHVybiBiYXNlO1xuICB9XG59KTsiLCJpbXBvcnQgX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZVwiO1xuaW1wb3J0IF9leHRlbmRzIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9leHRlbmRzXCI7XG5cbmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDIoKSB7XG4gIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKFtcIlwiLCBcIltcIiwgXCJdXCJdKTtcblxuICBfdGVtcGxhdGVPYmplY3QyID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MigpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0KCkge1xuICB2YXIgZGF0YSA9IF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShbXCJcIiwgXCJbXCIsIFwiXVwiXSk7XG5cbiAgX3RlbXBsYXRlT2JqZWN0ID0gZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0KCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5pbXBvcnQgaW5oZXJpdHMgZnJvbSAnLi91dGlsL2luaGVyaXRzJztcbmltcG9ydCBpc0Fic2VudCBmcm9tICcuL3V0aWwvaXNBYnNlbnQnO1xuaW1wb3J0IGlzU2NoZW1hIGZyb20gJy4vdXRpbC9pc1NjaGVtYSc7XG5pbXBvcnQgbWFrZVBhdGggZnJvbSAnLi91dGlsL21ha2VQYXRoJztcbmltcG9ydCBwcmludFZhbHVlIGZyb20gJy4vdXRpbC9wcmludFZhbHVlJztcbmltcG9ydCBNaXhlZFNjaGVtYSBmcm9tICcuL21peGVkJztcbmltcG9ydCB7IGFycmF5IGFzIGxvY2FsZSB9IGZyb20gJy4vbG9jYWxlJztcbmltcG9ydCBydW5WYWxpZGF0aW9ucywgeyBwcm9wYWdhdGVFcnJvcnMgfSBmcm9tICcuL3V0aWwvcnVuVmFsaWRhdGlvbnMnO1xuZXhwb3J0IGRlZmF1bHQgQXJyYXlTY2hlbWE7XG5cbmZ1bmN0aW9uIEFycmF5U2NoZW1hKHR5cGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQXJyYXlTY2hlbWEpKSByZXR1cm4gbmV3IEFycmF5U2NoZW1hKHR5cGUpO1xuICBNaXhlZFNjaGVtYS5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnYXJyYXknXG4gIH0pOyAvLyBgdW5kZWZpbmVkYCBzcGVjaWZpY2FsbHkgbWVhbnMgdW5pbml0aWFsaXplZCwgYXMgb3Bwb3NlZCB0b1xuICAvLyBcIm5vIHN1YnR5cGVcIlxuXG4gIHRoaXMuX3N1YlR5cGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMuaW5uZXJUeXBlID0gdW5kZWZpbmVkO1xuICB0aGlzLndpdGhNdXRhdGlvbihmdW5jdGlvbiAoKSB7XG4gICAgX3RoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZXMpIHtcbiAgICAgIGlmICh0eXBlb2YgdmFsdWVzID09PSAnc3RyaW5nJykgdHJ5IHtcbiAgICAgICAgdmFsdWVzID0gSlNPTi5wYXJzZSh2YWx1ZXMpO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIHZhbHVlcyA9IG51bGw7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcy5pc1R5cGUodmFsdWVzKSA/IHZhbHVlcyA6IG51bGw7XG4gICAgfSk7XG5cbiAgICBpZiAodHlwZSkgX3RoaXMub2YodHlwZSk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhBcnJheVNjaGVtYSwgTWl4ZWRTY2hlbWEsIHtcbiAgX3R5cGVDaGVjazogZnVuY3Rpb24gX3R5cGVDaGVjayh2KSB7XG4gICAgcmV0dXJuIEFycmF5LmlzQXJyYXkodik7XG4gIH0sXG4gIF9jYXN0OiBmdW5jdGlvbiBfY2FzdChfdmFsdWUsIF9vcHRzKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICB2YXIgdmFsdWUgPSBNaXhlZFNjaGVtYS5wcm90b3R5cGUuX2Nhc3QuY2FsbCh0aGlzLCBfdmFsdWUsIF9vcHRzKTsgLy9zaG91bGQgaWdub3JlIG51bGxzIGhlcmVcblxuXG4gICAgaWYgKCF0aGlzLl90eXBlQ2hlY2sodmFsdWUpIHx8ICF0aGlzLmlubmVyVHlwZSkgcmV0dXJuIHZhbHVlO1xuICAgIHZhciBpc0NoYW5nZWQgPSBmYWxzZTtcbiAgICB2YXIgY2FzdEFycmF5ID0gdmFsdWUubWFwKGZ1bmN0aW9uICh2LCBpZHgpIHtcbiAgICAgIHZhciBjYXN0RWxlbWVudCA9IF90aGlzMi5pbm5lclR5cGUuY2FzdCh2LCBfZXh0ZW5kcyh7fSwgX29wdHMsIHtcbiAgICAgICAgcGF0aDogbWFrZVBhdGgoX3RlbXBsYXRlT2JqZWN0KCksIF9vcHRzLnBhdGgsIGlkeClcbiAgICAgIH0pKTtcblxuICAgICAgaWYgKGNhc3RFbGVtZW50ICE9PSB2KSB7XG4gICAgICAgIGlzQ2hhbmdlZCA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjYXN0RWxlbWVudDtcbiAgICB9KTtcbiAgICByZXR1cm4gaXNDaGFuZ2VkID8gY2FzdEFycmF5IDogdmFsdWU7XG4gIH0sXG4gIF92YWxpZGF0ZTogZnVuY3Rpb24gX3ZhbGlkYXRlKF92YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpczMgPSB0aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgc3luYyA9IG9wdGlvbnMuc3luYztcbiAgICB2YXIgcGF0aCA9IG9wdGlvbnMucGF0aDtcbiAgICB2YXIgaW5uZXJUeXBlID0gdGhpcy5pbm5lclR5cGU7XG5cbiAgICB2YXIgZW5kRWFybHkgPSB0aGlzLl9vcHRpb24oJ2Fib3J0RWFybHknLCBvcHRpb25zKTtcblxuICAgIHZhciByZWN1cnNpdmUgPSB0aGlzLl9vcHRpb24oJ3JlY3Vyc2l2ZScsIG9wdGlvbnMpO1xuXG4gICAgdmFyIG9yaWdpbmFsVmFsdWUgPSBvcHRpb25zLm9yaWdpbmFsVmFsdWUgIT0gbnVsbCA/IG9wdGlvbnMub3JpZ2luYWxWYWx1ZSA6IF92YWx1ZTtcbiAgICByZXR1cm4gTWl4ZWRTY2hlbWEucHJvdG90eXBlLl92YWxpZGF0ZS5jYWxsKHRoaXMsIF92YWx1ZSwgb3B0aW9ucykuY2F0Y2gocHJvcGFnYXRlRXJyb3JzKGVuZEVhcmx5LCBlcnJvcnMpKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCFyZWN1cnNpdmUgfHwgIWlubmVyVHlwZSB8fCAhX3RoaXMzLl90eXBlQ2hlY2sodmFsdWUpKSB7XG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB0aHJvdyBlcnJvcnNbMF07XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgb3JpZ2luYWxWYWx1ZSA9IG9yaWdpbmFsVmFsdWUgfHwgdmFsdWU7XG4gICAgICB2YXIgdmFsaWRhdGlvbnMgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKGl0ZW0sIGlkeCkge1xuICAgICAgICB2YXIgcGF0aCA9IG1ha2VQYXRoKF90ZW1wbGF0ZU9iamVjdDIoKSwgb3B0aW9ucy5wYXRoLCBpZHgpOyAvLyBvYmplY3QuX3ZhbGlkYXRlIG5vdGUgZm9yIGlzU3RyaWN0IGV4cGxhbmF0aW9uXG5cbiAgICAgICAgdmFyIGlubmVyT3B0aW9ucyA9IF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICAgICAgcGF0aDogcGF0aCxcbiAgICAgICAgICBzdHJpY3Q6IHRydWUsXG4gICAgICAgICAgcGFyZW50OiB2YWx1ZSxcbiAgICAgICAgICBpbmRleDogaWR4LFxuICAgICAgICAgIG9yaWdpbmFsVmFsdWU6IG9yaWdpbmFsVmFsdWVbaWR4XVxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaW5uZXJUeXBlLnZhbGlkYXRlKSByZXR1cm4gaW5uZXJUeXBlLnZhbGlkYXRlKGl0ZW0sIGlubmVyT3B0aW9ucyk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfSk7XG4gICAgICByZXR1cm4gcnVuVmFsaWRhdGlvbnMoe1xuICAgICAgICBzeW5jOiBzeW5jLFxuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVycm9yczogZXJyb3JzLFxuICAgICAgICBlbmRFYXJseTogZW5kRWFybHksXG4gICAgICAgIHZhbGlkYXRpb25zOiB2YWxpZGF0aW9uc1xuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIF9pc1ByZXNlbnQ6IGZ1bmN0aW9uIF9pc1ByZXNlbnQodmFsdWUpIHtcbiAgICByZXR1cm4gTWl4ZWRTY2hlbWEucHJvdG90eXBlLl9pc1ByZXNlbnQuY2FsbCh0aGlzLCB2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbiAgfSxcbiAgb2Y6IGZ1bmN0aW9uIG9mKHNjaGVtYSkge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIGlmIChzY2hlbWEgIT09IGZhbHNlICYmICFpc1NjaGVtYShzY2hlbWEpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdgYXJyYXkub2YoKWAgc3ViLXNjaGVtYSBtdXN0IGJlIGEgdmFsaWQgeXVwIHNjaGVtYSwgb3IgYGZhbHNlYCB0byBuZWdhdGUgYSBjdXJyZW50IHN1Yi1zY2hlbWEuICcgKyAnbm90OiAnICsgcHJpbnRWYWx1ZShzY2hlbWEpKTtcbiAgICBuZXh0Ll9zdWJUeXBlID0gc2NoZW1hO1xuICAgIG5leHQuaW5uZXJUeXBlID0gc2NoZW1hO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBtaW46IGZ1bmN0aW9uIG1pbihfbWluLCBtZXNzYWdlKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgbG9jYWxlLm1pbjtcbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtaW46IF9taW5cbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoID49IHRoaXMucmVzb2x2ZShfbWluKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWF4OiBmdW5jdGlvbiBtYXgoX21heCwgbWVzc2FnZSkge1xuICAgIG1lc3NhZ2UgPSBtZXNzYWdlIHx8IGxvY2FsZS5tYXg7XG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA8PSB0aGlzLnJlc29sdmUoX21heCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIGVuc3VyZTogZnVuY3Rpb24gZW5zdXJlKCkge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdChmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gW107XG4gICAgfSkudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWwsIG9yaWdpbmFsKSB7XG4gICAgICAvLyBXZSBkb24ndCB3YW50IHRvIHJldHVybiBgbnVsbGAgZm9yIG51bGxhYmxlIHNjaGVtYVxuICAgICAgaWYgKF90aGlzNC5fdHlwZUNoZWNrKHZhbCkpIHJldHVybiB2YWw7XG4gICAgICByZXR1cm4gb3JpZ2luYWwgPT0gbnVsbCA/IFtdIDogW10uY29uY2F0KG9yaWdpbmFsKTtcbiAgICB9KTtcbiAgfSxcbiAgY29tcGFjdDogZnVuY3Rpb24gY29tcGFjdChyZWplY3Rvcikge1xuICAgIHZhciByZWplY3QgPSAhcmVqZWN0b3IgPyBmdW5jdGlvbiAodikge1xuICAgICAgcmV0dXJuICEhdjtcbiAgICB9IDogZnVuY3Rpb24gKHYsIGksIGEpIHtcbiAgICAgIHJldHVybiAhcmVqZWN0b3IodiwgaSwgYSk7XG4gICAgfTtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgcmV0dXJuIHZhbHVlcyAhPSBudWxsID8gdmFsdWVzLmZpbHRlcihyZWplY3QpIDogdmFsdWVzO1xuICAgIH0pO1xuICB9LFxuICBkZXNjcmliZTogZnVuY3Rpb24gZGVzY3JpYmUoKSB7XG4gICAgdmFyIGJhc2UgPSBNaXhlZFNjaGVtYS5wcm90b3R5cGUuZGVzY3JpYmUuY2FsbCh0aGlzKTtcbiAgICBpZiAodGhpcy5pbm5lclR5cGUpIGJhc2UuaW5uZXJUeXBlID0gdGhpcy5pbm5lclR5cGUuZGVzY3JpYmUoKTtcbiAgICByZXR1cm4gYmFzZTtcbiAgfVxufSk7IiwiaW1wb3J0IGlzU2NoZW1hIGZyb20gJy4vdXRpbC9pc1NjaGVtYSc7XG5cbnZhciBMYXp5ID0gLyojX19QVVJFX18qL2Z1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gTGF6eShtYXBGbikge1xuICAgIHRoaXMuX3Jlc29sdmUgPSBmdW5jdGlvbiAodmFsdWUsIG9wdGlvbnMpIHtcbiAgICAgIHZhciBzY2hlbWEgPSBtYXBGbih2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICBpZiAoIWlzU2NoZW1hKHNjaGVtYSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2xhenkoKSBmdW5jdGlvbnMgbXVzdCByZXR1cm4gYSB2YWxpZCBzY2hlbWEnKTtcbiAgICAgIHJldHVybiBzY2hlbWEucmVzb2x2ZShvcHRpb25zKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIF9wcm90byA9IExhenkucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUob3B0aW9ucy52YWx1ZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLmNhc3QgPSBmdW5jdGlvbiBjYXN0KHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLmNhc3QodmFsdWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by52YWxpZGF0ZSA9IGZ1bmN0aW9uIHZhbGlkYXRlKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLnZhbGlkYXRlKHZhbHVlLCBvcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8udmFsaWRhdGVTeW5jID0gZnVuY3Rpb24gdmFsaWRhdGVTeW5jKHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLnZhbGlkYXRlU3luYyh2YWx1ZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLnZhbGlkYXRlQXQgPSBmdW5jdGlvbiB2YWxpZGF0ZUF0KHBhdGgsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLnZhbGlkYXRlQXQocGF0aCwgdmFsdWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by52YWxpZGF0ZVN5bmNBdCA9IGZ1bmN0aW9uIHZhbGlkYXRlU3luY0F0KHBhdGgsIHZhbHVlLCBvcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMuX3Jlc29sdmUodmFsdWUsIG9wdGlvbnMpLnZhbGlkYXRlU3luY0F0KHBhdGgsIHZhbHVlLCBvcHRpb25zKTtcbiAgfTtcblxuICByZXR1cm4gTGF6eTtcbn0oKTtcblxuTGF6eS5wcm90b3R5cGUuX19pc1l1cFNjaGVtYV9fID0gdHJ1ZTtcbmV4cG9ydCBkZWZhdWx0IExhenk7IiwiXG4vLyDQndCw0YXQvtC00LjRgtGB0Y8g0LvQuCDRgdCw0LnRgiDQsiDRgNC10LbQuNC80LUg0YDQsNC30YDQsNCx0L7RgtC60LhcbmNvbnN0IGlzRGV2ZWxvcG1lbnQgPSBsb2NhdGlvbi5ob3N0LnN0YXJ0c1dpdGgoJ2xvY2FsaG9zdCcpXG5cbmNvbnN0IHNlcnZlck9yaWdpbiA9IGlzRGV2ZWxvcG1lbnRcbiAgICA/IGxvY2F0aW9uLnByb3RvY29sICsgJy8vJyArIGxvY2F0aW9uLmhvc3RuYW1lICsgJzozMDAwJ1xuICAgIDogbG9jYXRpb24ucHJvdG9jb2wgKyBsb2NhdGlvbi5ob3N0XG5cbmV4cG9ydCBkZWZhdWx0IHtcbiAgICAvLyDQndCw0YXQvtC00LjRgtGB0Y8g0LvQuCDRgdCw0LnRgiDQsiDRgNC10LbQuNC80LUg0YDQsNC30YDQsNCx0L7RgtC60LhcbiAgICBpc0RldmVsb3BtZW50LFxuICAgIC8vINCQ0LTRgNC10YEg0YHQsNC50YLQsFxuICAgIHNlcnZlck9yaWdpblxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBzIGZyb20gJy4vY3NzL2ZpZWxkc0RldmlkZXJXcmFwcGVyLnNjc3MnXG5cblxuZnVuY3Rpb24gRmllbGRzRGl2aWRlcldyYXBwZXIocHJvcHMpIHtcbiAgICBcbiAgICBjb25zdCB7XG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBpbmRlbnRcbiAgICB9ID0gcHJvcHM7XG4gICAgXG4gICAgbGV0IGNscyA9ICcnXG4gICAgaWYgKGluZGVudCAqIDEgPT09IDIpIGNscyArPSBzLmluZGVudF8yXG4gICAgaWYgKGluZGVudCAqIDEgPT09IDMpIGNscyArPSBzLmluZGVudF8zXG4gICAgXG4gICAgcmV0dXJuIDxkaXYgY2xhc3NOYW1lPXtjbHN9PntjaGlsZHJlbn08L2Rpdj5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRmllbGRzRGl2aWRlcldyYXBwZXIiLCJpbXBvcnQgRmllbGRzRGl2aWRlcldyYXBwZXIgZnJvbSAnLi9maWVsZHNEaXZpZGVyV3JhcHBlcidcbmV4cG9ydCBkZWZhdWx0IEZpZWxkc0RpdmlkZXJXcmFwcGVyIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHsgRm9ybWlrLCBGb3JtLCB1c2VGaWVsZCB9IGZyb20gJ2Zvcm1payc7XG5pbXBvcnQgRXJyb3IgZnJvbSBcIi4uL2Vycm9yXCI7XG5pbXBvcnQgJy4vY3NzL3RleHRJbnB1dC5zY3NzJ1xuXG5cbmZ1bmN0aW9uIFRleHRJbnB1dCh7IGxhYmVsLCAuLi5wcm9wcyB9KSB7XG4gICAgXG4gICAgY29uc3QgW2ZpZWxkLCBtZXRhXSA9IHVzZUZpZWxkKHByb3BzKTtcbiAgICBcbiAgICBsZXQgW2xhYmVsRWwsIGlkXSA9IGNyZWF0ZUxhYmVsKGxhYmVsKTtcbiAgICBcbiAgICBsZXQgY2xzID0gJ3RleHQtaW5wdXQnXG4gICAgaWYocHJvcHMudHlwZSA9PT0gJ3NlYXJjaCcpIGNscyArPSAnIHRleHQtaW5wdXQtLXNlYXJjaCdcbiAgICBcbiAgICBcbiAgICByZXR1cm4gPD5cbiAgICAgICAge2xhYmVsRWx9XG4gICAgICAgIDxpbnB1dFxuICAgICAgICAgICAgY2xhc3NOYW1lPXtjbHN9XG4gICAgICAgICAgICB7Li4uZmllbGR9XG4gICAgICAgICAgICB0eXBlPXtwcm9wcy50eXBlfVxuICAgICAgICAgICAgaWQ9e2lkfVxuICAgICAgICAgICAgcGxhY2Vob2xkZXI9e3Byb3BzLnBsYWNlaG9sZGVyfVxuICAgICAgICAgICAgYXV0b0NvbXBsZXRlPXtwcm9wcy5hdXRvQ29tcGxldGV9XG4gICAgICAgICAgICBkaXNhYmxlZD17cHJvcHMuZGlzYWJsZWR9XG4gICAgICAgIC8+XG4gICAgICAgIHttZXRhLnRvdWNoZWQgJiYgbWV0YS5lcnJvclxuICAgICAgICAgICAgPyA8RXJyb3IgdGV4dD17bWV0YS5lcnJvcn0gaW5kZW50PXsxfSAvPlxuICAgICAgICAgICAgOiBudWxsfVxuICAgIDwvPlxufVxuXG5mdW5jdGlvbiBjcmVhdGVMYWJlbChsYWJlbCkge1xuICAgIGlmKCFsYWJlbCkgcmV0dXJuIFtudWxsLCB1bmRlZmluZWRdXG4gICAgXG4gICAgY29uc3QgcmFuZG9tU3RyID0gJ2tleS0nICsgTWF0aC5yb3VuZCggKE1hdGgucmFuZG9tKCkgKiAxMDAwMCkgKVxuICAgIFxuICAgIGNvbnN0IGxhYmVsRWwgPSA8bGFiZWwgY2xhc3NOYW1lPSdpbnB1dC1sYWJlbCcgaHRtbEZvcj17cmFuZG9tU3RyfT57bGFiZWx9PC9sYWJlbD5cbiAgICBcbiAgICByZXR1cm4gW2xhYmVsRWwsIHJhbmRvbVN0cl1cbn1cblxuXG5leHBvcnQgZGVmYXVsdCBUZXh0SW5wdXQiLCJpbXBvcnQgVGV4dElucHV0IGZyb20gJy4vdGV4dElucHV0J1xuZXhwb3J0IGRlZmF1bHQgVGV4dElucHV0IiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IHtcbiAgRm9ybWlrUHJvcHMsXG4gIEdlbmVyaWNGaWVsZEhUTUxBdHRyaWJ1dGVzLFxuICBGaWVsZE1ldGFQcm9wcyxcbiAgRmllbGRIZWxwZXJQcm9wcyxcbiAgRmllbGRJbnB1dFByb3BzLFxuICBGaWVsZFZhbGlkYXRvcixcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyB1c2VGb3JtaWtDb250ZXh0IH0gZnJvbSAnLi9Gb3JtaWtDb250ZXh0JztcbmltcG9ydCB7IGlzRnVuY3Rpb24sIGlzRW1wdHlDaGlsZHJlbiwgaXNPYmplY3QgfSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS13YXJuaW5nJztcblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZFByb3BzPFYgPSBhbnksIEZvcm1WYWx1ZXMgPSBhbnk+IHtcbiAgZmllbGQ6IEZpZWxkSW5wdXRQcm9wczxWPjtcbiAgZm9ybTogRm9ybWlrUHJvcHM8Rm9ybVZhbHVlcz47IC8vIGlmIHBwbCB3YW50IHRvIHJlc3RyaWN0IHRoaXMgZm9yIGEgZ2l2ZW4gZm9ybSwgbGV0IHRoZW0uXG4gIG1ldGE6IEZpZWxkTWV0YVByb3BzPFY+O1xufVxuXG5leHBvcnQgaW50ZXJmYWNlIEZpZWxkQ29uZmlnPFYgPSBhbnk+IHtcbiAgLyoqXG4gICAqIEZpZWxkIGNvbXBvbmVudCB0byByZW5kZXIuIENhbiBlaXRoZXIgYmUgYSBzdHJpbmcgbGlrZSAnc2VsZWN0JyBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGNvbXBvbmVudD86XG4gICAgfCBzdHJpbmdcbiAgICB8IFJlYWN0LkNvbXBvbmVudFR5cGU8RmllbGRQcm9wczxWPj5cbiAgICB8IFJlYWN0LkNvbXBvbmVudFR5cGVcbiAgICB8IFJlYWN0LkZvcndhcmRSZWZFeG90aWNDb21wb25lbnQ8YW55PjtcblxuICAvKipcbiAgICogQ29tcG9uZW50IHRvIHJlbmRlci4gQ2FuIGVpdGhlciBiZSBhIHN0cmluZyBlLmcuICdzZWxlY3QnLCAnaW5wdXQnLCBvciAndGV4dGFyZWEnLCBvciBhIGNvbXBvbmVudC5cbiAgICovXG4gIGFzPzpcbiAgICB8IFJlYWN0LkNvbXBvbmVudFR5cGU8RmllbGRQcm9wczxWPlsnZmllbGQnXT5cbiAgICB8IHN0cmluZ1xuICAgIHwgUmVhY3QuQ29tcG9uZW50VHlwZVxuICAgIHwgUmVhY3QuRm9yd2FyZFJlZkV4b3RpY0NvbXBvbmVudDxhbnk+O1xuXG4gIC8qKlxuICAgKiBSZW5kZXIgcHJvcCAod29ya3MgbGlrZSBSZWFjdCByb3V0ZXIncyA8Um91dGUgcmVuZGVyPXtwcm9wcyA9Pn0gLz4pXG4gICAqIEBkZXByZWNhdGVkXG4gICAqL1xuICByZW5kZXI/OiAocHJvcHM6IEZpZWxkUHJvcHM8Vj4pID0+IFJlYWN0LlJlYWN0Tm9kZTtcblxuICAvKipcbiAgICogQ2hpbGRyZW4gcmVuZGVyIGZ1bmN0aW9uIDxGaWVsZCBuYW1lPntwcm9wcyA9PiAuLi59PC9GaWVsZD4pXG4gICAqL1xuICBjaGlsZHJlbj86ICgocHJvcHM6IEZpZWxkUHJvcHM8Vj4pID0+IFJlYWN0LlJlYWN0Tm9kZSkgfCBSZWFjdC5SZWFjdE5vZGU7XG5cbiAgLyoqXG4gICAqIFZhbGlkYXRlIGEgc2luZ2xlIGZpZWxkIHZhbHVlIGluZGVwZW5kZW50bHlcbiAgICovXG4gIHZhbGlkYXRlPzogRmllbGRWYWxpZGF0b3I7XG5cbiAgLyoqXG4gICAqIEZpZWxkIG5hbWVcbiAgICovXG4gIG5hbWU6IHN0cmluZztcblxuICAvKiogSFRNTCBpbnB1dCB0eXBlICovXG4gIHR5cGU/OiBzdHJpbmc7XG5cbiAgLyoqIEZpZWxkIHZhbHVlICovXG4gIHZhbHVlPzogYW55O1xuXG4gIC8qKiBJbm5lciByZWYgKi9cbiAgaW5uZXJSZWY/OiAoaW5zdGFuY2U6IGFueSkgPT4gdm9pZDtcbn1cblxuZXhwb3J0IHR5cGUgRmllbGRBdHRyaWJ1dGVzPFQ+ID0gR2VuZXJpY0ZpZWxkSFRNTEF0dHJpYnV0ZXMgJlxuICBGaWVsZENvbmZpZzxUPiAmXG4gIFQgJiB7IG5hbWU6IHN0cmluZyB9O1xuXG5leHBvcnQgdHlwZSBGaWVsZEhvb2tDb25maWc8VD4gPSBHZW5lcmljRmllbGRIVE1MQXR0cmlidXRlcyAmIEZpZWxkQ29uZmlnPFQ+O1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRmllbGQ8VmFsID0gYW55PihcbiAgcHJvcHNPckZpZWxkTmFtZTogc3RyaW5nIHwgRmllbGRIb29rQ29uZmlnPFZhbD5cbik6IFtGaWVsZElucHV0UHJvcHM8VmFsPiwgRmllbGRNZXRhUHJvcHM8VmFsPiwgRmllbGRIZWxwZXJQcm9wczxWYWw+XSB7XG4gIGNvbnN0IGZvcm1payA9IHVzZUZvcm1pa0NvbnRleHQoKTtcbiAgY29uc3Qge1xuICAgIGdldEZpZWxkUHJvcHMsXG4gICAgZ2V0RmllbGRNZXRhLFxuICAgIGdldEZpZWxkSGVscGVycyxcbiAgICByZWdpc3RlckZpZWxkLFxuICAgIHVucmVnaXN0ZXJGaWVsZCxcbiAgfSA9IGZvcm1paztcblxuICBjb25zdCBpc0FuT2JqZWN0ID0gaXNPYmplY3QocHJvcHNPckZpZWxkTmFtZSk7XG5cbiAgLy8gTm9ybWFsaXplIHByb3BzT3JGaWVsZE5hbWUgdG8gRmllbGRIb29rQ29uZmlnPFZhbD5cbiAgY29uc3QgcHJvcHM6IEZpZWxkSG9va0NvbmZpZzxWYWw+ID0gaXNBbk9iamVjdFxuICAgID8gKHByb3BzT3JGaWVsZE5hbWUgYXMgRmllbGRIb29rQ29uZmlnPFZhbD4pXG4gICAgOiB7IG5hbWU6IHByb3BzT3JGaWVsZE5hbWUgYXMgc3RyaW5nIH07XG5cbiAgY29uc3QgeyBuYW1lOiBmaWVsZE5hbWUsIHZhbGlkYXRlOiB2YWxpZGF0ZUZuIH0gPSBwcm9wcztcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChmaWVsZE5hbWUpIHtcbiAgICAgIHJlZ2lzdGVyRmllbGQoZmllbGROYW1lLCB7XG4gICAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZUZuLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICBpZiAoZmllbGROYW1lKSB7XG4gICAgICAgIHVucmVnaXN0ZXJGaWVsZChmaWVsZE5hbWUpO1xuICAgICAgfVxuICAgIH07XG4gIH0sIFtyZWdpc3RlckZpZWxkLCB1bnJlZ2lzdGVyRmllbGQsIGZpZWxkTmFtZSwgdmFsaWRhdGVGbl0pO1xuXG4gIGlmIChfX0RFVl9fKSB7XG4gICAgaW52YXJpYW50KFxuICAgICAgZm9ybWlrLFxuICAgICAgJ3VzZUZpZWxkKCkgLyA8RmllbGQgLz4gbXVzdCBiZSB1c2VkIHVuZGVybmVhdGggYSA8Rm9ybWlrPiBjb21wb25lbnQgb3Igd2l0aEZvcm1paygpIGhpZ2hlciBvcmRlciBjb21wb25lbnQnXG4gICAgKTtcbiAgfVxuXG4gIGludmFyaWFudChcbiAgICBmaWVsZE5hbWUsXG4gICAgJ0ludmFsaWQgZmllbGQgbmFtZS4gRWl0aGVyIHBhc3MgYHVzZUZpZWxkYCBhIHN0cmluZyBvciBhbiBvYmplY3QgY29udGFpbmluZyBhIGBuYW1lYCBrZXkuJ1xuICApO1xuXG4gIHJldHVybiBbXG4gICAgZ2V0RmllbGRQcm9wcyhwcm9wcyksXG4gICAgZ2V0RmllbGRNZXRhKGZpZWxkTmFtZSksXG4gICAgZ2V0RmllbGRIZWxwZXJzKGZpZWxkTmFtZSksXG4gIF07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBGaWVsZCh7XG4gIHZhbGlkYXRlLFxuICBuYW1lLFxuICByZW5kZXIsXG4gIGNoaWxkcmVuLFxuICBhczogaXMsIC8vIGBhc2AgaXMgcmVzZXJ2ZWQgaW4gdHlwZXNjcmlwdCBsb2xcbiAgY29tcG9uZW50LFxuICAuLi5wcm9wc1xufTogRmllbGRBdHRyaWJ1dGVzPGFueT4pIHtcbiAgY29uc3Qge1xuICAgIHZhbGlkYXRlOiBfdmFsaWRhdGUsXG4gICAgdmFsaWRhdGlvblNjaGVtYTogX3ZhbGlkYXRpb25TY2hlbWEsXG5cbiAgICAuLi5mb3JtaWtcbiAgfSA9IHVzZUZvcm1pa0NvbnRleHQoKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChfX0RFVl9fKSB7XG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgICFyZW5kZXIsXG4gICAgICAgIGA8RmllbGQgcmVuZGVyPiBoYXMgYmVlbiBkZXByZWNhdGVkIGFuZCB3aWxsIGJlIHJlbW92ZWQgaW4gZnV0dXJlIHZlcnNpb25zIG9mIEZvcm1pay4gUGxlYXNlIHVzZSBhIGNoaWxkIGNhbGxiYWNrIGZ1bmN0aW9uIGluc3RlYWQuIFRvIGdldCByaWQgb2YgdGhpcyB3YXJuaW5nLCByZXBsYWNlIDxGaWVsZCBuYW1lPVwiJHtuYW1lfVwiIHJlbmRlcj17KHtmaWVsZCwgZm9ybX0pID0+IC4uLn0gLz4gd2l0aCA8RmllbGQgbmFtZT1cIiR7bmFtZX1cIj57KHtmaWVsZCwgZm9ybSwgbWV0YX0pID0+IC4uLn08L0ZpZWxkPmBcbiAgICAgICk7XG5cbiAgICAgIGludmFyaWFudChcbiAgICAgICAgIShpcyAmJiBjaGlsZHJlbiAmJiBpc0Z1bmN0aW9uKGNoaWxkcmVuKSksXG4gICAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZpZWxkIGFzPiBhbmQgPEZpZWxkIGNoaWxkcmVuPiBhcyBhIGZ1bmN0aW9uIGluIHRoZSBzYW1lIDxGaWVsZD4gY29tcG9uZW50OyA8RmllbGQgYXM+IHdpbGwgYmUgaWdub3JlZC4nXG4gICAgICApO1xuXG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgICEoY29tcG9uZW50ICYmIGNoaWxkcmVuICYmIGlzRnVuY3Rpb24oY2hpbGRyZW4pKSxcbiAgICAgICAgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmllbGQgY29tcG9uZW50PiBhbmQgPEZpZWxkIGNoaWxkcmVuPiBhcyBhIGZ1bmN0aW9uIGluIHRoZSBzYW1lIDxGaWVsZD4gY29tcG9uZW50OyA8RmllbGQgY29tcG9uZW50PiB3aWxsIGJlIGlnbm9yZWQuJ1xuICAgICAgKTtcblxuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhKHJlbmRlciAmJiBjaGlsZHJlbiAmJiAhaXNFbXB0eUNoaWxkcmVuKGNoaWxkcmVuKSksXG4gICAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZpZWxkIHJlbmRlcj4gYW5kIDxGaWVsZCBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgPEZpZWxkPiBjb21wb25lbnQ7IDxGaWVsZCBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJ1xuICAgICAgKTtcbiAgICB9XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG4gIH0sIFtdKTtcblxuICAvLyBSZWdpc3RlciBmaWVsZCBhbmQgZmllbGQtbGV2ZWwgdmFsaWRhdGlvbiB3aXRoIHBhcmVudCA8Rm9ybWlrPlxuICBjb25zdCB7IHJlZ2lzdGVyRmllbGQsIHVucmVnaXN0ZXJGaWVsZCB9ID0gZm9ybWlrO1xuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIHJlZ2lzdGVyRmllbGQobmFtZSwge1xuICAgICAgdmFsaWRhdGU6IHZhbGlkYXRlLFxuICAgIH0pO1xuICAgIHJldHVybiAoKSA9PiB7XG4gICAgICB1bnJlZ2lzdGVyRmllbGQobmFtZSk7XG4gICAgfTtcbiAgfSwgW3JlZ2lzdGVyRmllbGQsIHVucmVnaXN0ZXJGaWVsZCwgbmFtZSwgdmFsaWRhdGVdKTtcbiAgY29uc3QgZmllbGQgPSBmb3JtaWsuZ2V0RmllbGRQcm9wcyh7IG5hbWUsIC4uLnByb3BzIH0pO1xuICBjb25zdCBtZXRhID0gZm9ybWlrLmdldEZpZWxkTWV0YShuYW1lKTtcbiAgY29uc3QgbGVnYWN5QmFnID0geyBmaWVsZCwgZm9ybTogZm9ybWlrIH07XG5cbiAgaWYgKHJlbmRlcikge1xuICAgIHJldHVybiByZW5kZXIoeyAuLi5sZWdhY3lCYWcsIG1ldGEgfSk7XG4gIH1cblxuICBpZiAoaXNGdW5jdGlvbihjaGlsZHJlbikpIHtcbiAgICByZXR1cm4gY2hpbGRyZW4oeyAuLi5sZWdhY3lCYWcsIG1ldGEgfSk7XG4gIH1cblxuICBpZiAoY29tcG9uZW50KSB7XG4gICAgLy8gVGhpcyBiZWhhdmlvciBpcyBiYWNrd2FyZHMgY29tcGF0IHdpdGggZWFybGllciBGb3JtaWsgMC45IHRvIDEueFxuICAgIGlmICh0eXBlb2YgY29tcG9uZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgeyBpbm5lclJlZiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgY29tcG9uZW50LFxuICAgICAgICB7IHJlZjogaW5uZXJSZWYsIC4uLmZpZWxkLCAuLi5yZXN0IH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBXZSBkb24ndCBwYXNzIGBtZXRhYCBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgY29tcG9uZW50LFxuICAgICAgeyBmaWVsZCwgZm9ybTogZm9ybWlrLCAuLi5wcm9wcyB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9XG5cbiAgLy8gZGVmYXVsdCB0byBpbnB1dCBoZXJlIHNvIHdlIGNhbiBjaGVjayBmb3IgYm90aCBgYXNgIGFuZCBgY2hpbGRyZW5gIGFib3ZlXG4gIGNvbnN0IGFzRWxlbWVudCA9IGlzIHx8ICdpbnB1dCc7XG5cbiAgaWYgKHR5cGVvZiBhc0VsZW1lbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgY29uc3QgeyBpbm5lclJlZiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICBhc0VsZW1lbnQsXG4gICAgICB7IHJlZjogaW5uZXJSZWYsIC4uLmZpZWxkLCAuLi5yZXN0IH0sXG4gICAgICBjaGlsZHJlblxuICAgICk7XG4gIH1cblxuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChhc0VsZW1lbnQsIHsgLi4uZmllbGQsIC4uLnByb3BzIH0sIGNoaWxkcmVuKTtcbn1cbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCAqIGFzIFl1cCBmcm9tIFwieXVwXCI7XG5pbXBvcnQgYnJvd3NlckNvbmZpZyBmcm9tICcuLi8uLi8uLi8uLi9icm93c2VyQ29uZmlnJ1xuaW1wb3J0IHtGb3JtfSBmcm9tIFwiZm9ybWlrXCI7XG5pbXBvcnQgRmllbGRzRGl2aWRlcldyYXBwZXIgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZm9ybUNvbnRhaW5lcnMvZmllbGRzRGl2aWRlcldyYXBwZXJcIjtcbmltcG9ydCBUZXh0SW5wdXQgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL3RleHRJbnB1dFwiO1xuaW1wb3J0IEJ1dHRvbiBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9mb3JtRWxlbWVudHMvYnV0dG9uXCI7XG5pbXBvcnQge3NldFVzZXJ9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS9hY3Rpb25zXCI7XG5cblxuLy8g0J3QsNGH0LDQu9GM0L3Ri9C1INC30L3QsNGH0LXQvdC40Y8g0L/QvtC70LXQuSDRhNC+0YDQvNGLXG5leHBvcnQgY29uc3QgaW5pdGlhbFZhbHVlcyA9IHtcbiAgICBlbWFpbDogJycsXG4gICAgcGFzc3dvcmQ6ICcnXG59XG5cbi8vINCf0YDQvtCy0LXRgNC60LAg0L/QvtC70LXQuSDRhNC+0YDQvNGLXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvblNjaGVtYSA9IFl1cC5vYmplY3Qoe1xuICAgIGVtYWlsOiBZdXAuc3RyaW5nKClcbiAgICAgICAgLnJlcXVpcmVkKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkJylcbiAgICAgICAgLmVtYWlsKCdJbnZhbGlkIGVtYWlsIGFkZHJlc3MnKSxcbiAgICBwYXNzd29yZDogWXVwLnN0cmluZygpXG4gICAgICAgIC5yZXF1aXJlZCgnVGhpcyBmaWVsZCBpcyByZXF1aXJlZCcpXG4gICAgICAgIC5taW4oNCwgJ011c3QgYmUgNCBjaGFyYWN0ZXJzIG9yIG1vcmUnKVxufSlcblxuXG4vKipcbiAqINCk0YPQvdC60YbQuNGPINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC+0YLRgNC40YHQvtCy0YvQstCw0LXQvNGD0Y4g0YTQvtGA0LzRg1xuICogQHBhcmFtIHtPYmplY3R9IGZvcm1payDigJQg0L7QsdGK0LXQutGCINGBINGB0L4g0YHQstC+0LnRgdGC0LLQsNC80Lgg0Lgg0LzQtdGC0L7QtNCw0LzQuCDQstC+0LfQsNGA0LDRidCw0LXQvNGL0LzQuCDQsdC40LHQu9C40L7RgtC10LrQvtC5IEZvcm1pa1xuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0U2VydmVyRXJyIOKAlCDRhNGD0L3QutGG0LjRjyDQv9C+0LrQsNC30YvQstCw0Y7RidCw0Y8g0Lgg0YHQutGA0YvQstCw0Y7RidCw0Y8g0YLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0L7RgiDRgdC10YDQstC10YDQsC5cbiAqINCSINGN0YLQvtC5INGE0YPQvdC60YbQuNC4INC+0L3QsCDQv9C+0YHRgtC+0Y/QvdC90L4g0LHRg9C00LXRgiDQt9Cw0L/Rg9GB0LrQsNGC0YzRgdGPINCyINC30L3QsNGH0LXQvdC40LggbnVsbFxuICog0YfRgtC+0LHRiyDQv9C+0YHQu9C1INC70Y7QsdC+0LPQviDQuNC30LzQtdC90LXQvdC40Y8g0YTQvtGA0LzRiyDRgtC10LrRgdGCINC+0YjQuNCx0LrQuCDRgdC10YDQstC10YDQsCDQsdGLINGB0LrRgNGL0LLQsNC70YHRjy5cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRm9ybShmb3JtaWssIHNldFNlcnZlckVycikge1xuICAgIFxuICAgIC8vINCV0YHQu9C4INGE0L7RgNC80YMg0L7RgtC/0YDQsNCy0LjQu9C4LCDRgtC+INC30LDQsdC70L7QutC40YDQvtCy0LDRgtGMINC/0L7Qu9GPINCy0LLQvtC00LBcbiAgICBsZXQgaXNEaXNhYmxlZCA9IGZvcm1pay5pc1N1Ym1pdHRpbmdcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybSBvbkNoYW5nZT17KCkgPT4gc2V0U2VydmVyRXJyKG51bGwpfT5cbiAgICAgICAgICAgIDxGaWVsZHNEaXZpZGVyV3JhcHBlciBpbmRlbnQ9JzInPlxuICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgbGFiZWw9J0VtYWlsJyB0eXBlPSdlbWFpbCcgbmFtZT0nZW1haWwnIGRpc2FibGVkPXtpc0Rpc2FibGVkfSBhdXRvQ29tcGxldGU9XCJlbWFpbFwiIC8+XG4gICAgICAgICAgICA8L0ZpZWxkc0RpdmlkZXJXcmFwcGVyPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8RmllbGRzRGl2aWRlcldyYXBwZXIgaW5kZW50PScyJz5cbiAgICAgICAgICAgICAgICA8VGV4dElucHV0IGxhYmVsPSdQYXNzd29yZCcgdHlwZT0ncGFzc3dvcmQnIG5hbWU9J3Bhc3N3b3JkJyBkaXNhYmxlZD17aXNEaXNhYmxlZH0gYXV0b0NvbXBsZXRlPVwiY3VycmVudC1wYXNzd29yZFwiIC8+XG4gICAgICAgICAgICA8L0ZpZWxkc0RpdmlkZXJXcmFwcGVyPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8U3VibWl0QnRuIGZvcm1paz17Zm9ybWlrfSAvPlxuICAgICAgICA8L0Zvcm0+XG4gICAgKVxufVxuXG4vKipcbiAqINCk0YPQvdC60YbQuNGPINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC60L3QvtC/0LrRgyDQvtGC0L/RgNCw0LLQutC4INGE0L7RgNC80YtcbiAqIEBwYXJhbSB7T2JqZWN0fSBmb3JtaWsg4oCUINC+0LHRitC10LrRgiDRgSDRgdC+INGB0LLQvtC50YHRgtCy0LDQvNC4INC4INC80LXRgtC+0LTQsNC80Lgg0LLQvtC30LDRgNCw0YnQsNC10LzRi9C80Lgg0LHQuNCx0LvQuNC+0YLQtdC60L7QuSBGb3JtaWtcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBTdWJtaXRCdG4oe2Zvcm1pa30pIHtcbiAgICBcbiAgICAvLyDQkNGC0YDQuNCx0YPRgtGLINC60L3QvtC/0LrQuFxuICAgIGNvbnN0IGF0dHJzID0ge1xuICAgICAgICB0ZXh0OiAnU3VibWl0JyxcbiAgICAgICAgdHlwZTogJ3N1Ym1pdCdcbiAgICB9XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0LIg0YTQvtGA0LzQtSDQtdGB0YLRjCDQvtGI0LjQsdC60Lgg0LjQu9C4XG4gICAgLy8g0YTQvtGA0LzRgyDQtdGJ0LUg0L3QtSDQt9Cw0L/QvtC70L3Rj9C70Lgg0LjQu9C4XG4gICAgLy8g0YTQvtGA0LzRgyDRg9C20LUg0L7RgtC/0YDQsNCy0LjQu9C4LFxuICAgIC8vINGC0L4g0LHQu9C+0LrQuNGA0L7QstCw0YLRjCDQutC90L7Qv9C60YMg0L7RgtC/0YDQsNCy0LrQuFxuICAgIGlmKCFmb3JtaWsuaXNWYWxpZCB8fCAhZm9ybWlrLmRpcnR5IHx8IGZvcm1pay5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgYXR0cnMuZGlzYWJsZWQgPSB0cnVlXG4gICAgfVxuICAgIFxuICAgIC8vINCV0YHQu9C4INGE0L7RgNC80YMg0L7RgtC/0YDQsNCy0LjQu9C4LCDRgtC+INC/0L7QutCw0LfQsNGC0Ywg0LrRgNGD0YLQuNC70LrRg1xuICAgIC8vINGH0YLQvtCx0Ysg0YPQstC10LTQvtC80LjRgtGMINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvtCxINC+0LbQuNC00LDQvdC40Lgg0L7RgtCy0LXRgtCwINGB0LXRgNCy0LXRgNCwXG4gICAgaWYoZm9ybWlrLmlzU3VibWl0dGluZykge1xuICAgICAgICBhdHRycy5zaWduID0gJ3NwaW5uZXInXG4gICAgfVxuICAgIFxuICAgIHJldHVybiA8QnV0dG9uIHsuLi5hdHRyc30gLz5cbn1cblxuLyoqXG4gKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQvtGC0L/RgNCw0LLQutC4INGE0L7RgNC80YtcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMg4oCUINC+0LHRitC10LrRgiDRgSDQstCy0LXQtNGR0L3QvdGL0LzQuCDQt9C90LDRh9C10L3QuNGP0LzQuCDQsiDQv9C+0LvRjyDRhNC+0YDQvNGLXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXRTZXJ2ZXJFcnIg4oCUINGE0YPQvdC60YbQuNGPINC60YPQtNCwINC90YPQttC90L4g0L/QtdGA0LXQtNCw0YLRjCDRgtC10LrRgdGCINC+0YjQuNCx0LrQuCDQvtGC0LTQsNC90L3QvtC5INGB0LXRgNCy0LXRgNC+0LwuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCDigJQg0LTQuNGB0L/QsNGC0YfQtdGAINGN0LrRiNC10L0t0YTRg9C90LrRhtC40LguXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvblN1Ym1pdEhhbmRsZXIodmFsdWVzLCBzZXRTZXJ2ZXJFcnIsIGRpc3BhdGNoKSB7XG4gICAgXG4gICAgLy8g0J/QviDQutCw0LrQvtC80YMg0LDQtNGA0LXRgdGDINCx0YPQtNGDINC00LXQu9Cw0YLRjCDQt9Cw0L/RgNC+0YEg0L3QsCDQstGF0L7QtCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICBjb25zdCB7c2VydmVyT3JpZ2luLCBpc0RldmVsb3BtZW50fSA9IGJyb3dzZXJDb25maWdcbiAgICBjb25zdCBhcGlVcmwgPSBzZXJ2ZXJPcmlnaW4gKyAnL2FwaS92MS91c2Vycy9sb2dpbidcbiAgICBcbiAgICAvLyDQn9Cw0YDQsNC80LXRgtGA0Ysg0LfQsNC/0YDQvtGB0LBcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHZhbHVlcylcbiAgICB9XG4gICAgXG4gICAgLy8g0KHQtNC10LvQsNGOINC30LDQv9GA0L7RgSDQvdCwINGB0LXRgNCy0LXRgCDQuCDQv9C+0LvRg9GH0LXQvdC90YvQtSDQtNCw0L3QvdGL0LUg0L/QvtC80LXRidGDINCyIHNlcnZlclJlc1xuICAgIGNvbnN0IHNlcnZlclJlcyA9IGF3YWl0IGZldGNoKGFwaVVybCwgb3B0aW9ucylcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMpXG4gICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSlcbiAgICAvKlxuICAgINCSIHNlcnZlclJlcyDQsdGD0LTQtdGCINC40LvQuCDQvtCx0YrQtdC60YIg0YEg0YPRgdC/0LXRhdC+0Lw6XG4gICAge1xuICAgICAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgXCJ0b2tlblwiOiBcImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNi4uLlwiLFxuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJ1c2VyXCI6IHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBbmRyZXcgS296aW5za3lcIixcbiAgICAgICAgICAgICAgICBcImVtYWlsXCI6IFwiYW5ka296aW5za2l5QHlhbmRleC5ydVwiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfVxuICAgINCY0LvQuCDQvtCx0YrQtdC60YIg0YEg0L7RiNC40LHQutC+0Lkg0L/RgNC+INC90LXQstC10YDQvdGL0LUg0LTQsNC90L3Ri9C1INC+0YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPOlxuICAgIHtcbiAgICAgICAgXCJzdGF0dXNcIjogXCJmYWlsXCIsXG4gICAgICAgIFwiZXJyb3JcIjoge1xuICAgICAgICAgICAgXCJzdGF0dXNDb2RlXCI6IDQwMCxcbiAgICAgICAgICAgIFwic3RhdHVzXCI6IFwiZmFpbFwiLFxuICAgICAgICAgICAgXCJpc09wZXJhdGlvbmFsXCI6IHRydWVcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXNzYWdlXCI6IFwiUGxlYXNlIHByb3ZpZGUgZW1haWwgYW5kIHBhc3N3b3JkLlwiLFxuICAgIH1cbiAgICDQmNC70LggNTAwINC+0YjQuNCx0LrQsCDQtdGB0LvQuCDQtNCw0L3QvdGL0LUg0LLQvtC+0LHRidC1INC90LUg0L/QtdGA0LXQtNCw0L3RiyAo0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GOINGD0LTQsNC70L7RgdGMINC+0YLQv9GA0LDQstC40YLRjCDRhNC+0YDQvNGDINCx0LXQtyDQv9GA0L7QstC10YDQutC4INC90LAg0LrQu9C40LXQvdGC0LUpXG4gICAge1xuICAgICAgICBcInN0YXR1c1wiOiBcImVycm9yXCIsXG4gICAgICAgIFwiZXJyb3JcIjoge1xuICAgICAgICAgICAgXCJzdGF0dXNDb2RlXCI6IDUwMCxcbiAgICAgICAgICAgIFwic3RhdHVzXCI6IFwiZXJyb3JcIixcbiAgICAgICAgICAgIFwiaXNPcGVyYXRpb25hbFwiOiB0cnVlXG4gICAgICAgIH0sXG4gICAgICAgIFwibWVzc2FnZVwiOiBcIkluY29ycmVjdCBlbWFpbCBvciBwYXNzd29yZFwiLFxuICAgIH1cbiAgICAqL1xuICAgIFxuICAgIC8vINCV0YHQu9C4INGD0YHQv9C10YjQvdGL0Lkg0L7RgtCy0LXRglxuICAgIGlmKHNlcnZlclJlcy5zdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICAvLyDQn9C+0LvRg9GH0LjRgtGMINC00LDQvdC90YvQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICAgICAgY29uc3QgdXNlckRhdGEgPSBzZXJ2ZXJSZXMuZGF0YS51c2VyXG4gICAgICAgIFxuICAgICAgICAvLyDQldGB0LvQuCDQvdCw0YXQvtC20YPRgdGMINCyINGA0LXQttC40LzQtSDRgNCw0LfRgNCw0LHQvtGC0LrQtSwg0YLQviDQv9C+0YHRgtCw0LLQuNGC0Ywg0YLQvtC60LXQvSDQsiBMb2NhbFN0b3JhZ2VcbiAgICAgICAgaWYoaXNEZXZlbG9wbWVudCkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2F1dGhUb2tlbicsIHNlcnZlclJlcy50b2tlbilcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgLy8g0J/QvtGB0YLQsNCy0LjRgtGMINC40YUg0LIg0KXRgNCw0L3QuNC70LjRidC1XG4gICAgICAgIGRpc3BhdGNoKHNldFVzZXIodXNlckRhdGEubmFtZSwgdXNlckRhdGEuZW1haWwpKVxuICAgIH1cbiAgICAvLyDQkiDQv9GA0L7RgtC40LLQvdC+0Lwg0YHQu9GD0YfQsNC1INC/0LXRgNC10LTQsNGC0Ywg0YLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0YTRg9C90LrRhtC40Lgg0L/QvtC60LDQt9GL0LLQsNGO0YnRg9GOINC+0YjQuNCx0LrRgy5cbiAgICBlbHNlIHtcbiAgICAgICAgc2V0U2VydmVyRXJyKHNlcnZlclJlcy5tZXNzYWdlKVxuICAgIH1cbn0iLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBGb3JtaWt9IGZyb20gXCJmb3JtaWtcIjtcbmltcG9ydCB7TGluaywgUmVkaXJlY3R9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgcyBmcm9tICcuL2Nzcy9mb3JtLnNjc3MnXG5pbXBvcnQgRm9ybUhlYWRlciBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZm9ybUhlYWRlclwiO1xuaW1wb3J0IEVycm9yIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy9lcnJvclwiO1xuaW1wb3J0IHt1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3J9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHtcbiAgICBpbml0aWFsVmFsdWVzLFxuICAgIHZhbGlkYXRpb25TY2hlbWEsXG4gICAgY3JlYXRlRm9ybSxcbiAgICBvblN1Ym1pdEhhbmRsZXJcbn0gZnJvbSBcIi4vcmVzb3VyY2VzXCI7XG5cblxuLy8g0KTQvtGA0LzQsCDRgNC10LPQuNGB0YLRgNCw0YbQuNC4INC90L7QstC+0LPQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbmZ1bmN0aW9uIEVudGVyRm9ybSgpIHtcbiAgICBcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgICBcbiAgICAvLyDQldGB0LvQuCDRgdC10YDQstC10YAg0YHQvtC+0LHRidC40YIg0L7QsSDQvtGI0LjQsdC60LUsINGC0L4g0LLRi9C30L7QstGDIHNldFNlcnZlckVycigpINC4INC30LDQvdC10YHRgyDRgtC10LrRgdGCINC+0YjQuNCx0LrQuCDQsiBzZXJ2ZXJFcnJUZXh0LlxuICAgIC8vINCQINC10YHQu9C4INGC0LDQvCDQsdGD0LTQtdGCINC+0YjQuNCx0LrQsCwg0YLQviDQsiBzZXJ2ZXJFcnJvciDQsdGD0LTQtdGCINGB0L7QvtCx0YnQtdC90LjQtSDQvtCxINC+0YjQuNCx0LrQtSwg0LrQvtGC0L7RgNC+0LUg0LHRg9C00LXRgiDQv9C+0LrQsNC30LDQvdC+INC90LjQttC1INGE0L7RgNC80YsuXG4gICAgbGV0IFtzZXJ2ZXJFcnJUZXh0LCBzZXRTZXJ2ZXJFcnJdID0gdXNlU3RhdGUobnVsbClcbiAgICBsZXQgc2VydmVyRXJyb3IgPSBzZXJ2ZXJFcnJUZXh0XG4gICAgICAgID8gPEVycm9yIHRleHQ9e3NlcnZlckVyclRleHR9IGluZGVudD0nMScgLz5cbiAgICAgICAgOiBudWxsXG4gICAgXG4gICAgLy8g0J/QvtC70YPRh9GDINC40LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0YfRgtC+0LHRiyDQv9C+0L3Rj9GC0Ywg0LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC9INC70Lgg0L7QvVxuICAgIGNvbnN0IHtuYW1lfSA9IHVzZVNlbGVjdG9yKHN0b3JlID0+IHN0b3JlLnVzZXIpXG5cbiAgICAvLyDQldGB0LvQuCDQuNC80Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC10YHRgtGMLCDRgtC+INC+0YLQv9GA0LDQstC40YLRjCDQvdCwINGB0YLRgNCw0L3QuNGG0YMg0LfQsNC80LXRgtC+0LpcbiAgICBpZihuYW1lKSByZXR1cm4gPFJlZGlyZWN0IHRvPScvbm90ZXMnLz5cbiAgICBcbiAgICBcbiAgICAvLyDQntGC0YDQuNGB0L7QstGL0LLQsNC10LzQsNGPINGE0L7RgNC80LBcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEZvcm1IZWFkZXIgdGV4dD0nTG9nIGluJyAvPlxuICAgICAgICAgICAgPEZvcm1pa1xuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXN9XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvblNjaGVtYT17dmFsaWRhdGlvblNjaGVtYX1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17KHZhbHVlcykgPT4gb25TdWJtaXRIYW5kbGVyKHZhbHVlcywgc2V0U2VydmVyRXJyLCBkaXNwYXRjaCl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyBmb3JtaWsgPT4gY3JlYXRlRm9ybShmb3JtaWssIHNldFNlcnZlckVycikgfVxuICAgICAgICAgICAgPC9Gb3JtaWs+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHtzZXJ2ZXJFcnJvcn1cbiAgICBcbiAgICAgICAgICAgIDxkaXYgY2xhc3NOYW1lPXtzLmJvdHRvbVBhcnR9PlxuICAgICAgICAgICAgICAgIDxwPkFyZSB5b3UgYSBuZXcgdXNlcj8gPExpbmsgdG89Jy9yZWcnPlNpZ24gdXAuPC9MaW5rPjwvcD5cbiAgICAgICAgICAgICAgICA8cD5Eb24ndCByZW1lbWJlciBwYXNzd29yZD8gPExpbmsgdG89Jy9wYXNzd29yZC1yZXNldCc+UmVzZXQgcGFzc3dvcmQuPC9MaW5rPjwvcD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgRW50ZXJGb3JtIiwiaW1wb3J0IEVudGVyRm9ybSBmcm9tICcuL2VudGVyRm9ybSdcbmV4cG9ydCBkZWZhdWx0IEVudGVyRm9ybSIsIlxuZXhwb3J0IGZ1bmN0aW9uIHNldFVzZXIobmFtZSwgZW1haWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnU0VUX1VTRVInLFxuICAgICAgICBuYW1lLFxuICAgICAgICBlbWFpbFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGFkZE5vdGUodGV4dCkge1xuICAgIHJldHVybiB7XG4gICAgICAgIHR5cGU6ICdBRERfTk9URScsXG4gICAgICAgIHRleHRcbiAgICB9XG59IiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFRvcE5hdmlnYXRpb24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdG9wTmF2RW50cmFuY2VcIjtcbmltcG9ydCBBdXRoU3BsaXRDb250YWluZXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvY29udGFpbmVycy9hdXRoU3BsaXRDb250YWluZXJcIjtcbmltcG9ydCBFbnRlckZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9lbnRlckZvcm1cIjtcblxuXG5mdW5jdGlvbiBFbnRlclBhZ2UoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUb3BOYXZpZ2F0aW9uIC8+XG4gICAgICAgICAgICA8QXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxFbnRlckZvcm0gLz5cbiAgICAgICAgICAgIDwvQXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICA8Lz5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVudGVyUGFnZSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBUb3BOYXZpZ2F0aW9uIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3RvcE5hdkVudHJhbmNlXCI7XG5cblxuZnVuY3Rpb24gUGFzc3dvcmRSZXNldFBhZ2UoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUb3BOYXZpZ2F0aW9uIC8+XG4gICAgICAgICAgICBQYXNzd29yZFJlc2V0XG4gICAgICAgIDwvPlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgUGFzc3dvcmRSZXNldFBhZ2UiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgVG9wTmF2aWdhdGlvbiBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy90b3BOYXZFbnRyYW5jZVwiO1xuXG5cbmZ1bmN0aW9uIENoYW5nZVBhc3N3b3JkUGFnZSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFRvcE5hdmlnYXRpb24gLz5cbiAgICAgICAgICAgIGNoYW5nZVBhc3N3b3JkXG4gICAgICAgIDwvPlxuICAgIClcbn1cblxuZXhwb3J0IGRlZmF1bHQgQ2hhbmdlUGFzc3dvcmRQYWdlIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHt1c2VTZWxlY3Rvcn0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5cblxuZnVuY3Rpb24gTm90ZXNQYWdlKCkge1xuICAgIFxuICAgIGNvbnN0IHVzZXIgPSB1c2VTZWxlY3RvcihzdG9yZSA9PiBzdG9yZS51c2VyKVxuICAgIC8vIGNvbnNvbGUubG9nKHVzZXIpO1xuICAgIFxuICAgIHJldHVybiB1c2VyLm5hbWVcbn1cblxuZXhwb3J0IGRlZmF1bHQgTm90ZXNQYWdlIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuXG5cbmZ1bmN0aW9uIFVzZXJQYWdlKCkge1xuICAgIHJldHVybiAnVXNlclBhZ2UnXG59XG5cbmV4cG9ydCBkZWZhdWx0IFVzZXJQYWdlIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0ICcuL2Nzcy9yZXNldC5jc3MnXG5pbXBvcnQgJy4vY3NzL2dlbmVyYWwuc2NzcydcbmltcG9ydCBzIGZyb20gJy4vY3NzL2FwcC5zY3NzJ1xuXG5pbXBvcnQge1xuICAgIEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyLFxuICAgIFN3aXRjaCxcbiAgICBSb3V0ZSxcbiAgICBMaW5rXG59IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5cbmltcG9ydCBNYWluUGFnZSBmcm9tIFwiLi4vLi4vcGFnZXMvbWFpbi9tYWluUGFnZVwiXG5pbXBvcnQgUmVnUGFnZSBmcm9tIFwiLi4vLi4vcGFnZXMvcmVnL3JlZ1BhZ2VcIlxuaW1wb3J0IEVudGVyUGFnZSBmcm9tIFwiLi4vLi4vcGFnZXMvZW50ZXIvZW50ZXJQYWdlXCJcbmltcG9ydCBQYXNzd29yZFJlc2V0UGFnZSBmcm9tIFwiLi4vLi4vcGFnZXMvcGFzc3dvcmRSZXNldC9wYXNzd29yZFJlc2V0UGFnZVwiXG5pbXBvcnQgQ2hhbmdlUGFzc3dvcmRQYWdlIGZyb20gXCIuLi8uLi9wYWdlcy9jaGFuZ2VQYXNzd29yZC9jaGFuZ2VQYXNzd29yZFBhZ2VcIlxuaW1wb3J0IE5vdGVzUGFnZSBmcm9tIFwiLi4vLi4vcGFnZXMvbm90ZXMvbm90ZXNQYWdlXCJcbmltcG9ydCBVc2VyUGFnZSBmcm9tIFwiLi4vLi4vcGFnZXMvdXNlci91c2VyUGFnZVwiXG5cblxuXG5jb25zdCBBcHAgPSAoKSA9PiB7XG5cbiAgICByZXR1cm4gKFxuICAgICAgICA8Um91dGVyPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3MuYXBwfT5cbiAgICAgICAgICAgICAgICB7Lyo8TGluayB0bz0nLyc+TWFpbjwvTGluaz5cbiAgICAgICAgICAgICAgICA8TGluayB0bz0nL3JlZyc+UmVnaXN0cmF0aW9uPC9MaW5rPlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvZW50ZXInPkVudGVyPC9MaW5rPlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvcGFzc3dvcmQtcmVzZXQnPlBhc3N3b3JkIHJlc2V0PC9MaW5rPlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvY2hhbmdlLXBhc3N3b3JkJz5DaGFuZ2UgcGFzc3dvcmQ8L0xpbms+XG4gICAgICAgICAgICAgICAgPExpbmsgdG89Jy9ub3Rlcyc+Tm90ZXM8L0xpbms+XG4gICAgICAgICAgICAgICAgPExpbmsgdG89Jy91c2VyJz5Vc2VyPC9MaW5rPiovfVxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIDxTd2l0Y2g+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPScvJyBleGFjdD5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxNYWluUGFnZSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nL3JlZyc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UmVnUGFnZSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nL2VudGVyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxFbnRlclBhZ2UgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9wYXNzd29yZC1yZXNldCc+XG4gICAgICAgICAgICAgICAgICAgICAgICA8UGFzc3dvcmRSZXNldFBhZ2UgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9jaGFuZ2UtcGFzc3dvcmQnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPENoYW5nZVBhc3N3b3JkUGFnZSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nL25vdGVzJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxOb3Rlc1BhZ2UgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy91c2VyJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxVc2VyUGFnZSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgIDwvU3dpdGNoPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvUm91dGVyPlxuICAgIClcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBBcHAiLCJpbXBvcnQgQXBwIGZyb20gJy4vYXBwJ1xuZXhwb3J0IGRlZmF1bHQgQXBwIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCBSZWFjdERPTSBmcm9tICdyZWFjdC1kb20nO1xuaW1wb3J0IHtQcm92aWRlcn0gZnJvbSAncmVhY3QtcmVkdXgnXG5pbXBvcnQgc3RvcmUgZnJvbSAnLi9zdG9yZS9zdG9yZSdcbmltcG9ydCBBcHAgZnJvbSAnLi9jb21wb25lbnRzL2FwcCdcblxuXG5SZWFjdERPTS5yZW5kZXIoXG4gICAgPFByb3ZpZGVyIHN0b3JlPXtzdG9yZX0+XG4gICAgICAgIDxBcHAgLz5cbiAgICA8L1Byb3ZpZGVyPixcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgncm9vdCcpXG4pIl0sInNvdXJjZVJvb3QiOiIifQ==