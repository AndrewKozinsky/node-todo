!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=114)}([function(e,t,n){"use strict";e.exports=n(71)},function(e,t,n){"use strict";var r=n(26),i="object"==typeof self&&self&&self.Object===Object&&self,o=r.a||i||Function("return this")();t.a=o},function(e,t,n){"use strict";t.a=function(e,t){}},function(e,t,n){"use strict";function r(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.d(t,"a",(function(){return r}))},function(e,t,n){(function(t){var n=function(e){return e&&e.Math==Math&&e};e.exports=n("object"==typeof globalThis&&globalThis)||n("object"==typeof window&&window)||n("object"==typeof self&&self)||n("object"==typeof t&&t)||Function("return this")()}).call(this,n(21))},function(e,t){var n={}.hasOwnProperty;e.exports=function(e,t){return n.call(e,t)}},function(e,t,n){"use strict";(function(e){var r=n(26),i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===i&&r.a.process,u=function(){try{var e=o&&o.require&&o.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();t.a=u}).call(this,n(22)(e))},function(e,t,n){"use strict";var r=Array.isArray,i=Object.keys,o=Object.prototype.hasOwnProperty,a="undefined"!=typeof Element;e.exports=function(e,t){try{return function e(t,n){if(t===n)return!0;if(t&&n&&"object"==typeof t&&"object"==typeof n){var u,l,c,s=r(t),f=r(n);if(s&&f){if((l=t.length)!=n.length)return!1;for(u=l;0!=u--;)if(!e(t[u],n[u]))return!1;return!0}if(s!=f)return!1;var d=t instanceof Date,p=n instanceof Date;if(d!=p)return!1;if(d&&p)return t.getTime()==n.getTime();var h=t instanceof RegExp,v=n instanceof RegExp;if(h!=v)return!1;if(h&&v)return t.toString()==n.toString();var m=i(t);if((l=m.length)!==i(n).length)return!1;for(u=l;0!=u--;)if(!o.call(n,m[u]))return!1;if(a&&t instanceof Element&&n instanceof Element)return t===n;for(u=l;0!=u--;)if(!("_owner"===(c=m[u])&&t.$$typeof||e(t[c],n[c])))return!1;return!0}return t!=t&&n!=n}(e,t)}catch(e){if(e.message&&e.message.match(/stack|recursion/i)||-2146828260===e.number)return console.warn("Warning: react-fast-compare does not handle circular references.",e.name,e.message),!1;throw e}}},function(e,t,n){"use strict";function r(e){this._maxSize=e,this.clear()}r.prototype.clear=function(){this._size=0,this._values=Object.create(null)},r.prototype.get=function(e){return this._values[e]},r.prototype.set=function(e,t){return this._size>=this._maxSize&&this.clear(),e in this._values||this._size++,this._values[e]=t};var i=/[^.^\]^[]+|(?=\[\]|\.\.)/g,o=/^\d+$/,a=/^\d/,u=/[~`!#$%\^&*+=\-\[\]\\';,/{}|\\":<>\?]/g,l=/^\s*(['"]?)(.*?)(\1)\s*$/,c=new r(512),s=new r(512),f=new r(512);function d(e){return c.get(e)||c.set(e,p(e).map((function(e){return e.replace(l,"$2")})))}function p(e){return e.match(i)}function h(e){return"string"==typeof e&&e&&-1!==["'",'"'].indexOf(e.charAt(0))}function v(e){return!h(e)&&(function(e){return e.match(a)&&!e.match(o)}(e)||function(e){return u.test(e)}(e))}e.exports={Cache:r,split:p,normalizePath:d,setter:function(e){var t=d(e);return s.get(e)||s.set(e,(function(e,n){for(var r=0,i=t.length;r<i-1;)e=e[t[r++]];e[t[r]]=n}))},getter:function(e,t){var n=d(e);return f.get(e)||f.set(e,(function(e){for(var r=0,i=n.length;r<i;){if(null==e&&t)return;e=e[n[r++]]}return e}))},join:function(e){return e.reduce((function(e,t){return e+(h(t)||o.test(t)?"["+t+"]":(e?".":"")+t)}),"")},forEach:function(e,t,n){!function(e,t,n){var r,i,o,a,u=e.length;for(i=0;i<u;i++)(r=e[i])&&(v(r)&&(r='"'+r+'"'),a=h(r),o=!a&&/^\d+$/.test(r),t.call(n,r,a,o,i,e))}(Array.isArray(e)?e:p(e),t,n)}}},function(e,t,n){"use strict";var r=n(25),i={childContextTypes:!0,contextType:!0,contextTypes:!0,defaultProps:!0,displayName:!0,getDefaultProps:!0,getDerivedStateFromError:!0,getDerivedStateFromProps:!0,mixins:!0,propTypes:!0,type:!0},o={name:!0,length:!0,prototype:!0,caller:!0,callee:!0,arguments:!0,arity:!0},a={$$typeof:!0,compare:!0,defaultProps:!0,displayName:!0,propTypes:!0,type:!0},u={};function l(e){return r.isMemo(e)?a:u[e.$$typeof]||i}u[r.ForwardRef]={$$typeof:!0,render:!0,defaultProps:!0,displayName:!0,propTypes:!0},u[r.Memo]=a;var c=Object.defineProperty,s=Object.getOwnPropertyNames,f=Object.getOwnPropertySymbols,d=Object.getOwnPropertyDescriptor,p=Object.getPrototypeOf,h=Object.prototype;e.exports=function e(t,n,r){if("string"!=typeof n){if(h){var i=p(n);i&&i!==h&&e(t,i,r)}var a=s(n);f&&(a=a.concat(f(n)));for(var u=l(t),v=l(n),m=0;m<a.length;++m){var y=a[m];if(!(o[y]||r&&r[y]||v&&v[y]||u&&u[y])){var b=d(n,y);try{c(t,y,b)}catch(e){}}}}return t}},function(e,t,n){var r=n(17),i=n(18),o=n(30);e.exports=r?function(e,t,n){return i.f(e,t,o(1,n))}:function(e,t,n){return e[t]=n,e}},function(e,t,n){"use strict";(function(e){var r=n(1),i=n(64),o="object"==typeof exports&&exports&&!exports.nodeType&&exports,a=o&&"object"==typeof e&&e&&!e.nodeType&&e,u=a&&a.exports===o?r.a.Buffer:void 0,l=(u?u.isBuffer:void 0)||i.a;t.a=l}).call(this,n(22)(e))},function(e,t,n){var r=n(4),i=n(78),o=n(79),a=n(10),u=n(16),l=u("iterator"),c=u("toStringTag"),s=o.values;for(var f in i){var d=r[f],p=d&&d.prototype;if(p){if(p[l]!==s)try{a(p,l,s)}catch(e){p[l]=s}if(p[c]||a(p,c,f),i[f])for(var h in o)if(p[h]!==o[h])try{a(p,h,o[h])}catch(e){p[h]=o[h]}}}},function(e,t){e.exports=function(e){try{return!!e()}catch(e){return!0}}},function(e,t,n){e.exports=n(75)()},function(e,t,n){"use strict";function r(e){return Array.prototype.slice.apply(e)}function i(e){this.status="pending",this._continuations=[],this._parent=null,this._paused=!1,e&&e.call(this,this._continueWith.bind(this),this._failWith.bind(this))}function o(e){return e&&"function"==typeof e.then}function a(e){return e}if(i.prototype={then:function(e,t){var n=i.unresolved()._setParent(this);if(this._isRejected()){if(this._paused)return this._continuations.push({promise:n,nextFn:e,catchFn:t}),n;if(t)try{var r=t(this._error);return o(r)?(this._chainPromiseData(r,n),n):i.resolve(r)._setParent(this)}catch(e){return i.reject(e)._setParent(this)}return i.reject(this._error)._setParent(this)}return this._continuations.push({promise:n,nextFn:e,catchFn:t}),this._runResolutions(),n},catch:function(e){if(this._isResolved())return i.resolve(this._data)._setParent(this);var t=i.unresolved()._setParent(this);return this._continuations.push({promise:t,catchFn:e}),this._runRejections(),t},finally:function(e){var t=!1;function n(n,r){if(!t){t=!0,e||(e=a);var i=e(n);return o(i)?i.then((function(){if(r)throw r;return n})):n}}return this.then((function(e){return n(e)})).catch((function(e){return n(null,e)}))},pause:function(){return this._paused=!0,this},resume:function(){var e=this._findFirstPaused();return e&&(e._paused=!1,e._runResolutions(),e._runRejections()),this},_findAncestry:function(){return this._continuations.reduce((function(e,t){if(t.promise){var n={promise:t.promise,children:t.promise._findAncestry()};e.push(n)}return e}),[])},_setParent:function(e){if(this._parent)throw new Error("parent already set");return this._parent=e,this},_continueWith:function(e){var t=this._findFirstPending();t&&(t._data=e,t._setResolved())},_findFirstPending:function(){return this._findFirstAncestor((function(e){return e._isPending&&e._isPending()}))},_findFirstPaused:function(){return this._findFirstAncestor((function(e){return e._paused}))},_findFirstAncestor:function(e){for(var t,n=this;n;)e(n)&&(t=n),n=n._parent;return t},_failWith:function(e){var t=this._findFirstPending();t&&(t._error=e,t._setRejected())},_takeContinuations:function(){return this._continuations.splice(0,this._continuations.length)},_runRejections:function(){if(!this._paused&&this._isRejected()){var e=this._error,t=this._takeContinuations(),n=this;t.forEach((function(t){if(t.catchFn)try{var r=t.catchFn(e);n._handleUserFunctionResult(r,t.promise)}catch(e){t.promise.reject(e)}else t.promise.reject(e)}))}},_runResolutions:function(){if(!this._paused&&this._isResolved()&&!this._isPending()){var e=this._takeContinuations();if(o(this._data))return this._handleWhenResolvedDataIsPromise(this._data);var t=this._data,n=this;e.forEach((function(e){if(e.nextFn)try{var r=e.nextFn(t);n._handleUserFunctionResult(r,e.promise)}catch(t){n._handleResolutionError(t,e)}else e.promise&&e.promise.resolve(t)}))}},_handleResolutionError:function(e,t){if(this._setRejected(),t.catchFn)try{return void t.catchFn(e)}catch(t){e=t}t.promise&&t.promise.reject(e)},_handleWhenResolvedDataIsPromise:function(e){var t=this;return e.then((function(e){t._data=e,t._runResolutions()})).catch((function(e){t._error=e,t._setRejected(),t._runRejections()}))},_handleUserFunctionResult:function(e,t){o(e)?this._chainPromiseData(e,t):t.resolve(e)},_chainPromiseData:function(e,t){e.then((function(e){t.resolve(e)})).catch((function(e){t.reject(e)}))},_setResolved:function(){this.status="resolved",this._paused||this._runResolutions()},_setRejected:function(){this.status="rejected",this._paused||this._runRejections()},_isPending:function(){return"pending"===this.status},_isResolved:function(){return"resolved"===this.status},_isRejected:function(){return"rejected"===this.status}},i.resolve=function(e){return new i((function(t,n){o(e)?e.then((function(e){t(e)})).catch((function(e){n(e)})):t(e)}))},i.reject=function(e){return new i((function(t,n){n(e)}))},i.unresolved=function(){return new i((function(e,t){this.resolve=e,this.reject=t}))},i.all=function(){var e=r(arguments);return Array.isArray(e[0])&&(e=e[0]),e.length?new i((function(t,n){var r=[],o=0,a=!1;e.forEach((function(u,l){i.resolve(u).then((function(n){r[l]=n,(o+=1)===e.length&&t(r)})).catch((function(e){!function(e){a||(a=!0,n(e))}(e)}))}))})):i.resolve([])},Promise===i)throw new Error("Please use SynchronousPromise.installGlobally() to install globally");var u=Promise;i.installGlobally=function(e){if(Promise===i)return e;var t=function(e){if(void 0===e||e.__patched)return e;var t=e;return(e=function(){t.apply(this,r(arguments))}).__patched=!0,e}(e);return Promise=i,t},i.uninstallGlobally=function(){Promise===i&&(Promise=u)},e.exports={SynchronousPromise:i}},function(e,t,n){var r=n(4),i=n(43),o=n(5),a=n(48),u=n(49),l=n(83),c=i("wks"),s=r.Symbol,f=l?s:s&&s.withoutSetter||a;e.exports=function(e){return o(c,e)||(u&&o(s,e)?c[e]=s[e]:c[e]=f("Symbol."+e)),c[e]}},function(e,t,n){var r=n(13);e.exports=!r((function(){return 7!=Object.defineProperty({},1,{get:function(){return 7}})[1]}))},function(e,t,n){var r=n(17),i=n(45),o=n(20),a=n(47),u=Object.defineProperty;t.f=r?u:function(e,t,n){if(o(e),t=a(t,!0),o(n),i)try{return u(e,t,n)}catch(e){}if("get"in n||"set"in n)throw TypeError("Accessors not supported");return"value"in n&&(e[t]=n.value),e}},function(e,t){e.exports=function(e){return"object"==typeof e?null!==e:"function"==typeof e}},function(e,t,n){var r=n(19);e.exports=function(e){if(!r(e))throw TypeError(String(e)+" is not an object");return e}},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t){e.exports=function(e){if(!e.webpackPolyfill){var t=Object.create(e);t.children||(t.children=[]),Object.defineProperty(t,"loaded",{enumerable:!0,get:function(){return t.l}}),Object.defineProperty(t,"id",{enumerable:!0,get:function(){return t.i}}),Object.defineProperty(t,"exports",{enumerable:!0}),t.webpackPolyfill=1}return t}},function(e,t,n){var r=n(80),i=n(42);e.exports=function(e){return r(i(e))}},function(e,t,n){"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE){0;try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}}(),e.exports=n(72)},function(e,t,n){"use strict";e.exports=n(77)},function(e,t,n){"use strict";(function(e){var n="object"==typeof e&&e&&e.Object===Object&&e;t.a=n}).call(this,n(21))},function(e,t,n){e.exports={wrapper:"_2_x7IFNcafebDONBSz1Iju",leftPart:"SaJaCLmn9kxvmuyrXMtvb",rightPart:"_2KY1b1AyQpW5mEnTFNBUU_"}},function(e,t){e.exports=!1},function(e,t,n){var r=n(4),i=n(10);e.exports=function(e,t){try{i(r,e,t)}catch(n){r[e]=t}return t}},function(e,t){e.exports=function(e,t){return{enumerable:!(1&e),configurable:!(2&e),writable:!(4&e),value:t}}},function(e,t){e.exports={}},function(e,t){e.exports=["constructor","hasOwnProperty","isPrototypeOf","propertyIsEnumerable","toLocaleString","toString","valueOf"]},function(e,t,n){var r=n(43),i=n(48),o=r("keys");e.exports=function(e){return o[e]||(o[e]=i(e))}},function(e,t){e.exports={}},function(e,t,n){"use strict";(function(e,r){var i,o=n(61);i="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==e?e:r;var a=Object(o.a)(i);t.a=a}).call(this,n(21),n(22)(e))},function(e,t,n){"use strict";(function(e){var r=n(0),i=n.n(r),o=n(3),a=n(14),u=n.n(a),l="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:void 0!==e?e:{};function c(e){var t=[];return{on:function(e){t.push(e)},off:function(e){t=t.filter((function(t){return t!==e}))},get:function(){return e},set:function(n,r){e=n,t.forEach((function(t){return t(e,r)}))}}}var s=i.a.createContext||function(e,t){var n,i,a,s="__create-react-context-"+((l[a="__global_unique_id__"]=(l[a]||0)+1)+"__"),f=function(e){function n(){var t;return(t=e.apply(this,arguments)||this).emitter=c(t.props.value),t}Object(o.a)(n,e);var r=n.prototype;return r.getChildContext=function(){var e;return(e={})[s]=this.emitter,e},r.componentWillReceiveProps=function(e){if(this.props.value!==e.value){var n,r=this.props.value,i=e.value;((o=r)===(a=i)?0!==o||1/o==1/a:o!=o&&a!=a)?n=0:(n="function"==typeof t?t(r,i):1073741823,0!==(n|=0)&&this.emitter.set(e.value,n))}var o,a},r.render=function(){return this.props.children},n}(r.Component);f.childContextTypes=((n={})[s]=u.a.object.isRequired,n);var d=function(t){function n(){var e;return(e=t.apply(this,arguments)||this).state={value:e.getValue()},e.onUpdate=function(t,n){0!=((0|e.observedBits)&n)&&e.setState({value:e.getValue()})},e}Object(o.a)(n,t);var r=n.prototype;return r.componentWillReceiveProps=function(e){var t=e.observedBits;this.observedBits=null==t?1073741823:t},r.componentDidMount=function(){this.context[s]&&this.context[s].on(this.onUpdate);var e=this.props.observedBits;this.observedBits=null==e?1073741823:e},r.componentWillUnmount=function(){this.context[s]&&this.context[s].off(this.onUpdate)},r.getValue=function(){return this.context[s]?this.context[s].get():e},r.render=function(){return(e=this.props.children,Array.isArray(e)?e[0]:e)(this.state.value);var e},n}(r.Component);return d.contextTypes=((i={})[s]=u.a.object,i),{Provider:f,Consumer:d}};t.a=s}).call(this,n(21))},function(e,t,n){var r=n(107);e.exports=p,e.exports.parse=o,e.exports.compile=function(e,t){return u(o(e,t),t)},e.exports.tokensToFunction=u,e.exports.tokensToRegExp=d;var i=new RegExp(["(\\\\.)","([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))"].join("|"),"g");function o(e,t){for(var n,r=[],o=0,a=0,u="",s=t&&t.delimiter||"/";null!=(n=i.exec(e));){var f=n[0],d=n[1],p=n.index;if(u+=e.slice(a,p),a=p+f.length,d)u+=d[1];else{var h=e[a],v=n[2],m=n[3],y=n[4],b=n[5],g=n[6],w=n[7];u&&(r.push(u),u="");var E=null!=v&&null!=h&&h!==v,x="+"===g||"*"===g,_="?"===g||"*"===g,S=n[2]||s,k=y||b;r.push({name:m||o++,prefix:v||"",delimiter:S,optional:_,repeat:x,partial:E,asterisk:!!w,pattern:k?c(k):w?".*":"[^"+l(S)+"]+?"})}}return a<e.length&&(u+=e.substr(a)),u&&r.push(u),r}function a(e){return encodeURI(e).replace(/[\/?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()}))}function u(e,t){for(var n=new Array(e.length),i=0;i<e.length;i++)"object"==typeof e[i]&&(n[i]=new RegExp("^(?:"+e[i].pattern+")$",f(t)));return function(t,i){for(var o="",u=t||{},l=(i||{}).pretty?a:encodeURIComponent,c=0;c<e.length;c++){var s=e[c];if("string"!=typeof s){var f,d=u[s.name];if(null==d){if(s.optional){s.partial&&(o+=s.prefix);continue}throw new TypeError('Expected "'+s.name+'" to be defined')}if(r(d)){if(!s.repeat)throw new TypeError('Expected "'+s.name+'" to not repeat, but received `'+JSON.stringify(d)+"`");if(0===d.length){if(s.optional)continue;throw new TypeError('Expected "'+s.name+'" to not be empty')}for(var p=0;p<d.length;p++){if(f=l(d[p]),!n[c].test(f))throw new TypeError('Expected all "'+s.name+'" to match "'+s.pattern+'", but received `'+JSON.stringify(f)+"`");o+=(0===p?s.prefix:s.delimiter)+f}}else{if(f=s.asterisk?encodeURI(d).replace(/[?#]/g,(function(e){return"%"+e.charCodeAt(0).toString(16).toUpperCase()})):l(d),!n[c].test(f))throw new TypeError('Expected "'+s.name+'" to match "'+s.pattern+'", but received "'+f+'"');o+=s.prefix+f}}else o+=s}return o}}function l(e){return e.replace(/([.+*?=^!:${}()[\]|\/\\])/g,"\\$1")}function c(e){return e.replace(/([=!:$\/()])/g,"\\$1")}function s(e,t){return e.keys=t,e}function f(e){return e&&e.sensitive?"":"i"}function d(e,t,n){r(t)||(n=t||n,t=[]);for(var i=(n=n||{}).strict,o=!1!==n.end,a="",u=0;u<e.length;u++){var c=e[u];if("string"==typeof c)a+=l(c);else{var d=l(c.prefix),p="(?:"+c.pattern+")";t.push(c),c.repeat&&(p+="(?:"+d+p+")*"),a+=p=c.optional?c.partial?d+"("+p+")?":"(?:"+d+"("+p+"))?":d+"("+p+")"}}var h=l(n.delimiter||"/"),v=a.slice(-h.length)===h;return i||(a=(v?a.slice(0,-h.length):a)+"(?:"+h+"(?=$))?"),a+=o?"$":i&&v?"":"(?="+h+"|$)",s(new RegExp("^"+a,f(n)),t)}function p(e,t,n){return r(t)||(n=t||n,t=[]),n=n||{},e instanceof RegExp?function(e,t){var n=e.source.match(/\((?!\?)/g);if(n)for(var r=0;r<n.length;r++)t.push({name:r,prefix:null,delimiter:null,optional:!1,repeat:!1,partial:!1,asterisk:!1,pattern:null});return s(e,t)}(e,t):r(e)?function(e,t,n){for(var r=[],i=0;i<e.length;i++)r.push(p(e[i],t,n).source);return s(new RegExp("(?:"+r.join("|")+")",f(n)),t)}(e,t,n):function(e,t,n){return d(o(e,n),t,n)}(e,t,n)}},function(e,t,n){"use strict";e.exports=n(110)},function(e,t,n){e.exports={h2:"mXJvmu94EyuzqweEat4Zx",h3:"_3IW-rYdXSKkO4BLymEcAO3"}},function(e,t,n){e.exports={indent_2:"_38zgwEYJ0bYr_z8w23PFi3",indent_3:"_39MQwV6Lqvobbetrq9iylx"}},function(e,t,n){"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/var r=Object.getOwnPropertySymbols,i=Object.prototype.hasOwnProperty,o=Object.prototype.propertyIsEnumerable;function a(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,t){for(var n,u,l=a(e),c=1;c<arguments.length;c++){for(var s in n=Object(arguments[c]))i.call(n,s)&&(l[s]=n[s]);if(r){u=r(n);for(var f=0;f<u.length;f++)o.call(n,u[f])&&(l[u[f]]=n[u[f]])}}return l}},function(e,t){e.exports=function(e){if(null==e)throw TypeError("Can't call method on "+e);return e}},function(e,t,n){var r=n(28),i=n(44);(e.exports=function(e,t){return i[e]||(i[e]=void 0!==t?t:{})})("versions",[]).push({version:"3.6.5",mode:r?"pure":"global",copyright:"© 2020 Denis Pushkarev (zloirock.ru)"})},function(e,t,n){var r=n(4),i=n(29),o=r["__core-js_shared__"]||i("__core-js_shared__",{});e.exports=o},function(e,t,n){var r=n(17),i=n(13),o=n(46);e.exports=!r&&!i((function(){return 7!=Object.defineProperty(o("div"),"a",{get:function(){return 7}}).a}))},function(e,t,n){var r=n(4),i=n(19),o=r.document,a=i(o)&&i(o.createElement);e.exports=function(e){return a?o.createElement(e):{}}},function(e,t,n){var r=n(19);e.exports=function(e,t){if(!r(e))return e;var n,i;if(t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;if("function"==typeof(n=e.valueOf)&&!r(i=n.call(e)))return i;if(!t&&"function"==typeof(n=e.toString)&&!r(i=n.call(e)))return i;throw TypeError("Can't convert object to primitive value")}},function(e,t){var n=0,r=Math.random();e.exports=function(e){return"Symbol("+String(void 0===e?"":e)+")_"+(++n+r).toString(36)}},function(e,t,n){var r=n(13);e.exports=!!Object.getOwnPropertySymbols&&!r((function(){return!String(Symbol())}))},function(e,t,n){var r,i=n(20),o=n(84),a=n(32),u=n(31),l=n(89),c=n(46),s=n(33),f=s("IE_PROTO"),d=function(){},p=function(e){return"<script>"+e+"<\/script>"},h=function(){try{r=document.domain&&new ActiveXObject("htmlfile")}catch(e){}var e,t;h=r?function(e){e.write(p("")),e.close();var t=e.parentWindow.Object;return e=null,t}(r):((t=c("iframe")).style.display="none",l.appendChild(t),t.src=String("javascript:"),(e=t.contentWindow.document).open(),e.write(p("document.F=Object")),e.close(),e.F);for(var n=a.length;n--;)delete h.prototype[a[n]];return h()};u[f]=!0,e.exports=Object.create||function(e,t){var n;return null!==e?(d.prototype=i(e),n=new d,d.prototype=null,n[f]=e):n=h(),void 0===t?n:o(n,t)}},function(e,t,n){var r=n(5),i=n(23),o=n(86).indexOf,a=n(31);e.exports=function(e,t){var n,u=i(e),l=0,c=[];for(n in u)!r(a,n)&&r(u,n)&&c.push(n);for(;t.length>l;)r(u,n=t[l++])&&(~o(c,n)||c.push(n));return c}},function(e,t){var n=Math.ceil,r=Math.floor;e.exports=function(e){return isNaN(e=+e)?0:(e>0?r:n)(e)}},function(e,t,n){var r=n(90),i=n(4),o=function(e){return"function"==typeof e?e:void 0};e.exports=function(e,t){return arguments.length<2?o(r[e])||o(i[e]):r[e]&&r[e][t]||i[e]&&i[e][t]}},function(e,t,n){var r,i,o,a=n(91),u=n(4),l=n(19),c=n(10),s=n(5),f=n(33),d=n(31),p=u.WeakMap;if(a){var h=new p,v=h.get,m=h.has,y=h.set;r=function(e,t){return y.call(h,e,t),t},i=function(e){return v.call(h,e)||{}},o=function(e){return m.call(h,e)}}else{var b=f("state");d[b]=!0,r=function(e,t){return c(e,b,t),t},i=function(e){return s(e,b)?e[b]:{}},o=function(e){return s(e,b)}}e.exports={set:r,get:i,has:o,enforce:function(e){return o(e)?i(e):r(e,{})},getterFor:function(e){return function(t){var n;if(!l(t)||(n=i(t)).type!==e)throw TypeError("Incompatible receiver, "+e+" required");return n}}}},function(e,t,n){var r=n(44),i=Function.toString;"function"!=typeof r.inspectSource&&(r.inspectSource=function(e){return i.call(e)}),e.exports=r.inspectSource},function(e,t,n){var r=n(17),i=n(94),o=n(30),a=n(23),u=n(47),l=n(5),c=n(45),s=Object.getOwnPropertyDescriptor;t.f=r?s:function(e,t){if(e=a(e),t=u(t,!0),c)try{return s(e,t)}catch(e){}if(l(e,t))return o(!i.f.call(e,t),e[t])}},function(e,t,n){var r=n(4),i=n(10),o=n(5),a=n(29),u=n(55),l=n(54),c=l.get,s=l.enforce,f=String(String).split("String");(e.exports=function(e,t,n,u){var l=!!u&&!!u.unsafe,c=!!u&&!!u.enumerable,d=!!u&&!!u.noTargetGet;"function"==typeof n&&("string"!=typeof t||o(n,"name")||i(n,"name",t),s(n).source=f.join("string"==typeof t?t:"")),e!==r?(l?!d&&e[t]&&(c=!0):delete e[t],c?e[t]=n:i(e,t,n)):c?e[t]=n:a(t,n)})(Function.prototype,"toString",(function(){return"function"==typeof this&&c(this).source||u(this)}))},function(e,t,n){"use strict";var r,i,o,a=n(59),u=n(10),l=n(5),c=n(16),s=n(28),f=c("iterator"),d=!1;[].keys&&("next"in(o=[].keys())?(i=a(a(o)))!==Object.prototype&&(r=i):d=!0),null==r&&(r={}),s||l(r,f)||u(r,f,(function(){return this})),e.exports={IteratorPrototype:r,BUGGY_SAFARI_ITERATORS:d}},function(e,t,n){var r=n(5),i=n(101),o=n(33),a=n(102),u=o("IE_PROTO"),l=Object.prototype;e.exports=a?Object.getPrototypeOf:function(e){return e=i(e),r(e,u)?e[u]:"function"==typeof e.constructor&&e instanceof e.constructor?e.constructor.prototype:e instanceof Object?l:null}},function(e,t,n){var r=n(18).f,i=n(5),o=n(16)("toStringTag");e.exports=function(e,t,n){e&&!i(e=n?e:e.prototype,o)&&r(e,o,{configurable:!0,value:t})}},function(e,t,n){"use strict";function r(e){var t,n=e.Symbol;return"function"==typeof n?n.observable?t=n.observable:(t=n("observable"),n.observable=t):t="@@observable",t}n.d(t,"a",(function(){return r}))},function(e,t,n){e.exports={app:"_1rqI0PWhW7Yv3U4XmkXwSx"}},function(e,t,n){e.exports={wrapper:"_2Pz3mPjw_up4scId8a446B"}},function(e,t,n){"use strict";t.a=function(){return!1}},function(e,t,n){"use strict";(function(e){var r=n(1),i="object"==typeof exports&&exports&&!exports.nodeType&&exports,o=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=o&&o.exports===i?r.a.Buffer:void 0,u=a?a.allocUnsafe:void 0;t.a=function(e,t){if(t)return e.slice();var n=e.length,r=u?u(n):new e.constructor(n);return e.copy(r),r}}).call(this,n(22)(e))},function(e,t,n){e.exports={bottomPart:"_2MYNscG8lzl6Lc4OdQpJJ7"}},function(e,t){function n(e,t){var n=e.length,r=new Array(n),i={},o=n,a=function(e){for(var t=new Map,n=0,r=e.length;n<r;n++){var i=e[n];t.has(i[0])||t.set(i[0],new Set),t.has(i[1])||t.set(i[1],new Set),t.get(i[0]).add(i[1])}return t}(t),u=function(e){for(var t=new Map,n=0,r=e.length;n<r;n++)t.set(e[n],n);return t}(e);for(t.forEach((function(e){if(!u.has(e[0])||!u.has(e[1]))throw new Error("Unknown node. There is an unknown node in the supplied edges.")}));o--;)i[o]||l(e[o],o,new Set);return r;function l(e,t,o){if(o.has(e)){var c;try{c=", node was:"+JSON.stringify(e)}catch(e){c=""}throw new Error("Cyclic dependency"+c)}if(!u.has(e))throw new Error("Found unknown node. Make sure to provided all involved nodes. Unknown node: "+JSON.stringify(e));if(!i[t]){i[t]=!0;var s=a.get(e)||new Set;if(t=(s=Array.from(s)).length){o.add(e);do{var f=s[--t];l(f,u.get(f),o)}while(t);o.delete(e)}r[--n]=e}}}e.exports=function(e){return n(function(e){for(var t=new Set,n=0,r=e.length;n<r;n++){var i=e[n];t.add(i[0]),t.add(i[1])}return Array.from(t)}(e),e)},e.exports.array=n},function(e,t,n){e.exports={wrapper:"_1ERShN3npJpKGp0jbyhOM"}},function(e,t,n){e.exports={bottomPart:"_8EKsxpFBehJ8CM_99Gf9k"}},function(e,t,n){e.exports={bottomPart:"_1M06q6UqoJQqCG9WcWi3Uq"}},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(41),i="function"==typeof Symbol&&Symbol.for,o=i?Symbol.for("react.element"):60103,a=i?Symbol.for("react.portal"):60106,u=i?Symbol.for("react.fragment"):60107,l=i?Symbol.for("react.strict_mode"):60108,c=i?Symbol.for("react.profiler"):60114,s=i?Symbol.for("react.provider"):60109,f=i?Symbol.for("react.context"):60110,d=i?Symbol.for("react.forward_ref"):60112,p=i?Symbol.for("react.suspense"):60113,h=i?Symbol.for("react.memo"):60115,v=i?Symbol.for("react.lazy"):60116,m="function"==typeof Symbol&&Symbol.iterator;function y(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var b={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function w(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}function E(){}function x(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||b}w.prototype.isReactComponent={},w.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(y(85));this.updater.enqueueSetState(this,e,t,"setState")},w.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},E.prototype=w.prototype;var _=x.prototype=new E;_.constructor=x,r(_,w.prototype),_.isPureReactComponent=!0;var S={current:null},k=Object.prototype.hasOwnProperty,T={key:!0,ref:!0,__self:!0,__source:!0};function O(e,t,n){var r,i={},a=null,u=null;if(null!=t)for(r in void 0!==t.ref&&(u=t.ref),void 0!==t.key&&(a=""+t.key),t)k.call(t,r)&&!T.hasOwnProperty(r)&&(i[r]=t[r]);var l=arguments.length-2;if(1===l)i.children=n;else if(1<l){for(var c=Array(l),s=0;s<l;s++)c[s]=arguments[s+2];i.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===i[r]&&(i[r]=l[r]);return{$$typeof:o,type:e,key:a,ref:u,props:i,_owner:S.current}}function C(e){return"object"==typeof e&&null!==e&&e.$$typeof===o}var P=/\/+/g,j=[];function F(e,t,n,r){if(j.length){var i=j.pop();return i.result=e,i.keyPrefix=t,i.func=n,i.context=r,i.count=0,i}return{result:e,keyPrefix:t,func:n,context:r,count:0}}function A(e){e.result=null,e.keyPrefix=null,e.func=null,e.context=null,e.count=0,10>j.length&&j.push(e)}function R(e,t,n){return null==e?0:function e(t,n,r,i){var u=typeof t;"undefined"!==u&&"boolean"!==u||(t=null);var l=!1;if(null===t)l=!0;else switch(u){case"string":case"number":l=!0;break;case"object":switch(t.$$typeof){case o:case a:l=!0}}if(l)return r(i,t,""===n?"."+N(t,0):n),1;if(l=0,n=""===n?".":n+":",Array.isArray(t))for(var c=0;c<t.length;c++){var s=n+N(u=t[c],c);l+=e(u,s,r,i)}else if(null===t||"object"!=typeof t?s=null:s="function"==typeof(s=m&&t[m]||t["@@iterator"])?s:null,"function"==typeof s)for(t=s.call(t),c=0;!(u=t.next()).done;)l+=e(u=u.value,s=n+N(u,c++),r,i);else if("object"===u)throw r=""+t,Error(y(31,"[object Object]"===r?"object with keys {"+Object.keys(t).join(", ")+"}":r,""));return l}(e,"",t,n)}function N(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+(""+e).replace(/[=:]/g,(function(e){return t[e]}))}(e.key):t.toString(36)}function D(e,t){e.func.call(e.context,t,e.count++)}function I(e,t,n){var r=e.result,i=e.keyPrefix;e=e.func.call(e.context,t,e.count++),Array.isArray(e)?M(e,r,n,(function(e){return e})):null!=e&&(C(e)&&(e=function(e,t){return{$$typeof:o,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(e,i+(!e.key||t&&t.key===e.key?"":(""+e.key).replace(P,"$&/")+"/")+n)),r.push(e))}function M(e,t,n,r,i){var o="";null!=n&&(o=(""+n).replace(P,"$&/")+"/"),R(e,I,t=F(t,o,r,i)),A(t)}var z={current:null};function L(){var e=z.current;if(null===e)throw Error(y(321));return e}var U={ReactCurrentDispatcher:z,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:S,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:function(e,t,n){if(null==e)return e;var r=[];return M(e,r,null,t,n),r},forEach:function(e,t,n){if(null==e)return e;R(e,D,t=F(null,null,t,n)),A(t)},count:function(e){return R(e,(function(){return null}),null)},toArray:function(e){var t=[];return M(e,t,null,(function(e){return e})),t},only:function(e){if(!C(e))throw Error(y(143));return e}},t.Component=w,t.Fragment=u,t.Profiler=c,t.PureComponent=x,t.StrictMode=l,t.Suspense=p,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=U,t.cloneElement=function(e,t,n){if(null==e)throw Error(y(267,e));var i=r({},e.props),a=e.key,u=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(u=t.ref,l=S.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(s in t)k.call(t,s)&&!T.hasOwnProperty(s)&&(i[s]=void 0===t[s]&&void 0!==c?c[s]:t[s])}var s=arguments.length-2;if(1===s)i.children=n;else if(1<s){c=Array(s);for(var f=0;f<s;f++)c[f]=arguments[f+2];i.children=c}return{$$typeof:o,type:e.type,key:a,ref:u,props:i,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:f,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=O,t.createFactory=function(e){var t=O.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:d,render:e}},t.isValidElement=C,t.lazy=function(e){return{$$typeof:v,_ctor:e,_status:-1,_result:null}},t.memo=function(e,t){return{$$typeof:h,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return L().useCallback(e,t)},t.useContext=function(e,t){return L().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return L().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return L().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return L().useLayoutEffect(e,t)},t.useMemo=function(e,t){return L().useMemo(e,t)},t.useReducer=function(e,t,n){return L().useReducer(e,t,n)},t.useRef=function(e){return L().useRef(e)},t.useState=function(e){return L().useState(e)},t.version="16.13.1"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r=n(0),i=n(41),o=n(73);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));function u(e,t,n,r,i,o,a,u,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var l=!1,c=null,s=!1,f=null,d={onError:function(e){l=!0,c=e}};function p(e,t,n,r,i,o,a,s,f){l=!1,c=null,u.apply(d,arguments)}var h=null,v=null,m=null;function y(e,t,n){var r=e.type||"unknown-event";e.currentTarget=m(n),function(e,t,n,r,i,o,u,d,h){if(p.apply(this,arguments),l){if(!l)throw Error(a(198));var v=c;l=!1,c=null,s||(s=!0,f=v)}}(r,t,void 0,e),e.currentTarget=null}var b=null,g={};function w(){if(b)for(var e in g){var t=g[e],n=b.indexOf(e);if(!(-1<n))throw Error(a(96,e));if(!x[n]){if(!t.extractEvents)throw Error(a(97,e));for(var r in x[n]=t,n=t.eventTypes){var i=void 0,o=n[r],u=t,l=r;if(_.hasOwnProperty(l))throw Error(a(99,l));_[l]=o;var c=o.phasedRegistrationNames;if(c){for(i in c)c.hasOwnProperty(i)&&E(c[i],u,l);i=!0}else o.registrationName?(E(o.registrationName,u,l),i=!0):i=!1;if(!i)throw Error(a(98,r,e))}}}}function E(e,t,n){if(S[e])throw Error(a(100,e));S[e]=t,k[e]=t.eventTypes[n].dependencies}var x=[],_={},S={},k={};function T(e){var t,n=!1;for(t in e)if(e.hasOwnProperty(t)){var r=e[t];if(!g.hasOwnProperty(t)||g[t]!==r){if(g[t])throw Error(a(102,t));g[t]=r,n=!0}}n&&w()}var O=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),C=null,P=null,j=null;function F(e){if(e=v(e)){if("function"!=typeof C)throw Error(a(280));var t=e.stateNode;t&&(t=h(t),C(e.stateNode,e.type,t))}}function A(e){P?j?j.push(e):j=[e]:P=e}function R(){if(P){var e=P,t=j;if(j=P=null,F(e),t)for(e=0;e<t.length;e++)F(t[e])}}function N(e,t){return e(t)}function D(e,t,n,r,i){return e(t,n,r,i)}function I(){}var M=N,z=!1,L=!1;function U(){null===P&&null===j||(I(),R())}function $(e,t,n){if(L)return e(t,n);L=!0;try{return M(e,t,n)}finally{L=!1,U()}}var V=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,W=Object.prototype.hasOwnProperty,B={},H={};function q(e,t,n,r,i,o){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o}var Q={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){Q[e]=new q(e,0,!1,e,null,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];Q[t]=new q(t,1,!1,e[1],null,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){Q[e]=new q(e,2,!1,e.toLowerCase(),null,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){Q[e]=new q(e,2,!1,e,null,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){Q[e]=new q(e,3,!1,e.toLowerCase(),null,!1)})),["checked","multiple","muted","selected"].forEach((function(e){Q[e]=new q(e,3,!0,e,null,!1)})),["capture","download"].forEach((function(e){Q[e]=new q(e,4,!1,e,null,!1)})),["cols","rows","size","span"].forEach((function(e){Q[e]=new q(e,6,!1,e,null,!1)})),["rowSpan","start"].forEach((function(e){Q[e]=new q(e,5,!1,e.toLowerCase(),null,!1)}));var K=/[\-:]([a-z])/g;function Y(e){return e[1].toUpperCase()}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(K,Y);Q[t]=new q(t,1,!1,e,null,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(K,Y);Q[t]=new q(t,1,!1,e,"http://www.w3.org/1999/xlink",!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(K,Y);Q[t]=new q(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1)})),["tabIndex","crossOrigin"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!1)})),Q.xlinkHref=new q("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0),["src","href","action","formAction"].forEach((function(e){Q[e]=new q(e,1,!1,e.toLowerCase(),null,!0)}));var G=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;function J(e,t,n,r){var i=Q.hasOwnProperty(t)?Q[t]:null;(null!==i?0===i.type:!r&&(2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1])))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!W.call(H,e)||!W.call(B,e)&&(V.test(e)?H[e]=!0:(B[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}G.hasOwnProperty("ReactCurrentDispatcher")||(G.ReactCurrentDispatcher={current:null}),G.hasOwnProperty("ReactCurrentBatchConfig")||(G.ReactCurrentBatchConfig={suspense:null});var X=/^(.*)[\\\/]/,Z="function"==typeof Symbol&&Symbol.for,ee=Z?Symbol.for("react.element"):60103,te=Z?Symbol.for("react.portal"):60106,ne=Z?Symbol.for("react.fragment"):60107,re=Z?Symbol.for("react.strict_mode"):60108,ie=Z?Symbol.for("react.profiler"):60114,oe=Z?Symbol.for("react.provider"):60109,ae=Z?Symbol.for("react.context"):60110,ue=Z?Symbol.for("react.concurrent_mode"):60111,le=Z?Symbol.for("react.forward_ref"):60112,ce=Z?Symbol.for("react.suspense"):60113,se=Z?Symbol.for("react.suspense_list"):60120,fe=Z?Symbol.for("react.memo"):60115,de=Z?Symbol.for("react.lazy"):60116,pe=Z?Symbol.for("react.block"):60121,he="function"==typeof Symbol&&Symbol.iterator;function ve(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=he&&e[he]||e["@@iterator"])?e:null}function me(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case ne:return"Fragment";case te:return"Portal";case ie:return"Profiler";case re:return"StrictMode";case ce:return"Suspense";case se:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case ae:return"Context.Consumer";case oe:return"Context.Provider";case le:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case fe:return me(e.type);case pe:return me(e.render);case de:if(e=1===e._status?e._result:null)return me(e)}return null}function ye(e){var t="";do{e:switch(e.tag){case 3:case 4:case 6:case 7:case 10:case 9:var n="";break e;default:var r=e._debugOwner,i=e._debugSource,o=me(e.type);n=null,r&&(n=me(r.type)),r=o,o="",i?o=" (at "+i.fileName.replace(X,"")+":"+i.lineNumber+")":n&&(o=" (created by "+n+")"),n="\n    in "+(r||"Unknown")+o}t+=n,e=e.return}while(e);return t}function be(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function ge(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function we(e){e._valueTracker||(e._valueTracker=function(e){var t=ge(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Ee(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=ge(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function xe(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function _e(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=be(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function Se(e,t){null!=(t=t.checked)&&J(e,"checked",t,!1)}function ke(e,t){Se(e,t);var n=be(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?Oe(e,t.type,n):t.hasOwnProperty("defaultValue")&&Oe(e,t.type,be(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function Te(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function Oe(e,t,n){"number"===t&&e.ownerDocument.activeElement===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function Ce(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function Pe(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+be(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function je(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function Fe(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:be(n)}}function Ae(e,t){var n=be(t.value),r=be(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function Re(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var Ne="http://www.w3.org/1999/xhtml",De="http://www.w3.org/2000/svg";function Ie(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Me(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?Ie(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var ze,Le=function(e){return"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(t,n,r,i){MSApp.execUnsafeLocalFunction((function(){return e(t,n)}))}:e}((function(e,t){if(e.namespaceURI!==De||"innerHTML"in e)e.innerHTML=t;else{for((ze=ze||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=ze.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}}));function Ue(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}function $e(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var Ve={animationend:$e("Animation","AnimationEnd"),animationiteration:$e("Animation","AnimationIteration"),animationstart:$e("Animation","AnimationStart"),transitionend:$e("Transition","TransitionEnd")},We={},Be={};function He(e){if(We[e])return We[e];if(!Ve[e])return e;var t,n=Ve[e];for(t in n)if(n.hasOwnProperty(t)&&t in Be)return We[e]=n[t];return e}O&&(Be=document.createElement("div").style,"AnimationEvent"in window||(delete Ve.animationend.animation,delete Ve.animationiteration.animation,delete Ve.animationstart.animation),"TransitionEvent"in window||delete Ve.transitionend.transition);var qe=He("animationend"),Qe=He("animationiteration"),Ke=He("animationstart"),Ye=He("transitionend"),Ge="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Je=new("function"==typeof WeakMap?WeakMap:Map);function Xe(e){var t=Je.get(e);return void 0===t&&(t=new Map,Je.set(e,t)),t}function Ze(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{0!=(1026&(t=e).effectTag)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function et(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&(null!==(e=e.alternate)&&(t=e.memoizedState)),null!==t)return t.dehydrated}return null}function tt(e){if(Ze(e)!==e)throw Error(a(188))}function nt(e){if(!(e=function(e){var t=e.alternate;if(!t){if(null===(t=Ze(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return tt(i),e;if(o===r)return tt(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var u=!1,l=i.child;l;){if(l===n){u=!0,n=i,r=o;break}if(l===r){u=!0,r=i,n=o;break}l=l.sibling}if(!u){for(l=o.child;l;){if(l===n){u=!0,n=o,r=i;break}if(l===r){u=!0,r=o,n=i;break}l=l.sibling}if(!u)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e)))return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function rt(e,t){if(null==t)throw Error(a(30));return null==e?t:Array.isArray(e)?Array.isArray(t)?(e.push.apply(e,t),e):(e.push(t),e):Array.isArray(t)?[e].concat(t):[e,t]}function it(e,t,n){Array.isArray(e)?e.forEach(t,n):e&&t.call(n,e)}var ot=null;function at(e){if(e){var t=e._dispatchListeners,n=e._dispatchInstances;if(Array.isArray(t))for(var r=0;r<t.length&&!e.isPropagationStopped();r++)y(e,t[r],n[r]);else t&&y(e,t,n);e._dispatchListeners=null,e._dispatchInstances=null,e.isPersistent()||e.constructor.release(e)}}function ut(e){if(null!==e&&(ot=rt(ot,e)),e=ot,ot=null,e){if(it(e,at),ot)throw Error(a(95));if(s)throw e=f,s=!1,f=null,e}}function lt(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}function ct(e){if(!O)return!1;var t=(e="on"+e)in document;return t||((t=document.createElement("div")).setAttribute(e,"return;"),t="function"==typeof t[e]),t}var st=[];function ft(e){e.topLevelType=null,e.nativeEvent=null,e.targetInst=null,e.ancestors.length=0,10>st.length&&st.push(e)}function dt(e,t,n,r){if(st.length){var i=st.pop();return i.topLevelType=e,i.eventSystemFlags=r,i.nativeEvent=t,i.targetInst=n,i}return{topLevelType:e,eventSystemFlags:r,nativeEvent:t,targetInst:n,ancestors:[]}}function pt(e){var t=e.targetInst,n=t;do{if(!n){e.ancestors.push(n);break}var r=n;if(3===r.tag)r=r.stateNode.containerInfo;else{for(;r.return;)r=r.return;r=3!==r.tag?null:r.stateNode.containerInfo}if(!r)break;5!==(t=n.tag)&&6!==t||e.ancestors.push(n),n=On(r)}while(n);for(n=0;n<e.ancestors.length;n++){t=e.ancestors[n];var i=lt(e.nativeEvent);r=e.topLevelType;var o=e.nativeEvent,a=e.eventSystemFlags;0===n&&(a|=64);for(var u=null,l=0;l<x.length;l++){var c=x[l];c&&(c=c.extractEvents(r,t,o,i,a))&&(u=rt(u,c))}ut(u)}}function ht(e,t,n){if(!n.has(e)){switch(e){case"scroll":Kt(t,"scroll",!0);break;case"focus":case"blur":Kt(t,"focus",!0),Kt(t,"blur",!0),n.set("blur",null),n.set("focus",null);break;case"cancel":case"close":ct(e)&&Kt(t,e,!0);break;case"invalid":case"submit":case"reset":break;default:-1===Ge.indexOf(e)&&Qt(e,t)}n.set(e,null)}}var vt,mt,yt,bt=!1,gt=[],wt=null,Et=null,xt=null,_t=new Map,St=new Map,kt=[],Tt="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ot="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");function Ct(e,t,n,r,i){return{blockedOn:e,topLevelType:t,eventSystemFlags:32|n,nativeEvent:i,container:r}}function Pt(e,t){switch(e){case"focus":case"blur":wt=null;break;case"dragenter":case"dragleave":Et=null;break;case"mouseover":case"mouseout":xt=null;break;case"pointerover":case"pointerout":_t.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":St.delete(t.pointerId)}}function jt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=Ct(t,n,r,i,o),null!==t&&(null!==(t=Cn(t))&&mt(t)),e):(e.eventSystemFlags|=r,e)}function Ft(e){var t=On(e.target);if(null!==t){var n=Ze(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=et(n)))return e.blockedOn=t,void o.unstable_runWithPriority(e.priority,(function(){yt(n)}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function At(e){if(null!==e.blockedOn)return!1;var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);if(null!==t){var n=Cn(t);return null!==n&&mt(n),e.blockedOn=t,!1}return!0}function Rt(e,t,n){At(e)&&n.delete(t)}function Nt(){for(bt=!1;0<gt.length;){var e=gt[0];if(null!==e.blockedOn){null!==(e=Cn(e.blockedOn))&&vt(e);break}var t=Xt(e.topLevelType,e.eventSystemFlags,e.container,e.nativeEvent);null!==t?e.blockedOn=t:gt.shift()}null!==wt&&At(wt)&&(wt=null),null!==Et&&At(Et)&&(Et=null),null!==xt&&At(xt)&&(xt=null),_t.forEach(Rt),St.forEach(Rt)}function Dt(e,t){e.blockedOn===t&&(e.blockedOn=null,bt||(bt=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,Nt)))}function It(e){function t(t){return Dt(t,e)}if(0<gt.length){Dt(gt[0],e);for(var n=1;n<gt.length;n++){var r=gt[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==wt&&Dt(wt,e),null!==Et&&Dt(Et,e),null!==xt&&Dt(xt,e),_t.forEach(t),St.forEach(t),n=0;n<kt.length;n++)(r=kt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<kt.length&&null===(n=kt[0]).blockedOn;)Ft(n),null===n.blockedOn&&kt.shift()}var Mt={},zt=new Map,Lt=new Map,Ut=["abort","abort",qe,"animationEnd",Qe,"animationIteration",Ke,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Ye,"transitionEnd","waiting","waiting"];function $t(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1],o="on"+(i[0].toUpperCase()+i.slice(1));o={phasedRegistrationNames:{bubbled:o,captured:o+"Capture"},dependencies:[r],eventPriority:t},Lt.set(r,t),zt.set(r,o),Mt[i]=o}}$t("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),$t("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),$t(Ut,2);for(var Vt="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Wt=0;Wt<Vt.length;Wt++)Lt.set(Vt[Wt],0);var Bt=o.unstable_UserBlockingPriority,Ht=o.unstable_runWithPriority,qt=!0;function Qt(e,t){Kt(t,e,!1)}function Kt(e,t,n){var r=Lt.get(t);switch(void 0===r?2:r){case 0:r=Yt.bind(null,t,1,e);break;case 1:r=Gt.bind(null,t,1,e);break;default:r=Jt.bind(null,t,1,e)}n?e.addEventListener(t,r,!0):e.addEventListener(t,r,!1)}function Yt(e,t,n,r){z||I();var i=Jt,o=z;z=!0;try{D(i,e,t,n,r)}finally{(z=o)||U()}}function Gt(e,t,n,r){Ht(Bt,Jt.bind(null,e,t,n,r))}function Jt(e,t,n,r){if(qt)if(0<gt.length&&-1<Tt.indexOf(e))e=Ct(null,e,t,n,r),gt.push(e);else{var i=Xt(e,t,n,r);if(null===i)Pt(e,r);else if(-1<Tt.indexOf(e))e=Ct(i,e,t,n,r),gt.push(e);else if(!function(e,t,n,r,i){switch(t){case"focus":return wt=jt(wt,e,t,n,r,i),!0;case"dragenter":return Et=jt(Et,e,t,n,r,i),!0;case"mouseover":return xt=jt(xt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return _t.set(o,jt(_t.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,St.set(o,jt(St.get(o)||null,e,t,n,r,i)),!0}return!1}(i,e,t,n,r)){Pt(e,r),e=dt(e,r,null,t);try{$(pt,e)}finally{ft(e)}}}}function Xt(e,t,n,r){if(null!==(n=On(n=lt(r)))){var i=Ze(n);if(null===i)n=null;else{var o=i.tag;if(13===o){if(null!==(n=et(i)))return n;n=null}else if(3===o){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;n=null}else i!==n&&(n=null)}}e=dt(e,r,n,t);try{$(pt,e)}finally{ft(e)}return null}var Zt={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},en=["Webkit","ms","Moz","O"];function tn(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||Zt.hasOwnProperty(e)&&Zt[e]?(""+t).trim():t+"px"}function nn(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=tn(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(Zt).forEach((function(e){en.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),Zt[t]=Zt[e]}))}));var rn=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function on(e,t){if(t){if(rn[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e,""));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62,""))}}function an(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}var un=Ne;function ln(e,t){var n=Xe(e=9===e.nodeType||11===e.nodeType?e:e.ownerDocument);t=k[t];for(var r=0;r<t.length;r++)ht(t[r],e,n)}function cn(){}function sn(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function fn(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function dn(e,t){var n,r=fn(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fn(r)}}function pn(){for(var e=window,t=sn();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=sn((e=t.contentWindow).document)}return t}function hn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vn=null,mn=null;function yn(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function bn(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var gn="function"==typeof setTimeout?setTimeout:void 0,wn="function"==typeof clearTimeout?clearTimeout:void 0;function En(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function xn(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var _n=Math.random().toString(36).slice(2),Sn="__reactInternalInstance$"+_n,kn="__reactEventHandlers$"+_n,Tn="__reactContainere$"+_n;function On(e){var t=e[Sn];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Tn]||n[Sn]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=xn(e);null!==e;){if(n=e[Sn])return n;e=xn(e)}return t}n=(e=n).parentNode}return null}function Cn(e){return!(e=e[Sn]||e[Tn])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function Pn(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function jn(e){return e[kn]||null}function Fn(e){do{e=e.return}while(e&&5!==e.tag);return e||null}function An(e,t){var n=e.stateNode;if(!n)return null;var r=h(n);if(!r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}function Rn(e,t,n){(t=An(e,n.dispatchConfig.phasedRegistrationNames[t]))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function Nn(e){if(e&&e.dispatchConfig.phasedRegistrationNames){for(var t=e._targetInst,n=[];t;)n.push(t),t=Fn(t);for(t=n.length;0<t--;)Rn(n[t],"captured",e);for(t=0;t<n.length;t++)Rn(n[t],"bubbled",e)}}function Dn(e,t,n){e&&n&&n.dispatchConfig.registrationName&&(t=An(e,n.dispatchConfig.registrationName))&&(n._dispatchListeners=rt(n._dispatchListeners,t),n._dispatchInstances=rt(n._dispatchInstances,e))}function In(e){e&&e.dispatchConfig.registrationName&&Dn(e._targetInst,null,e)}function Mn(e){it(e,Nn)}var zn=null,Ln=null,Un=null;function $n(){if(Un)return Un;var e,t,n=Ln,r=n.length,i="value"in zn?zn.value:zn.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return Un=i.slice(e,1<t?1-t:void 0)}function Vn(){return!0}function Wn(){return!1}function Bn(e,t,n,r){for(var i in this.dispatchConfig=e,this._targetInst=t,this.nativeEvent=n,e=this.constructor.Interface)e.hasOwnProperty(i)&&((t=e[i])?this[i]=t(n):"target"===i?this.target=r:this[i]=n[i]);return this.isDefaultPrevented=(null!=n.defaultPrevented?n.defaultPrevented:!1===n.returnValue)?Vn:Wn,this.isPropagationStopped=Wn,this}function Hn(e,t,n,r){if(this.eventPool.length){var i=this.eventPool.pop();return this.call(i,e,t,n,r),i}return new this(e,t,n,r)}function qn(e){if(!(e instanceof this))throw Error(a(279));e.destructor(),10>this.eventPool.length&&this.eventPool.push(e)}function Qn(e){e.eventPool=[],e.getPooled=Hn,e.release=qn}i(Bn.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=Vn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=Vn)},persist:function(){this.isPersistent=Vn},isPersistent:Wn,destructor:function(){var e,t=this.constructor.Interface;for(e in t)this[e]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null,this.isPropagationStopped=this.isDefaultPrevented=Wn,this._dispatchInstances=this._dispatchListeners=null}}),Bn.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null},Bn.extend=function(e){function t(){}function n(){return r.apply(this,arguments)}var r=this;t.prototype=r.prototype;var o=new t;return i(o,n.prototype),n.prototype=o,n.prototype.constructor=n,n.Interface=i({},r.Interface,e),n.extend=r.extend,Qn(n),n},Qn(Bn);var Kn=Bn.extend({data:null}),Yn=Bn.extend({data:null}),Gn=[9,13,27,32],Jn=O&&"CompositionEvent"in window,Xn=null;O&&"documentMode"in document&&(Xn=document.documentMode);var Zn=O&&"TextEvent"in window&&!Xn,er=O&&(!Jn||Xn&&8<Xn&&11>=Xn),tr=String.fromCharCode(32),nr={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},rr=!1;function ir(e,t){switch(e){case"keyup":return-1!==Gn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"blur":return!0;default:return!1}}function or(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var ar=!1;var ur={eventTypes:nr,extractEvents:function(e,t,n,r){var i;if(Jn)e:{switch(e){case"compositionstart":var o=nr.compositionStart;break e;case"compositionend":o=nr.compositionEnd;break e;case"compositionupdate":o=nr.compositionUpdate;break e}o=void 0}else ar?ir(e,n)&&(o=nr.compositionEnd):"keydown"===e&&229===n.keyCode&&(o=nr.compositionStart);return o?(er&&"ko"!==n.locale&&(ar||o!==nr.compositionStart?o===nr.compositionEnd&&ar&&(i=$n()):(Ln="value"in(zn=r)?zn.value:zn.textContent,ar=!0)),o=Kn.getPooled(o,t,n,r),i?o.data=i:null!==(i=or(n))&&(o.data=i),Mn(o),i=o):i=null,(e=Zn?function(e,t){switch(e){case"compositionend":return or(t);case"keypress":return 32!==t.which?null:(rr=!0,tr);case"textInput":return(e=t.data)===tr&&rr?null:e;default:return null}}(e,n):function(e,t){if(ar)return"compositionend"===e||!Jn&&ir(e,t)?(e=$n(),Un=Ln=zn=null,ar=!1,e):null;switch(e){case"paste":return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return er&&"ko"!==t.locale?null:t.data;default:return null}}(e,n))?((t=Yn.getPooled(nr.beforeInput,t,n,r)).data=e,Mn(t)):t=null,null===i?t:null===t?i:[i,t]}},lr={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function cr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!lr[e.type]:"textarea"===t}var sr={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function fr(e,t,n){return(e=Bn.getPooled(sr.change,e,t,n)).type="change",A(n),Mn(e),e}var dr=null,pr=null;function hr(e){ut(e)}function vr(e){if(Ee(Pn(e)))return e}function mr(e,t){if("change"===e)return t}var yr=!1;function br(){dr&&(dr.detachEvent("onpropertychange",gr),pr=dr=null)}function gr(e){if("value"===e.propertyName&&vr(pr))if(e=fr(pr,e,lt(e)),z)ut(e);else{z=!0;try{N(hr,e)}finally{z=!1,U()}}}function wr(e,t,n){"focus"===e?(br(),pr=n,(dr=t).attachEvent("onpropertychange",gr)):"blur"===e&&br()}function Er(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return vr(pr)}function xr(e,t){if("click"===e)return vr(t)}function _r(e,t){if("input"===e||"change"===e)return vr(t)}O&&(yr=ct("input")&&(!document.documentMode||9<document.documentMode));var Sr={eventTypes:sr,_isInputEventSupported:yr,extractEvents:function(e,t,n,r){var i=t?Pn(t):window,o=i.nodeName&&i.nodeName.toLowerCase();if("select"===o||"input"===o&&"file"===i.type)var a=mr;else if(cr(i))if(yr)a=_r;else{a=Er;var u=wr}else(o=i.nodeName)&&"input"===o.toLowerCase()&&("checkbox"===i.type||"radio"===i.type)&&(a=xr);if(a&&(a=a(e,t)))return fr(a,n,r);u&&u(e,i,t),"blur"===e&&(e=i._wrapperState)&&e.controlled&&"number"===i.type&&Oe(i,"number",i.value)}},kr=Bn.extend({view:null,detail:null}),Tr={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Or(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Tr[e])&&!!t[e]}function Cr(){return Or}var Pr=0,jr=0,Fr=!1,Ar=!1,Rr=kr.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Cr,button:null,buttons:null,relatedTarget:function(e){return e.relatedTarget||(e.fromElement===e.srcElement?e.toElement:e.fromElement)},movementX:function(e){if("movementX"in e)return e.movementX;var t=Pr;return Pr=e.screenX,Fr?"mousemove"===e.type?e.screenX-t:0:(Fr=!0,0)},movementY:function(e){if("movementY"in e)return e.movementY;var t=jr;return jr=e.screenY,Ar?"mousemove"===e.type?e.screenY-t:0:(Ar=!0,0)}}),Nr=Rr.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Dr={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",dependencies:["pointerout","pointerover"]}},Ir={eventTypes:Dr,extractEvents:function(e,t,n,r,i){var o="mouseover"===e||"pointerover"===e,a="mouseout"===e||"pointerout"===e;if(o&&0==(32&i)&&(n.relatedTarget||n.fromElement)||!a&&!o)return null;(o=r.window===r?r:(o=r.ownerDocument)?o.defaultView||o.parentWindow:window,a)?(a=t,null!==(t=(t=n.relatedTarget||n.toElement)?On(t):null)&&(t!==Ze(t)||5!==t.tag&&6!==t.tag)&&(t=null)):a=null;if(a===t)return null;if("mouseout"===e||"mouseover"===e)var u=Rr,l=Dr.mouseLeave,c=Dr.mouseEnter,s="mouse";else"pointerout"!==e&&"pointerover"!==e||(u=Nr,l=Dr.pointerLeave,c=Dr.pointerEnter,s="pointer");if(e=null==a?o:Pn(a),o=null==t?o:Pn(t),(l=u.getPooled(l,a,n,r)).type=s+"leave",l.target=e,l.relatedTarget=o,(n=u.getPooled(c,t,n,r)).type=s+"enter",n.target=o,n.relatedTarget=e,s=t,(r=a)&&s)e:{for(c=s,a=0,e=u=r;e;e=Fn(e))a++;for(e=0,t=c;t;t=Fn(t))e++;for(;0<a-e;)u=Fn(u),a--;for(;0<e-a;)c=Fn(c),e--;for(;a--;){if(u===c||u===c.alternate)break e;u=Fn(u),c=Fn(c)}u=null}else u=null;for(c=u,u=[];r&&r!==c&&(null===(a=r.alternate)||a!==c);)u.push(r),r=Fn(r);for(r=[];s&&s!==c&&(null===(a=s.alternate)||a!==c);)r.push(s),s=Fn(s);for(s=0;s<u.length;s++)Dn(u[s],"bubbled",l);for(s=r.length;0<s--;)Dn(r[s],"captured",n);return 0==(64&i)?[l]:[l,n]}};var Mr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},zr=Object.prototype.hasOwnProperty;function Lr(e,t){if(Mr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!zr.call(t,n[r])||!Mr(e[n[r]],t[n[r]]))return!1;return!0}var Ur=O&&"documentMode"in document&&11>=document.documentMode,$r={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},Vr=null,Wr=null,Br=null,Hr=!1;function qr(e,t){var n=t.window===t?t.document:9===t.nodeType?t:t.ownerDocument;return Hr||null==Vr||Vr!==sn(n)?null:("selectionStart"in(n=Vr)&&hn(n)?n={start:n.selectionStart,end:n.selectionEnd}:n={anchorNode:(n=(n.ownerDocument&&n.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:n.anchorOffset,focusNode:n.focusNode,focusOffset:n.focusOffset},Br&&Lr(Br,n)?null:(Br=n,(e=Bn.getPooled($r.select,Wr,e,t)).type="select",e.target=Vr,Mn(e),e))}var Qr={eventTypes:$r,extractEvents:function(e,t,n,r,i,o){if(!(o=!(i=o||(r.window===r?r.document:9===r.nodeType?r:r.ownerDocument)))){e:{i=Xe(i),o=k.onSelect;for(var a=0;a<o.length;a++)if(!i.has(o[a])){i=!1;break e}i=!0}o=!i}if(o)return null;switch(i=t?Pn(t):window,e){case"focus":(cr(i)||"true"===i.contentEditable)&&(Vr=i,Wr=t,Br=null);break;case"blur":Br=Wr=Vr=null;break;case"mousedown":Hr=!0;break;case"contextmenu":case"mouseup":case"dragend":return Hr=!1,qr(n,r);case"selectionchange":if(Ur)break;case"keydown":case"keyup":return qr(n,r)}return null}},Kr=Bn.extend({animationName:null,elapsedTime:null,pseudoElement:null}),Yr=Bn.extend({clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Gr=kr.extend({relatedTarget:null});function Jr(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}var Xr={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},Zr={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},ei=kr.extend({key:function(e){if(e.key){var t=Xr[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=Jr(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?Zr[e.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Cr,charCode:function(e){return"keypress"===e.type?Jr(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?Jr(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),ti=Rr.extend({dataTransfer:null}),ni=kr.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Cr}),ri=Bn.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),ii=Rr.extend({deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:null,deltaMode:null}),oi={eventTypes:Mt,extractEvents:function(e,t,n,r){var i=zt.get(e);if(!i)return null;switch(e){case"keypress":if(0===Jr(n))return null;case"keydown":case"keyup":e=ei;break;case"blur":case"focus":e=Gr;break;case"click":if(2===n.button)return null;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":e=Rr;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":e=ti;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":e=ni;break;case qe:case Qe:case Ke:e=Kr;break;case Ye:e=ri;break;case"scroll":e=kr;break;case"wheel":e=ii;break;case"copy":case"cut":case"paste":e=Yr;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":e=Nr;break;default:e=Bn}return Mn(t=e.getPooled(i,t,n,r)),t}};if(b)throw Error(a(101));b=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" ")),w(),h=jn,v=Cn,m=Pn,T({SimpleEventPlugin:oi,EnterLeaveEventPlugin:Ir,ChangeEventPlugin:Sr,SelectEventPlugin:Qr,BeforeInputEventPlugin:ur});var ai=[],ui=-1;function li(e){0>ui||(e.current=ai[ui],ai[ui]=null,ui--)}function ci(e,t){ui++,ai[ui]=e.current,e.current=t}var si={},fi={current:si},di={current:!1},pi=si;function hi(e,t){var n=e.type.contextTypes;if(!n)return si;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function vi(e){return null!=(e=e.childContextTypes)}function mi(){li(di),li(fi)}function yi(e,t,n){if(fi.current!==si)throw Error(a(168));ci(fi,t),ci(di,n)}function bi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,me(t)||"Unknown",o));return i({},n,{},r)}function gi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||si,pi=fi.current,ci(fi,e),ci(di,di.current),!0}function wi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=bi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,li(di),li(fi),ci(fi,e)):li(di),ci(di,n)}var Ei=o.unstable_runWithPriority,xi=o.unstable_scheduleCallback,_i=o.unstable_cancelCallback,Si=o.unstable_requestPaint,ki=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Oi=o.unstable_ImmediatePriority,Ci=o.unstable_UserBlockingPriority,Pi=o.unstable_NormalPriority,ji=o.unstable_LowPriority,Fi=o.unstable_IdlePriority,Ai={},Ri=o.unstable_shouldYield,Ni=void 0!==Si?Si:function(){},Di=null,Ii=null,Mi=!1,zi=ki(),Li=1e4>zi?ki:function(){return ki()-zi};function Ui(){switch(Ti()){case Oi:return 99;case Ci:return 98;case Pi:return 97;case ji:return 96;case Fi:return 95;default:throw Error(a(332))}}function $i(e){switch(e){case 99:return Oi;case 98:return Ci;case 97:return Pi;case 96:return ji;case 95:return Fi;default:throw Error(a(332))}}function Vi(e,t){return e=$i(e),Ei(e,t)}function Wi(e,t,n){return e=$i(e),xi(e,t,n)}function Bi(e){return null===Di?(Di=[e],Ii=xi(Oi,qi)):Di.push(e),Ai}function Hi(){if(null!==Ii){var e=Ii;Ii=null,_i(e)}qi()}function qi(){if(!Mi&&null!==Di){Mi=!0;var e=0;try{var t=Di;Vi(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Di=null}catch(t){throw null!==Di&&(Di=Di.slice(e+1)),xi(Oi,Hi),t}finally{Mi=!1}}}function Qi(e,t,n){return 1073741821-(1+((1073741821-e+t/10)/(n/=10)|0))*n}function Ki(e,t){if(e&&e.defaultProps)for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}var Yi={current:null},Gi=null,Ji=null,Xi=null;function Zi(){Xi=Ji=Gi=null}function eo(e){var t=Yi.current;li(Yi),e.type._context._currentValue=t}function to(e,t){for(;null!==e;){var n=e.alternate;if(e.childExpirationTime<t)e.childExpirationTime=t,null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t);else{if(!(null!==n&&n.childExpirationTime<t))break;n.childExpirationTime=t}e=e.return}}function no(e,t){Gi=e,Xi=Ji=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(e.expirationTime>=t&&(ja=!0),e.firstContext=null)}function ro(e,t){if(Xi!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Xi=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Ji){if(null===Gi)throw Error(a(308));Ji=t,Gi.dependencies={expirationTime:0,firstContext:t,responders:null}}else Ji=Ji.next=t;return e._currentValue}var io=!1;function oo(e){e.updateQueue={baseState:e.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}function ao(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,baseQueue:e.baseQueue,shared:e.shared,effects:e.effects})}function uo(e,t){return(e={expirationTime:e,suspenseConfig:t,tag:0,payload:null,callback:null,next:null}).next=e}function lo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function co(e,t){var n=e.alternate;null!==n&&ao(n,e),null===(n=(e=e.updateQueue).baseQueue)?(e.baseQueue=t.next=t,t.next=t):(t.next=n.next,n.next=t)}function so(e,t,n,r){var o=e.updateQueue;io=!1;var a=o.baseQueue,u=o.shared.pending;if(null!==u){if(null!==a){var l=a.next;a.next=u.next,u.next=l}a=u,o.shared.pending=null,null!==(l=e.alternate)&&(null!==(l=l.updateQueue)&&(l.baseQueue=u))}if(null!==a){l=a.next;var c=o.baseState,s=0,f=null,d=null,p=null;if(null!==l)for(var h=l;;){if((u=h.expirationTime)<r){var v={expirationTime:h.expirationTime,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null};null===p?(d=p=v,f=c):p=p.next=v,u>s&&(s=u)}else{null!==p&&(p=p.next={expirationTime:1073741823,suspenseConfig:h.suspenseConfig,tag:h.tag,payload:h.payload,callback:h.callback,next:null}),ol(u,h.suspenseConfig);e:{var m=e,y=h;switch(u=t,v=n,y.tag){case 1:if("function"==typeof(m=y.payload)){c=m.call(v,c,u);break e}c=m;break e;case 3:m.effectTag=-4097&m.effectTag|64;case 0:if(null==(u="function"==typeof(m=y.payload)?m.call(v,c,u):m))break e;c=i({},c,u);break e;case 2:io=!0}}null!==h.callback&&(e.effectTag|=32,null===(u=o.effects)?o.effects=[h]:u.push(h))}if(null===(h=h.next)||h===l){if(null===(u=o.shared.pending))break;h=a.next=u.next,u.next=l,o.baseQueue=a=u,o.shared.pending=null}}null===p?f=c:p.next=d,o.baseState=f,o.baseQueue=p,al(s),e.expirationTime=s,e.memoizedState=c}}function fo(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=i,i=n,"function"!=typeof r)throw Error(a(191,r));r.call(i)}}}var po=G.ReactCurrentBatchConfig,ho=(new r.Component).refs;function vo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.expirationTime&&(e.updateQueue.baseState=n)}var mo={isMounted:function(e){return!!(e=e._reactInternalFiber)&&Ze(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),i=po.suspense;(i=uo(r=Qu(r,e,i),i)).payload=t,null!=n&&(i.callback=n),lo(e,i),Ku(e,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternalFiber;var r=qu(),i=po.suspense;(i=uo(r=Qu(r,e,i),i)).tag=1,i.payload=t,null!=n&&(i.callback=n),lo(e,i),Ku(e,r)},enqueueForceUpdate:function(e,t){e=e._reactInternalFiber;var n=qu(),r=po.suspense;(r=uo(n=Qu(n,e,r),r)).tag=2,null!=t&&(r.callback=t),lo(e,r),Ku(e,n)}};function yo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!t.prototype||!t.prototype.isPureReactComponent||(!Lr(n,r)||!Lr(i,o))}function bo(e,t,n){var r=!1,i=si,o=t.contextType;return"object"==typeof o&&null!==o?o=ro(o):(i=vi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?hi(e,i):si),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=mo,e.stateNode=t,t._reactInternalFiber=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function go(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&mo.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=ho,oo(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=ro(o):(o=vi(t)?pi:fi.current,i.context=hi(e,o)),so(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(vo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&mo.enqueueReplaceState(i,i.state,null),so(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.effectTag|=4)}var Eo=Array.isArray;function xo(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:((t=function(e){var t=r.refs;t===ho&&(t=r.refs={}),null===e?delete t[i]:t[i]=e})._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function _o(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t,""))}function So(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.effectTag=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=Tl(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.effectTag=2,n):r:(t.effectTag=2,n):n}function u(t){return e&&null===t.alternate&&(t.effectTag=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=Pl(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=xo(e,t,n),r.return=e,r):((r=Ol(n.type,n.key,n.props,null,e.mode,r)).ref=xo(e,t,n),r.return=e,r)}function s(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=jl(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function f(e,t,n,r,o){return null===t||7!==t.tag?((t=Cl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function d(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Pl(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case ee:return(n=Ol(t.type,t.key,t.props,null,e.mode,n)).ref=xo(e,null,t),n.return=e,n;case te:return(t=jl(t,e.mode,n)).return=e,t}if(Eo(t)||ve(t))return(t=Cl(t,e.mode,n,null)).return=e,t;_o(e,t)}return null}function p(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case ee:return n.key===i?n.type===ne?f(e,t,n.props.children,r,i):c(e,t,n,r):null;case te:return n.key===i?s(e,t,n,r):null}if(Eo(n)||ve(n))return null!==i?null:f(e,t,n,r,null);_o(e,n)}return null}function h(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case ee:return e=e.get(null===r.key?n:r.key)||null,r.type===ne?f(t,e,r.props.children,i,r.key):c(t,e,r,i);case te:return s(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(Eo(r)||ve(r))return f(t,e=e.get(n)||null,r,i,null);_o(t,r)}return null}function v(i,a,u,l){for(var c=null,s=null,f=a,v=a=0,m=null;null!==f&&v<u.length;v++){f.index>v?(m=f,f=null):m=f.sibling;var y=p(i,f,u[v],l);if(null===y){null===f&&(f=m);break}e&&f&&null===y.alternate&&t(i,f),a=o(y,a,v),null===s?c=y:s.sibling=y,s=y,f=m}if(v===u.length)return n(i,f),c;if(null===f){for(;v<u.length;v++)null!==(f=d(i,u[v],l))&&(a=o(f,a,v),null===s?c=f:s.sibling=f,s=f);return c}for(f=r(i,f);v<u.length;v++)null!==(m=h(f,i,v,u[v],l))&&(e&&null!==m.alternate&&f.delete(null===m.key?v:m.key),a=o(m,a,v),null===s?c=m:s.sibling=m,s=m);return e&&f.forEach((function(e){return t(i,e)})),c}function m(i,u,l,c){var s=ve(l);if("function"!=typeof s)throw Error(a(150));if(null==(l=s.call(l)))throw Error(a(151));for(var f=s=null,v=u,m=u=0,y=null,b=l.next();null!==v&&!b.done;m++,b=l.next()){v.index>m?(y=v,v=null):y=v.sibling;var g=p(i,v,b.value,c);if(null===g){null===v&&(v=y);break}e&&v&&null===g.alternate&&t(i,v),u=o(g,u,m),null===f?s=g:f.sibling=g,f=g,v=y}if(b.done)return n(i,v),s;if(null===v){for(;!b.done;m++,b=l.next())null!==(b=d(i,b.value,c))&&(u=o(b,u,m),null===f?s=b:f.sibling=b,f=b);return s}for(v=r(i,v);!b.done;m++,b=l.next())null!==(b=h(v,i,m,b.value,c))&&(e&&null!==b.alternate&&v.delete(null===b.key?m:b.key),u=o(b,u,m),null===f?s=b:f.sibling=b,f=b);return e&&v.forEach((function(e){return t(i,e)})),s}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===ne&&null===o.key;c&&(o=o.props.children);var s="object"==typeof o&&null!==o;if(s)switch(o.$$typeof){case ee:e:{for(s=o.key,c=r;null!==c;){if(c.key===s){switch(c.tag){case 7:if(o.type===ne){n(e,c.sibling),(r=i(c,o.props.children)).return=e,e=r;break e}break;default:if(c.elementType===o.type){n(e,c.sibling),(r=i(c,o.props)).ref=xo(e,c,o),r.return=e,e=r;break e}}n(e,c);break}t(e,c),c=c.sibling}o.type===ne?((r=Cl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Ol(o.type,o.key,o.props,null,e.mode,l)).ref=xo(e,r,o),l.return=e,e=l)}return u(e);case te:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=jl(o,e.mode,l)).return=e,e=r}return u(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=Pl(o,e.mode,l)).return=e,e=r),u(e);if(Eo(o))return v(e,r,o,l);if(ve(o))return m(e,r,o,l);if(s&&_o(e,o),void 0===o&&!c)switch(e.tag){case 1:case 0:throw e=e.type,Error(a(152,e.displayName||e.name||"Component"))}return n(e,r)}}var ko=So(!0),To=So(!1),Oo={},Co={current:Oo},Po={current:Oo},jo={current:Oo};function Fo(e){if(e===Oo)throw Error(a(174));return e}function Ao(e,t){switch(ci(jo,t),ci(Po,e),ci(Co,Oo),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:Me(null,"");break;default:t=Me(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}li(Co),ci(Co,t)}function Ro(){li(Co),li(Po),li(jo)}function No(e){Fo(jo.current);var t=Fo(Co.current),n=Me(t,e.type);t!==n&&(ci(Po,e),ci(Co,n))}function Do(e){Po.current===e&&(li(Co),li(Po))}var Io={current:0};function Mo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(0!=(64&t.effectTag))return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}function zo(e,t){return{responder:e,props:t}}var Lo=G.ReactCurrentDispatcher,Uo=G.ReactCurrentBatchConfig,$o=0,Vo=null,Wo=null,Bo=null,Ho=!1;function qo(){throw Error(a(321))}function Qo(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!Mr(e[n],t[n]))return!1;return!0}function Ko(e,t,n,r,i,o){if($o=o,Vo=t,t.memoizedState=null,t.updateQueue=null,t.expirationTime=0,Lo.current=null===e||null===e.memoizedState?ya:ba,e=n(r,i),t.expirationTime===$o){o=0;do{if(t.expirationTime=0,!(25>o))throw Error(a(301));o+=1,Bo=Wo=null,t.updateQueue=null,Lo.current=ga,e=n(r,i)}while(t.expirationTime===$o)}if(Lo.current=ma,t=null!==Wo&&null!==Wo.next,$o=0,Bo=Wo=Vo=null,Ho=!1,t)throw Error(a(300));return e}function Yo(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Bo?Vo.memoizedState=Bo=e:Bo=Bo.next=e,Bo}function Go(){if(null===Wo){var e=Vo.alternate;e=null!==e?e.memoizedState:null}else e=Wo.next;var t=null===Bo?Vo.memoizedState:Bo.next;if(null!==t)Bo=t,Wo=e;else{if(null===e)throw Error(a(310));e={memoizedState:(Wo=e).memoizedState,baseState:Wo.baseState,baseQueue:Wo.baseQueue,queue:Wo.queue,next:null},null===Bo?Vo.memoizedState=Bo=e:Bo=Bo.next=e}return Bo}function Jo(e,t){return"function"==typeof t?t(e):t}function Xo(e){var t=Go(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=Wo,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var u=i.next;i.next=o.next,o.next=u}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=u=o=null,c=i;do{var s=c.expirationTime;if(s<$o){var f={expirationTime:c.expirationTime,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(u=l=f,o=r):l=l.next=f,s>Vo.expirationTime&&(Vo.expirationTime=s,al(s))}else null!==l&&(l=l.next={expirationTime:1073741823,suspenseConfig:c.suspenseConfig,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),ol(s,c.suspenseConfig),r=c.eagerReducer===e?c.eagerState:e(r,c.action);c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=u,Mr(r,t.memoizedState)||(ja=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function Zo(e){var t=Go(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var u=i=i.next;do{o=e(o,u.action),u=u.next}while(u!==i);Mr(o,t.memoizedState)||(ja=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function ea(e){var t=Yo();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:Jo,lastRenderedState:e}).dispatch=va.bind(null,Vo,e),[t.memoizedState,e]}function ta(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Vo.updateQueue)?(t={lastEffect:null},Vo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function na(){return Go().memoizedState}function ra(e,t,n,r){var i=Yo();Vo.effectTag|=e,i.memoizedState=ta(1|t,n,void 0,void 0===r?null:r)}function ia(e,t,n,r){var i=Go();r=void 0===r?null:r;var o=void 0;if(null!==Wo){var a=Wo.memoizedState;if(o=a.destroy,null!==r&&Qo(r,a.deps))return void ta(t,n,o,r)}Vo.effectTag|=e,i.memoizedState=ta(1|t,n,o,r)}function oa(e,t){return ra(516,4,e,t)}function aa(e,t){return ia(516,4,e,t)}function ua(e,t){return ia(4,2,e,t)}function la(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function ca(e,t,n){return n=null!=n?n.concat([e]):null,ia(4,2,la.bind(null,t,e),n)}function sa(){}function fa(e,t){return Yo().memoizedState=[e,void 0===t?null:t],e}function da(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qo(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function pa(e,t){var n=Go();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&Qo(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function ha(e,t,n){var r=Ui();Vi(98>r?98:r,(function(){e(!0)})),Vi(97<r?97:r,(function(){var r=Uo.suspense;Uo.suspense=void 0===t?null:t;try{e(!1),n()}finally{Uo.suspense=r}}))}function va(e,t,n){var r=qu(),i=po.suspense;i={expirationTime:r=Qu(r,e,i),suspenseConfig:i,action:n,eagerReducer:null,eagerState:null,next:null};var o=t.pending;if(null===o?i.next=i:(i.next=o.next,o.next=i),t.pending=i,o=e.alternate,e===Vo||null!==o&&o===Vo)Ho=!0,i.expirationTime=$o,Vo.expirationTime=$o;else{if(0===e.expirationTime&&(null===o||0===o.expirationTime)&&null!==(o=t.lastRenderedReducer))try{var a=t.lastRenderedState,u=o(a,n);if(i.eagerReducer=o,i.eagerState=u,Mr(u,a))return}catch(e){}Ku(e,r)}}var ma={readContext:ro,useCallback:qo,useContext:qo,useEffect:qo,useImperativeHandle:qo,useLayoutEffect:qo,useMemo:qo,useReducer:qo,useRef:qo,useState:qo,useDebugValue:qo,useResponder:qo,useDeferredValue:qo,useTransition:qo},ya={readContext:ro,useCallback:fa,useContext:ro,useEffect:oa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ra(4,2,la.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ra(4,2,e,t)},useMemo:function(e,t){var n=Yo();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=Yo();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=va.bind(null,Vo,e),[r.memoizedState,e]},useRef:function(e){return e={current:e},Yo().memoizedState=e},useState:ea,useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=ea(e),r=n[0],i=n[1];return oa((function(){var n=Uo.suspense;Uo.suspense=void 0===t?null:t;try{i(e)}finally{Uo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=ea(!1),n=t[0];return t=t[1],[fa(ha.bind(null,t,e),[t,e]),n]}},ba={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Xo,useRef:na,useState:function(){return Xo(Jo)},useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=Xo(Jo),r=n[0],i=n[1];return aa((function(){var n=Uo.suspense;Uo.suspense=void 0===t?null:t;try{i(e)}finally{Uo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Xo(Jo),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},ga={readContext:ro,useCallback:da,useContext:ro,useEffect:aa,useImperativeHandle:ca,useLayoutEffect:ua,useMemo:pa,useReducer:Zo,useRef:na,useState:function(){return Zo(Jo)},useDebugValue:sa,useResponder:zo,useDeferredValue:function(e,t){var n=Zo(Jo),r=n[0],i=n[1];return aa((function(){var n=Uo.suspense;Uo.suspense=void 0===t?null:t;try{i(e)}finally{Uo.suspense=n}}),[e,t]),r},useTransition:function(e){var t=Zo(Jo),n=t[0];return t=t[1],[da(ha.bind(null,t,e),[t,e]),n]}},wa=null,Ea=null,xa=!1;function _a(e,t){var n=Sl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.effectTag=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Sa(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);case 13:default:return!1}}function ka(e){if(xa){var t=Ea;if(t){var n=t;if(!Sa(e,t)){if(!(t=En(n.nextSibling))||!Sa(e,t))return e.effectTag=-1025&e.effectTag|2,xa=!1,void(wa=e);_a(wa,n)}wa=e,Ea=En(t.firstChild)}else e.effectTag=-1025&e.effectTag|2,xa=!1,wa=e}}function Ta(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;wa=e}function Oa(e){if(e!==wa)return!1;if(!xa)return Ta(e),xa=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!bn(t,e.memoizedProps))for(t=Ea;t;)_a(e,t),t=En(t.nextSibling);if(Ta(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ea=En(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ea=null}}else Ea=wa?En(e.stateNode.nextSibling):null;return!0}function Ca(){Ea=wa=null,xa=!1}var Pa=G.ReactCurrentOwner,ja=!1;function Fa(e,t,n,r){t.child=null===e?To(t,null,n,r):ko(t,e.child,n,r)}function Aa(e,t,n,r,i){n=n.render;var o=t.ref;return no(t,i),r=Ko(e,t,n,r,o,i),null===e||ja?(t.effectTag|=1,Fa(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Ra(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||kl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ol(n.type,null,r,null,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Na(e,t,a,r,i,o))}return a=e.child,i<o&&(i=a.memoizedProps,(n=null!==(n=n.compare)?n:Lr)(i,r)&&e.ref===t.ref)?Ka(e,t,o):(t.effectTag|=1,(e=Tl(a,r)).ref=t.ref,e.return=t,t.child=e)}function Na(e,t,n,r,i,o){return null!==e&&Lr(e.memoizedProps,r)&&e.ref===t.ref&&(ja=!1,i<o)?(t.expirationTime=e.expirationTime,Ka(e,t,o)):Ia(e,t,n,r,o)}function Da(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.effectTag|=128)}function Ia(e,t,n,r,i){var o=vi(n)?pi:fi.current;return o=hi(t,o),no(t,i),n=Ko(e,t,n,r,o,i),null===e||ja?(t.effectTag|=1,Fa(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.effectTag&=-517,e.expirationTime<=i&&(e.expirationTime=0),Ka(e,t,i))}function Ma(e,t,n,r,i){if(vi(n)){var o=!0;gi(t)}else o=!1;if(no(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),bo(t,n,r),wo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,u=t.memoizedProps;a.props=u;var l=a.context,c=n.contextType;"object"==typeof c&&null!==c?c=ro(c):c=hi(t,c=vi(n)?pi:fi.current);var s=n.getDerivedStateFromProps,f="function"==typeof s||"function"==typeof a.getSnapshotBeforeUpdate;f||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&go(t,a,r,c),io=!1;var d=t.memoizedState;a.state=d,so(t,r,a,i),l=t.memoizedState,u!==r||d!==l||di.current||io?("function"==typeof s&&(vo(t,n,s,r),l=t.memoizedState),(u=io||yo(t,n,u,r,d,l,c))?(f||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.effectTag|=4)):("function"==typeof a.componentDidMount&&(t.effectTag|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=u):("function"==typeof a.componentDidMount&&(t.effectTag|=4),r=!1)}else a=t.stateNode,ao(e,t),u=t.memoizedProps,a.props=t.type===t.elementType?u:Ki(t.type,u),l=a.context,"object"==typeof(c=n.contextType)&&null!==c?c=ro(c):c=hi(t,c=vi(n)?pi:fi.current),(f="function"==typeof(s=n.getDerivedStateFromProps)||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(u!==r||l!==c)&&go(t,a,r,c),io=!1,l=t.memoizedState,a.state=l,so(t,r,a,i),d=t.memoizedState,u!==r||l!==d||di.current||io?("function"==typeof s&&(vo(t,n,s,r),d=t.memoizedState),(s=io||yo(t,n,u,r,l,d,c))?(f||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,d,c),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,d,c)),"function"==typeof a.componentDidUpdate&&(t.effectTag|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.effectTag|=256)):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),t.memoizedProps=r,t.memoizedState=d),a.props=r,a.state=d,a.context=c,r=s):("function"!=typeof a.componentDidUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=4),"function"!=typeof a.getSnapshotBeforeUpdate||u===e.memoizedProps&&l===e.memoizedState||(t.effectTag|=256),r=!1);return za(e,t,n,r,o,i)}function za(e,t,n,r,i,o){Da(e,t);var a=0!=(64&t.effectTag);if(!r&&!a)return i&&wi(t,n,!1),Ka(e,t,o);r=t.stateNode,Pa.current=t;var u=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.effectTag|=1,null!==e&&a?(t.child=ko(t,e.child,null,o),t.child=ko(t,null,u,o)):Fa(e,t,u,o),t.memoizedState=r.state,i&&wi(t,n,!0),t.child}function La(e){var t=e.stateNode;t.pendingContext?yi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&yi(0,t.context,!1),Ao(e,t.containerInfo)}var Ua,$a,Va,Wa={dehydrated:null,retryTime:0};function Ba(e,t,n){var r,i=t.mode,o=t.pendingProps,a=Io.current,u=!1;if((r=0!=(64&t.effectTag))||(r=0!=(2&a)&&(null===e||null!==e.memoizedState)),r?(u=!0,t.effectTag&=-65):null!==e&&null===e.memoizedState||void 0===o.fallback||!0===o.unstable_avoidThisFallback||(a|=1),ci(Io,1&a),null===e){if(void 0!==o.fallback&&ka(t),u){if(u=o.fallback,(o=Cl(null,i,0,null)).return=t,0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Cl(u,i,n,null)).return=t,o.sibling=n,t.memoizedState=Wa,t.child=o,n}return i=o.children,t.memoizedState=null,t.child=To(t,null,i,n)}if(null!==e.memoizedState){if(i=(e=e.child).sibling,u){if(o=o.fallback,(n=Tl(e,e.pendingProps)).return=t,0==(2&t.mode)&&(u=null!==t.memoizedState?t.child.child:t.child)!==e.child)for(n.child=u;null!==u;)u.return=n,u=u.sibling;return(i=Tl(i,o)).return=t,n.sibling=i,n.childExpirationTime=0,t.memoizedState=Wa,t.child=n,i}return n=ko(t,e.child,o.children,n),t.memoizedState=null,t.child=n}if(e=e.child,u){if(u=o.fallback,(o=Cl(null,i,0,null)).return=t,o.child=e,null!==e&&(e.return=o),0==(2&t.mode))for(e=null!==t.memoizedState?t.child.child:t.child,o.child=e;null!==e;)e.return=o,e=e.sibling;return(n=Cl(u,i,n,null)).return=t,o.sibling=n,n.effectTag|=2,o.childExpirationTime=0,t.memoizedState=Wa,t.child=o,n}return t.memoizedState=null,t.child=ko(t,e,o.children,n)}function Ha(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t),to(e.return,t)}function qa(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailExpiration:0,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailExpiration=0,a.tailMode=i,a.lastEffect=o)}function Qa(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(Fa(e,t,r.children,n),0!=(2&(r=Io.current)))r=1&r|2,t.effectTag|=64;else{if(null!==e&&0!=(64&e.effectTag))e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Ha(e,n);else if(19===e.tag)Ha(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ci(Io,r),0==(2&t.mode))t.memoizedState=null;else switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===Mo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),qa(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===Mo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}qa(t,!0,n,null,o,t.lastEffect);break;case"together":qa(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}return t.child}function Ka(e,t,n){null!==e&&(t.dependencies=e.dependencies);var r=t.expirationTime;if(0!==r&&al(r),t.childExpirationTime<n)return null;if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=Tl(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Tl(e,e.pendingProps)).return=t;n.sibling=null}return t.child}function Ya(e,t){switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function Ga(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return vi(t.type)&&mi(),null;case 3:return Ro(),li(di),li(fi),(n=t.stateNode).pendingContext&&(n.context=n.pendingContext,n.pendingContext=null),null!==e&&null!==e.child||!Oa(t)||(t.effectTag|=4),null;case 5:Do(t),n=Fo(jo.current);var o=t.type;if(null!==e&&null!=t.stateNode)$a(e,t,o,r,n),e.ref!==t.ref&&(t.effectTag|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Fo(Co.current),Oa(t)){r=t.stateNode,o=t.type;var u=t.memoizedProps;switch(r[Sn]=t,r[kn]=u,o){case"iframe":case"object":case"embed":Qt("load",r);break;case"video":case"audio":for(e=0;e<Ge.length;e++)Qt(Ge[e],r);break;case"source":Qt("error",r);break;case"img":case"image":case"link":Qt("error",r),Qt("load",r);break;case"form":Qt("reset",r),Qt("submit",r);break;case"details":Qt("toggle",r);break;case"input":_e(r,u),Qt("invalid",r),ln(n,"onChange");break;case"select":r._wrapperState={wasMultiple:!!u.multiple},Qt("invalid",r),ln(n,"onChange");break;case"textarea":Fe(r,u),Qt("invalid",r),ln(n,"onChange")}for(var l in on(o,u),e=null,u)if(u.hasOwnProperty(l)){var c=u[l];"children"===l?"string"==typeof c?r.textContent!==c&&(e=["children",c]):"number"==typeof c&&r.textContent!==""+c&&(e=["children",""+c]):S.hasOwnProperty(l)&&null!=c&&ln(n,l)}switch(o){case"input":we(r),Te(r,u,!0);break;case"textarea":we(r),Re(r);break;case"select":case"option":break;default:"function"==typeof u.onClick&&(r.onclick=cn)}n=e,t.updateQueue=n,null!==n&&(t.effectTag|=4)}else{switch(l=9===n.nodeType?n:n.ownerDocument,e===un&&(e=Ie(o)),e===un?"script"===o?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(o,{is:r.is}):(e=l.createElement(o),"select"===o&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,o),e[Sn]=t,e[kn]=r,Ua(e,t),t.stateNode=e,l=an(o,r),o){case"iframe":case"object":case"embed":Qt("load",e),c=r;break;case"video":case"audio":for(c=0;c<Ge.length;c++)Qt(Ge[c],e);c=r;break;case"source":Qt("error",e),c=r;break;case"img":case"image":case"link":Qt("error",e),Qt("load",e),c=r;break;case"form":Qt("reset",e),Qt("submit",e),c=r;break;case"details":Qt("toggle",e),c=r;break;case"input":_e(e,r),c=xe(e,r),Qt("invalid",e),ln(n,"onChange");break;case"option":c=Ce(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},c=i({},r,{value:void 0}),Qt("invalid",e),ln(n,"onChange");break;case"textarea":Fe(e,r),c=je(e,r),Qt("invalid",e),ln(n,"onChange");break;default:c=r}on(o,c);var s=c;for(u in s)if(s.hasOwnProperty(u)){var f=s[u];"style"===u?nn(e,f):"dangerouslySetInnerHTML"===u?null!=(f=f?f.__html:void 0)&&Le(e,f):"children"===u?"string"==typeof f?("textarea"!==o||""!==f)&&Ue(e,f):"number"==typeof f&&Ue(e,""+f):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(S.hasOwnProperty(u)?null!=f&&ln(n,u):null!=f&&J(e,u,f,l))}switch(o){case"input":we(e),Te(e,r,!1);break;case"textarea":we(e),Re(e);break;case"option":null!=r.value&&e.setAttribute("value",""+be(r.value));break;case"select":e.multiple=!!r.multiple,null!=(n=r.value)?Pe(e,!!r.multiple,n,!1):null!=r.defaultValue&&Pe(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof c.onClick&&(e.onclick=cn)}yn(o,r)&&(t.effectTag|=4)}null!==t.ref&&(t.effectTag|=128)}return null;case 6:if(e&&null!=t.stateNode)Va(0,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Fo(jo.current),Fo(Co.current),Oa(t)?(n=t.stateNode,r=t.memoizedProps,n[Sn]=t,n.nodeValue!==r&&(t.effectTag|=4)):((n=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Sn]=t,t.stateNode=n)}return null;case 13:return li(Io),r=t.memoizedState,0!=(64&t.effectTag)?(t.expirationTime=n,t):(n=null!==r,r=!1,null===e?void 0!==t.memoizedProps.fallback&&Oa(t):(r=null!==(o=e.memoizedState),n||null===o||null!==(o=e.child.sibling)&&(null!==(u=t.firstEffect)?(t.firstEffect=o,o.nextEffect=u):(t.firstEffect=t.lastEffect=o,o.nextEffect=null),o.effectTag=8)),n&&!r&&0!=(2&t.mode)&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||0!=(1&Io.current)?Ou===wu&&(Ou=Eu):(Ou!==wu&&Ou!==Eu||(Ou=xu),0!==Au&&null!==Su&&(Rl(Su,Tu),Nl(Su,Au)))),(n||r)&&(t.effectTag|=4),null);case 4:return Ro(),null;case 10:return eo(t),null;case 17:return vi(t.type)&&mi(),null;case 19:if(li(Io),null===(r=t.memoizedState))return null;if(o=0!=(64&t.effectTag),null===(u=r.rendering)){if(o)Ya(r,!1);else if(Ou!==wu||null!==e&&0!=(64&e.effectTag))for(u=t.child;null!==u;){if(null!==(e=Mo(u))){for(t.effectTag|=64,Ya(r,!1),null!==(o=e.updateQueue)&&(t.updateQueue=o,t.effectTag|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=t.child;null!==r;)u=n,(o=r).effectTag&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(e=o.alternate)?(o.childExpirationTime=0,o.expirationTime=u,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null):(o.childExpirationTime=e.childExpirationTime,o.expirationTime=e.expirationTime,o.child=e.child,o.memoizedProps=e.memoizedProps,o.memoizedState=e.memoizedState,o.updateQueue=e.updateQueue,u=e.dependencies,o.dependencies=null===u?null:{expirationTime:u.expirationTime,firstContext:u.firstContext,responders:u.responders}),r=r.sibling;return ci(Io,1&Io.current|2),t.child}u=u.sibling}}else{if(!o)if(null!==(e=Mo(u))){if(t.effectTag|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.effectTag|=4),Ya(r,!0),null===r.tail&&"hidden"===r.tailMode&&!u.alternate)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Li()-r.renderingStartTime>r.tailExpiration&&1<n&&(t.effectTag|=64,o=!0,Ya(r,!1),t.expirationTime=t.childExpirationTime=n-1);r.isBackwards?(u.sibling=t.child,t.child=u):(null!==(n=r.last)?n.sibling=u:t.child=u,r.last=u)}return null!==r.tail?(0===r.tailExpiration&&(r.tailExpiration=Li()+500),n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Li(),n.sibling=null,t=Io.current,ci(Io,o?1&t|2:1&t),n):null}throw Error(a(156,t.tag))}function Ja(e){switch(e.tag){case 1:vi(e.type)&&mi();var t=e.effectTag;return 4096&t?(e.effectTag=-4097&t|64,e):null;case 3:if(Ro(),li(di),li(fi),0!=(64&(t=e.effectTag)))throw Error(a(285));return e.effectTag=-4097&t|64,e;case 5:return Do(e),null;case 13:return li(Io),4096&(t=e.effectTag)?(e.effectTag=-4097&t|64,e):null;case 19:return li(Io),null;case 4:return Ro(),null;case 10:return eo(e),null;default:return null}}function Xa(e,t){return{value:e,source:t,stack:ye(t)}}Ua=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},$a=function(e,t,n,r,o){var a=e.memoizedProps;if(a!==r){var u,l,c=t.stateNode;switch(Fo(Co.current),e=null,n){case"input":a=xe(c,a),r=xe(c,r),e=[];break;case"option":a=Ce(c,a),r=Ce(c,r),e=[];break;case"select":a=i({},a,{value:void 0}),r=i({},r,{value:void 0}),e=[];break;case"textarea":a=je(c,a),r=je(c,r),e=[];break;default:"function"!=typeof a.onClick&&"function"==typeof r.onClick&&(c.onclick=cn)}for(u in on(n,r),n=null,a)if(!r.hasOwnProperty(u)&&a.hasOwnProperty(u)&&null!=a[u])if("style"===u)for(l in c=a[u])c.hasOwnProperty(l)&&(n||(n={}),n[l]="");else"dangerouslySetInnerHTML"!==u&&"children"!==u&&"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&"autoFocus"!==u&&(S.hasOwnProperty(u)?e||(e=[]):(e=e||[]).push(u,null));for(u in r){var s=r[u];if(c=null!=a?a[u]:void 0,r.hasOwnProperty(u)&&s!==c&&(null!=s||null!=c))if("style"===u)if(c){for(l in c)!c.hasOwnProperty(l)||s&&s.hasOwnProperty(l)||(n||(n={}),n[l]="");for(l in s)s.hasOwnProperty(l)&&c[l]!==s[l]&&(n||(n={}),n[l]=s[l])}else n||(e||(e=[]),e.push(u,n)),n=s;else"dangerouslySetInnerHTML"===u?(s=s?s.__html:void 0,c=c?c.__html:void 0,null!=s&&c!==s&&(e=e||[]).push(u,s)):"children"===u?c===s||"string"!=typeof s&&"number"!=typeof s||(e=e||[]).push(u,""+s):"suppressContentEditableWarning"!==u&&"suppressHydrationWarning"!==u&&(S.hasOwnProperty(u)?(null!=s&&ln(o,u),e||c===s||(e=[])):(e=e||[]).push(u,s))}n&&(e=e||[]).push("style",n),o=e,(t.updateQueue=o)&&(t.effectTag|=4)}},Va=function(e,t,n,r){n!==r&&(t.effectTag|=4)};var Za="function"==typeof WeakSet?WeakSet:Set;function eu(e,t){var n=t.source,r=t.stack;null===r&&null!==n&&(r=ye(n)),null!==n&&me(n.type),t=t.value,null!==e&&1===e.tag&&me(e.type);try{console.error(t)}catch(e){setTimeout((function(){throw e}))}}function tu(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){bl(e,t)}else t.current=null}function nu(e,t){switch(t.tag){case 0:case 11:case 15:case 22:return;case 1:if(256&t.effectTag&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Ki(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(a(163))}function ru(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.destroy;n.destroy=void 0,void 0!==r&&r()}n=n.next}while(n!==t)}}function iu(e,t){if(null!==(t=null!==(t=t.updateQueue)?t.lastEffect:null)){var n=t=t.next;do{if((n.tag&e)===e){var r=n.create;n.destroy=r()}n=n.next}while(n!==t)}}function ou(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:return void iu(3,n);case 1:if(e=n.stateNode,4&n.effectTag)if(null===t)e.componentDidMount();else{var r=n.elementType===n.type?t.memoizedProps:Ki(n.type,t.memoizedProps);e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate)}return void(null!==(t=n.updateQueue)&&fo(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:e=n.child.stateNode;break;case 1:e=n.child.stateNode}fo(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.effectTag&&yn(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&It(n)))));case 19:case 17:case 20:case 21:return}throw Error(a(163))}function au(e,t,n){switch("function"==typeof xl&&xl(t),t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var r=e.next;Vi(97<n?97:n,(function(){var e=r;do{var n=e.destroy;if(void 0!==n){var i=t;try{n()}catch(e){bl(i,e)}}e=e.next}while(e!==r)}))}break;case 1:tu(t),"function"==typeof(n=t.stateNode).componentWillUnmount&&function(e,t){try{t.props=e.memoizedProps,t.state=e.memoizedState,t.componentWillUnmount()}catch(t){bl(e,t)}}(t,n);break;case 5:tu(t);break;case 4:su(e,t,n)}}function uu(e){var t=e.alternate;e.return=null,e.child=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null,e.alternate=null,e.firstEffect=null,e.lastEffect=null,e.pendingProps=null,e.memoizedProps=null,e.stateNode=null,null!==t&&uu(t)}function lu(e){return 5===e.tag||3===e.tag||4===e.tag}function cu(e){e:{for(var t=e.return;null!==t;){if(lu(t)){var n=t;break e}t=t.return}throw Error(a(160))}switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.effectTag&&(Ue(t,""),n.effectTag&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||lu(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.effectTag)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.effectTag)){n=n.stateNode;break e}}r?function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?8===r.nodeType?r.parentNode.insertBefore(t,n):r.insertBefore(t,n):(8===r.nodeType?(n=r.parentNode).insertBefore(t,r):(n=r).appendChild(t),null!==(r=r._reactRootContainer)&&void 0!==r||null!==n.onclick||(n.onclick=cn));else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t):function e(t,n,r){var i=t.tag,o=5===i||6===i;if(o)t=o?t.stateNode:t.stateNode.instance,n?r.insertBefore(t,n):r.appendChild(t);else if(4!==i&&null!==(t=t.child))for(e(t,n,r),t=t.sibling;null!==t;)e(t,n,r),t=t.sibling}(e,n,t)}function su(e,t,n){for(var r,i,o=t,u=!1;;){if(!u){u=o.return;e:for(;;){if(null===u)throw Error(a(160));switch(r=u.stateNode,u.tag){case 5:i=!1;break e;case 3:case 4:r=r.containerInfo,i=!0;break e}u=u.return}u=!0}if(5===o.tag||6===o.tag){e:for(var l=e,c=o,s=n,f=c;;)if(au(l,f,s),null!==f.child&&4!==f.tag)f.child.return=f,f=f.child;else{if(f===c)break e;for(;null===f.sibling;){if(null===f.return||f.return===c)break e;f=f.return}f.sibling.return=f.return,f=f.sibling}i?(l=r,c=o.stateNode,8===l.nodeType?l.parentNode.removeChild(c):l.removeChild(c)):r.removeChild(o.stateNode)}else if(4===o.tag){if(null!==o.child){r=o.stateNode.containerInfo,i=!0,o.child.return=o,o=o.child;continue}}else if(au(e,o,n),null!==o.child){o.child.return=o,o=o.child;continue}if(o===t)break;for(;null===o.sibling;){if(null===o.return||o.return===t)return;4===(o=o.return).tag&&(u=!1)}o.sibling.return=o.return,o=o.sibling}}function fu(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:return void ru(3,t);case 1:return;case 5:var n=t.stateNode;if(null!=n){var r=t.memoizedProps,i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[kn]=r,"input"===e&&"radio"===r.type&&null!=r.name&&Se(n,r),an(e,i),t=an(e,r),i=0;i<o.length;i+=2){var u=o[i],l=o[i+1];"style"===u?nn(n,l):"dangerouslySetInnerHTML"===u?Le(n,l):"children"===u?Ue(n,l):J(n,u,l,t)}switch(e){case"input":ke(n,r);break;case"textarea":Ae(n,r);break;case"select":t=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(e=r.value)?Pe(n,!!r.multiple,e,!1):t!==!!r.multiple&&(null!=r.defaultValue?Pe(n,!!r.multiple,r.defaultValue,!0):Pe(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((t=t.stateNode).hydrate&&(t.hydrate=!1,It(t.containerInfo)));case 12:return;case 13:if(n=t,null===t.memoizedState?r=!1:(r=!0,n=t.child,Nu=Li()),null!==n)e:for(e=n;;){if(5===e.tag)o=e.stateNode,r?"function"==typeof(o=o.style).setProperty?o.setProperty("display","none","important"):o.display="none":(o=e.stateNode,i=null!=(i=e.memoizedProps.style)&&i.hasOwnProperty("display")?i.display:null,o.style.display=tn("display",i));else if(6===e.tag)e.stateNode.nodeValue=r?"":e.memoizedProps;else{if(13===e.tag&&null!==e.memoizedState&&null===e.memoizedState.dehydrated){(o=e.child.sibling).return=e,e=o;continue}if(null!==e.child){e.child.return=e,e=e.child;continue}}if(e===n)break;for(;null===e.sibling;){if(null===e.return||e.return===n)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}return void du(t);case 19:return void du(t);case 17:return}throw Error(a(163))}function du(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new Za),t.forEach((function(t){var r=wl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}var pu="function"==typeof WeakMap?WeakMap:Map;function hu(e,t,n){(n=uo(n,null)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Iu||(Iu=!0,Mu=r),eu(e,t)},n}function vu(e,t,n){(n=uo(n,null)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return eu(e,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===zu?zu=new Set([this]):zu.add(this),eu(e,t));var n=t.stack;this.componentDidCatch(t.value,{componentStack:null!==n?n:""})}),n}var mu,yu=Math.ceil,bu=G.ReactCurrentDispatcher,gu=G.ReactCurrentOwner,wu=0,Eu=3,xu=4,_u=0,Su=null,ku=null,Tu=0,Ou=wu,Cu=null,Pu=1073741823,ju=1073741823,Fu=null,Au=0,Ru=!1,Nu=0,Du=null,Iu=!1,Mu=null,zu=null,Lu=!1,Uu=null,$u=90,Vu=null,Wu=0,Bu=null,Hu=0;function qu(){return 0!=(48&_u)?1073741821-(Li()/10|0):0!==Hu?Hu:Hu=1073741821-(Li()/10|0)}function Qu(e,t,n){if(0==(2&(t=t.mode)))return 1073741823;var r=Ui();if(0==(4&t))return 99===r?1073741823:1073741822;if(0!=(16&_u))return Tu;if(null!==n)e=Qi(e,0|n.timeoutMs||5e3,250);else switch(r){case 99:e=1073741823;break;case 98:e=Qi(e,150,100);break;case 97:case 96:e=Qi(e,5e3,250);break;case 95:e=2;break;default:throw Error(a(326))}return null!==Su&&e===Tu&&--e,e}function Ku(e,t){if(50<Wu)throw Wu=0,Bu=null,Error(a(185));if(null!==(e=Yu(e,t))){var n=Ui();1073741823===t?0!=(8&_u)&&0==(48&_u)?Zu(e):(Ju(e),0===_u&&Hi()):Ju(e),0==(4&_u)||98!==n&&99!==n||(null===Vu?Vu=new Map([[e,t]]):(void 0===(n=Vu.get(e))||n>t)&&Vu.set(e,t))}}function Yu(e,t){e.expirationTime<t&&(e.expirationTime=t);var n=e.alternate;null!==n&&n.expirationTime<t&&(n.expirationTime=t);var r=e.return,i=null;if(null===r&&3===e.tag)i=e.stateNode;else for(;null!==r;){if(n=r.alternate,r.childExpirationTime<t&&(r.childExpirationTime=t),null!==n&&n.childExpirationTime<t&&(n.childExpirationTime=t),null===r.return&&3===r.tag){i=r.stateNode;break}r=r.return}return null!==i&&(Su===i&&(al(t),Ou===xu&&Rl(i,Tu)),Nl(i,t)),i}function Gu(e){var t=e.lastExpiredTime;if(0!==t)return t;if(!Al(e,t=e.firstPendingTime))return t;var n=e.lastPingedTime;return 2>=(e=n>(e=e.nextKnownPendingLevel)?n:e)&&t!==e?0:e}function Ju(e){if(0!==e.lastExpiredTime)e.callbackExpirationTime=1073741823,e.callbackPriority=99,e.callbackNode=Bi(Zu.bind(null,e));else{var t=Gu(e),n=e.callbackNode;if(0===t)null!==n&&(e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90);else{var r=qu();if(1073741823===t?r=99:1===t||2===t?r=95:r=0>=(r=10*(1073741821-t)-10*(1073741821-r))?99:250>=r?98:5250>=r?97:95,null!==n){var i=e.callbackPriority;if(e.callbackExpirationTime===t&&i>=r)return;n!==Ai&&_i(n)}e.callbackExpirationTime=t,e.callbackPriority=r,t=1073741823===t?Bi(Zu.bind(null,e)):Wi(r,Xu.bind(null,e),{timeout:10*(1073741821-t)-Li()}),e.callbackNode=t}}}function Xu(e,t){if(Hu=0,t)return Dl(e,t=qu()),Ju(e),null;var n=Gu(e);if(0!==n){if(t=e.callbackNode,0!=(48&_u))throw Error(a(327));if(vl(),e===Su&&n===Tu||nl(e,n),null!==ku){var r=_u;_u|=16;for(var i=il();;)try{ll();break}catch(t){rl(e,t)}if(Zi(),_u=r,bu.current=i,1===Ou)throw t=Cu,nl(e,n),Rl(e,n),Ju(e),t;if(null===ku)switch(i=e.finishedWork=e.current.alternate,e.finishedExpirationTime=n,r=Ou,Su=null,r){case wu:case 1:throw Error(a(345));case 2:Dl(e,2<n?2:n);break;case Eu:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),1073741823===Pu&&10<(i=Nu+500-Li())){if(Ru){var o=e.lastPingedTime;if(0===o||o>=n){e.lastPingedTime=n,nl(e,n);break}}if(0!==(o=Gu(e))&&o!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}e.timeoutHandle=gn(dl.bind(null,e),i);break}dl(e);break;case xu:if(Rl(e,n),n===(r=e.lastSuspendedTime)&&(e.nextKnownPendingLevel=fl(i)),Ru&&(0===(i=e.lastPingedTime)||i>=n)){e.lastPingedTime=n,nl(e,n);break}if(0!==(i=Gu(e))&&i!==n)break;if(0!==r&&r!==n){e.lastPingedTime=r;break}if(1073741823!==ju?r=10*(1073741821-ju)-Li():1073741823===Pu?r=0:(r=10*(1073741821-Pu)-5e3,0>(r=(i=Li())-r)&&(r=0),(n=10*(1073741821-n)-i)<(r=(120>r?120:480>r?480:1080>r?1080:1920>r?1920:3e3>r?3e3:4320>r?4320:1960*yu(r/1960))-r)&&(r=n)),10<r){e.timeoutHandle=gn(dl.bind(null,e),r);break}dl(e);break;case 5:if(1073741823!==Pu&&null!==Fu){o=Pu;var u=Fu;if(0>=(r=0|u.busyMinDurationMs)?r=0:(i=0|u.busyDelayMs,r=(o=Li()-(10*(1073741821-o)-(0|u.timeoutMs||5e3)))<=i?0:i+r-o),10<r){Rl(e,n),e.timeoutHandle=gn(dl.bind(null,e),r);break}}dl(e);break;default:throw Error(a(329))}if(Ju(e),e.callbackNode===t)return Xu.bind(null,e)}}return null}function Zu(e){var t=e.lastExpiredTime;if(t=0!==t?t:1073741823,0!=(48&_u))throw Error(a(327));if(vl(),e===Su&&t===Tu||nl(e,t),null!==ku){var n=_u;_u|=16;for(var r=il();;)try{ul();break}catch(t){rl(e,t)}if(Zi(),_u=n,bu.current=r,1===Ou)throw n=Cu,nl(e,t),Rl(e,t),Ju(e),n;if(null!==ku)throw Error(a(261));e.finishedWork=e.current.alternate,e.finishedExpirationTime=t,Su=null,dl(e),Ju(e)}return null}function el(e,t){var n=_u;_u|=1;try{return e(t)}finally{0===(_u=n)&&Hi()}}function tl(e,t){var n=_u;_u&=-2,_u|=8;try{return e(t)}finally{0===(_u=n)&&Hi()}}function nl(e,t){e.finishedWork=null,e.finishedExpirationTime=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,wn(n)),null!==ku)for(n=ku.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&mi();break;case 3:Ro(),li(di),li(fi);break;case 5:Do(r);break;case 4:Ro();break;case 13:case 19:li(Io);break;case 10:eo(r)}n=n.return}Su=e,ku=Tl(e.current,null),Tu=t,Ou=wu,Cu=null,ju=Pu=1073741823,Fu=null,Au=0,Ru=!1}function rl(e,t){for(;;){try{if(Zi(),Lo.current=ma,Ho)for(var n=Vo.memoizedState;null!==n;){var r=n.queue;null!==r&&(r.pending=null),n=n.next}if($o=0,Bo=Wo=Vo=null,Ho=!1,null===ku||null===ku.return)return Ou=1,Cu=t,ku=null;e:{var i=e,o=ku.return,a=ku,u=t;if(t=Tu,a.effectTag|=2048,a.firstEffect=a.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(0==(2&a.mode)){var c=a.alternate;c?(a.updateQueue=c.updateQueue,a.memoizedState=c.memoizedState,a.expirationTime=c.expirationTime):(a.updateQueue=null,a.memoizedState=null)}var s=0!=(1&Io.current),f=o;do{var d;if(d=13===f.tag){var p=f.memoizedState;if(null!==p)d=null!==p.dehydrated;else{var h=f.memoizedProps;d=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!s)}}if(d){var v=f.updateQueue;if(null===v){var m=new Set;m.add(l),f.updateQueue=m}else v.add(l);if(0==(2&f.mode)){if(f.effectTag|=64,a.effectTag&=-2981,1===a.tag)if(null===a.alternate)a.tag=17;else{var y=uo(1073741823,null);y.tag=2,lo(a,y)}a.expirationTime=1073741823;break e}u=void 0,a=t;var b=i.pingCache;if(null===b?(b=i.pingCache=new pu,u=new Set,b.set(l,u)):void 0===(u=b.get(l))&&(u=new Set,b.set(l,u)),!u.has(a)){u.add(a);var g=gl.bind(null,i,l,a);l.then(g,g)}f.effectTag|=4096,f.expirationTime=t;break e}f=f.return}while(null!==f);u=Error((me(a.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+ye(a))}5!==Ou&&(Ou=2),u=Xa(u,a),f=o;do{switch(f.tag){case 3:l=u,f.effectTag|=4096,f.expirationTime=t,co(f,hu(f,l,t));break e;case 1:l=u;var w=f.type,E=f.stateNode;if(0==(64&f.effectTag)&&("function"==typeof w.getDerivedStateFromError||null!==E&&"function"==typeof E.componentDidCatch&&(null===zu||!zu.has(E)))){f.effectTag|=4096,f.expirationTime=t,co(f,vu(f,l,t));break e}}f=f.return}while(null!==f)}ku=sl(ku)}catch(e){t=e;continue}break}}function il(){var e=bu.current;return bu.current=ma,null===e?ma:e}function ol(e,t){e<Pu&&2<e&&(Pu=e),null!==t&&e<ju&&2<e&&(ju=e,Fu=t)}function al(e){e>Au&&(Au=e)}function ul(){for(;null!==ku;)ku=cl(ku)}function ll(){for(;null!==ku&&!Ri();)ku=cl(ku)}function cl(e){var t=mu(e.alternate,e,Tu);return e.memoizedProps=e.pendingProps,null===t&&(t=sl(e)),gu.current=null,t}function sl(e){ku=e;do{var t=ku.alternate;if(e=ku.return,0==(2048&ku.effectTag)){if(t=Ga(t,ku,Tu),1===Tu||1!==ku.childExpirationTime){for(var n=0,r=ku.child;null!==r;){var i=r.expirationTime,o=r.childExpirationTime;i>n&&(n=i),o>n&&(n=o),r=r.sibling}ku.childExpirationTime=n}if(null!==t)return t;null!==e&&0==(2048&e.effectTag)&&(null===e.firstEffect&&(e.firstEffect=ku.firstEffect),null!==ku.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=ku.firstEffect),e.lastEffect=ku.lastEffect),1<ku.effectTag&&(null!==e.lastEffect?e.lastEffect.nextEffect=ku:e.firstEffect=ku,e.lastEffect=ku))}else{if(null!==(t=Ja(ku)))return t.effectTag&=2047,t;null!==e&&(e.firstEffect=e.lastEffect=null,e.effectTag|=2048)}if(null!==(t=ku.sibling))return t;ku=e}while(null!==ku);return Ou===wu&&(Ou=5),null}function fl(e){var t=e.expirationTime;return t>(e=e.childExpirationTime)?t:e}function dl(e){var t=Ui();return Vi(99,pl.bind(null,e,t)),null}function pl(e,t){do{vl()}while(null!==Uu);if(0!=(48&_u))throw Error(a(327));var n=e.finishedWork,r=e.finishedExpirationTime;if(null===n)return null;if(e.finishedWork=null,e.finishedExpirationTime=0,n===e.current)throw Error(a(177));e.callbackNode=null,e.callbackExpirationTime=0,e.callbackPriority=90,e.nextKnownPendingLevel=0;var i=fl(n);if(e.firstPendingTime=i,r<=e.lastSuspendedTime?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:r<=e.firstSuspendedTime&&(e.firstSuspendedTime=r-1),r<=e.lastPingedTime&&(e.lastPingedTime=0),r<=e.lastExpiredTime&&(e.lastExpiredTime=0),e===Su&&(ku=Su=null,Tu=0),1<n.effectTag?null!==n.lastEffect?(n.lastEffect.nextEffect=n,i=n.firstEffect):i=n:i=n.firstEffect,null!==i){var o=_u;_u|=32,gu.current=null,vn=qt;var u=pn();if(hn(u)){if("selectionStart"in u)var l={start:u.selectionStart,end:u.selectionEnd};else e:{var c=(l=(l=u.ownerDocument)&&l.defaultView||window).getSelection&&l.getSelection();if(c&&0!==c.rangeCount){l=c.anchorNode;var s=c.anchorOffset,f=c.focusNode;c=c.focusOffset;try{l.nodeType,f.nodeType}catch(e){l=null;break e}var d=0,p=-1,h=-1,v=0,m=0,y=u,b=null;t:for(;;){for(var g;y!==l||0!==s&&3!==y.nodeType||(p=d+s),y!==f||0!==c&&3!==y.nodeType||(h=d+c),3===y.nodeType&&(d+=y.nodeValue.length),null!==(g=y.firstChild);)b=y,y=g;for(;;){if(y===u)break t;if(b===l&&++v===s&&(p=d),b===f&&++m===c&&(h=d),null!==(g=y.nextSibling))break;b=(y=b).parentNode}y=g}l=-1===p||-1===h?null:{start:p,end:h}}else l=null}l=l||{start:0,end:0}}else l=null;mn={activeElementDetached:null,focusedElem:u,selectionRange:l},qt=!1,Du=i;do{try{hl()}catch(e){if(null===Du)throw Error(a(330));bl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=i;do{try{for(u=e,l=t;null!==Du;){var w=Du.effectTag;if(16&w&&Ue(Du.stateNode,""),128&w){var E=Du.alternate;if(null!==E){var x=E.ref;null!==x&&("function"==typeof x?x(null):x.current=null)}}switch(1038&w){case 2:cu(Du),Du.effectTag&=-3;break;case 6:cu(Du),Du.effectTag&=-3,fu(Du.alternate,Du);break;case 1024:Du.effectTag&=-1025;break;case 1028:Du.effectTag&=-1025,fu(Du.alternate,Du);break;case 4:fu(Du.alternate,Du);break;case 8:su(u,s=Du,l),uu(s)}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));bl(Du,e),Du=Du.nextEffect}}while(null!==Du);if(x=mn,E=pn(),w=x.focusedElem,l=x.selectionRange,E!==w&&w&&w.ownerDocument&&function e(t,n){return!(!t||!n)&&(t===n||(!t||3!==t.nodeType)&&(n&&3===n.nodeType?e(t,n.parentNode):"contains"in t?t.contains(n):!!t.compareDocumentPosition&&!!(16&t.compareDocumentPosition(n))))}(w.ownerDocument.documentElement,w)){null!==l&&hn(w)&&(E=l.start,void 0===(x=l.end)&&(x=E),"selectionStart"in w?(w.selectionStart=E,w.selectionEnd=Math.min(x,w.value.length)):(x=(E=w.ownerDocument||document)&&E.defaultView||window).getSelection&&(x=x.getSelection(),s=w.textContent.length,u=Math.min(l.start,s),l=void 0===l.end?u:Math.min(l.end,s),!x.extend&&u>l&&(s=l,l=u,u=s),s=dn(w,u),f=dn(w,l),s&&f&&(1!==x.rangeCount||x.anchorNode!==s.node||x.anchorOffset!==s.offset||x.focusNode!==f.node||x.focusOffset!==f.offset)&&((E=E.createRange()).setStart(s.node,s.offset),x.removeAllRanges(),u>l?(x.addRange(E),x.extend(f.node,f.offset)):(E.setEnd(f.node,f.offset),x.addRange(E))))),E=[];for(x=w;x=x.parentNode;)1===x.nodeType&&E.push({element:x,left:x.scrollLeft,top:x.scrollTop});for("function"==typeof w.focus&&w.focus(),w=0;w<E.length;w++)(x=E[w]).element.scrollLeft=x.left,x.element.scrollTop=x.top}qt=!!vn,mn=vn=null,e.current=n,Du=i;do{try{for(w=e;null!==Du;){var _=Du.effectTag;if(36&_&&ou(w,Du.alternate,Du),128&_){E=void 0;var S=Du.ref;if(null!==S){var k=Du.stateNode;switch(Du.tag){case 5:E=k;break;default:E=k}"function"==typeof S?S(E):S.current=E}}Du=Du.nextEffect}}catch(e){if(null===Du)throw Error(a(330));bl(Du,e),Du=Du.nextEffect}}while(null!==Du);Du=null,Ni(),_u=o}else e.current=n;if(Lu)Lu=!1,Uu=e,$u=t;else for(Du=i;null!==Du;)t=Du.nextEffect,Du.nextEffect=null,Du=t;if(0===(t=e.firstPendingTime)&&(zu=null),1073741823===t?e===Bu?Wu++:(Wu=0,Bu=e):Wu=0,"function"==typeof El&&El(n.stateNode,r),Ju(e),Iu)throw Iu=!1,e=Mu,Mu=null,e;return 0!=(8&_u)||Hi(),null}function hl(){for(;null!==Du;){var e=Du.effectTag;0!=(256&e)&&nu(Du.alternate,Du),0==(512&e)||Lu||(Lu=!0,Wi(97,(function(){return vl(),null}))),Du=Du.nextEffect}}function vl(){if(90!==$u){var e=97<$u?97:$u;return $u=90,Vi(e,ml)}}function ml(){if(null===Uu)return!1;var e=Uu;if(Uu=null,0!=(48&_u))throw Error(a(331));var t=_u;for(_u|=32,e=e.current.firstEffect;null!==e;){try{var n=e;if(0!=(512&n.effectTag))switch(n.tag){case 0:case 11:case 15:case 22:ru(5,n),iu(5,n)}}catch(t){if(null===e)throw Error(a(330));bl(e,t)}n=e.nextEffect,e.nextEffect=null,e=n}return _u=t,Hi(),!0}function yl(e,t,n){lo(e,t=hu(e,t=Xa(n,t),1073741823)),null!==(e=Yu(e,1073741823))&&Ju(e)}function bl(e,t){if(3===e.tag)yl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){yl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===zu||!zu.has(r))){lo(n,e=vu(n,e=Xa(t,e),1073741823)),null!==(n=Yu(n,1073741823))&&Ju(n);break}}n=n.return}}function gl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),Su===e&&Tu===n?Ou===xu||Ou===Eu&&1073741823===Pu&&Li()-Nu<500?nl(e,Tu):Ru=!0:Al(e,n)&&(0!==(t=e.lastPingedTime)&&t<n||(e.lastPingedTime=n,Ju(e)))}function wl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0===(t=0)&&(t=Qu(t=qu(),e,null)),null!==(e=Yu(e,t))&&Ju(e)}mu=function(e,t,n){var r=t.expirationTime;if(null!==e){var i=t.pendingProps;if(e.memoizedProps!==i||di.current)ja=!0;else{if(r<n){switch(ja=!1,t.tag){case 3:La(t),Ca();break;case 5:if(No(t),4&t.mode&&1!==n&&i.hidden)return t.expirationTime=t.childExpirationTime=1,null;break;case 1:vi(t.type)&&gi(t);break;case 4:Ao(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value,i=t.type._context,ci(Yi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return 0!==(r=t.child.childExpirationTime)&&r>=n?Ba(e,t,n):(ci(Io,1&Io.current),null!==(t=Ka(e,t,n))?t.sibling:null);ci(Io,1&Io.current);break;case 19:if(r=t.childExpirationTime>=n,0!=(64&e.effectTag)){if(r)return Qa(e,t,n);t.effectTag|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null),ci(Io,Io.current),!r)return null}return Ka(e,t,n)}ja=!1}}else ja=!1;switch(t.expirationTime=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,i=hi(t,fi.current),no(t,n),i=Ko(null,t,r,e,i,n),t.effectTag|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,vi(r)){var o=!0;gi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,oo(t);var u=r.getDerivedStateFromProps;"function"==typeof u&&vo(t,r,u,e),i.updater=mo,t.stateNode=i,i._reactInternalFiber=t,wo(t,r,e,n),t=za(null,t,r,!0,o,n)}else t.tag=0,Fa(null,t,i,n),t=t.child;return t;case 16:e:{if(i=t.elementType,null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),e=t.pendingProps,function(e){if(-1===e._status){e._status=0;var t=e._ctor;t=t(),e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}}(i),1!==i._status)throw i._result;switch(i=i._result,t.type=i,o=t.tag=function(e){if("function"==typeof e)return kl(e)?1:0;if(null!=e){if((e=e.$$typeof)===le)return 11;if(e===fe)return 14}return 2}(i),e=Ki(i,e),o){case 0:t=Ia(null,t,i,e,n);break e;case 1:t=Ma(null,t,i,e,n);break e;case 11:t=Aa(null,t,i,e,n);break e;case 14:t=Ra(null,t,i,Ki(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ia(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 1:return r=t.type,i=t.pendingProps,Ma(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 3:if(La(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,ao(e,t),so(t,r,null,n),(r=t.memoizedState.element)===i)Ca(),t=Ka(e,t,n);else{if((i=t.stateNode.hydrate)&&(Ea=En(t.stateNode.containerInfo.firstChild),wa=t,i=xa=!0),i)for(n=To(t,null,r,n),t.child=n;n;)n.effectTag=-3&n.effectTag|1024,n=n.sibling;else Fa(e,t,r,n),Ca();t=t.child}return t;case 5:return No(t),null===e&&ka(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,u=i.children,bn(r,i)?u=null:null!==o&&bn(r,o)&&(t.effectTag|=16),Da(e,t),4&t.mode&&1!==n&&i.hidden?(t.expirationTime=t.childExpirationTime=1,t=null):(Fa(e,t,u,n),t=t.child),t;case 6:return null===e&&ka(t),null;case 13:return Ba(e,t,n);case 4:return Ao(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=ko(t,null,r,n):Fa(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,Aa(e,t,r,i=t.elementType===r?i:Ki(r,i),n);case 7:return Fa(e,t,t.pendingProps,n),t.child;case 8:case 12:return Fa(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,u=t.memoizedProps,o=i.value;var l=t.type._context;if(ci(Yi,l._currentValue),l._currentValue=o,null!==u)if(l=u.value,0===(o=Mr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(u.children===i.children&&!di.current){t=Ka(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){u=l.child;for(var s=c.firstContext;null!==s;){if(s.context===r&&0!=(s.observedBits&o)){1===l.tag&&((s=uo(n,null)).tag=2,lo(l,s)),l.expirationTime<n&&(l.expirationTime=n),null!==(s=l.alternate)&&s.expirationTime<n&&(s.expirationTime=n),to(l.return,n),c.expirationTime<n&&(c.expirationTime=n);break}s=s.next}}else u=10===l.tag&&l.type===t.type?null:l.child;if(null!==u)u.return=l;else for(u=l;null!==u;){if(u===t){u=null;break}if(null!==(l=u.sibling)){l.return=u.return,u=l;break}u=u.return}l=u}Fa(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,no(t,n),r=r(i=ro(i,o.unstable_observedBits)),t.effectTag|=1,Fa(e,t,r,n),t.child;case 14:return o=Ki(i=t.type,t.pendingProps),Ra(e,t,i,o=Ki(i.type,o),r,n);case 15:return Na(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Ki(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.effectTag|=2),t.tag=1,vi(r)?(e=!0,gi(t)):e=!1,no(t,n),bo(t,r,i),wo(t,r,i,n),za(null,t,r,!0,e,n);case 19:return Qa(e,t,n)}throw Error(a(156,t.tag))};var El=null,xl=null;function _l(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.effectTag=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childExpirationTime=this.expirationTime=0,this.alternate=null}function Sl(e,t,n,r){return new _l(e,t,n,r)}function kl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Tl(e,t){var n=e.alternate;return null===n?((n=Sl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.effectTag=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childExpirationTime=e.childExpirationTime,n.expirationTime=e.expirationTime,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{expirationTime:t.expirationTime,firstContext:t.firstContext,responders:t.responders},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ol(e,t,n,r,i,o){var u=2;if(r=e,"function"==typeof e)kl(e)&&(u=1);else if("string"==typeof e)u=5;else e:switch(e){case ne:return Cl(n.children,i,o,t);case ue:u=8,i|=7;break;case re:u=8,i|=1;break;case ie:return(e=Sl(12,n,t,8|i)).elementType=ie,e.type=ie,e.expirationTime=o,e;case ce:return(e=Sl(13,n,t,i)).type=ce,e.elementType=ce,e.expirationTime=o,e;case se:return(e=Sl(19,n,t,i)).elementType=se,e.expirationTime=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case oe:u=10;break e;case ae:u=9;break e;case le:u=11;break e;case fe:u=14;break e;case de:u=16,r=null;break e;case pe:u=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Sl(u,n,t,i)).elementType=e,t.type=r,t.expirationTime=o,t}function Cl(e,t,n,r){return(e=Sl(7,e,r,t)).expirationTime=n,e}function Pl(e,t,n){return(e=Sl(6,e,null,t)).expirationTime=n,e}function jl(e,t,n){return(t=Sl(4,null!==e.children?e.children:[],e.key,t)).expirationTime=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Fl(e,t,n){this.tag=t,this.current=null,this.containerInfo=e,this.pingCache=this.pendingChildren=null,this.finishedExpirationTime=0,this.finishedWork=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=90,this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}function Al(e,t){var n=e.firstSuspendedTime;return e=e.lastSuspendedTime,0!==n&&n>=t&&e<=t}function Rl(e,t){var n=e.firstSuspendedTime,r=e.lastSuspendedTime;n<t&&(e.firstSuspendedTime=t),(r>t||0===n)&&(e.lastSuspendedTime=t),t<=e.lastPingedTime&&(e.lastPingedTime=0),t<=e.lastExpiredTime&&(e.lastExpiredTime=0)}function Nl(e,t){t>e.firstPendingTime&&(e.firstPendingTime=t);var n=e.firstSuspendedTime;0!==n&&(t>=n?e.firstSuspendedTime=e.lastSuspendedTime=e.nextKnownPendingLevel=0:t>=e.lastSuspendedTime&&(e.lastSuspendedTime=t+1),t>e.nextKnownPendingLevel&&(e.nextKnownPendingLevel=t))}function Dl(e,t){var n=e.lastExpiredTime;(0===n||n>t)&&(e.lastExpiredTime=t)}function Il(e,t,n,r){var i=t.current,o=qu(),u=po.suspense;o=Qu(o,i,u);e:if(n){t:{if(Ze(n=n._reactInternalFiber)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(vi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(vi(c)){n=bi(n,c,l);break e}}n=l}else n=si;return null===t.context?t.context=n:t.pendingContext=n,(t=uo(o,u)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),lo(i,t),Ku(i,o),o}function Ml(e){if(!(e=e.current).child)return null;switch(e.child.tag){case 5:default:return e.child.stateNode}}function zl(e,t){null!==(e=e.memoizedState)&&null!==e.dehydrated&&e.retryTime<t&&(e.retryTime=t)}function Ll(e,t){zl(e,t),(e=e.alternate)&&zl(e,t)}function Ul(e,t,n){var r=new Fl(e,t,n=null!=n&&!0===n.hydrate),i=Sl(3,null,null,2===t?7:1===t?3:0);r.current=i,i.stateNode=r,oo(i),e[Tn]=r.current,n&&0!==t&&function(e,t){var n=Xe(t);Tt.forEach((function(e){ht(e,t,n)})),Ot.forEach((function(e){ht(e,t,n)}))}(0,9===e.nodeType?e:e.ownerDocument),this._internalRoot=r}function $l(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function Vl(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var u=i;i=function(){var e=Ml(a);u.call(e)}}Il(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Ul(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Ml(a);l.call(e)}}tl((function(){Il(t,a,e,i)}))}return Ml(a)}function Wl(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:te,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}function Bl(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!$l(t))throw Error(a(200));return Wl(e,t,null,n)}Ul.prototype.render=function(e){Il(e,this._internalRoot,null,null)},Ul.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Il(null,e,null,(function(){t[Tn]=null}))},vt=function(e){if(13===e.tag){var t=Qi(qu(),150,100);Ku(e,t),Ll(e,t)}},mt=function(e){13===e.tag&&(Ku(e,3),Ll(e,3))},yt=function(e){if(13===e.tag){var t=qu();Ku(e,t=Qu(t,e,null)),Ll(e,t)}},C=function(e,t,n){switch(t){case"input":if(ke(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=jn(r);if(!i)throw Error(a(90));Ee(r),ke(r,i)}}}break;case"textarea":Ae(e,n);break;case"select":null!=(t=n.value)&&Pe(e,!!n.multiple,t,!1)}},N=el,D=function(e,t,n,r,i){var o=_u;_u|=4;try{return Vi(98,e.bind(null,t,n,r,i))}finally{0===(_u=o)&&Hi()}},I=function(){0==(49&_u)&&(function(){if(null!==Vu){var e=Vu;Vu=null,e.forEach((function(e,t){Dl(t,e),Ju(t)})),Hi()}}(),vl())},M=function(e,t){var n=_u;_u|=2;try{return e(t)}finally{0===(_u=n)&&Hi()}};var Hl,ql,Ql={Events:[Cn,Pn,jn,T,_,Mn,function(e){it(e,In)},A,R,Jt,ut,vl,{current:!1}]};ql=(Hl={findFiberByHostInstance:On,bundleType:0,version:"16.13.1",rendererPackageName:"react-dom"}).findFiberByHostInstance,function(e){if("undefined"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var t=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(t.isDisabled||!t.supportsFiber)return!0;try{var n=t.inject(e);El=function(e){try{t.onCommitFiberRoot(n,e,void 0,64==(64&e.current.effectTag))}catch(e){}},xl=function(e){try{t.onCommitFiberUnmount(n,e)}catch(e){}}}catch(e){}}(i({},Hl,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:G.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=nt(e))?null:e.stateNode},findFiberByHostInstance:function(e){return ql?ql(e):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null})),t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=Ql,t.createPortal=Bl,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternalFiber;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return e=null===(e=nt(t))?null:e.stateNode},t.flushSync=function(e,t){if(0!=(48&_u))throw Error(a(187));var n=_u;_u|=1;try{return Vi(99,e.bind(null,t))}finally{_u=n,Hi()}},t.hydrate=function(e,t,n){if(!$l(t))throw Error(a(200));return Vl(null,e,t,!0,n)},t.render=function(e,t,n){if(!$l(t))throw Error(a(200));return Vl(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!$l(e))throw Error(a(40));return!!e._reactRootContainer&&(tl((function(){Vl(null,null,e,!1,(function(){e._reactRootContainer=null,e[Tn]=null}))})),!0)},t.unstable_batchedUpdates=el,t.unstable_createPortal=function(e,t){return Bl(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!$l(n))throw Error(a(200));if(null==e||void 0===e._reactInternalFiber)throw Error(a(38));return Vl(e,t,n,!1,r)},t.version="16.13.1"},function(e,t,n){"use strict";e.exports=n(74)},function(e,t,n){"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,u;if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var b=!1,g=null,w=-1,E=5,x=0;a=function(){return t.unstable_now()>=x},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,S=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();x=e+E;try{g(!0,e)?S.postMessage(null):(b=!1,g=null)}catch(e){throw S.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,S.postMessage(null))},i=function(e,n){w=h((function(){e(t.unstable_now())}),n)},o=function(){v(w),w=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<C(i,t)))break e;e[r]=t,e[n]=i,n=r}}function T(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>C(a,n))void 0!==l&&0>C(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],j=[],F=1,A=null,R=3,N=!1,D=!1,I=!1;function M(e){for(var t=T(j);null!==t;){if(null===t.callback)O(j);else{if(!(t.startTime<=e))break;O(j),t.sortIndex=t.expirationTime,k(P,t)}t=T(j)}}function z(e){if(I=!1,M(e),!D)if(null!==T(P))D=!0,r(L);else{var t=T(j);null!==t&&i(z,t.startTime-e)}}function L(e,n){D=!1,I&&(I=!1,o()),N=!0;var r=R;try{for(M(n),A=T(P);null!==A&&(!(A.expirationTime>n)||e&&!a());){var u=A.callback;if(null!==u){A.callback=null,R=A.priorityLevel;var l=u(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?A.callback=l:A===T(P)&&O(P),M(n)}else O(P);A=T(P)}if(null!==A)var c=!0;else{var s=T(j);null!==s&&i(z,s.startTime-n),c=!1}return c}finally{A=null,R=r,N=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=u;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){D||N||(D=!0,r(L))},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_getFirstCallbackNode=function(){return T(P)},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=$,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;return e={id:F++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,k(j,e),null===T(P)&&e===T(j)&&(I?o():I=!0,i(z,l-u))):(e.sortIndex=a,k(P,e),D||N||(D=!0,r(L))),e},t.unstable_shouldYield=function(){var e=t.unstable_now();M(e);var n=T(P);return n!==A&&null!==A&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<A.expirationTime||a()},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}}},function(e,t,n){"use strict";var r=n(76);function i(){}function o(){}o.resetWarningCache=i,e.exports=function(){function e(e,t,n,i,o,a){if(a!==r){var u=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw u.name="Invariant Violation",u}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:o,resetWarningCache:i};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r="function"==typeof Symbol&&Symbol.for,i=r?Symbol.for("react.element"):60103,o=r?Symbol.for("react.portal"):60106,a=r?Symbol.for("react.fragment"):60107,u=r?Symbol.for("react.strict_mode"):60108,l=r?Symbol.for("react.profiler"):60114,c=r?Symbol.for("react.provider"):60109,s=r?Symbol.for("react.context"):60110,f=r?Symbol.for("react.async_mode"):60111,d=r?Symbol.for("react.concurrent_mode"):60111,p=r?Symbol.for("react.forward_ref"):60112,h=r?Symbol.for("react.suspense"):60113,v=r?Symbol.for("react.suspense_list"):60120,m=r?Symbol.for("react.memo"):60115,y=r?Symbol.for("react.lazy"):60116,b=r?Symbol.for("react.block"):60121,g=r?Symbol.for("react.fundamental"):60117,w=r?Symbol.for("react.responder"):60118,E=r?Symbol.for("react.scope"):60119;function x(e){if("object"==typeof e&&null!==e){var t=e.$$typeof;switch(t){case i:switch(e=e.type){case f:case d:case a:case l:case u:case h:return e;default:switch(e=e&&e.$$typeof){case s:case p:case y:case m:case c:return e;default:return t}}case o:return t}}}function _(e){return x(e)===d}t.AsyncMode=f,t.ConcurrentMode=d,t.ContextConsumer=s,t.ContextProvider=c,t.Element=i,t.ForwardRef=p,t.Fragment=a,t.Lazy=y,t.Memo=m,t.Portal=o,t.Profiler=l,t.StrictMode=u,t.Suspense=h,t.isAsyncMode=function(e){return _(e)||x(e)===f},t.isConcurrentMode=_,t.isContextConsumer=function(e){return x(e)===s},t.isContextProvider=function(e){return x(e)===c},t.isElement=function(e){return"object"==typeof e&&null!==e&&e.$$typeof===i},t.isForwardRef=function(e){return x(e)===p},t.isFragment=function(e){return x(e)===a},t.isLazy=function(e){return x(e)===y},t.isMemo=function(e){return x(e)===m},t.isPortal=function(e){return x(e)===o},t.isProfiler=function(e){return x(e)===l},t.isStrictMode=function(e){return x(e)===u},t.isSuspense=function(e){return x(e)===h},t.isValidElementType=function(e){return"string"==typeof e||"function"==typeof e||e===a||e===d||e===l||e===u||e===h||e===v||"object"==typeof e&&null!==e&&(e.$$typeof===y||e.$$typeof===m||e.$$typeof===c||e.$$typeof===s||e.$$typeof===p||e.$$typeof===g||e.$$typeof===w||e.$$typeof===E||e.$$typeof===b)},t.typeOf=x},function(e,t){e.exports={CSSRuleList:0,CSSStyleDeclaration:0,CSSValueList:0,ClientRectList:0,DOMRectList:0,DOMStringList:0,DOMTokenList:1,DataTransferItemList:0,FileList:0,HTMLAllCollection:0,HTMLCollection:0,HTMLFormElement:0,HTMLSelectElement:0,MediaList:0,MimeTypeArray:0,NamedNodeMap:0,NodeList:1,PaintRequestList:0,Plugin:0,PluginArray:0,SVGLengthList:0,SVGNumberList:0,SVGPathSegList:0,SVGPointList:0,SVGStringList:0,SVGTransformList:0,SourceBufferList:0,StyleSheetList:0,TextTrackCueList:0,TextTrackList:0,TouchList:0}},function(e,t,n){"use strict";var r=n(23),i=n(82),o=n(34),a=n(54),u=n(92),l=a.set,c=a.getterFor("Array Iterator");e.exports=u(Array,"Array",(function(e,t){l(this,{type:"Array Iterator",target:r(e),index:0,kind:t})}),(function(){var e=c(this),t=e.target,n=e.kind,r=e.index++;return!t||r>=t.length?(e.target=void 0,{value:void 0,done:!0}):"keys"==n?{value:r,done:!1}:"values"==n?{value:t[r],done:!1}:{value:[r,t[r]],done:!1}}),"values"),o.Arguments=o.Array,i("keys"),i("values"),i("entries")},function(e,t,n){var r=n(13),i=n(81),o="".split;e.exports=r((function(){return!Object("z").propertyIsEnumerable(0)}))?function(e){return"String"==i(e)?o.call(e,""):Object(e)}:Object},function(e,t){var n={}.toString;e.exports=function(e){return n.call(e).slice(8,-1)}},function(e,t,n){var r=n(16),i=n(50),o=n(18),a=r("unscopables"),u=Array.prototype;null==u[a]&&o.f(u,a,{configurable:!0,value:i(null)}),e.exports=function(e){u[a][e]=!0}},function(e,t,n){var r=n(49);e.exports=r&&!Symbol.sham&&"symbol"==typeof Symbol.iterator},function(e,t,n){var r=n(17),i=n(18),o=n(20),a=n(85);e.exports=r?Object.defineProperties:function(e,t){o(e);for(var n,r=a(t),u=r.length,l=0;u>l;)i.f(e,n=r[l++],t[n]);return e}},function(e,t,n){var r=n(51),i=n(32);e.exports=Object.keys||function(e){return r(e,i)}},function(e,t,n){var r=n(23),i=n(87),o=n(88),a=function(e){return function(t,n,a){var u,l=r(t),c=i(l.length),s=o(a,c);if(e&&n!=n){for(;c>s;)if((u=l[s++])!=u)return!0}else for(;c>s;s++)if((e||s in l)&&l[s]===n)return e||s||0;return!e&&-1}};e.exports={includes:a(!0),indexOf:a(!1)}},function(e,t,n){var r=n(52),i=Math.min;e.exports=function(e){return e>0?i(r(e),9007199254740991):0}},function(e,t,n){var r=n(52),i=Math.max,o=Math.min;e.exports=function(e,t){var n=r(e);return n<0?i(n+t,0):o(n,t)}},function(e,t,n){var r=n(53);e.exports=r("document","documentElement")},function(e,t,n){var r=n(4);e.exports=r},function(e,t,n){var r=n(4),i=n(55),o=r.WeakMap;e.exports="function"==typeof o&&/native code/.test(i(o))},function(e,t,n){"use strict";var r=n(93),i=n(100),o=n(59),a=n(103),u=n(60),l=n(10),c=n(57),s=n(16),f=n(28),d=n(34),p=n(58),h=p.IteratorPrototype,v=p.BUGGY_SAFARI_ITERATORS,m=s("iterator"),y=function(){return this};e.exports=function(e,t,n,s,p,b,g){i(n,t,s);var w,E,x,_=function(e){if(e===p&&C)return C;if(!v&&e in T)return T[e];switch(e){case"keys":case"values":case"entries":return function(){return new n(this,e)}}return function(){return new n(this)}},S=t+" Iterator",k=!1,T=e.prototype,O=T[m]||T["@@iterator"]||p&&T[p],C=!v&&O||_(p),P="Array"==t&&T.entries||O;if(P&&(w=o(P.call(new e)),h!==Object.prototype&&w.next&&(f||o(w)===h||(a?a(w,h):"function"!=typeof w[m]&&l(w,m,y)),u(w,S,!0,!0),f&&(d[S]=y))),"values"==p&&O&&"values"!==O.name&&(k=!0,C=function(){return O.call(this)}),f&&!g||T[m]===C||l(T,m,C),d[t]=C,p)if(E={values:_("values"),keys:b?C:_("keys"),entries:_("entries")},g)for(x in E)(v||k||!(x in T))&&c(T,x,E[x]);else r({target:t,proto:!0,forced:v||k},E);return E}},function(e,t,n){var r=n(4),i=n(56).f,o=n(10),a=n(57),u=n(29),l=n(95),c=n(99);e.exports=function(e,t){var n,s,f,d,p,h=e.target,v=e.global,m=e.stat;if(n=v?r:m?r[h]||u(h,{}):(r[h]||{}).prototype)for(s in t){if(d=t[s],f=e.noTargetGet?(p=i(n,s))&&p.value:n[s],!c(v?s:h+(m?".":"#")+s,e.forced)&&void 0!==f){if(typeof d==typeof f)continue;l(d,f)}(e.sham||f&&f.sham)&&o(d,"sham",!0),a(n,s,d,e)}}},function(e,t,n){"use strict";var r={}.propertyIsEnumerable,i=Object.getOwnPropertyDescriptor,o=i&&!r.call({1:2},1);t.f=o?function(e){var t=i(this,e);return!!t&&t.enumerable}:r},function(e,t,n){var r=n(5),i=n(96),o=n(56),a=n(18);e.exports=function(e,t){for(var n=i(t),u=a.f,l=o.f,c=0;c<n.length;c++){var s=n[c];r(e,s)||u(e,s,l(t,s))}}},function(e,t,n){var r=n(53),i=n(97),o=n(98),a=n(20);e.exports=r("Reflect","ownKeys")||function(e){var t=i.f(a(e)),n=o.f;return n?t.concat(n(e)):t}},function(e,t,n){var r=n(51),i=n(32).concat("length","prototype");t.f=Object.getOwnPropertyNames||function(e){return r(e,i)}},function(e,t){t.f=Object.getOwnPropertySymbols},function(e,t,n){var r=n(13),i=/#|\.prototype\./,o=function(e,t){var n=u[a(e)];return n==c||n!=l&&("function"==typeof t?r(t):!!t)},a=o.normalize=function(e){return String(e).replace(i,".").toLowerCase()},u=o.data={},l=o.NATIVE="N",c=o.POLYFILL="P";e.exports=o},function(e,t,n){"use strict";var r=n(58).IteratorPrototype,i=n(50),o=n(30),a=n(60),u=n(34),l=function(){return this};e.exports=function(e,t,n){var c=t+" Iterator";return e.prototype=i(r,{next:o(1,n)}),a(e,c,!1,!0),u[c]=l,e}},function(e,t,n){var r=n(42);e.exports=function(e){return Object(r(e))}},function(e,t,n){var r=n(13);e.exports=!r((function(){function e(){}return e.prototype.constructor=null,Object.getPrototypeOf(new e)!==e.prototype}))},function(e,t,n){var r=n(20),i=n(104);e.exports=Object.setPrototypeOf||("__proto__"in{}?function(){var e,t=!1,n={};try{(e=Object.getOwnPropertyDescriptor(Object.prototype,"__proto__").set).call(n,[]),t=n instanceof Array}catch(e){}return function(n,o){return r(n),i(o),t?e.call(n,o):n.__proto__=o,n}}():void 0)},function(e,t,n){var r=n(19);e.exports=function(e){if(!r(e)&&null!==e)throw TypeError("Can't set "+String(e)+" as a prototype");return e}},function(e,t,n){},function(e,t,n){},function(e,t){e.exports=Array.isArray||function(e){return"[object Array]"==Object.prototype.toString.call(e)}},function(e,t,n){},function(e,t,n){e.exports={spinner:"_30ANbCjpV2zhLyM_E5J342"}},function(e,t,n){"use strict";
/** @license React v0.18.0
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */var r,i,o,a,u;if(Object.defineProperty(t,"__esModule",{value:!0}),"undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,c=null,s=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(s,0),e}},f=Date.now();t.unstable_now=function(){return Date.now()-f},r=function(e){null!==l?setTimeout(r,0,e):(l=e,setTimeout(s,0))},i=function(e,t){c=setTimeout(e,t)},o=function(){clearTimeout(c)},a=function(){return!1},u=t.unstable_forceFrameRate=function(){}}else{var d=window.performance,p=window.Date,h=window.setTimeout,v=window.clearTimeout;if("undefined"!=typeof console){var m=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills"),"function"!=typeof m&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"==typeof d&&"function"==typeof d.now)t.unstable_now=function(){return d.now()};else{var y=p.now();t.unstable_now=function(){return p.now()-y}}var b=!1,g=null,w=-1,E=5,x=0;a=function(){return t.unstable_now()>=x},u=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):E=0<e?Math.floor(1e3/e):5};var _=new MessageChannel,S=_.port2;_.port1.onmessage=function(){if(null!==g){var e=t.unstable_now();x=e+E;try{g(!0,e)?S.postMessage(null):(b=!1,g=null)}catch(e){throw S.postMessage(null),e}}else b=!1},r=function(e){g=e,b||(b=!0,S.postMessage(null))},i=function(e,n){w=h((function(){e(t.unstable_now())}),n)},o=function(){v(w),w=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=Math.floor((n-1)/2),i=e[r];if(!(void 0!==i&&0<C(i,t)))break e;e[r]=t,e[n]=i,n=r}}function T(e){return void 0===(e=e[0])?null:e}function O(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],u=o+1,l=e[u];if(void 0!==a&&0>C(a,n))void 0!==l&&0>C(l,a)?(e[r]=l,e[u]=n,r=u):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>C(l,n)))break e;e[r]=l,e[u]=n,r=u}}}return t}return null}function C(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var P=[],j=[],F=1,A=null,R=3,N=!1,D=!1,I=!1;function M(e){for(var t=T(j);null!==t;){if(null===t.callback)O(j);else{if(!(t.startTime<=e))break;O(j),t.sortIndex=t.expirationTime,k(P,t)}t=T(j)}}function z(e){if(I=!1,M(e),!D)if(null!==T(P))D=!0,r(L);else{var t=T(j);null!==t&&i(z,t.startTime-e)}}function L(e,n){D=!1,I&&(I=!1,o()),N=!0;var r=R;try{for(M(n),A=T(P);null!==A&&(!(A.expirationTime>n)||e&&!a());){var u=A.callback;if(null!==u){A.callback=null,R=A.priorityLevel;var l=u(A.expirationTime<=n);n=t.unstable_now(),"function"==typeof l?A.callback=l:A===T(P)&&O(P),M(n)}else O(P);A=T(P)}if(null!==A)var c=!0;else{var s=T(j);null!==s&&i(z,s.startTime-n),c=!1}return c}finally{A=null,R=r,N=!1}}function U(e){switch(e){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1e4;default:return 5e3}}var $=u;t.unstable_ImmediatePriority=1,t.unstable_UserBlockingPriority=2,t.unstable_NormalPriority=3,t.unstable_IdlePriority=5,t.unstable_LowPriority=4,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=R;R=e;try{return t()}finally{R=n}},t.unstable_next=function(e){switch(R){case 1:case 2:case 3:var t=3;break;default:t=R}var n=R;R=t;try{return e()}finally{R=n}},t.unstable_scheduleCallback=function(e,n,a){var u=t.unstable_now();if("object"==typeof a&&null!==a){var l=a.delay;l="number"==typeof l&&0<l?u+l:u,a="number"==typeof a.timeout?a.timeout:U(e)}else a=U(e),l=u;return e={id:F++,callback:n,priorityLevel:e,startTime:l,expirationTime:a=l+a,sortIndex:-1},l>u?(e.sortIndex=l,k(j,e),null===T(P)&&e===T(j)&&(I?o():I=!0,i(z,l-u))):(e.sortIndex=a,k(P,e),D||N||(D=!0,r(L))),e},t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_wrapCallback=function(e){var t=R;return function(){var n=R;R=t;try{return e.apply(this,arguments)}finally{R=n}}},t.unstable_getCurrentPriorityLevel=function(){return R},t.unstable_shouldYield=function(){var e=t.unstable_now();M(e);var n=T(P);return n!==A&&null!==A&&null!==n&&null!==n.callback&&n.startTime<=e&&n.expirationTime<A.expirationTime||a()},t.unstable_requestPaint=$,t.unstable_continueExecution=function(){D||N||(D=!0,r(L))},t.unstable_pauseExecution=function(){},t.unstable_getFirstCallbackNode=function(){return T(P)},t.unstable_Profiling=null},function(e,t,n){},function(e,t,n){},function(e,t,n){e.exports={bottomPart:"_15eMIrBv19xOubsrs9gjTr"}},function(e,t,n){"use strict";n.r(t);var r=n(0),i=n.n(r),o=n(24),a=n.n(o),u=(n(14),i.a.createContext(null));var l=function(e){e()},c={notify:function(){}};function s(){var e=l,t=null,n=null;return{clear:function(){t=null,n=null},notify:function(){e((function(){for(var e=t;e;)e.callback(),e=e.next}))},get:function(){for(var e=[],n=t;n;)e.push(n),n=n.next;return e},subscribe:function(e){var r=!0,i=n={callback:e,next:null,prev:n};return i.prev?i.prev.next=i:t=i,function(){r&&null!==t&&(r=!1,i.next?i.next.prev=i.prev:n=i.prev,i.prev?i.prev.next=i.next:t=i.next)}}}}var f=function(){function e(e,t){this.store=e,this.parentSub=t,this.unsubscribe=null,this.listeners=c,this.handleChangeWrapper=this.handleChangeWrapper.bind(this)}var t=e.prototype;return t.addNestedSub=function(e){return this.trySubscribe(),this.listeners.subscribe(e)},t.notifyNestedSubs=function(){this.listeners.notify()},t.handleChangeWrapper=function(){this.onStateChange&&this.onStateChange()},t.isSubscribed=function(){return Boolean(this.unsubscribe)},t.trySubscribe=function(){this.unsubscribe||(this.unsubscribe=this.parentSub?this.parentSub.addNestedSub(this.handleChangeWrapper):this.store.subscribe(this.handleChangeWrapper),this.listeners=s())},t.tryUnsubscribe=function(){this.unsubscribe&&(this.unsubscribe(),this.unsubscribe=null,this.listeners.clear(),this.listeners=c)},e}();var d=function(e){var t=e.store,n=e.context,o=e.children,a=Object(r.useMemo)((function(){var e=new f(t);return e.onStateChange=e.notifyNestedSubs,{store:t,subscription:e}}),[t]),l=Object(r.useMemo)((function(){return t.getState()}),[t]);Object(r.useEffect)((function(){var e=a.subscription;return e.trySubscribe(),l!==t.getState()&&e.notifyNestedSubs(),function(){e.tryUnsubscribe(),e.onStateChange=null}}),[a,l]);var c=n||u;return i.a.createElement(c.Provider,{value:a},o)};function p(){return(p=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function h(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}var v=n(9),m=n.n(v),y=(n(25),"undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect);var b=n(35),g=function(){return Math.random().toString(36).substring(7).split("").join(".")},w={INIT:"@@redux/INIT"+g(),REPLACE:"@@redux/REPLACE"+g(),PROBE_UNKNOWN_ACTION:function(){return"@@redux/PROBE_UNKNOWN_ACTION"+g()}};function E(e){if("object"!=typeof e||null===e)return!1;for(var t=e;null!==Object.getPrototypeOf(t);)t=Object.getPrototypeOf(t);return Object.getPrototypeOf(e)===t}function x(){return Object(r.useContext)(u)}function _(e){void 0===e&&(e=u);var t=e===u?x:function(){return Object(r.useContext)(e)};return function(){return t().store}}var S=_();function k(e){void 0===e&&(e=u);var t=e===u?S:_(e);return function(){return t().dispatch}}var T=k(),O=function(e,t){return e===t};function C(e){void 0===e&&(e=u);var t=e===u?x:function(){return Object(r.useContext)(e)};return function(e,n){void 0===n&&(n=O);var i=t();return function(e,t,n,i){var o,a=Object(r.useReducer)((function(e){return e+1}),0)[1],u=Object(r.useMemo)((function(){return new f(n,i)}),[n,i]),l=Object(r.useRef)(),c=Object(r.useRef)(),s=Object(r.useRef)();try{o=e!==c.current||l.current?e(n.getState()):s.current}catch(e){throw l.current&&(e.message+="\nThe error may be correlated with this previous error:\n"+l.current.stack+"\n\n"),e}return y((function(){c.current=e,s.current=o,l.current=void 0})),y((function(){function e(){try{var e=c.current(n.getState());if(t(e,s.current))return;s.current=e}catch(e){l.current=e}a({})}return u.onStateChange=e,u.trySubscribe(),e(),function(){return u.tryUnsubscribe()}}),[n,u]),o}(e,n,i.store,i.subscription)}}var P,j=C();P=o.unstable_batchedUpdates,l=P;n(12);const F={user:{name:null,email:null,authTokenStatus:0},notes:[]};var A=function e(t,n,r){var i;if("function"==typeof n&&"function"==typeof r||"function"==typeof r&&"function"==typeof arguments[3])throw new Error("It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function.");if("function"==typeof n&&void 0===r&&(r=n,n=void 0),void 0!==r){if("function"!=typeof r)throw new Error("Expected the enhancer to be a function.");return r(e)(t,n)}if("function"!=typeof t)throw new Error("Expected the reducer to be a function.");var o=t,a=n,u=[],l=u,c=!1;function s(){l===u&&(l=u.slice())}function f(){if(c)throw new Error("You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.");return a}function d(e){if("function"!=typeof e)throw new Error("Expected the listener to be a function.");if(c)throw new Error("You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api-reference/store#subscribelistener for more details.");var t=!0;return s(),l.push(e),function(){if(t){if(c)throw new Error("You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api-reference/store#subscribelistener for more details.");t=!1,s();var n=l.indexOf(e);l.splice(n,1),u=null}}}function p(e){if(!E(e))throw new Error("Actions must be plain objects. Use custom middleware for async actions.");if(void 0===e.type)throw new Error('Actions may not have an undefined "type" property. Have you misspelled a constant?');if(c)throw new Error("Reducers may not dispatch actions.");try{c=!0,a=o(a,e)}finally{c=!1}for(var t=u=l,n=0;n<t.length;n++){(0,t[n])()}return e}function h(e){if("function"!=typeof e)throw new Error("Expected the nextReducer to be a function.");o=e,p({type:w.REPLACE})}function v(){var e,t=d;return(e={subscribe:function(e){if("object"!=typeof e||null===e)throw new TypeError("Expected the observer to be an object.");function n(){e.next&&e.next(f())}return n(),{unsubscribe:t(n)}}})[b.a]=function(){return this},e}return p({type:w.INIT}),(i={dispatch:p,subscribe:d,getState:f,replaceReducer:h})[b.a]=v,i}((function(e=F,t){switch(t.type){case"SET_USER":return function(e,t){const n={...e},r={...n.user};return r.name=t.name,r.email=t.email,n.user=r,n}(e,t);case"SET_AUTH_TOKEN_STATUS":return function(e,t){const n={...e},r={...n.user};return r.authTokenStatus=t.status,n.user=r,n}(e,t);case"ADD_NOTE":return function(e,t){const n={...e},r=[...n.notes],i={text:t.text,important:!1};return r.unshift(i),n.notes=r,n}(e,t);default:return e}})),R=(n(105),n(106),n(62)),N=n.n(R),D=n(3);function I(e){return"/"===e.charAt(0)}function M(e,t){for(var n=t,r=n+1,i=e.length;r<i;n+=1,r+=1)e[n]=e[r];e.pop()}var z=function(e,t){void 0===t&&(t="");var n,r=e&&e.split("/")||[],i=t&&t.split("/")||[],o=e&&I(e),a=t&&I(t),u=o||a;if(e&&I(e)?i=r:r.length&&(i.pop(),i=i.concat(r)),!i.length)return"/";if(i.length){var l=i[i.length-1];n="."===l||".."===l||""===l}else n=!1;for(var c=0,s=i.length;s>=0;s--){var f=i[s];"."===f?M(i,s):".."===f?(M(i,s),c++):c&&(M(i,s),c--)}if(!u)for(;c--;c)i.unshift("..");!u||""===i[0]||i[0]&&I(i[0])||i.unshift("");var d=i.join("/");return n&&"/"!==d.substr(-1)&&(d+="/"),d};function L(e){return e.valueOf?e.valueOf():Object.prototype.valueOf.call(e)}var U=function e(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(Array.isArray(t))return Array.isArray(n)&&t.length===n.length&&t.every((function(t,r){return e(t,n[r])}));if("object"==typeof t||"object"==typeof n){var r=L(t),i=L(n);return r!==t||i!==n?e(r,i):Object.keys(Object.assign({},t,n)).every((function(r){return e(t[r],n[r])}))}return!1};var $=function(e,t){if(!e)throw new Error("Invariant failed")};function V(e){return"/"===e.charAt(0)?e:"/"+e}function W(e){return"/"===e.charAt(0)?e.substr(1):e}function B(e,t){return function(e,t){return 0===e.toLowerCase().indexOf(t.toLowerCase())&&-1!=="/?#".indexOf(e.charAt(t.length))}(e,t)?e.substr(t.length):e}function H(e){return"/"===e.charAt(e.length-1)?e.slice(0,-1):e}function q(e){var t=e.pathname,n=e.search,r=e.hash,i=t||"/";return n&&"?"!==n&&(i+="?"===n.charAt(0)?n:"?"+n),r&&"#"!==r&&(i+="#"===r.charAt(0)?r:"#"+r),i}function Q(e,t,n,r){var i;"string"==typeof e?(i=function(e){var t=e||"/",n="",r="",i=t.indexOf("#");-1!==i&&(r=t.substr(i),t=t.substr(0,i));var o=t.indexOf("?");return-1!==o&&(n=t.substr(o),t=t.substr(0,o)),{pathname:t,search:"?"===n?"":n,hash:"#"===r?"":r}}(e)).state=t:(void 0===(i=p({},e)).pathname&&(i.pathname=""),i.search?"?"!==i.search.charAt(0)&&(i.search="?"+i.search):i.search="",i.hash?"#"!==i.hash.charAt(0)&&(i.hash="#"+i.hash):i.hash="",void 0!==t&&void 0===i.state&&(i.state=t));try{i.pathname=decodeURI(i.pathname)}catch(e){throw e instanceof URIError?new URIError('Pathname "'+i.pathname+'" could not be decoded. This is likely caused by an invalid percent-encoding.'):e}return n&&(i.key=n),r?i.pathname?"/"!==i.pathname.charAt(0)&&(i.pathname=z(i.pathname,r.pathname)):i.pathname=r.pathname:i.pathname||(i.pathname="/"),i}function K(){var e=null;var t=[];return{setPrompt:function(t){return e=t,function(){e===t&&(e=null)}},confirmTransitionTo:function(t,n,r,i){if(null!=e){var o="function"==typeof e?e(t,n):e;"string"==typeof o?"function"==typeof r?r(o,i):i(!0):i(!1!==o)}else i(!0)},appendListener:function(e){var n=!0;function r(){n&&e.apply(void 0,arguments)}return t.push(r),function(){n=!1,t=t.filter((function(e){return e!==r}))}},notifyListeners:function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];t.forEach((function(e){return e.apply(void 0,n)}))}}}var Y=!("undefined"==typeof window||!window.document||!window.document.createElement);function G(e,t){t(window.confirm(e))}function J(){try{return window.history.state||{}}catch(e){return{}}}function X(e){void 0===e&&(e={}),Y||$(!1);var t,n=window.history,r=(-1===(t=window.navigator.userAgent).indexOf("Android 2.")&&-1===t.indexOf("Android 4.0")||-1===t.indexOf("Mobile Safari")||-1!==t.indexOf("Chrome")||-1!==t.indexOf("Windows Phone"))&&window.history&&"pushState"in window.history,i=!(-1===window.navigator.userAgent.indexOf("Trident")),o=e,a=o.forceRefresh,u=void 0!==a&&a,l=o.getUserConfirmation,c=void 0===l?G:l,s=o.keyLength,f=void 0===s?6:s,d=e.basename?H(V(e.basename)):"";function h(e){var t=e||{},n=t.key,r=t.state,i=window.location,o=i.pathname+i.search+i.hash;return d&&(o=B(o,d)),Q(o,r,n)}function v(){return Math.random().toString(36).substr(2,f)}var m=K();function y(e){p(P,e),P.length=n.length,m.notifyListeners(P.location,P.action)}function b(e){(function(e){return void 0===e.state&&-1===navigator.userAgent.indexOf("CriOS")})(e)||E(h(e.state))}function g(){E(h(J()))}var w=!1;function E(e){if(w)w=!1,y();else{m.confirmTransitionTo(e,"POP",c,(function(t){t?y({action:"POP",location:e}):function(e){var t=P.location,n=_.indexOf(t.key);-1===n&&(n=0);var r=_.indexOf(e.key);-1===r&&(r=0);var i=n-r;i&&(w=!0,k(i))}(e)}))}}var x=h(J()),_=[x.key];function S(e){return d+q(e)}function k(e){n.go(e)}var T=0;function O(e){1===(T+=e)&&1===e?(window.addEventListener("popstate",b),i&&window.addEventListener("hashchange",g)):0===T&&(window.removeEventListener("popstate",b),i&&window.removeEventListener("hashchange",g))}var C=!1;var P={length:n.length,action:"POP",location:x,createHref:S,push:function(e,t){var i=Q(e,t,v(),P.location);m.confirmTransitionTo(i,"PUSH",c,(function(e){if(e){var t=S(i),o=i.key,a=i.state;if(r)if(n.pushState({key:o,state:a},null,t),u)window.location.href=t;else{var l=_.indexOf(P.location.key),c=_.slice(0,l+1);c.push(i.key),_=c,y({action:"PUSH",location:i})}else window.location.href=t}}))},replace:function(e,t){var i=Q(e,t,v(),P.location);m.confirmTransitionTo(i,"REPLACE",c,(function(e){if(e){var t=S(i),o=i.key,a=i.state;if(r)if(n.replaceState({key:o,state:a},null,t),u)window.location.replace(t);else{var l=_.indexOf(P.location.key);-1!==l&&(_[l]=i.key),y({action:"REPLACE",location:i})}else window.location.replace(t)}}))},go:k,goBack:function(){k(-1)},goForward:function(){k(1)},block:function(e){void 0===e&&(e=!1);var t=m.setPrompt(e);return C||(O(1),C=!0),function(){return C&&(C=!1,O(-1)),t()}},listen:function(e){var t=m.appendListener(e);return O(1),function(){O(-1),t()}}};return P}var Z={hashbang:{encodePath:function(e){return"!"===e.charAt(0)?e:"!/"+W(e)},decodePath:function(e){return"!"===e.charAt(0)?e.substr(1):e}},noslash:{encodePath:W,decodePath:V},slash:{encodePath:V,decodePath:V}};function ee(e){var t=e.indexOf("#");return-1===t?e:e.slice(0,t)}function te(){var e=window.location.href,t=e.indexOf("#");return-1===t?"":e.substring(t+1)}function ne(e){window.location.replace(ee(window.location.href)+"#"+e)}function re(e){void 0===e&&(e={}),Y||$(!1);var t=window.history,n=(window.navigator.userAgent.indexOf("Firefox"),e),r=n.getUserConfirmation,i=void 0===r?G:r,o=n.hashType,a=void 0===o?"slash":o,u=e.basename?H(V(e.basename)):"",l=Z[a],c=l.encodePath,s=l.decodePath;function f(){var e=s(te());return u&&(e=B(e,u)),Q(e)}var d=K();function h(e){p(T,e),T.length=t.length,d.notifyListeners(T.location,T.action)}var v=!1,m=null;function y(){var e,t,n=te(),r=c(n);if(n!==r)ne(r);else{var o=f(),a=T.location;if(!v&&(t=o,(e=a).pathname===t.pathname&&e.search===t.search&&e.hash===t.hash))return;if(m===q(o))return;m=null,function(e){if(v)v=!1,h();else{d.confirmTransitionTo(e,"POP",i,(function(t){t?h({action:"POP",location:e}):function(e){var t=T.location,n=E.lastIndexOf(q(t));-1===n&&(n=0);var r=E.lastIndexOf(q(e));-1===r&&(r=0);var i=n-r;i&&(v=!0,x(i))}(e)}))}}(o)}}var b=te(),g=c(b);b!==g&&ne(g);var w=f(),E=[q(w)];function x(e){t.go(e)}var _=0;function S(e){1===(_+=e)&&1===e?window.addEventListener("hashchange",y):0===_&&window.removeEventListener("hashchange",y)}var k=!1;var T={length:t.length,action:"POP",location:w,createHref:function(e){var t=document.querySelector("base"),n="";return t&&t.getAttribute("href")&&(n=ee(window.location.href)),n+"#"+c(u+q(e))},push:function(e,t){var n=Q(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"PUSH",i,(function(e){if(e){var t=q(n),r=c(u+t);if(te()!==r){m=t,function(e){window.location.hash=e}(r);var i=E.lastIndexOf(q(T.location)),o=E.slice(0,i+1);o.push(t),E=o,h({action:"PUSH",location:n})}else h()}}))},replace:function(e,t){var n=Q(e,void 0,void 0,T.location);d.confirmTransitionTo(n,"REPLACE",i,(function(e){if(e){var t=q(n),r=c(u+t);te()!==r&&(m=t,ne(r));var i=E.indexOf(q(T.location));-1!==i&&(E[i]=t),h({action:"REPLACE",location:n})}}))},go:x,goBack:function(){x(-1)},goForward:function(){x(1)},block:function(e){void 0===e&&(e=!1);var t=d.setPrompt(e);return k||(S(1),k=!0),function(){return k&&(k=!1,S(-1)),t()}},listen:function(e){var t=d.appendListener(e);return S(1),function(){S(-1),t()}}};return T}function ie(e,t,n){return Math.min(Math.max(e,t),n)}function oe(e){void 0===e&&(e={});var t=e,n=t.getUserConfirmation,r=t.initialEntries,i=void 0===r?["/"]:r,o=t.initialIndex,a=void 0===o?0:o,u=t.keyLength,l=void 0===u?6:u,c=K();function s(e){p(y,e),y.length=y.entries.length,c.notifyListeners(y.location,y.action)}function f(){return Math.random().toString(36).substr(2,l)}var d=ie(a,0,i.length-1),h=i.map((function(e){return Q(e,void 0,"string"==typeof e?f():e.key||f())})),v=q;function m(e){var t=ie(y.index+e,0,y.entries.length-1),r=y.entries[t];c.confirmTransitionTo(r,"POP",n,(function(e){e?s({action:"POP",location:r,index:t}):s()}))}var y={length:h.length,action:"POP",location:h[d],index:d,entries:h,createHref:v,push:function(e,t){var r=Q(e,t,f(),y.location);c.confirmTransitionTo(r,"PUSH",n,(function(e){if(e){var t=y.index+1,n=y.entries.slice(0);n.length>t?n.splice(t,n.length-t,r):n.push(r),s({action:"PUSH",location:r,index:t,entries:n})}}))},replace:function(e,t){var r=Q(e,t,f(),y.location);c.confirmTransitionTo(r,"REPLACE",n,(function(e){e&&(y.entries[y.index]=r,s({action:"REPLACE",location:r}))}))},go:m,goBack:function(){m(-1)},goForward:function(){m(1)},canGo:function(e){var t=y.index+e;return t>=0&&t<y.entries.length},block:function(e){return void 0===e&&(e=!1),c.setPrompt(e)},listen:function(e){return c.appendListener(e)}};return y}var ae=n(36),ue=n(37),le=n.n(ue),ce=function(e){var t=Object(ae.a)();return t.displayName=e,t}("Router-History"),se=function(e){var t=Object(ae.a)();return t.displayName=e,t}("Router"),fe=function(e){function t(t){var n;return(n=e.call(this,t)||this).state={location:t.history.location},n._isMounted=!1,n._pendingLocation=null,t.staticContext||(n.unlisten=t.history.listen((function(e){n._isMounted?n.setState({location:e}):n._pendingLocation=e}))),n}Object(D.a)(t,e),t.computeRootMatch=function(e){return{path:"/",url:"/",params:{},isExact:"/"===e}};var n=t.prototype;return n.componentDidMount=function(){this._isMounted=!0,this._pendingLocation&&this.setState({location:this._pendingLocation})},n.componentWillUnmount=function(){this.unlisten&&this.unlisten()},n.render=function(){return i.a.createElement(se.Provider,{value:{history:this.props.history,location:this.state.location,match:t.computeRootMatch(this.state.location.pathname),staticContext:this.props.staticContext}},i.a.createElement(ce.Provider,{children:this.props.children||null,value:this.props.history}))},t}(i.a.Component);i.a.Component;var de=function(e){function t(){return e.apply(this,arguments)||this}Object(D.a)(t,e);var n=t.prototype;return n.componentDidMount=function(){this.props.onMount&&this.props.onMount.call(this,this)},n.componentDidUpdate=function(e){this.props.onUpdate&&this.props.onUpdate.call(this,this,e)},n.componentWillUnmount=function(){this.props.onUnmount&&this.props.onUnmount.call(this,this)},n.render=function(){return null},t}(i.a.Component);var pe={},he=0;function ve(e,t){return void 0===e&&(e="/"),void 0===t&&(t={}),"/"===e?e:function(e){if(pe[e])return pe[e];var t=le.a.compile(e);return he<1e4&&(pe[e]=t,he++),t}(e)(t,{pretty:!0})}function me(e){var t=e.computedMatch,n=e.to,r=e.push,o=void 0!==r&&r;return i.a.createElement(se.Consumer,null,(function(e){e||$(!1);var r=e.history,a=e.staticContext,u=o?r.push:r.replace,l=Q(t?"string"==typeof n?ve(n,t.params):p({},n,{pathname:ve(n.pathname,t.params)}):n);return a?(u(l),null):i.a.createElement(de,{onMount:function(){u(l)},onUpdate:function(e,t){var n,r,i=Q(t.to);n=i,r=p({},l,{key:i.key}),n.pathname===r.pathname&&n.search===r.search&&n.hash===r.hash&&n.key===r.key&&U(n.state,r.state)||u(l)},to:n})}))}var ye={},be=0;function ge(e,t){void 0===t&&(t={}),("string"==typeof t||Array.isArray(t))&&(t={path:t});var n=t,r=n.path,i=n.exact,o=void 0!==i&&i,a=n.strict,u=void 0!==a&&a,l=n.sensitive,c=void 0!==l&&l;return[].concat(r).reduce((function(t,n){if(!n&&""!==n)return null;if(t)return t;var r=function(e,t){var n=""+t.end+t.strict+t.sensitive,r=ye[n]||(ye[n]={});if(r[e])return r[e];var i=[],o={regexp:le()(e,i,t),keys:i};return be<1e4&&(r[e]=o,be++),o}(n,{end:o,strict:u,sensitive:c}),i=r.regexp,a=r.keys,l=i.exec(e);if(!l)return null;var s=l[0],f=l.slice(1),d=e===s;return o&&!d?null:{path:n,url:"/"===n&&""===s?"/":s,isExact:d,params:a.reduce((function(e,t,n){return e[t.name]=f[n],e}),{})}}),null)}var we=function(e){function t(){return e.apply(this,arguments)||this}return Object(D.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(se.Consumer,null,(function(t){t||$(!1);var n=e.props.location||t.location,r=p({},t,{location:n,match:e.props.computedMatch?e.props.computedMatch:e.props.path?ge(n.pathname,e.props):t.match}),o=e.props,a=o.children,u=o.component,l=o.render;return Array.isArray(a)&&0===a.length&&(a=null),i.a.createElement(se.Provider,{value:r},r.match?a?"function"==typeof a?a(r):a:u?i.a.createElement(u,r):l?l(r):null:"function"==typeof a?a(r):null)}))},t}(i.a.Component);function Ee(e){return"/"===e.charAt(0)?e:"/"+e}function xe(e,t){if(!e)return t;var n=Ee(e);return 0!==t.pathname.indexOf(n)?t:p({},t,{pathname:t.pathname.substr(n.length)})}function _e(e){return"string"==typeof e?e:q(e)}function Se(e){return function(){$(!1)}}function ke(){}i.a.Component;var Te=function(e){function t(){return e.apply(this,arguments)||this}return Object(D.a)(t,e),t.prototype.render=function(){var e=this;return i.a.createElement(se.Consumer,null,(function(t){t||$(!1);var n,r,o=e.props.location||t.location;return i.a.Children.forEach(e.props.children,(function(e){if(null==r&&i.a.isValidElement(e)){n=e;var a=e.props.path||e.props.from;r=a?ge(o.pathname,p({},e.props,{path:a})):t.match}})),r?i.a.cloneElement(n,{location:o,computedMatch:r}):null}))},t}(i.a.Component);var Oe=i.a.useContext;function Ce(e){var t=Oe(se).location,n=Oe(se).match;return e?ge(t.pathname,e):n}var Pe=function(e){function t(){for(var t,n=arguments.length,r=new Array(n),i=0;i<n;i++)r[i]=arguments[i];return(t=e.call.apply(e,[this].concat(r))||this).history=X(t.props),t}return Object(D.a)(t,e),t.prototype.render=function(){return i.a.createElement(fe,{history:this.history,children:this.props.children})},t}(i.a.Component);i.a.Component;var je=function(e,t){return"function"==typeof e?e(t):e},Fe=function(e,t){return"string"==typeof e?Q(e,null,null,t):e},Ae=function(e){return e},Re=i.a.forwardRef;void 0===Re&&(Re=Ae);var Ne=Re((function(e,t){var n=e.innerRef,r=e.navigate,o=e.onClick,a=h(e,["innerRef","navigate","onClick"]),u=a.target,l=p({},a,{onClick:function(e){try{o&&o(e)}catch(t){throw e.preventDefault(),t}e.defaultPrevented||0!==e.button||u&&"_self"!==u||function(e){return!!(e.metaKey||e.altKey||e.ctrlKey||e.shiftKey)}(e)||(e.preventDefault(),r())}});return l.ref=Ae!==Re&&t||n,i.a.createElement("a",l)}));var De=Re((function(e,t){var n=e.component,r=void 0===n?Ne:n,o=e.replace,a=e.to,u=e.innerRef,l=h(e,["component","replace","to","innerRef"]);return i.a.createElement(se.Consumer,null,(function(e){e||$(!1);var n=e.history,c=Fe(je(a,e.location),e.location),s=c?n.createHref(c):"",f=p({},l,{href:s,navigate:function(){var t=je(a,e.location);(o?n.replace:n.push)(t)}});return Ae!==Re?f.ref=t||u:f.innerRef=u,i.a.createElement(r,f)}))})),Ie=function(e){return e},Me=i.a.forwardRef;void 0===Me&&(Me=Ie);Me((function(e,t){var n=e["aria-current"],r=void 0===n?"page":n,o=e.activeClassName,a=void 0===o?"active":o,u=e.activeStyle,l=e.className,c=e.exact,s=e.isActive,f=e.location,d=e.sensitive,v=e.strict,m=e.style,y=e.to,b=e.innerRef,g=h(e,["aria-current","activeClassName","activeStyle","className","exact","isActive","location","sensitive","strict","style","to","innerRef"]);return i.a.createElement(se.Consumer,null,(function(e){e||$(!1);var n=f||e.location,o=Fe(je(y,n),n),h=o.pathname,w=h&&h.replace(/([.+*?=^!:${}()[\]|/\\])/g,"\\$1"),E=w?ge(n.pathname,{path:w,exact:c,sensitive:d,strict:v}):null,x=!!(s?s(E,n):E),_=x?function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return t.filter((function(e){return e})).join(" ")}(l,a):l,S=x?p({},m,{},u):m,k=p({"aria-current":x&&r||null,className:_,style:S,to:o},g);return Ie!==Me?k.ref=t||b:k.innerRef=b,i.a.createElement(De,k)}))}));const ze=location.host.startsWith("localhost");var Le={isDevelopment:ze,serverOrigin:ze?location.protocol+"//"+location.hostname+":3000":""};async function Ue(){const e=localStorage.getItem("authToken");let t={method:"POST"};e&&Le.isDevelopment&&(t.headers={Authorization:"Bearer "+e});const{serverOrigin:n}=Le,r=n+"/api/v1/users/checkToken";return await fetch(r,t).then(e=>e.json()).then(e=>e)?2:1}function $e(e,t){return{type:"SET_USER",name:e,email:t}}function Ve(e){return{type:"SET_AUTH_TOKEN_STATUS",status:e}}var We=function(){const e=T(),{authTokenStatus:t}=j(e=>e.user);return 0===t?(Ue().then(t=>{e(Ve(t))}),"IndexPage"):1===t?i.a.createElement(me,{to:"/enter"}):i.a.createElement(me,{to:"/notes"})};n(108),n(109);var Be=function(e){const{text:t="Text didn't pass",i:n,counter:r,disabled:o=!1}=e,a={};a.type=e.type?e.type:"button",e.href&&delete a.type;let u="btn";e.mode1&&(u+=" btn--mode-1"),e.mode2&&(u+=" btn--mode-2"),a.className=u,e.href&&(a.to=e.href),o&&(a.disabled=!0),n&&(a.key=n);const l=[function(e){if(!e)return null;if("spinner"===e)return i.a.createElement("div",{className:"btnSpinnerWrapper",key:"h"},i.a.createElement("div",{className:"btnSpinner"},i.a.createElement("div",null)));let t="btn__sign ";switch(e){case"person":t+="btn__sign--person";break;case"exit":t+="btn__sign--exit";break;case"check-all":t+="btn__sign--check-all";break;case"sun":t+="btn__sign--sun";break;case"close":t+="btn__sign--close"}return i.a.createElement("span",{className:t,key:"a"})}(e.sign),t,i.a.createElement("span",{className:"btn__counter",key:"b"},r)];return"a"===e.tag?i.a.createElement(De,a,l):i.a.createElement("button",a,l)},He=n(63),qe=n.n(He);function Qe({label:e,to:t,i:n}){return Ce({path:t})?i.a.createElement(Be,{tag:"a",href:t,text:e,i:n}):i.a.createElement(Be,{tag:"a",href:t,text:e,mode1:!0,i:n})}var Ke=function(){const e=i.a.createElement(Qe,{to:"/reg",label:"Sign up",i:"1"}),t=i.a.createElement(Qe,{to:"/enter",label:"Log in",i:"2"});return i.a.createElement("nav",{className:qe.a.wrapper},t,e)},Ye=n(27),Ge=n.n(Ye);var Je=function({children:e}){return i.a.createElement("section",{className:Ge.a.wrapper},i.a.createElement("div",{className:Ge.a.leftPart}),i.a.createElement("div",{className:Ge.a.rightPart},e))},Xe=n(7),Ze=n.n(Xe),et=function(e){return function(e){return!!e&&"object"==typeof e}(e)&&!function(e){var t=Object.prototype.toString.call(e);return"[object RegExp]"===t||"[object Date]"===t||function(e){return e.$$typeof===tt}(e)}(e)};var tt="function"==typeof Symbol&&Symbol.for?Symbol.for("react.element"):60103;function nt(e,t){return!1!==t.clone&&t.isMergeableObject(e)?it((n=e,Array.isArray(n)?[]:{}),e,t):e;var n}function rt(e,t,n){return e.concat(t).map((function(e){return nt(e,n)}))}function it(e,t,n){(n=n||{}).arrayMerge=n.arrayMerge||rt,n.isMergeableObject=n.isMergeableObject||et;var r=Array.isArray(t);return r===Array.isArray(e)?r?n.arrayMerge(e,t,n):function(e,t,n){var r={};return n.isMergeableObject(e)&&Object.keys(e).forEach((function(t){r[t]=nt(e[t],n)})),Object.keys(t).forEach((function(i){n.isMergeableObject(t[i])&&e[i]?r[i]=it(e[i],t[i],n):r[i]=nt(t[i],n)})),r}(e,t,n):nt(t,n)}it.all=function(e,t){if(!Array.isArray(e))throw new Error("first argument should be an array");return e.reduce((function(e,n){return it(e,n,t)}),{})};var ot=it,at=n(1),ut=at.a.Symbol,lt=Object.prototype,ct=lt.hasOwnProperty,st=lt.toString,ft=ut?ut.toStringTag:void 0;var dt=function(e){var t=ct.call(e,ft),n=e[ft];try{e[ft]=void 0;var r=!0}catch(e){}var i=st.call(e);return r&&(t?e[ft]=n:delete e[ft]),i},pt=Object.prototype.toString;var ht=function(e){return pt.call(e)},vt=ut?ut.toStringTag:void 0;var mt=function(e){return null==e?void 0===e?"[object Undefined]":"[object Null]":vt&&vt in Object(e)?dt(e):ht(e)};var yt=function(e,t){return function(n){return e(t(n))}},bt=yt(Object.getPrototypeOf,Object);var gt=function(e){return null!=e&&"object"==typeof e},wt=Function.prototype,Et=Object.prototype,xt=wt.toString,_t=Et.hasOwnProperty,St=xt.call(Object);var kt=function(e){if(!gt(e)||"[object Object]"!=mt(e))return!1;var t=bt(e);if(null===t)return!0;var n=_t.call(t,"constructor")&&t.constructor;return"function"==typeof n&&n instanceof n&&xt.call(n)==St};var Tt=function(){this.__data__=[],this.size=0};var Ot=function(e,t){return e===t||e!=e&&t!=t};var Ct=function(e,t){for(var n=e.length;n--;)if(Ot(e[n][0],t))return n;return-1},Pt=Array.prototype.splice;var jt=function(e){var t=this.__data__,n=Ct(t,e);return!(n<0)&&(n==t.length-1?t.pop():Pt.call(t,n,1),--this.size,!0)};var Ft=function(e){var t=this.__data__,n=Ct(t,e);return n<0?void 0:t[n][1]};var At=function(e){return Ct(this.__data__,e)>-1};var Rt=function(e,t){var n=this.__data__,r=Ct(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this};function Nt(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}Nt.prototype.clear=Tt,Nt.prototype.delete=jt,Nt.prototype.get=Ft,Nt.prototype.has=At,Nt.prototype.set=Rt;var Dt=Nt;var It=function(){this.__data__=new Dt,this.size=0};var Mt=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n};var zt=function(e){return this.__data__.get(e)};var Lt=function(e){return this.__data__.has(e)};var Ut=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)};var $t,Vt=function(e){if(!Ut(e))return!1;var t=mt(e);return"[object Function]"==t||"[object GeneratorFunction]"==t||"[object AsyncFunction]"==t||"[object Proxy]"==t},Wt=at.a["__core-js_shared__"],Bt=($t=/[^.]+$/.exec(Wt&&Wt.keys&&Wt.keys.IE_PROTO||""))?"Symbol(src)_1."+$t:"";var Ht=function(e){return!!Bt&&Bt in e},qt=Function.prototype.toString;var Qt=function(e){if(null!=e){try{return qt.call(e)}catch(e){}try{return e+""}catch(e){}}return""},Kt=/^\[object .+?Constructor\]$/,Yt=Function.prototype,Gt=Object.prototype,Jt=Yt.toString,Xt=Gt.hasOwnProperty,Zt=RegExp("^"+Jt.call(Xt).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");var en=function(e){return!(!Ut(e)||Ht(e))&&(Vt(e)?Zt:Kt).test(Qt(e))};var tn=function(e,t){return null==e?void 0:e[t]};var nn=function(e,t){var n=tn(e,t);return en(n)?n:void 0},rn=nn(at.a,"Map"),on=nn(Object,"create");var an=function(){this.__data__=on?on(null):{},this.size=0};var un=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t},ln=Object.prototype.hasOwnProperty;var cn=function(e){var t=this.__data__;if(on){var n=t[e];return"__lodash_hash_undefined__"===n?void 0:n}return ln.call(t,e)?t[e]:void 0},sn=Object.prototype.hasOwnProperty;var fn=function(e){var t=this.__data__;return on?void 0!==t[e]:sn.call(t,e)};var dn=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=on&&void 0===t?"__lodash_hash_undefined__":t,this};function pn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}pn.prototype.clear=an,pn.prototype.delete=un,pn.prototype.get=cn,pn.prototype.has=fn,pn.prototype.set=dn;var hn=pn;var vn=function(){this.size=0,this.__data__={hash:new hn,map:new(rn||Dt),string:new hn}};var mn=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e};var yn=function(e,t){var n=e.__data__;return mn(t)?n["string"==typeof t?"string":"hash"]:n.map};var bn=function(e){var t=yn(this,e).delete(e);return this.size-=t?1:0,t};var gn=function(e){return yn(this,e).get(e)};var wn=function(e){return yn(this,e).has(e)};var En=function(e,t){var n=yn(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this};function xn(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var r=e[t];this.set(r[0],r[1])}}xn.prototype.clear=vn,xn.prototype.delete=bn,xn.prototype.get=gn,xn.prototype.has=wn,xn.prototype.set=En;var _n=xn;var Sn=function(e,t){var n=this.__data__;if(n instanceof Dt){var r=n.__data__;if(!rn||r.length<199)return r.push([e,t]),this.size=++n.size,this;n=this.__data__=new _n(r)}return n.set(e,t),this.size=n.size,this};function kn(e){var t=this.__data__=new Dt(e);this.size=t.size}kn.prototype.clear=It,kn.prototype.delete=Mt,kn.prototype.get=zt,kn.prototype.has=Lt,kn.prototype.set=Sn;var Tn=kn;var On=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r&&!1!==t(e[n],n,e););return e},Cn=function(){try{var e=nn(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();var Pn=function(e,t,n){"__proto__"==t&&Cn?Cn(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n},jn=Object.prototype.hasOwnProperty;var Fn=function(e,t,n){var r=e[t];jn.call(e,t)&&Ot(r,n)&&(void 0!==n||t in e)||Pn(e,t,n)};var An=function(e,t,n,r){var i=!n;n||(n={});for(var o=-1,a=t.length;++o<a;){var u=t[o],l=r?r(n[u],e[u],u,n,e):void 0;void 0===l&&(l=e[u]),i?Pn(n,u,l):Fn(n,u,l)}return n};var Rn=function(e,t){for(var n=-1,r=Array(e);++n<e;)r[n]=t(n);return r};var Nn=function(e){return gt(e)&&"[object Arguments]"==mt(e)},Dn=Object.prototype,In=Dn.hasOwnProperty,Mn=Dn.propertyIsEnumerable,zn=Nn(function(){return arguments}())?Nn:function(e){return gt(e)&&In.call(e,"callee")&&!Mn.call(e,"callee")},Ln=Array.isArray,Un=n(11),$n=/^(?:0|[1-9]\d*)$/;var Vn=function(e,t){var n=typeof e;return!!(t=null==t?9007199254740991:t)&&("number"==n||"symbol"!=n&&$n.test(e))&&e>-1&&e%1==0&&e<t};var Wn=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=9007199254740991},Bn={};Bn["[object Float32Array]"]=Bn["[object Float64Array]"]=Bn["[object Int8Array]"]=Bn["[object Int16Array]"]=Bn["[object Int32Array]"]=Bn["[object Uint8Array]"]=Bn["[object Uint8ClampedArray]"]=Bn["[object Uint16Array]"]=Bn["[object Uint32Array]"]=!0,Bn["[object Arguments]"]=Bn["[object Array]"]=Bn["[object ArrayBuffer]"]=Bn["[object Boolean]"]=Bn["[object DataView]"]=Bn["[object Date]"]=Bn["[object Error]"]=Bn["[object Function]"]=Bn["[object Map]"]=Bn["[object Number]"]=Bn["[object Object]"]=Bn["[object RegExp]"]=Bn["[object Set]"]=Bn["[object String]"]=Bn["[object WeakMap]"]=!1;var Hn=function(e){return gt(e)&&Wn(e.length)&&!!Bn[mt(e)]};var qn=function(e){return function(t){return e(t)}},Qn=n(6),Kn=Qn.a&&Qn.a.isTypedArray,Yn=Kn?qn(Kn):Hn,Gn=Object.prototype.hasOwnProperty;var Jn=function(e,t){var n=Ln(e),r=!n&&zn(e),i=!n&&!r&&Object(Un.a)(e),o=!n&&!r&&!i&&Yn(e),a=n||r||i||o,u=a?Rn(e.length,String):[],l=u.length;for(var c in e)!t&&!Gn.call(e,c)||a&&("length"==c||i&&("offset"==c||"parent"==c)||o&&("buffer"==c||"byteLength"==c||"byteOffset"==c)||Vn(c,l))||u.push(c);return u},Xn=Object.prototype;var Zn=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||Xn)},er=yt(Object.keys,Object),tr=Object.prototype.hasOwnProperty;var nr=function(e){if(!Zn(e))return er(e);var t=[];for(var n in Object(e))tr.call(e,n)&&"constructor"!=n&&t.push(n);return t};var rr=function(e){return null!=e&&Wn(e.length)&&!Vt(e)};var ir=function(e){return rr(e)?Jn(e):nr(e)};var or=function(e,t){return e&&An(t,ir(t),e)};var ar=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t},ur=Object.prototype.hasOwnProperty;var lr=function(e){if(!Ut(e))return ar(e);var t=Zn(e),n=[];for(var r in e)("constructor"!=r||!t&&ur.call(e,r))&&n.push(r);return n};var cr=function(e){return rr(e)?Jn(e,!0):lr(e)};var sr=function(e,t){return e&&An(t,cr(t),e)},fr=n(65);var dr=function(e,t){var n=-1,r=e.length;for(t||(t=Array(r));++n<r;)t[n]=e[n];return t};var pr=function(e,t){for(var n=-1,r=null==e?0:e.length,i=0,o=[];++n<r;){var a=e[n];t(a,n,e)&&(o[i++]=a)}return o};var hr=function(){return[]},vr=Object.prototype.propertyIsEnumerable,mr=Object.getOwnPropertySymbols,yr=mr?function(e){return null==e?[]:(e=Object(e),pr(mr(e),(function(t){return vr.call(e,t)})))}:hr;var br=function(e,t){return An(e,yr(e),t)};var gr=function(e,t){for(var n=-1,r=t.length,i=e.length;++n<r;)e[i+n]=t[n];return e},wr=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)gr(t,yr(e)),e=bt(e);return t}:hr;var Er=function(e,t){return An(e,wr(e),t)};var xr=function(e,t,n){var r=t(e);return Ln(e)?r:gr(r,n(e))};var _r=function(e){return xr(e,ir,yr)};var Sr=function(e){return xr(e,cr,wr)},kr=nn(at.a,"DataView"),Tr=nn(at.a,"Promise"),Or=nn(at.a,"Set"),Cr=nn(at.a,"WeakMap"),Pr=Qt(kr),jr=Qt(rn),Fr=Qt(Tr),Ar=Qt(Or),Rr=Qt(Cr),Nr=mt;(kr&&"[object DataView]"!=Nr(new kr(new ArrayBuffer(1)))||rn&&"[object Map]"!=Nr(new rn)||Tr&&"[object Promise]"!=Nr(Tr.resolve())||Or&&"[object Set]"!=Nr(new Or)||Cr&&"[object WeakMap]"!=Nr(new Cr))&&(Nr=function(e){var t=mt(e),n="[object Object]"==t?e.constructor:void 0,r=n?Qt(n):"";if(r)switch(r){case Pr:return"[object DataView]";case jr:return"[object Map]";case Fr:return"[object Promise]";case Ar:return"[object Set]";case Rr:return"[object WeakMap]"}return t});var Dr=Nr,Ir=Object.prototype.hasOwnProperty;var Mr=function(e){var t=e.length,n=new e.constructor(t);return t&&"string"==typeof e[0]&&Ir.call(e,"index")&&(n.index=e.index,n.input=e.input),n},zr=at.a.Uint8Array;var Lr=function(e){var t=new e.constructor(e.byteLength);return new zr(t).set(new zr(e)),t};var Ur=function(e,t){var n=t?Lr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)},$r=/\w*$/;var Vr=function(e){var t=new e.constructor(e.source,$r.exec(e));return t.lastIndex=e.lastIndex,t},Wr=ut?ut.prototype:void 0,Br=Wr?Wr.valueOf:void 0;var Hr=function(e){return Br?Object(Br.call(e)):{}};var qr=function(e,t){var n=t?Lr(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)};var Qr=function(e,t,n){var r=e.constructor;switch(t){case"[object ArrayBuffer]":return Lr(e);case"[object Boolean]":case"[object Date]":return new r(+e);case"[object DataView]":return Ur(e,n);case"[object Float32Array]":case"[object Float64Array]":case"[object Int8Array]":case"[object Int16Array]":case"[object Int32Array]":case"[object Uint8Array]":case"[object Uint8ClampedArray]":case"[object Uint16Array]":case"[object Uint32Array]":return qr(e,n);case"[object Map]":return new r;case"[object Number]":case"[object String]":return new r(e);case"[object RegExp]":return Vr(e);case"[object Set]":return new r;case"[object Symbol]":return Hr(e)}},Kr=Object.create,Yr=function(){function e(){}return function(t){if(!Ut(t))return{};if(Kr)return Kr(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();var Gr=function(e){return"function"!=typeof e.constructor||Zn(e)?{}:Yr(bt(e))};var Jr=function(e){return gt(e)&&"[object Map]"==Dr(e)},Xr=Qn.a&&Qn.a.isMap,Zr=Xr?qn(Xr):Jr;var ei=function(e){return gt(e)&&"[object Set]"==Dr(e)},ti=Qn.a&&Qn.a.isSet,ni=ti?qn(ti):ei,ri={};ri["[object Arguments]"]=ri["[object Array]"]=ri["[object ArrayBuffer]"]=ri["[object DataView]"]=ri["[object Boolean]"]=ri["[object Date]"]=ri["[object Float32Array]"]=ri["[object Float64Array]"]=ri["[object Int8Array]"]=ri["[object Int16Array]"]=ri["[object Int32Array]"]=ri["[object Map]"]=ri["[object Number]"]=ri["[object Object]"]=ri["[object RegExp]"]=ri["[object Set]"]=ri["[object String]"]=ri["[object Symbol]"]=ri["[object Uint8Array]"]=ri["[object Uint8ClampedArray]"]=ri["[object Uint16Array]"]=ri["[object Uint32Array]"]=!0,ri["[object Error]"]=ri["[object Function]"]=ri["[object WeakMap]"]=!1;var ii=function e(t,n,r,i,o,a){var u,l=1&n,c=2&n,s=4&n;if(r&&(u=o?r(t,i,o,a):r(t)),void 0!==u)return u;if(!Ut(t))return t;var f=Ln(t);if(f){if(u=Mr(t),!l)return dr(t,u)}else{var d=Dr(t),p="[object Function]"==d||"[object GeneratorFunction]"==d;if(Object(Un.a)(t))return Object(fr.a)(t,l);if("[object Object]"==d||"[object Arguments]"==d||p&&!o){if(u=c||p?{}:Gr(t),!l)return c?Er(t,sr(u,t)):br(t,or(u,t))}else{if(!ri[d])return o?t:{};u=Qr(t,d,l)}}a||(a=new Tn);var h=a.get(t);if(h)return h;a.set(t,u),ni(t)?t.forEach((function(i){u.add(e(i,n,r,i,t,a))})):Zr(t)&&t.forEach((function(i,o){u.set(o,e(i,n,r,o,t,a))}));var v=s?c?Sr:_r:c?keysIn:ir,m=f?void 0:v(t);return On(m||t,(function(i,o){m&&(i=t[o=i]),Fn(u,o,e(i,n,r,o,t,a))})),u};var oi=function(e){return ii(e,4)};var ai=function(e,t){for(var n=-1,r=null==e?0:e.length,i=Array(r);++n<r;)i[n]=t(e[n],n,e);return i};var ui=function(e){return"symbol"==typeof e||gt(e)&&"[object Symbol]"==mt(e)};function li(e,t){if("function"!=typeof e||null!=t&&"function"!=typeof t)throw new TypeError("Expected a function");var n=function(){var r=arguments,i=t?t.apply(this,r):r[0],o=n.cache;if(o.has(i))return o.get(i);var a=e.apply(this,r);return n.cache=o.set(i,a)||o,a};return n.cache=new(li.Cache||_n),n}li.Cache=_n;var ci=li;var si=/[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g,fi=/\\(\\)?/g,di=function(e){var t=ci(e,(function(e){return 500===n.size&&n.clear(),e})),n=t.cache;return t}((function(e){var t=[];return 46===e.charCodeAt(0)&&t.push(""),e.replace(si,(function(e,n,r,i){t.push(r?i.replace(fi,"$1"):n||e)})),t}));var pi=function(e){if("string"==typeof e||ui(e))return e;var t=e+"";return"0"==t&&1/e==-1/0?"-0":t},hi=ut?ut.prototype:void 0,vi=hi?hi.toString:void 0;var mi=function e(t){if("string"==typeof t)return t;if(Ln(t))return ai(t,e)+"";if(ui(t))return vi?vi.call(t):"";var n=t+"";return"0"==n&&1/t==-1/0?"-0":n};var yi=function(e){return null==e?"":mi(e)};var bi=function(e){return Ln(e)?ai(e,pi):ui(e)?[e]:dr(di(yi(e)))},gi=n(2),wi=n(38);var Ei=function(e){return ii(e,5)};function xi(){return(xi=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}function _i(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}function Si(e,t){if(null==e)return{};var n,r,i={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}function ki(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var Ti=function(e){return Array.isArray(e)&&0===e.length},Oi=function(e){return"function"==typeof e},Ci=function(e){return null!==e&&"object"==typeof e},Pi=function(e){return String(Math.floor(Number(e)))===e},ji=function(e){return"[object String]"===Object.prototype.toString.call(e)},Fi=function(e){return 0===r.Children.count(e)},Ai=function(e){return Ci(e)&&Oi(e.then)};function Ri(e,t,n,r){void 0===r&&(r=0);for(var i=bi(t);e&&r<i.length;)e=e[i[r++]];return void 0===e?n:e}function Ni(e,t,n){for(var r=oi(e),i=r,o=0,a=bi(t);o<a.length-1;o++){var u=a[o],l=Ri(e,a.slice(0,o+1));if(l&&(Ci(l)||Array.isArray(l)))i=i[u]=oi(l);else{var c=a[o+1];i=i[u]=Pi(c)&&Number(c)>=0?[]:{}}}return(0===o?e:i)[a[o]]===n?e:(void 0===n?delete i[a[o]]:i[a[o]]=n,0===o&&void 0===n&&delete r[a[o]],r)}function Di(e,t,n,r){void 0===n&&(n=new WeakMap),void 0===r&&(r={});for(var i=0,o=Object.keys(e);i<o.length;i++){var a=o[i],u=e[a];Ci(u)?n.get(u)||(n.set(u,!0),r[a]=Array.isArray(u)?[]:{},Di(u,t,n,r[a])):r[a]=t}return r}var Ii=Object(r.createContext)(void 0),Mi=Ii.Provider,zi=Ii.Consumer;function Li(){var e=Object(r.useContext)(Ii);return e||Object(gi.a)(!1),e}function Ui(e,t){switch(t.type){case"SET_VALUES":return xi({},e,{values:t.payload});case"SET_TOUCHED":return xi({},e,{touched:t.payload});case"SET_ERRORS":return Ze()(e.errors,t.payload)?e:xi({},e,{errors:t.payload});case"SET_STATUS":return xi({},e,{status:t.payload});case"SET_ISSUBMITTING":return xi({},e,{isSubmitting:t.payload});case"SET_ISVALIDATING":return xi({},e,{isValidating:t.payload});case"SET_FIELD_VALUE":return xi({},e,{values:Ni(e.values,t.payload.field,t.payload.value)});case"SET_FIELD_TOUCHED":return xi({},e,{touched:Ni(e.touched,t.payload.field,t.payload.value)});case"SET_FIELD_ERROR":return xi({},e,{errors:Ni(e.errors,t.payload.field,t.payload.value)});case"RESET_FORM":return xi({},e,{},t.payload);case"SET_FORMIK_STATE":return t.payload(e);case"SUBMIT_ATTEMPT":return xi({},e,{touched:Di(e.values,!0),isSubmitting:!0,submitCount:e.submitCount+1});case"SUBMIT_FAILURE":case"SUBMIT_SUCCESS":return xi({},e,{isSubmitting:!1});default:return e}}var $i={},Vi={};function Wi(e){var t=e.validateOnChange,n=void 0===t||t,i=e.validateOnBlur,o=void 0===i||i,a=e.validateOnMount,u=void 0!==a&&a,l=e.isInitialValid,c=e.enableReinitialize,s=void 0!==c&&c,f=e.onSubmit,d=Si(e,["validateOnChange","validateOnBlur","validateOnMount","isInitialValid","enableReinitialize","onSubmit"]),p=xi({validateOnChange:n,validateOnBlur:o,validateOnMount:u,onSubmit:f},d),h=Object(r.useRef)(p.initialValues),v=Object(r.useRef)(p.initialErrors||$i),m=Object(r.useRef)(p.initialTouched||Vi),y=Object(r.useRef)(p.initialStatus),b=Object(r.useRef)(!1),g=Object(r.useRef)({});Object(r.useEffect)((function(){0}),[]),Object(r.useEffect)((function(){return b.current=!0,function(){b.current=!1}}),[]);var w=Object(r.useReducer)(Ui,{values:p.initialValues,errors:p.initialErrors||$i,touched:p.initialTouched||Vi,status:p.initialStatus,isSubmitting:!1,isValidating:!1,submitCount:0}),E=w[0],x=w[1],_=Object(r.useCallback)((function(e,t){return new Promise((function(n,r){var i=p.validate(e,t);null==i?n($i):Ai(i)?i.then((function(e){n(e||$i)}),(function(e){r(e)})):n(i)}))}),[p.validate]),S=Object(r.useCallback)((function(e,t){var n=p.validationSchema,r=Oi(n)?n(t):n,i=t&&r.validateAt?r.validateAt(t,e):function(e,t,n,r){void 0===n&&(n=!1);void 0===r&&(r={});var i=function e(t){var n={};for(var r in t)if(Object.prototype.hasOwnProperty.call(t,r)){var i=String(r);!0===Array.isArray(t[i])?n[i]=t[i].map((function(t){return!0===Array.isArray(t)||kt(t)?e(t):""!==t?t:void 0})):kt(t[i])?n[i]=e(t[i]):n[i]=""!==t[i]?t[i]:void 0}return n}(e);return t[n?"validateSync":"validate"](i,{abortEarly:!1,context:r})}(e,r);return new Promise((function(e,t){i.then((function(){e($i)}),(function(n){"ValidationError"===n.name?e(function(e){var t={};if(e.inner){if(0===e.inner.length)return Ni(t,e.path,e.message);var n=e.inner,r=Array.isArray(n),i=0;for(n=r?n:n[Symbol.iterator]();;){var o;if(r){if(i>=n.length)break;o=n[i++]}else{if((i=n.next()).done)break;o=i.value}var a=o;Ri(t,a.path)||(t=Ni(t,a.path,a.message))}}return t}(n)):t(n)}))}))}),[p.validationSchema]),k=Object(r.useCallback)((function(e,t){return new Promise((function(n){return n(g.current[e].validate(t))}))}),[]),T=Object(r.useCallback)((function(e){var t=Object.keys(g.current).filter((function(e){return Oi(g.current[e].validate)})),n=t.length>0?t.map((function(t){return k(t,Ri(e,t))})):[Promise.resolve("DO_NOT_DELETE_YOU_WILL_BE_FIRED")];return Promise.all(n).then((function(e){return e.reduce((function(e,n,r){return"DO_NOT_DELETE_YOU_WILL_BE_FIRED"===n||n&&(e=Ni(e,t[r],n)),e}),{})}))}),[k]),O=Object(r.useCallback)((function(e){return Promise.all([T(e),p.validationSchema?S(e):{},p.validate?_(e):{}]).then((function(e){var t=e[0],n=e[1],r=e[2];return ot.all([t,n,r],{arrayMerge:Hi})}))}),[p.validate,p.validationSchema,T,_,S]),C=Qi((function(e){return void 0===e&&(e=E.values),Object(wi.unstable_runWithPriority)(wi.LowPriority,(function(){return O(e).then((function(e){return b.current&&x({type:"SET_ERRORS",payload:e}),e})).catch((function(e){0}))}))})),P=Qi((function(e){return void 0===e&&(e=E.values),x({type:"SET_ISVALIDATING",payload:!0}),O(e).then((function(e){return b.current&&(x({type:"SET_ISVALIDATING",payload:!1}),Ze()(E.errors,e)||x({type:"SET_ERRORS",payload:e})),e}))}));Object(r.useEffect)((function(){u&&!0===b.current&&C(h.current)}),[u,C]);var j=Object(r.useCallback)((function(e){var t=e&&e.values?e.values:h.current,n=e&&e.errors?e.errors:v.current?v.current:p.initialErrors||{},r=e&&e.touched?e.touched:m.current?m.current:p.initialTouched||{},i=e&&e.status?e.status:y.current?y.current:p.initialStatus;h.current=t,v.current=n,m.current=r,y.current=i;var o=function(){x({type:"RESET_FORM",payload:{isSubmitting:!!e&&!!e.isSubmitting,errors:n,touched:r,status:i,values:t,isValidating:!!e&&!!e.isValidating,submitCount:e&&e.submitCount&&"number"==typeof e.submitCount?e.submitCount:0}})};if(p.onReset){var a=p.onReset(E.values,Y);Ai(a)?a.then(o):o()}else o()}),[p.initialErrors,p.initialStatus,p.initialTouched]);Object(r.useEffect)((function(){s||(h.current=p.initialValues)}),[s,p.initialValues]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ze()(h.current,p.initialValues)&&(h.current=p.initialValues,j())}),[s,p.initialValues,j]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ze()(v.current,p.initialErrors)&&(v.current=p.initialErrors||$i,x({type:"SET_ERRORS",payload:p.initialErrors||$i}))}),[s,p.initialErrors]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ze()(m.current,p.initialTouched)&&(m.current=p.initialTouched||Vi,x({type:"SET_TOUCHED",payload:p.initialTouched||Vi}))}),[s,p.initialTouched]),Object(r.useEffect)((function(){s&&!0===b.current&&!Ze()(y.current,p.initialStatus)&&(y.current=p.initialStatus,x({type:"SET_STATUS",payload:p.initialStatus}))}),[s,p.initialStatus,p.initialTouched]);var F=Qi((function(e){if(Oi(g.current[e].validate)){var t=Ri(E.values,e),n=g.current[e].validate(t);return Ai(n)?(x({type:"SET_ISVALIDATING",payload:!0}),n.then((function(e){return e})).then((function(t){x({type:"SET_FIELD_ERROR",payload:{field:e,value:t}}),x({type:"SET_ISVALIDATING",payload:!1})}))):(x({type:"SET_FIELD_ERROR",payload:{field:e,value:n}}),Promise.resolve(n))}return p.validationSchema?(x({type:"SET_ISVALIDATING",payload:!0}),S(E.values,e).then((function(e){return e})).then((function(t){x({type:"SET_FIELD_ERROR",payload:{field:e,value:t[e]}}),x({type:"SET_ISVALIDATING",payload:!1})}))):Promise.resolve()})),A=Object(r.useCallback)((function(e,t){var n=t.validate;g.current[e]={validate:n}}),[]),R=Object(r.useCallback)((function(e){delete g.current[e]}),[]),N=Qi((function(e,t){return x({type:"SET_TOUCHED",payload:e}),(void 0===t?o:t)?C(E.values):Promise.resolve()})),D=Object(r.useCallback)((function(e){x({type:"SET_ERRORS",payload:e})}),[]),I=Qi((function(e,t){return x({type:"SET_VALUES",payload:e}),(void 0===t?n:t)?C(e):Promise.resolve()})),M=Object(r.useCallback)((function(e,t){x({type:"SET_FIELD_ERROR",payload:{field:e,value:t}})}),[]),z=Qi((function(e,t,r){return x({type:"SET_FIELD_VALUE",payload:{field:e,value:t}}),(void 0===r?n:r)?C(Ni(E.values,e,t)):Promise.resolve()})),L=Object(r.useCallback)((function(e,t){var n,r=t,i=e;if(!ji(e)){e.persist&&e.persist();var o=e.target?e.target:e.currentTarget,a=o.type,u=o.name,l=o.id,c=o.value,s=o.checked,f=(o.outerHTML,o.options),d=o.multiple;r=t||(u||l),i=/number|range/.test(a)?(n=parseFloat(c),isNaN(n)?"":n):/checkbox/.test(a)?function(e,t,n){if("boolean"==typeof e)return Boolean(t);var r=[],i=!1,o=-1;if(Array.isArray(e))r=e,o=e.indexOf(n),i=o>=0;else if(!n||"true"==n||"false"==n)return Boolean(t);if(t&&n&&!i)return r.concat(n);if(!i)return r;return r.slice(0,o).concat(r.slice(o+1))}(Ri(E.values,r),s,c):d?function(e){return Array.from(e).filter((function(e){return e.selected})).map((function(e){return e.value}))}(f):c}r&&z(r,i)}),[z,E.values]),U=Qi((function(e){if(ji(e))return function(t){return L(t,e)};L(e)})),$=Qi((function(e,t,n){return void 0===t&&(t=!0),x({type:"SET_FIELD_TOUCHED",payload:{field:e,value:t}}),(void 0===n?o:n)?C(E.values):Promise.resolve()})),V=Object(r.useCallback)((function(e,t){e.persist&&e.persist();var n=e.target,r=n.name,i=n.id,o=(n.outerHTML,t||(r||i));$(o,!0)}),[$]),W=Qi((function(e){if(ji(e))return function(t){return V(t,e)};V(e)})),B=Object(r.useCallback)((function(e){Oi(e)?x({type:"SET_FORMIK_STATE",payload:e}):x({type:"SET_FORMIK_STATE",payload:function(){return e}})}),[]),H=Object(r.useCallback)((function(e){x({type:"SET_STATUS",payload:e})}),[]),q=Object(r.useCallback)((function(e){x({type:"SET_ISSUBMITTING",payload:e})}),[]),Q=Qi((function(){return x({type:"SUBMIT_ATTEMPT"}),P().then((function(e){var t=e instanceof Error;if(!t&&0===Object.keys(e).length){var n;try{if(void 0===(n=G()))return}catch(e){throw e}return Promise.resolve(n).then((function(){b.current&&x({type:"SUBMIT_SUCCESS"})})).catch((function(e){if(b.current)throw x({type:"SUBMIT_FAILURE"}),e}))}if(b.current&&(x({type:"SUBMIT_FAILURE"}),t))throw e}))})),K=Qi((function(e){e&&e.preventDefault&&Oi(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&Oi(e.stopPropagation)&&e.stopPropagation(),Q().catch((function(e){console.warn("Warning: An unhandled error was caught from submitForm()",e)}))})),Y={resetForm:j,validateForm:P,validateField:F,setErrors:D,setFieldError:M,setFieldTouched:$,setFieldValue:z,setStatus:H,setSubmitting:q,setTouched:N,setValues:I,setFormikState:B,submitForm:Q},G=Qi((function(){return f(E.values,Y)})),J=Qi((function(e){e&&e.preventDefault&&Oi(e.preventDefault)&&e.preventDefault(),e&&e.stopPropagation&&Oi(e.stopPropagation)&&e.stopPropagation(),j()})),X=Object(r.useCallback)((function(e){return{value:Ri(E.values,e),error:Ri(E.errors,e),touched:!!Ri(E.touched,e),initialValue:Ri(h.current,e),initialTouched:!!Ri(m.current,e),initialError:Ri(v.current,e)}}),[E.errors,E.touched,E.values]),Z=Object(r.useCallback)((function(e){return{setValue:function(t){return z(e,t)},setTouched:function(t){return $(e,t)},setError:function(t){return M(e,t)}}}),[z,$,M]),ee=Object(r.useCallback)((function(e){var t=Ci(e),n=t?e.name:e,r=Ri(E.values,n),i={name:n,value:r,onChange:U,onBlur:W};if(t){var o=e.type,a=e.value,u=e.as,l=e.multiple;"checkbox"===o?void 0===a?i.checked=!!r:(i.checked=!(!Array.isArray(r)||!~r.indexOf(a)),i.value=a):"radio"===o?(i.checked=r===a,i.value=a):"select"===u&&l&&(i.value=i.value||[],i.multiple=!0)}return i}),[W,U,E.values]),te=Object(r.useMemo)((function(){return!Ze()(h.current,E.values)}),[h.current,E.values]),ne=Object(r.useMemo)((function(){return void 0!==l?te?E.errors&&0===Object.keys(E.errors).length:!1!==l&&Oi(l)?l(p):l:E.errors&&0===Object.keys(E.errors).length}),[l,te,E.errors,p]);return xi({},E,{initialValues:h.current,initialErrors:v.current,initialTouched:m.current,initialStatus:y.current,handleBlur:W,handleChange:U,handleReset:J,handleSubmit:K,resetForm:j,setErrors:D,setFormikState:B,setFieldTouched:$,setFieldValue:z,setFieldError:M,setStatus:H,setSubmitting:q,setTouched:N,setValues:I,submitForm:Q,validateForm:P,validateField:F,isValid:ne,dirty:te,unregisterField:R,registerField:A,getFieldProps:ee,getFieldMeta:X,getFieldHelpers:Z,validateOnBlur:o,validateOnChange:n,validateOnMount:u})}function Bi(e){var t=Wi(e),n=e.component,i=e.children,o=e.render,a=e.innerRef;return Object(r.useImperativeHandle)(a,(function(){return t})),Object(r.useEffect)((function(){0}),[]),Object(r.createElement)(Mi,{value:t},n?Object(r.createElement)(n,t):o?o(t):i?Oi(i)?i(t):Fi(i)?null:r.Children.only(i):null)}function Hi(e,t,n){var r=e.slice();return t.forEach((function(t,i){if(void 0===r[i]){var o=!1!==n.clone&&n.isMergeableObject(t);r[i]=o?ot(Array.isArray(t)?[]:{},t,n):t}else n.isMergeableObject(t)?r[i]=ot(e[i],t,n):-1===e.indexOf(t)&&r.push(t)})),r}var qi="undefined"!=typeof window&&void 0!==window.document&&void 0!==window.document.createElement?r.useLayoutEffect:r.useEffect;function Qi(e){var t=Object(r.useRef)(e);return qi((function(){t.current=e})),Object(r.useCallback)((function(){for(var e=arguments.length,n=new Array(e),r=0;r<e;r++)n[r]=arguments[r];return t.current.apply(void 0,n)}),[])}var Ki=Object(r.forwardRef)((function(e,t){var n=e.action,i=Si(e,["action"]),o=n||"#",a=Li(),u=a.handleReset,l=a.handleSubmit;return Object(r.createElement)("form",Object.assign({onSubmit:l,ref:t,onReset:u,action:o},i))}));function Yi(e){var t=function(t){return Object(r.createElement)(zi,null,(function(n){return n||Object(gi.a)(!1),Object(r.createElement)(e,Object.assign({},t,{formik:n}))}))},n=e.displayName||e.name||e.constructor&&e.constructor.name||"Component";return t.WrappedComponent=e,t.displayName="FormikConnect("+n+")",m()(t,e)}Ki.displayName="Form";var Gi=function(e,t,n){var r=Ji(e);return r.splice(t,0,n),r},Ji=function(e){if(e){if(Array.isArray(e))return[].concat(e);var t=Object.keys(e).map((function(e){return parseInt(e)})).reduce((function(e,t){return t>e?t:e}),0);return Array.from(xi({},e,{length:t+1}))}return[]},Xi=function(e){function t(t){var n;return(n=e.call(this,t)||this).updateArrayField=function(e,t,r){var i=n.props,o=i.name;(0,i.formik.setFormikState)((function(n){var i="function"==typeof r?r:e,a="function"==typeof t?t:e,u=Ni(n.values,o,e(Ri(n.values,o))),l=r?i(Ri(n.errors,o)):void 0,c=t?a(Ri(n.touched,o)):void 0;return Ti(l)&&(l=void 0),Ti(c)&&(c=void 0),xi({},n,{values:u,errors:r?Ni(n.errors,o,l):n.errors,touched:t?Ni(n.touched,o,c):n.touched})}))},n.push=function(e){return n.updateArrayField((function(t){return[].concat(Ji(t),[Ei(e)])}),!1,!1)},n.handlePush=function(e){return function(){return n.push(e)}},n.swap=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Ji(e),i=r[t];return r[t]=r[n],r[n]=i,r}(n,e,t)}),!0,!0)},n.handleSwap=function(e,t){return function(){return n.swap(e,t)}},n.move=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Ji(e),i=r[t];return r.splice(t,1),r.splice(n,0,i),r}(n,e,t)}),!0,!0)},n.handleMove=function(e,t){return function(){return n.move(e,t)}},n.insert=function(e,t){return n.updateArrayField((function(n){return Gi(n,e,t)}),(function(t){return Gi(t,e,null)}),(function(t){return Gi(t,e,null)}))},n.handleInsert=function(e,t){return function(){return n.insert(e,t)}},n.replace=function(e,t){return n.updateArrayField((function(n){return function(e,t,n){var r=Ji(e);return r[t]=n,r}(n,e,t)}),!1,!1)},n.handleReplace=function(e,t){return function(){return n.replace(e,t)}},n.unshift=function(e){var t=-1;return n.updateArrayField((function(n){var r=n?[e].concat(n):[e];return t<0&&(t=r.length),r}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n}),(function(e){var n=e?[null].concat(e):[null];return t<0&&(t=n.length),n})),t},n.handleUnshift=function(e){return function(){return n.unshift(e)}},n.handleRemove=function(e){return function(){return n.remove(e)}},n.handlePop=function(){return function(){return n.pop()}},n.remove=n.remove.bind(ki(n)),n.pop=n.pop.bind(ki(n)),n}_i(t,e);var n=t.prototype;return n.componentDidUpdate=function(e){!Ze()(Ri(e.formik.values,e.name),Ri(this.props.formik.values,this.props.name))&&this.props.formik.validateOnChange&&this.props.formik.validateForm(this.props.formik.values)},n.remove=function(e){var t;return this.updateArrayField((function(n){var r=n?Ji(n):[];return t||(t=r[e]),Oi(r.splice)&&r.splice(e,1),r}),!0,!0),t},n.pop=function(){var e;return this.updateArrayField((function(t){var n=t;return e||(e=n&&n.pop&&n.pop()),n}),!0,!0),e},n.render=function(){var e={push:this.push,pop:this.pop,swap:this.swap,move:this.move,insert:this.insert,replace:this.replace,unshift:this.unshift,remove:this.remove,handlePush:this.handlePush,handlePop:this.handlePop,handleSwap:this.handleSwap,handleMove:this.handleMove,handleInsert:this.handleInsert,handleReplace:this.handleReplace,handleUnshift:this.handleUnshift,handleRemove:this.handleRemove},t=this.props,n=t.component,i=t.render,o=t.children,a=t.name,u=xi({},e,{form:Si(t.formik,["validate","validationSchema"]),name:a});return n?Object(r.createElement)(n,u):i?i(u):o?"function"==typeof o?o(u):Fi(o)?null:r.Children.only(o):null},t}(r.Component);Xi.defaultProps={validateOnChange:!0};r.Component,r.Component;var Zi=n(66),eo=n.n(Zi),to=n(39),no=n.n(to);var ro=function(e){const{tag:t="h2",type:n="h2",text:r}=e,o=t;let a="";return"h2"===n&&(a+=no.a.h2),"h3"===n&&(a+=no.a.h3),i.a.createElement(o,{className:a},r)};n(111);var io=function(e){const{text:t="Error message didn't passed",indent:n}=e;let r="error";return 1*n==1&&(r+=" error--padding-1"),1*n==2&&(r+=" error--padding-2"),1*n==3&&(r+=" error--padding-3"),i.a.createElement("p",{className:r},t)};function oo(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var ao=Object.prototype.hasOwnProperty;var uo=function(e,t){return null!=e&&ao.call(e,t)},lo=/\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,co=/^\w*$/;var so=function(e,t){if(Ln(e))return!1;var n=typeof e;return!("number"!=n&&"symbol"!=n&&"boolean"!=n&&null!=e&&!ui(e))||(co.test(e)||!lo.test(e)||null!=t&&e in Object(t))};var fo=function(e,t){return Ln(e)?e:so(e,t)?[e]:di(yi(e))};var po=function(e,t,n){for(var r=-1,i=(t=fo(t,e)).length,o=!1;++r<i;){var a=pi(t[r]);if(!(o=null!=e&&n(e,a)))break;e=e[a]}return o||++r!=i?o:!!(i=null==e?0:e.length)&&Wn(i)&&Vn(a,i)&&(Ln(e)||zn(e))};var ho=function(e,t){return null!=e&&po(e,t,uo)};var vo=function(e,t){return ii(e,5,t="function"==typeof t?t:void 0)};var mo=function(e){return"string"==typeof e||!Ln(e)&&gt(e)&&"[object String]"==mt(e)};var yo=function(e){for(var t,n=[];!(t=e.next()).done;)n.push(t.value);return n};var bo=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e,r){n[++t]=[r,e]})),n};var go=function(e){var t=-1,n=Array(e.size);return e.forEach((function(e){n[++t]=e})),n};var wo=function(e){return e.split("")},Eo=RegExp("[\\u200d\\ud800-\\udfff\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff\\ufe0e\\ufe0f]");var xo=function(e){return Eo.test(e)},_o="[\\ud800-\\udfff]",So="[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]",ko="\\ud83c[\\udffb-\\udfff]",To="[^\\ud800-\\udfff]",Oo="(?:\\ud83c[\\udde6-\\uddff]){2}",Co="[\\ud800-\\udbff][\\udc00-\\udfff]",Po="(?:"+So+"|"+ko+")"+"?",jo="[\\ufe0e\\ufe0f]?"+Po+("(?:\\u200d(?:"+[To,Oo,Co].join("|")+")[\\ufe0e\\ufe0f]?"+Po+")*"),Fo="(?:"+[To+So+"?",So,Oo,Co,_o].join("|")+")",Ao=RegExp(ko+"(?="+ko+")|"+Fo+jo,"g");var Ro=function(e){return e.match(Ao)||[]};var No=function(e){return xo(e)?Ro(e):wo(e)};var Do=function(e,t){return ai(t,(function(t){return e[t]}))};var Io=function(e){return null==e?[]:Do(e,ir(e))},Mo=ut?ut.iterator:void 0;var zo=function(e){if(!e)return[];if(rr(e))return mo(e)?No(e):dr(e);if(Mo&&e[Mo])return yo(e[Mo]());var t=Dr(e);return("[object Map]"==t?bo:"[object Set]"==t?go:Io)(e)},Lo=Object.prototype.toString,Uo=Error.prototype.toString,$o=RegExp.prototype.toString,Vo="undefined"!=typeof Symbol?Symbol.prototype.toString:function(){return""},Wo=/^Symbol\((.*)\)(.*)$/;function Bo(e,t){if(void 0===t&&(t=!1),null==e||!0===e||!1===e)return""+e;var n=typeof e;if("number"===n)return function(e){return e!=+e?"NaN":0===e&&1/e<0?"-0":""+e}(e);if("string"===n)return t?'"'+e+'"':e;if("function"===n)return"[Function "+(e.name||"anonymous")+"]";if("symbol"===n)return Vo.call(e).replace(Wo,"Symbol($1)");var r=Lo.call(e).slice(8,-1);return"Date"===r?isNaN(e.getTime())?""+e:e.toISOString(e):"Error"===r||e instanceof Error?"["+Uo.call(e)+"]":"RegExp"===r?$o.call(e):null}function Ho(e,t){var n=Bo(e,t);return null!==n?n:JSON.stringify(e,(function(e,n){var r=Bo(this[e],t);return null!==r?r:n}),2)}var qo={default:"${path} is invalid",required:"${path} is a required field",oneOf:"${path} must be one of the following values: ${values}",notOneOf:"${path} must not be one of the following values: ${values}",notType:function(e){var t=e.path,n=e.type,r=e.value,i=e.originalValue,o=null!=i&&i!==r,a=t+" must be a `"+n+"` type, but the final value was: `"+Ho(r,!0)+"`"+(o?" (cast from the value `"+Ho(i,!0)+"`).":".");return null===r&&(a+='\n If "null" is intended as an empty value be sure to mark the schema as `.nullable()`'),a},defined:"${path} must be defined"},Qo={length:"${path} must be exactly ${length} characters",min:"${path} must be at least ${min} characters",max:"${path} must be at most ${max} characters",matches:'${path} must match the following: "${regex}"',email:"${path} must be a valid email",url:"${path} must be a valid URL",trim:"${path} must be a trimmed string",lowercase:"${path} must be a lowercase string",uppercase:"${path} must be a upper case string"},Ko={min:"${path} must be greater than or equal to ${min}",max:"${path} must be less than or equal to ${max}",lessThan:"${path} must be less than ${less}",moreThan:"${path} must be greater than ${more}",notEqual:"${path} must be not equal to ${notEqual}",positive:"${path} must be a positive number",negative:"${path} must be a negative number",integer:"${path} must be an integer"},Yo={min:"${path} field must be later than ${min}",max:"${path} field must be at earlier than ${max}"},Go={noUnknown:"${path} field has unspecified keys: ${unknown}"},Jo={min:"${path} field must have at least ${min} items",max:"${path} field must have less than or equal to ${max} items"},Xo=function(e){return e&&e.__isYupSchema__},Zo=function(){function e(e,t){if(this.refs=e,"function"!=typeof t){if(!ho(t,"is"))throw new TypeError("`is:` is required for `when()` conditions");if(!t.then&&!t.otherwise)throw new TypeError("either `then:` or `otherwise:` is required for `when()` conditions");var n=t.is,r=t.then,i=t.otherwise,o="function"==typeof n?n:function(){for(var e=arguments.length,t=new Array(e),r=0;r<e;r++)t[r]=arguments[r];return t.every((function(e){return e===n}))};this.fn=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];var a=t.pop(),u=t.pop(),l=o.apply(void 0,t)?r:i;if(l)return"function"==typeof l?l(u):u.concat(l.resolve(a))}}else this.fn=t}return e.prototype.resolve=function(e,t){var n=this.refs.map((function(e){return e.getValue(t)})),r=this.fn.apply(e,n.concat(e,t));if(void 0===r||r===e)return e;if(!Xo(r))throw new TypeError("conditions must return a schema object");return r.resolve(t)},e}(),ea=n(15),ta=/\$\{\s*(\w+)\s*\}/g,na=function(e){return function(t){return e.replace(ta,(function(e,n){return Ho(t[n])}))}};function ra(e,t,n,r){var i=this;this.name="ValidationError",this.value=t,this.path=n,this.type=r,this.errors=[],this.inner=[],e&&[].concat(e).forEach((function(e){i.errors=i.errors.concat(e.errors||e),e.inner&&(i.inner=i.inner.concat(e.inner.length?e.inner:e))})),this.message=this.errors.length>1?this.errors.length+" errors occurred":this.errors[0],Error.captureStackTrace&&Error.captureStackTrace(this,ra)}ra.prototype=Object.create(Error.prototype),ra.prototype.constructor=ra,ra.isError=function(e){return e&&"ValidationError"===e.name},ra.formatError=function(e,t){"string"==typeof e&&(e=na(e));var n=function(t){return t.path=t.label||t.path||"this","function"==typeof e?e(t):e};return 1===arguments.length?n:n(t)};var ia=function(e){return e?ea.SynchronousPromise:Promise};function oa(e,t){return e?null:function(e){return t.push(e),e.value}}function aa(e){var t=e.validations,n=e.value,r=e.path,i=e.sync,o=e.errors,a=e.sort;return o=function(e){return void 0===e&&(e=[]),e.inner&&e.inner.length?e.inner:[].concat(e)}(o),function(e,t){var n=ia(t);return n.all(e.map((function(e){return n.resolve(e).then((function(e){return{fulfilled:!0,value:e}}),(function(e){return{fulfilled:!1,value:e}}))})))}(t,i).then((function(e){var t=e.filter((function(e){return!e.fulfilled})).reduce((function(e,t){var n=t.value;if(!ra.isError(n))throw n;return e.concat(n)}),[]);if(a&&t.sort(a),(o=t.concat(o)).length)throw new ra(o,n,r);return n}))}function ua(e){var t,n,r,i=e.endEarly,o=h(e,["endEarly"]);return i?(t=o.validations,n=o.value,r=o.sync,ia(r).all(t).catch((function(e){throw"ValidationError"===e.name&&(e.value=n),e})).then((function(){return n}))):aa(o)}var la=function(e){return"[object Object]"===Object.prototype.toString.call(e)};var ca=function(e){return function(t,n,r){for(var i=-1,o=Object(t),a=r(t),u=a.length;u--;){var l=a[e?u:++i];if(!1===n(o[l],l,o))break}return t}}();var sa=function(e,t){return e&&ca(e,t,ir)};var fa=function(e){return this.__data__.set(e,"__lodash_hash_undefined__"),this};var da=function(e){return this.__data__.has(e)};function pa(e){var t=-1,n=null==e?0:e.length;for(this.__data__=new _n;++t<n;)this.add(e[t])}pa.prototype.add=pa.prototype.push=fa,pa.prototype.has=da;var ha=pa;var va=function(e,t){for(var n=-1,r=null==e?0:e.length;++n<r;)if(t(e[n],n,e))return!0;return!1};var ma=function(e,t){return e.has(t)};var ya=function(e,t,n,r,i,o){var a=1&n,u=e.length,l=t.length;if(u!=l&&!(a&&l>u))return!1;var c=o.get(e);if(c&&o.get(t))return c==t;var s=-1,f=!0,d=2&n?new ha:void 0;for(o.set(e,t),o.set(t,e);++s<u;){var p=e[s],h=t[s];if(r)var v=a?r(h,p,s,t,e,o):r(p,h,s,e,t,o);if(void 0!==v){if(v)continue;f=!1;break}if(d){if(!va(t,(function(e,t){if(!ma(d,t)&&(p===e||i(p,e,n,r,o)))return d.push(t)}))){f=!1;break}}else if(p!==h&&!i(p,h,n,r,o)){f=!1;break}}return o.delete(e),o.delete(t),f},ba=ut?ut.prototype:void 0,ga=ba?ba.valueOf:void 0;var wa=function(e,t,n,r,i,o,a){switch(n){case"[object DataView]":if(e.byteLength!=t.byteLength||e.byteOffset!=t.byteOffset)return!1;e=e.buffer,t=t.buffer;case"[object ArrayBuffer]":return!(e.byteLength!=t.byteLength||!o(new zr(e),new zr(t)));case"[object Boolean]":case"[object Date]":case"[object Number]":return Ot(+e,+t);case"[object Error]":return e.name==t.name&&e.message==t.message;case"[object RegExp]":case"[object String]":return e==t+"";case"[object Map]":var u=bo;case"[object Set]":var l=1&r;if(u||(u=go),e.size!=t.size&&!l)return!1;var c=a.get(e);if(c)return c==t;r|=2,a.set(e,t);var s=ya(u(e),u(t),r,i,o,a);return a.delete(e),s;case"[object Symbol]":if(ga)return ga.call(e)==ga.call(t)}return!1},Ea=Object.prototype.hasOwnProperty;var xa=function(e,t,n,r,i,o){var a=1&n,u=_r(e),l=u.length;if(l!=_r(t).length&&!a)return!1;for(var c=l;c--;){var s=u[c];if(!(a?s in t:Ea.call(t,s)))return!1}var f=o.get(e);if(f&&o.get(t))return f==t;var d=!0;o.set(e,t),o.set(t,e);for(var p=a;++c<l;){var h=e[s=u[c]],v=t[s];if(r)var m=a?r(v,h,s,t,e,o):r(h,v,s,e,t,o);if(!(void 0===m?h===v||i(h,v,n,r,o):m)){d=!1;break}p||(p="constructor"==s)}if(d&&!p){var y=e.constructor,b=t.constructor;y==b||!("constructor"in e)||!("constructor"in t)||"function"==typeof y&&y instanceof y&&"function"==typeof b&&b instanceof b||(d=!1)}return o.delete(e),o.delete(t),d},_a=Object.prototype.hasOwnProperty;var Sa=function(e,t,n,r,i,o){var a=Ln(e),u=Ln(t),l=a?"[object Array]":Dr(e),c=u?"[object Array]":Dr(t),s="[object Object]"==(l="[object Arguments]"==l?"[object Object]":l),f="[object Object]"==(c="[object Arguments]"==c?"[object Object]":c),d=l==c;if(d&&Object(Un.a)(e)){if(!Object(Un.a)(t))return!1;a=!0,s=!1}if(d&&!s)return o||(o=new Tn),a||Yn(e)?ya(e,t,n,r,i,o):wa(e,t,l,n,r,i,o);if(!(1&n)){var p=s&&_a.call(e,"__wrapped__"),h=f&&_a.call(t,"__wrapped__");if(p||h){var v=p?e.value():e,m=h?t.value():t;return o||(o=new Tn),i(v,m,n,r,o)}}return!!d&&(o||(o=new Tn),xa(e,t,n,r,i,o))};var ka=function e(t,n,r,i,o){return t===n||(null==t||null==n||!gt(t)&&!gt(n)?t!=t&&n!=n:Sa(t,n,r,i,e,o))};var Ta=function(e,t,n,r){var i=n.length,o=i,a=!r;if(null==e)return!o;for(e=Object(e);i--;){var u=n[i];if(a&&u[2]?u[1]!==e[u[0]]:!(u[0]in e))return!1}for(;++i<o;){var l=(u=n[i])[0],c=e[l],s=u[1];if(a&&u[2]){if(void 0===c&&!(l in e))return!1}else{var f=new Tn;if(r)var d=r(c,s,l,e,t,f);if(!(void 0===d?ka(s,c,3,r,f):d))return!1}}return!0};var Oa=function(e){return e==e&&!Ut(e)};var Ca=function(e){for(var t=ir(e),n=t.length;n--;){var r=t[n],i=e[r];t[n]=[r,i,Oa(i)]}return t};var Pa=function(e,t){return function(n){return null!=n&&(n[e]===t&&(void 0!==t||e in Object(n)))}};var ja=function(e){var t=Ca(e);return 1==t.length&&t[0][2]?Pa(t[0][0],t[0][1]):function(n){return n===e||Ta(n,e,t)}};var Fa=function(e,t){for(var n=0,r=(t=fo(t,e)).length;null!=e&&n<r;)e=e[pi(t[n++])];return n&&n==r?e:void 0};var Aa=function(e,t,n){var r=null==e?void 0:Fa(e,t);return void 0===r?n:r};var Ra=function(e,t){return null!=e&&t in Object(e)};var Na=function(e,t){return null!=e&&po(e,t,Ra)};var Da=function(e,t){return so(e)&&Oa(t)?Pa(pi(e),t):function(n){var r=Aa(n,e);return void 0===r&&r===t?Na(n,e):ka(t,r,3)}};var Ia=function(e){return e};var Ma=function(e){return function(t){return null==t?void 0:t[e]}};var za=function(e){return function(t){return Fa(t,e)}};var La=function(e){return so(e)?Ma(pi(e)):za(e)};var Ua=function(e){return"function"==typeof e?e:null==e?Ia:"object"==typeof e?Ln(e)?Da(e[0],e[1]):ja(e):La(e)};var $a=function(e,t){var n={};return t=Ua(t,3),sa(e,(function(e,r,i){Pn(n,r,t(e,r,i))})),n},Va=n(8),Wa="$",Ba=".",Ha=function(){function e(e,t){if(void 0===t&&(t={}),"string"!=typeof e)throw new TypeError("ref must be a string, got: "+e);if(this.key=e.trim(),""===e)throw new TypeError("ref must be a non-empty string");this.isContext=this.key[0]===Wa,this.isValue=this.key[0]===Ba,this.isSibling=!this.isContext&&!this.isValue;var n=this.isContext?Wa:this.isValue?Ba:"";this.path=this.key.slice(n.length),this.getter=this.path&&Object(Va.getter)(this.path,!0),this.map=t.map}var t=e.prototype;return t.getValue=function(e){var t=this.isContext?e.context:this.isValue?e.value:e.parent;return this.getter&&(t=this.getter(t||{})),this.map&&(t=this.map(t)),t},t.cast=function(e,t){return this.getValue(p({},t,{value:e}))},t.resolve=function(){return this},t.describe=function(){return{type:"ref",key:this.key}},t.toString=function(){return"Ref("+this.key+")"},e.isRef=function(e){return e&&e.__isYupRef},e}();Ha.prototype.__isYupRef=!0;var qa=ra.formatError;function Qa(e){var t=e.value,n=e.label,r=e.resolve,i=e.originalValue,o=h(e,["value","label","resolve","originalValue"]);return function(e){var a=void 0===e?{}:e,u=a.path,l=void 0===u?o.path:u,c=a.message,s=void 0===c?o.message:c,f=a.type,d=void 0===f?o.name:f,h=a.params;return h=p({path:l,value:t,originalValue:i,label:n},function(e,t,n){return $a(p({},e,{},t),n)}(o.params,h,r)),p(new ra(qa(s,h),t,l,d),{params:h})}}function Ka(e){var t=e.name,n=e.message,r=e.test,i=e.params;function o(e){var o=e.value,a=e.path,u=e.label,l=e.options,c=e.originalValue,s=e.sync,f=h(e,["value","path","label","options","originalValue","sync"]),d=l.parent,v=function(e){return Ha.isRef(e)?e.getValue({value:o,parent:d,context:l.context}):e},m=Qa({message:n,path:a,value:o,originalValue:c,params:i,label:u,resolve:v,name:t}),y=p({path:a,parent:d,type:t,createError:m,resolve:v,options:l},f);return function(e,t,n,r){var i,o=e.call(t,n);if(!r)return Promise.resolve(o);if((i=o)&&"function"==typeof i.then&&"function"==typeof i.catch)throw new Error('Validation test of type: "'+t.type+'" returned a Promise during a synchronous validate. This test will finish after the validate call has returned');return ea.SynchronousPromise.resolve(o)}(r,y,o,s).then((function(e){if(ra.isError(e))throw e;if(!e)throw m()}))}return o.OPTIONS=e,o}function Ya(e,t,n,r){var i,o,a;return void 0===r&&(r=n),t?(Object(Va.forEach)(t,(function(u,l,c){var s=l?function(e){return e.substr(0,e.length-1).substr(1)}(u):u;if((e=e.resolve({context:r,parent:i,value:n})).innerType){var f=c?parseInt(s,10):0;if(n&&f>=n.length)throw new Error("Yup.reach cannot resolve an array item at index: "+u+", in the path: "+t+". because there is no value at that index. ");i=n,n=n&&n[f],e=e.innerType}if(!c){if(!e.fields||!e.fields[s])throw new Error("The schema does not contain the path: "+t+". (failed at: "+a+' which is a type: "'+e._type+'")');i=n,n=n&&n[s],e=e.fields[s]}o=s,a=l?"["+u+"]":"."+u})),{schema:e,parent:i,parentPath:o}):{parent:i,parentPath:t,schema:e}}var Ga=function(){function e(){this.list=new Set,this.refs=new Map}var t,n,r,i=e.prototype;return i.describe=function(){var e=[],t=this.list,n=Array.isArray(t),r=0;for(t=n?t:t[Symbol.iterator]();;){var i;if(n){if(r>=t.length)break;i=t[r++]}else{if((r=t.next()).done)break;i=r.value}var o=i;e.push(o)}var a=this.refs,u=Array.isArray(a),l=0;for(a=u?a:a[Symbol.iterator]();;){var c;if(u){if(l>=a.length)break;c=a[l++]}else{if((l=a.next()).done)break;c=l.value}var s=c[1];e.push(s.describe())}return e},i.toArray=function(){return zo(this.list).concat(zo(this.refs.values()))},i.add=function(e){Ha.isRef(e)?this.refs.set(e.key,e):this.list.add(e)},i.delete=function(e){Ha.isRef(e)?this.refs.delete(e.key):this.list.delete(e)},i.has=function(e,t){if(this.list.has(e))return!0;for(var n,r=this.refs.values();!(n=r.next()).done;)if(t(n.value)===e)return!0;return!1},i.clone=function(){var t=new e;return t.list=new Set(this.list),t.refs=new Map(this.refs),t},i.merge=function(e,t){var n=this.clone();return e.list.forEach((function(e){return n.add(e)})),e.refs.forEach((function(e){return n.add(e)})),t.list.forEach((function(e){return n.delete(e)})),t.refs.forEach((function(e){return n.delete(e)})),n},t=e,(n=[{key:"size",get:function(){return this.list.size+this.refs.size}}])&&oo(t.prototype,n),r&&oo(t,r),e}();function Ja(e){var t=this;if(void 0===e&&(e={}),!(this instanceof Ja))return new Ja;this._deps=[],this._conditions=[],this._options={abortEarly:!0,recursive:!0},this._exclusive=Object.create(null),this._whitelist=new Ga,this._blacklist=new Ga,this.tests=[],this.transforms=[],this.withMutation((function(){t.typeError(qo.notType)})),ho(e,"default")&&(this._defaultDefault=e.default),this.type=e.type||"mixed",this._type=e.type||"mixed"}for(var Xa=Ja.prototype={__isYupSchema__:!0,constructor:Ja,clone:function(){var e=this;return this._mutate?this:vo(this,(function(t){if(Xo(t)&&t!==e)return t}))},label:function(e){var t=this.clone();return t._label=e,t},meta:function(e){if(0===arguments.length)return this._meta;var t=this.clone();return t._meta=p(t._meta||{},e),t},withMutation:function(e){var t=this._mutate;this._mutate=!0;var n=e(this);return this._mutate=t,n},concat:function(e){if(!e||e===this)return this;if(e._type!==this._type&&"mixed"!==this._type)throw new TypeError("You cannot `concat()` schema's of different types: "+this._type+" and "+e._type);var t=function e(t,n){for(var r in n)if(ho(n,r)){var i=n[r],o=t[r];if(void 0===o)t[r]=i;else{if(o===i)continue;Xo(o)?Xo(i)&&(t[r]=i.concat(o)):la(o)?la(i)&&(t[r]=e(o,i)):Array.isArray(o)&&Array.isArray(i)&&(t[r]=i.concat(o))}}return t}(e.clone(),this);return ho(e,"_default")&&(t._default=e._default),t.tests=this.tests,t._exclusive=this._exclusive,t._whitelist=this._whitelist.merge(e._whitelist,e._blacklist),t._blacklist=this._blacklist.merge(e._blacklist,e._whitelist),t.withMutation((function(t){e.tests.forEach((function(e){t.test(e.OPTIONS)}))})),t},isType:function(e){return!(!this._nullable||null!==e)||(!this._typeCheck||this._typeCheck(e))},resolve:function(e){var t=this;if(t._conditions.length){var n=t._conditions;(t=t.clone())._conditions=[],t=(t=n.reduce((function(t,n){return n.resolve(t,e)}),t)).resolve(e)}return t},cast:function(e,t){void 0===t&&(t={});var n=this.resolve(p({},t,{value:e})),r=n._cast(e,t);if(void 0!==e&&!1!==t.assert&&!0!==n.isType(r)){var i=Ho(e),o=Ho(r);throw new TypeError("The value of "+(t.path||"field")+' could not be cast to a value that satisfies the schema type: "'+n._type+'". \n\nattempted value: '+i+" \n"+(o!==i?"result of cast: "+o:""))}return r},_cast:function(e){var t=this,n=void 0===e?e:this.transforms.reduce((function(n,r){return r.call(t,n,e)}),e);return void 0===n&&ho(this,"_default")&&(n=this.default()),n},_validate:function(e,t){var n=this;void 0===t&&(t={});var r=e,i=null!=t.originalValue?t.originalValue:e,o=this._option("strict",t),a=this._option("abortEarly",t),u=t.sync,l=t.path,c=this._label;o||(r=this._cast(r,p({assert:!1},t)));var s={value:r,path:l,schema:this,options:t,label:c,originalValue:i,sync:u};t.from&&(s.from=t.from);var f=[];return this._typeError&&f.push(this._typeError(s)),this._whitelistError&&f.push(this._whitelistError(s)),this._blacklistError&&f.push(this._blacklistError(s)),ua({validations:f,endEarly:a,value:r,path:l,sync:u}).then((function(e){return ua({path:l,sync:u,value:e,endEarly:a,validations:n.tests.map((function(e){return e(s)}))})}))},validate:function(e,t){return void 0===t&&(t={}),this.resolve(p({},t,{value:e}))._validate(e,t)},validateSync:function(e,t){var n,r;if(void 0===t&&(t={}),this.resolve(p({},t,{value:e}))._validate(e,p({},t,{sync:!0})).then((function(e){return n=e})).catch((function(e){return r=e})),r)throw r;return n},isValid:function(e,t){return this.validate(e,t).then((function(){return!0})).catch((function(e){if("ValidationError"===e.name)return!1;throw e}))},isValidSync:function(e,t){try{return this.validateSync(e,t),!0}catch(e){if("ValidationError"===e.name)return!1;throw e}},getDefault:function(e){return void 0===e&&(e={}),this.resolve(e).default()},default:function(e){if(0===arguments.length){var t=ho(this,"_default")?this._default:this._defaultDefault;return"function"==typeof t?t.call(this):vo(t)}var n=this.clone();return n._default=e,n},strict:function(e){void 0===e&&(e=!0);var t=this.clone();return t._options.strict=e,t},_isPresent:function(e){return null!=e},required:function(e){return void 0===e&&(e=qo.required),this.test({message:e,name:"required",exclusive:!0,test:function(e){return this.schema._isPresent(e)}})},notRequired:function(){var e=this.clone();return e.tests=e.tests.filter((function(e){return"required"!==e.OPTIONS.name})),e},nullable:function(e){void 0===e&&(e=!0);var t=this.clone();return t._nullable=e,t},transform:function(e){var t=this.clone();return t.transforms.push(e),t},test:function(){var e;if(void 0===(e=1===arguments.length?"function"==typeof(arguments.length<=0?void 0:arguments[0])?{test:arguments.length<=0?void 0:arguments[0]}:arguments.length<=0?void 0:arguments[0]:2===arguments.length?{name:arguments.length<=0?void 0:arguments[0],test:arguments.length<=1?void 0:arguments[1]}:{name:arguments.length<=0?void 0:arguments[0],message:arguments.length<=1?void 0:arguments[1],test:arguments.length<=2?void 0:arguments[2]}).message&&(e.message=qo.default),"function"!=typeof e.test)throw new TypeError("`test` is a required parameters");var t=this.clone(),n=Ka(e),r=e.exclusive||e.name&&!0===t._exclusive[e.name];if(e.exclusive&&!e.name)throw new TypeError("Exclusive tests must provide a unique `name` identifying the test");return t._exclusive[e.name]=!!e.exclusive,t.tests=t.tests.filter((function(t){if(t.OPTIONS.name===e.name){if(r)return!1;if(t.OPTIONS.test===n.OPTIONS.test)return!1}return!0})),t.tests.push(n),t},when:function(e,t){1===arguments.length&&(t=e,e=".");var n=this.clone(),r=[].concat(e).map((function(e){return new Ha(e)}));return r.forEach((function(e){e.isSibling&&n._deps.push(e.key)})),n._conditions.push(new Zo(r,t)),n},typeError:function(e){var t=this.clone();return t._typeError=Ka({message:e,name:"typeError",test:function(e){return!(void 0!==e&&!this.schema.isType(e))||this.createError({params:{type:this.schema._type}})}}),t},oneOf:function(e,t){void 0===t&&(t=qo.oneOf);var n=this.clone();return e.forEach((function(e){n._whitelist.add(e),n._blacklist.delete(e)})),n._whitelistError=Ka({message:t,name:"oneOf",test:function(e){if(void 0===e)return!0;var t=this.schema._whitelist;return!!t.has(e,this.resolve)||this.createError({params:{values:t.toArray().join(", ")}})}}),n},notOneOf:function(e,t){void 0===t&&(t=qo.notOneOf);var n=this.clone();return e.forEach((function(e){n._blacklist.add(e),n._whitelist.delete(e)})),n._blacklistError=Ka({message:t,name:"notOneOf",test:function(e){var t=this.schema._blacklist;return!t.has(e,this.resolve)||this.createError({params:{values:t.toArray().join(", ")}})}}),n},strip:function(e){void 0===e&&(e=!0);var t=this.clone();return t._strip=e,t},_option:function(e,t){return ho(t,e)?t[e]:this._options[e]},describe:function(){var e=this.clone(),t={type:e._type,meta:e._meta,label:e._label,tests:e.tests.map((function(e){return{name:e.OPTIONS.name,params:e.OPTIONS.params}})).filter((function(e,t,n){return n.findIndex((function(t){return t.name===e.name}))===t}))};return e._whitelist.size&&(t.oneOf=e._whitelist.describe()),e._blacklist.size&&(t.notOneOf=e._blacklist.describe()),t},defined:function(e){return void 0===e&&(e=qo.defined),this.nullable().test({message:e,name:"defined",exclusive:!0,test:function(e){return void 0!==e}})}},Za=function(){var e=tu[eu];Xa[e+"At"]=function(t,n,r){void 0===r&&(r={});var i=Ya(this,t,n,r.context),o=i.parent,a=i.parentPath;return i.schema[e](o&&o[a],p({},r,{parent:o,path:t}))}},eu=0,tu=["validate","validateSync"];eu<tu.length;eu++)Za();for(var nu=0,ru=["equals","is"];nu<ru.length;nu++){Xa[ru[nu]]=Xa.oneOf}for(var iu=0,ou=["not","nope"];iu<ou.length;iu++){Xa[ou[iu]]=Xa.notOneOf}function au(e,t,n){e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),p(e.prototype,n)}Xa.optional=Xa.notRequired;function uu(){var e=this;if(!(this instanceof uu))return new uu;Ja.call(this,{type:"boolean"}),this.withMutation((function(){e.transform((function(e){if(!this.isType(e)){if(/^(true|1)$/i.test(e))return!0;if(/^(false|0)$/i.test(e))return!1}return e}))}))}au(uu,Ja,{_typeCheck:function(e){return e instanceof Boolean&&(e=e.valueOf()),"boolean"==typeof e}});var lu=function(e){return null==e},cu=/^((([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+(\.([a-z]|\d|[!#\$%&'\*\+\-\/=\?\^_`{\|}~]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])+)*)|((\x22)((((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(([\x01-\x08\x0b\x0c\x0e-\x1f\x7f]|\x21|[\x23-\x5b]|[\x5d-\x7e]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(\\([\x01-\x09\x0b\x0c\x0d-\x7f]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]))))*(((\x20|\x09)*(\x0d\x0a))?(\x20|\x09)+)?(\x22)))@((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))$/i,su=/^((https?|ftp):)?\/\/(((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:)*@)?(((\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5])\.(\d|[1-9]\d|1\d\d|2[0-4]\d|25[0-5]))|((([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|\d|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.)+(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])*([a-z]|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])))\.?)(:\d*)?)(\/((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)+(\/(([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)*)*)?)?(\?((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|[\uE000-\uF8FF]|\/|\?)*)?(\#((([a-z]|\d|-|\.|_|~|[\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF])|(%[\da-f]{2})|[!\$&'\(\)\*\+,;=]|:|@)|\/|\?)*)?$/i,fu=function(e){return lu(e)||e===e.trim()};function du(){var e=this;if(!(this instanceof du))return new du;Ja.call(this,{type:"string"}),this.withMutation((function(){e.transform((function(e){return this.isType(e)?e:null!=e&&e.toString?e.toString():e}))}))}au(du,Ja,{_typeCheck:function(e){return e instanceof String&&(e=e.valueOf()),"string"==typeof e},_isPresent:function(e){return Ja.prototype._isPresent.call(this,e)&&e.length>0},length:function(e,t){return void 0===t&&(t=Qo.length),this.test({message:t,name:"length",exclusive:!0,params:{length:e},test:function(t){return lu(t)||t.length===this.resolve(e)}})},min:function(e,t){return void 0===t&&(t=Qo.min),this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return lu(t)||t.length>=this.resolve(e)}})},max:function(e,t){return void 0===t&&(t=Qo.max),this.test({name:"max",exclusive:!0,message:t,params:{max:e},test:function(t){return lu(t)||t.length<=this.resolve(e)}})},matches:function(e,t){var n,r,i=!1;return t&&("object"==typeof t?(i=t.excludeEmptyString,n=t.message,r=t.name):n=t),this.test({name:r||"matches",message:n||Qo.matches,params:{regex:e},test:function(t){return lu(t)||""===t&&i||-1!==t.search(e)}})},email:function(e){return void 0===e&&(e=Qo.email),this.matches(cu,{name:"email",message:e,excludeEmptyString:!0})},url:function(e){return void 0===e&&(e=Qo.url),this.matches(su,{name:"url",message:e,excludeEmptyString:!0})},ensure:function(){return this.default("").transform((function(e){return null===e?"":e}))},trim:function(e){return void 0===e&&(e=Qo.trim),this.transform((function(e){return null!=e?e.trim():e})).test({message:e,name:"trim",test:fu})},lowercase:function(e){return void 0===e&&(e=Qo.lowercase),this.transform((function(e){return lu(e)?e:e.toLowerCase()})).test({message:e,name:"string_case",exclusive:!0,test:function(e){return lu(e)||e===e.toLowerCase()}})},uppercase:function(e){return void 0===e&&(e=Qo.uppercase),this.transform((function(e){return lu(e)?e:e.toUpperCase()})).test({message:e,name:"string_case",exclusive:!0,test:function(e){return lu(e)||e===e.toUpperCase()}})}});au((function e(){var t=this;if(!(this instanceof e))return new e;Ja.call(this,{type:"number"}),this.withMutation((function(){t.transform((function(e){var t=e;if("string"==typeof t){if(""===(t=t.replace(/\s/g,"")))return NaN;t=+t}return this.isType(t)?t:parseFloat(t)}))}))}),Ja,{_typeCheck:function(e){return e instanceof Number&&(e=e.valueOf()),"number"==typeof e&&!function(e){return e!=+e}(e)},min:function(e,t){return void 0===t&&(t=Ko.min),this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return lu(t)||t>=this.resolve(e)}})},max:function(e,t){return void 0===t&&(t=Ko.max),this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(t){return lu(t)||t<=this.resolve(e)}})},lessThan:function(e,t){return void 0===t&&(t=Ko.lessThan),this.test({message:t,name:"max",exclusive:!0,params:{less:e},test:function(t){return lu(t)||t<this.resolve(e)}})},moreThan:function(e,t){return void 0===t&&(t=Ko.moreThan),this.test({message:t,name:"min",exclusive:!0,params:{more:e},test:function(t){return lu(t)||t>this.resolve(e)}})},positive:function(e){return void 0===e&&(e=Ko.positive),this.moreThan(0,e)},negative:function(e){return void 0===e&&(e=Ko.negative),this.lessThan(0,e)},integer:function(e){return void 0===e&&(e=Ko.integer),this.test({name:"integer",message:e,test:function(e){return lu(e)||Number.isInteger(e)}})},truncate:function(){return this.transform((function(e){return lu(e)?e:0|e}))},round:function(e){var t=["ceil","floor","round","trunc"];if("trunc"===(e=e&&e.toLowerCase()||"round"))return this.truncate();if(-1===t.indexOf(e.toLowerCase()))throw new TypeError("Only valid options for round() are: "+t.join(", "));return this.transform((function(t){return lu(t)?t:Math[e](t)}))}});var pu=/^(\d{4}|[+\-]\d{6})(?:-?(\d{2})(?:-?(\d{2}))?)?(?:[ T]?(\d{2}):?(\d{2})(?::?(\d{2})(?:[,\.](\d{1,}))?)?(?:(Z)|([+\-])(\d{2})(?::?(\d{2}))?)?)?$/;var hu=new Date("");function vu(){var e=this;if(!(this instanceof vu))return new vu;Ja.call(this,{type:"date"}),this.withMutation((function(){e.transform((function(e){return this.isType(e)?e:(e=function(e){var t,n,r=[1,4,5,6,7,10,11],i=0;if(n=pu.exec(e)){for(var o,a=0;o=r[a];++a)n[o]=+n[o]||0;n[2]=(+n[2]||1)-1,n[3]=+n[3]||1,n[7]=n[7]?String(n[7]).substr(0,3):0,void 0!==n[8]&&""!==n[8]||void 0!==n[9]&&""!==n[9]?("Z"!==n[8]&&void 0!==n[9]&&(i=60*n[10]+n[11],"+"===n[9]&&(i=0-i)),t=Date.UTC(n[1],n[2],n[3],n[4],n[5]+i,n[6],n[7])):t=+new Date(n[1],n[2],n[3],n[4],n[5],n[6],n[7])}else t=Date.parse?Date.parse(e):NaN;return t}(e),isNaN(e)?hu:new Date(e))}))}))}function mu(e,t){return t||(t=e.slice(0)),e.raw=t,e}au(vu,Ja,{_typeCheck:function(e){return t=e,"[object Date]"===Object.prototype.toString.call(t)&&!isNaN(e.getTime());var t},min:function(e,t){void 0===t&&(t=Yo.min);var n=e;if(!Ha.isRef(n)&&(n=this.cast(e),!this._typeCheck(n)))throw new TypeError("`min` must be a Date or a value that can be `cast()` to a Date");return this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(e){return lu(e)||e>=this.resolve(n)}})},max:function(e,t){void 0===t&&(t=Yo.max);var n=e;if(!Ha.isRef(n)&&(n=this.cast(e),!this._typeCheck(n)))throw new TypeError("`max` must be a Date or a value that can be `cast()` to a Date");return this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(e){return lu(e)||e<=this.resolve(n)}})}});var yu=function(e,t,n,r){var i=-1,o=null==e?0:e.length;for(r&&o&&(n=e[++i]);++i<o;)n=t(n,e[i],i,e);return n};var bu=function(e){return function(t){return null==e?void 0:e[t]}}({"À":"A","Á":"A","Â":"A","Ã":"A","Ä":"A","Å":"A","à":"a","á":"a","â":"a","ã":"a","ä":"a","å":"a","Ç":"C","ç":"c","Ð":"D","ð":"d","È":"E","É":"E","Ê":"E","Ë":"E","è":"e","é":"e","ê":"e","ë":"e","Ì":"I","Í":"I","Î":"I","Ï":"I","ì":"i","í":"i","î":"i","ï":"i","Ñ":"N","ñ":"n","Ò":"O","Ó":"O","Ô":"O","Õ":"O","Ö":"O","Ø":"O","ò":"o","ó":"o","ô":"o","õ":"o","ö":"o","ø":"o","Ù":"U","Ú":"U","Û":"U","Ü":"U","ù":"u","ú":"u","û":"u","ü":"u","Ý":"Y","ý":"y","ÿ":"y","Æ":"Ae","æ":"ae","Þ":"Th","þ":"th","ß":"ss","Ā":"A","Ă":"A","Ą":"A","ā":"a","ă":"a","ą":"a","Ć":"C","Ĉ":"C","Ċ":"C","Č":"C","ć":"c","ĉ":"c","ċ":"c","č":"c","Ď":"D","Đ":"D","ď":"d","đ":"d","Ē":"E","Ĕ":"E","Ė":"E","Ę":"E","Ě":"E","ē":"e","ĕ":"e","ė":"e","ę":"e","ě":"e","Ĝ":"G","Ğ":"G","Ġ":"G","Ģ":"G","ĝ":"g","ğ":"g","ġ":"g","ģ":"g","Ĥ":"H","Ħ":"H","ĥ":"h","ħ":"h","Ĩ":"I","Ī":"I","Ĭ":"I","Į":"I","İ":"I","ĩ":"i","ī":"i","ĭ":"i","į":"i","ı":"i","Ĵ":"J","ĵ":"j","Ķ":"K","ķ":"k","ĸ":"k","Ĺ":"L","Ļ":"L","Ľ":"L","Ŀ":"L","Ł":"L","ĺ":"l","ļ":"l","ľ":"l","ŀ":"l","ł":"l","Ń":"N","Ņ":"N","Ň":"N","Ŋ":"N","ń":"n","ņ":"n","ň":"n","ŋ":"n","Ō":"O","Ŏ":"O","Ő":"O","ō":"o","ŏ":"o","ő":"o","Ŕ":"R","Ŗ":"R","Ř":"R","ŕ":"r","ŗ":"r","ř":"r","Ś":"S","Ŝ":"S","Ş":"S","Š":"S","ś":"s","ŝ":"s","ş":"s","š":"s","Ţ":"T","Ť":"T","Ŧ":"T","ţ":"t","ť":"t","ŧ":"t","Ũ":"U","Ū":"U","Ŭ":"U","Ů":"U","Ű":"U","Ų":"U","ũ":"u","ū":"u","ŭ":"u","ů":"u","ű":"u","ų":"u","Ŵ":"W","ŵ":"w","Ŷ":"Y","ŷ":"y","Ÿ":"Y","Ź":"Z","Ż":"Z","Ž":"Z","ź":"z","ż":"z","ž":"z","Ĳ":"IJ","ĳ":"ij","Œ":"Oe","œ":"oe","ŉ":"'n","ſ":"s"}),gu=/[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g,wu=RegExp("[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]","g");var Eu=function(e){return(e=yi(e))&&e.replace(gu,bu).replace(wu,"")},xu=/[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;var _u=function(e){return e.match(xu)||[]},Su=/[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;var ku=function(e){return Su.test(e)},Tu="\\xac\\xb1\\xd7\\xf7\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf\\u2000-\\u206f \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000",Ou="["+Tu+"]",Cu="\\d+",Pu="[\\u2700-\\u27bf]",ju="[a-z\\xdf-\\xf6\\xf8-\\xff]",Fu="[^\\ud800-\\udfff"+Tu+Cu+"\\u2700-\\u27bfa-z\\xdf-\\xf6\\xf8-\\xffA-Z\\xc0-\\xd6\\xd8-\\xde]",Au="(?:\\ud83c[\\udde6-\\uddff]){2}",Ru="[\\ud800-\\udbff][\\udc00-\\udfff]",Nu="[A-Z\\xc0-\\xd6\\xd8-\\xde]",Du="(?:"+ju+"|"+Fu+")",Iu="(?:"+Nu+"|"+Fu+")",Mu="(?:[\\u0300-\\u036f\\ufe20-\\ufe2f\\u20d0-\\u20ff]|\\ud83c[\\udffb-\\udfff])?",zu="[\\ufe0e\\ufe0f]?"+Mu+("(?:\\u200d(?:"+["[^\\ud800-\\udfff]",Au,Ru].join("|")+")[\\ufe0e\\ufe0f]?"+Mu+")*"),Lu="(?:"+[Pu,Au,Ru].join("|")+")"+zu,Uu=RegExp([Nu+"?"+ju+"+(?:['’](?:d|ll|m|re|s|t|ve))?(?="+[Ou,Nu,"$"].join("|")+")",Iu+"+(?:['’](?:D|LL|M|RE|S|T|VE))?(?="+[Ou,Nu+Du,"$"].join("|")+")",Nu+"?"+Du+"+(?:['’](?:d|ll|m|re|s|t|ve))?",Nu+"+(?:['’](?:D|LL|M|RE|S|T|VE))?","\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])","\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])",Cu,Lu].join("|"),"g");var $u=function(e){return e.match(Uu)||[]};var Vu=function(e,t,n){return e=yi(e),void 0===(t=n?void 0:t)?ku(e)?$u(e):_u(e):e.match(t)||[]},Wu=RegExp("['’]","g");var Bu=function(e){return function(t){return yu(Vu(Eu(t).replace(Wu,"")),e,"")}},Hu=Bu((function(e,t,n){return e+(n?"_":"")+t.toLowerCase()}));var qu=function(e,t,n){var r=-1,i=e.length;t<0&&(t=-t>i?0:i+t),(n=n>i?i:n)<0&&(n+=i),i=t>n?0:n-t>>>0,t>>>=0;for(var o=Array(i);++r<i;)o[r]=e[r+t];return o};var Qu=function(e,t,n){var r=e.length;return n=void 0===n?r:n,!t&&n>=r?e:qu(e,t,n)};var Ku=function(e){return function(t){t=yi(t);var n=xo(t)?No(t):void 0,r=n?n[0]:t.charAt(0),i=n?Qu(n,1).join(""):t.slice(1);return r[e]()+i}}("toUpperCase");var Yu=function(e){return Ku(yi(e).toLowerCase())},Gu=Bu((function(e,t,n){return t=t.toLowerCase(),e+(n?Yu(t):t)}));var Ju=function(e,t){var n={};return t=Ua(t,3),sa(e,(function(e,r,i){Pn(n,t(e,r,i),e)})),n},Xu=n(67),Zu=n.n(Xu);function el(e,t){void 0===t&&(t=[]);var n=[],r=[];function i(e,i){var o=Object(Va.split)(e)[0];~r.indexOf(o)||r.push(o),~t.indexOf(i+"-"+o)||n.push([i,o])}for(var o in e)if(ho(e,o)){var a=e[o];~r.indexOf(o)||r.push(o),Ha.isRef(a)&&a.isSibling?i(a.path,o):Xo(a)&&a._deps&&a._deps.forEach((function(e){return i(e,o)}))}return Zu.a.array(r,n).reverse()}function tl(e,t){var n=1/0;return e.some((function(e,r){if(-1!==t.path.indexOf(e))return n=r,!0})),n}function nl(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];var i=e.reduce((function(e,t){var r=n.shift();return e+(null==r?"":r)+t}));return i.replace(/^\./,"")}function rl(){var e=mu(["",'["','"]']);return rl=function(){return e},e}function il(){var e=mu(["",".",""]);return il=function(){return e},e}function ol(){var e=mu(["",".",""]);return ol=function(){return e},e}var al=function(e){return"[object Object]"===Object.prototype.toString.call(e)};function ul(e){var t=this;if(!(this instanceof ul))return new ul(e);Ja.call(this,{type:"object",default:function(){var e=this;if(this._nodes.length){var t={};return this._nodes.forEach((function(n){t[n]=e.fields[n].default?e.fields[n].default():void 0})),t}}}),this.fields=Object.create(null),this._nodes=[],this._excludedEdges=[],this.withMutation((function(){t.transform((function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e=null}return this.isType(e)?e:null})),e&&t.shape(e)}))}function ll(){var e=mu(["","[","]"]);return ll=function(){return e},e}function cl(){var e=mu(["","[","]"]);return cl=function(){return e},e}au(ul,Ja,{_typeCheck:function(e){return al(e)||"function"==typeof e},_cast:function(e,t){var n=this;void 0===t&&(t={});var r=Ja.prototype._cast.call(this,e,t);if(void 0===r)return this.default();if(!this._typeCheck(r))return r;var i=this.fields,o=!0===this._option("stripUnknown",t),a=this._nodes.concat(Object.keys(r).filter((function(e){return-1===n._nodes.indexOf(e)}))),u={},l=p({},t,{parent:u,__validating:t.__validating||!1}),c=!1;return a.forEach((function(e){var n=i[e],a=ho(r,e);if(n){var s,f=n._options&&n._options.strict;if(l.path=nl(ol(),t.path,e),l.value=r[e],!0===(n=n.resolve(l))._strip)return void(c=c||e in r);void 0!==(s=t.__validating&&f?r[e]:n.cast(r[e],l))&&(u[e]=s)}else a&&!o&&(u[e]=r[e]);u[e]!==r[e]&&(c=!0)})),c?u:r},_validate:function(e,t){var n,r,i=this;void 0===t&&(t={});var o=t.sync,a=[],u=null!=t.originalValue?t.originalValue:e,l=[{schema:this,value:u}].concat(t.from||[]);return n=this._option("abortEarly",t),r=this._option("recursive",t),t=p({},t,{__validating:!0,originalValue:u,from:l}),Ja.prototype._validate.call(this,e,t).catch(oa(n,a)).then((function(e){if(!r||!al(e)){if(a.length)throw a[0];return e}l=u?[].concat(l):[{schema:i,value:u||e}].concat(t.from||[]),u=u||e;var c,s,f=i._nodes.map((function(n){var r=-1===n.indexOf(".")?nl(il(),t.path,n):nl(rl(),t.path,n),a=i.fields[n],c=p({},t,{path:r,from:l,parent:e,originalValue:u[n]});return a&&a.validate?(c.strict=!0,a.validate(e[n],c)):function(e){return e?ea.SynchronousPromise:Promise}(o).resolve(!0)}));return ua({sync:o,validations:f,value:e,errors:a,endEarly:n,path:t.path,sort:(c=i.fields,s=Object.keys(c),function(e,t){return tl(s,e)-tl(s,t)})})}))},concat:function(e){var t=Ja.prototype.concat.call(this,e);return t._nodes=el(t.fields,t._excludedEdges),t},shape:function(e,t){void 0===t&&(t=[]);var n=this.clone(),r=p(n.fields,e);if(n.fields=r,t.length){Array.isArray(t[0])||(t=[t]);var i=t.map((function(e){return e[0]+"-"+e[1]}));n._excludedEdges=n._excludedEdges.concat(i)}return n._nodes=el(r,n._excludedEdges),n},from:function(e,t,n){var r=Object(Va.getter)(e,!0);return this.transform((function(i){if(null==i)return i;var o=i;return ho(i,e)&&(o=p({},i),n||delete o[e],o[t]=r(i)),o}))},noUnknown:function(e,t){void 0===e&&(e=!0),void 0===t&&(t=Go.noUnknown),"string"==typeof e&&(t=e,e=!0);var n=this.test({name:"noUnknown",exclusive:!0,message:t,test:function(t){if(null==t)return!0;var n=function(e,t){var n=Object.keys(e.fields);return Object.keys(t).filter((function(e){return-1===n.indexOf(e)}))}(this.schema,t);return!e||0===n.length||this.createError({params:{unknown:n.join(", ")}})}});return n._options.stripUnknown=e,n},unknown:function(e,t){return void 0===e&&(e=!0),void 0===t&&(t=Go.noUnknown),this.noUnknown(!e,t)},transformKeys:function(e){return this.transform((function(t){return t&&Ju(t,(function(t,n){return e(n)}))}))},camelCase:function(){return this.transformKeys(Gu)},snakeCase:function(){return this.transformKeys(Hu)},constantCase:function(){return this.transformKeys((function(e){return Hu(e).toUpperCase()}))},describe:function(){var e=Ja.prototype.describe.call(this);return e.fields=$a(this.fields,(function(e){return e.describe()})),e}});function sl(e){var t=this;if(!(this instanceof sl))return new sl(e);Ja.call(this,{type:"array"}),this._subType=void 0,this.innerType=void 0,this.withMutation((function(){t.transform((function(e){if("string"==typeof e)try{e=JSON.parse(e)}catch(t){e=null}return this.isType(e)?e:null})),e&&t.of(e)}))}au(sl,Ja,{_typeCheck:function(e){return Array.isArray(e)},_cast:function(e,t){var n=this,r=Ja.prototype._cast.call(this,e,t);if(!this._typeCheck(r)||!this.innerType)return r;var i=!1,o=r.map((function(e,r){var o=n.innerType.cast(e,p({},t,{path:nl(cl(),t.path,r)}));return o!==e&&(i=!0),o}));return i?o:r},_validate:function(e,t){var n=this;void 0===t&&(t={});var r=[],i=t.sync,o=t.path,a=this.innerType,u=this._option("abortEarly",t),l=this._option("recursive",t),c=null!=t.originalValue?t.originalValue:e;return Ja.prototype._validate.call(this,e,t).catch(oa(u,r)).then((function(e){if(!l||!a||!n._typeCheck(e)){if(r.length)throw r[0];return e}c=c||e;var s=e.map((function(n,r){var i=nl(ll(),t.path,r),o=p({},t,{path:i,strict:!0,parent:e,index:r,originalValue:c[r]});return!a.validate||a.validate(n,o)}));return ua({sync:i,path:o,value:e,errors:r,endEarly:u,validations:s})}))},_isPresent:function(e){return Ja.prototype._isPresent.call(this,e)&&e.length>0},of:function(e){var t=this.clone();if(!1!==e&&!Xo(e))throw new TypeError("`array.of()` sub-schema must be a valid yup schema, or `false` to negate a current sub-schema. not: "+Ho(e));return t._subType=e,t.innerType=e,t},min:function(e,t){return t=t||Jo.min,this.test({message:t,name:"min",exclusive:!0,params:{min:e},test:function(t){return lu(t)||t.length>=this.resolve(e)}})},max:function(e,t){return t=t||Jo.max,this.test({message:t,name:"max",exclusive:!0,params:{max:e},test:function(t){return lu(t)||t.length<=this.resolve(e)}})},ensure:function(){var e=this;return this.default((function(){return[]})).transform((function(t,n){return e._typeCheck(t)?t:null==n?[]:[].concat(n)}))},compact:function(e){var t=e?function(t,n,r){return!e(t,n,r)}:function(e){return!!e};return this.transform((function(e){return null!=e?e.filter(t):e}))},describe:function(){var e=Ja.prototype.describe.call(this);return this.innerType&&(e.innerType=this.innerType.describe()),e}});var fl=function(){function e(e){this._resolve=function(t,n){var r=e(t,n);if(!Xo(r))throw new TypeError("lazy() functions must return a valid schema");return r.resolve(n)}}var t=e.prototype;return t.resolve=function(e){return this._resolve(e.value,e)},t.cast=function(e,t){return this._resolve(e,t).cast(e,t)},t.validate=function(e,t){return this._resolve(e,t).validate(e,t)},t.validateSync=function(e,t){return this._resolve(e,t).validateSync(e,t)},t.validateAt=function(e,t,n){return this._resolve(t,n).validateAt(e,t,n)},t.validateSyncAt=function(e,t,n){return this._resolve(t,n).validateSyncAt(e,t,n)},e}();fl.prototype.__isYupSchema__=!0;var dl=n(40),pl=n.n(dl);var hl=function(e){const{children:t,indent:n}=e;let r="";return 1*n==2&&(r+=pl.a.indent_2),1*n==3&&(r+=pl.a.indent_3),i.a.createElement("div",{className:r},t)};n(112);function vl(){return(vl=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e}).apply(this,arguments)}var ml=function({label:e,...t}){const[n,o]=function(e){var t=Li(),n=t.getFieldProps,i=t.getFieldMeta,o=t.getFieldHelpers,a=t.registerField,u=t.unregisterField,l=Ci(e)?e:{name:e},c=l.name,s=l.validate;return Object(r.useEffect)((function(){return c&&a(c,{validate:s}),function(){c&&u(c)}}),[a,u,c,s]),c||Object(gi.a)(!1),[n(l),i(c),o(c)]}(t);let[a,u]=function(e){if(!e)return[null,void 0];const t="key-"+Math.round(1e4*Math.random());return[i.a.createElement("label",{className:"input-label",htmlFor:t},e),t]}(e),l="text-input";return"search"===t.type&&(l+=" text-input--search"),i.a.createElement(i.a.Fragment,null,a,i.a.createElement("input",vl({className:l},n,{type:t.type,id:u,placeholder:t.placeholder,autoComplete:t.autoComplete,disabled:t.disabled})),o.touched&&o.error?i.a.createElement(io,{text:o.error,indent:1}):null)},yl=n(68),bl=n.n(yl);var gl=function({children:e}){return i.a.createElement("p",{className:bl.a.wrapper},e)};const wl={name:"",email:"",password:"",passwordConfirm:""},El=ul({name:du().required("This field is required").min(1,"Must be 1 characters or more"),email:du().required("This field is required").email("Invalid email address"),password:du().required("This field is required").min(4,"Must be 4 characters or more"),passwordConfirm:du().oneOf([(xl="password",new Ha(xl,_l))],"Both password need to be the same")});var xl,_l;function Sl({formik:e}){const t={text:"Submit",type:"submit"};return e.isValid&&e.dirty&&!e.isSubmitting||(t.disabled=!0),e.isSubmitting&&(t.sign="spinner"),i.a.createElement(Be,t)}var kl=function(){const e=T(),{name:t,authTokenStatus:n}=j(e=>e.user);let[o,a]=Object(r.useState)(null);const[u,l]=Object(r.useState)(null);let c=o?i.a.createElement(io,{text:o,indent:"3"}):null;return 0===n&&Ue().then(t=>{e(Ve(t))}),2===n||t?i.a.createElement(me,{to:"/notes"}):u||i.a.createElement("div",null,i.a.createElement(ro,{text:"Sign up"}),i.a.createElement(Bi,{initialValues:wl,validationSchema:El,onSubmit:e=>async function(e,t,n,r){const{serverOrigin:o,isDevelopment:a}=Le,u=o+"/api/v1/users/signup",l={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},c=await fetch(u,l).then(e=>e.json()).then(e=>e).catch(e=>console.log(e));if(console.log(c),"error"===c.status&&400===c.error.statusCode&&t(c.error.message),"success"===c.status){const t="https://"+e.email.split("@")[1];n(i.a.createElement(gl,null,"A letter with a link has been sent to your ",i.a.createElement("a",{href:t},"email"),". Click on it to log in your account."))}}(e,a,l)},e=>function(e,t){let n=e.isSubmitting;return i.a.createElement(Ki,{onChange:()=>t(null)},i.a.createElement(hl,{indent:"2"},i.a.createElement(ml,{label:"Name",type:"text",name:"name",disabled:n,autoComplete:"username"})),i.a.createElement(hl,{indent:"2"},i.a.createElement(ml,{label:"Email",type:"email",name:"email",disabled:n,autoComplete:"email"})),i.a.createElement(hl,{indent:"2"},i.a.createElement(ml,{label:"Password",type:"password",name:"password",disabled:n,autoComplete:"new-password"})),i.a.createElement(hl,{indent:"2"},i.a.createElement(ml,{label:"Confirm Password",type:"password",name:"passwordConfirm",disabled:n,autoComplete:"new-password"})),i.a.createElement(Sl,{formik:e}))}(e,a)),c,i.a.createElement("div",{className:eo.a.bottomPart},i.a.createElement("p",null,"Do you have an account? ",i.a.createElement(De,{to:"/enter"},"Sign in."))))};var Tl=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(Ke,null),i.a.createElement(Je,null,i.a.createElement(kl,null)))},Ol=n(69),Cl=n.n(Ol);const Pl={email:"",password:""},jl=ul({email:du().required("This field is required").email("Invalid email address"),password:du().required("This field is required").min(4,"Must be 4 characters or more")});function Fl({formik:e}){const t={text:"Submit",type:"submit"};return e.isValid&&e.dirty&&!e.isSubmitting||(t.disabled=!0),e.isSubmitting&&(t.sign="spinner"),i.a.createElement(Be,t)}var Al=function(){const e=T(),{name:t,authTokenStatus:n}=j(e=>e.user);let[o,a]=Object(r.useState)(null);const[u,l]=Object(r.useState)(null);let c=o?i.a.createElement(io,{text:o,indent:"3"}):null;return 0===n&&Ue().then(t=>{e(Ve(t))}),2===n||t?i.a.createElement(me,{to:"/notes"}):u||i.a.createElement("div",null,i.a.createElement(ro,{text:"Log in"}),i.a.createElement(Bi,{initialValues:Pl,validationSchema:jl,onSubmit:t=>async function(e,t,n,r){const{serverOrigin:o,isDevelopment:a}=Le,u=o+"/api/v1/users/login",l={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},c=await fetch(u,l).then(e=>e.json()).then(e=>e).catch(e=>console.log(e));if("fail"===c.status&&403===c.error.statusCode){const t="https://"+e.email.split("@")[1];n(i.a.createElement(gl,null,"A letter with a link has been sent to your ",i.a.createElement("a",{href:t},"email"),". Click on it to log in your account."))}if("fail"===c.status&&400===c.error.statusCode&&t(c.error.message),"success"===c.status){a&&localStorage.setItem("authToken",c.token);const e=c.data.user;r($e(e.name,e.email))}}(t,a,l,e)},e=>function(e,t){let n=e.isSubmitting;return i.a.createElement(Ki,{onChange:()=>t(null)},i.a.createElement(hl,{indent:"2"},i.a.createElement(ml,{label:"Email",type:"email",name:"email",disabled:n,autoComplete:"email"})),i.a.createElement(hl,{indent:"2"},i.a.createElement(ml,{label:"Password",type:"password",name:"password",disabled:n,autoComplete:"current-password"})),i.a.createElement(Fl,{formik:e}))}(e,a)),c,i.a.createElement("div",{className:Cl.a.bottomPart},i.a.createElement("p",null,"Are you a new user? ",i.a.createElement(De,{to:"/reg"},"Sign up.")),i.a.createElement("p",null,"Don't remember password? ",i.a.createElement(De,{to:"/password-reset"},"Reset password."))))};var Rl=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(Ke,null),i.a.createElement(Je,null,i.a.createElement(Al,null)))};n(113);const Nl={email:""},Dl=ul({email:du().required("This field is required").email("Invalid email address")});function Il({formik:e}){const t={text:"Submit",type:"submit"};return e.isValid&&e.dirty&&!e.isSubmitting||(t.disabled=!0),e.isSubmitting&&(t.sign="spinner"),i.a.createElement(Be,t)}var Ml=function(){const e=T(),{name:t,authTokenStatus:n}=j(e=>e.user);let[o,a]=Object(r.useState)(null);const[u,l]=Object(r.useState)(null);let c=o?i.a.createElement(io,{text:o,indent:"3"}):null;return 0===n&&Ue().then(t=>{e(Ve(t))}),2===n||t?i.a.createElement(me,{to:"/notes"}):u||i.a.createElement("div",null,i.a.createElement(ro,{text:"Reset Password"}),i.a.createElement(Bi,{initialValues:Nl,validationSchema:Dl,onSubmit:e=>async function(e,t,n,r){const{serverOrigin:o,isDevelopment:a}=Le,u=o+"/api/v1/users/forgotPassword",l={method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(e)},c=await fetch(u,l).then(e=>e.json()).then(e=>e).catch(e=>console.log(e));if(console.log(c),"fail"===c.status&&404===c.error.statusCode&&t(c.error.message),"success"===c.status){const t="https://"+e.email.split("@")[1];n(i.a.createElement(gl,null,"A letter with a reset password link has been sent to your ",i.a.createElement("a",{href:t},"email"),". Click on it to reset your password."))}}(e,a,l)},e=>function(e,t){let n=e.isSubmitting;return i.a.createElement(Ki,{onChange:()=>t(null)},i.a.createElement(hl,{indent:"2"},i.a.createElement(ml,{label:"Email",type:"email",name:"email",disabled:n,autoComplete:"email"})),i.a.createElement(Il,{formik:e}))}(e,a)),c)};var zl=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(Ke,null),i.a.createElement(Je,null,i.a.createElement(Ml,null)))};n(70);ul({email:du().required("This field is required").email("Invalid email address"),password:du().required("This field is required").min(4,"Must be 4 characters or more")});var Ll=function(){return i.a.createElement(i.a.Fragment,null,i.a.createElement(Ke,null),i.a.createElement(Je,null,i.a.createElement("p",null,"567")))};var Ul=function(){return j(e=>e.user).name};var $l=function(){return"UserPage"};var Vl=()=>i.a.createElement(Pe,null,i.a.createElement("div",{className:N.a.app},i.a.createElement(De,{to:"/reset-password/token"},"Main"),i.a.createElement(Te,null,i.a.createElement(we,{path:"/",exact:!0},i.a.createElement(We,null)),i.a.createElement(we,{path:"/reg"},i.a.createElement(Tl,null)),i.a.createElement(we,{path:"/enter"},i.a.createElement(Rl,null)),i.a.createElement(we,{path:"/forgot-password"},i.a.createElement(zl,null)),i.a.createElement(we,{path:"/reset-password/:token"},i.a.createElement(Ll,null)),i.a.createElement(we,{path:"/notes"},i.a.createElement(Ul,null)),i.a.createElement(we,{path:"/user"},i.a.createElement($l,null)))));a.a.render(i.a.createElement(d,{store:A},i.a.createElement(Vl,null)),document.getElementById("root"))}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3Jvb3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Rpbnktd2FybmluZy9kaXN0L3Rpbnktd2FybmluZy5lc20uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2luaGVyaXRzTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX25vZGVVdGlsLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1mYXN0LWNvbXBhcmUvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3BlcnR5LWV4cHIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzL2Rpc3QvaG9pc3Qtbm9uLXJlYWN0LXN0YXRpY3MuY2pzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0J1ZmZlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9tb2R1bGVzL3dlYi5kb20tY29sbGVjdGlvbnMuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2ZhaWxzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW5jaHJvbm91cy1wcm9taXNlL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVzY3JpcHRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2lzLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYW4tb2JqZWN0LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2hhcm1vbnktbW9kdWxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1pcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19mcmVlR2xvYmFsLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9jb250YWluZXJzL2F1dGhTcGxpdENvbnRhaW5lci9jc3MvYXV0aFNwbGl0Q29udGFpbmVyLnNjc3M/Mjc5ZCIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtcHVyZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2V0LWdsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2hpZGRlbi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9zaGFyZWQta2V5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3N5bWJvbC1vYnNlcnZhYmxlL2VzL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9taW5pLWNyZWF0ZS1yZWFjdC1jb250ZXh0L2Rpc3QvZXNtL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yb3V0ZXIvbm9kZV9tb2R1bGVzL3BhdGgtdG8tcmVnZXhwL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9mb3JtaWsvbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2Zvcm1IZWFkZXIvY3NzL2Zvcm1IZWFkZXIuc2Nzcz8yMWM3Iiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtQ29udGFpbmVycy9maWVsZHNEaXZpZGVyV3JhcHBlci9jc3MvZmllbGRzRGV2aWRlcldyYXBwZXIuc2Nzcz9mMjY1Iiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9vYmplY3QtYXNzaWduL2luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NoYXJlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvc2hhcmVkLXN0b3JlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pZTgtZG9tLWRlZmluZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLXByaW1pdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdWlkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9uYXRpdmUtc3ltYm9sLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtY3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy1pbnRlcm5hbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8taW50ZWdlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaW5zcGVjdC1zb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1nZXQtb3duLXByb3BlcnR5LWRlc2NyaXB0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3JlZGVmaW5lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9pdGVyYXRvcnMtY29yZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9zeW1ib2wtb2JzZXJ2YWJsZS9lcy9wb255ZmlsbC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvYXBwL2Nzcy9hcHAuc2Nzcz8zY2Y2Iiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy90b3BOYXZFbnRyYW5jZS9jc3MvdG9wTmF2aWdhdGlvbi5zY3NzPzM3ZGIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9zdHViRmFsc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9yZWcvY29tcG9uZW50cy9yZWdGb3JtL2Nzcy9mb3JtLnNjc3M/YjhmNyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvdG9wb3NvcnQvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL3ZhcmlvdXMvbm90aWZpY2F0aW9uL2Nzcy9ub3RpZmljYXRpb24uc2Nzcz8zNjVlIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvZW50ZXIvY29tcG9uZW50cy9lbnRlckZvcm0vY3NzL2Zvcm0uc2Nzcz85YWI0Iiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvcmVzZXRQYXNzd29yZC9jb21wb25lbnRzL2VudGVyRm9ybS9jc3MvZm9ybS5zY3NzPzhmNzciLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0L2Nqcy9yZWFjdC5wcm9kdWN0aW9uLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtZG9tL2Nqcy9yZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3NjaGVkdWxlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3Byb3AtdHlwZXMvZmFjdG9yeVdpdGhUaHJvd2luZ1NoaW1zLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9wcm9wLXR5cGVzL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtaXMvY2pzL3JlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9kb20taXRlcmFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkuaXRlcmF0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jbGFzc29mLXJhdy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYWRkLXRvLXVuc2NvcGFibGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy91c2Utc3ltYm9sLWFzLXVpZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qta2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYXJyYXktaW5jbHVkZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLWxlbmd0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvdG8tYWJzb2x1dGUtaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL2h0bWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL25hdGl2ZS13ZWFrLW1hcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvZGVmaW5lLWl0ZXJhdG9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9leHBvcnQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL29iamVjdC1wcm9wZXJ0eS1pcy1lbnVtZXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jb3B5LWNvbnN0cnVjdG9yLXByb3BlcnRpZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL293bi1rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1uYW1lcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvaXMtZm9yY2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9jcmVhdGUtaXRlcmF0b3ItY29uc3RydWN0b3IuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2NvcmUtanMvaW50ZXJuYWxzL3RvLW9iamVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9jb3JlLWpzL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvY29yZS1qcy9pbnRlcm5hbHMvYS1wb3NzaWJsZS1wcm90b3R5cGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJvdXRlci9ub2RlX21vZHVsZXMvaXNhcnJheS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2J1dHRvbi9jc3Mvc3Bpbm5lci5zY3NzPzk2NmYiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2Zvcm1pay9ub2RlX21vZHVsZXMvc2NoZWR1bGVyL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9mb3Jnb3RQYXNzd29yZC9jb21wb25lbnRzL2ZvcmdvdFBhc3N3b3JkRm9ybS9jc3MvZm9ybS5zY3NzP2I3OGEiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2NvbXBvbmVudHMvQ29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvYmF0Y2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL3V0aWxzL1N1YnNjcmlwdGlvbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvY29tcG9uZW50cy9Qcm92aWRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvdXRpbHMvdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVkdXgvZXMvcmVkdXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZVJlZHV4Q29udGV4dC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaG9va3MvdXNlU3RvcmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JlYWN0LXJlZHV4L2VzL2hvb2tzL3VzZURpc3BhdGNoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZWFjdC1yZWR1eC9lcy9ob29rcy91c2VTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvcmVhY3QtcmVkdXgvZXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9zdG9yZS9zdG9yZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3N0b3JlL3JlZHVjZXJzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9yZXNvbHZlLXBhdGhuYW1lL2VzbS9yZXNvbHZlLXBhdGhuYW1lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy92YWx1ZS1lcXVhbC9lc20vdmFsdWUtZXF1YWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3RpbnktaW52YXJpYW50L2Rpc3QvdGlueS1pbnZhcmlhbnQuZXNtLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9oaXN0b3J5L2VzbS9oaXN0b3J5LmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL0hpc3RvcnlDb250ZXh0LmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL2NyZWF0ZU5hbWVDb250ZXh0LmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL1JvdXRlckNvbnRleHQuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvUm91dGVyLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL01lbW9yeVJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9MaWZlY3ljbGUuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvZ2VuZXJhdGVQYXRoLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL1JlZGlyZWN0LmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL21hdGNoUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9Sb3V0ZS5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy9TdGF0aWNSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvU3dpdGNoLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL2hvb2tzLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL0Jyb3dzZXJSb3V0ZXIuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvSGFzaFJvdXRlci5qcyIsIndlYnBhY2s6Ly8vLi4vbW9kdWxlcy91dGlscy9sb2NhdGlvblV0aWxzLmpzIiwid2VicGFjazovLy8uLi9tb2R1bGVzL0xpbmsuanMiLCJ3ZWJwYWNrOi8vLy4uL21vZHVsZXMvTmF2TGluay5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2Jyb3dzZXJDb25maWcuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9tYWluL2pzL2NoZWNrVG9rZW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9zdG9yZS9hY3Rpb25zLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvbWFpbi9tYWluUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL21haW4vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy9idXR0b24vYnV0dG9uLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvYnV0dG9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy90b3BOYXZFbnRyYW5jZS90b3BOYXZFbnRyYW5jZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvdG9wTmF2RW50cmFuY2UvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2NvbnRhaW5lcnMvYXV0aFNwbGl0Q29udGFpbmVyL2F1dGhTcGxpdENvbnRhaW5lci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvY29udGFpbmVycy9hdXRoU3BsaXRDb250YWluZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2RlZXBtZXJnZS9kaXN0L2VzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRSYXdUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fb2JqZWN0VG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUdldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19vdmVyQXJnLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFByb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzT2JqZWN0TGlrZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzUGxhaW5PYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlQ2xlYXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9lcS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hc3NvY0luZGV4T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2xpc3RDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19saXN0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbGlzdENhY2hlU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0xpc3RDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja0NsZWFyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrR2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0YWNrSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc0Z1bmN0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2lzTWFza2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcmVKc0RhdGEuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9Tb3VyY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTmF0aXZlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldE5hdGl2ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlQ3JlYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoRGVsZXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2hhc2hHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzaEhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNoU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX0hhc2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwQ2FjaGVDbGVhci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0tleWFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWFwRGF0YS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZURlbGV0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUdldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZUhhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19tYXBDYWNoZVNldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19NYXBDYWNoZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdGFja1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19TdGFjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUVhY2guanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVmaW5lUHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Fzc2lnblZhbHVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRpbWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0FyZ3VtZW50cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lzQXJndW1lbnRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc0luZGV4LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNMZW5ndGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzVHlwZWRBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlVW5hcnkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1R5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlMaWtlS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc1Byb3RvdHlwZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19uYXRpdmVLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNBcnJheUxpa2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VBc3NpZ24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbmF0aXZlS2V5c0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VLZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9rZXlzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUFzc2lnbkluLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19hcnJheUZpbHRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3N0dWJBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NvcHlTeW1ib2xzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FycmF5UHVzaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRTeW1ib2xzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY29weVN5bWJvbHNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlR2V0QWxsS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19nZXRBbGxLZXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldEFsbEtleXNJbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19EYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19Qcm9taXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX1NldC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19XZWFrTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2dldFRhZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVBcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19VaW50OEFycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Nsb25lQXJyYXlCdWZmZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2xvbmVEYXRhVmlldy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVJlZ0V4cC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVN5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19jbG9uZVR5cGVkQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faW5pdENsb25lQnlUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUNyZWF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pbml0Q2xvbmVPYmplY3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzTWFwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUlzU2V0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaXNTZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUNsb25lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2xvbmUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlNYXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1N5bWJvbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL21lbW9pemUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWVtb2l6ZUNhcHBlZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zdHJpbmdUb1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdG9LZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVRvU3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvdG9TdHJpbmcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy90b1BhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jbG9uZURlZXAuanMiLCJ3ZWJwYWNrOi8vLy4uL3NyYy91dGlscy50cyIsIndlYnBhY2s6Ly8vLi4vc3JjL0Zvcm1pa0NvbnRleHQudHN4Iiwid2VicGFjazovLy8uLi9zcmMvRm9ybWlrLnRzeCIsIndlYnBhY2s6Ly8vLi4vc3JjL0Zvcm0udHN4Iiwid2VicGFjazovLy8uLi9zcmMvY29ubmVjdC50c3giLCJ3ZWJwYWNrOi8vLy4uL3NyYy9GaWVsZEFycmF5LnRzeCIsIndlYnBhY2s6Ly8vLi4vc3JjL0Vycm9yTWVzc2FnZS50c3giLCJ3ZWJwYWNrOi8vLy4uL3NyYy9GYXN0RmllbGQudHN4Iiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZm9ybUhlYWRlci9mb3JtSGVhZGVyLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZm9ybUhlYWRlci9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2Vycm9yL2Vycm9yLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZXJyb3IvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faXNLZXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2FzdFBhdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzUGF0aC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2hhcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2Nsb25lRGVlcFdpdGguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9pc1N0cmluZy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pdGVyYXRvclRvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fbWFwVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19zZXRUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FzY2lpVG9BcnJheS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19oYXNVbmljb2RlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3VuaWNvZGVUb0FycmF5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX3N0cmluZ1RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3ZhbHVlcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3RvQXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL3ByaW50VmFsdWUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy9sb2NhbGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL2lzU2NoZW1hLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvQ29uZGl0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvVmFsaWRhdGlvbkVycm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9ydW5WYWxpZGF0aW9ucy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL3V0aWwvcHJlcGVuZERlZXAuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQmFzZUZvci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlRm9yLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VGb3JPd24uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0Q2FjaGVBZGQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fc2V0Q2FjaGVIYXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fU2V0Q2FjaGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlTb21lLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NhY2hlSGFzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VxdWFsQXJyYXlzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2VxdWFsQnlUYWcuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZXF1YWxPYmplY3RzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VJc0VxdWFsRGVlcC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNFcXVhbC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlSXNNYXRjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19pc1N0cmljdENvbXBhcmFibGUuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZ2V0TWF0Y2hEYXRhLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX21hdGNoZXNTdHJpY3RDb21wYXJhYmxlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VNYXRjaGVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VHZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9nZXQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUhhc0luLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvaGFzSW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZU1hdGNoZXNQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL2lkZW50aXR5LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2Jhc2VQcm9wZXJ0eS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlUHJvcGVydHlEZWVwLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvcHJvcGVydHkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZUl0ZXJhdGVlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWFwVmFsdWVzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvUmVmZXJlbmNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9jcmVhdGVWYWxpZGF0aW9uLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9yZWFjaC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL21peGVkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL2Jvb2xlYW4uanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL2lzQWJzZW50LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvc3RyaW5nLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvbnVtYmVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvdXRpbC9pc29kYXRlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvZGF0ZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYXJyYXlSZWR1Y2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fYmFzZVByb3BlcnR5T2YuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fZGVidXJyTGV0dGVyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvZGVidXJyLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2FzY2lpV29yZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9faGFzVW5pY29kZVdvcmQuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fdW5pY29kZVdvcmRzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvd29yZHMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY3JlYXRlQ29tcG91bmRlci5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3NuYWtlQ2FzZS5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL19iYXNlU2xpY2UuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9fY2FzdFNsaWNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvX2NyZWF0ZUNhc2VGaXJzdC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLWVzL3VwcGVyRmlyc3QuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL2xvZGFzaC1lcy9jYXBpdGFsaXplLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvY2FtZWxDYXNlLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9sb2Rhc2gtZXMvbWFwS2V5cy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL3V0aWwvc29ydEZpZWxkcy5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMveXVwL2VzL3V0aWwvc29ydEJ5S2V5T3JkZXIuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy91dGlsL21ha2VQYXRoLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvb2JqZWN0LmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy95dXAvZXMvYXJyYXkuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy9MYXp5LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtQ29udGFpbmVycy9maWVsZHNEaXZpZGVyV3JhcHBlci9maWVsZHNEaXZpZGVyV3JhcHBlci5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2NvbXBvbmVudHMvZm9ybUNvbnRhaW5lcnMvZmllbGRzRGl2aWRlcldyYXBwZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy90ZXh0SW5wdXQvdGV4dElucHV0LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy9mb3JtRWxlbWVudHMvdGV4dElucHV0L2luZGV4LmpzIiwid2VicGFjazovLy8uLi9zcmMvRmllbGQudHN4Iiwid2VicGFjazovLy8uL2FwcC9zcmMvY29tcG9uZW50cy92YXJpb3VzL25vdGlmaWNhdGlvbi9ub3RpZmljYXRpb24uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL3ZhcmlvdXMvbm90aWZpY2F0aW9uL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvcmVnL2NvbXBvbmVudHMvcmVnRm9ybS9qcy9yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3l1cC9lcy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL3JlZy9jb21wb25lbnRzL3JlZ0Zvcm0vcmVnRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL3JlZy9jb21wb25lbnRzL3JlZ0Zvcm0vaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9yZWcvcmVnUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL3JlZy9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2VudGVyL2NvbXBvbmVudHMvZW50ZXJGb3JtL2pzL3Jlc291cmNlcy5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2VudGVyL2NvbXBvbmVudHMvZW50ZXJGb3JtL2VudGVyRm9ybS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2VudGVyL2NvbXBvbmVudHMvZW50ZXJGb3JtL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvZW50ZXIvZW50ZXJQYWdlLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvZW50ZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9mb3Jnb3RQYXNzd29yZC9jb21wb25lbnRzL2ZvcmdvdFBhc3N3b3JkRm9ybS9qcy9yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9mb3Jnb3RQYXNzd29yZC9jb21wb25lbnRzL2ZvcmdvdFBhc3N3b3JkRm9ybS9mb3Jnb3RQYXNzd29yZEZvcm0uanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9mb3Jnb3RQYXNzd29yZC9jb21wb25lbnRzL2ZvcmdvdFBhc3N3b3JkRm9ybS9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2ZvcmdvdFBhc3N3b3JkL2ZvcmdvdFBhc3N3b3JkUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL2ZvcmdvdFBhc3N3b3JkL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvcmVzZXRQYXNzd29yZC9jb21wb25lbnRzL2VudGVyRm9ybS9qcy9yZXNvdXJjZXMuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9wYWdlcy9yZXNldFBhc3N3b3JkL3Jlc2V0UGFzc3dvcmRQYWdlLmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvcmVzZXRQYXNzd29yZC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL25vdGVzL25vdGVzUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL25vdGVzL2luZGV4LmpzIiwid2VicGFjazovLy8uL2FwcC9zcmMvcGFnZXMvdXNlci91c2VyUGFnZS5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL3BhZ2VzL3VzZXIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2FwcC9hcHAuanMiLCJ3ZWJwYWNrOi8vLy4vYXBwL3NyYy9jb21wb25lbnRzL2FwcC9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hcHAvc3JjL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwicmVxdWlyZSIsImZyZWVTZWxmIiwic2VsZiIsInJvb3QiLCJmcmVlR2xvYmFsIiwiRnVuY3Rpb24iLCJ3YXJuaW5nIiwiY29uZGl0aW9uIiwibWVzc2FnZSIsIl9pbmhlcml0c0xvb3NlIiwic3ViQ2xhc3MiLCJzdXBlckNsYXNzIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJjaGVjayIsIml0IiwiTWF0aCIsImdsb2JhbFRoaXMiLCJ3aW5kb3ciLCJnbG9iYWwiLCJmcmVlRXhwb3J0cyIsIm5vZGVUeXBlIiwiZnJlZU1vZHVsZSIsImZyZWVQcm9jZXNzIiwicHJvY2VzcyIsIm5vZGVVdGlsIiwidHlwZXMiLCJiaW5kaW5nIiwiZSIsImlzQXJyYXkiLCJBcnJheSIsImtleUxpc3QiLCJrZXlzIiwiaGFzUHJvcCIsImhhc0VsZW1lbnRUeXBlIiwiRWxlbWVudCIsImEiLCJiIiwiZXF1YWwiLCJsZW5ndGgiLCJhcnJBIiwiYXJyQiIsImRhdGVBIiwiRGF0ZSIsImRhdGVCIiwiZ2V0VGltZSIsInJlZ2V4cEEiLCJSZWdFeHAiLCJyZWdleHBCIiwidG9TdHJpbmciLCIkJHR5cGVvZiIsImVycm9yIiwibWF0Y2giLCJudW1iZXIiLCJjb25zb2xlIiwid2FybiIsIkNhY2hlIiwibWF4U2l6ZSIsInRoaXMiLCJfbWF4U2l6ZSIsImNsZWFyIiwiX3NpemUiLCJfdmFsdWVzIiwic2V0IiwiU1BMSVRfUkVHRVgiLCJESUdJVF9SRUdFWCIsIkxFQURfRElHSVRfUkVHRVgiLCJTUEVDX0NIQVJfUkVHRVgiLCJDTEVBTl9RVU9URVNfUkVHRVgiLCJwYXRoQ2FjaGUiLCJzZXRDYWNoZSIsImdldENhY2hlIiwibm9ybWFsaXplUGF0aCIsInBhdGgiLCJzcGxpdCIsIm1hcCIsInBhcnQiLCJyZXBsYWNlIiwiaXNRdW90ZWQiLCJzdHIiLCJpbmRleE9mIiwiY2hhckF0Iiwic2hvdWxkQmVRdW90ZWQiLCJoYXNMZWFkaW5nTnVtYmVyIiwidGVzdCIsImhhc1NwZWNpYWxDaGFycyIsInNldHRlciIsInBhcnRzIiwiZGF0YSIsImluZGV4IiwibGVuIiwic2FmZSIsImpvaW4iLCJzZWdtZW50cyIsInJlZHVjZSIsImZvckVhY2giLCJjYiIsInRoaXNBcmciLCJpdGVyIiwiaWR4IiwiaXNCcmFja2V0IiwicmVhY3RJcyIsIlJFQUNUX1NUQVRJQ1MiLCJjaGlsZENvbnRleHRUeXBlcyIsImNvbnRleHRUeXBlIiwiY29udGV4dFR5cGVzIiwiZGVmYXVsdFByb3BzIiwiZGlzcGxheU5hbWUiLCJnZXREZWZhdWx0UHJvcHMiLCJnZXREZXJpdmVkU3RhdGVGcm9tRXJyb3IiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJtaXhpbnMiLCJwcm9wVHlwZXMiLCJ0eXBlIiwiS05PV05fU1RBVElDUyIsImNhbGxlciIsImNhbGxlZSIsImFyZ3VtZW50cyIsImFyaXR5IiwiTUVNT19TVEFUSUNTIiwiY29tcGFyZSIsIlRZUEVfU1RBVElDUyIsImdldFN0YXRpY3MiLCJjb21wb25lbnQiLCJpc01lbW8iLCJGb3J3YXJkUmVmIiwicmVuZGVyIiwiTWVtbyIsImdldE93blByb3BlcnR5TmFtZXMiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJnZXRQcm90b3R5cGVPZiIsIm9iamVjdFByb3RvdHlwZSIsImhvaXN0Tm9uUmVhY3RTdGF0aWNzIiwidGFyZ2V0Q29tcG9uZW50Iiwic291cmNlQ29tcG9uZW50IiwiYmxhY2tsaXN0IiwiaW5oZXJpdGVkQ29tcG9uZW50IiwiY29uY2F0IiwidGFyZ2V0U3RhdGljcyIsInNvdXJjZVN0YXRpY3MiLCJkZXNjcmlwdG9yIiwiREVTQ1JJUFRPUlMiLCJkZWZpbmVQcm9wZXJ0eU1vZHVsZSIsImNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciIsImYiLCJCdWZmZXIiLCJ1bmRlZmluZWQiLCJpc0J1ZmZlciIsInN0dWJGYWxzZSIsIkRPTUl0ZXJhYmxlcyIsIkFycmF5SXRlcmF0b3JNZXRob2RzIiwiY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5Iiwid2VsbEtub3duU3ltYm9sIiwiSVRFUkFUT1IiLCJUT19TVFJJTkdfVEFHIiwiQXJyYXlWYWx1ZXMiLCJ2YWx1ZXMiLCJDT0xMRUNUSU9OX05BTUUiLCJDb2xsZWN0aW9uIiwiQ29sbGVjdGlvblByb3RvdHlwZSIsIk1FVEhPRF9OQU1FIiwiZXhlYyIsIm1ha2VBcnJheUZyb20iLCJvYmoiLCJzbGljZSIsImFwcGx5IiwiU3luY2hyb25vdXNQcm9taXNlIiwiaGFuZGxlciIsInN0YXR1cyIsIl9jb250aW51YXRpb25zIiwiX3BhcmVudCIsIl9wYXVzZWQiLCJfY29udGludWVXaXRoIiwiX2ZhaWxXaXRoIiwibG9va3NMaWtlQVByb21pc2UiLCJ0aGVuIiwicGFzc1Rocm91Z2giLCJuZXh0Rm4iLCJjYXRjaEZuIiwibmV4dCIsInVucmVzb2x2ZWQiLCJfc2V0UGFyZW50IiwiX2lzUmVqZWN0ZWQiLCJwdXNoIiwicHJvbWlzZSIsImNhdGNoUmVzdWx0IiwiX2Vycm9yIiwiX2NoYWluUHJvbWlzZURhdGEiLCJyZXNvbHZlIiwicmVqZWN0IiwiX3J1blJlc29sdXRpb25zIiwiY2F0Y2giLCJfaXNSZXNvbHZlZCIsIl9kYXRhIiwiX3J1blJlamVjdGlvbnMiLCJmaW5hbGx5IiwiY2FsbGJhY2siLCJyYW4iLCJydW5GaW5hbGx5IiwicmVzdWx0IiwiZXJyIiwiY2FsbGJhY2tSZXN1bHQiLCJwYXVzZSIsInJlc3VtZSIsImZpcnN0UGF1c2VkIiwiX2ZpbmRGaXJzdFBhdXNlZCIsIl9maW5kQW5jZXN0cnkiLCJhY2MiLCJjdXIiLCJub2RlIiwiY2hpbGRyZW4iLCJwYXJlbnQiLCJFcnJvciIsImZpcnN0UGVuZGluZyIsIl9maW5kRmlyc3RQZW5kaW5nIiwiX3NldFJlc29sdmVkIiwiX2ZpbmRGaXJzdEFuY2VzdG9yIiwiX2lzUGVuZGluZyIsIm1hdGNoaW5nIiwiZmlyc3RSZWplY3RlZCIsIl9zZXRSZWplY3RlZCIsIl90YWtlQ29udGludWF0aW9ucyIsInNwbGljZSIsImNvbnRpbnVhdGlvbnMiLCJjb250IiwiX2hhbmRsZVVzZXJGdW5jdGlvblJlc3VsdCIsIl9oYW5kbGVXaGVuUmVzb2x2ZWREYXRhSXNQcm9taXNlIiwiX2hhbmRsZVJlc29sdXRpb25FcnJvciIsImNvbnRpbnVhdGlvbiIsImUyIiwibmV4dFN5bmNocm9ub3VzUHJvbWlzZSIsInByb21pc2VEYXRhIiwibmV3RGF0YSIsIm5ld0Vycm9yIiwibmV3UmVzdWx0IiwiYWxsIiwiYXJncyIsImFsbERhdGEiLCJudW1SZXNvbHZlZCIsInJlamVjdGVkIiwiYXJnIiwidGhpc1Jlc3VsdCIsImRvUmVqZWN0IiwiUHJvbWlzZSIsIlJlYWxQcm9taXNlIiwiaW5zdGFsbEdsb2JhbGx5IiwiX19hd2FpdGVyIiwiX19wYXRjaGVkIiwib3JpZ2luYWxBd2FpdGVyIiwicGF0Y2hBd2FpdGVySWZSZXF1aXJlZCIsInVuaW5zdGFsbEdsb2JhbGx5Iiwic2hhcmVkIiwiaGFzIiwidWlkIiwiTkFUSVZFX1NZTUJPTCIsIlVTRV9TWU1CT0xfQVNfVUlEIiwiV2VsbEtub3duU3ltYm9sc1N0b3JlIiwiY3JlYXRlV2VsbEtub3duU3ltYm9sIiwid2l0aG91dFNldHRlciIsImZhaWxzIiwiSUU4X0RPTV9ERUZJTkUiLCJhbk9iamVjdCIsInRvUHJpbWl0aXZlIiwibmF0aXZlRGVmaW5lUHJvcGVydHkiLCJPIiwiUCIsIkF0dHJpYnV0ZXMiLCJUeXBlRXJyb3IiLCJpc09iamVjdCIsIlN0cmluZyIsImciLCJvcmlnaW5hbE1vZHVsZSIsIndlYnBhY2tQb2x5ZmlsbCIsIkluZGV4ZWRPYmplY3QiLCJyZXF1aXJlT2JqZWN0Q29lcmNpYmxlIiwiY2hlY2tEQ0UiLCJfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18iLCJiaXRtYXAiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsInBvbnlmaWxsIiwiY29tbW9uanNHbG9iYWwiLCJjcmVhdGVFdmVudEVtaXR0ZXIiLCJoYW5kbGVycyIsIm9uIiwib2ZmIiwiZmlsdGVyIiwiaCIsIm5ld1ZhbHVlIiwiY2hhbmdlZEJpdHMiLCJSZWFjdCIsImNyZWF0ZUNvbnRleHQiLCJkZWZhdWx0VmFsdWUiLCJjYWxjdWxhdGVDaGFuZ2VkQml0cyIsIl9Qcm92aWRlciRjaGlsZENvbnRleCIsIl9Db25zdW1lciRjb250ZXh0VHlwZSIsImNvbnRleHRQcm9wIiwiUHJvdmlkZXIiLCJfQ29tcG9uZW50IiwiX3RoaXMiLCJlbWl0dGVyIiwicHJvcHMiLCJfcHJvdG8iLCJnZXRDaGlsZENvbnRleHQiLCJfcmVmIiwiY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIm5leHRQcm9wcyIsIm9sZFZhbHVlIiwieCIsInkiLCJDb21wb25lbnQiLCJQcm9wVHlwZXMiLCJpc1JlcXVpcmVkIiwiQ29uc3VtZXIiLCJfQ29tcG9uZW50MiIsIl90aGlzMiIsInN0YXRlIiwiZ2V0VmFsdWUiLCJvblVwZGF0ZSIsIm9ic2VydmVkQml0cyIsInNldFN0YXRlIiwiX3Byb3RvMiIsImNvbXBvbmVudERpZE1vdW50IiwiY29udGV4dCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiaXNhcnJheSIsInBhdGhUb1JlZ2V4cCIsInBhcnNlIiwiY29tcGlsZSIsIm9wdGlvbnMiLCJ0b2tlbnNUb0Z1bmN0aW9uIiwidG9rZW5zVG9SZWdFeHAiLCJQQVRIX1JFR0VYUCIsInJlcyIsInRva2VucyIsImRlZmF1bHREZWxpbWl0ZXIiLCJkZWxpbWl0ZXIiLCJlc2NhcGVkIiwib2Zmc2V0IiwicHJlZml4IiwiY2FwdHVyZSIsImdyb3VwIiwibW9kaWZpZXIiLCJhc3RlcmlzayIsInBhcnRpYWwiLCJyZXBlYXQiLCJvcHRpb25hbCIsInBhdHRlcm4iLCJlc2NhcGVHcm91cCIsImVzY2FwZVN0cmluZyIsInN1YnN0ciIsImVuY29kZVVSSUNvbXBvbmVudFByZXR0eSIsImVuY29kZVVSSSIsImNoYXJDb2RlQXQiLCJ0b1VwcGVyQ2FzZSIsIm1hdGNoZXMiLCJmbGFncyIsIm9wdHMiLCJlbmNvZGUiLCJwcmV0dHkiLCJlbmNvZGVVUklDb21wb25lbnQiLCJ0b2tlbiIsInNlZ21lbnQiLCJKU09OIiwic3RyaW5naWZ5IiwiaiIsImF0dGFjaEtleXMiLCJyZSIsInNlbnNpdGl2ZSIsInN0cmljdCIsImVuZCIsInJvdXRlIiwiZW5kc1dpdGhEZWxpbWl0ZXIiLCJncm91cHMiLCJzb3VyY2UiLCJyZWdleHBUb1JlZ2V4cCIsImFycmF5VG9SZWdleHAiLCJzdHJpbmdUb1JlZ2V4cCIsInByb3BJc0VudW1lcmFibGUiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInRvT2JqZWN0IiwidmFsIiwiYXNzaWduIiwidGVzdDEiLCJ0ZXN0MiIsImZyb21DaGFyQ29kZSIsInRlc3QzIiwibGV0dGVyIiwic2hvdWxkVXNlTmF0aXZlIiwidGFyZ2V0IiwiZnJvbSIsInN5bWJvbHMiLCJ0byIsIklTX1BVUkUiLCJzdG9yZSIsInZlcnNpb24iLCJjb3B5cmlnaHQiLCJzZXRHbG9iYWwiLCJjcmVhdGVFbGVtZW50IiwiZG9jdW1lbnQiLCJFWElTVFMiLCJpbnB1dCIsIlBSRUZFUlJFRF9TVFJJTkciLCJmbiIsInZhbHVlT2YiLCJpZCIsInBvc3RmaXgiLCJyYW5kb20iLCJhY3RpdmVYRG9jdW1lbnQiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiZW51bUJ1Z0tleXMiLCJoaWRkZW5LZXlzIiwiaHRtbCIsImRvY3VtZW50Q3JlYXRlRWxlbWVudCIsInNoYXJlZEtleSIsIklFX1BST1RPIiwiRW1wdHlDb25zdHJ1Y3RvciIsInNjcmlwdFRhZyIsImNvbnRlbnQiLCJMVCIsIk51bGxQcm90b09iamVjdCIsImRvbWFpbiIsIkFjdGl2ZVhPYmplY3QiLCJpZnJhbWVEb2N1bWVudCIsImlmcmFtZSIsIndyaXRlIiwiY2xvc2UiLCJ0ZW1wIiwicGFyZW50V2luZG93IiwiTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCIsInN0eWxlIiwiZGlzcGxheSIsImFwcGVuZENoaWxkIiwic3JjIiwiY29udGVudFdpbmRvdyIsIm9wZW4iLCJGIiwiUHJvcGVydGllcyIsInRvSW5kZXhlZE9iamVjdCIsIm5hbWVzIiwiY2VpbCIsImZsb29yIiwiYXJndW1lbnQiLCJpc05hTiIsImFGdW5jdGlvbiIsInZhcmlhYmxlIiwibmFtZXNwYWNlIiwibWV0aG9kIiwiTkFUSVZFX1dFQUtfTUFQIiwib2JqZWN0SGFzIiwiV2Vha01hcCIsIndtZ2V0Iiwid21oYXMiLCJ3bXNldCIsIm1ldGFkYXRhIiwiU1RBVEUiLCJlbmZvcmNlIiwiZ2V0dGVyRm9yIiwiVFlQRSIsImZ1bmN0aW9uVG9TdHJpbmciLCJpbnNwZWN0U291cmNlIiwicHJvcGVydHlJc0VudW1lcmFibGVNb2R1bGUiLCJuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJJbnRlcm5hbFN0YXRlTW9kdWxlIiwiZ2V0SW50ZXJuYWxTdGF0ZSIsImVuZm9yY2VJbnRlcm5hbFN0YXRlIiwiVEVNUExBVEUiLCJ1bnNhZmUiLCJzaW1wbGUiLCJub1RhcmdldEdldCIsIkl0ZXJhdG9yUHJvdG90eXBlIiwiUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlIiwiYXJyYXlJdGVyYXRvciIsIkJVR0dZX1NBRkFSSV9JVEVSQVRPUlMiLCJDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIiLCJPYmplY3RQcm90b3R5cGUiLCJUQUciLCJTVEFUSUMiLCJzeW1ib2xPYnNlcnZhYmxlUG9ueWZpbGwiLCJvYnNlcnZhYmxlIiwiYWxsb2NVbnNhZmUiLCJjbG9uZUJ1ZmZlciIsImJ1ZmZlciIsImlzRGVlcCIsImNvcHkiLCJ0b3Bvc29ydCIsIm5vZGVzIiwiZWRnZXMiLCJjdXJzb3IiLCJzb3J0ZWQiLCJ2aXNpdGVkIiwib3V0Z29pbmdFZGdlcyIsImFyciIsIk1hcCIsImVkZ2UiLCJTZXQiLCJhZGQiLCJtYWtlT3V0Z29pbmdFZGdlcyIsIm5vZGVzSGFzaCIsIm1ha2VOb2Rlc0hhc2giLCJ2aXNpdCIsInByZWRlY2Vzc29ycyIsIm5vZGVSZXAiLCJvdXRnb2luZyIsImNoaWxkIiwiZGVsZXRlIiwidW5pcXVlTm9kZXMiLCJhcnJheSIsImZvciIsInEiLCJ1IiwidiIsInciLCJ6IiwiQSIsIkIiLCJpdGVyYXRvciIsIkMiLCJEIiwiaXNNb3VudGVkIiwiZW5xdWV1ZUZvcmNlVXBkYXRlIiwiZW5xdWV1ZVJlcGxhY2VTdGF0ZSIsImVucXVldWVTZXRTdGF0ZSIsIkUiLCJyZWZzIiwidXBkYXRlciIsIkciLCJIIiwiaXNSZWFjdENvbXBvbmVudCIsImZvcmNlVXBkYXRlIiwiSSIsImlzUHVyZVJlYWN0Q29tcG9uZW50IiwiSiIsImN1cnJlbnQiLCJLIiwiTCIsInJlZiIsIl9fc2VsZiIsIl9fc291cmNlIiwiTSIsImsiLCJfb3duZXIiLCJRIiwiUiIsInBvcCIsImtleVByZWZpeCIsImZ1bmMiLCJjb3VudCIsIlMiLCJWIiwiVCIsIlUiLCJkb25lIiwiZXNjYXBlIiwiVyIsImFhIiwiWCIsIk4iLCJZIiwiWiIsImJhIiwiUmVhY3RDdXJyZW50RGlzcGF0Y2hlciIsIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnIiwic3VzcGVuc2UiLCJSZWFjdEN1cnJlbnRPd25lciIsIklzU29tZVJlbmRlcmVyQWN0aW5nIiwiQ2hpbGRyZW4iLCJ0b0FycmF5Iiwib25seSIsIkZyYWdtZW50IiwiUHJvZmlsZXIiLCJQdXJlQ29tcG9uZW50IiwiU3RyaWN0TW9kZSIsIlN1c3BlbnNlIiwiX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQiLCJjbG9uZUVsZW1lbnQiLCJfY2FsY3VsYXRlQ2hhbmdlZEJpdHMiLCJfY3VycmVudFZhbHVlIiwiX2N1cnJlbnRWYWx1ZTIiLCJfdGhyZWFkQ291bnQiLCJfY29udGV4dCIsImNyZWF0ZUZhY3RvcnkiLCJjcmVhdGVSZWYiLCJmb3J3YXJkUmVmIiwiaXNWYWxpZEVsZW1lbnQiLCJsYXp5IiwiX2N0b3IiLCJfc3RhdHVzIiwiX3Jlc3VsdCIsIm1lbW8iLCJ1c2VDYWxsYmFjayIsInVzZUNvbnRleHQiLCJ1c2VEZWJ1Z1ZhbHVlIiwidXNlRWZmZWN0IiwidXNlSW1wZXJhdGl2ZUhhbmRsZSIsInVzZUxheW91dEVmZmVjdCIsInVzZU1lbW8iLCJ1c2VSZWR1Y2VyIiwidXNlUmVmIiwidXNlU3RhdGUiLCJvbkVycm9yIiwiZGEiLCJlYSIsImZhIiwiaGEiLCJpYSIsImphIiwibGEiLCJtYSIsIm5hIiwib2EiLCJjdXJyZW50VGFyZ2V0Iiwia2EiLCJwYSIsInFhIiwicmEiLCJzYSIsImV4dHJhY3RFdmVudHMiLCJldmVudFR5cGVzIiwidGEiLCJwaGFzZWRSZWdpc3RyYXRpb25OYW1lcyIsInVhIiwicmVnaXN0cmF0aW9uTmFtZSIsInZhIiwid2EiLCJkZXBlbmRlbmNpZXMiLCJ4YSIsInlhIiwiemEiLCJBYSIsIkJhIiwiQ2EiLCJzdGF0ZU5vZGUiLCJEYSIsIkVhIiwiRmEiLCJHYSIsIkhhIiwiSWEiLCJKYSIsIkthIiwiTGEiLCJNYSIsIk5hIiwiT2EiLCJQYSIsIlFhIiwiYWNjZXB0c0Jvb2xlYW5zIiwiYXR0cmlidXRlTmFtZSIsImF0dHJpYnV0ZU5hbWVzcGFjZSIsIm11c3RVc2VQcm9wZXJ0eSIsInByb3BlcnR5TmFtZSIsInNhbml0aXplVVJMIiwidG9Mb3dlckNhc2UiLCJVYSIsIlZhIiwieGxpbmtIcmVmIiwiV2EiLCJYYSIsIlNhIiwiVGEiLCJSYSIsInJlbW92ZUF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZSIsInNldEF0dHJpYnV0ZU5TIiwiWWEiLCJaYSIsIiRhIiwiYWIiLCJiYiIsImRiIiwiZWIiLCJmYiIsImdiIiwiaGIiLCJpYiIsImpiIiwia2IiLCJsYiIsIm1iIiwibmIiLCJwYiIsInFiIiwidGFnIiwiX2RlYnVnT3duZXIiLCJfZGVidWdTb3VyY2UiLCJmaWxlTmFtZSIsImxpbmVOdW1iZXIiLCJyZXR1cm4iLCJyYiIsInNiIiwibm9kZU5hbWUiLCJ4YiIsIl92YWx1ZVRyYWNrZXIiLCJzZXRWYWx1ZSIsInN0b3BUcmFja2luZyIsInRiIiwieWIiLCJjaGVja2VkIiwiemIiLCJkZWZhdWx0Q2hlY2tlZCIsIl93cmFwcGVyU3RhdGUiLCJpbml0aWFsQ2hlY2tlZCIsIkFiIiwiaW5pdGlhbFZhbHVlIiwiY29udHJvbGxlZCIsIkJiIiwiQ2IiLCJEYiIsIkViIiwib3duZXJEb2N1bWVudCIsImFjdGl2ZUVsZW1lbnQiLCJHYiIsIkZiIiwiSGIiLCJzZWxlY3RlZCIsImRlZmF1bHRTZWxlY3RlZCIsImRpc2FibGVkIiwiSWIiLCJkYW5nZXJvdXNseVNldElubmVySFRNTCIsIkpiIiwiS2IiLCJMYiIsInRleHRDb250ZW50IiwiTWIiLCJOYiIsIk9iIiwiUGIiLCJRYiIsIk1TQXBwIiwiZXhlY1Vuc2FmZUxvY2FsRnVuY3Rpb24iLCJuYW1lc3BhY2VVUkkiLCJpbm5lckhUTUwiLCJmaXJzdENoaWxkIiwicmVtb3ZlQ2hpbGQiLCJSYiIsImxhc3RDaGlsZCIsIm5vZGVWYWx1ZSIsIlNiIiwiVGIiLCJhbmltYXRpb25lbmQiLCJhbmltYXRpb25pdGVyYXRpb24iLCJhbmltYXRpb25zdGFydCIsInRyYW5zaXRpb25lbmQiLCJVYiIsIlZiIiwiV2IiLCJhbmltYXRpb24iLCJ0cmFuc2l0aW9uIiwiWGIiLCJZYiIsIlpiIiwiJGIiLCJhYyIsImJjIiwiY2MiLCJkYyIsImFsdGVybmF0ZSIsImVmZmVjdFRhZyIsImVjIiwibWVtb2l6ZWRTdGF0ZSIsImRlaHlkcmF0ZWQiLCJmYyIsImhjIiwic2libGluZyIsImdjIiwiaWMiLCJqYyIsImtjIiwibGMiLCJfZGlzcGF0Y2hMaXN0ZW5lcnMiLCJfZGlzcGF0Y2hJbnN0YW5jZXMiLCJpc1Byb3BhZ2F0aW9uU3RvcHBlZCIsImlzUGVyc2lzdGVudCIsInJlbGVhc2UiLCJtYyIsIm5jIiwic3JjRWxlbWVudCIsImNvcnJlc3BvbmRpbmdVc2VFbGVtZW50IiwicGFyZW50Tm9kZSIsIm9jIiwicGMiLCJxYyIsInRvcExldmVsVHlwZSIsIm5hdGl2ZUV2ZW50IiwidGFyZ2V0SW5zdCIsImFuY2VzdG9ycyIsInJjIiwiZXZlbnRTeXN0ZW1GbGFncyIsInNjIiwiY29udGFpbmVySW5mbyIsInRjIiwidWMiLCJ2YyIsIndjIiwieGMiLCJ5YyIsInpjIiwiQWMiLCJCYyIsIkNjIiwiRGMiLCJFYyIsIkZjIiwiR2MiLCJIYyIsIkljIiwiS2MiLCJibG9ja2VkT24iLCJjb250YWluZXIiLCJMYyIsInBvaW50ZXJJZCIsIk1jIiwiTmMiLCJQYyIsInVuc3RhYmxlX3J1bldpdGhQcmlvcml0eSIsInByaW9yaXR5IiwiaHlkcmF0ZSIsIlFjIiwiUmMiLCJTYyIsIlRjIiwic2hpZnQiLCJVYyIsInVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2siLCJ1bnN0YWJsZV9Ob3JtYWxQcmlvcml0eSIsIlZjIiwiV2MiLCJZYyIsIlpjIiwiJGMiLCJhZCIsImJ1YmJsZWQiLCJjYXB0dXJlZCIsImV2ZW50UHJpb3JpdHkiLCJiZCIsImNkIiwiZGQiLCJ1bnN0YWJsZV9Vc2VyQmxvY2tpbmdQcmlvcml0eSIsImVkIiwiZmQiLCJnZCIsImhkIiwiYWRkRXZlbnRMaXN0ZW5lciIsIk9jIiwiamQiLCJhbmltYXRpb25JdGVyYXRpb25Db3VudCIsImJvcmRlckltYWdlT3V0c2V0IiwiYm9yZGVySW1hZ2VTbGljZSIsImJvcmRlckltYWdlV2lkdGgiLCJib3hGbGV4IiwiYm94RmxleEdyb3VwIiwiYm94T3JkaW5hbEdyb3VwIiwiY29sdW1uQ291bnQiLCJjb2x1bW5zIiwiZmxleCIsImZsZXhHcm93IiwiZmxleFBvc2l0aXZlIiwiZmxleFNocmluayIsImZsZXhOZWdhdGl2ZSIsImZsZXhPcmRlciIsImdyaWRBcmVhIiwiZ3JpZFJvdyIsImdyaWRSb3dFbmQiLCJncmlkUm93U3BhbiIsImdyaWRSb3dTdGFydCIsImdyaWRDb2x1bW4iLCJncmlkQ29sdW1uRW5kIiwiZ3JpZENvbHVtblNwYW4iLCJncmlkQ29sdW1uU3RhcnQiLCJmb250V2VpZ2h0IiwibGluZUNsYW1wIiwibGluZUhlaWdodCIsIm9wYWNpdHkiLCJvcmRlciIsIm9ycGhhbnMiLCJ0YWJTaXplIiwid2lkb3dzIiwiekluZGV4Iiwiem9vbSIsImZpbGxPcGFjaXR5IiwiZmxvb2RPcGFjaXR5Iiwic3RvcE9wYWNpdHkiLCJzdHJva2VEYXNoYXJyYXkiLCJzdHJva2VEYXNob2Zmc2V0Iiwic3Ryb2tlTWl0ZXJsaW1pdCIsInN0cm9rZU9wYWNpdHkiLCJzdHJva2VXaWR0aCIsImtkIiwibGQiLCJ0cmltIiwibWQiLCJzZXRQcm9wZXJ0eSIsInN1YnN0cmluZyIsIm5kIiwibWVudWl0ZW0iLCJhcmVhIiwiYmFzZSIsImJyIiwiY29sIiwiZW1iZWQiLCJociIsImltZyIsImtleWdlbiIsImxpbmsiLCJtZXRhIiwicGFyYW0iLCJ0cmFjayIsIndiciIsIm9kIiwicGQiLCJpcyIsInFkIiwicmQiLCJzZCIsInRkIiwiYm9keSIsInVkIiwidmQiLCJuZXh0U2libGluZyIsInhkIiwiSFRNTElGcmFtZUVsZW1lbnQiLCJsb2NhdGlvbiIsImhyZWYiLCJ5ZCIsImNvbnRlbnRFZGl0YWJsZSIsIkRkIiwiRWQiLCJGZCIsImF1dG9Gb2N1cyIsIkdkIiwiX19odG1sIiwiSGQiLCJzZXRUaW1lb3V0IiwiSWQiLCJjbGVhclRpbWVvdXQiLCJKZCIsIktkIiwicHJldmlvdXNTaWJsaW5nIiwiTGQiLCJNZCIsIk5kIiwiT2QiLCJQZCIsIlFkIiwiUmQiLCJTZCIsIlRkIiwiZGlzcGF0Y2hDb25maWciLCJVZCIsIl90YXJnZXRJbnN0IiwiVmQiLCJXZCIsIlhkIiwiWWQiLCJaZCIsIiRkIiwiYWUiLCJiZSIsImNlIiwiSW50ZXJmYWNlIiwiaXNEZWZhdWx0UHJldmVudGVkIiwiZGVmYXVsdFByZXZlbnRlZCIsInJldHVyblZhbHVlIiwiZWUiLCJldmVudFBvb2wiLCJmZSIsImRlc3RydWN0b3IiLCJkZSIsImdldFBvb2xlZCIsInByZXZlbnREZWZhdWx0Iiwic3RvcFByb3BhZ2F0aW9uIiwiY2FuY2VsQnViYmxlIiwicGVyc2lzdCIsImV2ZW50UGhhc2UiLCJidWJibGVzIiwiY2FuY2VsYWJsZSIsInRpbWVTdGFtcCIsIm5vdyIsImlzVHJ1c3RlZCIsImV4dGVuZCIsImdlIiwiaGUiLCJpZSIsImplIiwia2UiLCJkb2N1bWVudE1vZGUiLCJsZSIsIm1lIiwibmUiLCJvZSIsImJlZm9yZUlucHV0IiwiY29tcG9zaXRpb25FbmQiLCJjb21wb3NpdGlvblN0YXJ0IiwiY29tcG9zaXRpb25VcGRhdGUiLCJwZSIsInFlIiwia2V5Q29kZSIsImRldGFpbCIsInNlIiwidmUiLCJsb2NhbGUiLCJ3aGljaCIsInRlIiwiY3RybEtleSIsImFsdEtleSIsIm1ldGFLZXkiLCJjaGFyIiwidWUiLCJ3ZSIsImNvbG9yIiwiZGF0ZSIsImRhdGV0aW1lIiwiZW1haWwiLCJtb250aCIsInBhc3N3b3JkIiwicmFuZ2UiLCJzZWFyY2giLCJ0ZWwiLCJ0ZXh0IiwidGltZSIsInVybCIsIndlZWsiLCJ4ZSIsInllIiwiY2hhbmdlIiwiemUiLCJBZSIsIkJlIiwiQ2UiLCJEZSIsIkVlIiwiRmUiLCJHZSIsImRldGFjaEV2ZW50IiwiSGUiLCJJZSIsImF0dGFjaEV2ZW50IiwiSmUiLCJLZSIsIkxlIiwiTWUiLCJfaXNJbnB1dEV2ZW50U3VwcG9ydGVkIiwiTmUiLCJ2aWV3IiwiT2UiLCJBbHQiLCJDb250cm9sIiwiTWV0YSIsIlNoaWZ0IiwiUGUiLCJnZXRNb2RpZmllclN0YXRlIiwiUWUiLCJSZSIsIlNlIiwiVGUiLCJVZSIsIlZlIiwic2NyZWVuWCIsInNjcmVlblkiLCJjbGllbnRYIiwiY2xpZW50WSIsInBhZ2VYIiwicGFnZVkiLCJzaGlmdEtleSIsImJ1dHRvbiIsImJ1dHRvbnMiLCJyZWxhdGVkVGFyZ2V0IiwiZnJvbUVsZW1lbnQiLCJ0b0VsZW1lbnQiLCJtb3ZlbWVudFgiLCJtb3ZlbWVudFkiLCJXZSIsIndpZHRoIiwiaGVpZ2h0IiwicHJlc3N1cmUiLCJ0YW5nZW50aWFsUHJlc3N1cmUiLCJ0aWx0WCIsInRpbHRZIiwidHdpc3QiLCJwb2ludGVyVHlwZSIsImlzUHJpbWFyeSIsIlhlIiwibW91c2VFbnRlciIsIm1vdXNlTGVhdmUiLCJwb2ludGVyRW50ZXIiLCJwb2ludGVyTGVhdmUiLCJZZSIsImRlZmF1bHRWaWV3IiwiJGUiLCJhZiIsImJmIiwiY2YiLCJkZiIsInNlbGVjdCIsImVmIiwiZmYiLCJnZiIsImhmIiwiamYiLCJzdGFydCIsInNlbGVjdGlvblN0YXJ0Iiwic2VsZWN0aW9uRW5kIiwiYW5jaG9yTm9kZSIsImdldFNlbGVjdGlvbiIsImFuY2hvck9mZnNldCIsImZvY3VzTm9kZSIsImZvY3VzT2Zmc2V0Iiwia2YiLCJvblNlbGVjdCIsImxmIiwiYW5pbWF0aW9uTmFtZSIsImVsYXBzZWRUaW1lIiwicHNldWRvRWxlbWVudCIsIm1mIiwiY2xpcGJvYXJkRGF0YSIsIm5mIiwib2YiLCJjaGFyQ29kZSIsInBmIiwiRXNjIiwiU3BhY2ViYXIiLCJMZWZ0IiwiVXAiLCJSaWdodCIsIkRvd24iLCJEZWwiLCJXaW4iLCJNZW51IiwiQXBwcyIsIlNjcm9sbCIsIk1velByaW50YWJsZUtleSIsInFmIiwiOCIsIjkiLCIxMiIsIjEzIiwiMTYiLCIxNyIsIjE4IiwiMTkiLCIyMCIsIjI3IiwiMzIiLCIzMyIsIjM0IiwiMzUiLCIzNiIsIjM3IiwiMzgiLCIzOSIsIjQwIiwiNDUiLCI0NiIsIjExMiIsIjExMyIsIjExNCIsIjExNSIsIjExNiIsIjExNyIsIjExOCIsIjExOSIsIjEyMCIsIjEyMSIsIjEyMiIsIjEyMyIsIjE0NCIsIjE0NSIsIjIyNCIsInJmIiwic2YiLCJkYXRhVHJhbnNmZXIiLCJ0ZiIsInRvdWNoZXMiLCJ0YXJnZXRUb3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJ1ZiIsInZmIiwiZGVsdGFYIiwid2hlZWxEZWx0YVgiLCJkZWx0YVkiLCJ3aGVlbERlbHRhWSIsIndoZWVsRGVsdGEiLCJkZWx0YVoiLCJkZWx0YU1vZGUiLCJ3ZiIsIlNpbXBsZUV2ZW50UGx1Z2luIiwiRW50ZXJMZWF2ZUV2ZW50UGx1Z2luIiwiQ2hhbmdlRXZlbnRQbHVnaW4iLCJTZWxlY3RFdmVudFBsdWdpbiIsIkJlZm9yZUlucHV0RXZlbnRQbHVnaW4iLCJ5ZiIsInpmIiwiQWYiLCJCZiIsIkNmIiwiX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dCIsIl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0IiwiRGYiLCJFZiIsIkZmIiwiR2YiLCJfX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dCIsIkhmIiwiSWYiLCJKZiIsIktmIiwidW5zdGFibGVfY2FuY2VsQ2FsbGJhY2siLCJMZiIsInVuc3RhYmxlX3JlcXVlc3RQYWludCIsIk1mIiwidW5zdGFibGVfbm93IiwiTmYiLCJ1bnN0YWJsZV9nZXRDdXJyZW50UHJpb3JpdHlMZXZlbCIsIk9mIiwidW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHkiLCJQZiIsIlFmIiwiUmYiLCJ1bnN0YWJsZV9Mb3dQcmlvcml0eSIsIlNmIiwidW5zdGFibGVfSWRsZVByaW9yaXR5IiwiVGYiLCJVZiIsInVuc3RhYmxlX3Nob3VsZFlpZWxkIiwiVmYiLCJXZiIsIlhmIiwiWWYiLCJaZiIsIiRmIiwiYWciLCJiZyIsImNnIiwiZGciLCJlZyIsImZnIiwiZ2ciLCJoZyIsImlnIiwiamciLCJrZyIsImxnIiwibWciLCJuZyIsIm9nIiwicGciLCJjaGlsZEV4cGlyYXRpb25UaW1lIiwicWciLCJmaXJzdENvbnRleHQiLCJleHBpcmF0aW9uVGltZSIsInJnIiwic2ciLCJyZXNwb25kZXJzIiwidGciLCJ1ZyIsInVwZGF0ZVF1ZXVlIiwiYmFzZVN0YXRlIiwiYmFzZVF1ZXVlIiwicGVuZGluZyIsImVmZmVjdHMiLCJ2ZyIsIndnIiwic3VzcGVuc2VDb25maWciLCJwYXlsb2FkIiwieGciLCJ5ZyIsInpnIiwiY2EiLCJBZyIsIkJnIiwiQ2ciLCJEZyIsIkVnIiwiRmciLCJKZyIsIl9yZWFjdEludGVybmFsRmliZXIiLCJHZyIsIkhnIiwiSWciLCJLZyIsInNob3VsZENvbXBvbmVudFVwZGF0ZSIsIkxnIiwiTWciLCJVTlNBRkVfY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyIsIk5nIiwiZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUiLCJVTlNBRkVfY29tcG9uZW50V2lsbE1vdW50IiwiY29tcG9uZW50V2lsbE1vdW50IiwiT2ciLCJQZyIsIl9zdHJpbmdSZWYiLCJRZyIsIlJnIiwibGFzdEVmZmVjdCIsIm5leHRFZmZlY3QiLCJmaXJzdEVmZmVjdCIsIlNnIiwiVGciLCJlbGVtZW50VHlwZSIsIlVnIiwiaW1wbGVtZW50YXRpb24iLCJWZyIsIldnIiwiWGciLCJZZyIsIlpnIiwiJGciLCJhaCIsImJoIiwiY2giLCJkaCIsImRvY3VtZW50RWxlbWVudCIsInRhZ05hbWUiLCJlaCIsImZoIiwiZ2giLCJoaCIsIm1lbW9pemVkUHJvcHMiLCJyZXZlYWxPcmRlciIsImloIiwicmVzcG9uZGVyIiwiamgiLCJraCIsImxoIiwibWgiLCJuaCIsIm9oIiwicGgiLCJxaCIsInJoIiwic2giLCJ0aCIsInF1ZXVlIiwidWgiLCJ2aCIsIndoIiwibGFzdFJlbmRlcmVkUmVkdWNlciIsImFjdGlvbiIsImVhZ2VyUmVkdWNlciIsImVhZ2VyU3RhdGUiLCJsYXN0UmVuZGVyZWRTdGF0ZSIsImRpc3BhdGNoIiwieGgiLCJ5aCIsInpoIiwiQWgiLCJkZXN0cm95IiwiZGVwcyIsIkJoIiwiQ2giLCJEaCIsIkVoIiwiRmgiLCJHaCIsIkhoIiwiSWgiLCJKaCIsIktoIiwiTGgiLCJNaCIsIk5oIiwicmVhZENvbnRleHQiLCJ1c2VSZXNwb25kZXIiLCJ1c2VEZWZlcnJlZFZhbHVlIiwidXNlVHJhbnNpdGlvbiIsIk9oIiwiUGgiLCJRaCIsIlJoIiwiU2giLCJUaCIsInBlbmRpbmdQcm9wcyIsIlVoIiwiVmgiLCJXaCIsIlhoIiwiWWgiLCJaaCIsIiRoIiwiYWkiLCJiaSIsImNpIiwiZGkiLCJlaSIsImZpIiwiVU5TQUZFX2NvbXBvbmVudFdpbGxVcGRhdGUiLCJjb21wb25lbnRXaWxsVXBkYXRlIiwiY29tcG9uZW50RGlkVXBkYXRlIiwiZ2kiLCJoaSIsInBlbmRpbmdDb250ZXh0IiwibmkiLCJwaSIsInFpIiwiaWkiLCJyZXRyeVRpbWUiLCJqaSIsImZhbGxiYWNrIiwidW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2siLCJraSIsImxpIiwiaXNCYWNrd2FyZHMiLCJyZW5kZXJpbmciLCJyZW5kZXJpbmdTdGFydFRpbWUiLCJsYXN0IiwidGFpbCIsInRhaWxFeHBpcmF0aW9uIiwidGFpbE1vZGUiLCJtaSIsInJpIiwic2kiLCJ3YXNNdWx0aXBsZSIsIm11bHRpcGxlIiwib25DbGljayIsIm9uY2xpY2siLCJzaXplIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlVGV4dE5vZGUiLCJ0aSIsInVpIiwidmkiLCJ3aSIsInhpIiwieWkiLCJ6aSIsIkFpIiwic3RhY2siLCJCaSIsIldlYWtTZXQiLCJDaSIsIkZpIiwiRWkiLCJHaSIsIl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlIiwiSGkiLCJJaSIsIkppIiwiZm9jdXMiLCJLaSIsIkxpIiwiRGkiLCJNaSIsIk5pIiwiT2kiLCJQaSIsIlFpIiwiaW5zdGFuY2UiLCJpbnNlcnRCZWZvcmUiLCJfcmVhY3RSb290Q29udGFpbmVyIiwiUmkiLCJTaSIsIlRpIiwiVWkiLCJWaSIsIldpIiwiWGkiLCJlbGVtZW50IiwiWWkiLCJaaSIsIiRpIiwiY29tcG9uZW50RGlkQ2F0Y2giLCJhaiIsImNvbXBvbmVudFN0YWNrIiwiUmoiLCJiaiIsImNqIiwiZGoiLCJraiIsImxqIiwibWoiLCJuaiIsIm9qIiwicWoiLCJyaiIsInNqIiwidGoiLCJ1aiIsInZqIiwid2oiLCJ0aW1lb3V0TXMiLCJ4aiIsInlqIiwiemoiLCJsYXN0RXhwaXJlZFRpbWUiLCJBaiIsImZpcnN0UGVuZGluZ1RpbWUiLCJsYXN0UGluZ2VkVGltZSIsIm5leHRLbm93blBlbmRpbmdMZXZlbCIsImNhbGxiYWNrRXhwaXJhdGlvblRpbWUiLCJjYWxsYmFja1ByaW9yaXR5IiwiY2FsbGJhY2tOb2RlIiwiQmoiLCJ0aW1lb3V0IiwiQ2oiLCJEaiIsIkVqIiwiRmoiLCJHaiIsIkhqIiwiZmluaXNoZWRXb3JrIiwiZmluaXNoZWRFeHBpcmF0aW9uVGltZSIsImxhc3RTdXNwZW5kZWRUaW1lIiwiSWoiLCJ0aW1lb3V0SGFuZGxlIiwiSmoiLCJidXN5TWluRHVyYXRpb25NcyIsImJ1c3lEZWxheU1zIiwiS2oiLCJNaiIsIk5qIiwicGluZ0NhY2hlIiwiT2oiLCJ1YiIsIlBqIiwiWGMiLCJRaiIsIlNqIiwiZmlyc3RTdXNwZW5kZWRUaW1lIiwicmFuZ2VDb3VudCIsIndiIiwiYWN0aXZlRWxlbWVudERldGFjaGVkIiwiZm9jdXNlZEVsZW0iLCJzZWxlY3Rpb25SYW5nZSIsIlRqIiwid2QiLCJjb250YWlucyIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwibWluIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInJlbW92ZUFsbFJhbmdlcyIsImFkZFJhbmdlIiwic2V0RW5kIiwibGVmdCIsInNjcm9sbExlZnQiLCJ0b3AiLCJzY3JvbGxUb3AiLCJ2YiIsIlVqIiwiVmoiLCJXaiIsImhpZGRlbiIsImRlZmF1bHQiLCJvYiIsIlhqIiwidW5zdGFibGVfb2JzZXJ2ZWRCaXRzIiwiWmoiLCJwZW5kaW5nQ2hpbGRyZW4iLCJhayIsImJrIiwiY2siLCJkayIsImVrIiwiZmsiLCJKYyIsIl9pbnRlcm5hbFJvb3QiLCJnayIsImlrIiwiaGFzQXR0cmlidXRlIiwiaGsiLCJqayIsImtrIiwidW5tb3VudCIsInF1ZXJ5U2VsZWN0b3JBbGwiLCJmb3JtIiwiTGoiLCJsayIsIkV2ZW50cyIsImZpbmRGaWJlckJ5SG9zdEluc3RhbmNlIiwiYnVuZGxlVHlwZSIsInJlbmRlcmVyUGFja2FnZU5hbWUiLCJpc0Rpc2FibGVkIiwic3VwcG9ydHNGaWJlciIsImluamVjdCIsIm9uQ29tbWl0RmliZXJSb290Iiwib25Db21taXRGaWJlclVubW91bnQiLCJZaiIsIm92ZXJyaWRlSG9va1N0YXRlIiwib3ZlcnJpZGVQcm9wcyIsInNldFN1c3BlbnNlSGFuZGxlciIsInNjaGVkdWxlVXBkYXRlIiwiY3VycmVudERpc3BhdGNoZXJSZWYiLCJmaW5kSG9zdEluc3RhbmNlQnlGaWJlciIsImZpbmRIb3N0SW5zdGFuY2VzRm9yUmVmcmVzaCIsInNjaGVkdWxlUmVmcmVzaCIsInNjaGVkdWxlUm9vdCIsInNldFJlZnJlc2hIYW5kbGVyIiwiZ2V0Q3VycmVudEZpYmVyIiwiY3JlYXRlUG9ydGFsIiwiZmluZERPTU5vZGUiLCJmbHVzaFN5bmMiLCJ1bm1vdW50Q29tcG9uZW50QXROb2RlIiwidW5zdGFibGVfYmF0Y2hlZFVwZGF0ZXMiLCJ1bnN0YWJsZV9jcmVhdGVQb3J0YWwiLCJ1bnN0YWJsZV9yZW5kZXJTdWJ0cmVlSW50b0NvbnRhaW5lciIsIk1lc3NhZ2VDaGFubmVsIiwidW5zdGFibGVfZm9yY2VGcmFtZVJhdGUiLCJwZXJmb3JtYW5jZSIsImNhbmNlbEFuaW1hdGlvbkZyYW1lIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwicG9ydDIiLCJwb3J0MSIsIm9ubWVzc2FnZSIsInBvc3RNZXNzYWdlIiwic29ydEluZGV4Iiwic3RhcnRUaW1lIiwicHJpb3JpdHlMZXZlbCIsInVuc3RhYmxlX1Byb2ZpbGluZyIsInVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uIiwidW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGUiLCJ1bnN0YWJsZV9uZXh0IiwidW5zdGFibGVfcGF1c2VFeGVjdXRpb24iLCJkZWxheSIsInVuc3RhYmxlX3dyYXBDYWxsYmFjayIsIlJlYWN0UHJvcFR5cGVzU2VjcmV0IiwiZW1wdHlGdW5jdGlvbiIsImVtcHR5RnVuY3Rpb25XaXRoUmVzZXQiLCJyZXNldFdhcm5pbmdDYWNoZSIsInNoaW0iLCJwcm9wTmFtZSIsImNvbXBvbmVudE5hbWUiLCJwcm9wRnVsbE5hbWUiLCJzZWNyZXQiLCJnZXRTaGltIiwiUmVhY3RQcm9wVHlwZXMiLCJib29sIiwic3RyaW5nIiwic3ltYm9sIiwiYW55IiwiYXJyYXlPZiIsImluc3RhbmNlT2YiLCJvYmplY3RPZiIsIm9uZU9mIiwib25lT2ZUeXBlIiwic2hhcGUiLCJleGFjdCIsImNoZWNrUHJvcFR5cGVzIiwiQXN5bmNNb2RlIiwiQ29uY3VycmVudE1vZGUiLCJDb250ZXh0Q29uc3VtZXIiLCJDb250ZXh0UHJvdmlkZXIiLCJMYXp5IiwiUG9ydGFsIiwiaXNBc3luY01vZGUiLCJpc0NvbmN1cnJlbnRNb2RlIiwiaXNDb250ZXh0Q29uc3VtZXIiLCJpc0NvbnRleHRQcm92aWRlciIsImlzRWxlbWVudCIsImlzRm9yd2FyZFJlZiIsImlzRnJhZ21lbnQiLCJpc0xhenkiLCJpc1BvcnRhbCIsImlzUHJvZmlsZXIiLCJpc1N0cmljdE1vZGUiLCJpc1N1c3BlbnNlIiwiaXNWYWxpZEVsZW1lbnRUeXBlIiwidHlwZU9mIiwiQ1NTUnVsZUxpc3QiLCJDU1NTdHlsZURlY2xhcmF0aW9uIiwiQ1NTVmFsdWVMaXN0IiwiQ2xpZW50UmVjdExpc3QiLCJET01SZWN0TGlzdCIsIkRPTVN0cmluZ0xpc3QiLCJET01Ub2tlbkxpc3QiLCJEYXRhVHJhbnNmZXJJdGVtTGlzdCIsIkZpbGVMaXN0IiwiSFRNTEFsbENvbGxlY3Rpb24iLCJIVE1MQ29sbGVjdGlvbiIsIkhUTUxGb3JtRWxlbWVudCIsIkhUTUxTZWxlY3RFbGVtZW50IiwiTWVkaWFMaXN0IiwiTWltZVR5cGVBcnJheSIsIk5hbWVkTm9kZU1hcCIsIk5vZGVMaXN0IiwiUGFpbnRSZXF1ZXN0TGlzdCIsIlBsdWdpbiIsIlBsdWdpbkFycmF5IiwiU1ZHTGVuZ3RoTGlzdCIsIlNWR051bWJlckxpc3QiLCJTVkdQYXRoU2VnTGlzdCIsIlNWR1BvaW50TGlzdCIsIlNWR1N0cmluZ0xpc3QiLCJTVkdUcmFuc2Zvcm1MaXN0IiwiU291cmNlQnVmZmVyTGlzdCIsIlN0eWxlU2hlZXRMaXN0IiwiVGV4dFRyYWNrQ3VlTGlzdCIsIlRleHRUcmFja0xpc3QiLCJUb3VjaExpc3QiLCJhZGRUb1Vuc2NvcGFibGVzIiwiSXRlcmF0b3JzIiwiZGVmaW5lSXRlcmF0b3IiLCJzZXRJbnRlcm5hbFN0YXRlIiwiaXRlcmF0ZWQiLCJraW5kIiwiQXJndW1lbnRzIiwiY2xhc3NvZiIsIlVOU0NPUEFCTEVTIiwiQXJyYXlQcm90b3R5cGUiLCJzaGFtIiwib2JqZWN0S2V5cyIsImludGVybmFsT2JqZWN0S2V5cyIsInRvTGVuZ3RoIiwidG9BYnNvbHV0ZUluZGV4IiwiY3JlYXRlTWV0aG9kIiwiSVNfSU5DTFVERVMiLCIkdGhpcyIsImVsIiwiZnJvbUluZGV4IiwiaW5jbHVkZXMiLCJ0b0ludGVnZXIiLCJtYXgiLCJpbnRlZ2VyIiwiZ2V0QnVpbHRJbiIsIiQiLCJjcmVhdGVJdGVyYXRvckNvbnN0cnVjdG9yIiwic2V0UHJvdG90eXBlT2YiLCJzZXRUb1N0cmluZ1RhZyIsInJlZGVmaW5lIiwiSXRlcmF0b3JzQ29yZSIsInJldHVyblRoaXMiLCJJdGVyYWJsZSIsIk5BTUUiLCJJdGVyYXRvckNvbnN0cnVjdG9yIiwiREVGQVVMVCIsIklTX1NFVCIsIkZPUkNFRCIsIkN1cnJlbnRJdGVyYXRvclByb3RvdHlwZSIsIm1ldGhvZHMiLCJLRVkiLCJnZXRJdGVyYXRpb25NZXRob2QiLCJLSU5EIiwiZGVmYXVsdEl0ZXJhdG9yIiwiSXRlcmFibGVQcm90b3R5cGUiLCJJTkNPUlJFQ1RfVkFMVUVTX05BTUUiLCJuYXRpdmVJdGVyYXRvciIsImFueU5hdGl2ZUl0ZXJhdG9yIiwiZW50cmllcyIsInByb3RvIiwiZm9yY2VkIiwiY29weUNvbnN0cnVjdG9yUHJvcGVydGllcyIsImlzRm9yY2VkIiwidGFyZ2V0UHJvcGVydHkiLCJzb3VyY2VQcm9wZXJ0eSIsIlRBUkdFVCIsIkdMT0JBTCIsInN0YXQiLCJuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSIsIk5BU0hPUk5fQlVHIiwiMSIsIm93bktleXMiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JNb2R1bGUiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzTW9kdWxlIiwicmVwbGFjZW1lbnQiLCJmZWF0dXJlIiwiZGV0ZWN0aW9uIiwibm9ybWFsaXplIiwiUE9MWUZJTEwiLCJOQVRJVkUiLCJhUG9zc2libGVQcm90b3R5cGUiLCJDT1JSRUNUX1NFVFRFUiIsIlJlYWN0UmVkdXhDb250ZXh0IiwiYmF0Y2giLCJudWxsTGlzdGVuZXJzIiwibm90aWZ5IiwiY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uIiwiZmlyc3QiLCJsaXN0ZW5lciIsImxpc3RlbmVycyIsInN1YnNjcmliZSIsImlzU3Vic2NyaWJlZCIsInByZXYiLCJTdWJzY3JpcHRpb24iLCJwYXJlbnRTdWIiLCJ1bnN1YnNjcmliZSIsImhhbmRsZUNoYW5nZVdyYXBwZXIiLCJhZGROZXN0ZWRTdWIiLCJ0cnlTdWJzY3JpYmUiLCJub3RpZnlOZXN0ZWRTdWJzIiwib25TdGF0ZUNoYW5nZSIsIkJvb2xlYW4iLCJ0cnlVbnN1YnNjcmliZSIsImNvbnRleHRWYWx1ZSIsInN1YnNjcmlwdGlvbiIsInByZXZpb3VzU3RhdGUiLCJnZXRTdGF0ZSIsIkNvbnRleHQiLCJfZXh0ZW5kcyIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZXhjbHVkZWQiLCJzb3VyY2VLZXlzIiwidXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCIsInJhbmRvbVN0cmluZyIsIkFjdGlvblR5cGVzIiwiSU5JVCIsIlJFUExBQ0UiLCJQUk9CRV9VTktOT1dOX0FDVElPTiIsImlzUGxhaW5PYmplY3QiLCJ1c2VSZWR1eENvbnRleHQiLCJjcmVhdGVTdG9yZUhvb2siLCJ1c2VEZWZhdWx0UmVkdXhDb250ZXh0IiwidXNlU3RvcmUiLCJjcmVhdGVEaXNwYXRjaEhvb2siLCJ1c2VEZWZhdWx0U3RvcmUiLCJ1c2VEaXNwYXRjaCIsInJlZkVxdWFsaXR5IiwiY3JlYXRlU2VsZWN0b3JIb29rIiwic2VsZWN0b3IiLCJlcXVhbGl0eUZuIiwiX3VzZVJlZHV4Q29udGV4dCIsImNvbnRleHRTdWIiLCJzZWxlY3RlZFN0YXRlIiwiZm9yY2VSZW5kZXIiLCJsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yIiwibGF0ZXN0U2VsZWN0b3IiLCJsYXRlc3RTZWxlY3RlZFN0YXRlIiwiY2hlY2tGb3JVcGRhdGVzIiwibmV3U2VsZWN0ZWRTdGF0ZSIsInVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uIiwibmV3QmF0Y2giLCJ1c2VTZWxlY3RvciIsImluaWNpYWxTdGF0ZSIsInVzZXIiLCJhdXRoVG9rZW5TdGF0dXMiLCJub3RlcyIsImNyZWF0ZVN0b3JlIiwicmVkdWNlciIsInByZWxvYWRlZFN0YXRlIiwiZW5oYW5jZXIiLCJfcmVmMiIsImN1cnJlbnRSZWR1Y2VyIiwiY3VycmVudFN0YXRlIiwiY3VycmVudExpc3RlbmVycyIsIm5leHRMaXN0ZW5lcnMiLCJpc0Rpc3BhdGNoaW5nIiwiZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycyIsInJlcGxhY2VSZWR1Y2VyIiwibmV4dFJlZHVjZXIiLCJvdXRlclN1YnNjcmliZSIsIm9ic2VydmVyIiwib2JzZXJ2ZVN0YXRlIiwiJCRvYnNlcnZhYmxlIiwiY29weVN0YXRlIiwiY29weVVzZXIiLCJzZXRVc2VyIiwic2V0QXV0aFRva2VuU3RhdHVzIiwiY29weU5vdGVzIiwibmV3Tm90ZSIsImltcG9ydGFudCIsInVuc2hpZnQiLCJhZGROb3RlIiwiaXNBYnNvbHV0ZSIsInBhdGhuYW1lIiwic3BsaWNlT25lIiwibGlzdCIsInJlc29sdmVQYXRobmFtZSIsImhhc1RyYWlsaW5nU2xhc2giLCJ0b1BhcnRzIiwiZnJvbVBhcnRzIiwiaXNUb0FicyIsImlzRnJvbUFicyIsIm11c3RFbmRBYnMiLCJ1cCIsInZhbHVlRXF1YWwiLCJldmVyeSIsIml0ZW0iLCJhVmFsdWUiLCJiVmFsdWUiLCJpbnZhcmlhbnQiLCJhZGRMZWFkaW5nU2xhc2giLCJzdHJpcExlYWRpbmdTbGFzaCIsInN0cmlwQmFzZW5hbWUiLCJoYXNCYXNlbmFtZSIsInN0cmlwVHJhaWxpbmdTbGFzaCIsImNyZWF0ZVBhdGgiLCJoYXNoIiwiY3JlYXRlTG9jYXRpb24iLCJjdXJyZW50TG9jYXRpb24iLCJoYXNoSW5kZXgiLCJzZWFyY2hJbmRleCIsInBhcnNlUGF0aCIsImRlY29kZVVSSSIsIlVSSUVycm9yIiwiY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIiLCJwcm9tcHQiLCJzZXRQcm9tcHQiLCJuZXh0UHJvbXB0IiwiY29uZmlybVRyYW5zaXRpb25UbyIsImdldFVzZXJDb25maXJtYXRpb24iLCJhcHBlbmRMaXN0ZW5lciIsImlzQWN0aXZlIiwibm90aWZ5TGlzdGVuZXJzIiwiX2xlbiIsIl9rZXkiLCJjYW5Vc2VET00iLCJnZXRDb25maXJtYXRpb24iLCJjb25maXJtIiwiZ2V0SGlzdG9yeVN0YXRlIiwiaGlzdG9yeSIsImNyZWF0ZUJyb3dzZXJIaXN0b3J5IiwiZ2xvYmFsSGlzdG9yeSIsImNhblVzZUhpc3RvcnkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciIsIl9wcm9wcyIsIl9wcm9wcyRmb3JjZVJlZnJlc2giLCJmb3JjZVJlZnJlc2giLCJfcHJvcHMkZ2V0VXNlckNvbmZpcm0iLCJfcHJvcHMka2V5TGVuZ3RoIiwia2V5TGVuZ3RoIiwiYmFzZW5hbWUiLCJnZXRET01Mb2NhdGlvbiIsImhpc3RvcnlTdGF0ZSIsIl93aW5kb3ckbG9jYXRpb24iLCJjcmVhdGVLZXkiLCJ0cmFuc2l0aW9uTWFuYWdlciIsIm5leHRTdGF0ZSIsImhhbmRsZVBvcFN0YXRlIiwiZXZlbnQiLCJpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50IiwiaGFuZGxlUG9wIiwiaGFuZGxlSGFzaENoYW5nZSIsImZvcmNlTmV4dFBvcCIsIm9rIiwiZnJvbUxvY2F0aW9uIiwidG9Mb2NhdGlvbiIsInRvSW5kZXgiLCJhbGxLZXlzIiwiZGVsdGEiLCJnbyIsInJldmVydFBvcCIsImluaXRpYWxMb2NhdGlvbiIsImNyZWF0ZUhyZWYiLCJsaXN0ZW5lckNvdW50IiwiY2hlY2tET01MaXN0ZW5lcnMiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiaXNCbG9ja2VkIiwicHVzaFN0YXRlIiwicHJldkluZGV4IiwibmV4dEtleXMiLCJyZXBsYWNlU3RhdGUiLCJnb0JhY2siLCJnb0ZvcndhcmQiLCJibG9jayIsInVuYmxvY2siLCJsaXN0ZW4iLCJ1bmxpc3RlbiIsIkhhc2hQYXRoQ29kZXJzIiwiaGFzaGJhbmciLCJlbmNvZGVQYXRoIiwiZGVjb2RlUGF0aCIsIm5vc2xhc2giLCJzbGFzaCIsInN0cmlwSGFzaCIsImdldEhhc2hQYXRoIiwicmVwbGFjZUhhc2hQYXRoIiwiY3JlYXRlSGFzaEhpc3RvcnkiLCJfcHJvcHMkaGFzaFR5cGUiLCJoYXNoVHlwZSIsIl9IYXNoUGF0aENvZGVycyRoYXNoVCIsImlnbm9yZVBhdGgiLCJlbmNvZGVkUGF0aCIsInByZXZMb2NhdGlvbiIsImFsbFBhdGhzIiwibGFzdEluZGV4T2YiLCJiYXNlVGFnIiwicXVlcnlTZWxlY3RvciIsImdldEF0dHJpYnV0ZSIsInB1c2hIYXNoUGF0aCIsIm5leHRQYXRocyIsImNsYW1wIiwibG93ZXJCb3VuZCIsInVwcGVyQm91bmQiLCJjcmVhdGVNZW1vcnlIaXN0b3J5IiwiX3Byb3BzJGluaXRpYWxFbnRyaWVzIiwiaW5pdGlhbEVudHJpZXMiLCJfcHJvcHMkaW5pdGlhbEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZW50cnkiLCJuZXh0SW5kZXgiLCJuZXh0RW50cmllcyIsImNhbkdvIiwiaGlzdG9yeUNvbnRleHQiLCJjcmVhdGVOYW1lZENvbnRleHQiLCJSb3V0ZXIiLCJjb21wdXRlUm9vdE1hdGNoIiwicGFyYW1zIiwiaXNFeGFjdCIsIl9wZW5kaW5nTG9jYXRpb24iLCJSb3V0ZXJDb250ZXh0Iiwic3RhdGljQ29udGV4dCIsIkhpc3RvcnlDb250ZXh0IiwiTGlmZWN5Y2xlIiwib25Nb3VudCIsInByZXZQcm9wcyIsIm9uVW5tb3VudCIsImNhY2hlIiwiY2FjaGVDb3VudCIsImdlbmVyYXRlUGF0aCIsImdlbmVyYXRvciIsImNvbXBpbGVQYXRoIiwiUmVkaXJlY3QiLCJjb21wdXRlZE1hdGNoIiwibWF0Y2hQYXRoIiwibWF0Y2hlZCIsImNhY2hlS2V5IiwicmVnZXhwIiwiUm91dGUiLCJjcmVhdGVVUkwiLCJzdGF0aWNIYW5kbGVyIiwibWV0aG9kTmFtZSIsIm5vb3AiLCJTd2l0Y2giLCJ1c2VSb3V0ZU1hdGNoIiwiQnJvd3NlclJvdXRlciIsImNyZWF0ZUhpc3RvcnkiLCJyZXNvbHZlVG9Mb2NhdGlvbiIsIm5vcm1hbGl6ZVRvTG9jYXRpb24iLCJmb3J3YXJkUmVmU2hpbSIsIkxpbmtBbmNob3IiLCJpbm5lclJlZiIsIm5hdmlnYXRlIiwicmVzdCIsImV4IiwiaXNNb2RpZmllZEV2ZW50IiwiZm9yd2FyZGVkUmVmIiwiTGluayIsImFyaWFDdXJyZW50IiwiYWN0aXZlQ2xhc3NOYW1lIiwiYWN0aXZlU3R5bGUiLCJjbGFzc05hbWVQcm9wIiwiY2xhc3NOYW1lIiwiaXNBY3RpdmVQcm9wIiwibG9jYXRpb25Qcm9wIiwic3R5bGVQcm9wIiwiZXNjYXBlZFBhdGgiLCJjbGFzc25hbWVzIiwiam9pbkNsYXNzbmFtZXMiLCJpc0RldmVsb3BtZW50IiwiaG9zdCIsInN0YXJ0c1dpdGgiLCJicm93c2VyQ29uZmlnIiwic2VydmVyT3JpZ2luIiwicHJvdG9jb2wiLCJob3N0bmFtZSIsImFzeW5jIiwiY2hlY2tUb2tlbiIsImxvY1N0clRva2VuIiwibG9jYWxTdG9yYWdlIiwiZ2V0SXRlbSIsImhlYWRlcnMiLCJhcGlVcmwiLCJmZXRjaCIsImpzb24iLCJNYWluUGFnZSIsIkJ1dHRvbiIsImNvdW50ZXIiLCJhdHRycyIsImNscyIsIm1vZGUxIiwibW9kZTIiLCJpbm5lckNvbnRlbnQiLCJjcmVhdGVTaWduIiwic2lnbiIsIlRvcE5hdkxpbmsiLCJsYWJlbCIsIlRvcE5hdkVudHJhbmNlIiwiVG9wTmF2aWdhdGlvbiIsInJlZ0J0biIsImVudGVyQnRuIiwid3JhcHBlciIsIkF1dGhTcGxpdENvbnRhaW5lciIsImxlZnRQYXJ0IiwicmlnaHRQYXJ0IiwiaXNNZXJnZWFibGVPYmplY3QiLCJpc05vbk51bGxPYmplY3QiLCJzdHJpbmdWYWx1ZSIsIlJFQUNUX0VMRU1FTlRfVFlQRSIsImlzUmVhY3RFbGVtZW50IiwiaXNTcGVjaWFsIiwiY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQiLCJjbG9uZSIsImRlZXBtZXJnZSIsImRlZmF1bHRBcnJheU1lcmdlIiwiYXJyYXlNZXJnZSIsInNvdXJjZUlzQXJyYXkiLCJkZXN0aW5hdGlvbiIsIm1lcmdlT2JqZWN0IiwiZGVlcG1lcmdlXzEiLCJvYmplY3RQcm90byIsIm5hdGl2ZU9iamVjdFRvU3RyaW5nIiwic3ltVG9TdHJpbmdUYWciLCJnZXRSYXdUYWciLCJpc093biIsInVubWFza2VkIiwib2JqZWN0VG9TdHJpbmciLCJiYXNlR2V0VGFnIiwib3ZlckFyZyIsInRyYW5zZm9ybSIsImdldFByb3RvdHlwZSIsImlzT2JqZWN0TGlrZSIsImZ1bmNQcm90byIsImZ1bmNUb1N0cmluZyIsIm9iamVjdEN0b3JTdHJpbmciLCJDdG9yIiwibGlzdENhY2hlQ2xlYXIiLCJfX2RhdGFfXyIsImVxIiwib3RoZXIiLCJhc3NvY0luZGV4T2YiLCJsaXN0Q2FjaGVEZWxldGUiLCJsaXN0Q2FjaGVHZXQiLCJsaXN0Q2FjaGVIYXMiLCJsaXN0Q2FjaGVTZXQiLCJMaXN0Q2FjaGUiLCJzdGFja0NsZWFyIiwic3RhY2tEZWxldGUiLCJzdGFja0dldCIsInN0YWNrSGFzIiwiaXNGdW5jdGlvbiIsImNvcmVKc0RhdGEiLCJtYXNrU3JjS2V5IiwiaXNNYXNrZWQiLCJ0b1NvdXJjZSIsInJlSXNIb3N0Q3RvciIsInJlSXNOYXRpdmUiLCJiYXNlSXNOYXRpdmUiLCJnZXROYXRpdmUiLCJuYXRpdmVDcmVhdGUiLCJoYXNoQ2xlYXIiLCJoYXNoRGVsZXRlIiwiaGFzaEdldCIsImhhc2hIYXMiLCJoYXNoU2V0IiwiSGFzaCIsIm1hcENhY2hlQ2xlYXIiLCJpc0tleWFibGUiLCJnZXRNYXBEYXRhIiwibWFwQ2FjaGVEZWxldGUiLCJtYXBDYWNoZUdldCIsIm1hcENhY2hlSGFzIiwibWFwQ2FjaGVTZXQiLCJNYXBDYWNoZSIsInN0YWNrU2V0IiwicGFpcnMiLCJMQVJHRV9BUlJBWV9TSVpFIiwiU3RhY2siLCJhcnJheUVhY2giLCJpdGVyYXRlZSIsImJhc2VBc3NpZ25WYWx1ZSIsImFzc2lnblZhbHVlIiwib2JqVmFsdWUiLCJjb3B5T2JqZWN0IiwiY3VzdG9taXplciIsImlzTmV3IiwiYmFzZVRpbWVzIiwiYmFzZUlzQXJndW1lbnRzIiwiaXNBcmd1bWVudHMiLCJyZUlzVWludCIsImlzSW5kZXgiLCJpc0xlbmd0aCIsInR5cGVkQXJyYXlUYWdzIiwiYmFzZUlzVHlwZWRBcnJheSIsImJhc2VVbmFyeSIsIm5vZGVJc1R5cGVkQXJyYXkiLCJpc1R5cGVkQXJyYXkiLCJhcnJheUxpa2VLZXlzIiwiaW5oZXJpdGVkIiwiaXNBcnIiLCJpc0FyZyIsImlzQnVmZiIsImlzVHlwZSIsInNraXBJbmRleGVzIiwiaXNQcm90b3R5cGUiLCJuYXRpdmVLZXlzIiwiYmFzZUtleXMiLCJpc0FycmF5TGlrZSIsImJhc2VBc3NpZ24iLCJuYXRpdmVLZXlzSW4iLCJiYXNlS2V5c0luIiwiaXNQcm90byIsImtleXNJbiIsImJhc2VBc3NpZ25JbiIsImNvcHlBcnJheSIsImFycmF5RmlsdGVyIiwicHJlZGljYXRlIiwicmVzSW5kZXgiLCJzdHViQXJyYXkiLCJuYXRpdmVHZXRTeW1ib2xzIiwiZ2V0U3ltYm9scyIsImNvcHlTeW1ib2xzIiwiYXJyYXlQdXNoIiwiZ2V0U3ltYm9sc0luIiwiY29weVN5bWJvbHNJbiIsImJhc2VHZXRBbGxLZXlzIiwia2V5c0Z1bmMiLCJzeW1ib2xzRnVuYyIsImdldEFsbEtleXMiLCJnZXRBbGxLZXlzSW4iLCJEYXRhVmlldyIsImRhdGFWaWV3Q3RvclN0cmluZyIsIm1hcEN0b3JTdHJpbmciLCJwcm9taXNlQ3RvclN0cmluZyIsInNldEN0b3JTdHJpbmciLCJ3ZWFrTWFwQ3RvclN0cmluZyIsImdldFRhZyIsIkFycmF5QnVmZmVyIiwiY3RvclN0cmluZyIsImluaXRDbG9uZUFycmF5IiwiVWludDhBcnJheSIsImNsb25lQXJyYXlCdWZmZXIiLCJhcnJheUJ1ZmZlciIsImJ5dGVMZW5ndGgiLCJjbG9uZURhdGFWaWV3IiwiZGF0YVZpZXciLCJieXRlT2Zmc2V0IiwicmVGbGFncyIsImNsb25lUmVnRXhwIiwibGFzdEluZGV4Iiwic3ltYm9sUHJvdG8iLCJzeW1ib2xWYWx1ZU9mIiwiY2xvbmVTeW1ib2wiLCJjbG9uZVR5cGVkQXJyYXkiLCJ0eXBlZEFycmF5IiwiaW5pdENsb25lQnlUYWciLCJvYmplY3RDcmVhdGUiLCJiYXNlQ3JlYXRlIiwiaW5pdENsb25lT2JqZWN0IiwiYmFzZUlzTWFwIiwibm9kZUlzTWFwIiwiaXNNYXAiLCJiYXNlSXNTZXQiLCJub2RlSXNTZXQiLCJpc1NldCIsImNsb25lYWJsZVRhZ3MiLCJiYXNlQ2xvbmUiLCJiaXRtYXNrIiwiaXNGbGF0IiwiaXNGdWxsIiwiaXNGdW5jIiwic3RhY2tlZCIsInN1YlZhbHVlIiwiYXJyYXlNYXAiLCJpc1N5bWJvbCIsIm1lbW9pemUiLCJyZXNvbHZlciIsIm1lbW9pemVkIiwibWVtb2l6ZUNhcHBlZCIsInJlUHJvcE5hbWUiLCJyZUVzY2FwZUNoYXIiLCJzdHJpbmdUb1BhdGgiLCJxdW90ZSIsInN1YlN0cmluZyIsInRvS2V5Iiwic3ltYm9sVG9TdHJpbmciLCJiYXNlVG9TdHJpbmciLCJ0b1BhdGgiLCJjbG9uZURlZXAiLCJDTE9ORV9ERUVQX0ZMQUciLCJpc0VtcHR5QXJyYXkiLCJpc0ludGVnZXIiLCJOdW1iZXIiLCJpc1N0cmluZyIsImlzRW1wdHlDaGlsZHJlbiIsImlzUHJvbWlzZSIsImdldEluIiwiZGVmIiwic2V0SW4iLCJyZXNWYWwiLCJwYXRoQXJyYXkiLCJjdXJyZW50UGF0aCIsImN1cnJlbnRPYmoiLCJuZXh0UGF0aCIsInNldE5lc3RlZE9iamVjdFZhbHVlcyIsInJlc3BvbnNlIiwiRm9ybWlrQ29udGV4dCIsIkZvcm1pa1Byb3ZpZGVyIiwiRm9ybWlrQ29uc3VtZXIiLCJ1c2VGb3JtaWtDb250ZXh0IiwiZm9ybWlrIiwiZm9ybWlrUmVkdWNlciIsIm1zZyIsInRvdWNoZWQiLCJpc0VxdWFsIiwiZXJyb3JzIiwiaXNTdWJtaXR0aW5nIiwiaXNWYWxpZGF0aW5nIiwic3VibWl0Q291bnQiLCJlbXB0eUVycm9ycyIsImVtcHR5VG91Y2hlZCIsInVzZUZvcm1payIsInZhbGlkYXRlT25DaGFuZ2UiLCJ2YWxpZGF0ZU9uQmx1ciIsInZhbGlkYXRlT25Nb3VudCIsImlzSW5pdGlhbFZhbGlkIiwiZW5hYmxlUmVpbml0aWFsaXplIiwib25TdWJtaXQiLCJpbml0aWFsVmFsdWVzIiwiaW5pdGlhbEVycm9ycyIsImluaXRpYWxUb3VjaGVkIiwiaW5pdGlhbFN0YXR1cyIsImZpZWxkUmVnaXN0cnkiLCJydW5WYWxpZGF0ZUhhbmRsZXIiLCJtYXliZVByb21pc2VkRXJyb3JzIiwiYWN0dWFsRXhjZXB0aW9uIiwicnVuVmFsaWRhdGlvblNjaGVtYSIsInZhbGlkYXRpb25TY2hlbWEiLCJzY2hlbWEiLCJmaWVsZCIsInN5bmMiLCJ2YWxpZGF0ZURhdGEiLCJwcmVwYXJlRGF0YUZvclZhbGlkYXRpb24iLCJhYm9ydEVhcmx5IiwidmFsaWRhdGVZdXBTY2hlbWEiLCJ5dXBFcnJvciIsInl1cFRvRm9ybUVycm9ycyIsInJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uIiwicnVuRmllbGRMZXZlbFZhbGlkYXRpb25zIiwiZmllbGRLZXlzV2l0aFZhbGlkYXRpb24iLCJmaWVsZFZhbGlkYXRpb25zIiwiZmllbGRFcnJvcnNMaXN0IiwiY3VyciIsInJ1bkFsbFZhbGlkYXRpb25zIiwiZmllbGRFcnJvcnMiLCJzY2hlbWFFcnJvcnMiLCJ2YWxpZGF0ZUVycm9ycyIsInZhbGlkYXRlRm9ybVdpdGhMb3dQcmlvcml0eSIsInVzZUV2ZW50Q2FsbGJhY2siLCJjb21iaW5lZEVycm9ycyIsInZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkiLCJyZXNldEZvcm0iLCJkaXNwYXRjaEZuIiwibWF5YmVQcm9taXNlZE9uUmVzZXQiLCJ2YWxpZGF0ZUZpZWxkIiwibWF5YmVQcm9taXNlIiwicmVnaXN0ZXJGaWVsZCIsInZhbGlkYXRlIiwidW5yZWdpc3RlckZpZWxkIiwic2V0VG91Y2hlZCIsInNob3VsZFZhbGlkYXRlIiwic2V0RXJyb3JzIiwic2V0VmFsdWVzIiwic2V0RmllbGRFcnJvciIsInNldEZpZWxkVmFsdWUiLCJleGVjdXRlQ2hhbmdlIiwiZXZlbnRPclRleHRWYWx1ZSIsIm1heWJlUGF0aCIsInBhcnNlZCIsInBhcnNlRmxvYXQiLCJjdXJyZW50VmFsdWUiLCJjdXJyZW50QXJyYXlPZlZhbHVlcyIsImlzVmFsdWVJbkFycmF5IiwidmFsdWVQcm9wIiwiZ2V0VmFsdWVGb3JDaGVja2JveCIsImdldFNlbGVjdGVkVmFsdWVzIiwiaGFuZGxlQ2hhbmdlIiwic2V0RmllbGRUb3VjaGVkIiwiZXhlY3V0ZUJsdXIiLCJvdXRlckhUTUwiLCJoYW5kbGVCbHVyIiwic2V0Rm9ybWlrU3RhdGUiLCJzdGF0ZU9yQ2IiLCJzZXRTdGF0dXMiLCJzZXRTdWJtaXR0aW5nIiwic3VibWl0Rm9ybSIsImlzSW5zdGFuY2VPZkVycm9yIiwicHJvbWlzZU9yVW5kZWZpbmVkIiwiZXhlY3V0ZVN1Ym1pdCIsIl9lcnJvcnMiLCJoYW5kbGVTdWJtaXQiLCJyZWFzb24iLCJpbXBlcmF0aXZlTWV0aG9kcyIsInZhbGlkYXRlRm9ybSIsImhhbmRsZVJlc2V0IiwiZ2V0RmllbGRNZXRhIiwiaW5pdGlhbEVycm9yIiwiZ2V0RmllbGRIZWxwZXJzIiwic2V0RXJyb3IiLCJnZXRGaWVsZFByb3BzIiwiaXNBbk9iamVjdCIsIm5hbWVPck9wdGlvbnMiLCJ2YWx1ZVN0YXRlIiwib25DaGFuZ2UiLCJvbkJsdXIiLCJkaXJ0eSIsImlzVmFsaWQiLCJGb3JtaWsiLCJmb3JtaWtiYWciLCJzaG91bGRDbG9uZSIsIkZvcm0iLCJfYWN0aW9uIiwib25SZXNldCIsImNvbm5lY3QiLCJDb21wIiwiY29tcG9uZW50RGlzcGxheU5hbWUiLCJpbnNlcnQiLCJjb3B5QXJyYXlMaWtlIiwiYXJyYXlMaWtlIiwibWF4SW5kZXgiLCJwYXJzZUludCIsIkZpZWxkQXJyYXlJbm5lciIsInVwZGF0ZUFycmF5RmllbGQiLCJ1cGRhdGVFcnJvcnMiLCJhbHRlckVycm9ycyIsInVwZGF0ZVRvdWNoZWQiLCJhbHRlclRvdWNoZWQiLCJwcmV2U3RhdGUiLCJmaWVsZEVycm9yIiwiZmllbGRUb3VjaGVkIiwiaGFuZGxlUHVzaCIsInN3YXAiLCJpbmRleEEiLCJoYW5kbGVTd2FwIiwibW92ZSIsImhhbmRsZU1vdmUiLCJoYW5kbGVJbnNlcnQiLCJoYW5kbGVSZXBsYWNlIiwiaGFuZGxlVW5zaGlmdCIsImhhbmRsZVJlbW92ZSIsInJlbW92ZSIsInRtcCIsImFycmF5SGVscGVycyIsInJlc3RPZkZvcm1payIsIkZvcm1IZWFkZXIiLCJUYWciLCJoMiIsImgzIiwiaW5kZW50IiwiX2RlZmluZVByb3BlcnRpZXMiLCJiYXNlSGFzIiwicmVJc0RlZXBQcm9wIiwicmVJc1BsYWluUHJvcCIsImlzS2V5IiwiY2FzdFBhdGgiLCJoYXNQYXRoIiwiaGFzRnVuYyIsImNsb25lRGVlcFdpdGgiLCJpdGVyYXRvclRvQXJyYXkiLCJtYXBUb0FycmF5Iiwic2V0VG9BcnJheSIsImFzY2lpVG9BcnJheSIsInJlSGFzVW5pY29kZSIsImhhc1VuaWNvZGUiLCJyc0FzdHJhbCIsInJzQ29tYm8iLCJyc0ZpdHoiLCJyc05vbkFzdHJhbCIsInJzUmVnaW9uYWwiLCJyc1N1cnJQYWlyIiwicmVPcHRNb2QiLCJyc1NlcSIsInJzU3ltYm9sIiwicmVVbmljb2RlIiwidW5pY29kZVRvQXJyYXkiLCJzdHJpbmdUb0FycmF5IiwiYmFzZVZhbHVlcyIsInN5bUl0ZXJhdG9yIiwiZXJyb3JUb1N0cmluZyIsInJlZ0V4cFRvU3RyaW5nIiwiU1lNQk9MX1JFR0VYUCIsInByaW50U2ltcGxlVmFsdWUiLCJxdW90ZVN0cmluZ3MiLCJwcmludE51bWJlciIsInRvSVNPU3RyaW5nIiwicHJpbnRWYWx1ZSIsIm1peGVkIiwicmVxdWlyZWQiLCJub3RPbmVPZiIsIm5vdFR5cGUiLCJvcmlnaW5hbFZhbHVlIiwiaXNDYXN0IiwiZGVmaW5lZCIsImxvd2VyY2FzZSIsInVwcGVyY2FzZSIsImxlc3NUaGFuIiwibW9yZVRoYW4iLCJub3RFcXVhbCIsInBvc2l0aXZlIiwibmVnYXRpdmUiLCJub1Vua25vd24iLCJfX2lzWXVwU2NoZW1hX18iLCJDb25kaXRpb24iLCJvdGhlcndpc2UiLCJfbGVuMiIsIl9rZXkyIiwiYnJhbmNoIiwiaXNTY2hlbWEiLCJzdHJSZWciLCJfIiwiVmFsaWRhdGlvbkVycm9yIiwiaW5uZXIiLCJjYXB0dXJlU3RhY2tUcmFjZSIsImlzRXJyb3IiLCJmb3JtYXRFcnJvciIsInByb3BhZ2F0ZUVycm9ycyIsImVuZEVhcmx5IiwiY29sbGVjdEVycm9ycyIsInZhbGlkYXRpb25zIiwic29ydCIsInVud3JhcEVycm9yIiwicHJvbWlzZXMiLCJmdWxmaWxsZWQiLCJzZXR0bGVkIiwicmVzdWx0cyIsIm5lc3RlZEVycm9ycyIsInJ1blZhbGlkYXRpb25zIiwiX3JlZjMiLCJjcmVhdGVCYXNlRm9yIiwiYmFzZUZvciIsImZyb21SaWdodCIsIml0ZXJhYmxlIiwiYmFzZUZvck93biIsInNldENhY2hlQWRkIiwic2V0Q2FjaGVIYXMiLCJTZXRDYWNoZSIsImFycmF5U29tZSIsImNhY2hlSGFzIiwiZXF1YWxBcnJheXMiLCJlcXVhbEZ1bmMiLCJpc1BhcnRpYWwiLCJhcnJMZW5ndGgiLCJvdGhMZW5ndGgiLCJzZWVuIiwiYXJyVmFsdWUiLCJvdGhWYWx1ZSIsImNvbXBhcmVkIiwib3RoSW5kZXgiLCJlcXVhbEJ5VGFnIiwiY29udmVydCIsImVxdWFsT2JqZWN0cyIsIm9ialByb3BzIiwib2JqTGVuZ3RoIiwic2tpcEN0b3IiLCJvYmpDdG9yIiwib3RoQ3RvciIsImJhc2VJc0VxdWFsRGVlcCIsIm9iaklzQXJyIiwib3RoSXNBcnIiLCJvYmpUYWciLCJvdGhUYWciLCJvYmpJc09iaiIsIm90aElzT2JqIiwiaXNTYW1lVGFnIiwib2JqSXNXcmFwcGVkIiwib3RoSXNXcmFwcGVkIiwib2JqVW53cmFwcGVkIiwib3RoVW53cmFwcGVkIiwiYmFzZUlzRXF1YWwiLCJiYXNlSXNNYXRjaCIsIm1hdGNoRGF0YSIsIm5vQ3VzdG9taXplciIsInNyY1ZhbHVlIiwiQ09NUEFSRV9QQVJUSUFMX0ZMQUciLCJpc1N0cmljdENvbXBhcmFibGUiLCJnZXRNYXRjaERhdGEiLCJtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZSIsImJhc2VNYXRjaGVzIiwiYmFzZUdldCIsImJhc2VIYXNJbiIsImhhc0luIiwiYmFzZU1hdGNoZXNQcm9wZXJ0eSIsImlkZW50aXR5IiwiYmFzZVByb3BlcnR5IiwiYmFzZVByb3BlcnR5RGVlcCIsImJhc2VJdGVyYXRlZSIsIm1hcFZhbHVlcyIsInByZWZpeGVzIiwiUmVmZXJlbmNlIiwiaXNDb250ZXh0IiwiaXNWYWx1ZSIsImlzU2libGluZyIsImNhc3QiLCJkZXNjcmliZSIsImlzUmVmIiwiX19pc1l1cFJlZiIsImNyZWF0ZUVycm9yRmFjdG9yeSIsIl90ZW1wIiwiX3JlZjIkcGF0aCIsIl9yZWYyJG1lc3NhZ2UiLCJfcmVmMiR0eXBlIiwib2xkUGFyYW1zIiwibmV3UGFyYW1zIiwicmVzb2x2ZVBhcmFtcyIsImNyZWF0ZVZhbGlkYXRpb24iLCJSZWYiLCJjcmVhdGVFcnJvciIsImN0eCIsInRlc3RGbiIsInJ1blRlc3QiLCJ2YWxpZE9yRXJyb3IiLCJPUFRJT05TIiwibGFzdFBhcnQiLCJsYXN0UGFydERlYnVnIiwiX3BhcnQiLCJpbm5lclR5cGUiLCJmaWVsZHMiLCJfdHlwZSIsInBhcmVudFBhdGgiLCJSZWZTZXQiLCJDb25zdHJ1Y3RvciIsInByb3RvUHJvcHMiLCJzdGF0aWNQcm9wcyIsImRlc2NyaXB0aW9uIiwiX2l0ZXJhdG9yIiwiX2lzQXJyYXkiLCJfaSIsIl9pdGVyYXRvcjIiLCJfaXNBcnJheTIiLCJfaTIiLCJfdG9BcnJheSIsIm1lcmdlIiwibmV3SXRlbXMiLCJyZW1vdmVJdGVtcyIsIlNjaGVtYVR5cGUiLCJfZGVwcyIsIl9jb25kaXRpb25zIiwiX29wdGlvbnMiLCJyZWN1cnNpdmUiLCJfZXhjbHVzaXZlIiwiX3doaXRlbGlzdCIsIl9ibGFja2xpc3QiLCJ0ZXN0cyIsInRyYW5zZm9ybXMiLCJ3aXRoTXV0YXRpb24iLCJ0eXBlRXJyb3IiLCJfZGVmYXVsdERlZmF1bHQiLCJfbXV0YXRlIiwiX2xhYmVsIiwiX21ldGEiLCJiZWZvcmUiLCJwcmVwZW5kRGVlcCIsInNvdXJjZVZhbCIsInRhcmdldFZhbCIsIl9kZWZhdWx0IiwiX251bGxhYmxlIiwiX3R5cGVDaGVjayIsImNvbmRpdGlvbnMiLCJyZXNvbHZlZFNjaGVtYSIsIl9jYXN0IiwiYXNzZXJ0IiwiZm9ybWF0dGVkVmFsdWUiLCJmb3JtYXR0ZWRSZXN1bHQiLCJyYXdWYWx1ZSIsIl90aGlzMyIsIl92YWxpZGF0ZSIsIl92YWx1ZSIsIl90aGlzNCIsImlzU3RyaWN0IiwiX29wdGlvbiIsInZhbGlkYXRpb25QYXJhbXMiLCJpbml0aWFsVGVzdHMiLCJfdHlwZUVycm9yIiwiX3doaXRlbGlzdEVycm9yIiwiX2JsYWNrbGlzdEVycm9yIiwidmFsaWRhdGVTeW5jIiwiaXNWYWxpZFN5bmMiLCJnZXREZWZhdWx0IiwiX2lzUHJlc2VudCIsImV4Y2x1c2l2ZSIsIm5vdFJlcXVpcmVkIiwibnVsbGFibGUiLCJpc051bGxhYmxlIiwiaXNFeGNsdXNpdmUiLCJ3aGVuIiwiZGVwIiwiZW51bXMiLCJ2YWxpZHMiLCJpbnZhbGlkcyIsInN0cmlwIiwiX3N0cmlwIiwib3ZlcnJpZGVzIiwiZmluZEluZGV4IiwiX2xvb3AiLCJfYXJyIiwiX2kzIiwiX2dldEluIiwiX2k0IiwiX2FycjIiLCJfaTUiLCJfYXJyMyIsImluaGVyaXRzIiwiY3RvciIsInN1cGVyQ3RvciIsInNwZWMiLCJCb29sZWFuU2NoZW1hIiwiTWl4ZWRTY2hlbWEiLCJyRW1haWwiLCJyVXJsIiwiaXNUcmltbWVkIiwiaXNBYnNlbnQiLCJTdHJpbmdTY2hlbWEiLCJfbGVuZ3RoIiwiX21pbiIsIl9tYXgiLCJyZWdleCIsImV4Y2x1ZGVFbXB0eVN0cmluZyIsImVuc3VyZSIsIk51bWJlclNjaGVtYSIsIk5hTiIsImxlc3MiLCJtb3JlIiwidHJ1bmNhdGUiLCJyb3VuZCIsImF2YWlsIiwiaXNvUmVnIiwiaW52YWxpZERhdGUiLCJEYXRlU2NoZW1hIiwidGltZXN0YW1wIiwic3RydWN0IiwibnVtZXJpY0tleXMiLCJtaW51dGVzT2Zmc2V0IiwiVVRDIiwiaXNvUGFyc2UiLCJfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UiLCJzdHJpbmdzIiwicmF3IiwibGltaXQiLCJhcnJheVJlZHVjZSIsImFjY3VtdWxhdG9yIiwiaW5pdEFjY3VtIiwiYmFzZVByb3BlcnR5T2YiLCJkZWJ1cnJMZXR0ZXIiLCJyZUxhdGluIiwicmVDb21ib01hcmsiLCJkZWJ1cnIiLCJyZUFzY2lpV29yZCIsImFzY2lpV29yZHMiLCJyZUhhc1VuaWNvZGVXb3JkIiwiaGFzVW5pY29kZVdvcmQiLCJyc0JyZWFrUmFuZ2UiLCJyc01hdGhPcFJhbmdlIiwicnNCcmVhayIsInJzRGlnaXRzIiwicnNEaW5nYmF0IiwicnNMb3dlciIsInJzTWlzYyIsInJzVXBwZXIiLCJyc01pc2NMb3dlciIsInJzTWlzY1VwcGVyIiwicnNNb2RpZmllciIsInJzRW1vamkiLCJyZVVuaWNvZGVXb3JkIiwidW5pY29kZVdvcmRzIiwid29yZHMiLCJndWFyZCIsInJlQXBvcyIsImNyZWF0ZUNvbXBvdW5kZXIiLCJzbmFrZUNhc2UiLCJ3b3JkIiwiYmFzZVNsaWNlIiwiY2FzdFNsaWNlIiwiY3JlYXRlQ2FzZUZpcnN0IiwidXBwZXJGaXJzdCIsInN0clN5bWJvbHMiLCJjaHIiLCJ0cmFpbGluZyIsImNhcGl0YWxpemUiLCJjYW1lbENhc2UiLCJtYXBLZXlzIiwic29ydEZpZWxkcyIsImV4Y2x1ZGVzIiwiYWRkTm9kZSIsImRlcFBhdGgiLCJyZXZlcnNlIiwiSW5maW5pdHkiLCJzb21lIiwibWFrZVBhdGgiLCJfdGVtcGxhdGVPYmplY3QzIiwiX3RlbXBsYXRlT2JqZWN0MiIsIl90ZW1wbGF0ZU9iamVjdCIsIk9iamVjdFNjaGVtYSIsIl9ub2RlcyIsImRmdCIsIl9leGNsdWRlZEVkZ2VzIiwiaW50ZXJtZWRpYXRlVmFsdWUiLCJpbm5lck9wdGlvbnMiLCJfX3ZhbGlkYXRpbmciLCJpc0NoYW5nZWQiLCJwcm9wIiwiZXhpc3RzIiwiZmllbGRWYWx1ZSIsIl9mcm9tIiwiYWxpYXMiLCJmcm9tR2V0dGVyIiwibmV3T2JqIiwibm9BbGxvdyIsInVua25vd25LZXlzIiwia25vd24iLCJ1bmtub3duIiwic3RyaXBVbmtub3duIiwiYWxsb3ciLCJ0cmFuc2Zvcm1LZXlzIiwiX2NhbWVsQ2FzZSIsIl9zbmFrZUNhc2UiLCJjb25zdGFudENhc2UiLCJBcnJheVNjaGVtYSIsIl9zdWJUeXBlIiwiX29wdHMiLCJjYXN0QXJyYXkiLCJjYXN0RWxlbWVudCIsIm9yaWdpbmFsIiwiY29tcGFjdCIsInJlamVjdG9yIiwibWFwRm4iLCJfcmVzb2x2ZSIsInZhbGlkYXRlQXQiLCJ2YWxpZGF0ZVN5bmNBdCIsIkZpZWxkc0RpdmlkZXJXcmFwcGVyIiwiaW5kZW50XzIiLCJpbmRlbnRfMyIsIlRleHRJbnB1dCIsInByb3BzT3JGaWVsZE5hbWUiLCJmaWVsZE5hbWUiLCJ2YWxpZGF0ZUZuIiwidXNlRmllbGQiLCJsYWJlbEVsIiwicmFuZG9tU3RyIiwiaHRtbEZvciIsImNyZWF0ZUxhYmVsIiwicGxhY2Vob2xkZXIiLCJhdXRvQ29tcGxldGUiLCJOb3RpZmljYXRpb24iLCJwYXNzd29yZENvbmZpcm0iLCJZdXAiLCJTdWJtaXRCdG4iLCJSZWdGb3JtIiwic2VydmVyRXJyVGV4dCIsInNldFNlcnZlckVyciIsIm5vdGlmaWNhdGlvbiIsInNldE5vdGlmaWNhdGlvbiIsInNlcnZlckVycm9yIiwic2VydmVyUmVzIiwibG9nIiwic3RhdHVzQ29kZSIsIm1haWxTZXJ2aWNlIiwib25TdWJtaXRIYW5kbGVyIiwiY3JlYXRlRm9ybSIsImJvdHRvbVBhcnQiLCJSZWdQYWdlIiwiRW50ZXJGb3JtIiwic2V0SXRlbSIsInVzZXJEYXRhIiwiRW50ZXJQYWdlIiwiRm9yZ290UGFzc3dvcmRGb3JtIiwiRm9yZ290UGFzc3dvcmRQYWdlIiwiUmVzZXRQYXNzd29yZFBhZ2UiLCJOb3Rlc1BhZ2UiLCJVc2VyUGFnZSIsIkFwcCIsImFwcCIsIlJlYWN0RE9NIiwiZ2V0RWxlbWVudEJ5SWQiXSwibWFwcGluZ3MiOiJhQUNFLElBQUlBLEVBQW1CLEdBR3ZCLFNBQVNDLEVBQW9CQyxHQUc1QixHQUFHRixFQUFpQkUsR0FDbkIsT0FBT0YsRUFBaUJFLEdBQVVDLFFBR25DLElBQUlDLEVBQVNKLEVBQWlCRSxHQUFZLENBQ3pDRyxFQUFHSCxFQUNISSxHQUFHLEVBQ0hILFFBQVMsSUFVVixPQU5BSSxFQUFRTCxHQUFVTSxLQUFLSixFQUFPRCxRQUFTQyxFQUFRQSxFQUFPRCxRQUFTRixHQUcvREcsRUFBT0UsR0FBSSxFQUdK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QVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQ2hELElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUN0QixJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDMUUsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFBSyxJQUFRLElBQzFFLElBQVEsSUFBTSxJQUFRLElBQUssSUFBUSxJQUFLLElBQVEsSUFDaEQsSUFBUSxJQUFNLElBQVEsSUFBSyxJQUFRLElBQUssSUFBUSxJQUNoRCxJQUFRLElBQU0sSUFBUSxJQUFLLElBQVEsSUFDbkMsSUFBUSxLQUFNLElBQVEsS0FDdEIsSUFBUSxLQUFNLElBQVEsS0FDdEIsSUFBUSxLQUVSLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDdkUsSUFBVSxJQUFNLElBQVUsSUFDMUIsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3ZFLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFDeEQsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN4RCxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3hELElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQ3RGLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUFLLElBQVUsSUFBSyxJQUFVLElBQUssSUFBVSxJQUN0RixJQUFVLElBQU0sSUFBVSxJQUMxQixJQUFVLElBQU0sSUFBVSxJQUFLLElBQVUsSUFDekMsSUFBVSxJQUFNLElBQVUsSUFBSyxJQUFVLElBQ3pDLElBQVUsSUFBTSxJQUFVLElBQUssSUFBVSxJQUN6QyxJQUFVLEtBQU0sSUFBVSxLQUMxQixJQUFVLEtBQU0sSUFBVSxLQUMxQixJQUFVLEtBQU0sSUFBVSxNQ3JEeEJFLEdBQVUsOENBZVZDLEdBQWN2bkYsT0FO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Q0ksT0FDSSxvQ0FDSSxrQkFBQyxHQUFELE1BQ0Esa0JBQUMsR0FBRCxLQUNJLHFDRUNEQyxJQ1hBQSxHREdmLFdBS0ksT0FIYW5nQyxFQUFZbjVDLEdBQVNBLEVBQU1xNUMsTUFHNUJ6ekQsTUVGRDJ6RixJQ05BQSxHREVmLFdBQ0ksTUFBTyxZRStESUMsSUNsRUFBLEdEcUJILElBS0osa0JBQUMsR0FBRCxLQUNJLHlCQUFLanpCLFVBQVduL0QsSUFBRXF5RixLQUNkLGtCQUFDdnpCLEdBQUQsQ0FBTXBtRCxHQUFHLHlCQUFULFFBU0Esa0JBQUMsR0FBRCxLQUNJLGtCQUFDLEdBQUQsQ0FBT2hVLEtBQUssSUFBSTRoRCxPQUFLLEdBQ2pCLGtCQUFDLEdBQUQsT0FFSixrQkFBQyxHQUFELENBQU81aEQsS0FBSyxRQUNSLGtCQUFDLEdBQUQsT0FFSixrQkFBQyxHQUFELENBQU9BLEtBQUssVUFDUixrQkFBQyxHQUFELE9BRUosa0JBQUMsR0FBRCxDQUFPQSxLQUFLLG9CQUNSLGtCQUFDLEdBQUQsT0FFSixrQkFBQyxHQUFELENBQU9BLEtBQUssMEJBQ1Isa0JBQUMsR0FBRCxPQUVKLGtCQUFDLEdBQUQsQ0FBT0EsS0FBSyxVQUNSLGtCQUFDLEdBQUQsT0FFSixrQkFBQyxHQUFELENBQU9BLEtBQUssU0FDUixrQkFBQyxHQUFELFVFbkR4QjR0RixJQUFTdnFGLE9BQ0wsa0JBQUMsRUFBRCxDQUFVNlEsTUFBT0EsR0FDYixrQkFBQyxHQUFELE9BRUpLLFNBQVNzNUUsZUFBZSIsImZpbGUiOiJpbmRleC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAxMTQpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LnByb2R1Y3Rpb24ubWluLmpzJyk7XG59IGVsc2Uge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCJpbXBvcnQgZnJlZUdsb2JhbCBmcm9tICcuL19mcmVlR2xvYmFsLmpzJztcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG5leHBvcnQgZGVmYXVsdCByb290O1xuIiwidmFyIGlzUHJvZHVjdGlvbiA9IHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbic7XG5mdW5jdGlvbiB3YXJuaW5nKGNvbmRpdGlvbiwgbWVzc2FnZSkge1xuICBpZiAoIWlzUHJvZHVjdGlvbikge1xuICAgIGlmIChjb25kaXRpb24pIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB2YXIgdGV4dCA9IFwiV2FybmluZzogXCIgKyBtZXNzYWdlO1xuXG4gICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS53YXJuKHRleHQpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aHJvdyBFcnJvcih0ZXh0KTtcbiAgICB9IGNhdGNoICh4KSB7fVxuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdhcm5pbmc7XG4iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBfaW5oZXJpdHNMb29zZShzdWJDbGFzcywgc3VwZXJDbGFzcykge1xuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MucHJvdG90eXBlKTtcbiAgc3ViQ2xhc3MucHJvdG90eXBlLmNvbnN0cnVjdG9yID0gc3ViQ2xhc3M7XG4gIHN1YkNsYXNzLl9fcHJvdG9fXyA9IHN1cGVyQ2xhc3M7XG59IiwidmFyIGNoZWNrID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBpdCAmJiBpdC5NYXRoID09IE1hdGggJiYgaXQ7XG59O1xuXG4vLyBodHRwczovL2dpdGh1Yi5jb20vemxvaXJvY2svY29yZS1qcy9pc3N1ZXMvODYjaXNzdWVjb21tZW50LTExNTc1OTAyOFxubW9kdWxlLmV4cG9ydHMgPVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgY2hlY2sodHlwZW9mIGdsb2JhbFRoaXMgPT0gJ29iamVjdCcgJiYgZ2xvYmFsVGhpcykgfHxcbiAgY2hlY2sodHlwZW9mIHdpbmRvdyA9PSAnb2JqZWN0JyAmJiB3aW5kb3cpIHx8XG4gIGNoZWNrKHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYpIHx8XG4gIGNoZWNrKHR5cGVvZiBnbG9iYWwgPT0gJ29iamVjdCcgJiYgZ2xvYmFsKSB8fFxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbiIsInZhciBoYXNPd25Qcm9wZXJ0eSA9IHt9Lmhhc093blByb3BlcnR5O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCwga2V5KSB7XG4gIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGl0LCBrZXkpO1xufTtcbiIsImltcG9ydCBmcmVlR2xvYmFsIGZyb20gJy4vX2ZyZWVHbG9iYWwuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBEZXRlY3QgZnJlZSB2YXJpYWJsZSBgcHJvY2Vzc2AgZnJvbSBOb2RlLmpzLiAqL1xudmFyIGZyZWVQcm9jZXNzID0gbW9kdWxlRXhwb3J0cyAmJiBmcmVlR2xvYmFsLnByb2Nlc3M7XG5cbi8qKiBVc2VkIHRvIGFjY2VzcyBmYXN0ZXIgTm9kZS5qcyBoZWxwZXJzLiAqL1xudmFyIG5vZGVVdGlsID0gKGZ1bmN0aW9uKCkge1xuICB0cnkge1xuICAgIC8vIFVzZSBgdXRpbC50eXBlc2AgZm9yIE5vZGUuanMgMTArLlxuICAgIHZhciB0eXBlcyA9IGZyZWVNb2R1bGUgJiYgZnJlZU1vZHVsZS5yZXF1aXJlICYmIGZyZWVNb2R1bGUucmVxdWlyZSgndXRpbCcpLnR5cGVzO1xuXG4gICAgaWYgKHR5cGVzKSB7XG4gICAgICByZXR1cm4gdHlwZXM7XG4gICAgfVxuXG4gICAgLy8gTGVnYWN5IGBwcm9jZXNzLmJpbmRpbmcoJ3V0aWwnKWAgZm9yIE5vZGUuanMgPCAxMC5cbiAgICByZXR1cm4gZnJlZVByb2Nlc3MgJiYgZnJlZVByb2Nlc3MuYmluZGluZyAmJiBmcmVlUHJvY2Vzcy5iaW5kaW5nKCd1dGlsJyk7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBub2RlVXRpbDtcbiIsIid1c2Ugc3RyaWN0JztcblxudmFyIGlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xudmFyIGtleUxpc3QgPSBPYmplY3Qua2V5cztcbnZhciBoYXNQcm9wID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbnZhciBoYXNFbGVtZW50VHlwZSA9IHR5cGVvZiBFbGVtZW50ICE9PSAndW5kZWZpbmVkJztcblxuZnVuY3Rpb24gZXF1YWwoYSwgYikge1xuICAvLyBmYXN0LWRlZXAtZXF1YWwgaW5kZXguanMgMi4wLjFcbiAgaWYgKGEgPT09IGIpIHJldHVybiB0cnVlO1xuXG4gIGlmIChhICYmIGIgJiYgdHlwZW9mIGEgPT0gJ29iamVjdCcgJiYgdHlwZW9mIGIgPT0gJ29iamVjdCcpIHtcbiAgICB2YXIgYXJyQSA9IGlzQXJyYXkoYSlcbiAgICAgICwgYXJyQiA9IGlzQXJyYXkoYilcbiAgICAgICwgaVxuICAgICAgLCBsZW5ndGhcbiAgICAgICwga2V5O1xuXG4gICAgaWYgKGFyckEgJiYgYXJyQikge1xuICAgICAgbGVuZ3RoID0gYS5sZW5ndGg7XG4gICAgICBpZiAobGVuZ3RoICE9IGIubGVuZ3RoKSByZXR1cm4gZmFsc2U7XG4gICAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICAgIGlmICghZXF1YWwoYVtpXSwgYltpXSkpIHJldHVybiBmYWxzZTtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cblxuICAgIGlmIChhcnJBICE9IGFyckIpIHJldHVybiBmYWxzZTtcblxuICAgIHZhciBkYXRlQSA9IGEgaW5zdGFuY2VvZiBEYXRlXG4gICAgICAsIGRhdGVCID0gYiBpbnN0YW5jZW9mIERhdGU7XG4gICAgaWYgKGRhdGVBICE9IGRhdGVCKSByZXR1cm4gZmFsc2U7XG4gICAgaWYgKGRhdGVBICYmIGRhdGVCKSByZXR1cm4gYS5nZXRUaW1lKCkgPT0gYi5nZXRUaW1lKCk7XG5cbiAgICB2YXIgcmVnZXhwQSA9IGEgaW5zdGFuY2VvZiBSZWdFeHBcbiAgICAgICwgcmVnZXhwQiA9IGIgaW5zdGFuY2VvZiBSZWdFeHA7XG4gICAgaWYgKHJlZ2V4cEEgIT0gcmVnZXhwQikgcmV0dXJuIGZhbHNlO1xuICAgIGlmIChyZWdleHBBICYmIHJlZ2V4cEIpIHJldHVybiBhLnRvU3RyaW5nKCkgPT0gYi50b1N0cmluZygpO1xuXG4gICAgdmFyIGtleXMgPSBrZXlMaXN0KGEpO1xuICAgIGxlbmd0aCA9IGtleXMubGVuZ3RoO1xuXG4gICAgaWYgKGxlbmd0aCAhPT0ga2V5TGlzdChiKS5sZW5ndGgpXG4gICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICBmb3IgKGkgPSBsZW5ndGg7IGktLSAhPT0gMDspXG4gICAgICBpZiAoIWhhc1Byb3AuY2FsbChiLCBrZXlzW2ldKSkgcmV0dXJuIGZhbHNlO1xuICAgIC8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxuICAgIC8vIHN0YXJ0IHJlYWN0LWZhc3QtY29tcGFyZVxuICAgIC8vIGN1c3RvbSBoYW5kbGluZyBmb3IgRE9NIGVsZW1lbnRzXG4gICAgaWYgKGhhc0VsZW1lbnRUeXBlICYmIGEgaW5zdGFuY2VvZiBFbGVtZW50ICYmIGIgaW5zdGFuY2VvZiBFbGVtZW50KVxuICAgICAgcmV0dXJuIGEgPT09IGI7XG5cbiAgICAvLyBjdXN0b20gaGFuZGxpbmcgZm9yIFJlYWN0XG4gICAgZm9yIChpID0gbGVuZ3RoOyBpLS0gIT09IDA7KSB7XG4gICAgICBrZXkgPSBrZXlzW2ldO1xuICAgICAgaWYgKGtleSA9PT0gJ19vd25lcicgJiYgYS4kJHR5cGVvZikge1xuICAgICAgICAvLyBSZWFjdC1zcGVjaWZpYzogYXZvaWQgdHJhdmVyc2luZyBSZWFjdCBlbGVtZW50cycgX293bmVyLlxuICAgICAgICAvLyAgX293bmVyIGNvbnRhaW5zIGNpcmN1bGFyIHJlZmVyZW5jZXNcbiAgICAgICAgLy8gYW5kIGlzIG5vdCBuZWVkZWQgd2hlbiBjb21wYXJpbmcgdGhlIGFjdHVhbCBlbGVtZW50cyAoYW5kIG5vdCB0aGVpciBvd25lcnMpXG4gICAgICAgIC8vIC4kJHR5cGVvZiBhbmQgLl9zdG9yZSBvbiBqdXN0IHJlYXNvbmFibGUgbWFya2VycyBvZiBhIHJlYWN0IGVsZW1lbnRcbiAgICAgICAgY29udGludWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBhbGwgb3RoZXIgcHJvcGVydGllcyBzaG91bGQgYmUgdHJhdmVyc2VkIGFzIHVzdWFsXG4gICAgICAgIGlmICghZXF1YWwoYVtrZXldLCBiW2tleV0pKSByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGVuZCByZWFjdC1mYXN0LWNvbXBhcmVcblxuICAgIC8vIGZhc3QtZGVlcC1lcXVhbCBpbmRleC5qcyAyLjAuMVxuICAgIHJldHVybiB0cnVlO1xuICB9XG5cbiAgcmV0dXJuIGEgIT09IGEgJiYgYiAhPT0gYjtcbn1cbi8vIGVuZCBmYXN0LWRlZXAtZXF1YWxcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBleHBvcnRlZEVxdWFsKGEsIGIpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gZXF1YWwoYSwgYik7XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKChlcnJvci5tZXNzYWdlICYmIGVycm9yLm1lc3NhZ2UubWF0Y2goL3N0YWNrfHJlY3Vyc2lvbi9pKSkgfHwgKGVycm9yLm51bWJlciA9PT0gLTIxNDY4MjgyNjApKSB7XG4gICAgICAvLyB3YXJuIG9uIGNpcmN1bGFyIHJlZmVyZW5jZXMsIGRvbid0IGNyYXNoXG4gICAgICAvLyBicm93c2VycyBnaXZlIHRoaXMgZGlmZmVyZW50IGVycm9ycyBuYW1lIGFuZCBtZXNzYWdlczpcbiAgICAgIC8vIGNocm9tZS9zYWZhcmk6IFwiUmFuZ2VFcnJvclwiLCBcIk1heGltdW0gY2FsbCBzdGFjayBzaXplIGV4Y2VlZGVkXCJcbiAgICAgIC8vIGZpcmVmb3g6IFwiSW50ZXJuYWxFcnJvclwiLCB0b28gbXVjaCByZWN1cnNpb25cIlxuICAgICAgLy8gZWRnZTogXCJFcnJvclwiLCBcIk91dCBvZiBzdGFjayBzcGFjZVwiXG4gICAgICBjb25zb2xlLndhcm4oJ1dhcm5pbmc6IHJlYWN0LWZhc3QtY29tcGFyZSBkb2VzIG5vdCBoYW5kbGUgY2lyY3VsYXIgcmVmZXJlbmNlcy4nLCBlcnJvci5uYW1lLCBlcnJvci5tZXNzYWdlKTtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgLy8gc29tZSBvdGhlciBlcnJvci4gd2Ugc2hvdWxkIGRlZmluaXRlbHkga25vdyBhYm91dCB0aGVzZVxuICAgIHRocm93IGVycm9yO1xuICB9XG59O1xuIiwiLyoqXG4gKiBCYXNlZCBvbiBLZW5kbyBVSSBDb3JlIGV4cHJlc3Npb24gY29kZSA8aHR0cHM6Ly9naXRodWIuY29tL3RlbGVyaWsva2VuZG8tdWktY29yZSNsaWNlbnNlLWluZm9ybWF0aW9uPlxuICovXG4ndXNlIHN0cmljdCdcblxuZnVuY3Rpb24gQ2FjaGUobWF4U2l6ZSkge1xuICB0aGlzLl9tYXhTaXplID0gbWF4U2l6ZVxuICB0aGlzLmNsZWFyKClcbn1cbkNhY2hlLnByb3RvdHlwZS5jbGVhciA9IGZ1bmN0aW9uKCkge1xuICB0aGlzLl9zaXplID0gMFxuICB0aGlzLl92YWx1ZXMgPSBPYmplY3QuY3JlYXRlKG51bGwpXG59XG5DYWNoZS5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24oa2V5KSB7XG4gIHJldHVybiB0aGlzLl92YWx1ZXNba2V5XVxufVxuQ2FjaGUucHJvdG90eXBlLnNldCA9IGZ1bmN0aW9uKGtleSwgdmFsdWUpIHtcbiAgdGhpcy5fc2l6ZSA+PSB0aGlzLl9tYXhTaXplICYmIHRoaXMuY2xlYXIoKVxuICBpZiAoIShrZXkgaW4gdGhpcy5fdmFsdWVzKSkgdGhpcy5fc2l6ZSsrXG5cbiAgcmV0dXJuICh0aGlzLl92YWx1ZXNba2V5XSA9IHZhbHVlKVxufVxuXG52YXIgU1BMSVRfUkVHRVggPSAvW14uXlxcXV5bXSt8KD89XFxbXFxdfFxcLlxcLikvZyxcbiAgRElHSVRfUkVHRVggPSAvXlxcZCskLyxcbiAgTEVBRF9ESUdJVF9SRUdFWCA9IC9eXFxkLyxcbiAgU1BFQ19DSEFSX1JFR0VYID0gL1t+YCEjJCVcXF4mKis9XFwtXFxbXFxdXFxcXCc7LC97fXxcXFxcXCI6PD5cXD9dL2csXG4gIENMRUFOX1FVT1RFU19SRUdFWCA9IC9eXFxzKihbJ1wiXT8pKC4qPykoXFwxKVxccyokLyxcbiAgTUFYX0NBQ0hFX1NJWkUgPSA1MTJcblxudmFyIHBhdGhDYWNoZSA9IG5ldyBDYWNoZShNQVhfQ0FDSEVfU0laRSksXG4gIHNldENhY2hlID0gbmV3IENhY2hlKE1BWF9DQUNIRV9TSVpFKSxcbiAgZ2V0Q2FjaGUgPSBuZXcgQ2FjaGUoTUFYX0NBQ0hFX1NJWkUpXG5cbnZhciBjb25maWdcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIENhY2hlOiBDYWNoZSxcblxuICBzcGxpdDogc3BsaXQsXG5cbiAgbm9ybWFsaXplUGF0aDogbm9ybWFsaXplUGF0aCxcblxuICBzZXR0ZXI6IGZ1bmN0aW9uKHBhdGgpIHtcbiAgICB2YXIgcGFydHMgPSBub3JtYWxpemVQYXRoKHBhdGgpXG5cbiAgICByZXR1cm4gKFxuICAgICAgc2V0Q2FjaGUuZ2V0KHBhdGgpIHx8XG4gICAgICBzZXRDYWNoZS5zZXQocGF0aCwgZnVuY3Rpb24gc2V0dGVyKGRhdGEsIHZhbHVlKSB7XG4gICAgICAgIHZhciBpbmRleCA9IDAsXG4gICAgICAgICAgbGVuID0gcGFydHMubGVuZ3RoXG4gICAgICAgIHdoaWxlIChpbmRleCA8IGxlbiAtIDEpIHtcbiAgICAgICAgICBkYXRhID0gZGF0YVtwYXJ0c1tpbmRleCsrXV1cbiAgICAgICAgfVxuICAgICAgICBkYXRhW3BhcnRzW2luZGV4XV0gPSB2YWx1ZVxuICAgICAgfSlcbiAgICApXG4gIH0sXG5cbiAgZ2V0dGVyOiBmdW5jdGlvbihwYXRoLCBzYWZlKSB7XG4gICAgdmFyIHBhcnRzID0gbm9ybWFsaXplUGF0aChwYXRoKVxuICAgIHJldHVybiAoXG4gICAgICBnZXRDYWNoZS5nZXQocGF0aCkgfHxcbiAgICAgIGdldENhY2hlLnNldChwYXRoLCBmdW5jdGlvbiBnZXR0ZXIoZGF0YSkge1xuICAgICAgICB2YXIgaW5kZXggPSAwLFxuICAgICAgICAgIGxlbiA9IHBhcnRzLmxlbmd0aFxuICAgICAgICB3aGlsZSAoaW5kZXggPCBsZW4pIHtcbiAgICAgICAgICBpZiAoZGF0YSAhPSBudWxsIHx8ICFzYWZlKSBkYXRhID0gZGF0YVtwYXJ0c1tpbmRleCsrXV1cbiAgICAgICAgICBlbHNlIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBkYXRhXG4gICAgICB9KVxuICAgIClcbiAgfSxcblxuICBqb2luOiBmdW5jdGlvbihzZWdtZW50cykge1xuICAgIHJldHVybiBzZWdtZW50cy5yZWR1Y2UoZnVuY3Rpb24ocGF0aCwgcGFydCkge1xuICAgICAgcmV0dXJuIChcbiAgICAgICAgcGF0aCArXG4gICAgICAgIChpc1F1b3RlZChwYXJ0KSB8fCBESUdJVF9SRUdFWC50ZXN0KHBhcnQpXG4gICAgICAgICAgPyAnWycgKyBwYXJ0ICsgJ10nXG4gICAgICAgICAgOiAocGF0aCA/ICcuJyA6ICcnKSArIHBhcnQpXG4gICAgICApXG4gICAgfSwgJycpXG4gIH0sXG5cbiAgZm9yRWFjaDogZnVuY3Rpb24ocGF0aCwgY2IsIHRoaXNBcmcpIHtcbiAgICBmb3JFYWNoKEFycmF5LmlzQXJyYXkocGF0aCkgPyBwYXRoIDogc3BsaXQocGF0aCksIGNiLCB0aGlzQXJnKVxuICB9XG59XG5cbmZ1bmN0aW9uIG5vcm1hbGl6ZVBhdGgocGF0aCkge1xuICByZXR1cm4gKFxuICAgIHBhdGhDYWNoZS5nZXQocGF0aCkgfHxcbiAgICBwYXRoQ2FjaGUuc2V0KFxuICAgICAgcGF0aCxcbiAgICAgIHNwbGl0KHBhdGgpLm1hcChmdW5jdGlvbihwYXJ0KSB7XG4gICAgICAgIHJldHVybiBwYXJ0LnJlcGxhY2UoQ0xFQU5fUVVPVEVTX1JFR0VYLCAnJDInKVxuICAgICAgfSlcbiAgICApXG4gIClcbn1cblxuZnVuY3Rpb24gc3BsaXQocGF0aCkge1xuICByZXR1cm4gcGF0aC5tYXRjaChTUExJVF9SRUdFWClcbn1cblxuZnVuY3Rpb24gZm9yRWFjaChwYXJ0cywgaXRlciwgdGhpc0FyZykge1xuICB2YXIgbGVuID0gcGFydHMubGVuZ3RoLFxuICAgIHBhcnQsXG4gICAgaWR4LFxuICAgIGlzQXJyYXksXG4gICAgaXNCcmFja2V0XG5cbiAgZm9yIChpZHggPSAwOyBpZHggPCBsZW47IGlkeCsrKSB7XG4gICAgcGFydCA9IHBhcnRzW2lkeF1cblxuICAgIGlmIChwYXJ0KSB7XG4gICAgICBpZiAoc2hvdWxkQmVRdW90ZWQocGFydCkpIHtcbiAgICAgICAgcGFydCA9ICdcIicgKyBwYXJ0ICsgJ1wiJ1xuICAgICAgfVxuXG4gICAgICBpc0JyYWNrZXQgPSBpc1F1b3RlZChwYXJ0KVxuICAgICAgaXNBcnJheSA9ICFpc0JyYWNrZXQgJiYgL15cXGQrJC8udGVzdChwYXJ0KVxuXG4gICAgICBpdGVyLmNhbGwodGhpc0FyZywgcGFydCwgaXNCcmFja2V0LCBpc0FycmF5LCBpZHgsIHBhcnRzKVxuICAgIH1cbiAgfVxufVxuXG5mdW5jdGlvbiBpc1F1b3RlZChzdHIpIHtcbiAgcmV0dXJuIChcbiAgICB0eXBlb2Ygc3RyID09PSAnc3RyaW5nJyAmJiBzdHIgJiYgW1wiJ1wiLCAnXCInXS5pbmRleE9mKHN0ci5jaGFyQXQoMCkpICE9PSAtMVxuICApXG59XG5cbmZ1bmN0aW9uIGhhc0xlYWRpbmdOdW1iZXIocGFydCkge1xuICByZXR1cm4gcGFydC5tYXRjaChMRUFEX0RJR0lUX1JFR0VYKSAmJiAhcGFydC5tYXRjaChESUdJVF9SRUdFWClcbn1cblxuZnVuY3Rpb24gaGFzU3BlY2lhbENoYXJzKHBhcnQpIHtcbiAgcmV0dXJuIFNQRUNfQ0hBUl9SRUdFWC50ZXN0KHBhcnQpXG59XG5cbmZ1bmN0aW9uIHNob3VsZEJlUXVvdGVkKHBhcnQpIHtcbiAgcmV0dXJuICFpc1F1b3RlZChwYXJ0KSAmJiAoaGFzTGVhZGluZ051bWJlcihwYXJ0KSB8fCBoYXNTcGVjaWFsQ2hhcnMocGFydCkpXG59XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciByZWFjdElzID0gcmVxdWlyZSgncmVhY3QtaXMnKTtcblxuLyoqXG4gKiBDb3B5cmlnaHQgMjAxNSwgWWFob28hIEluYy5cbiAqIENvcHlyaWdodHMgbGljZW5zZWQgdW5kZXIgdGhlIE5ldyBCU0QgTGljZW5zZS4gU2VlIHRoZSBhY2NvbXBhbnlpbmcgTElDRU5TRSBmaWxlIGZvciB0ZXJtcy5cbiAqL1xudmFyIFJFQUNUX1NUQVRJQ1MgPSB7XG4gIGNoaWxkQ29udGV4dFR5cGVzOiB0cnVlLFxuICBjb250ZXh0VHlwZTogdHJ1ZSxcbiAgY29udGV4dFR5cGVzOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBnZXREZWZhdWx0UHJvcHM6IHRydWUsXG4gIGdldERlcml2ZWRTdGF0ZUZyb21FcnJvcjogdHJ1ZSxcbiAgZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzOiB0cnVlLFxuICBtaXhpbnM6IHRydWUsXG4gIHByb3BUeXBlczogdHJ1ZSxcbiAgdHlwZTogdHJ1ZVxufTtcbnZhciBLTk9XTl9TVEFUSUNTID0ge1xuICBuYW1lOiB0cnVlLFxuICBsZW5ndGg6IHRydWUsXG4gIHByb3RvdHlwZTogdHJ1ZSxcbiAgY2FsbGVyOiB0cnVlLFxuICBjYWxsZWU6IHRydWUsXG4gIGFyZ3VtZW50czogdHJ1ZSxcbiAgYXJpdHk6IHRydWVcbn07XG52YXIgRk9SV0FSRF9SRUZfU1RBVElDUyA9IHtcbiAgJyQkdHlwZW9mJzogdHJ1ZSxcbiAgcmVuZGVyOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWVcbn07XG52YXIgTUVNT19TVEFUSUNTID0ge1xuICAnJCR0eXBlb2YnOiB0cnVlLFxuICBjb21wYXJlOiB0cnVlLFxuICBkZWZhdWx0UHJvcHM6IHRydWUsXG4gIGRpc3BsYXlOYW1lOiB0cnVlLFxuICBwcm9wVHlwZXM6IHRydWUsXG4gIHR5cGU6IHRydWVcbn07XG52YXIgVFlQRV9TVEFUSUNTID0ge307XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5Gb3J3YXJkUmVmXSA9IEZPUldBUkRfUkVGX1NUQVRJQ1M7XG5UWVBFX1NUQVRJQ1NbcmVhY3RJcy5NZW1vXSA9IE1FTU9fU1RBVElDUztcblxuZnVuY3Rpb24gZ2V0U3RhdGljcyhjb21wb25lbnQpIHtcbiAgLy8gUmVhY3QgdjE2LjExIGFuZCBiZWxvd1xuICBpZiAocmVhY3RJcy5pc01lbW8oY29tcG9uZW50KSkge1xuICAgIHJldHVybiBNRU1PX1NUQVRJQ1M7XG4gIH0gLy8gUmVhY3QgdjE2LjEyIGFuZCBhYm92ZVxuXG5cbiAgcmV0dXJuIFRZUEVfU1RBVElDU1tjb21wb25lbnRbJyQkdHlwZW9mJ11dIHx8IFJFQUNUX1NUQVRJQ1M7XG59XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eTtcbnZhciBnZXRPd25Qcm9wZXJ0eU5hbWVzID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXM7XG52YXIgZ2V0T3duUHJvcGVydHlTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbnZhciBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yO1xudmFyIGdldFByb3RvdHlwZU9mID0gT2JqZWN0LmdldFByb3RvdHlwZU9mO1xudmFyIG9iamVjdFByb3RvdHlwZSA9IE9iamVjdC5wcm90b3R5cGU7XG5mdW5jdGlvbiBob2lzdE5vblJlYWN0U3RhdGljcyh0YXJnZXRDb21wb25lbnQsIHNvdXJjZUNvbXBvbmVudCwgYmxhY2tsaXN0KSB7XG4gIGlmICh0eXBlb2Ygc291cmNlQ29tcG9uZW50ICE9PSAnc3RyaW5nJykge1xuICAgIC8vIGRvbid0IGhvaXN0IG92ZXIgc3RyaW5nIChodG1sKSBjb21wb25lbnRzXG4gICAgaWYgKG9iamVjdFByb3RvdHlwZSkge1xuICAgICAgdmFyIGluaGVyaXRlZENvbXBvbmVudCA9IGdldFByb3RvdHlwZU9mKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICAgIGlmIChpbmhlcml0ZWRDb21wb25lbnQgJiYgaW5oZXJpdGVkQ29tcG9uZW50ICE9PSBvYmplY3RQcm90b3R5cGUpIHtcbiAgICAgICAgaG9pc3ROb25SZWFjdFN0YXRpY3ModGFyZ2V0Q29tcG9uZW50LCBpbmhlcml0ZWRDb21wb25lbnQsIGJsYWNrbGlzdCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzKHNvdXJjZUNvbXBvbmVudCk7XG5cbiAgICBpZiAoZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAgICBrZXlzID0ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZUNvbXBvbmVudCkpO1xuICAgIH1cblxuICAgIHZhciB0YXJnZXRTdGF0aWNzID0gZ2V0U3RhdGljcyh0YXJnZXRDb21wb25lbnQpO1xuICAgIHZhciBzb3VyY2VTdGF0aWNzID0gZ2V0U3RhdGljcyhzb3VyY2VDb21wb25lbnQpO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBrZXlzLmxlbmd0aDsgKytpKSB7XG4gICAgICB2YXIga2V5ID0ga2V5c1tpXTtcblxuICAgICAgaWYgKCFLTk9XTl9TVEFUSUNTW2tleV0gJiYgIShibGFja2xpc3QgJiYgYmxhY2tsaXN0W2tleV0pICYmICEoc291cmNlU3RhdGljcyAmJiBzb3VyY2VTdGF0aWNzW2tleV0pICYmICEodGFyZ2V0U3RhdGljcyAmJiB0YXJnZXRTdGF0aWNzW2tleV0pKSB7XG4gICAgICAgIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHNvdXJjZUNvbXBvbmVudCwga2V5KTtcblxuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIEF2b2lkIGZhaWx1cmVzIGZyb20gcmVhZC1vbmx5IHByb3BlcnRpZXNcbiAgICAgICAgICBkZWZpbmVQcm9wZXJ0eSh0YXJnZXRDb21wb25lbnQsIGtleSwgZGVzY3JpcHRvcik7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldENvbXBvbmVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBob2lzdE5vblJlYWN0U3RhdGljcztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcblxubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIGRlZmluZVByb3BlcnR5TW9kdWxlLmYob2JqZWN0LCBrZXksIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvcigxLCB2YWx1ZSkpO1xufSA6IGZ1bmN0aW9uIChvYmplY3QsIGtleSwgdmFsdWUpIHtcbiAgb2JqZWN0W2tleV0gPSB2YWx1ZTtcbiAgcmV0dXJuIG9iamVjdDtcbn07XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcbmltcG9ydCBzdHViRmFsc2UgZnJvbSAnLi9zdHViRmFsc2UuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZDtcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZUlzQnVmZmVyID0gQnVmZmVyID8gQnVmZmVyLmlzQnVmZmVyIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgYnVmZmVyLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNCdWZmZXIobmV3IEJ1ZmZlcigyKSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0J1ZmZlcihuZXcgVWludDhBcnJheSgyKSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNCdWZmZXIgPSBuYXRpdmVJc0J1ZmZlciB8fCBzdHViRmFsc2U7XG5cbmV4cG9ydCBkZWZhdWx0IGlzQnVmZmVyO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBET01JdGVyYWJsZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9tLWl0ZXJhYmxlcycpO1xudmFyIEFycmF5SXRlcmF0b3JNZXRob2RzID0gcmVxdWlyZSgnLi4vbW9kdWxlcy9lcy5hcnJheS5pdGVyYXRvcicpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciB3ZWxsS25vd25TeW1ib2wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvd2VsbC1rbm93bi1zeW1ib2wnKTtcblxudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIFRPX1NUUklOR19UQUcgPSB3ZWxsS25vd25TeW1ib2woJ3RvU3RyaW5nVGFnJyk7XG52YXIgQXJyYXlWYWx1ZXMgPSBBcnJheUl0ZXJhdG9yTWV0aG9kcy52YWx1ZXM7XG5cbmZvciAodmFyIENPTExFQ1RJT05fTkFNRSBpbiBET01JdGVyYWJsZXMpIHtcbiAgdmFyIENvbGxlY3Rpb24gPSBnbG9iYWxbQ09MTEVDVElPTl9OQU1FXTtcbiAgdmFyIENvbGxlY3Rpb25Qcm90b3R5cGUgPSBDb2xsZWN0aW9uICYmIENvbGxlY3Rpb24ucHJvdG90eXBlO1xuICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZSkge1xuICAgIC8vIHNvbWUgQ2hyb21lIHZlcnNpb25zIGhhdmUgbm9uLWNvbmZpZ3VyYWJsZSBtZXRob2RzIG9uIERPTVRva2VuTGlzdFxuICAgIGlmIChDb2xsZWN0aW9uUHJvdG90eXBlW0lURVJBVE9SXSAhPT0gQXJyYXlWYWx1ZXMpIHRyeSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgSVRFUkFUT1IsIEFycmF5VmFsdWVzKTtcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtJVEVSQVRPUl0gPSBBcnJheVZhbHVlcztcbiAgICB9XG4gICAgaWYgKCFDb2xsZWN0aW9uUHJvdG90eXBlW1RPX1NUUklOR19UQUddKSB7XG4gICAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoQ29sbGVjdGlvblByb3RvdHlwZSwgVE9fU1RSSU5HX1RBRywgQ09MTEVDVElPTl9OQU1FKTtcbiAgICB9XG4gICAgaWYgKERPTUl0ZXJhYmxlc1tDT0xMRUNUSU9OX05BTUVdKSBmb3IgKHZhciBNRVRIT0RfTkFNRSBpbiBBcnJheUl0ZXJhdG9yTWV0aG9kcykge1xuICAgICAgLy8gc29tZSBDaHJvbWUgdmVyc2lvbnMgaGF2ZSBub24tY29uZmlndXJhYmxlIG1ldGhvZHMgb24gRE9NVG9rZW5MaXN0XG4gICAgICBpZiAoQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gIT09IEFycmF5SXRlcmF0b3JNZXRob2RzW01FVEhPRF9OQU1FXSkgdHJ5IHtcbiAgICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KENvbGxlY3Rpb25Qcm90b3R5cGUsIE1FVEhPRF9OQU1FLCBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV0pO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgQ29sbGVjdGlvblByb3RvdHlwZVtNRVRIT0RfTkFNRV0gPSBBcnJheUl0ZXJhdG9yTWV0aG9kc1tNRVRIT0RfTkFNRV07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChleGVjKSB7XG4gIHRyeSB7XG4gICAgcmV0dXJuICEhZXhlYygpO1xuICB9IGNhdGNoIChlcnJvcikge1xuICAgIHJldHVybiB0cnVlO1xuICB9XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICB2YXIgUmVhY3RJcyA9IHJlcXVpcmUoJ3JlYWN0LWlzJyk7XG5cbiAgLy8gQnkgZXhwbGljaXRseSB1c2luZyBgcHJvcC10eXBlc2AgeW91IGFyZSBvcHRpbmcgaW50byBuZXcgZGV2ZWxvcG1lbnQgYmVoYXZpb3IuXG4gIC8vIGh0dHA6Ly9mYi5tZS9wcm9wLXR5cGVzLWluLXByb2RcbiAgdmFyIHRocm93T25EaXJlY3RBY2Nlc3MgPSB0cnVlO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vZmFjdG9yeVdpdGhUeXBlQ2hlY2tlcnMnKShSZWFjdElzLmlzRWxlbWVudCwgdGhyb3dPbkRpcmVjdEFjY2Vzcyk7XG59IGVsc2Uge1xuICAvLyBCeSBleHBsaWNpdGx5IHVzaW5nIGBwcm9wLXR5cGVzYCB5b3UgYXJlIG9wdGluZyBpbnRvIG5ldyBwcm9kdWN0aW9uIGJlaGF2aW9yLlxuICAvLyBodHRwOi8vZmIubWUvcHJvcC10eXBlcy1pbi1wcm9kXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9mYWN0b3J5V2l0aFRocm93aW5nU2hpbXMnKSgpO1xufVxuIiwiLyoganNoaW50IG5vZGU6IHRydWUgKi9cclxuXCJ1c2Ugc3RyaWN0XCI7XHJcbmZ1bmN0aW9uIG1ha2VBcnJheUZyb20ob2JqKSB7XHJcbiAgcmV0dXJuIEFycmF5LnByb3RvdHlwZS5zbGljZS5hcHBseShvYmopO1xyXG59XHJcbnZhclxyXG4gIFBFTkRJTkcgPSBcInBlbmRpbmdcIixcclxuICBSRVNPTFZFRCA9IFwicmVzb2x2ZWRcIixcclxuICBSRUpFQ1RFRCA9IFwicmVqZWN0ZWRcIjtcclxuXHJcbmZ1bmN0aW9uIFN5bmNocm9ub3VzUHJvbWlzZShoYW5kbGVyKSB7XHJcbiAgdGhpcy5zdGF0dXMgPSBQRU5ESU5HO1xyXG4gIHRoaXMuX2NvbnRpbnVhdGlvbnMgPSBbXTtcclxuICB0aGlzLl9wYXJlbnQgPSBudWxsO1xyXG4gIHRoaXMuX3BhdXNlZCA9IGZhbHNlO1xyXG4gIGlmIChoYW5kbGVyKSB7XHJcbiAgICBoYW5kbGVyLmNhbGwoXHJcbiAgICAgIHRoaXMsXHJcbiAgICAgIHRoaXMuX2NvbnRpbnVlV2l0aC5iaW5kKHRoaXMpLFxyXG4gICAgICB0aGlzLl9mYWlsV2l0aC5iaW5kKHRoaXMpXHJcbiAgICApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gbG9va3NMaWtlQVByb21pc2Uob2JqKSB7XHJcbiAgcmV0dXJuIG9iaiAmJiB0eXBlb2YgKG9iai50aGVuKSA9PT0gXCJmdW5jdGlvblwiO1xyXG59XHJcblxyXG5mdW5jdGlvbiBwYXNzVGhyb3VnaCh2YWx1ZSkge1xyXG4gIHJldHVybiB2YWx1ZTtcclxufVxyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLnByb3RvdHlwZSA9IHtcclxuICB0aGVuOiBmdW5jdGlvbiAobmV4dEZuLCBjYXRjaEZuKSB7XHJcbiAgICB2YXIgbmV4dCA9IFN5bmNocm9ub3VzUHJvbWlzZS51bnJlc29sdmVkKCkuX3NldFBhcmVudCh0aGlzKTtcclxuICAgIGlmICh0aGlzLl9pc1JlamVjdGVkKCkpIHtcclxuICAgICAgaWYgKHRoaXMuX3BhdXNlZCkge1xyXG4gICAgICAgIHRoaXMuX2NvbnRpbnVhdGlvbnMucHVzaCh7XHJcbiAgICAgICAgICBwcm9taXNlOiBuZXh0LFxyXG4gICAgICAgICAgbmV4dEZuOiBuZXh0Rm4sXHJcbiAgICAgICAgICBjYXRjaEZuOiBjYXRjaEZuXHJcbiAgICAgICAgfSk7XHJcbiAgICAgICAgcmV0dXJuIG5leHQ7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGNhdGNoRm4pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIGNhdGNoUmVzdWx0ID0gY2F0Y2hGbih0aGlzLl9lcnJvcik7XHJcbiAgICAgICAgICBpZiAobG9va3NMaWtlQVByb21pc2UoY2F0Y2hSZXN1bHQpKSB7XHJcbiAgICAgICAgICAgIHRoaXMuX2NoYWluUHJvbWlzZURhdGEoY2F0Y2hSZXN1bHQsIG5leHQpO1xyXG4gICAgICAgICAgICByZXR1cm4gbmV4dDtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiBTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShjYXRjaFJlc3VsdCkuX3NldFBhcmVudCh0aGlzKTtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICByZXR1cm4gU3luY2hyb25vdXNQcm9taXNlLnJlamVjdChlKS5fc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gU3luY2hyb25vdXNQcm9taXNlLnJlamVjdCh0aGlzLl9lcnJvcikuX3NldFBhcmVudCh0aGlzKTtcclxuICAgIH1cclxuICAgIHRoaXMuX2NvbnRpbnVhdGlvbnMucHVzaCh7XHJcbiAgICAgIHByb21pc2U6IG5leHQsXHJcbiAgICAgIG5leHRGbjogbmV4dEZuLFxyXG4gICAgICBjYXRjaEZuOiBjYXRjaEZuXHJcbiAgICB9KTtcclxuICAgIHRoaXMuX3J1blJlc29sdXRpb25zKCk7XHJcbiAgICByZXR1cm4gbmV4dDtcclxuICB9LFxyXG4gIGNhdGNoOiBmdW5jdGlvbiAoaGFuZGxlcikge1xyXG4gICAgaWYgKHRoaXMuX2lzUmVzb2x2ZWQoKSkge1xyXG4gICAgICByZXR1cm4gU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUodGhpcy5fZGF0YSkuX3NldFBhcmVudCh0aGlzKTtcclxuICAgIH1cclxuICAgIHZhciBuZXh0ID0gU3luY2hyb25vdXNQcm9taXNlLnVucmVzb2x2ZWQoKS5fc2V0UGFyZW50KHRoaXMpO1xyXG4gICAgdGhpcy5fY29udGludWF0aW9ucy5wdXNoKHtcclxuICAgICAgcHJvbWlzZTogbmV4dCxcclxuICAgICAgY2F0Y2hGbjogaGFuZGxlclxyXG4gICAgfSk7XHJcbiAgICB0aGlzLl9ydW5SZWplY3Rpb25zKCk7XHJcbiAgICByZXR1cm4gbmV4dDtcclxuICB9LFxyXG4gIGZpbmFsbHk6IGZ1bmN0aW9uKGNhbGxiYWNrKSB7XHJcbiAgICB2YXIgcmFuID0gZmFsc2U7XHJcbiAgICBmdW5jdGlvbiBydW5GaW5hbGx5KHJlc3VsdCwgZXJyKSB7XHJcbiAgICAgIGlmICghcmFuKSB7XHJcbiAgICAgICAgcmFuID0gdHJ1ZTtcclxuICAgICAgICBpZiAoIWNhbGxiYWNrKSB7XHJcbiAgICAgICAgICBjYWxsYmFjayA9IHBhc3NUaHJvdWdoO1xyXG4gICAgICAgIH1cclxuICAgICAgICB2YXIgY2FsbGJhY2tSZXN1bHQgPSBjYWxsYmFjayhyZXN1bHQpO1xyXG4gICAgICAgIGlmIChsb29rc0xpa2VBUHJvbWlzZShjYWxsYmFja1Jlc3VsdCkpIHtcclxuICAgICAgICAgIHJldHVybiBjYWxsYmFja1Jlc3VsdC50aGVuKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICBpZiAoZXJyKSB7XHJcbiAgICAgICAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICAgICAgICB9KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzXHJcbiAgICAgIC50aGVuKGZ1bmN0aW9uKHJlc3VsdCkge1xyXG4gICAgICAgIHJldHVybiBydW5GaW5hbGx5KHJlc3VsdCk7XHJcbiAgICAgIH0pXHJcbiAgICAgIC5jYXRjaChmdW5jdGlvbihlcnIpIHtcclxuICAgICAgICByZXR1cm4gcnVuRmluYWxseShudWxsLCBlcnIpO1xyXG4gICAgICB9KTtcclxuICB9LFxyXG4gIHBhdXNlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLl9wYXVzZWQgPSB0cnVlO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfSxcclxuICByZXN1bWU6IGZ1bmN0aW9uICgpIHtcclxuICAgIHZhciBmaXJzdFBhdXNlZCA9IHRoaXMuX2ZpbmRGaXJzdFBhdXNlZCgpO1xyXG4gICAgaWYgKGZpcnN0UGF1c2VkKSB7XHJcbiAgICAgIGZpcnN0UGF1c2VkLl9wYXVzZWQgPSBmYWxzZTtcclxuICAgICAgZmlyc3RQYXVzZWQuX3J1blJlc29sdXRpb25zKCk7XHJcbiAgICAgIGZpcnN0UGF1c2VkLl9ydW5SZWplY3Rpb25zKCk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcztcclxuICB9LFxyXG4gIF9maW5kQW5jZXN0cnk6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLl9jb250aW51YXRpb25zLnJlZHVjZShmdW5jdGlvbiAoYWNjLCBjdXIpIHtcclxuICAgICAgaWYgKGN1ci5wcm9taXNlKSB7XHJcbiAgICAgICAgdmFyIG5vZGUgPSB7XHJcbiAgICAgICAgICBwcm9taXNlOiBjdXIucHJvbWlzZSxcclxuICAgICAgICAgIGNoaWxkcmVuOiBjdXIucHJvbWlzZS5fZmluZEFuY2VzdHJ5KClcclxuICAgICAgICB9O1xyXG4gICAgICAgIGFjYy5wdXNoKG5vZGUpO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBhY2M7XHJcbiAgICB9LCBbXSk7XHJcbiAgfSxcclxuICBfc2V0UGFyZW50OiBmdW5jdGlvbiAocGFyZW50KSB7XHJcbiAgICBpZiAodGhpcy5fcGFyZW50KSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcInBhcmVudCBhbHJlYWR5IHNldFwiKTtcclxuICAgIH1cclxuICAgIHRoaXMuX3BhcmVudCA9IHBhcmVudDtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH0sXHJcbiAgX2NvbnRpbnVlV2l0aDogZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgIHZhciBmaXJzdFBlbmRpbmcgPSB0aGlzLl9maW5kRmlyc3RQZW5kaW5nKCk7XHJcbiAgICBpZiAoZmlyc3RQZW5kaW5nKSB7XHJcbiAgICAgIGZpcnN0UGVuZGluZy5fZGF0YSA9IGRhdGE7XHJcbiAgICAgIGZpcnN0UGVuZGluZy5fc2V0UmVzb2x2ZWQoKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9maW5kRmlyc3RQZW5kaW5nOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5fZmluZEZpcnN0QW5jZXN0b3IoZnVuY3Rpb24gKHRlc3QpIHtcclxuICAgICAgcmV0dXJuIHRlc3QuX2lzUGVuZGluZyAmJiB0ZXN0Ll9pc1BlbmRpbmcoKTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgX2ZpbmRGaXJzdFBhdXNlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgcmV0dXJuIHRoaXMuX2ZpbmRGaXJzdEFuY2VzdG9yKGZ1bmN0aW9uICh0ZXN0KSB7XHJcbiAgICAgIHJldHVybiB0ZXN0Ll9wYXVzZWQ7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9maW5kRmlyc3RBbmNlc3RvcjogZnVuY3Rpb24gKG1hdGNoaW5nKSB7XHJcbiAgICB2YXIgdGVzdCA9IHRoaXM7XHJcbiAgICB2YXIgcmVzdWx0O1xyXG4gICAgd2hpbGUgKHRlc3QpIHtcclxuICAgICAgaWYgKG1hdGNoaW5nKHRlc3QpKSB7XHJcbiAgICAgICAgcmVzdWx0ID0gdGVzdDtcclxuICAgICAgfVxyXG4gICAgICB0ZXN0ID0gdGVzdC5fcGFyZW50O1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9LFxyXG4gIF9mYWlsV2l0aDogZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICB2YXIgZmlyc3RSZWplY3RlZCA9IHRoaXMuX2ZpbmRGaXJzdFBlbmRpbmcoKTtcclxuICAgIGlmIChmaXJzdFJlamVjdGVkKSB7XHJcbiAgICAgIGZpcnN0UmVqZWN0ZWQuX2Vycm9yID0gZXJyb3I7XHJcbiAgICAgIGZpcnN0UmVqZWN0ZWQuX3NldFJlamVjdGVkKCk7XHJcbiAgICB9XHJcbiAgfSxcclxuICBfdGFrZUNvbnRpbnVhdGlvbnM6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLl9jb250aW51YXRpb25zLnNwbGljZSgwLCB0aGlzLl9jb250aW51YXRpb25zLmxlbmd0aCk7XHJcbiAgfSxcclxuICBfcnVuUmVqZWN0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuX3BhdXNlZCB8fCAhdGhpcy5faXNSZWplY3RlZCgpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhclxyXG4gICAgICBlcnJvciA9IHRoaXMuX2Vycm9yLFxyXG4gICAgICBjb250aW51YXRpb25zID0gdGhpcy5fdGFrZUNvbnRpbnVhdGlvbnMoKSxcclxuICAgICAgc2VsZiA9IHRoaXM7XHJcbiAgICBjb250aW51YXRpb25zLmZvckVhY2goZnVuY3Rpb24gKGNvbnQpIHtcclxuICAgICAgaWYgKGNvbnQuY2F0Y2hGbikge1xyXG4gICAgICAgIHRyeSB7XHJcbiAgICAgICAgICB2YXIgY2F0Y2hSZXN1bHQgPSBjb250LmNhdGNoRm4oZXJyb3IpO1xyXG4gICAgICAgICAgc2VsZi5faGFuZGxlVXNlckZ1bmN0aW9uUmVzdWx0KGNhdGNoUmVzdWx0LCBjb250LnByb21pc2UpO1xyXG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcclxuICAgICAgICAgIGNvbnQucHJvbWlzZS5yZWplY3QoZSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2Uge1xyXG4gICAgICAgIGNvbnQucHJvbWlzZS5yZWplY3QoZXJyb3IpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9ydW5SZXNvbHV0aW9uczogZnVuY3Rpb24gKCkge1xyXG4gICAgaWYgKHRoaXMuX3BhdXNlZCB8fCAhdGhpcy5faXNSZXNvbHZlZCgpIHx8IHRoaXMuX2lzUGVuZGluZygpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHZhciBjb250aW51YXRpb25zID0gdGhpcy5fdGFrZUNvbnRpbnVhdGlvbnMoKTtcclxuICAgIGlmIChsb29rc0xpa2VBUHJvbWlzZSh0aGlzLl9kYXRhKSkge1xyXG4gICAgICByZXR1cm4gdGhpcy5faGFuZGxlV2hlblJlc29sdmVkRGF0YUlzUHJvbWlzZSh0aGlzLl9kYXRhKTtcclxuICAgIH1cclxuICAgIHZhciBkYXRhID0gdGhpcy5fZGF0YTtcclxuICAgIHZhciBzZWxmID0gdGhpcztcclxuICAgIGNvbnRpbnVhdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAoY29udCkge1xyXG4gICAgICBpZiAoY29udC5uZXh0Rm4pIHtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgdmFyIHJlc3VsdCA9IGNvbnQubmV4dEZuKGRhdGEpO1xyXG4gICAgICAgICAgc2VsZi5faGFuZGxlVXNlckZ1bmN0aW9uUmVzdWx0KHJlc3VsdCwgY29udC5wcm9taXNlKTtcclxuICAgICAgICB9IGNhdGNoIChlKSB7XHJcbiAgICAgICAgICBzZWxmLl9oYW5kbGVSZXNvbHV0aW9uRXJyb3IoZSwgY29udCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKGNvbnQucHJvbWlzZSkge1xyXG4gICAgICAgIGNvbnQucHJvbWlzZS5yZXNvbHZlKGRhdGEpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9oYW5kbGVSZXNvbHV0aW9uRXJyb3I6IGZ1bmN0aW9uIChlLCBjb250aW51YXRpb24pIHtcclxuICAgIHRoaXMuX3NldFJlamVjdGVkKCk7XHJcbiAgICBpZiAoY29udGludWF0aW9uLmNhdGNoRm4pIHtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBjb250aW51YXRpb24uY2F0Y2hGbihlKTtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH0gY2F0Y2ggKGUyKSB7XHJcbiAgICAgICAgZSA9IGUyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoY29udGludWF0aW9uLnByb21pc2UpIHtcclxuICAgICAgY29udGludWF0aW9uLnByb21pc2UucmVqZWN0KGUpO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgX2hhbmRsZVdoZW5SZXNvbHZlZERhdGFJc1Byb21pc2U6IGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICByZXR1cm4gZGF0YS50aGVuKGZ1bmN0aW9uIChyZXN1bHQpIHtcclxuICAgICAgc2VsZi5fZGF0YSA9IHJlc3VsdDtcclxuICAgICAgc2VsZi5fcnVuUmVzb2x1dGlvbnMoKTtcclxuICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnJvcikge1xyXG4gICAgICBzZWxmLl9lcnJvciA9IGVycm9yO1xyXG4gICAgICBzZWxmLl9zZXRSZWplY3RlZCgpO1xyXG4gICAgICBzZWxmLl9ydW5SZWplY3Rpb25zKCk7XHJcbiAgICB9KTtcclxuICB9LFxyXG4gIF9oYW5kbGVVc2VyRnVuY3Rpb25SZXN1bHQ6IGZ1bmN0aW9uIChkYXRhLCBuZXh0U3luY2hyb25vdXNQcm9taXNlKSB7XHJcbiAgICBpZiAobG9va3NMaWtlQVByb21pc2UoZGF0YSkpIHtcclxuICAgICAgdGhpcy5fY2hhaW5Qcm9taXNlRGF0YShkYXRhLCBuZXh0U3luY2hyb25vdXNQcm9taXNlKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG5leHRTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShkYXRhKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9jaGFpblByb21pc2VEYXRhOiBmdW5jdGlvbiAocHJvbWlzZURhdGEsIG5leHRTeW5jaHJvbm91c1Byb21pc2UpIHtcclxuICAgIHByb21pc2VEYXRhLnRoZW4oZnVuY3Rpb24gKG5ld0RhdGEpIHtcclxuICAgICAgbmV4dFN5bmNocm9ub3VzUHJvbWlzZS5yZXNvbHZlKG5ld0RhdGEpO1xyXG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKG5ld0Vycm9yKSB7XHJcbiAgICAgIG5leHRTeW5jaHJvbm91c1Byb21pc2UucmVqZWN0KG5ld0Vycm9yKTtcclxuICAgIH0pO1xyXG4gIH0sXHJcbiAgX3NldFJlc29sdmVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICB0aGlzLnN0YXR1cyA9IFJFU09MVkVEO1xyXG4gICAgaWYgKCF0aGlzLl9wYXVzZWQpIHtcclxuICAgICAgdGhpcy5fcnVuUmVzb2x1dGlvbnMoKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9zZXRSZWplY3RlZDogZnVuY3Rpb24gKCkge1xyXG4gICAgdGhpcy5zdGF0dXMgPSBSRUpFQ1RFRDtcclxuICAgIGlmICghdGhpcy5fcGF1c2VkKSB7XHJcbiAgICAgIHRoaXMuX3J1blJlamVjdGlvbnMoKTtcclxuICAgIH1cclxuICB9LFxyXG4gIF9pc1BlbmRpbmc6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXR1cyA9PT0gUEVORElORztcclxuICB9LFxyXG4gIF9pc1Jlc29sdmVkOiBmdW5jdGlvbiAoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdGF0dXMgPT09IFJFU09MVkVEO1xyXG4gIH0sXHJcbiAgX2lzUmVqZWN0ZWQ6IGZ1bmN0aW9uICgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0YXR1cyA9PT0gUkVKRUNURUQ7XHJcbiAgfVxyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUgPSBmdW5jdGlvbiAocmVzdWx0KSB7XHJcbiAgcmV0dXJuIG5ldyBTeW5jaHJvbm91c1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgaWYgKGxvb2tzTGlrZUFQcm9taXNlKHJlc3VsdCkpIHtcclxuICAgICAgcmVzdWx0LnRoZW4oZnVuY3Rpb24gKG5ld1Jlc3VsdCkge1xyXG4gICAgICAgIHJlc29sdmUobmV3UmVzdWx0KTtcclxuICAgICAgfSkuY2F0Y2goZnVuY3Rpb24gKGVycm9yKSB7XHJcbiAgICAgICAgcmVqZWN0KGVycm9yKTtcclxuICAgICAgfSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXNvbHZlKHJlc3VsdCk7XHJcbiAgICB9XHJcbiAgfSk7XHJcbn07XHJcblxyXG5TeW5jaHJvbm91c1Byb21pc2UucmVqZWN0ID0gZnVuY3Rpb24gKHJlc3VsdCkge1xyXG4gIHJldHVybiBuZXcgU3luY2hyb25vdXNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHJlamVjdChyZXN1bHQpO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLnVucmVzb2x2ZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgcmV0dXJuIG5ldyBTeW5jaHJvbm91c1Byb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkge1xyXG4gICAgdGhpcy5yZXNvbHZlID0gcmVzb2x2ZTtcclxuICAgIHRoaXMucmVqZWN0ID0gcmVqZWN0O1xyXG4gIH0pO1xyXG59O1xyXG5cclxuU3luY2hyb25vdXNQcm9taXNlLmFsbCA9IGZ1bmN0aW9uICgpIHtcclxuICB2YXIgYXJncyA9IG1ha2VBcnJheUZyb20oYXJndW1lbnRzKTtcclxuICBpZiAoQXJyYXkuaXNBcnJheShhcmdzWzBdKSkge1xyXG4gICAgYXJncyA9IGFyZ3NbMF07XHJcbiAgfVxyXG4gIGlmICghYXJncy5sZW5ndGgpIHtcclxuICAgIHJldHVybiBTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShbXSk7XHJcbiAgfVxyXG4gIHJldHVybiBuZXcgU3luY2hyb25vdXNQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgIHZhclxyXG4gICAgICBhbGxEYXRhID0gW10sXHJcbiAgICAgIG51bVJlc29sdmVkID0gMCxcclxuICAgICAgZG9SZXNvbHZlID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIGlmIChudW1SZXNvbHZlZCA9PT0gYXJncy5sZW5ndGgpIHtcclxuICAgICAgICAgIHJlc29sdmUoYWxsRGF0YSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9LFxyXG4gICAgICByZWplY3RlZCA9IGZhbHNlLFxyXG4gICAgICBkb1JlamVjdCA9IGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBpZiAocmVqZWN0ZWQpIHtcclxuICAgICAgICAgIHJldHVybjtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmVqZWN0ZWQgPSB0cnVlO1xyXG4gICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICB9O1xyXG4gICAgYXJncy5mb3JFYWNoKGZ1bmN0aW9uIChhcmcsIGlkeCkge1xyXG4gICAgICBTeW5jaHJvbm91c1Byb21pc2UucmVzb2x2ZShhcmcpLnRoZW4oZnVuY3Rpb24gKHRoaXNSZXN1bHQpIHtcclxuICAgICAgICBhbGxEYXRhW2lkeF0gPSB0aGlzUmVzdWx0O1xyXG4gICAgICAgIG51bVJlc29sdmVkICs9IDE7XHJcbiAgICAgICAgZG9SZXNvbHZlKCk7XHJcbiAgICAgIH0pLmNhdGNoKGZ1bmN0aW9uIChlcnIpIHtcclxuICAgICAgICBkb1JlamVjdChlcnIpO1xyXG4gICAgICB9KTtcclxuICAgIH0pO1xyXG4gIH0pO1xyXG59O1xyXG5cclxuLyoganNoaW50IGlnbm9yZTpzdGFydCAqL1xyXG5pZiAoUHJvbWlzZSA9PT0gU3luY2hyb25vdXNQcm9taXNlKSB7XHJcbiAgdGhyb3cgbmV3IEVycm9yKFwiUGxlYXNlIHVzZSBTeW5jaHJvbm91c1Byb21pc2UuaW5zdGFsbEdsb2JhbGx5KCkgdG8gaW5zdGFsbCBnbG9iYWxseVwiKTtcclxufVxyXG52YXIgUmVhbFByb21pc2UgPSBQcm9taXNlO1xyXG5TeW5jaHJvbm91c1Byb21pc2UuaW5zdGFsbEdsb2JhbGx5ID0gZnVuY3Rpb24oX19hd2FpdGVyKSB7XHJcbiAgaWYgKFByb21pc2UgPT09IFN5bmNocm9ub3VzUHJvbWlzZSkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcjtcclxuICB9XHJcbiAgdmFyIHJlc3VsdCA9IHBhdGNoQXdhaXRlcklmUmVxdWlyZWQoX19hd2FpdGVyKTtcclxuICBQcm9taXNlID0gU3luY2hyb25vdXNQcm9taXNlO1xyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07XHJcblxyXG5TeW5jaHJvbm91c1Byb21pc2UudW5pbnN0YWxsR2xvYmFsbHkgPSBmdW5jdGlvbigpIHtcclxuICBpZiAoUHJvbWlzZSA9PT0gU3luY2hyb25vdXNQcm9taXNlKSB7XHJcbiAgICBQcm9taXNlID0gUmVhbFByb21pc2U7XHJcbiAgfVxyXG59O1xyXG5cclxuZnVuY3Rpb24gcGF0Y2hBd2FpdGVySWZSZXF1aXJlZChfX2F3YWl0ZXIpIHtcclxuICBpZiAodHlwZW9mKF9fYXdhaXRlcikgPT09IFwidW5kZWZpbmVkXCIgfHwgX19hd2FpdGVyLl9fcGF0Y2hlZCkge1xyXG4gICAgcmV0dXJuIF9fYXdhaXRlcjtcclxuICB9XHJcbiAgdmFyIG9yaWdpbmFsQXdhaXRlciA9IF9fYXdhaXRlcjtcclxuICBfX2F3YWl0ZXIgPSBmdW5jdGlvbigpIHtcclxuICAgIHZhciBQcm9taXNlID0gUmVhbFByb21pc2U7XHJcbiAgICBvcmlnaW5hbEF3YWl0ZXIuYXBwbHkodGhpcywgbWFrZUFycmF5RnJvbShhcmd1bWVudHMpKTtcclxuICB9O1xyXG4gIF9fYXdhaXRlci5fX3BhdGNoZWQgPSB0cnVlO1xyXG4gIHJldHVybiBfX2F3YWl0ZXI7XHJcbn1cclxuLyoganNoaW50IGlnbm9yZTplbmQgKi9cclxuXHJcbm1vZHVsZS5leHBvcnRzID0ge1xyXG4gIFN5bmNocm9ub3VzUHJvbWlzZTogU3luY2hyb25vdXNQcm9taXNlXHJcbn07XHJcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgc2hhcmVkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZCcpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG52YXIgTkFUSVZFX1NZTUJPTCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9uYXRpdmUtc3ltYm9sJyk7XG52YXIgVVNFX1NZTUJPTF9BU19VSUQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdXNlLXN5bWJvbC1hcy11aWQnKTtcblxudmFyIFdlbGxLbm93blN5bWJvbHNTdG9yZSA9IHNoYXJlZCgnd2tzJyk7XG52YXIgU3ltYm9sID0gZ2xvYmFsLlN5bWJvbDtcbnZhciBjcmVhdGVXZWxsS25vd25TeW1ib2wgPSBVU0VfU1lNQk9MX0FTX1VJRCA/IFN5bWJvbCA6IFN5bWJvbCAmJiBTeW1ib2wud2l0aG91dFNldHRlciB8fCB1aWQ7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWUpIHtcbiAgaWYgKCFoYXMoV2VsbEtub3duU3ltYm9sc1N0b3JlLCBuYW1lKSkge1xuICAgIGlmIChOQVRJVkVfU1lNQk9MICYmIGhhcyhTeW1ib2wsIG5hbWUpKSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBTeW1ib2xbbmFtZV07XG4gICAgZWxzZSBXZWxsS25vd25TeW1ib2xzU3RvcmVbbmFtZV0gPSBjcmVhdGVXZWxsS25vd25TeW1ib2woJ1N5bWJvbC4nICsgbmFtZSk7XG4gIH0gcmV0dXJuIFdlbGxLbm93blN5bWJvbHNTdG9yZVtuYW1lXTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhZmFpbHMoZnVuY3Rpb24gKCkge1xuICByZXR1cm4gT2JqZWN0LmRlZmluZVByb3BlcnR5KHt9LCAxLCB7IGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gNzsgfSB9KVsxXSAhPSA3O1xufSk7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xuXG52YXIgbmF0aXZlRGVmaW5lUHJvcGVydHkgPSBPYmplY3QuZGVmaW5lUHJvcGVydHk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydHlgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmRlZmluZXByb3BlcnR5XG5leHBvcnRzLmYgPSBERVNDUklQVE9SUyA/IG5hdGl2ZURlZmluZVByb3BlcnR5IDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydHkoTywgUCwgQXR0cmlidXRlcykge1xuICBhbk9iamVjdChPKTtcbiAgUCA9IHRvUHJpbWl0aXZlKFAsIHRydWUpO1xuICBhbk9iamVjdChBdHRyaWJ1dGVzKTtcbiAgaWYgKElFOF9ET01fREVGSU5FKSB0cnkge1xuICAgIHJldHVybiBuYXRpdmVEZWZpbmVQcm9wZXJ0eShPLCBQLCBBdHRyaWJ1dGVzKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHsgLyogZW1wdHkgKi8gfVxuICBpZiAoJ2dldCcgaW4gQXR0cmlidXRlcyB8fCAnc2V0JyBpbiBBdHRyaWJ1dGVzKSB0aHJvdyBUeXBlRXJyb3IoJ0FjY2Vzc29ycyBub3Qgc3VwcG9ydGVkJyk7XG4gIGlmICgndmFsdWUnIGluIEF0dHJpYnV0ZXMpIE9bUF0gPSBBdHRyaWJ1dGVzLnZhbHVlO1xuICByZXR1cm4gTztcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gdHlwZW9mIGl0ID09PSAnb2JqZWN0JyA/IGl0ICE9PSBudWxsIDogdHlwZW9mIGl0ID09PSAnZnVuY3Rpb24nO1xufTtcbiIsInZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgaWYgKCFpc09iamVjdChpdCkpIHtcbiAgICB0aHJvdyBUeXBlRXJyb3IoU3RyaW5nKGl0KSArICcgaXMgbm90IGFuIG9iamVjdCcpO1xuICB9IHJldHVybiBpdDtcbn07XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9yaWdpbmFsTW9kdWxlKSB7XG5cdGlmICghb3JpZ2luYWxNb2R1bGUud2VicGFja1BvbHlmaWxsKSB7XG5cdFx0dmFyIG1vZHVsZSA9IE9iamVjdC5jcmVhdGUob3JpZ2luYWxNb2R1bGUpO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImV4cG9ydHNcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZVxuXHRcdH0pO1xuXHRcdG1vZHVsZS53ZWJwYWNrUG9seWZpbGwgPSAxO1xuXHR9XG5cdHJldHVybiBtb2R1bGU7XG59O1xuIiwiLy8gdG9PYmplY3Qgd2l0aCBmYWxsYmFjayBmb3Igbm9uLWFycmF5LWxpa2UgRVMzIHN0cmluZ3NcbnZhciBJbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2luZGV4ZWQtb2JqZWN0Jyk7XG52YXIgcmVxdWlyZU9iamVjdENvZXJjaWJsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9yZXF1aXJlLW9iamVjdC1jb2VyY2libGUnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIEluZGV4ZWRPYmplY3QocmVxdWlyZU9iamVjdENvZXJjaWJsZShpdCkpO1xufTtcbiIsIid1c2Ugc3RyaWN0JztcblxuZnVuY3Rpb24gY2hlY2tEQ0UoKSB7XG4gIC8qIGdsb2JhbCBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gKi9cbiAgaWYgKFxuICAgIHR5cGVvZiBfX1JFQUNUX0RFVlRPT0xTX0dMT0JBTF9IT09LX18gPT09ICd1bmRlZmluZWQnIHx8XG4gICAgdHlwZW9mIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRSAhPT0gJ2Z1bmN0aW9uJ1xuICApIHtcbiAgICByZXR1cm47XG4gIH1cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAvLyBUaGlzIGJyYW5jaCBpcyB1bnJlYWNoYWJsZSBiZWNhdXNlIHRoaXMgZnVuY3Rpb24gaXMgb25seSBjYWxsZWRcbiAgICAvLyBpbiBwcm9kdWN0aW9uLCBidXQgdGhlIGNvbmRpdGlvbiBpcyB0cnVlIG9ubHkgaW4gZGV2ZWxvcG1lbnQuXG4gICAgLy8gVGhlcmVmb3JlIGlmIHRoZSBicmFuY2ggaXMgc3RpbGwgaGVyZSwgZGVhZCBjb2RlIGVsaW1pbmF0aW9uIHdhc24ndFxuICAgIC8vIHByb3Blcmx5IGFwcGxpZWQuXG4gICAgLy8gRG9uJ3QgY2hhbmdlIHRoZSBtZXNzYWdlLiBSZWFjdCBEZXZUb29scyByZWxpZXMgb24gaXQuIEFsc28gbWFrZSBzdXJlXG4gICAgLy8gdGhpcyBtZXNzYWdlIGRvZXNuJ3Qgb2NjdXIgZWxzZXdoZXJlIGluIHRoaXMgZnVuY3Rpb24sIG9yIGl0IHdpbGwgY2F1c2VcbiAgICAvLyBhIGZhbHNlIHBvc2l0aXZlLlxuICAgIHRocm93IG5ldyBFcnJvcignXl9eJyk7XG4gIH1cbiAgdHJ5IHtcbiAgICAvLyBWZXJpZnkgdGhhdCB0aGUgY29kZSBhYm92ZSBoYXMgYmVlbiBkZWFkIGNvZGUgZWxpbWluYXRlZCAoRENFJ2QpLlxuICAgIF9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXy5jaGVja0RDRShjaGVja0RDRSk7XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIC8vIERldlRvb2xzIHNob3VsZG4ndCBjcmFzaCBSZWFjdCwgbm8gbWF0dGVyIHdoYXQuXG4gICAgLy8gV2Ugc2hvdWxkIHN0aWxsIHJlcG9ydCBpbiBjYXNlIHdlIGJyZWFrIHRoaXMgY29kZS5cbiAgICBjb25zb2xlLmVycm9yKGVycik7XG4gIH1cbn1cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgLy8gRENFIGNoZWNrIHNob3VsZCBoYXBwZW4gYmVmb3JlIFJlYWN0RE9NIGJ1bmRsZSBleGVjdXRlcyBzbyB0aGF0XG4gIC8vIERldlRvb2xzIGNhbiByZXBvcnQgYmFkIG1pbmlmaWNhdGlvbiBkdXJpbmcgaW5qZWN0aW9uLlxuICBjaGVja0RDRSgpO1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3JlYWN0LWRvbS5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1kb20uZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9yZWFjdC1pcy5kZXZlbG9wbWVudC5qcycpO1xufVxuIiwiLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuZXhwb3J0IGRlZmF1bHQgZnJlZUdsb2JhbDtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJfMl94N0lGTmNhZmViRE9OQlN6MUlqdVwiLFwibGVmdFBhcnRcIjpcIlNhSmFDTG1uOWt4dm11eXJYTXR2YlwiLFwicmlnaHRQYXJ0XCI6XCJfMktZMWIxQXlRcFc1bUVuVEZOQlVVX1wifTsiLCJtb2R1bGUuZXhwb3J0cyA9IGZhbHNlO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgdHJ5IHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoZ2xvYmFsLCBrZXksIHZhbHVlKTtcbiAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICBnbG9iYWxba2V5XSA9IHZhbHVlO1xuICB9IHJldHVybiB2YWx1ZTtcbn07XG4iLCJtb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChiaXRtYXAsIHZhbHVlKSB7XG4gIHJldHVybiB7XG4gICAgZW51bWVyYWJsZTogIShiaXRtYXAgJiAxKSxcbiAgICBjb25maWd1cmFibGU6ICEoYml0bWFwICYgMiksXG4gICAgd3JpdGFibGU6ICEoYml0bWFwICYgNCksXG4gICAgdmFsdWU6IHZhbHVlXG4gIH07XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8vIElFOC0gZG9uJ3QgZW51bSBidWcga2V5c1xubW9kdWxlLmV4cG9ydHMgPSBbXG4gICdjb25zdHJ1Y3RvcicsXG4gICdoYXNPd25Qcm9wZXJ0eScsXG4gICdpc1Byb3RvdHlwZU9mJyxcbiAgJ3Byb3BlcnR5SXNFbnVtZXJhYmxlJyxcbiAgJ3RvTG9jYWxlU3RyaW5nJyxcbiAgJ3RvU3RyaW5nJyxcbiAgJ3ZhbHVlT2YnXG5dO1xuIiwidmFyIHNoYXJlZCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQnKTtcbnZhciB1aWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdWlkJyk7XG5cbnZhciBrZXlzID0gc2hhcmVkKCdrZXlzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICByZXR1cm4ga2V5c1trZXldIHx8IChrZXlzW2tleV0gPSB1aWQoa2V5KSk7XG59O1xuIiwibW9kdWxlLmV4cG9ydHMgPSB7fTtcbiIsIi8qIGdsb2JhbCB3aW5kb3cgKi9cbmltcG9ydCBwb255ZmlsbCBmcm9tICcuL3BvbnlmaWxsLmpzJztcblxudmFyIHJvb3Q7XG5cbmlmICh0eXBlb2Ygc2VsZiAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgcm9vdCA9IHNlbGY7XG59IGVsc2UgaWYgKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSB3aW5kb3c7XG59IGVsc2UgaWYgKHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBnbG9iYWw7XG59IGVsc2UgaWYgKHR5cGVvZiBtb2R1bGUgIT09ICd1bmRlZmluZWQnKSB7XG4gIHJvb3QgPSBtb2R1bGU7XG59IGVsc2Uge1xuICByb290ID0gRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcbn1cblxudmFyIHJlc3VsdCA9IHBvbnlmaWxsKHJvb3QpO1xuZXhwb3J0IGRlZmF1bHQgcmVzdWx0O1xuIiwiaW1wb3J0IFJlYWN0LCB7IENvbXBvbmVudCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBfaW5oZXJpdHNMb29zZSBmcm9tICdAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9pbmhlcml0c0xvb3NlJztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgd2FybmluZyBmcm9tICd0aW55LXdhcm5pbmcnO1xuXG52YXIgTUFYX1NJR05FRF8zMV9CSVRfSU5UID0gMTA3Mzc0MTgyMztcbnZhciBjb21tb25qc0dsb2JhbCA9IHR5cGVvZiBnbG9iYWxUaGlzICE9PSAndW5kZWZpbmVkJyA/IGdsb2JhbFRoaXMgOiB0eXBlb2Ygd2luZG93ICE9PSAndW5kZWZpbmVkJyA/IHdpbmRvdyA6IHR5cGVvZiBnbG9iYWwgIT09ICd1bmRlZmluZWQnID8gZ2xvYmFsIDoge307XG5cbmZ1bmN0aW9uIGdldFVuaXF1ZUlkKCkge1xuICB2YXIga2V5ID0gJ19fZ2xvYmFsX3VuaXF1ZV9pZF9fJztcbiAgcmV0dXJuIGNvbW1vbmpzR2xvYmFsW2tleV0gPSAoY29tbW9uanNHbG9iYWxba2V5XSB8fCAwKSArIDE7XG59XG5cbmZ1bmN0aW9uIG9iamVjdElzKHgsIHkpIHtcbiAgaWYgKHggPT09IHkpIHtcbiAgICByZXR1cm4geCAhPT0gMCB8fCAxIC8geCA9PT0gMSAvIHk7XG4gIH0gZWxzZSB7XG4gICAgcmV0dXJuIHggIT09IHggJiYgeSAhPT0geTtcbiAgfVxufVxuXG5mdW5jdGlvbiBjcmVhdGVFdmVudEVtaXR0ZXIodmFsdWUpIHtcbiAgdmFyIGhhbmRsZXJzID0gW107XG4gIHJldHVybiB7XG4gICAgb246IGZ1bmN0aW9uIG9uKGhhbmRsZXIpIHtcbiAgICAgIGhhbmRsZXJzLnB1c2goaGFuZGxlcik7XG4gICAgfSxcbiAgICBvZmY6IGZ1bmN0aW9uIG9mZihoYW5kbGVyKSB7XG4gICAgICBoYW5kbGVycyA9IGhhbmRsZXJzLmZpbHRlcihmdW5jdGlvbiAoaCkge1xuICAgICAgICByZXR1cm4gaCAhPT0gaGFuZGxlcjtcbiAgICAgIH0pO1xuICAgIH0sXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSxcbiAgICBzZXQ6IGZ1bmN0aW9uIHNldChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgIHZhbHVlID0gbmV3VmFsdWU7XG4gICAgICBoYW5kbGVycy5mb3JFYWNoKGZ1bmN0aW9uIChoYW5kbGVyKSB7XG4gICAgICAgIHJldHVybiBoYW5kbGVyKHZhbHVlLCBjaGFuZ2VkQml0cyk7XG4gICAgICB9KTtcbiAgICB9XG4gIH07XG59XG5cbmZ1bmN0aW9uIG9ubHlDaGlsZChjaGlsZHJlbikge1xuICByZXR1cm4gQXJyYXkuaXNBcnJheShjaGlsZHJlbikgPyBjaGlsZHJlblswXSA6IGNoaWxkcmVuO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVSZWFjdENvbnRleHQoZGVmYXVsdFZhbHVlLCBjYWxjdWxhdGVDaGFuZ2VkQml0cykge1xuICB2YXIgX1Byb3ZpZGVyJGNoaWxkQ29udGV4LCBfQ29uc3VtZXIkY29udGV4dFR5cGU7XG5cbiAgdmFyIGNvbnRleHRQcm9wID0gJ19fY3JlYXRlLXJlYWN0LWNvbnRleHQtJyArIGdldFVuaXF1ZUlkKCkgKyAnX18nO1xuXG4gIHZhciBQcm92aWRlciA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoX0NvbXBvbmVudCkge1xuICAgIF9pbmhlcml0c0xvb3NlKFByb3ZpZGVyLCBfQ29tcG9uZW50KTtcblxuICAgIGZ1bmN0aW9uIFByb3ZpZGVyKCkge1xuICAgICAgdmFyIF90aGlzO1xuXG4gICAgICBfdGhpcyA9IF9Db21wb25lbnQuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMuZW1pdHRlciA9IGNyZWF0ZUV2ZW50RW1pdHRlcihfdGhpcy5wcm9wcy52YWx1ZSk7XG4gICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuXG4gICAgdmFyIF9wcm90byA9IFByb3ZpZGVyLnByb3RvdHlwZTtcblxuICAgIF9wcm90by5nZXRDaGlsZENvbnRleHQgPSBmdW5jdGlvbiBnZXRDaGlsZENvbnRleHQoKSB7XG4gICAgICB2YXIgX3JlZjtcblxuICAgICAgcmV0dXJuIF9yZWYgPSB7fSwgX3JlZltjb250ZXh0UHJvcF0gPSB0aGlzLmVtaXR0ZXIsIF9yZWY7XG4gICAgfTtcblxuICAgIF9wcm90by5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIGlmICh0aGlzLnByb3BzLnZhbHVlICE9PSBuZXh0UHJvcHMudmFsdWUpIHtcbiAgICAgICAgdmFyIG9sZFZhbHVlID0gdGhpcy5wcm9wcy52YWx1ZTtcbiAgICAgICAgdmFyIG5ld1ZhbHVlID0gbmV4dFByb3BzLnZhbHVlO1xuICAgICAgICB2YXIgY2hhbmdlZEJpdHM7XG5cbiAgICAgICAgaWYgKG9iamVjdElzKG9sZFZhbHVlLCBuZXdWYWx1ZSkpIHtcbiAgICAgICAgICBjaGFuZ2VkQml0cyA9IDA7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2hhbmdlZEJpdHMgPSB0eXBlb2YgY2FsY3VsYXRlQ2hhbmdlZEJpdHMgPT09ICdmdW5jdGlvbicgPyBjYWxjdWxhdGVDaGFuZ2VkQml0cyhvbGRWYWx1ZSwgbmV3VmFsdWUpIDogTUFYX1NJR05FRF8zMV9CSVRfSU5UO1xuXG4gICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgIHdhcm5pbmcoKGNoYW5nZWRCaXRzICYgTUFYX1NJR05FRF8zMV9CSVRfSU5UKSA9PT0gY2hhbmdlZEJpdHMsICdjYWxjdWxhdGVDaGFuZ2VkQml0czogRXhwZWN0ZWQgdGhlIHJldHVybiB2YWx1ZSB0byBiZSBhICcgKyAnMzEtYml0IGludGVnZXIuIEluc3RlYWQgcmVjZWl2ZWQ6ICcgKyBjaGFuZ2VkQml0cyk7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgY2hhbmdlZEJpdHMgfD0gMDtcblxuICAgICAgICAgIGlmIChjaGFuZ2VkQml0cyAhPT0gMCkge1xuICAgICAgICAgICAgdGhpcy5lbWl0dGVyLnNldChuZXh0UHJvcHMudmFsdWUsIGNoYW5nZWRCaXRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLmNoaWxkcmVuO1xuICAgIH07XG5cbiAgICByZXR1cm4gUHJvdmlkZXI7XG4gIH0oQ29tcG9uZW50KTtcblxuICBQcm92aWRlci5jaGlsZENvbnRleHRUeXBlcyA9IChfUHJvdmlkZXIkY2hpbGRDb250ZXggPSB7fSwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4W2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QuaXNSZXF1aXJlZCwgX1Byb3ZpZGVyJGNoaWxkQ29udGV4KTtcblxuICB2YXIgQ29uc3VtZXIgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKF9Db21wb25lbnQyKSB7XG4gICAgX2luaGVyaXRzTG9vc2UoQ29uc3VtZXIsIF9Db21wb25lbnQyKTtcblxuICAgIGZ1bmN0aW9uIENvbnN1bWVyKCkge1xuICAgICAgdmFyIF90aGlzMjtcblxuICAgICAgX3RoaXMyID0gX0NvbXBvbmVudDIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgX3RoaXMyLnN0YXRlID0ge1xuICAgICAgICB2YWx1ZTogX3RoaXMyLmdldFZhbHVlKClcbiAgICAgIH07XG5cbiAgICAgIF90aGlzMi5vblVwZGF0ZSA9IGZ1bmN0aW9uIChuZXdWYWx1ZSwgY2hhbmdlZEJpdHMpIHtcbiAgICAgICAgdmFyIG9ic2VydmVkQml0cyA9IF90aGlzMi5vYnNlcnZlZEJpdHMgfCAwO1xuXG4gICAgICAgIGlmICgob2JzZXJ2ZWRCaXRzICYgY2hhbmdlZEJpdHMpICE9PSAwKSB7XG4gICAgICAgICAgX3RoaXMyLnNldFN0YXRlKHtcbiAgICAgICAgICAgIHZhbHVlOiBfdGhpczIuZ2V0VmFsdWUoKVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gX3RoaXMyO1xuICAgIH1cblxuICAgIHZhciBfcHJvdG8yID0gQ29uc3VtZXIucHJvdG90eXBlO1xuXG4gICAgX3Byb3RvMi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyhuZXh0UHJvcHMpIHtcbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSBuZXh0UHJvcHMub2JzZXJ2ZWRCaXRzO1xuICAgICAgdGhpcy5vYnNlcnZlZEJpdHMgPSBvYnNlcnZlZEJpdHMgPT09IHVuZGVmaW5lZCB8fCBvYnNlcnZlZEJpdHMgPT09IG51bGwgPyBNQVhfU0lHTkVEXzMxX0JJVF9JTlQgOiBvYnNlcnZlZEJpdHM7XG4gICAgfTtcblxuICAgIF9wcm90bzIuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbiBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAgIGlmICh0aGlzLmNvbnRleHRbY29udGV4dFByb3BdKSB7XG4gICAgICAgIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0ub24odGhpcy5vblVwZGF0ZSk7XG4gICAgICB9XG5cbiAgICAgIHZhciBvYnNlcnZlZEJpdHMgPSB0aGlzLnByb3BzLm9ic2VydmVkQml0cztcbiAgICAgIHRoaXMub2JzZXJ2ZWRCaXRzID0gb2JzZXJ2ZWRCaXRzID09PSB1bmRlZmluZWQgfHwgb2JzZXJ2ZWRCaXRzID09PSBudWxsID8gTUFYX1NJR05FRF8zMV9CSVRfSU5UIDogb2JzZXJ2ZWRCaXRzO1xuICAgIH07XG5cbiAgICBfcHJvdG8yLmNvbXBvbmVudFdpbGxVbm1vdW50ID0gZnVuY3Rpb24gY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgICBpZiAodGhpcy5jb250ZXh0W2NvbnRleHRQcm9wXSkge1xuICAgICAgICB0aGlzLmNvbnRleHRbY29udGV4dFByb3BdLm9mZih0aGlzLm9uVXBkYXRlKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgX3Byb3RvMi5nZXRWYWx1ZSA9IGZ1bmN0aW9uIGdldFZhbHVlKCkge1xuICAgICAgaWYgKHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0pIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGV4dFtjb250ZXh0UHJvcF0uZ2V0KCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gZGVmYXVsdFZhbHVlO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBfcHJvdG8yLnJlbmRlciA9IGZ1bmN0aW9uIHJlbmRlcigpIHtcbiAgICAgIHJldHVybiBvbmx5Q2hpbGQodGhpcy5wcm9wcy5jaGlsZHJlbikodGhpcy5zdGF0ZS52YWx1ZSk7XG4gICAgfTtcblxuICAgIHJldHVybiBDb25zdW1lcjtcbiAgfShDb21wb25lbnQpO1xuXG4gIENvbnN1bWVyLmNvbnRleHRUeXBlcyA9IChfQ29uc3VtZXIkY29udGV4dFR5cGUgPSB7fSwgX0NvbnN1bWVyJGNvbnRleHRUeXBlW2NvbnRleHRQcm9wXSA9IFByb3BUeXBlcy5vYmplY3QsIF9Db25zdW1lciRjb250ZXh0VHlwZSk7XG4gIHJldHVybiB7XG4gICAgUHJvdmlkZXI6IFByb3ZpZGVyLFxuICAgIENvbnN1bWVyOiBDb25zdW1lclxuICB9O1xufVxuXG52YXIgaW5kZXggPSBSZWFjdC5jcmVhdGVDb250ZXh0IHx8IGNyZWF0ZVJlYWN0Q29udGV4dDtcblxuZXhwb3J0IGRlZmF1bHQgaW5kZXg7XG4iLCJ2YXIgaXNhcnJheSA9IHJlcXVpcmUoJ2lzYXJyYXknKVxuXG4vKipcbiAqIEV4cG9zZSBgcGF0aFRvUmVnZXhwYC5cbiAqL1xubW9kdWxlLmV4cG9ydHMgPSBwYXRoVG9SZWdleHBcbm1vZHVsZS5leHBvcnRzLnBhcnNlID0gcGFyc2Vcbm1vZHVsZS5leHBvcnRzLmNvbXBpbGUgPSBjb21waWxlXG5tb2R1bGUuZXhwb3J0cy50b2tlbnNUb0Z1bmN0aW9uID0gdG9rZW5zVG9GdW5jdGlvblxubW9kdWxlLmV4cG9ydHMudG9rZW5zVG9SZWdFeHAgPSB0b2tlbnNUb1JlZ0V4cFxuXG4vKipcbiAqIFRoZSBtYWluIHBhdGggbWF0Y2hpbmcgcmVnZXhwIHV0aWxpdHkuXG4gKlxuICogQHR5cGUge1JlZ0V4cH1cbiAqL1xudmFyIFBBVEhfUkVHRVhQID0gbmV3IFJlZ0V4cChbXG4gIC8vIE1hdGNoIGVzY2FwZWQgY2hhcmFjdGVycyB0aGF0IHdvdWxkIG90aGVyd2lzZSBhcHBlYXIgaW4gZnV0dXJlIG1hdGNoZXMuXG4gIC8vIFRoaXMgYWxsb3dzIHRoZSB1c2VyIHRvIGVzY2FwZSBzcGVjaWFsIGNoYXJhY3RlcnMgdGhhdCB3b24ndCB0cmFuc2Zvcm0uXG4gICcoXFxcXFxcXFwuKScsXG4gIC8vIE1hdGNoIEV4cHJlc3Mtc3R5bGUgcGFyYW1ldGVycyBhbmQgdW4tbmFtZWQgcGFyYW1ldGVycyB3aXRoIGEgcHJlZml4XG4gIC8vIGFuZCBvcHRpb25hbCBzdWZmaXhlcy4gTWF0Y2hlcyBhcHBlYXIgYXM6XG4gIC8vXG4gIC8vIFwiLzp0ZXN0KFxcXFxkKyk/XCIgPT4gW1wiL1wiLCBcInRlc3RcIiwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgXCI/XCIsIHVuZGVmaW5lZF1cbiAgLy8gXCIvcm91dGUoXFxcXGQrKVwiICA9PiBbdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCJcXGQrXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkXVxuICAvLyBcIi8qXCIgICAgICAgICAgICA9PiBbXCIvXCIsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgXCIqXCJdXG4gICcoW1xcXFwvLl0pPyg/Oig/OlxcXFw6KFxcXFx3KykoPzpcXFxcKCgoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpXSkrKVxcXFwpKT98XFxcXCgoKD86XFxcXFxcXFwufFteXFxcXFxcXFwoKV0pKylcXFxcKSkoWysqP10pP3woXFxcXCopKSdcbl0uam9pbignfCcpLCAnZycpXG5cbi8qKlxuICogUGFyc2UgYSBzdHJpbmcgZm9yIHRoZSByYXcgdG9rZW5zLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHN0clxuICogQHBhcmFtICB7T2JqZWN0PX0gb3B0aW9uc1xuICogQHJldHVybiB7IUFycmF5fVxuICovXG5mdW5jdGlvbiBwYXJzZSAoc3RyLCBvcHRpb25zKSB7XG4gIHZhciB0b2tlbnMgPSBbXVxuICB2YXIga2V5ID0gMFxuICB2YXIgaW5kZXggPSAwXG4gIHZhciBwYXRoID0gJydcbiAgdmFyIGRlZmF1bHREZWxpbWl0ZXIgPSBvcHRpb25zICYmIG9wdGlvbnMuZGVsaW1pdGVyIHx8ICcvJ1xuICB2YXIgcmVzXG5cbiAgd2hpbGUgKChyZXMgPSBQQVRIX1JFR0VYUC5leGVjKHN0cikpICE9IG51bGwpIHtcbiAgICB2YXIgbSA9IHJlc1swXVxuICAgIHZhciBlc2NhcGVkID0gcmVzWzFdXG4gICAgdmFyIG9mZnNldCA9IHJlcy5pbmRleFxuICAgIHBhdGggKz0gc3RyLnNsaWNlKGluZGV4LCBvZmZzZXQpXG4gICAgaW5kZXggPSBvZmZzZXQgKyBtLmxlbmd0aFxuXG4gICAgLy8gSWdub3JlIGFscmVhZHkgZXNjYXBlZCBzZXF1ZW5jZXMuXG4gICAgaWYgKGVzY2FwZWQpIHtcbiAgICAgIHBhdGggKz0gZXNjYXBlZFsxXVxuICAgICAgY29udGludWVcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHN0cltpbmRleF1cbiAgICB2YXIgcHJlZml4ID0gcmVzWzJdXG4gICAgdmFyIG5hbWUgPSByZXNbM11cbiAgICB2YXIgY2FwdHVyZSA9IHJlc1s0XVxuICAgIHZhciBncm91cCA9IHJlc1s1XVxuICAgIHZhciBtb2RpZmllciA9IHJlc1s2XVxuICAgIHZhciBhc3RlcmlzayA9IHJlc1s3XVxuXG4gICAgLy8gUHVzaCB0aGUgY3VycmVudCBwYXRoIG9udG8gdGhlIHRva2Vucy5cbiAgICBpZiAocGF0aCkge1xuICAgICAgdG9rZW5zLnB1c2gocGF0aClcbiAgICAgIHBhdGggPSAnJ1xuICAgIH1cblxuICAgIHZhciBwYXJ0aWFsID0gcHJlZml4ICE9IG51bGwgJiYgbmV4dCAhPSBudWxsICYmIG5leHQgIT09IHByZWZpeFxuICAgIHZhciByZXBlYXQgPSBtb2RpZmllciA9PT0gJysnIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgb3B0aW9uYWwgPSBtb2RpZmllciA9PT0gJz8nIHx8IG1vZGlmaWVyID09PSAnKidcbiAgICB2YXIgZGVsaW1pdGVyID0gcmVzWzJdIHx8IGRlZmF1bHREZWxpbWl0ZXJcbiAgICB2YXIgcGF0dGVybiA9IGNhcHR1cmUgfHwgZ3JvdXBcblxuICAgIHRva2Vucy5wdXNoKHtcbiAgICAgIG5hbWU6IG5hbWUgfHwga2V5KyssXG4gICAgICBwcmVmaXg6IHByZWZpeCB8fCAnJyxcbiAgICAgIGRlbGltaXRlcjogZGVsaW1pdGVyLFxuICAgICAgb3B0aW9uYWw6IG9wdGlvbmFsLFxuICAgICAgcmVwZWF0OiByZXBlYXQsXG4gICAgICBwYXJ0aWFsOiBwYXJ0aWFsLFxuICAgICAgYXN0ZXJpc2s6ICEhYXN0ZXJpc2ssXG4gICAgICBwYXR0ZXJuOiBwYXR0ZXJuID8gZXNjYXBlR3JvdXAocGF0dGVybikgOiAoYXN0ZXJpc2sgPyAnLionIDogJ1teJyArIGVzY2FwZVN0cmluZyhkZWxpbWl0ZXIpICsgJ10rPycpXG4gICAgfSlcbiAgfVxuXG4gIC8vIE1hdGNoIGFueSBjaGFyYWN0ZXJzIHN0aWxsIHJlbWFpbmluZy5cbiAgaWYgKGluZGV4IDwgc3RyLmxlbmd0aCkge1xuICAgIHBhdGggKz0gc3RyLnN1YnN0cihpbmRleClcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGV4aXN0cywgcHVzaCBpdCBvbnRvIHRoZSBlbmQuXG4gIGlmIChwYXRoKSB7XG4gICAgdG9rZW5zLnB1c2gocGF0aClcbiAgfVxuXG4gIHJldHVybiB0b2tlbnNcbn1cblxuLyoqXG4gKiBDb21waWxlIGEgc3RyaW5nIHRvIGEgdGVtcGxhdGUgZnVuY3Rpb24gZm9yIHRoZSBwYXRoLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gICAgICAgICAgICAgc3RyXG4gKiBAcGFyYW0gIHtPYmplY3Q9fSAgICAgICAgICAgIG9wdGlvbnNcbiAqIEByZXR1cm4geyFmdW5jdGlvbihPYmplY3Q9LCBPYmplY3Q9KX1cbiAqL1xuZnVuY3Rpb24gY29tcGlsZSAoc3RyLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb0Z1bmN0aW9uKHBhcnNlKHN0ciwgb3B0aW9ucyksIG9wdGlvbnMpXG59XG5cbi8qKlxuICogUHJldHRpZXIgZW5jb2Rpbmcgb2YgVVJJIHBhdGggc2VnbWVudHMuXG4gKlxuICogQHBhcmFtICB7c3RyaW5nfVxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlbmNvZGVVUklDb21wb25lbnRQcmV0dHkgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvW1xcLz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFbmNvZGUgdGhlIGFzdGVyaXNrIHBhcmFtZXRlci4gU2ltaWxhciB0byBgcHJldHR5YCwgYnV0IGFsbG93cyBzbGFzaGVzLlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ31cbiAqIEByZXR1cm4ge3N0cmluZ31cbiAqL1xuZnVuY3Rpb24gZW5jb2RlQXN0ZXJpc2sgKHN0cikge1xuICByZXR1cm4gZW5jb2RlVVJJKHN0cikucmVwbGFjZSgvWz8jXS9nLCBmdW5jdGlvbiAoYykge1xuICAgIHJldHVybiAnJScgKyBjLmNoYXJDb2RlQXQoMCkudG9TdHJpbmcoMTYpLnRvVXBwZXJDYXNlKClcbiAgfSlcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBtZXRob2QgZm9yIHRyYW5zZm9ybWluZyB0b2tlbnMgaW50byB0aGUgcGF0aCBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9GdW5jdGlvbiAodG9rZW5zLCBvcHRpb25zKSB7XG4gIC8vIENvbXBpbGUgYWxsIHRoZSB0b2tlbnMgaW50byByZWdleHBzLlxuICB2YXIgbWF0Y2hlcyA9IG5ldyBBcnJheSh0b2tlbnMubGVuZ3RoKVxuXG4gIC8vIENvbXBpbGUgYWxsIHRoZSBwYXR0ZXJucyBiZWZvcmUgY29tcGlsYXRpb24uXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKHR5cGVvZiB0b2tlbnNbaV0gPT09ICdvYmplY3QnKSB7XG4gICAgICBtYXRjaGVzW2ldID0gbmV3IFJlZ0V4cCgnXig/OicgKyB0b2tlbnNbaV0ucGF0dGVybiArICcpJCcsIGZsYWdzKG9wdGlvbnMpKVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmdW5jdGlvbiAob2JqLCBvcHRzKSB7XG4gICAgdmFyIHBhdGggPSAnJ1xuICAgIHZhciBkYXRhID0gb2JqIHx8IHt9XG4gICAgdmFyIG9wdGlvbnMgPSBvcHRzIHx8IHt9XG4gICAgdmFyIGVuY29kZSA9IG9wdGlvbnMucHJldHR5ID8gZW5jb2RlVVJJQ29tcG9uZW50UHJldHR5IDogZW5jb2RlVVJJQ29tcG9uZW50XG5cbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICAgIGlmICh0eXBlb2YgdG9rZW4gPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhdGggKz0gdG9rZW5cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICB2YXIgdmFsdWUgPSBkYXRhW3Rva2VuLm5hbWVdXG4gICAgICB2YXIgc2VnbWVudFxuXG4gICAgICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgICAgICBpZiAodG9rZW4ub3B0aW9uYWwpIHtcbiAgICAgICAgICAvLyBQcmVwZW5kIHBhcnRpYWwgc2VnbWVudCBwcmVmaXhlcy5cbiAgICAgICAgICBpZiAodG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgICAgcGF0aCArPSB0b2tlbi5wcmVmaXhcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBjb250aW51ZVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gYmUgZGVmaW5lZCcpXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGlzYXJyYXkodmFsdWUpKSB7XG4gICAgICAgIGlmICghdG9rZW4ucmVwZWF0KSB7XG4gICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgXCInICsgdG9rZW4ubmFtZSArICdcIiB0byBub3QgcmVwZWF0LCBidXQgcmVjZWl2ZWQgYCcgKyBKU09OLnN0cmluZ2lmeSh2YWx1ZSkgKyAnYCcpXG4gICAgICAgIH1cblxuICAgICAgICBpZiAodmFsdWUubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKCdFeHBlY3RlZCBcIicgKyB0b2tlbi5uYW1lICsgJ1wiIHRvIG5vdCBiZSBlbXB0eScpXG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgZm9yICh2YXIgaiA9IDA7IGogPCB2YWx1ZS5sZW5ndGg7IGorKykge1xuICAgICAgICAgIHNlZ21lbnQgPSBlbmNvZGUodmFsdWVbal0pXG5cbiAgICAgICAgICBpZiAoIW1hdGNoZXNbaV0udGVzdChzZWdtZW50KSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhwZWN0ZWQgYWxsIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIGAnICsgSlNPTi5zdHJpbmdpZnkoc2VnbWVudCkgKyAnYCcpXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcGF0aCArPSAoaiA9PT0gMCA/IHRva2VuLnByZWZpeCA6IHRva2VuLmRlbGltaXRlcikgKyBzZWdtZW50XG4gICAgICAgIH1cblxuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuXG4gICAgICBzZWdtZW50ID0gdG9rZW4uYXN0ZXJpc2sgPyBlbmNvZGVBc3Rlcmlzayh2YWx1ZSkgOiBlbmNvZGUodmFsdWUpXG5cbiAgICAgIGlmICghbWF0Y2hlc1tpXS50ZXN0KHNlZ21lbnQpKSB7XG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIFwiJyArIHRva2VuLm5hbWUgKyAnXCIgdG8gbWF0Y2ggXCInICsgdG9rZW4ucGF0dGVybiArICdcIiwgYnV0IHJlY2VpdmVkIFwiJyArIHNlZ21lbnQgKyAnXCInKVxuICAgICAgfVxuXG4gICAgICBwYXRoICs9IHRva2VuLnByZWZpeCArIHNlZ21lbnRcbiAgICB9XG5cbiAgICByZXR1cm4gcGF0aFxuICB9XG59XG5cbi8qKlxuICogRXNjYXBlIGEgcmVndWxhciBleHByZXNzaW9uIHN0cmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IHN0clxuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBlc2NhcGVTdHJpbmcgKHN0cikge1xuICByZXR1cm4gc3RyLnJlcGxhY2UoLyhbLisqPz1eIToke30oKVtcXF18XFwvXFxcXF0pL2csICdcXFxcJDEnKVxufVxuXG4vKipcbiAqIEVzY2FwZSB0aGUgY2FwdHVyaW5nIGdyb3VwIGJ5IGVzY2FwaW5nIHNwZWNpYWwgY2hhcmFjdGVycyBhbmQgbWVhbmluZy5cbiAqXG4gKiBAcGFyYW0gIHtzdHJpbmd9IGdyb3VwXG4gKiBAcmV0dXJuIHtzdHJpbmd9XG4gKi9cbmZ1bmN0aW9uIGVzY2FwZUdyb3VwIChncm91cCkge1xuICByZXR1cm4gZ3JvdXAucmVwbGFjZSgvKFs9ITokXFwvKCldKS9nLCAnXFxcXCQxJylcbn1cblxuLyoqXG4gKiBBdHRhY2ggdGhlIGtleXMgYXMgYSBwcm9wZXJ0eSBvZiB0aGUgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHJlXG4gKiBAcGFyYW0gIHtBcnJheX0gICBrZXlzXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBhdHRhY2hLZXlzIChyZSwga2V5cykge1xuICByZS5rZXlzID0ga2V5c1xuICByZXR1cm4gcmVcbn1cblxuLyoqXG4gKiBHZXQgdGhlIGZsYWdzIGZvciBhIHJlZ2V4cCBmcm9tIHRoZSBvcHRpb25zLlxuICpcbiAqIEBwYXJhbSAge09iamVjdH0gb3B0aW9uc1xuICogQHJldHVybiB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiBmbGFncyAob3B0aW9ucykge1xuICByZXR1cm4gb3B0aW9ucyAmJiBvcHRpb25zLnNlbnNpdGl2ZSA/ICcnIDogJ2knXG59XG5cbi8qKlxuICogUHVsbCBvdXQga2V5cyBmcm9tIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFSZWdFeHB9IHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHJlZ2V4cFRvUmVnZXhwIChwYXRoLCBrZXlzKSB7XG4gIC8vIFVzZSBhIG5lZ2F0aXZlIGxvb2thaGVhZCB0byBtYXRjaCBvbmx5IGNhcHR1cmluZyBncm91cHMuXG4gIHZhciBncm91cHMgPSBwYXRoLnNvdXJjZS5tYXRjaCgvXFwoKD8hXFw/KS9nKVxuXG4gIGlmIChncm91cHMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGdyb3Vwcy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5cy5wdXNoKHtcbiAgICAgICAgbmFtZTogaSxcbiAgICAgICAgcHJlZml4OiBudWxsLFxuICAgICAgICBkZWxpbWl0ZXI6IG51bGwsXG4gICAgICAgIG9wdGlvbmFsOiBmYWxzZSxcbiAgICAgICAgcmVwZWF0OiBmYWxzZSxcbiAgICAgICAgcGFydGlhbDogZmFsc2UsXG4gICAgICAgIGFzdGVyaXNrOiBmYWxzZSxcbiAgICAgICAgcGF0dGVybjogbnVsbFxuICAgICAgfSlcbiAgICB9XG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhwYXRoLCBrZXlzKVxufVxuXG4vKipcbiAqIFRyYW5zZm9ybSBhbiBhcnJheSBpbnRvIGEgcmVnZXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gIHBhdGhcbiAqIEBwYXJhbSAge0FycmF5fSAgIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIGFycmF5VG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgdmFyIHBhcnRzID0gW11cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHBhdGgubGVuZ3RoOyBpKyspIHtcbiAgICBwYXJ0cy5wdXNoKHBhdGhUb1JlZ2V4cChwYXRoW2ldLCBrZXlzLCBvcHRpb25zKS5zb3VyY2UpXG4gIH1cblxuICB2YXIgcmVnZXhwID0gbmV3IFJlZ0V4cCgnKD86JyArIHBhcnRzLmpvaW4oJ3wnKSArICcpJywgZmxhZ3Mob3B0aW9ucykpXG5cbiAgcmV0dXJuIGF0dGFjaEtleXMocmVnZXhwLCBrZXlzKVxufVxuXG4vKipcbiAqIENyZWF0ZSBhIHBhdGggcmVnZXhwIGZyb20gc3RyaW5nIGlucHV0LlxuICpcbiAqIEBwYXJhbSAge3N0cmluZ30gIHBhdGhcbiAqIEBwYXJhbSAgeyFBcnJheX0gIGtleXNcbiAqIEBwYXJhbSAgeyFPYmplY3R9IG9wdGlvbnNcbiAqIEByZXR1cm4geyFSZWdFeHB9XG4gKi9cbmZ1bmN0aW9uIHN0cmluZ1RvUmVnZXhwIChwYXRoLCBrZXlzLCBvcHRpb25zKSB7XG4gIHJldHVybiB0b2tlbnNUb1JlZ0V4cChwYXJzZShwYXRoLCBvcHRpb25zKSwga2V5cywgb3B0aW9ucylcbn1cblxuLyoqXG4gKiBFeHBvc2UgYSBmdW5jdGlvbiBmb3IgdGFraW5nIHRva2VucyBhbmQgcmV0dXJuaW5nIGEgUmVnRXhwLlxuICpcbiAqIEBwYXJhbSAgeyFBcnJheX0gICAgICAgICAgdG9rZW5zXG4gKiBAcGFyYW0gIHsoQXJyYXl8T2JqZWN0KT19IGtleXNcbiAqIEBwYXJhbSAge09iamVjdD19ICAgICAgICAgb3B0aW9uc1xuICogQHJldHVybiB7IVJlZ0V4cH1cbiAqL1xuZnVuY3Rpb24gdG9rZW5zVG9SZWdFeHAgKHRva2Vucywga2V5cywgb3B0aW9ucykge1xuICBpZiAoIWlzYXJyYXkoa2V5cykpIHtcbiAgICBvcHRpb25zID0gLyoqIEB0eXBlIHshT2JqZWN0fSAqLyAoa2V5cyB8fCBvcHRpb25zKVxuICAgIGtleXMgPSBbXVxuICB9XG5cbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge31cblxuICB2YXIgc3RyaWN0ID0gb3B0aW9ucy5zdHJpY3RcbiAgdmFyIGVuZCA9IG9wdGlvbnMuZW5kICE9PSBmYWxzZVxuICB2YXIgcm91dGUgPSAnJ1xuXG4gIC8vIEl0ZXJhdGUgb3ZlciB0aGUgdG9rZW5zIGFuZCBjcmVhdGUgb3VyIHJlZ2V4cCBzdHJpbmcuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHRva2VuID0gdG9rZW5zW2ldXG5cbiAgICBpZiAodHlwZW9mIHRva2VuID09PSAnc3RyaW5nJykge1xuICAgICAgcm91dGUgKz0gZXNjYXBlU3RyaW5nKHRva2VuKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgcHJlZml4ID0gZXNjYXBlU3RyaW5nKHRva2VuLnByZWZpeClcbiAgICAgIHZhciBjYXB0dXJlID0gJyg/OicgKyB0b2tlbi5wYXR0ZXJuICsgJyknXG5cbiAgICAgIGtleXMucHVzaCh0b2tlbilcblxuICAgICAgaWYgKHRva2VuLnJlcGVhdCkge1xuICAgICAgICBjYXB0dXJlICs9ICcoPzonICsgcHJlZml4ICsgY2FwdHVyZSArICcpKidcbiAgICAgIH1cblxuICAgICAgaWYgKHRva2VuLm9wdGlvbmFsKSB7XG4gICAgICAgIGlmICghdG9rZW4ucGFydGlhbCkge1xuICAgICAgICAgIGNhcHR1cmUgPSAnKD86JyArIHByZWZpeCArICcoJyArIGNhcHR1cmUgKyAnKSk/J1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNhcHR1cmUgPSBwcmVmaXggKyAnKCcgKyBjYXB0dXJlICsgJyk/J1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYXB0dXJlID0gcHJlZml4ICsgJygnICsgY2FwdHVyZSArICcpJ1xuICAgICAgfVxuXG4gICAgICByb3V0ZSArPSBjYXB0dXJlXG4gICAgfVxuICB9XG5cbiAgdmFyIGRlbGltaXRlciA9IGVzY2FwZVN0cmluZyhvcHRpb25zLmRlbGltaXRlciB8fCAnLycpXG4gIHZhciBlbmRzV2l0aERlbGltaXRlciA9IHJvdXRlLnNsaWNlKC1kZWxpbWl0ZXIubGVuZ3RoKSA9PT0gZGVsaW1pdGVyXG5cbiAgLy8gSW4gbm9uLXN0cmljdCBtb2RlIHdlIGFsbG93IGEgc2xhc2ggYXQgdGhlIGVuZCBvZiBtYXRjaC4gSWYgdGhlIHBhdGggdG9cbiAgLy8gbWF0Y2ggYWxyZWFkeSBlbmRzIHdpdGggYSBzbGFzaCwgd2UgcmVtb3ZlIGl0IGZvciBjb25zaXN0ZW5jeS4gVGhlIHNsYXNoXG4gIC8vIGlzIHZhbGlkIGF0IHRoZSBlbmQgb2YgYSBwYXRoIG1hdGNoLCBub3QgaW4gdGhlIG1pZGRsZS4gVGhpcyBpcyBpbXBvcnRhbnRcbiAgLy8gaW4gbm9uLWVuZGluZyBtb2RlLCB3aGVyZSBcIi90ZXN0L1wiIHNob3VsZG4ndCBtYXRjaCBcIi90ZXN0Ly9yb3V0ZVwiLlxuICBpZiAoIXN0cmljdCkge1xuICAgIHJvdXRlID0gKGVuZHNXaXRoRGVsaW1pdGVyID8gcm91dGUuc2xpY2UoMCwgLWRlbGltaXRlci5sZW5ndGgpIDogcm91dGUpICsgJyg/OicgKyBkZWxpbWl0ZXIgKyAnKD89JCkpPydcbiAgfVxuXG4gIGlmIChlbmQpIHtcbiAgICByb3V0ZSArPSAnJCdcbiAgfSBlbHNlIHtcbiAgICAvLyBJbiBub24tZW5kaW5nIG1vZGUsIHdlIG5lZWQgdGhlIGNhcHR1cmluZyBncm91cHMgdG8gbWF0Y2ggYXMgbXVjaCBhc1xuICAgIC8vIHBvc3NpYmxlIGJ5IHVzaW5nIGEgcG9zaXRpdmUgbG9va2FoZWFkIHRvIHRoZSBlbmQgb3IgbmV4dCBwYXRoIHNlZ21lbnQuXG4gICAgcm91dGUgKz0gc3RyaWN0ICYmIGVuZHNXaXRoRGVsaW1pdGVyID8gJycgOiAnKD89JyArIGRlbGltaXRlciArICd8JCknXG4gIH1cblxuICByZXR1cm4gYXR0YWNoS2V5cyhuZXcgUmVnRXhwKCdeJyArIHJvdXRlLCBmbGFncyhvcHRpb25zKSksIGtleXMpXG59XG5cbi8qKlxuICogTm9ybWFsaXplIHRoZSBnaXZlbiBwYXRoIHN0cmluZywgcmV0dXJuaW5nIGEgcmVndWxhciBleHByZXNzaW9uLlxuICpcbiAqIEFuIGVtcHR5IGFycmF5IGNhbiBiZSBwYXNzZWQgaW4gZm9yIHRoZSBrZXlzLCB3aGljaCB3aWxsIGhvbGQgdGhlXG4gKiBwbGFjZWhvbGRlciBrZXkgZGVzY3JpcHRpb25zLiBGb3IgZXhhbXBsZSwgdXNpbmcgYC91c2VyLzppZGAsIGBrZXlzYCB3aWxsXG4gKiBjb250YWluIGBbeyBuYW1lOiAnaWQnLCBkZWxpbWl0ZXI6ICcvJywgb3B0aW9uYWw6IGZhbHNlLCByZXBlYXQ6IGZhbHNlIH1dYC5cbiAqXG4gKiBAcGFyYW0gIHsoc3RyaW5nfFJlZ0V4cHxBcnJheSl9IHBhdGhcbiAqIEBwYXJhbSAgeyhBcnJheXxPYmplY3QpPX0gICAgICAga2V5c1xuICogQHBhcmFtICB7T2JqZWN0PX0gICAgICAgICAgICAgICBvcHRpb25zXG4gKiBAcmV0dXJuIHshUmVnRXhwfVxuICovXG5mdW5jdGlvbiBwYXRoVG9SZWdleHAgKHBhdGgsIGtleXMsIG9wdGlvbnMpIHtcbiAgaWYgKCFpc2FycmF5KGtleXMpKSB7XG4gICAgb3B0aW9ucyA9IC8qKiBAdHlwZSB7IU9iamVjdH0gKi8gKGtleXMgfHwgb3B0aW9ucylcbiAgICBrZXlzID0gW11cbiAgfVxuXG4gIG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9XG5cbiAgaWYgKHBhdGggaW5zdGFuY2VvZiBSZWdFeHApIHtcbiAgICByZXR1cm4gcmVnZXhwVG9SZWdleHAocGF0aCwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSlcbiAgfVxuXG4gIGlmIChpc2FycmF5KHBhdGgpKSB7XG4gICAgcmV0dXJuIGFycmF5VG9SZWdleHAoLyoqIEB0eXBlIHshQXJyYXl9ICovIChwYXRoKSwgLyoqIEB0eXBlIHshQXJyYXl9ICovIChrZXlzKSwgb3B0aW9ucylcbiAgfVxuXG4gIHJldHVybiBzdHJpbmdUb1JlZ2V4cCgvKiogQHR5cGUge3N0cmluZ30gKi8gKHBhdGgpLCAvKiogQHR5cGUgeyFBcnJheX0gKi8gKGtleXMpLCBvcHRpb25zKVxufVxuIiwiJ3VzZSBzdHJpY3QnO1xuXG5pZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJykge1xuICBtb2R1bGUuZXhwb3J0cyA9IHJlcXVpcmUoJy4vY2pzL3NjaGVkdWxlci5wcm9kdWN0aW9uLm1pbi5qcycpO1xufSBlbHNlIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIuZGV2ZWxvcG1lbnQuanMnKTtcbn1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJoMlwiOlwibVhKdm11OTRFeXV6cXdlRWF0NFp4XCIsXCJoM1wiOlwiXzNJVy1yWWRYU0trTzRCTHltRWNBTzNcIn07IiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImluZGVudF8yXCI6XCJfMzh6Z3dFWUowYllyX3o4dzIzUEZpM1wiLFwiaW5kZW50XzNcIjpcIl8zOU1Rd1Y2THF2b2JiZXRycTlpeWx4XCJ9OyIsIi8qXG5vYmplY3QtYXNzaWduXG4oYykgU2luZHJlIFNvcmh1c1xuQGxpY2Vuc2UgTUlUXG4qL1xuXG4ndXNlIHN0cmljdCc7XG4vKiBlc2xpbnQtZGlzYWJsZSBuby11bnVzZWQtdmFycyAqL1xudmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHM7XG52YXIgaGFzT3duUHJvcGVydHkgPSBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5O1xudmFyIHByb3BJc0VudW1lcmFibGUgPSBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG5mdW5jdGlvbiB0b09iamVjdCh2YWwpIHtcblx0aWYgKHZhbCA9PT0gbnVsbCB8fCB2YWwgPT09IHVuZGVmaW5lZCkge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoJ09iamVjdC5hc3NpZ24gY2Fubm90IGJlIGNhbGxlZCB3aXRoIG51bGwgb3IgdW5kZWZpbmVkJyk7XG5cdH1cblxuXHRyZXR1cm4gT2JqZWN0KHZhbCk7XG59XG5cbmZ1bmN0aW9uIHNob3VsZFVzZU5hdGl2ZSgpIHtcblx0dHJ5IHtcblx0XHRpZiAoIU9iamVjdC5hc3NpZ24pIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBEZXRlY3QgYnVnZ3kgcHJvcGVydHkgZW51bWVyYXRpb24gb3JkZXIgaW4gb2xkZXIgVjggdmVyc2lvbnMuXG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD00MTE4XG5cdFx0dmFyIHRlc3QxID0gbmV3IFN0cmluZygnYWJjJyk7ICAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLW5ldy13cmFwcGVyc1xuXHRcdHRlc3QxWzVdID0gJ2RlJztcblx0XHRpZiAoT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGVzdDEpWzBdID09PSAnNScpIHtcblx0XHRcdHJldHVybiBmYWxzZTtcblx0XHR9XG5cblx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvdjgvaXNzdWVzL2RldGFpbD9pZD0zMDU2XG5cdFx0dmFyIHRlc3QyID0ge307XG5cdFx0Zm9yICh2YXIgaSA9IDA7IGkgPCAxMDsgaSsrKSB7XG5cdFx0XHR0ZXN0MlsnXycgKyBTdHJpbmcuZnJvbUNoYXJDb2RlKGkpXSA9IGk7XG5cdFx0fVxuXHRcdHZhciBvcmRlcjIgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0ZXN0MikubWFwKGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRyZXR1cm4gdGVzdDJbbl07XG5cdFx0fSk7XG5cdFx0aWYgKG9yZGVyMi5qb2luKCcnKSAhPT0gJzAxMjM0NTY3ODknKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0Ly8gaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL3Y4L2lzc3Vlcy9kZXRhaWw/aWQ9MzA1NlxuXHRcdHZhciB0ZXN0MyA9IHt9O1xuXHRcdCdhYmNkZWZnaGlqa2xtbm9wcXJzdCcuc3BsaXQoJycpLmZvckVhY2goZnVuY3Rpb24gKGxldHRlcikge1xuXHRcdFx0dGVzdDNbbGV0dGVyXSA9IGxldHRlcjtcblx0XHR9KTtcblx0XHRpZiAoT2JqZWN0LmtleXMoT2JqZWN0LmFzc2lnbih7fSwgdGVzdDMpKS5qb2luKCcnKSAhPT1cblx0XHRcdFx0J2FiY2RlZmdoaWprbG1ub3BxcnN0Jykge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblxuXHRcdHJldHVybiB0cnVlO1xuXHR9IGNhdGNoIChlcnIpIHtcblx0XHQvLyBXZSBkb24ndCBleHBlY3QgYW55IG9mIHRoZSBhYm92ZSB0byB0aHJvdywgYnV0IGJldHRlciB0byBiZSBzYWZlLlxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNob3VsZFVzZU5hdGl2ZSgpID8gT2JqZWN0LmFzc2lnbiA6IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuXHR2YXIgZnJvbTtcblx0dmFyIHRvID0gdG9PYmplY3QodGFyZ2V0KTtcblx0dmFyIHN5bWJvbHM7XG5cblx0Zm9yICh2YXIgcyA9IDE7IHMgPCBhcmd1bWVudHMubGVuZ3RoOyBzKyspIHtcblx0XHRmcm9tID0gT2JqZWN0KGFyZ3VtZW50c1tzXSk7XG5cblx0XHRmb3IgKHZhciBrZXkgaW4gZnJvbSkge1xuXHRcdFx0aWYgKGhhc093blByb3BlcnR5LmNhbGwoZnJvbSwga2V5KSkge1xuXHRcdFx0XHR0b1trZXldID0gZnJvbVtrZXldO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmIChnZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcblx0XHRcdHN5bWJvbHMgPSBnZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZnJvbSk7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdFx0aWYgKHByb3BJc0VudW1lcmFibGUuY2FsbChmcm9tLCBzeW1ib2xzW2ldKSkge1xuXHRcdFx0XHRcdHRvW3N5bWJvbHNbaV1dID0gZnJvbVtzeW1ib2xzW2ldXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiB0bztcbn07XG4iLCIvLyBgUmVxdWlyZU9iamVjdENvZXJjaWJsZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1yZXF1aXJlb2JqZWN0Y29lcmNpYmxlXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoaXQgPT0gdW5kZWZpbmVkKSB0aHJvdyBUeXBlRXJyb3IoXCJDYW4ndCBjYWxsIG1ldGhvZCBvbiBcIiArIGl0KTtcbiAgcmV0dXJuIGl0O1xufTtcbiIsInZhciBJU19QVVJFID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLXB1cmUnKTtcbnZhciBzdG9yZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zaGFyZWQtc3RvcmUnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgcmV0dXJuIHN0b3JlW2tleV0gfHwgKHN0b3JlW2tleV0gPSB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiB7fSk7XG59KSgndmVyc2lvbnMnLCBbXSkucHVzaCh7XG4gIHZlcnNpb246ICczLjYuNScsXG4gIG1vZGU6IElTX1BVUkUgPyAncHVyZScgOiAnZ2xvYmFsJyxcbiAgY29weXJpZ2h0OiAnwqkgMjAyMCBEZW5pcyBQdXNoa2FyZXYgKHpsb2lyb2NrLnJ1KSdcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xuXG52YXIgU0hBUkVEID0gJ19fY29yZS1qc19zaGFyZWRfXyc7XG52YXIgc3RvcmUgPSBnbG9iYWxbU0hBUkVEXSB8fCBzZXRHbG9iYWwoU0hBUkVELCB7fSk7XG5cbm1vZHVsZS5leHBvcnRzID0gc3RvcmU7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xudmFyIGNyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcblxuLy8gVGhhbmsncyBJRTggZm9yIGhpcyBmdW5ueSBkZWZpbmVQcm9wZXJ0eVxubW9kdWxlLmV4cG9ydHMgPSAhREVTQ1JJUFRPUlMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgcmV0dXJuIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjcmVhdGVFbGVtZW50KCdkaXYnKSwgJ2EnLCB7XG4gICAgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiA3OyB9XG4gIH0pLmEgIT0gNztcbn0pO1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBpc09iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1vYmplY3QnKTtcblxudmFyIGRvY3VtZW50ID0gZ2xvYmFsLmRvY3VtZW50O1xuLy8gdHlwZW9mIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQgaXMgJ29iamVjdCcgaW4gb2xkIElFXG52YXIgRVhJU1RTID0gaXNPYmplY3QoZG9jdW1lbnQpICYmIGlzT2JqZWN0KGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICByZXR1cm4gRVhJU1RTID8gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChpdCkgOiB7fTtcbn07XG4iLCJ2YXIgaXNPYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtb2JqZWN0Jyk7XG5cbi8vIGBUb1ByaW1pdGl2ZWAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b3ByaW1pdGl2ZVxuLy8gaW5zdGVhZCBvZiB0aGUgRVM2IHNwZWMgdmVyc2lvbiwgd2UgZGlkbid0IGltcGxlbWVudCBAQHRvUHJpbWl0aXZlIGNhc2Vcbi8vIGFuZCB0aGUgc2Vjb25kIGFyZ3VtZW50IC0gZmxhZyAtIHByZWZlcnJlZCB0eXBlIGlzIGEgc3RyaW5nXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbnB1dCwgUFJFRkVSUkVEX1NUUklORykge1xuICBpZiAoIWlzT2JqZWN0KGlucHV0KSkgcmV0dXJuIGlucHV0O1xuICB2YXIgZm4sIHZhbDtcbiAgaWYgKFBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIGlmICh0eXBlb2YgKGZuID0gaW5wdXQudmFsdWVPZikgPT0gJ2Z1bmN0aW9uJyAmJiAhaXNPYmplY3QodmFsID0gZm4uY2FsbChpbnB1dCkpKSByZXR1cm4gdmFsO1xuICBpZiAoIVBSRUZFUlJFRF9TVFJJTkcgJiYgdHlwZW9mIChmbiA9IGlucHV0LnRvU3RyaW5nKSA9PSAnZnVuY3Rpb24nICYmICFpc09iamVjdCh2YWwgPSBmbi5jYWxsKGlucHV0KSkpIHJldHVybiB2YWw7XG4gIHRocm93IFR5cGVFcnJvcihcIkNhbid0IGNvbnZlcnQgb2JqZWN0IHRvIHByaW1pdGl2ZSB2YWx1ZVwiKTtcbn07XG4iLCJ2YXIgaWQgPSAwO1xudmFyIHBvc3RmaXggPSBNYXRoLnJhbmRvbSgpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChrZXkpIHtcbiAgcmV0dXJuICdTeW1ib2woJyArIFN0cmluZyhrZXkgPT09IHVuZGVmaW5lZCA/ICcnIDoga2V5KSArICcpXycgKyAoKytpZCArIHBvc3RmaXgpLnRvU3RyaW5nKDM2KTtcbn07XG4iLCJ2YXIgZmFpbHMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZmFpbHMnKTtcblxubW9kdWxlLmV4cG9ydHMgPSAhIU9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMgJiYgIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgLy8gQ2hyb21lIDM4IFN5bWJvbCBoYXMgaW5jb3JyZWN0IHRvU3RyaW5nIGNvbnZlcnNpb25cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gIHJldHVybiAhU3RyaW5nKFN5bWJvbCgpKTtcbn0pO1xuIiwidmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xudmFyIGRlZmluZVByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0aWVzJyk7XG52YXIgZW51bUJ1Z0tleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZW51bS1idWcta2V5cycpO1xudmFyIGhpZGRlbktleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGlkZGVuLWtleXMnKTtcbnZhciBodG1sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2h0bWwnKTtcbnZhciBkb2N1bWVudENyZWF0ZUVsZW1lbnQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZG9jdW1lbnQtY3JlYXRlLWVsZW1lbnQnKTtcbnZhciBzaGFyZWRLZXkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2hhcmVkLWtleScpO1xuXG52YXIgR1QgPSAnPic7XG52YXIgTFQgPSAnPCc7XG52YXIgUFJPVE9UWVBFID0gJ3Byb3RvdHlwZSc7XG52YXIgU0NSSVBUID0gJ3NjcmlwdCc7XG52YXIgSUVfUFJPVE8gPSBzaGFyZWRLZXkoJ0lFX1BST1RPJyk7XG5cbnZhciBFbXB0eUNvbnN0cnVjdG9yID0gZnVuY3Rpb24gKCkgeyAvKiBlbXB0eSAqLyB9O1xuXG52YXIgc2NyaXB0VGFnID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgcmV0dXJuIExUICsgU0NSSVBUICsgR1QgKyBjb250ZW50ICsgTFQgKyAnLycgKyBTQ1JJUFQgKyBHVDtcbn07XG5cbi8vIENyZWF0ZSBvYmplY3Qgd2l0aCBmYWtlIGBudWxsYCBwcm90b3R5cGU6IHVzZSBBY3RpdmVYIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhQWN0aXZlWCA9IGZ1bmN0aW9uIChhY3RpdmVYRG9jdW1lbnQpIHtcbiAgYWN0aXZlWERvY3VtZW50LndyaXRlKHNjcmlwdFRhZygnJykpO1xuICBhY3RpdmVYRG9jdW1lbnQuY2xvc2UoKTtcbiAgdmFyIHRlbXAgPSBhY3RpdmVYRG9jdW1lbnQucGFyZW50V2luZG93Lk9iamVjdDtcbiAgYWN0aXZlWERvY3VtZW50ID0gbnVsbDsgLy8gYXZvaWQgbWVtb3J5IGxlYWtcbiAgcmV0dXJuIHRlbXA7XG59O1xuXG4vLyBDcmVhdGUgb2JqZWN0IHdpdGggZmFrZSBgbnVsbGAgcHJvdG90eXBlOiB1c2UgaWZyYW1lIE9iamVjdCB3aXRoIGNsZWFyZWQgcHJvdG90eXBlXG52YXIgTnVsbFByb3RvT2JqZWN0VmlhSUZyYW1lID0gZnVuY3Rpb24gKCkge1xuICAvLyBUaHJhc2gsIHdhc3RlIGFuZCBzb2RvbXk6IElFIEdDIGJ1Z1xuICB2YXIgaWZyYW1lID0gZG9jdW1lbnRDcmVhdGVFbGVtZW50KCdpZnJhbWUnKTtcbiAgdmFyIEpTID0gJ2phdmEnICsgU0NSSVBUICsgJzonO1xuICB2YXIgaWZyYW1lRG9jdW1lbnQ7XG4gIGlmcmFtZS5zdHlsZS5kaXNwbGF5ID0gJ25vbmUnO1xuICBodG1sLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS96bG9pcm9jay9jb3JlLWpzL2lzc3Vlcy80NzVcbiAgaWZyYW1lLnNyYyA9IFN0cmluZyhKUyk7XG4gIGlmcmFtZURvY3VtZW50ID0gaWZyYW1lLmNvbnRlbnRXaW5kb3cuZG9jdW1lbnQ7XG4gIGlmcmFtZURvY3VtZW50Lm9wZW4oKTtcbiAgaWZyYW1lRG9jdW1lbnQud3JpdGUoc2NyaXB0VGFnKCdkb2N1bWVudC5GPU9iamVjdCcpKTtcbiAgaWZyYW1lRG9jdW1lbnQuY2xvc2UoKTtcbiAgcmV0dXJuIGlmcmFtZURvY3VtZW50LkY7XG59O1xuXG4vLyBDaGVjayBmb3IgZG9jdW1lbnQuZG9tYWluIGFuZCBhY3RpdmUgeCBzdXBwb3J0XG4vLyBObyBuZWVkIHRvIHVzZSBhY3RpdmUgeCBhcHByb2FjaCB3aGVuIGRvY3VtZW50LmRvbWFpbiBpcyBub3Qgc2V0XG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzLXNoaW1zL2VzNS1zaGltL2lzc3Vlcy8xNTBcbi8vIHZhcmlhdGlvbiBvZiBodHRwczovL2dpdGh1Yi5jb20va2l0Y2FtYnJpZGdlL2VzNS1zaGltL2NvbW1pdC80ZjczOGFjMDY2MzQ2XG4vLyBhdm9pZCBJRSBHQyBidWdcbnZhciBhY3RpdmVYRG9jdW1lbnQ7XG52YXIgTnVsbFByb3RvT2JqZWN0ID0gZnVuY3Rpb24gKCkge1xuICB0cnkge1xuICAgIC8qIGdsb2JhbCBBY3RpdmVYT2JqZWN0ICovXG4gICAgYWN0aXZlWERvY3VtZW50ID0gZG9jdW1lbnQuZG9tYWluICYmIG5ldyBBY3RpdmVYT2JqZWN0KCdodG1sZmlsZScpO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBpZ25vcmUgKi8gfVxuICBOdWxsUHJvdG9PYmplY3QgPSBhY3RpdmVYRG9jdW1lbnQgPyBOdWxsUHJvdG9PYmplY3RWaWFBY3RpdmVYKGFjdGl2ZVhEb2N1bWVudCkgOiBOdWxsUHJvdG9PYmplY3RWaWFJRnJhbWUoKTtcbiAgdmFyIGxlbmd0aCA9IGVudW1CdWdLZXlzLmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSBkZWxldGUgTnVsbFByb3RvT2JqZWN0W1BST1RPVFlQRV1bZW51bUJ1Z0tleXNbbGVuZ3RoXV07XG4gIHJldHVybiBOdWxsUHJvdG9PYmplY3QoKTtcbn07XG5cbmhpZGRlbktleXNbSUVfUFJPVE9dID0gdHJ1ZTtcblxuLy8gYE9iamVjdC5jcmVhdGVgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmNyZWF0ZVxubW9kdWxlLmV4cG9ydHMgPSBPYmplY3QuY3JlYXRlIHx8IGZ1bmN0aW9uIGNyZWF0ZShPLCBQcm9wZXJ0aWVzKSB7XG4gIHZhciByZXN1bHQ7XG4gIGlmIChPICE9PSBudWxsKSB7XG4gICAgRW1wdHlDb25zdHJ1Y3RvcltQUk9UT1RZUEVdID0gYW5PYmplY3QoTyk7XG4gICAgcmVzdWx0ID0gbmV3IEVtcHR5Q29uc3RydWN0b3IoKTtcbiAgICBFbXB0eUNvbnN0cnVjdG9yW1BST1RPVFlQRV0gPSBudWxsO1xuICAgIC8vIGFkZCBcIl9fcHJvdG9fX1wiIGZvciBPYmplY3QuZ2V0UHJvdG90eXBlT2YgcG9seWZpbGxcbiAgICByZXN1bHRbSUVfUFJPVE9dID0gTztcbiAgfSBlbHNlIHJlc3VsdCA9IE51bGxQcm90b09iamVjdCgpO1xuICByZXR1cm4gUHJvcGVydGllcyA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogZGVmaW5lUHJvcGVydGllcyhyZXN1bHQsIFByb3BlcnRpZXMpO1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgaW5kZXhPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hcnJheS1pbmNsdWRlcycpLmluZGV4T2Y7XG52YXIgaGlkZGVuS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oaWRkZW4ta2V5cycpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChvYmplY3QsIG5hbWVzKSB7XG4gIHZhciBPID0gdG9JbmRleGVkT2JqZWN0KG9iamVjdCk7XG4gIHZhciBpID0gMDtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICB2YXIga2V5O1xuICBmb3IgKGtleSBpbiBPKSAhaGFzKGhpZGRlbktleXMsIGtleSkgJiYgaGFzKE8sIGtleSkgJiYgcmVzdWx0LnB1c2goa2V5KTtcbiAgLy8gRG9uJ3QgZW51bSBidWcgJiBoaWRkZW4ga2V5c1xuICB3aGlsZSAobmFtZXMubGVuZ3RoID4gaSkgaWYgKGhhcyhPLCBrZXkgPSBuYW1lc1tpKytdKSkge1xuICAgIH5pbmRleE9mKHJlc3VsdCwga2V5KSB8fCByZXN1bHQucHVzaChrZXkpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59O1xuIiwidmFyIGNlaWwgPSBNYXRoLmNlaWw7XG52YXIgZmxvb3IgPSBNYXRoLmZsb29yO1xuXG4vLyBgVG9JbnRlZ2VyYCBhYnN0cmFjdCBvcGVyYXRpb25cbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLXRvaW50ZWdlclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGlzTmFOKGFyZ3VtZW50ID0gK2FyZ3VtZW50KSA/IDAgOiAoYXJndW1lbnQgPiAwID8gZmxvb3IgOiBjZWlsKShhcmd1bWVudCk7XG59O1xuIiwidmFyIHBhdGggPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcGF0aCcpO1xudmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcblxudmFyIGFGdW5jdGlvbiA9IGZ1bmN0aW9uICh2YXJpYWJsZSkge1xuICByZXR1cm4gdHlwZW9mIHZhcmlhYmxlID09ICdmdW5jdGlvbicgPyB2YXJpYWJsZSA6IHVuZGVmaW5lZDtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKG5hbWVzcGFjZSwgbWV0aG9kKSB7XG4gIHJldHVybiBhcmd1bWVudHMubGVuZ3RoIDwgMiA/IGFGdW5jdGlvbihwYXRoW25hbWVzcGFjZV0pIHx8IGFGdW5jdGlvbihnbG9iYWxbbmFtZXNwYWNlXSlcbiAgICA6IHBhdGhbbmFtZXNwYWNlXSAmJiBwYXRoW25hbWVzcGFjZV1bbWV0aG9kXSB8fCBnbG9iYWxbbmFtZXNwYWNlXSAmJiBnbG9iYWxbbmFtZXNwYWNlXVttZXRob2RdO1xufTtcbiIsInZhciBOQVRJVkVfV0VBS19NQVAgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXdlYWstbWFwJyk7XG52YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xudmFyIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtbm9uLWVudW1lcmFibGUtcHJvcGVydHknKTtcbnZhciBvYmplY3RIYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBoaWRkZW5LZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hpZGRlbi1rZXlzJyk7XG5cbnZhciBXZWFrTWFwID0gZ2xvYmFsLldlYWtNYXA7XG52YXIgc2V0LCBnZXQsIGhhcztcblxudmFyIGVuZm9yY2UgPSBmdW5jdGlvbiAoaXQpIHtcbiAgcmV0dXJuIGhhcyhpdCkgPyBnZXQoaXQpIDogc2V0KGl0LCB7fSk7XG59O1xuXG52YXIgZ2V0dGVyRm9yID0gZnVuY3Rpb24gKFRZUEUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChpdCkge1xuICAgIHZhciBzdGF0ZTtcbiAgICBpZiAoIWlzT2JqZWN0KGl0KSB8fCAoc3RhdGUgPSBnZXQoaXQpKS50eXBlICE9PSBUWVBFKSB7XG4gICAgICB0aHJvdyBUeXBlRXJyb3IoJ0luY29tcGF0aWJsZSByZWNlaXZlciwgJyArIFRZUEUgKyAnIHJlcXVpcmVkJyk7XG4gICAgfSByZXR1cm4gc3RhdGU7XG4gIH07XG59O1xuXG5pZiAoTkFUSVZFX1dFQUtfTUFQKSB7XG4gIHZhciBzdG9yZSA9IG5ldyBXZWFrTWFwKCk7XG4gIHZhciB3bWdldCA9IHN0b3JlLmdldDtcbiAgdmFyIHdtaGFzID0gc3RvcmUuaGFzO1xuICB2YXIgd21zZXQgPSBzdG9yZS5zZXQ7XG4gIHNldCA9IGZ1bmN0aW9uIChpdCwgbWV0YWRhdGEpIHtcbiAgICB3bXNldC5jYWxsKHN0b3JlLCBpdCwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtZ2V0LmNhbGwoc3RvcmUsIGl0KSB8fCB7fTtcbiAgfTtcbiAgaGFzID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIHdtaGFzLmNhbGwoc3RvcmUsIGl0KTtcbiAgfTtcbn0gZWxzZSB7XG4gIHZhciBTVEFURSA9IHNoYXJlZEtleSgnc3RhdGUnKTtcbiAgaGlkZGVuS2V5c1tTVEFURV0gPSB0cnVlO1xuICBzZXQgPSBmdW5jdGlvbiAoaXQsIG1ldGFkYXRhKSB7XG4gICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KGl0LCBTVEFURSwgbWV0YWRhdGEpO1xuICAgIHJldHVybiBtZXRhZGF0YTtcbiAgfTtcbiAgZ2V0ID0gZnVuY3Rpb24gKGl0KSB7XG4gICAgcmV0dXJuIG9iamVjdEhhcyhpdCwgU1RBVEUpID8gaXRbU1RBVEVdIDoge307XG4gIH07XG4gIGhhcyA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBvYmplY3RIYXMoaXQsIFNUQVRFKTtcbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIHNldDogc2V0LFxuICBnZXQ6IGdldCxcbiAgaGFzOiBoYXMsXG4gIGVuZm9yY2U6IGVuZm9yY2UsXG4gIGdldHRlckZvcjogZ2V0dGVyRm9yXG59O1xuIiwidmFyIHN0b3JlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1zdG9yZScpO1xuXG52YXIgZnVuY3Rpb25Ub1N0cmluZyA9IEZ1bmN0aW9uLnRvU3RyaW5nO1xuXG4vLyB0aGlzIGhlbHBlciBicm9rZW4gaW4gYDMuNC4xLTMuNC40YCwgc28gd2UgY2FuJ3QgdXNlIGBzaGFyZWRgIGhlbHBlclxuaWYgKHR5cGVvZiBzdG9yZS5pbnNwZWN0U291cmNlICE9ICdmdW5jdGlvbicpIHtcbiAgc3RvcmUuaW5zcGVjdFNvdXJjZSA9IGZ1bmN0aW9uIChpdCkge1xuICAgIHJldHVybiBmdW5jdGlvblRvU3RyaW5nLmNhbGwoaXQpO1xuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0b3JlLmluc3BlY3RTb3VyY2U7XG4iLCJ2YXIgREVTQ1JJUFRPUlMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZGVzY3JpcHRvcnMnKTtcbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtcHJvcGVydHktaXMtZW51bWVyYWJsZScpO1xudmFyIGNyZWF0ZVByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jcmVhdGUtcHJvcGVydHktZGVzY3JpcHRvcicpO1xudmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvUHJpbWl0aXZlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLXByaW1pdGl2ZScpO1xudmFyIGhhcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9oYXMnKTtcbnZhciBJRThfRE9NX0RFRklORSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pZTgtZG9tLWRlZmluZScpO1xuXG52YXIgbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjtcblxuLy8gYE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LmdldG93bnByb3BlcnR5ZGVzY3JpcHRvclxuZXhwb3J0cy5mID0gREVTQ1JJUFRPUlMgPyBuYXRpdmVHZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IgOiBmdW5jdGlvbiBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoTywgUCkge1xuICBPID0gdG9JbmRleGVkT2JqZWN0KE8pO1xuICBQID0gdG9QcmltaXRpdmUoUCwgdHJ1ZSk7XG4gIGlmIChJRThfRE9NX0RFRklORSkgdHJ5IHtcbiAgICByZXR1cm4gbmF0aXZlR2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKE8sIFApO1xuICB9IGNhdGNoIChlcnJvcikgeyAvKiBlbXB0eSAqLyB9XG4gIGlmIChoYXMoTywgUCkpIHJldHVybiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoIXByb3BlcnR5SXNFbnVtZXJhYmxlTW9kdWxlLmYuY2FsbChPLCBQKSwgT1tQXSk7XG59O1xuIiwidmFyIGdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9nbG9iYWwnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHNldEdsb2JhbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xudmFyIEludGVybmFsU3RhdGVNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaW50ZXJuYWwtc3RhdGUnKTtcblxudmFyIGdldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLmdldDtcbnZhciBlbmZvcmNlSW50ZXJuYWxTdGF0ZSA9IEludGVybmFsU3RhdGVNb2R1bGUuZW5mb3JjZTtcbnZhciBURU1QTEFURSA9IFN0cmluZyhTdHJpbmcpLnNwbGl0KCdTdHJpbmcnKTtcblxuKG1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKE8sIGtleSwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgdmFyIHVuc2FmZSA9IG9wdGlvbnMgPyAhIW9wdGlvbnMudW5zYWZlIDogZmFsc2U7XG4gIHZhciBzaW1wbGUgPSBvcHRpb25zID8gISFvcHRpb25zLmVudW1lcmFibGUgOiBmYWxzZTtcbiAgdmFyIG5vVGFyZ2V0R2V0ID0gb3B0aW9ucyA/ICEhb3B0aW9ucy5ub1RhcmdldEdldCA6IGZhbHNlO1xuICBpZiAodHlwZW9mIHZhbHVlID09ICdmdW5jdGlvbicpIHtcbiAgICBpZiAodHlwZW9mIGtleSA9PSAnc3RyaW5nJyAmJiAhaGFzKHZhbHVlLCAnbmFtZScpKSBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkodmFsdWUsICduYW1lJywga2V5KTtcbiAgICBlbmZvcmNlSW50ZXJuYWxTdGF0ZSh2YWx1ZSkuc291cmNlID0gVEVNUExBVEUuam9pbih0eXBlb2Yga2V5ID09ICdzdHJpbmcnID8ga2V5IDogJycpO1xuICB9XG4gIGlmIChPID09PSBnbG9iYWwpIHtcbiAgICBpZiAoc2ltcGxlKSBPW2tleV0gPSB2YWx1ZTtcbiAgICBlbHNlIHNldEdsb2JhbChrZXksIHZhbHVlKTtcbiAgICByZXR1cm47XG4gIH0gZWxzZSBpZiAoIXVuc2FmZSkge1xuICAgIGRlbGV0ZSBPW2tleV07XG4gIH0gZWxzZSBpZiAoIW5vVGFyZ2V0R2V0ICYmIE9ba2V5XSkge1xuICAgIHNpbXBsZSA9IHRydWU7XG4gIH1cbiAgaWYgKHNpbXBsZSkgT1trZXldID0gdmFsdWU7XG4gIGVsc2UgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KE8sIGtleSwgdmFsdWUpO1xuLy8gYWRkIGZha2UgRnVuY3Rpb24jdG9TdHJpbmcgZm9yIGNvcnJlY3Qgd29yayB3cmFwcGVkIG1ldGhvZHMgLyBjb25zdHJ1Y3RvcnMgd2l0aCBtZXRob2RzIGxpa2UgTG9EYXNoIGlzTmF0aXZlXG59KShGdW5jdGlvbi5wcm90b3R5cGUsICd0b1N0cmluZycsIGZ1bmN0aW9uIHRvU3RyaW5nKCkge1xuICByZXR1cm4gdHlwZW9mIHRoaXMgPT0gJ2Z1bmN0aW9uJyAmJiBnZXRJbnRlcm5hbFN0YXRlKHRoaXMpLnNvdXJjZSB8fCBpbnNwZWN0U291cmNlKHRoaXMpO1xufSk7XG4iLCIndXNlIHN0cmljdCc7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIElTX1BVUkUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtcHVyZScpO1xuXG52YXIgSVRFUkFUT1IgPSB3ZWxsS25vd25TeW1ib2woJ2l0ZXJhdG9yJyk7XG52YXIgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IGZhbHNlO1xuXG52YXIgcmV0dXJuVGhpcyA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXM7IH07XG5cbi8vIGAlSXRlcmF0b3JQcm90b3R5cGUlYCBvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVpdGVyYXRvcnByb3RvdHlwZSUtb2JqZWN0XG52YXIgSXRlcmF0b3JQcm90b3R5cGUsIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSwgYXJyYXlJdGVyYXRvcjtcblxuaWYgKFtdLmtleXMpIHtcbiAgYXJyYXlJdGVyYXRvciA9IFtdLmtleXMoKTtcbiAgLy8gU2FmYXJpIDggaGFzIGJ1Z2d5IGl0ZXJhdG9ycyB3L28gYG5leHRgXG4gIGlmICghKCduZXh0JyBpbiBhcnJheUl0ZXJhdG9yKSkgQlVHR1lfU0FGQVJJX0lURVJBVE9SUyA9IHRydWU7XG4gIGVsc2Uge1xuICAgIFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZSA9IGdldFByb3RvdHlwZU9mKGdldFByb3RvdHlwZU9mKGFycmF5SXRlcmF0b3IpKTtcbiAgICBpZiAoUHJvdG90eXBlT2ZBcnJheUl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlKSBJdGVyYXRvclByb3RvdHlwZSA9IFByb3RvdHlwZU9mQXJyYXlJdGVyYXRvclByb3RvdHlwZTtcbiAgfVxufVxuXG5pZiAoSXRlcmF0b3JQcm90b3R5cGUgPT0gdW5kZWZpbmVkKSBJdGVyYXRvclByb3RvdHlwZSA9IHt9O1xuXG4vLyAyNS4xLjIuMS4xICVJdGVyYXRvclByb3RvdHlwZSVbQEBpdGVyYXRvcl0oKVxuaWYgKCFJU19QVVJFICYmICFoYXMoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SKSkge1xuICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIEl0ZXJhdG9yUHJvdG90eXBlOiBJdGVyYXRvclByb3RvdHlwZSxcbiAgQlVHR1lfU0FGQVJJX0lURVJBVE9SUzogQlVHR1lfU0FGQVJJX0lURVJBVE9SU1xufTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgdG9PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8tb2JqZWN0Jyk7XG52YXIgc2hhcmVkS2V5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NoYXJlZC1rZXknKTtcbnZhciBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29ycmVjdC1wcm90b3R5cGUtZ2V0dGVyJyk7XG5cbnZhciBJRV9QUk9UTyA9IHNoYXJlZEtleSgnSUVfUFJPVE8nKTtcbnZhciBPYmplY3RQcm90b3R5cGUgPSBPYmplY3QucHJvdG90eXBlO1xuXG4vLyBgT2JqZWN0LmdldFByb3RvdHlwZU9mYCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLW9iamVjdC5nZXRwcm90b3R5cGVvZlxubW9kdWxlLmV4cG9ydHMgPSBDT1JSRUNUX1BST1RPVFlQRV9HRVRURVIgPyBPYmplY3QuZ2V0UHJvdG90eXBlT2YgOiBmdW5jdGlvbiAoTykge1xuICBPID0gdG9PYmplY3QoTyk7XG4gIGlmIChoYXMoTywgSUVfUFJPVE8pKSByZXR1cm4gT1tJRV9QUk9UT107XG4gIGlmICh0eXBlb2YgTy5jb25zdHJ1Y3RvciA9PSAnZnVuY3Rpb24nICYmIE8gaW5zdGFuY2VvZiBPLmNvbnN0cnVjdG9yKSB7XG4gICAgcmV0dXJuIE8uY29uc3RydWN0b3IucHJvdG90eXBlO1xuICB9IHJldHVybiBPIGluc3RhbmNlb2YgT2JqZWN0ID8gT2JqZWN0UHJvdG90eXBlIDogbnVsbDtcbn07XG4iLCJ2YXIgZGVmaW5lUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpLmY7XG52YXIgaGFzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2hhcycpO1xudmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xuXG52YXIgVE9fU1RSSU5HX1RBRyA9IHdlbGxLbm93blN5bWJvbCgndG9TdHJpbmdUYWcnKTtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXQsIFRBRywgU1RBVElDKSB7XG4gIGlmIChpdCAmJiAhaGFzKGl0ID0gU1RBVElDID8gaXQgOiBpdC5wcm90b3R5cGUsIFRPX1NUUklOR19UQUcpKSB7XG4gICAgZGVmaW5lUHJvcGVydHkoaXQsIFRPX1NUUklOR19UQUcsIHsgY29uZmlndXJhYmxlOiB0cnVlLCB2YWx1ZTogVEFHIH0pO1xuICB9XG59O1xuIiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc3ltYm9sT2JzZXJ2YWJsZVBvbnlmaWxsKHJvb3QpIHtcblx0dmFyIHJlc3VsdDtcblx0dmFyIFN5bWJvbCA9IHJvb3QuU3ltYm9sO1xuXG5cdGlmICh0eXBlb2YgU3ltYm9sID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0aWYgKFN5bWJvbC5vYnNlcnZhYmxlKSB7XG5cdFx0XHRyZXN1bHQgPSBTeW1ib2wub2JzZXJ2YWJsZTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0cmVzdWx0ID0gU3ltYm9sKCdvYnNlcnZhYmxlJyk7XG5cdFx0XHRTeW1ib2wub2JzZXJ2YWJsZSA9IHJlc3VsdDtcblx0XHR9XG5cdH0gZWxzZSB7XG5cdFx0cmVzdWx0ID0gJ0BAb2JzZXJ2YWJsZSc7XG5cdH1cblxuXHRyZXR1cm4gcmVzdWx0O1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJhcHBcIjpcIl8xcnFJMFBXaFc3WXYzVTRYbWtYd1N4XCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJfMlB6M21QandfdXA0c2NJZDhhNDQ2QlwifTsiLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYGZhbHNlYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMTMuMFxuICogQGNhdGVnb3J5IFV0aWxcbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udGltZXMoMiwgXy5zdHViRmFsc2UpO1xuICogLy8gPT4gW2ZhbHNlLCBmYWxzZV1cbiAqL1xuZnVuY3Rpb24gc3R1YkZhbHNlKCkge1xuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0dWJGYWxzZTtcbiIsImltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYGV4cG9ydHNgLiAqL1xudmFyIGZyZWVFeHBvcnRzID0gdHlwZW9mIGV4cG9ydHMgPT0gJ29iamVjdCcgJiYgZXhwb3J0cyAmJiAhZXhwb3J0cy5ub2RlVHlwZSAmJiBleHBvcnRzO1xuXG4vKiogRGV0ZWN0IGZyZWUgdmFyaWFibGUgYG1vZHVsZWAuICovXG52YXIgZnJlZU1vZHVsZSA9IGZyZWVFeHBvcnRzICYmIHR5cGVvZiBtb2R1bGUgPT0gJ29iamVjdCcgJiYgbW9kdWxlICYmICFtb2R1bGUubm9kZVR5cGUgJiYgbW9kdWxlO1xuXG4vKiogRGV0ZWN0IHRoZSBwb3B1bGFyIENvbW1vbkpTIGV4dGVuc2lvbiBgbW9kdWxlLmV4cG9ydHNgLiAqL1xudmFyIG1vZHVsZUV4cG9ydHMgPSBmcmVlTW9kdWxlICYmIGZyZWVNb2R1bGUuZXhwb3J0cyA9PT0gZnJlZUV4cG9ydHM7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIEJ1ZmZlciA9IG1vZHVsZUV4cG9ydHMgPyByb290LkJ1ZmZlciA6IHVuZGVmaW5lZCxcbiAgICBhbGxvY1Vuc2FmZSA9IEJ1ZmZlciA/IEJ1ZmZlci5hbGxvY1Vuc2FmZSA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgIGBidWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0J1ZmZlcn0gYnVmZmVyIFRoZSBidWZmZXIgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge0J1ZmZlcn0gUmV0dXJucyB0aGUgY2xvbmVkIGJ1ZmZlci5cbiAqL1xuZnVuY3Rpb24gY2xvbmVCdWZmZXIoYnVmZmVyLCBpc0RlZXApIHtcbiAgaWYgKGlzRGVlcCkge1xuICAgIHJldHVybiBidWZmZXIuc2xpY2UoKTtcbiAgfVxuICB2YXIgbGVuZ3RoID0gYnVmZmVyLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGFsbG9jVW5zYWZlID8gYWxsb2NVbnNhZmUobGVuZ3RoKSA6IG5ldyBidWZmZXIuY29uc3RydWN0b3IobGVuZ3RoKTtcblxuICBidWZmZXIuY29weShyZXN1bHQpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZUJ1ZmZlcjtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJib3R0b21QYXJ0XCI6XCJfMk1ZTnNjRzhsemw2TGM0T2RRcEpKN1wifTsiLCJcbi8qKlxuICogVG9wb2xvZ2ljYWwgc29ydGluZyBmdW5jdGlvblxuICpcbiAqIEBwYXJhbSB7QXJyYXl9IGVkZ2VzXG4gKiBAcmV0dXJucyB7QXJyYXl9XG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbihlZGdlcykge1xuICByZXR1cm4gdG9wb3NvcnQodW5pcXVlTm9kZXMoZWRnZXMpLCBlZGdlcylcbn1cblxubW9kdWxlLmV4cG9ydHMuYXJyYXkgPSB0b3Bvc29ydFxuXG5mdW5jdGlvbiB0b3Bvc29ydChub2RlcywgZWRnZXMpIHtcbiAgdmFyIGN1cnNvciA9IG5vZGVzLmxlbmd0aFxuICAgICwgc29ydGVkID0gbmV3IEFycmF5KGN1cnNvcilcbiAgICAsIHZpc2l0ZWQgPSB7fVxuICAgICwgaSA9IGN1cnNvclxuICAgIC8vIEJldHRlciBkYXRhIHN0cnVjdHVyZXMgbWFrZSBhbGdvcml0aG0gbXVjaCBmYXN0ZXIuXG4gICAgLCBvdXRnb2luZ0VkZ2VzID0gbWFrZU91dGdvaW5nRWRnZXMoZWRnZXMpXG4gICAgLCBub2Rlc0hhc2ggPSBtYWtlTm9kZXNIYXNoKG5vZGVzKVxuXG4gIC8vIGNoZWNrIGZvciB1bmtub3duIG5vZGVzXG4gIGVkZ2VzLmZvckVhY2goZnVuY3Rpb24oZWRnZSkge1xuICAgIGlmICghbm9kZXNIYXNoLmhhcyhlZGdlWzBdKSB8fCAhbm9kZXNIYXNoLmhhcyhlZGdlWzFdKSkge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKCdVbmtub3duIG5vZGUuIFRoZXJlIGlzIGFuIHVua25vd24gbm9kZSBpbiB0aGUgc3VwcGxpZWQgZWRnZXMuJylcbiAgICB9XG4gIH0pXG5cbiAgd2hpbGUgKGktLSkge1xuICAgIGlmICghdmlzaXRlZFtpXSkgdmlzaXQobm9kZXNbaV0sIGksIG5ldyBTZXQoKSlcbiAgfVxuXG4gIHJldHVybiBzb3J0ZWRcblxuICBmdW5jdGlvbiB2aXNpdChub2RlLCBpLCBwcmVkZWNlc3NvcnMpIHtcbiAgICBpZihwcmVkZWNlc3NvcnMuaGFzKG5vZGUpKSB7XG4gICAgICB2YXIgbm9kZVJlcFxuICAgICAgdHJ5IHtcbiAgICAgICAgbm9kZVJlcCA9IFwiLCBub2RlIHdhczpcIiArIEpTT04uc3RyaW5naWZ5KG5vZGUpXG4gICAgICB9IGNhdGNoKGUpIHtcbiAgICAgICAgbm9kZVJlcCA9IFwiXCJcbiAgICAgIH1cbiAgICAgIHRocm93IG5ldyBFcnJvcignQ3ljbGljIGRlcGVuZGVuY3knICsgbm9kZVJlcClcbiAgICB9XG5cbiAgICBpZiAoIW5vZGVzSGFzaC5oYXMobm9kZSkpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRm91bmQgdW5rbm93biBub2RlLiBNYWtlIHN1cmUgdG8gcHJvdmlkZWQgYWxsIGludm9sdmVkIG5vZGVzLiBVbmtub3duIG5vZGU6ICcrSlNPTi5zdHJpbmdpZnkobm9kZSkpXG4gICAgfVxuXG4gICAgaWYgKHZpc2l0ZWRbaV0pIHJldHVybjtcbiAgICB2aXNpdGVkW2ldID0gdHJ1ZVxuXG4gICAgdmFyIG91dGdvaW5nID0gb3V0Z29pbmdFZGdlcy5nZXQobm9kZSkgfHwgbmV3IFNldCgpXG4gICAgb3V0Z29pbmcgPSBBcnJheS5mcm9tKG91dGdvaW5nKVxuXG4gICAgaWYgKGkgPSBvdXRnb2luZy5sZW5ndGgpIHtcbiAgICAgIHByZWRlY2Vzc29ycy5hZGQobm9kZSlcbiAgICAgIGRvIHtcbiAgICAgICAgdmFyIGNoaWxkID0gb3V0Z29pbmdbLS1pXVxuICAgICAgICB2aXNpdChjaGlsZCwgbm9kZXNIYXNoLmdldChjaGlsZCksIHByZWRlY2Vzc29ycylcbiAgICAgIH0gd2hpbGUgKGkpXG4gICAgICBwcmVkZWNlc3NvcnMuZGVsZXRlKG5vZGUpXG4gICAgfVxuXG4gICAgc29ydGVkWy0tY3Vyc29yXSA9IG5vZGVcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmlxdWVOb2RlcyhhcnIpe1xuICB2YXIgcmVzID0gbmV3IFNldCgpXG4gIGZvciAodmFyIGkgPSAwLCBsZW4gPSBhcnIubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcbiAgICB2YXIgZWRnZSA9IGFycltpXVxuICAgIHJlcy5hZGQoZWRnZVswXSlcbiAgICByZXMuYWRkKGVkZ2VbMV0pXG4gIH1cbiAgcmV0dXJuIEFycmF5LmZyb20ocmVzKVxufVxuXG5mdW5jdGlvbiBtYWtlT3V0Z29pbmdFZGdlcyhhcnIpe1xuICB2YXIgZWRnZXMgPSBuZXcgTWFwKClcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHZhciBlZGdlID0gYXJyW2ldXG4gICAgaWYgKCFlZGdlcy5oYXMoZWRnZVswXSkpIGVkZ2VzLnNldChlZGdlWzBdLCBuZXcgU2V0KCkpXG4gICAgaWYgKCFlZGdlcy5oYXMoZWRnZVsxXSkpIGVkZ2VzLnNldChlZGdlWzFdLCBuZXcgU2V0KCkpXG4gICAgZWRnZXMuZ2V0KGVkZ2VbMF0pLmFkZChlZGdlWzFdKVxuICB9XG4gIHJldHVybiBlZGdlc1xufVxuXG5mdW5jdGlvbiBtYWtlTm9kZXNIYXNoKGFycil7XG4gIHZhciByZXMgPSBuZXcgTWFwKClcbiAgZm9yICh2YXIgaSA9IDAsIGxlbiA9IGFyci5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuICAgIHJlcy5zZXQoYXJyW2ldLCBpKVxuICB9XG4gIHJldHVybiByZXNcbn1cbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJ3cmFwcGVyXCI6XCJfMUVSU2hOM25wSnBLR3AwamJ5aE9NXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJib3R0b21QYXJ0XCI6XCJfOEVLc3hwRkJlaEo4Q01fOTlHZjlrXCJ9OyIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJib3R0b21QYXJ0XCI6XCJfMU0wNnE2VXFvSlFxQ0c5V2NXaTNVcVwifTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBsPXJlcXVpcmUoXCJvYmplY3QtYXNzaWduXCIpLG49XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLmZvcixwPW4/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMscT1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wb3J0YWxcIik6NjAxMDYscj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mcmFnbWVudFwiKTo2MDEwNyx0PW4/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LHU9bj9TeW1ib2wuZm9yKFwicmVhY3QucHJvZmlsZXJcIik6NjAxMTQsdj1uP1N5bWJvbC5mb3IoXCJyZWFjdC5wcm92aWRlclwiKTo2MDEwOSx3PW4/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAseD1uP1N5bWJvbC5mb3IoXCJyZWFjdC5mb3J3YXJkX3JlZlwiKTo2MDExMix5PW4/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLHo9bj9TeW1ib2wuZm9yKFwicmVhY3QubWVtb1wiKTo2MDExNSxBPW4/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6XG42MDExNixCPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5pdGVyYXRvcjtmdW5jdGlvbiBDKGEpe2Zvcih2YXIgYj1cImh0dHBzOi8vcmVhY3Rqcy5vcmcvZG9jcy9lcnJvci1kZWNvZGVyLmh0bWw/aW52YXJpYW50PVwiK2EsYz0xO2M8YXJndW1lbnRzLmxlbmd0aDtjKyspYis9XCImYXJnc1tdPVwiK2VuY29kZVVSSUNvbXBvbmVudChhcmd1bWVudHNbY10pO3JldHVyblwiTWluaWZpZWQgUmVhY3QgZXJyb3IgI1wiK2ErXCI7IHZpc2l0IFwiK2IrXCIgZm9yIHRoZSBmdWxsIG1lc3NhZ2Ugb3IgdXNlIHRoZSBub24tbWluaWZpZWQgZGV2IGVudmlyb25tZW50IGZvciBmdWxsIGVycm9ycyBhbmQgYWRkaXRpb25hbCBoZWxwZnVsIHdhcm5pbmdzLlwifVxudmFyIEQ9e2lzTW91bnRlZDpmdW5jdGlvbigpe3JldHVybiExfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oKXt9LGVucXVldWVTZXRTdGF0ZTpmdW5jdGlvbigpe319LEU9e307ZnVuY3Rpb24gRihhLGIsYyl7dGhpcy5wcm9wcz1hO3RoaXMuY29udGV4dD1iO3RoaXMucmVmcz1FO3RoaXMudXBkYXRlcj1jfHxEfUYucHJvdG90eXBlLmlzUmVhY3RDb21wb25lbnQ9e307Ri5wcm90b3R5cGUuc2V0U3RhdGU9ZnVuY3Rpb24oYSxiKXtpZihcIm9iamVjdFwiIT09dHlwZW9mIGEmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBhJiZudWxsIT1hKXRocm93IEVycm9yKEMoODUpKTt0aGlzLnVwZGF0ZXIuZW5xdWV1ZVNldFN0YXRlKHRoaXMsYSxiLFwic2V0U3RhdGVcIil9O0YucHJvdG90eXBlLmZvcmNlVXBkYXRlPWZ1bmN0aW9uKGEpe3RoaXMudXBkYXRlci5lbnF1ZXVlRm9yY2VVcGRhdGUodGhpcyxhLFwiZm9yY2VVcGRhdGVcIil9O1xuZnVuY3Rpb24gRygpe31HLnByb3RvdHlwZT1GLnByb3RvdHlwZTtmdW5jdGlvbiBIKGEsYixjKXt0aGlzLnByb3BzPWE7dGhpcy5jb250ZXh0PWI7dGhpcy5yZWZzPUU7dGhpcy51cGRhdGVyPWN8fER9dmFyIEk9SC5wcm90b3R5cGU9bmV3IEc7SS5jb25zdHJ1Y3Rvcj1IO2woSSxGLnByb3RvdHlwZSk7SS5pc1B1cmVSZWFjdENvbXBvbmVudD0hMDt2YXIgSj17Y3VycmVudDpudWxsfSxLPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksTD17a2V5OiEwLHJlZjohMCxfX3NlbGY6ITAsX19zb3VyY2U6ITB9O1xuZnVuY3Rpb24gTShhLGIsYyl7dmFyIGUsZD17fSxnPW51bGwsaz1udWxsO2lmKG51bGwhPWIpZm9yKGUgaW4gdm9pZCAwIT09Yi5yZWYmJihrPWIucmVmKSx2b2lkIDAhPT1iLmtleSYmKGc9XCJcIitiLmtleSksYilLLmNhbGwoYixlKSYmIUwuaGFzT3duUHJvcGVydHkoZSkmJihkW2VdPWJbZV0pO3ZhciBmPWFyZ3VtZW50cy5sZW5ndGgtMjtpZigxPT09ZilkLmNoaWxkcmVuPWM7ZWxzZSBpZigxPGYpe2Zvcih2YXIgaD1BcnJheShmKSxtPTA7bTxmO20rKyloW21dPWFyZ3VtZW50c1ttKzJdO2QuY2hpbGRyZW49aH1pZihhJiZhLmRlZmF1bHRQcm9wcylmb3IoZSBpbiBmPWEuZGVmYXVsdFByb3BzLGYpdm9pZCAwPT09ZFtlXSYmKGRbZV09ZltlXSk7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLGtleTpnLHJlZjprLHByb3BzOmQsX293bmVyOkouY3VycmVudH19XG5mdW5jdGlvbiBOKGEsYil7cmV0dXJueyQkdHlwZW9mOnAsdHlwZTphLnR5cGUsa2V5OmIscmVmOmEucmVmLHByb3BzOmEucHJvcHMsX293bmVyOmEuX293bmVyfX1mdW5jdGlvbiBPKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1wfWZ1bmN0aW9uIGVzY2FwZShhKXt2YXIgYj17XCI9XCI6XCI9MFwiLFwiOlwiOlwiPTJcIn07cmV0dXJuXCIkXCIrKFwiXCIrYSkucmVwbGFjZSgvWz06XS9nLGZ1bmN0aW9uKGEpe3JldHVybiBiW2FdfSl9dmFyIFA9L1xcLysvZyxRPVtdO2Z1bmN0aW9uIFIoYSxiLGMsZSl7aWYoUS5sZW5ndGgpe3ZhciBkPVEucG9wKCk7ZC5yZXN1bHQ9YTtkLmtleVByZWZpeD1iO2QuZnVuYz1jO2QuY29udGV4dD1lO2QuY291bnQ9MDtyZXR1cm4gZH1yZXR1cm57cmVzdWx0OmEsa2V5UHJlZml4OmIsZnVuYzpjLGNvbnRleHQ6ZSxjb3VudDowfX1cbmZ1bmN0aW9uIFMoYSl7YS5yZXN1bHQ9bnVsbDthLmtleVByZWZpeD1udWxsO2EuZnVuYz1udWxsO2EuY29udGV4dD1udWxsO2EuY291bnQ9MDsxMD5RLmxlbmd0aCYmUS5wdXNoKGEpfVxuZnVuY3Rpb24gVChhLGIsYyxlKXt2YXIgZD10eXBlb2YgYTtpZihcInVuZGVmaW5lZFwiPT09ZHx8XCJib29sZWFuXCI9PT1kKWE9bnVsbDt2YXIgZz0hMTtpZihudWxsPT09YSlnPSEwO2Vsc2Ugc3dpdGNoKGQpe2Nhc2UgXCJzdHJpbmdcIjpjYXNlIFwibnVtYmVyXCI6Zz0hMDticmVhaztjYXNlIFwib2JqZWN0XCI6c3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgcDpjYXNlIHE6Zz0hMH19aWYoZylyZXR1cm4gYyhlLGEsXCJcIj09PWI/XCIuXCIrVShhLDApOmIpLDE7Zz0wO2I9XCJcIj09PWI/XCIuXCI6YitcIjpcIjtpZihBcnJheS5pc0FycmF5KGEpKWZvcih2YXIgaz0wO2s8YS5sZW5ndGg7aysrKXtkPWFba107dmFyIGY9YitVKGQsayk7Zys9VChkLGYsYyxlKX1lbHNlIGlmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGE/Zj1udWxsOihmPUImJmFbQl18fGFbXCJAQGl0ZXJhdG9yXCJdLGY9XCJmdW5jdGlvblwiPT09dHlwZW9mIGY/ZjpudWxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZilmb3IoYT1mLmNhbGwoYSksaz1cbjA7IShkPWEubmV4dCgpKS5kb25lOylkPWQudmFsdWUsZj1iK1UoZCxrKyspLGcrPVQoZCxmLGMsZSk7ZWxzZSBpZihcIm9iamVjdFwiPT09ZCl0aHJvdyBjPVwiXCIrYSxFcnJvcihDKDMxLFwiW29iamVjdCBPYmplY3RdXCI9PT1jP1wib2JqZWN0IHdpdGgga2V5cyB7XCIrT2JqZWN0LmtleXMoYSkuam9pbihcIiwgXCIpK1wifVwiOmMsXCJcIikpO3JldHVybiBnfWZ1bmN0aW9uIFYoYSxiLGMpe3JldHVybiBudWxsPT1hPzA6VChhLFwiXCIsYixjKX1mdW5jdGlvbiBVKGEsYil7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmbnVsbCE9YS5rZXk/ZXNjYXBlKGEua2V5KTpiLnRvU3RyaW5nKDM2KX1mdW5jdGlvbiBXKGEsYil7YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKX1cbmZ1bmN0aW9uIGFhKGEsYixjKXt2YXIgZT1hLnJlc3VsdCxkPWEua2V5UHJlZml4O2E9YS5mdW5jLmNhbGwoYS5jb250ZXh0LGIsYS5jb3VudCsrKTtBcnJheS5pc0FycmF5KGEpP1goYSxlLGMsZnVuY3Rpb24oYSl7cmV0dXJuIGF9KTpudWxsIT1hJiYoTyhhKSYmKGE9TihhLGQrKCFhLmtleXx8YiYmYi5rZXk9PT1hLmtleT9cIlwiOihcIlwiK2Eua2V5KS5yZXBsYWNlKFAsXCIkJi9cIikrXCIvXCIpK2MpKSxlLnB1c2goYSkpfWZ1bmN0aW9uIFgoYSxiLGMsZSxkKXt2YXIgZz1cIlwiO251bGwhPWMmJihnPShcIlwiK2MpLnJlcGxhY2UoUCxcIiQmL1wiKStcIi9cIik7Yj1SKGIsZyxlLGQpO1YoYSxhYSxiKTtTKGIpfXZhciBZPXtjdXJyZW50Om51bGx9O2Z1bmN0aW9uIFooKXt2YXIgYT1ZLmN1cnJlbnQ7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IoQygzMjEpKTtyZXR1cm4gYX1cbnZhciBiYT17UmVhY3RDdXJyZW50RGlzcGF0Y2hlcjpZLFJlYWN0Q3VycmVudEJhdGNoQ29uZmlnOntzdXNwZW5zZTpudWxsfSxSZWFjdEN1cnJlbnRPd25lcjpKLElzU29tZVJlbmRlcmVyQWN0aW5nOntjdXJyZW50OiExfSxhc3NpZ246bH07ZXhwb3J0cy5DaGlsZHJlbj17bWFwOmZ1bmN0aW9uKGEsYixjKXtpZihudWxsPT1hKXJldHVybiBhO3ZhciBlPVtdO1goYSxlLG51bGwsYixjKTtyZXR1cm4gZX0sZm9yRWFjaDpmdW5jdGlvbihhLGIsYyl7aWYobnVsbD09YSlyZXR1cm4gYTtiPVIobnVsbCxudWxsLGIsYyk7VihhLFcsYik7UyhiKX0sY291bnQ6ZnVuY3Rpb24oYSl7cmV0dXJuIFYoYSxmdW5jdGlvbigpe3JldHVybiBudWxsfSxudWxsKX0sdG9BcnJheTpmdW5jdGlvbihhKXt2YXIgYj1bXTtYKGEsYixudWxsLGZ1bmN0aW9uKGEpe3JldHVybiBhfSk7cmV0dXJuIGJ9LG9ubHk6ZnVuY3Rpb24oYSl7aWYoIU8oYSkpdGhyb3cgRXJyb3IoQygxNDMpKTtyZXR1cm4gYX19O1xuZXhwb3J0cy5Db21wb25lbnQ9RjtleHBvcnRzLkZyYWdtZW50PXI7ZXhwb3J0cy5Qcm9maWxlcj11O2V4cG9ydHMuUHVyZUNvbXBvbmVudD1IO2V4cG9ydHMuU3RyaWN0TW9kZT10O2V4cG9ydHMuU3VzcGVuc2U9eTtleHBvcnRzLl9fU0VDUkVUX0lOVEVSTkFMU19ET19OT1RfVVNFX09SX1lPVV9XSUxMX0JFX0ZJUkVEPWJhO1xuZXhwb3J0cy5jbG9uZUVsZW1lbnQ9ZnVuY3Rpb24oYSxiLGMpe2lmKG51bGw9PT1hfHx2b2lkIDA9PT1hKXRocm93IEVycm9yKEMoMjY3LGEpKTt2YXIgZT1sKHt9LGEucHJvcHMpLGQ9YS5rZXksZz1hLnJlZixrPWEuX293bmVyO2lmKG51bGwhPWIpe3ZvaWQgMCE9PWIucmVmJiYoZz1iLnJlZixrPUouY3VycmVudCk7dm9pZCAwIT09Yi5rZXkmJihkPVwiXCIrYi5rZXkpO2lmKGEudHlwZSYmYS50eXBlLmRlZmF1bHRQcm9wcyl2YXIgZj1hLnR5cGUuZGVmYXVsdFByb3BzO2ZvcihoIGluIGIpSy5jYWxsKGIsaCkmJiFMLmhhc093blByb3BlcnR5KGgpJiYoZVtoXT12b2lkIDA9PT1iW2hdJiZ2b2lkIDAhPT1mP2ZbaF06YltoXSl9dmFyIGg9YXJndW1lbnRzLmxlbmd0aC0yO2lmKDE9PT1oKWUuY2hpbGRyZW49YztlbHNlIGlmKDE8aCl7Zj1BcnJheShoKTtmb3IodmFyIG09MDttPGg7bSsrKWZbbV09YXJndW1lbnRzW20rMl07ZS5jaGlsZHJlbj1mfXJldHVybnskJHR5cGVvZjpwLHR5cGU6YS50eXBlLFxua2V5OmQscmVmOmcscHJvcHM6ZSxfb3duZXI6a319O2V4cG9ydHMuY3JlYXRlQ29udGV4dD1mdW5jdGlvbihhLGIpe3ZvaWQgMD09PWImJihiPW51bGwpO2E9eyQkdHlwZW9mOncsX2NhbGN1bGF0ZUNoYW5nZWRCaXRzOmIsX2N1cnJlbnRWYWx1ZTphLF9jdXJyZW50VmFsdWUyOmEsX3RocmVhZENvdW50OjAsUHJvdmlkZXI6bnVsbCxDb25zdW1lcjpudWxsfTthLlByb3ZpZGVyPXskJHR5cGVvZjp2LF9jb250ZXh0OmF9O3JldHVybiBhLkNvbnN1bWVyPWF9O2V4cG9ydHMuY3JlYXRlRWxlbWVudD1NO2V4cG9ydHMuY3JlYXRlRmFjdG9yeT1mdW5jdGlvbihhKXt2YXIgYj1NLmJpbmQobnVsbCxhKTtiLnR5cGU9YTtyZXR1cm4gYn07ZXhwb3J0cy5jcmVhdGVSZWY9ZnVuY3Rpb24oKXtyZXR1cm57Y3VycmVudDpudWxsfX07ZXhwb3J0cy5mb3J3YXJkUmVmPWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjp4LHJlbmRlcjphfX07ZXhwb3J0cy5pc1ZhbGlkRWxlbWVudD1PO1xuZXhwb3J0cy5sYXp5PWZ1bmN0aW9uKGEpe3JldHVybnskJHR5cGVvZjpBLF9jdG9yOmEsX3N0YXR1czotMSxfcmVzdWx0Om51bGx9fTtleHBvcnRzLm1lbW89ZnVuY3Rpb24oYSxiKXtyZXR1cm57JCR0eXBlb2Y6eix0eXBlOmEsY29tcGFyZTp2b2lkIDA9PT1iP251bGw6Yn19O2V4cG9ydHMudXNlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiKXtyZXR1cm4gWigpLnVzZUNhbGxiYWNrKGEsYil9O2V4cG9ydHMudXNlQ29udGV4dD1mdW5jdGlvbihhLGIpe3JldHVybiBaKCkudXNlQ29udGV4dChhLGIpfTtleHBvcnRzLnVzZURlYnVnVmFsdWU9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudXNlRWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VJbXBlcmF0aXZlSGFuZGxlPWZ1bmN0aW9uKGEsYixjKXtyZXR1cm4gWigpLnVzZUltcGVyYXRpdmVIYW5kbGUoYSxiLGMpfTtcbmV4cG9ydHMudXNlTGF5b3V0RWZmZWN0PWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VMYXlvdXRFZmZlY3QoYSxiKX07ZXhwb3J0cy51c2VNZW1vPWZ1bmN0aW9uKGEsYil7cmV0dXJuIFooKS51c2VNZW1vKGEsYil9O2V4cG9ydHMudXNlUmVkdWNlcj1mdW5jdGlvbihhLGIsYyl7cmV0dXJuIFooKS51c2VSZWR1Y2VyKGEsYixjKX07ZXhwb3J0cy51c2VSZWY9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VSZWYoYSl9O2V4cG9ydHMudXNlU3RhdGU9ZnVuY3Rpb24oYSl7cmV0dXJuIFooKS51c2VTdGF0ZShhKX07ZXhwb3J0cy52ZXJzaW9uPVwiMTYuMTMuMVwiO1xuIiwiLyoqIEBsaWNlbnNlIFJlYWN0IHYxNi4xMy4xXG4gKiByZWFjdC1kb20ucHJvZHVjdGlvbi5taW4uanNcbiAqXG4gKiBDb3B5cmlnaHQgKGMpIEZhY2Vib29rLCBJbmMuIGFuZCBpdHMgYWZmaWxpYXRlcy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4vKlxuIE1vZGVybml6ciAzLjAuMHByZSAoQ3VzdG9tIEJ1aWxkKSB8IE1JVFxuKi9cbid1c2Ugc3RyaWN0Jzt2YXIgYWE9cmVxdWlyZShcInJlYWN0XCIpLG49cmVxdWlyZShcIm9iamVjdC1hc3NpZ25cIikscj1yZXF1aXJlKFwic2NoZWR1bGVyXCIpO2Z1bmN0aW9uIHUoYSl7Zm9yKHZhciBiPVwiaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2Vycm9yLWRlY29kZXIuaHRtbD9pbnZhcmlhbnQ9XCIrYSxjPTE7Yzxhcmd1bWVudHMubGVuZ3RoO2MrKyliKz1cIiZhcmdzW109XCIrZW5jb2RlVVJJQ29tcG9uZW50KGFyZ3VtZW50c1tjXSk7cmV0dXJuXCJNaW5pZmllZCBSZWFjdCBlcnJvciAjXCIrYStcIjsgdmlzaXQgXCIrYitcIiBmb3IgdGhlIGZ1bGwgbWVzc2FnZSBvciB1c2UgdGhlIG5vbi1taW5pZmllZCBkZXYgZW52aXJvbm1lbnQgZm9yIGZ1bGwgZXJyb3JzIGFuZCBhZGRpdGlvbmFsIGhlbHBmdWwgd2FybmluZ3MuXCJ9aWYoIWFhKXRocm93IEVycm9yKHUoMjI3KSk7XG5mdW5jdGlvbiBiYShhLGIsYyxkLGUsZixnLGgsayl7dmFyIGw9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoYXJndW1lbnRzLDMpO3RyeXtiLmFwcGx5KGMsbCl9Y2F0Y2gobSl7dGhpcy5vbkVycm9yKG0pfX12YXIgZGE9ITEsZWE9bnVsbCxmYT0hMSxoYT1udWxsLGlhPXtvbkVycm9yOmZ1bmN0aW9uKGEpe2RhPSEwO2VhPWF9fTtmdW5jdGlvbiBqYShhLGIsYyxkLGUsZixnLGgsayl7ZGE9ITE7ZWE9bnVsbDtiYS5hcHBseShpYSxhcmd1bWVudHMpfWZ1bmN0aW9uIGthKGEsYixjLGQsZSxmLGcsaCxrKXtqYS5hcHBseSh0aGlzLGFyZ3VtZW50cyk7aWYoZGEpe2lmKGRhKXt2YXIgbD1lYTtkYT0hMTtlYT1udWxsfWVsc2UgdGhyb3cgRXJyb3IodSgxOTgpKTtmYXx8KGZhPSEwLGhhPWwpfX12YXIgbGE9bnVsbCxtYT1udWxsLG5hPW51bGw7XG5mdW5jdGlvbiBvYShhLGIsYyl7dmFyIGQ9YS50eXBlfHxcInVua25vd24tZXZlbnRcIjthLmN1cnJlbnRUYXJnZXQ9bmEoYyk7a2EoZCxiLHZvaWQgMCxhKTthLmN1cnJlbnRUYXJnZXQ9bnVsbH12YXIgcGE9bnVsbCxxYT17fTtcbmZ1bmN0aW9uIHJhKCl7aWYocGEpZm9yKHZhciBhIGluIHFhKXt2YXIgYj1xYVthXSxjPXBhLmluZGV4T2YoYSk7aWYoISgtMTxjKSl0aHJvdyBFcnJvcih1KDk2LGEpKTtpZighc2FbY10pe2lmKCFiLmV4dHJhY3RFdmVudHMpdGhyb3cgRXJyb3IodSg5NyxhKSk7c2FbY109YjtjPWIuZXZlbnRUeXBlcztmb3IodmFyIGQgaW4gYyl7dmFyIGU9dm9pZCAwO3ZhciBmPWNbZF0sZz1iLGg9ZDtpZih0YS5oYXNPd25Qcm9wZXJ0eShoKSl0aHJvdyBFcnJvcih1KDk5LGgpKTt0YVtoXT1mO3ZhciBrPWYucGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM7aWYoayl7Zm9yKGUgaW4gaylrLmhhc093blByb3BlcnR5KGUpJiZ1YShrW2VdLGcsaCk7ZT0hMH1lbHNlIGYucmVnaXN0cmF0aW9uTmFtZT8odWEoZi5yZWdpc3RyYXRpb25OYW1lLGcsaCksZT0hMCk6ZT0hMTtpZighZSl0aHJvdyBFcnJvcih1KDk4LGQsYSkpO319fX1cbmZ1bmN0aW9uIHVhKGEsYixjKXtpZih2YVthXSl0aHJvdyBFcnJvcih1KDEwMCxhKSk7dmFbYV09Yjt3YVthXT1iLmV2ZW50VHlwZXNbY10uZGVwZW5kZW5jaWVzfXZhciBzYT1bXSx0YT17fSx2YT17fSx3YT17fTtmdW5jdGlvbiB4YShhKXt2YXIgYj0hMSxjO2ZvcihjIGluIGEpaWYoYS5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9YVtjXTtpZighcWEuaGFzT3duUHJvcGVydHkoYyl8fHFhW2NdIT09ZCl7aWYocWFbY10pdGhyb3cgRXJyb3IodSgxMDIsYykpO3FhW2NdPWQ7Yj0hMH19YiYmcmEoKX12YXIgeWE9IShcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiB3aW5kb3cuZG9jdW1lbnR8fFwidW5kZWZpbmVkXCI9PT10eXBlb2Ygd2luZG93LmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQpLHphPW51bGwsQWE9bnVsbCxCYT1udWxsO1xuZnVuY3Rpb24gQ2EoYSl7aWYoYT1tYShhKSl7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIHphKXRocm93IEVycm9yKHUoMjgwKSk7dmFyIGI9YS5zdGF0ZU5vZGU7YiYmKGI9bGEoYiksemEoYS5zdGF0ZU5vZGUsYS50eXBlLGIpKX19ZnVuY3Rpb24gRGEoYSl7QWE/QmE/QmEucHVzaChhKTpCYT1bYV06QWE9YX1mdW5jdGlvbiBFYSgpe2lmKEFhKXt2YXIgYT1BYSxiPUJhO0JhPUFhPW51bGw7Q2EoYSk7aWYoYilmb3IoYT0wO2E8Yi5sZW5ndGg7YSsrKUNhKGJbYV0pfX1mdW5jdGlvbiBGYShhLGIpe3JldHVybiBhKGIpfWZ1bmN0aW9uIEdhKGEsYixjLGQsZSl7cmV0dXJuIGEoYixjLGQsZSl9ZnVuY3Rpb24gSGEoKXt9dmFyIElhPUZhLEphPSExLEthPSExO2Z1bmN0aW9uIExhKCl7aWYobnVsbCE9PUFhfHxudWxsIT09QmEpSGEoKSxFYSgpfVxuZnVuY3Rpb24gTWEoYSxiLGMpe2lmKEthKXJldHVybiBhKGIsYyk7S2E9ITA7dHJ5e3JldHVybiBJYShhLGIsYyl9ZmluYWxseXtLYT0hMSxMYSgpfX12YXIgTmE9L15bOkEtWl9hLXpcXHUwMEMwLVxcdTAwRDZcXHUwMEQ4LVxcdTAwRjZcXHUwMEY4LVxcdTAyRkZcXHUwMzcwLVxcdTAzN0RcXHUwMzdGLVxcdTFGRkZcXHUyMDBDLVxcdTIwMERcXHUyMDcwLVxcdTIxOEZcXHUyQzAwLVxcdTJGRUZcXHUzMDAxLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRkRdWzpBLVpfYS16XFx1MDBDMC1cXHUwMEQ2XFx1MDBEOC1cXHUwMEY2XFx1MDBGOC1cXHUwMkZGXFx1MDM3MC1cXHUwMzdEXFx1MDM3Ri1cXHUxRkZGXFx1MjAwQy1cXHUyMDBEXFx1MjA3MC1cXHUyMThGXFx1MkMwMC1cXHUyRkVGXFx1MzAwMS1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkZEXFwtLjAtOVxcdTAwQjdcXHUwMzAwLVxcdTAzNkZcXHUyMDNGLVxcdTIwNDBdKiQvLE9hPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHksUGE9e30sUWE9e307XG5mdW5jdGlvbiBSYShhKXtpZihPYS5jYWxsKFFhLGEpKXJldHVybiEwO2lmKE9hLmNhbGwoUGEsYSkpcmV0dXJuITE7aWYoTmEudGVzdChhKSlyZXR1cm4gUWFbYV09ITA7UGFbYV09ITA7cmV0dXJuITF9ZnVuY3Rpb24gU2EoYSxiLGMsZCl7aWYobnVsbCE9PWMmJjA9PT1jLnR5cGUpcmV0dXJuITE7c3dpdGNoKHR5cGVvZiBiKXtjYXNlIFwiZnVuY3Rpb25cIjpjYXNlIFwic3ltYm9sXCI6cmV0dXJuITA7Y2FzZSBcImJvb2xlYW5cIjppZihkKXJldHVybiExO2lmKG51bGwhPT1jKXJldHVybiFjLmFjY2VwdHNCb29sZWFuczthPWEudG9Mb3dlckNhc2UoKS5zbGljZSgwLDUpO3JldHVyblwiZGF0YS1cIiE9PWEmJlwiYXJpYS1cIiE9PWE7ZGVmYXVsdDpyZXR1cm4hMX19XG5mdW5jdGlvbiBUYShhLGIsYyxkKXtpZihudWxsPT09Ynx8XCJ1bmRlZmluZWRcIj09PXR5cGVvZiBifHxTYShhLGIsYyxkKSlyZXR1cm4hMDtpZihkKXJldHVybiExO2lmKG51bGwhPT1jKXN3aXRjaChjLnR5cGUpe2Nhc2UgMzpyZXR1cm4hYjtjYXNlIDQ6cmV0dXJuITE9PT1iO2Nhc2UgNTpyZXR1cm4gaXNOYU4oYik7Y2FzZSA2OnJldHVybiBpc05hTihiKXx8MT5ifXJldHVybiExfWZ1bmN0aW9uIHYoYSxiLGMsZCxlLGYpe3RoaXMuYWNjZXB0c0Jvb2xlYW5zPTI9PT1ifHwzPT09Ynx8ND09PWI7dGhpcy5hdHRyaWJ1dGVOYW1lPWQ7dGhpcy5hdHRyaWJ1dGVOYW1lc3BhY2U9ZTt0aGlzLm11c3RVc2VQcm9wZXJ0eT1jO3RoaXMucHJvcGVydHlOYW1lPWE7dGhpcy50eXBlPWI7dGhpcy5zYW5pdGl6ZVVSTD1mfXZhciBDPXt9O1xuXCJjaGlsZHJlbiBkYW5nZXJvdXNseVNldElubmVySFRNTCBkZWZhdWx0VmFsdWUgZGVmYXVsdENoZWNrZWQgaW5uZXJIVE1MIHN1cHByZXNzQ29udGVudEVkaXRhYmxlV2FybmluZyBzdXBwcmVzc0h5ZHJhdGlvbldhcm5pbmcgc3R5bGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMCwhMSxhLG51bGwsITEpfSk7W1tcImFjY2VwdENoYXJzZXRcIixcImFjY2VwdC1jaGFyc2V0XCJdLFtcImNsYXNzTmFtZVwiLFwiY2xhc3NcIl0sW1wiaHRtbEZvclwiLFwiZm9yXCJdLFtcImh0dHBFcXVpdlwiLFwiaHR0cC1lcXVpdlwiXV0uZm9yRWFjaChmdW5jdGlvbihhKXt2YXIgYj1hWzBdO0NbYl09bmV3IHYoYiwxLCExLGFbMV0sbnVsbCwhMSl9KTtbXCJjb250ZW50RWRpdGFibGVcIixcImRyYWdnYWJsZVwiLFwic3BlbGxDaGVja1wiLFwidmFsdWVcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImF1dG9SZXZlcnNlXCIsXCJleHRlcm5hbFJlc291cmNlc1JlcXVpcmVkXCIsXCJmb2N1c2FibGVcIixcInByZXNlcnZlQWxwaGFcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMiwhMSxhLG51bGwsITEpfSk7XCJhbGxvd0Z1bGxTY3JlZW4gYXN5bmMgYXV0b0ZvY3VzIGF1dG9QbGF5IGNvbnRyb2xzIGRlZmF1bHQgZGVmZXIgZGlzYWJsZWQgZGlzYWJsZVBpY3R1cmVJblBpY3R1cmUgZm9ybU5vVmFsaWRhdGUgaGlkZGVuIGxvb3Agbm9Nb2R1bGUgbm9WYWxpZGF0ZSBvcGVuIHBsYXlzSW5saW5lIHJlYWRPbmx5IHJlcXVpcmVkIHJldmVyc2VkIHNjb3BlZCBzZWFtbGVzcyBpdGVtU2NvcGVcIi5zcGxpdChcIiBcIikuZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMSxhLnRvTG93ZXJDYXNlKCksbnVsbCwhMSl9KTtcbltcImNoZWNrZWRcIixcIm11bHRpcGxlXCIsXCJtdXRlZFwiLFwic2VsZWN0ZWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsMywhMCxhLG51bGwsITEpfSk7W1wiY2FwdHVyZVwiLFwiZG93bmxvYWRcIl0uZm9yRWFjaChmdW5jdGlvbihhKXtDW2FdPW5ldyB2KGEsNCwhMSxhLG51bGwsITEpfSk7W1wiY29sc1wiLFwicm93c1wiLFwic2l6ZVwiLFwic3BhblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw2LCExLGEsbnVsbCwhMSl9KTtbXCJyb3dTcGFuXCIsXCJzdGFydFwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSw1LCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO3ZhciBVYT0vW1xcLTpdKFthLXpdKS9nO2Z1bmN0aW9uIFZhKGEpe3JldHVybiBhWzFdLnRvVXBwZXJDYXNlKCl9XG5cImFjY2VudC1oZWlnaHQgYWxpZ25tZW50LWJhc2VsaW5lIGFyYWJpYy1mb3JtIGJhc2VsaW5lLXNoaWZ0IGNhcC1oZWlnaHQgY2xpcC1wYXRoIGNsaXAtcnVsZSBjb2xvci1pbnRlcnBvbGF0aW9uIGNvbG9yLWludGVycG9sYXRpb24tZmlsdGVycyBjb2xvci1wcm9maWxlIGNvbG9yLXJlbmRlcmluZyBkb21pbmFudC1iYXNlbGluZSBlbmFibGUtYmFja2dyb3VuZCBmaWxsLW9wYWNpdHkgZmlsbC1ydWxlIGZsb29kLWNvbG9yIGZsb29kLW9wYWNpdHkgZm9udC1mYW1pbHkgZm9udC1zaXplIGZvbnQtc2l6ZS1hZGp1c3QgZm9udC1zdHJldGNoIGZvbnQtc3R5bGUgZm9udC12YXJpYW50IGZvbnQtd2VpZ2h0IGdseXBoLW5hbWUgZ2x5cGgtb3JpZW50YXRpb24taG9yaXpvbnRhbCBnbHlwaC1vcmllbnRhdGlvbi12ZXJ0aWNhbCBob3Jpei1hZHYteCBob3Jpei1vcmlnaW4teCBpbWFnZS1yZW5kZXJpbmcgbGV0dGVyLXNwYWNpbmcgbGlnaHRpbmctY29sb3IgbWFya2VyLWVuZCBtYXJrZXItbWlkIG1hcmtlci1zdGFydCBvdmVybGluZS1wb3NpdGlvbiBvdmVybGluZS10aGlja25lc3MgcGFpbnQtb3JkZXIgcGFub3NlLTEgcG9pbnRlci1ldmVudHMgcmVuZGVyaW5nLWludGVudCBzaGFwZS1yZW5kZXJpbmcgc3RvcC1jb2xvciBzdG9wLW9wYWNpdHkgc3RyaWtldGhyb3VnaC1wb3NpdGlvbiBzdHJpa2V0aHJvdWdoLXRoaWNrbmVzcyBzdHJva2UtZGFzaGFycmF5IHN0cm9rZS1kYXNob2Zmc2V0IHN0cm9rZS1saW5lY2FwIHN0cm9rZS1saW5lam9pbiBzdHJva2UtbWl0ZXJsaW1pdCBzdHJva2Utb3BhY2l0eSBzdHJva2Utd2lkdGggdGV4dC1hbmNob3IgdGV4dC1kZWNvcmF0aW9uIHRleHQtcmVuZGVyaW5nIHVuZGVybGluZS1wb3NpdGlvbiB1bmRlcmxpbmUtdGhpY2tuZXNzIHVuaWNvZGUtYmlkaSB1bmljb2RlLXJhbmdlIHVuaXRzLXBlci1lbSB2LWFscGhhYmV0aWMgdi1oYW5naW5nIHYtaWRlb2dyYXBoaWMgdi1tYXRoZW1hdGljYWwgdmVjdG9yLWVmZmVjdCB2ZXJ0LWFkdi15IHZlcnQtb3JpZ2luLXggdmVydC1vcmlnaW4teSB3b3JkLXNwYWNpbmcgd3JpdGluZy1tb2RlIHhtbG5zOnhsaW5rIHgtaGVpZ2h0XCIuc3BsaXQoXCIgXCIpLmZvckVhY2goZnVuY3Rpb24oYSl7dmFyIGI9YS5yZXBsYWNlKFVhLFxuVmEpO0NbYl09bmV3IHYoYiwxLCExLGEsbnVsbCwhMSl9KTtcInhsaW5rOmFjdHVhdGUgeGxpbms6YXJjcm9sZSB4bGluazpyb2xlIHhsaW5rOnNob3cgeGxpbms6dGl0bGUgeGxpbms6dHlwZVwiLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGxpbmtcIiwhMSl9KTtbXCJ4bWw6YmFzZVwiLFwieG1sOmxhbmdcIixcInhtbDpzcGFjZVwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe3ZhciBiPWEucmVwbGFjZShVYSxWYSk7Q1tiXT1uZXcgdihiLDEsITEsYSxcImh0dHA6Ly93d3cudzMub3JnL1hNTC8xOTk4L25hbWVzcGFjZVwiLCExKX0pO1tcInRhYkluZGV4XCIsXCJjcm9zc09yaWdpblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCExKX0pO1xuQy54bGlua0hyZWY9bmV3IHYoXCJ4bGlua0hyZWZcIiwxLCExLFwieGxpbms6aHJlZlwiLFwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94bGlua1wiLCEwKTtbXCJzcmNcIixcImhyZWZcIixcImFjdGlvblwiLFwiZm9ybUFjdGlvblwiXS5mb3JFYWNoKGZ1bmN0aW9uKGEpe0NbYV09bmV3IHYoYSwxLCExLGEudG9Mb3dlckNhc2UoKSxudWxsLCEwKX0pO3ZhciBXYT1hYS5fX1NFQ1JFVF9JTlRFUk5BTFNfRE9fTk9UX1VTRV9PUl9ZT1VfV0lMTF9CRV9GSVJFRDtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudERpc3BhdGNoZXJcIil8fChXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyPXtjdXJyZW50Om51bGx9KTtXYS5oYXNPd25Qcm9wZXJ0eShcIlJlYWN0Q3VycmVudEJhdGNoQ29uZmlnXCIpfHwoV2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWc9e3N1c3BlbnNlOm51bGx9KTtcbmZ1bmN0aW9uIFhhKGEsYixjLGQpe3ZhciBlPUMuaGFzT3duUHJvcGVydHkoYik/Q1tiXTpudWxsO3ZhciBmPW51bGwhPT1lPzA9PT1lLnR5cGU6ZD8hMTohKDI8Yi5sZW5ndGgpfHxcIm9cIiE9PWJbMF0mJlwiT1wiIT09YlswXXx8XCJuXCIhPT1iWzFdJiZcIk5cIiE9PWJbMV0/ITE6ITA7Znx8KFRhKGIsYyxlLGQpJiYoYz1udWxsKSxkfHxudWxsPT09ZT9SYShiKSYmKG51bGw9PT1jP2EucmVtb3ZlQXR0cmlidXRlKGIpOmEuc2V0QXR0cmlidXRlKGIsXCJcIitjKSk6ZS5tdXN0VXNlUHJvcGVydHk/YVtlLnByb3BlcnR5TmFtZV09bnVsbD09PWM/Mz09PWUudHlwZT8hMTpcIlwiOmM6KGI9ZS5hdHRyaWJ1dGVOYW1lLGQ9ZS5hdHRyaWJ1dGVOYW1lc3BhY2UsbnVsbD09PWM/YS5yZW1vdmVBdHRyaWJ1dGUoYik6KGU9ZS50eXBlLGM9Mz09PWV8fDQ9PT1lJiYhMD09PWM/XCJcIjpcIlwiK2MsZD9hLnNldEF0dHJpYnV0ZU5TKGQsYixjKTphLnNldEF0dHJpYnV0ZShiLGMpKSkpfVxudmFyIFlhPS9eKC4qKVtcXFxcXFwvXS8sRT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgU3ltYm9sJiZTeW1ib2wuZm9yLFphPUU/U3ltYm9sLmZvcihcInJlYWN0LmVsZW1lbnRcIik6NjAxMDMsJGE9RT9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGFiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZyYWdtZW50XCIpOjYwMTA3LGJiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN0cmljdF9tb2RlXCIpOjYwMTA4LGNiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGRiPUU/U3ltYm9sLmZvcihcInJlYWN0LnByb3ZpZGVyXCIpOjYwMTA5LGViPUU/U3ltYm9sLmZvcihcInJlYWN0LmNvbnRleHRcIik6NjAxMTAsZmI9RT9TeW1ib2wuZm9yKFwicmVhY3QuY29uY3VycmVudF9tb2RlXCIpOjYwMTExLGdiPUU/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLGhiPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlXCIpOjYwMTEzLGliPUU/U3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6XG42MDEyMCxqYj1FP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LGtiPUU/U3ltYm9sLmZvcihcInJlYWN0LmxhenlcIik6NjAxMTYsbGI9RT9TeW1ib2wuZm9yKFwicmVhY3QuYmxvY2tcIik6NjAxMjEsbWI9XCJmdW5jdGlvblwiPT09dHlwZW9mIFN5bWJvbCYmU3ltYm9sLml0ZXJhdG9yO2Z1bmN0aW9uIG5iKGEpe2lmKG51bGw9PT1hfHxcIm9iamVjdFwiIT09dHlwZW9mIGEpcmV0dXJuIG51bGw7YT1tYiYmYVttYl18fGFbXCJAQGl0ZXJhdG9yXCJdO3JldHVyblwiZnVuY3Rpb25cIj09PXR5cGVvZiBhP2E6bnVsbH1mdW5jdGlvbiBvYihhKXtpZigtMT09PWEuX3N0YXR1cyl7YS5fc3RhdHVzPTA7dmFyIGI9YS5fY3RvcjtiPWIoKTthLl9yZXN1bHQ9YjtiLnRoZW4oZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGI9Yi5kZWZhdWx0LGEuX3N0YXR1cz0xLGEuX3Jlc3VsdD1iKX0sZnVuY3Rpb24oYil7MD09PWEuX3N0YXR1cyYmKGEuX3N0YXR1cz0yLGEuX3Jlc3VsdD1iKX0pfX1cbmZ1bmN0aW9uIHBiKGEpe2lmKG51bGw9PWEpcmV0dXJuIG51bGw7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGEpcmV0dXJuIGEuZGlzcGxheU5hbWV8fGEubmFtZXx8bnVsbDtpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpcmV0dXJuIGE7c3dpdGNoKGEpe2Nhc2UgYWI6cmV0dXJuXCJGcmFnbWVudFwiO2Nhc2UgJGE6cmV0dXJuXCJQb3J0YWxcIjtjYXNlIGNiOnJldHVyblwiUHJvZmlsZXJcIjtjYXNlIGJiOnJldHVyblwiU3RyaWN0TW9kZVwiO2Nhc2UgaGI6cmV0dXJuXCJTdXNwZW5zZVwiO2Nhc2UgaWI6cmV0dXJuXCJTdXNwZW5zZUxpc3RcIn1pZihcIm9iamVjdFwiPT09dHlwZW9mIGEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZWI6cmV0dXJuXCJDb250ZXh0LkNvbnN1bWVyXCI7Y2FzZSBkYjpyZXR1cm5cIkNvbnRleHQuUHJvdmlkZXJcIjtjYXNlIGdiOnZhciBiPWEucmVuZGVyO2I9Yi5kaXNwbGF5TmFtZXx8Yi5uYW1lfHxcIlwiO3JldHVybiBhLmRpc3BsYXlOYW1lfHwoXCJcIiE9PWI/XCJGb3J3YXJkUmVmKFwiK2IrXCIpXCI6XG5cIkZvcndhcmRSZWZcIik7Y2FzZSBqYjpyZXR1cm4gcGIoYS50eXBlKTtjYXNlIGxiOnJldHVybiBwYihhLnJlbmRlcik7Y2FzZSBrYjppZihhPTE9PT1hLl9zdGF0dXM/YS5fcmVzdWx0Om51bGwpcmV0dXJuIHBiKGEpfXJldHVybiBudWxsfWZ1bmN0aW9uIHFiKGEpe3ZhciBiPVwiXCI7ZG97YTpzd2l0Y2goYS50YWcpe2Nhc2UgMzpjYXNlIDQ6Y2FzZSA2OmNhc2UgNzpjYXNlIDEwOmNhc2UgOTp2YXIgYz1cIlwiO2JyZWFrIGE7ZGVmYXVsdDp2YXIgZD1hLl9kZWJ1Z093bmVyLGU9YS5fZGVidWdTb3VyY2UsZj1wYihhLnR5cGUpO2M9bnVsbDtkJiYoYz1wYihkLnR5cGUpKTtkPWY7Zj1cIlwiO2U/Zj1cIiAoYXQgXCIrZS5maWxlTmFtZS5yZXBsYWNlKFlhLFwiXCIpK1wiOlwiK2UubGluZU51bWJlcitcIilcIjpjJiYoZj1cIiAoY3JlYXRlZCBieSBcIitjK1wiKVwiKTtjPVwiXFxuICAgIGluIFwiKyhkfHxcIlVua25vd25cIikrZn1iKz1jO2E9YS5yZXR1cm59d2hpbGUoYSk7cmV0dXJuIGJ9XG5mdW5jdGlvbiByYihhKXtzd2l0Y2godHlwZW9mIGEpe2Nhc2UgXCJib29sZWFuXCI6Y2FzZSBcIm51bWJlclwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwic3RyaW5nXCI6Y2FzZSBcInVuZGVmaW5lZFwiOnJldHVybiBhO2RlZmF1bHQ6cmV0dXJuXCJcIn19ZnVuY3Rpb24gc2IoYSl7dmFyIGI9YS50eXBlO3JldHVybihhPWEubm9kZU5hbWUpJiZcImlucHV0XCI9PT1hLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1ifHxcInJhZGlvXCI9PT1iKX1cbmZ1bmN0aW9uIHRiKGEpe3ZhciBiPXNiKGEpP1wiY2hlY2tlZFwiOlwidmFsdWVcIixjPU9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoYS5jb25zdHJ1Y3Rvci5wcm90b3R5cGUsYiksZD1cIlwiK2FbYl07aWYoIWEuaGFzT3duUHJvcGVydHkoYikmJlwidW5kZWZpbmVkXCIhPT10eXBlb2YgYyYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGMuZ2V0JiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYy5zZXQpe3ZhciBlPWMuZ2V0LGY9Yy5zZXQ7T2JqZWN0LmRlZmluZVByb3BlcnR5KGEsYix7Y29uZmlndXJhYmxlOiEwLGdldDpmdW5jdGlvbigpe3JldHVybiBlLmNhbGwodGhpcyl9LHNldDpmdW5jdGlvbihhKXtkPVwiXCIrYTtmLmNhbGwodGhpcyxhKX19KTtPYmplY3QuZGVmaW5lUHJvcGVydHkoYSxiLHtlbnVtZXJhYmxlOmMuZW51bWVyYWJsZX0pO3JldHVybntnZXRWYWx1ZTpmdW5jdGlvbigpe3JldHVybiBkfSxzZXRWYWx1ZTpmdW5jdGlvbihhKXtkPVwiXCIrYX0sc3RvcFRyYWNraW5nOmZ1bmN0aW9uKCl7YS5fdmFsdWVUcmFja2VyPVxubnVsbDtkZWxldGUgYVtiXX19fX1mdW5jdGlvbiB4YihhKXthLl92YWx1ZVRyYWNrZXJ8fChhLl92YWx1ZVRyYWNrZXI9dGIoYSkpfWZ1bmN0aW9uIHliKGEpe2lmKCFhKXJldHVybiExO3ZhciBiPWEuX3ZhbHVlVHJhY2tlcjtpZighYilyZXR1cm4hMDt2YXIgYz1iLmdldFZhbHVlKCk7dmFyIGQ9XCJcIjthJiYoZD1zYihhKT9hLmNoZWNrZWQ/XCJ0cnVlXCI6XCJmYWxzZVwiOmEudmFsdWUpO2E9ZDtyZXR1cm4gYSE9PWM/KGIuc2V0VmFsdWUoYSksITApOiExfWZ1bmN0aW9uIHpiKGEsYil7dmFyIGM9Yi5jaGVja2VkO3JldHVybiBuKHt9LGIse2RlZmF1bHRDaGVja2VkOnZvaWQgMCxkZWZhdWx0VmFsdWU6dm9pZCAwLHZhbHVlOnZvaWQgMCxjaGVja2VkOm51bGwhPWM/YzphLl93cmFwcGVyU3RhdGUuaW5pdGlhbENoZWNrZWR9KX1cbmZ1bmN0aW9uIEFiKGEsYil7dmFyIGM9bnVsbD09Yi5kZWZhdWx0VmFsdWU/XCJcIjpiLmRlZmF1bHRWYWx1ZSxkPW51bGwhPWIuY2hlY2tlZD9iLmNoZWNrZWQ6Yi5kZWZhdWx0Q2hlY2tlZDtjPXJiKG51bGwhPWIudmFsdWU/Yi52YWx1ZTpjKTthLl93cmFwcGVyU3RhdGU9e2luaXRpYWxDaGVja2VkOmQsaW5pdGlhbFZhbHVlOmMsY29udHJvbGxlZDpcImNoZWNrYm94XCI9PT1iLnR5cGV8fFwicmFkaW9cIj09PWIudHlwZT9udWxsIT1iLmNoZWNrZWQ6bnVsbCE9Yi52YWx1ZX19ZnVuY3Rpb24gQmIoYSxiKXtiPWIuY2hlY2tlZDtudWxsIT1iJiZYYShhLFwiY2hlY2tlZFwiLGIsITEpfVxuZnVuY3Rpb24gQ2IoYSxiKXtCYihhLGIpO3ZhciBjPXJiKGIudmFsdWUpLGQ9Yi50eXBlO2lmKG51bGwhPWMpaWYoXCJudW1iZXJcIj09PWQpe2lmKDA9PT1jJiZcIlwiPT09YS52YWx1ZXx8YS52YWx1ZSE9YylhLnZhbHVlPVwiXCIrY31lbHNlIGEudmFsdWUhPT1cIlwiK2MmJihhLnZhbHVlPVwiXCIrYyk7ZWxzZSBpZihcInN1Ym1pdFwiPT09ZHx8XCJyZXNldFwiPT09ZCl7YS5yZW1vdmVBdHRyaWJ1dGUoXCJ2YWx1ZVwiKTtyZXR1cm59Yi5oYXNPd25Qcm9wZXJ0eShcInZhbHVlXCIpP0RiKGEsYi50eXBlLGMpOmIuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0VmFsdWVcIikmJkRiKGEsYi50eXBlLHJiKGIuZGVmYXVsdFZhbHVlKSk7bnVsbD09Yi5jaGVja2VkJiZudWxsIT1iLmRlZmF1bHRDaGVja2VkJiYoYS5kZWZhdWx0Q2hlY2tlZD0hIWIuZGVmYXVsdENoZWNrZWQpfVxuZnVuY3Rpb24gRWIoYSxiLGMpe2lmKGIuaGFzT3duUHJvcGVydHkoXCJ2YWx1ZVwiKXx8Yi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRWYWx1ZVwiKSl7dmFyIGQ9Yi50eXBlO2lmKCEoXCJzdWJtaXRcIiE9PWQmJlwicmVzZXRcIiE9PWR8fHZvaWQgMCE9PWIudmFsdWUmJm51bGwhPT1iLnZhbHVlKSlyZXR1cm47Yj1cIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWU7Y3x8Yj09PWEudmFsdWV8fChhLnZhbHVlPWIpO2EuZGVmYXVsdFZhbHVlPWJ9Yz1hLm5hbWU7XCJcIiE9PWMmJihhLm5hbWU9XCJcIik7YS5kZWZhdWx0Q2hlY2tlZD0hIWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsQ2hlY2tlZDtcIlwiIT09YyYmKGEubmFtZT1jKX1cbmZ1bmN0aW9uIERiKGEsYixjKXtpZihcIm51bWJlclwiIT09Ynx8YS5vd25lckRvY3VtZW50LmFjdGl2ZUVsZW1lbnQhPT1hKW51bGw9PWM/YS5kZWZhdWx0VmFsdWU9XCJcIithLl93cmFwcGVyU3RhdGUuaW5pdGlhbFZhbHVlOmEuZGVmYXVsdFZhbHVlIT09XCJcIitjJiYoYS5kZWZhdWx0VmFsdWU9XCJcIitjKX1mdW5jdGlvbiBGYihhKXt2YXIgYj1cIlwiO2FhLkNoaWxkcmVuLmZvckVhY2goYSxmdW5jdGlvbihhKXtudWxsIT1hJiYoYis9YSl9KTtyZXR1cm4gYn1mdW5jdGlvbiBHYihhLGIpe2E9bih7Y2hpbGRyZW46dm9pZCAwfSxiKTtpZihiPUZiKGIuY2hpbGRyZW4pKWEuY2hpbGRyZW49YjtyZXR1cm4gYX1cbmZ1bmN0aW9uIEhiKGEsYixjLGQpe2E9YS5vcHRpb25zO2lmKGIpe2I9e307Zm9yKHZhciBlPTA7ZTxjLmxlbmd0aDtlKyspYltcIiRcIitjW2VdXT0hMDtmb3IoYz0wO2M8YS5sZW5ndGg7YysrKWU9Yi5oYXNPd25Qcm9wZXJ0eShcIiRcIithW2NdLnZhbHVlKSxhW2NdLnNlbGVjdGVkIT09ZSYmKGFbY10uc2VsZWN0ZWQ9ZSksZSYmZCYmKGFbY10uZGVmYXVsdFNlbGVjdGVkPSEwKX1lbHNle2M9XCJcIityYihjKTtiPW51bGw7Zm9yKGU9MDtlPGEubGVuZ3RoO2UrKyl7aWYoYVtlXS52YWx1ZT09PWMpe2FbZV0uc2VsZWN0ZWQ9ITA7ZCYmKGFbZV0uZGVmYXVsdFNlbGVjdGVkPSEwKTtyZXR1cm59bnVsbCE9PWJ8fGFbZV0uZGlzYWJsZWR8fChiPWFbZV0pfW51bGwhPT1iJiYoYi5zZWxlY3RlZD0hMCl9fVxuZnVuY3Rpb24gSWIoYSxiKXtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXRocm93IEVycm9yKHUoOTEpKTtyZXR1cm4gbih7fSxiLHt2YWx1ZTp2b2lkIDAsZGVmYXVsdFZhbHVlOnZvaWQgMCxjaGlsZHJlbjpcIlwiK2EuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWV9KX1mdW5jdGlvbiBKYihhLGIpe3ZhciBjPWIudmFsdWU7aWYobnVsbD09Yyl7Yz1iLmNoaWxkcmVuO2I9Yi5kZWZhdWx0VmFsdWU7aWYobnVsbCE9Yyl7aWYobnVsbCE9Yil0aHJvdyBFcnJvcih1KDkyKSk7aWYoQXJyYXkuaXNBcnJheShjKSl7aWYoISgxPj1jLmxlbmd0aCkpdGhyb3cgRXJyb3IodSg5MykpO2M9Y1swXX1iPWN9bnVsbD09YiYmKGI9XCJcIik7Yz1ifWEuX3dyYXBwZXJTdGF0ZT17aW5pdGlhbFZhbHVlOnJiKGMpfX1cbmZ1bmN0aW9uIEtiKGEsYil7dmFyIGM9cmIoYi52YWx1ZSksZD1yYihiLmRlZmF1bHRWYWx1ZSk7bnVsbCE9YyYmKGM9XCJcIitjLGMhPT1hLnZhbHVlJiYoYS52YWx1ZT1jKSxudWxsPT1iLmRlZmF1bHRWYWx1ZSYmYS5kZWZhdWx0VmFsdWUhPT1jJiYoYS5kZWZhdWx0VmFsdWU9YykpO251bGwhPWQmJihhLmRlZmF1bHRWYWx1ZT1cIlwiK2QpfWZ1bmN0aW9uIExiKGEpe3ZhciBiPWEudGV4dENvbnRlbnQ7Yj09PWEuX3dyYXBwZXJTdGF0ZS5pbml0aWFsVmFsdWUmJlwiXCIhPT1iJiZudWxsIT09YiYmKGEudmFsdWU9Yil9dmFyIE1iPXtodG1sOlwiaHR0cDovL3d3dy53My5vcmcvMTk5OS94aHRtbFwiLG1hdGhtbDpcImh0dHA6Ly93d3cudzMub3JnLzE5OTgvTWF0aC9NYXRoTUxcIixzdmc6XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wifTtcbmZ1bmN0aW9uIE5iKGEpe3N3aXRjaChhKXtjYXNlIFwic3ZnXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiO2Nhc2UgXCJtYXRoXCI6cmV0dXJuXCJodHRwOi8vd3d3LnczLm9yZy8xOTk4L01hdGgvTWF0aE1MXCI7ZGVmYXVsdDpyZXR1cm5cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIn19ZnVuY3Rpb24gT2IoYSxiKXtyZXR1cm4gbnVsbD09YXx8XCJodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hodG1sXCI9PT1hP05iKGIpOlwiaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmdcIj09PWEmJlwiZm9yZWlnbk9iamVjdFwiPT09Yj9cImh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWxcIjphfVxudmFyIFBiLFFiPWZ1bmN0aW9uKGEpe3JldHVyblwidW5kZWZpbmVkXCIhPT10eXBlb2YgTVNBcHAmJk1TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uP2Z1bmN0aW9uKGIsYyxkLGUpe01TQXBwLmV4ZWNVbnNhZmVMb2NhbEZ1bmN0aW9uKGZ1bmN0aW9uKCl7cmV0dXJuIGEoYixjLGQsZSl9KX06YX0oZnVuY3Rpb24oYSxiKXtpZihhLm5hbWVzcGFjZVVSSSE9PU1iLnN2Z3x8XCJpbm5lckhUTUxcImluIGEpYS5pbm5lckhUTUw9YjtlbHNle1BiPVBifHxkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO1BiLmlubmVySFRNTD1cIjxzdmc+XCIrYi52YWx1ZU9mKCkudG9TdHJpbmcoKStcIjwvc3ZnPlwiO2ZvcihiPVBiLmZpcnN0Q2hpbGQ7YS5maXJzdENoaWxkOylhLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCk7Zm9yKDtiLmZpcnN0Q2hpbGQ7KWEuYXBwZW5kQ2hpbGQoYi5maXJzdENoaWxkKX19KTtcbmZ1bmN0aW9uIFJiKGEsYil7aWYoYil7dmFyIGM9YS5maXJzdENoaWxkO2lmKGMmJmM9PT1hLmxhc3RDaGlsZCYmMz09PWMubm9kZVR5cGUpe2Mubm9kZVZhbHVlPWI7cmV0dXJufX1hLnRleHRDb250ZW50PWJ9ZnVuY3Rpb24gU2IoYSxiKXt2YXIgYz17fTtjW2EudG9Mb3dlckNhc2UoKV09Yi50b0xvd2VyQ2FzZSgpO2NbXCJXZWJraXRcIithXT1cIndlYmtpdFwiK2I7Y1tcIk1velwiK2FdPVwibW96XCIrYjtyZXR1cm4gY312YXIgVGI9e2FuaW1hdGlvbmVuZDpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uRW5kXCIpLGFuaW1hdGlvbml0ZXJhdGlvbjpTYihcIkFuaW1hdGlvblwiLFwiQW5pbWF0aW9uSXRlcmF0aW9uXCIpLGFuaW1hdGlvbnN0YXJ0OlNiKFwiQW5pbWF0aW9uXCIsXCJBbmltYXRpb25TdGFydFwiKSx0cmFuc2l0aW9uZW5kOlNiKFwiVHJhbnNpdGlvblwiLFwiVHJhbnNpdGlvbkVuZFwiKX0sVWI9e30sVmI9e307XG55YSYmKFZiPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIikuc3R5bGUsXCJBbmltYXRpb25FdmVudFwiaW4gd2luZG93fHwoZGVsZXRlIFRiLmFuaW1hdGlvbmVuZC5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbml0ZXJhdGlvbi5hbmltYXRpb24sZGVsZXRlIFRiLmFuaW1hdGlvbnN0YXJ0LmFuaW1hdGlvbiksXCJUcmFuc2l0aW9uRXZlbnRcImluIHdpbmRvd3x8ZGVsZXRlIFRiLnRyYW5zaXRpb25lbmQudHJhbnNpdGlvbik7ZnVuY3Rpb24gV2IoYSl7aWYoVWJbYV0pcmV0dXJuIFViW2FdO2lmKCFUYlthXSlyZXR1cm4gYTt2YXIgYj1UYlthXSxjO2ZvcihjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSYmYyBpbiBWYilyZXR1cm4gVWJbYV09YltjXTtyZXR1cm4gYX1cbnZhciBYYj1XYihcImFuaW1hdGlvbmVuZFwiKSxZYj1XYihcImFuaW1hdGlvbml0ZXJhdGlvblwiKSxaYj1XYihcImFuaW1hdGlvbnN0YXJ0XCIpLCRiPVdiKFwidHJhbnNpdGlvbmVuZFwiKSxhYz1cImFib3J0IGNhbnBsYXkgY2FucGxheXRocm91Z2ggZHVyYXRpb25jaGFuZ2UgZW1wdGllZCBlbmNyeXB0ZWQgZW5kZWQgZXJyb3IgbG9hZGVkZGF0YSBsb2FkZWRtZXRhZGF0YSBsb2Fkc3RhcnQgcGF1c2UgcGxheSBwbGF5aW5nIHByb2dyZXNzIHJhdGVjaGFuZ2Ugc2Vla2VkIHNlZWtpbmcgc3RhbGxlZCBzdXNwZW5kIHRpbWV1cGRhdGUgdm9sdW1lY2hhbmdlIHdhaXRpbmdcIi5zcGxpdChcIiBcIiksYmM9bmV3IChcImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha01hcD9XZWFrTWFwOk1hcCk7ZnVuY3Rpb24gY2MoYSl7dmFyIGI9YmMuZ2V0KGEpO3ZvaWQgMD09PWImJihiPW5ldyBNYXAsYmMuc2V0KGEsYikpO3JldHVybiBifVxuZnVuY3Rpb24gZGMoYSl7dmFyIGI9YSxjPWE7aWYoYS5hbHRlcm5hdGUpZm9yKDtiLnJldHVybjspYj1iLnJldHVybjtlbHNle2E9YjtkbyBiPWEsMCE9PShiLmVmZmVjdFRhZyYxMDI2KSYmKGM9Yi5yZXR1cm4pLGE9Yi5yZXR1cm47d2hpbGUoYSl9cmV0dXJuIDM9PT1iLnRhZz9jOm51bGx9ZnVuY3Rpb24gZWMoYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9YS5tZW1vaXplZFN0YXRlO251bGw9PT1iJiYoYT1hLmFsdGVybmF0ZSxudWxsIT09YSYmKGI9YS5tZW1vaXplZFN0YXRlKSk7aWYobnVsbCE9PWIpcmV0dXJuIGIuZGVoeWRyYXRlZH1yZXR1cm4gbnVsbH1mdW5jdGlvbiBmYyhhKXtpZihkYyhhKSE9PWEpdGhyb3cgRXJyb3IodSgxODgpKTt9XG5mdW5jdGlvbiBnYyhhKXt2YXIgYj1hLmFsdGVybmF0ZTtpZighYil7Yj1kYyhhKTtpZihudWxsPT09Yil0aHJvdyBFcnJvcih1KDE4OCkpO3JldHVybiBiIT09YT9udWxsOmF9Zm9yKHZhciBjPWEsZD1iOzspe3ZhciBlPWMucmV0dXJuO2lmKG51bGw9PT1lKWJyZWFrO3ZhciBmPWUuYWx0ZXJuYXRlO2lmKG51bGw9PT1mKXtkPWUucmV0dXJuO2lmKG51bGwhPT1kKXtjPWQ7Y29udGludWV9YnJlYWt9aWYoZS5jaGlsZD09PWYuY2hpbGQpe2ZvcihmPWUuY2hpbGQ7Zjspe2lmKGY9PT1jKXJldHVybiBmYyhlKSxhO2lmKGY9PT1kKXJldHVybiBmYyhlKSxiO2Y9Zi5zaWJsaW5nfXRocm93IEVycm9yKHUoMTg4KSk7fWlmKGMucmV0dXJuIT09ZC5yZXR1cm4pYz1lLGQ9ZjtlbHNle2Zvcih2YXIgZz0hMSxoPWUuY2hpbGQ7aDspe2lmKGg9PT1jKXtnPSEwO2M9ZTtkPWY7YnJlYWt9aWYoaD09PWQpe2c9ITA7ZD1lO2M9ZjticmVha31oPWguc2libGluZ31pZighZyl7Zm9yKGg9Zi5jaGlsZDtoOyl7aWYoaD09PVxuYyl7Zz0hMDtjPWY7ZD1lO2JyZWFrfWlmKGg9PT1kKXtnPSEwO2Q9ZjtjPWU7YnJlYWt9aD1oLnNpYmxpbmd9aWYoIWcpdGhyb3cgRXJyb3IodSgxODkpKTt9fWlmKGMuYWx0ZXJuYXRlIT09ZCl0aHJvdyBFcnJvcih1KDE5MCkpO31pZigzIT09Yy50YWcpdGhyb3cgRXJyb3IodSgxODgpKTtyZXR1cm4gYy5zdGF0ZU5vZGUuY3VycmVudD09PWM/YTpifWZ1bmN0aW9uIGhjKGEpe2E9Z2MoYSk7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKHZhciBiPWE7Oyl7aWYoNT09PWIudGFnfHw2PT09Yi50YWcpcmV0dXJuIGI7aWYoYi5jaGlsZCliLmNoaWxkLnJldHVybj1iLGI9Yi5jaGlsZDtlbHNle2lmKGI9PT1hKWJyZWFrO2Zvcig7IWIuc2libGluZzspe2lmKCFiLnJldHVybnx8Yi5yZXR1cm49PT1hKXJldHVybiBudWxsO2I9Yi5yZXR1cm59Yi5zaWJsaW5nLnJldHVybj1iLnJldHVybjtiPWIuc2libGluZ319cmV0dXJuIG51bGx9XG5mdW5jdGlvbiBpYyhhLGIpe2lmKG51bGw9PWIpdGhyb3cgRXJyb3IodSgzMCkpO2lmKG51bGw9PWEpcmV0dXJuIGI7aWYoQXJyYXkuaXNBcnJheShhKSl7aWYoQXJyYXkuaXNBcnJheShiKSlyZXR1cm4gYS5wdXNoLmFwcGx5KGEsYiksYTthLnB1c2goYik7cmV0dXJuIGF9cmV0dXJuIEFycmF5LmlzQXJyYXkoYik/W2FdLmNvbmNhdChiKTpbYSxiXX1mdW5jdGlvbiBqYyhhLGIsYyl7QXJyYXkuaXNBcnJheShhKT9hLmZvckVhY2goYixjKTphJiZiLmNhbGwoYyxhKX12YXIga2M9bnVsbDtcbmZ1bmN0aW9uIGxjKGEpe2lmKGEpe3ZhciBiPWEuX2Rpc3BhdGNoTGlzdGVuZXJzLGM9YS5fZGlzcGF0Y2hJbnN0YW5jZXM7aWYoQXJyYXkuaXNBcnJheShiKSlmb3IodmFyIGQ9MDtkPGIubGVuZ3RoJiYhYS5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpO2QrKylvYShhLGJbZF0sY1tkXSk7ZWxzZSBiJiZvYShhLGIsYyk7YS5fZGlzcGF0Y2hMaXN0ZW5lcnM9bnVsbDthLl9kaXNwYXRjaEluc3RhbmNlcz1udWxsO2EuaXNQZXJzaXN0ZW50KCl8fGEuY29uc3RydWN0b3IucmVsZWFzZShhKX19ZnVuY3Rpb24gbWMoYSl7bnVsbCE9PWEmJihrYz1pYyhrYyxhKSk7YT1rYztrYz1udWxsO2lmKGEpe2pjKGEsbGMpO2lmKGtjKXRocm93IEVycm9yKHUoOTUpKTtpZihmYSl0aHJvdyBhPWhhLGZhPSExLGhhPW51bGwsYTt9fVxuZnVuY3Rpb24gbmMoYSl7YT1hLnRhcmdldHx8YS5zcmNFbGVtZW50fHx3aW5kb3c7YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCYmKGE9YS5jb3JyZXNwb25kaW5nVXNlRWxlbWVudCk7cmV0dXJuIDM9PT1hLm5vZGVUeXBlP2EucGFyZW50Tm9kZTphfWZ1bmN0aW9uIG9jKGEpe2lmKCF5YSlyZXR1cm4hMTthPVwib25cIithO3ZhciBiPWEgaW4gZG9jdW1lbnQ7Ynx8KGI9ZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKSxiLnNldEF0dHJpYnV0ZShhLFwicmV0dXJuO1wiKSxiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBiW2FdKTtyZXR1cm4gYn12YXIgcGM9W107ZnVuY3Rpb24gcWMoYSl7YS50b3BMZXZlbFR5cGU9bnVsbDthLm5hdGl2ZUV2ZW50PW51bGw7YS50YXJnZXRJbnN0PW51bGw7YS5hbmNlc3RvcnMubGVuZ3RoPTA7MTA+cGMubGVuZ3RoJiZwYy5wdXNoKGEpfVxuZnVuY3Rpb24gcmMoYSxiLGMsZCl7aWYocGMubGVuZ3RoKXt2YXIgZT1wYy5wb3AoKTtlLnRvcExldmVsVHlwZT1hO2UuZXZlbnRTeXN0ZW1GbGFncz1kO2UubmF0aXZlRXZlbnQ9YjtlLnRhcmdldEluc3Q9YztyZXR1cm4gZX1yZXR1cm57dG9wTGV2ZWxUeXBlOmEsZXZlbnRTeXN0ZW1GbGFnczpkLG5hdGl2ZUV2ZW50OmIsdGFyZ2V0SW5zdDpjLGFuY2VzdG9yczpbXX19XG5mdW5jdGlvbiBzYyhhKXt2YXIgYj1hLnRhcmdldEluc3QsYz1iO2Rve2lmKCFjKXthLmFuY2VzdG9ycy5wdXNoKGMpO2JyZWFrfXZhciBkPWM7aWYoMz09PWQudGFnKWQ9ZC5zdGF0ZU5vZGUuY29udGFpbmVySW5mbztlbHNle2Zvcig7ZC5yZXR1cm47KWQ9ZC5yZXR1cm47ZD0zIT09ZC50YWc/bnVsbDpkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvfWlmKCFkKWJyZWFrO2I9Yy50YWc7NSE9PWImJjYhPT1ifHxhLmFuY2VzdG9ycy5wdXNoKGMpO2M9dGMoZCl9d2hpbGUoYyk7Zm9yKGM9MDtjPGEuYW5jZXN0b3JzLmxlbmd0aDtjKyspe2I9YS5hbmNlc3RvcnNbY107dmFyIGU9bmMoYS5uYXRpdmVFdmVudCk7ZD1hLnRvcExldmVsVHlwZTt2YXIgZj1hLm5hdGl2ZUV2ZW50LGc9YS5ldmVudFN5c3RlbUZsYWdzOzA9PT1jJiYoZ3w9NjQpO2Zvcih2YXIgaD1udWxsLGs9MDtrPHNhLmxlbmd0aDtrKyspe3ZhciBsPXNhW2tdO2wmJihsPWwuZXh0cmFjdEV2ZW50cyhkLGIsZixlLGcpKSYmKGg9XG5pYyhoLGwpKX1tYyhoKX19ZnVuY3Rpb24gdWMoYSxiLGMpe2lmKCFjLmhhcyhhKSl7c3dpdGNoKGEpe2Nhc2UgXCJzY3JvbGxcIjp2YyhiLFwic2Nyb2xsXCIsITApO2JyZWFrO2Nhc2UgXCJmb2N1c1wiOmNhc2UgXCJibHVyXCI6dmMoYixcImZvY3VzXCIsITApO3ZjKGIsXCJibHVyXCIsITApO2Muc2V0KFwiYmx1clwiLG51bGwpO2Muc2V0KFwiZm9jdXNcIixudWxsKTticmVhaztjYXNlIFwiY2FuY2VsXCI6Y2FzZSBcImNsb3NlXCI6b2MoYSkmJnZjKGIsYSwhMCk7YnJlYWs7Y2FzZSBcImludmFsaWRcIjpjYXNlIFwic3VibWl0XCI6Y2FzZSBcInJlc2V0XCI6YnJlYWs7ZGVmYXVsdDotMT09PWFjLmluZGV4T2YoYSkmJkYoYSxiKX1jLnNldChhLG51bGwpfX1cbnZhciB3Yyx4Yyx5Yyx6Yz0hMSxBYz1bXSxCYz1udWxsLENjPW51bGwsRGM9bnVsbCxFYz1uZXcgTWFwLEZjPW5ldyBNYXAsR2M9W10sSGM9XCJtb3VzZWRvd24gbW91c2V1cCB0b3VjaGNhbmNlbCB0b3VjaGVuZCB0b3VjaHN0YXJ0IGF1eGNsaWNrIGRibGNsaWNrIHBvaW50ZXJjYW5jZWwgcG9pbnRlcmRvd24gcG9pbnRlcnVwIGRyYWdlbmQgZHJhZ3N0YXJ0IGRyb3AgY29tcG9zaXRpb25lbmQgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIGlucHV0IHRleHRJbnB1dCBjbG9zZSBjYW5jZWwgY29weSBjdXQgcGFzdGUgY2xpY2sgY2hhbmdlIGNvbnRleHRtZW51IHJlc2V0IHN1Ym1pdFwiLnNwbGl0KFwiIFwiKSxJYz1cImZvY3VzIGJsdXIgZHJhZ2VudGVyIGRyYWdsZWF2ZSBtb3VzZW92ZXIgbW91c2VvdXQgcG9pbnRlcm92ZXIgcG9pbnRlcm91dCBnb3Rwb2ludGVyY2FwdHVyZSBsb3N0cG9pbnRlcmNhcHR1cmVcIi5zcGxpdChcIiBcIik7XG5mdW5jdGlvbiBKYyhhLGIpe3ZhciBjPWNjKGIpO0hjLmZvckVhY2goZnVuY3Rpb24oYSl7dWMoYSxiLGMpfSk7SWMuZm9yRWFjaChmdW5jdGlvbihhKXt1YyhhLGIsYyl9KX1mdW5jdGlvbiBLYyhhLGIsYyxkLGUpe3JldHVybntibG9ja2VkT246YSx0b3BMZXZlbFR5cGU6YixldmVudFN5c3RlbUZsYWdzOmN8MzIsbmF0aXZlRXZlbnQ6ZSxjb250YWluZXI6ZH19XG5mdW5jdGlvbiBMYyhhLGIpe3N3aXRjaChhKXtjYXNlIFwiZm9jdXNcIjpjYXNlIFwiYmx1clwiOkJjPW51bGw7YnJlYWs7Y2FzZSBcImRyYWdlbnRlclwiOmNhc2UgXCJkcmFnbGVhdmVcIjpDYz1udWxsO2JyZWFrO2Nhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwibW91c2VvdXRcIjpEYz1udWxsO2JyZWFrO2Nhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVyb3V0XCI6RWMuZGVsZXRlKGIucG9pbnRlcklkKTticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6RmMuZGVsZXRlKGIucG9pbnRlcklkKX19ZnVuY3Rpb24gTWMoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hfHxhLm5hdGl2ZUV2ZW50IT09ZilyZXR1cm4gYT1LYyhiLGMsZCxlLGYpLG51bGwhPT1iJiYoYj1OYyhiKSxudWxsIT09YiYmeGMoYikpLGE7YS5ldmVudFN5c3RlbUZsYWdzfD1kO3JldHVybiBhfVxuZnVuY3Rpb24gT2MoYSxiLGMsZCxlKXtzd2l0Y2goYil7Y2FzZSBcImZvY3VzXCI6cmV0dXJuIEJjPU1jKEJjLGEsYixjLGQsZSksITA7Y2FzZSBcImRyYWdlbnRlclwiOnJldHVybiBDYz1NYyhDYyxhLGIsYyxkLGUpLCEwO2Nhc2UgXCJtb3VzZW92ZXJcIjpyZXR1cm4gRGM9TWMoRGMsYSxiLGMsZCxlKSwhMDtjYXNlIFwicG9pbnRlcm92ZXJcIjp2YXIgZj1lLnBvaW50ZXJJZDtFYy5zZXQoZixNYyhFYy5nZXQoZil8fG51bGwsYSxiLGMsZCxlKSk7cmV0dXJuITA7Y2FzZSBcImdvdHBvaW50ZXJjYXB0dXJlXCI6cmV0dXJuIGY9ZS5wb2ludGVySWQsRmMuc2V0KGYsTWMoRmMuZ2V0KGYpfHxudWxsLGEsYixjLGQsZSkpLCEwfXJldHVybiExfVxuZnVuY3Rpb24gUGMoYSl7dmFyIGI9dGMoYS50YXJnZXQpO2lmKG51bGwhPT1iKXt2YXIgYz1kYyhiKTtpZihudWxsIT09YylpZihiPWMudGFnLDEzPT09Yil7aWYoYj1lYyhjKSxudWxsIT09Yil7YS5ibG9ja2VkT249YjtyLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eShhLnByaW9yaXR5LGZ1bmN0aW9uKCl7eWMoYyl9KTtyZXR1cm59fWVsc2UgaWYoMz09PWImJmMuc3RhdGVOb2RlLmh5ZHJhdGUpe2EuYmxvY2tlZE9uPTM9PT1jLnRhZz9jLnN0YXRlTm9kZS5jb250YWluZXJJbmZvOm51bGw7cmV0dXJufX1hLmJsb2NrZWRPbj1udWxsfWZ1bmN0aW9uIFFjKGEpe2lmKG51bGwhPT1hLmJsb2NrZWRPbilyZXR1cm4hMTt2YXIgYj1SYyhhLnRvcExldmVsVHlwZSxhLmV2ZW50U3lzdGVtRmxhZ3MsYS5jb250YWluZXIsYS5uYXRpdmVFdmVudCk7aWYobnVsbCE9PWIpe3ZhciBjPU5jKGIpO251bGwhPT1jJiZ4YyhjKTthLmJsb2NrZWRPbj1iO3JldHVybiExfXJldHVybiEwfVxuZnVuY3Rpb24gU2MoYSxiLGMpe1FjKGEpJiZjLmRlbGV0ZShiKX1mdW5jdGlvbiBUYygpe2Zvcih6Yz0hMTswPEFjLmxlbmd0aDspe3ZhciBhPUFjWzBdO2lmKG51bGwhPT1hLmJsb2NrZWRPbil7YT1OYyhhLmJsb2NrZWRPbik7bnVsbCE9PWEmJndjKGEpO2JyZWFrfXZhciBiPVJjKGEudG9wTGV2ZWxUeXBlLGEuZXZlbnRTeXN0ZW1GbGFncyxhLmNvbnRhaW5lcixhLm5hdGl2ZUV2ZW50KTtudWxsIT09Yj9hLmJsb2NrZWRPbj1iOkFjLnNoaWZ0KCl9bnVsbCE9PUJjJiZRYyhCYykmJihCYz1udWxsKTtudWxsIT09Q2MmJlFjKENjKSYmKENjPW51bGwpO251bGwhPT1EYyYmUWMoRGMpJiYoRGM9bnVsbCk7RWMuZm9yRWFjaChTYyk7RmMuZm9yRWFjaChTYyl9ZnVuY3Rpb24gVWMoYSxiKXthLmJsb2NrZWRPbj09PWImJihhLmJsb2NrZWRPbj1udWxsLHpjfHwoemM9ITAsci51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrKHIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksVGMpKSl9XG5mdW5jdGlvbiBWYyhhKXtmdW5jdGlvbiBiKGIpe3JldHVybiBVYyhiLGEpfWlmKDA8QWMubGVuZ3RoKXtVYyhBY1swXSxhKTtmb3IodmFyIGM9MTtjPEFjLmxlbmd0aDtjKyspe3ZhciBkPUFjW2NdO2QuYmxvY2tlZE9uPT09YSYmKGQuYmxvY2tlZE9uPW51bGwpfX1udWxsIT09QmMmJlVjKEJjLGEpO251bGwhPT1DYyYmVWMoQ2MsYSk7bnVsbCE9PURjJiZVYyhEYyxhKTtFYy5mb3JFYWNoKGIpO0ZjLmZvckVhY2goYik7Zm9yKGM9MDtjPEdjLmxlbmd0aDtjKyspZD1HY1tjXSxkLmJsb2NrZWRPbj09PWEmJihkLmJsb2NrZWRPbj1udWxsKTtmb3IoOzA8R2MubGVuZ3RoJiYoYz1HY1swXSxudWxsPT09Yy5ibG9ja2VkT24pOylQYyhjKSxudWxsPT09Yy5ibG9ja2VkT24mJkdjLnNoaWZ0KCl9XG52YXIgV2M9e30sWWM9bmV3IE1hcCxaYz1uZXcgTWFwLCRjPVtcImFib3J0XCIsXCJhYm9ydFwiLFhiLFwiYW5pbWF0aW9uRW5kXCIsWWIsXCJhbmltYXRpb25JdGVyYXRpb25cIixaYixcImFuaW1hdGlvblN0YXJ0XCIsXCJjYW5wbGF5XCIsXCJjYW5QbGF5XCIsXCJjYW5wbGF5dGhyb3VnaFwiLFwiY2FuUGxheVRocm91Z2hcIixcImR1cmF0aW9uY2hhbmdlXCIsXCJkdXJhdGlvbkNoYW5nZVwiLFwiZW1wdGllZFwiLFwiZW1wdGllZFwiLFwiZW5jcnlwdGVkXCIsXCJlbmNyeXB0ZWRcIixcImVuZGVkXCIsXCJlbmRlZFwiLFwiZXJyb3JcIixcImVycm9yXCIsXCJnb3Rwb2ludGVyY2FwdHVyZVwiLFwiZ290UG9pbnRlckNhcHR1cmVcIixcImxvYWRcIixcImxvYWRcIixcImxvYWRlZGRhdGFcIixcImxvYWRlZERhdGFcIixcImxvYWRlZG1ldGFkYXRhXCIsXCJsb2FkZWRNZXRhZGF0YVwiLFwibG9hZHN0YXJ0XCIsXCJsb2FkU3RhcnRcIixcImxvc3Rwb2ludGVyY2FwdHVyZVwiLFwibG9zdFBvaW50ZXJDYXB0dXJlXCIsXCJwbGF5aW5nXCIsXCJwbGF5aW5nXCIsXCJwcm9ncmVzc1wiLFwicHJvZ3Jlc3NcIixcInNlZWtpbmdcIixcblwic2Vla2luZ1wiLFwic3RhbGxlZFwiLFwic3RhbGxlZFwiLFwic3VzcGVuZFwiLFwic3VzcGVuZFwiLFwidGltZXVwZGF0ZVwiLFwidGltZVVwZGF0ZVwiLCRiLFwidHJhbnNpdGlvbkVuZFwiLFwid2FpdGluZ1wiLFwid2FpdGluZ1wiXTtmdW5jdGlvbiBhZChhLGIpe2Zvcih2YXIgYz0wO2M8YS5sZW5ndGg7Yys9Mil7dmFyIGQ9YVtjXSxlPWFbYysxXSxmPVwib25cIisoZVswXS50b1VwcGVyQ2FzZSgpK2Uuc2xpY2UoMSkpO2Y9e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOmYsY2FwdHVyZWQ6ZitcIkNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOltkXSxldmVudFByaW9yaXR5OmJ9O1pjLnNldChkLGIpO1ljLnNldChkLGYpO1djW2VdPWZ9fVxuYWQoXCJibHVyIGJsdXIgY2FuY2VsIGNhbmNlbCBjbGljayBjbGljayBjbG9zZSBjbG9zZSBjb250ZXh0bWVudSBjb250ZXh0TWVudSBjb3B5IGNvcHkgY3V0IGN1dCBhdXhjbGljayBhdXhDbGljayBkYmxjbGljayBkb3VibGVDbGljayBkcmFnZW5kIGRyYWdFbmQgZHJhZ3N0YXJ0IGRyYWdTdGFydCBkcm9wIGRyb3AgZm9jdXMgZm9jdXMgaW5wdXQgaW5wdXQgaW52YWxpZCBpbnZhbGlkIGtleWRvd24ga2V5RG93biBrZXlwcmVzcyBrZXlQcmVzcyBrZXl1cCBrZXlVcCBtb3VzZWRvd24gbW91c2VEb3duIG1vdXNldXAgbW91c2VVcCBwYXN0ZSBwYXN0ZSBwYXVzZSBwYXVzZSBwbGF5IHBsYXkgcG9pbnRlcmNhbmNlbCBwb2ludGVyQ2FuY2VsIHBvaW50ZXJkb3duIHBvaW50ZXJEb3duIHBvaW50ZXJ1cCBwb2ludGVyVXAgcmF0ZWNoYW5nZSByYXRlQ2hhbmdlIHJlc2V0IHJlc2V0IHNlZWtlZCBzZWVrZWQgc3VibWl0IHN1Ym1pdCB0b3VjaGNhbmNlbCB0b3VjaENhbmNlbCB0b3VjaGVuZCB0b3VjaEVuZCB0b3VjaHN0YXJ0IHRvdWNoU3RhcnQgdm9sdW1lY2hhbmdlIHZvbHVtZUNoYW5nZVwiLnNwbGl0KFwiIFwiKSwwKTtcbmFkKFwiZHJhZyBkcmFnIGRyYWdlbnRlciBkcmFnRW50ZXIgZHJhZ2V4aXQgZHJhZ0V4aXQgZHJhZ2xlYXZlIGRyYWdMZWF2ZSBkcmFnb3ZlciBkcmFnT3ZlciBtb3VzZW1vdmUgbW91c2VNb3ZlIG1vdXNlb3V0IG1vdXNlT3V0IG1vdXNlb3ZlciBtb3VzZU92ZXIgcG9pbnRlcm1vdmUgcG9pbnRlck1vdmUgcG9pbnRlcm91dCBwb2ludGVyT3V0IHBvaW50ZXJvdmVyIHBvaW50ZXJPdmVyIHNjcm9sbCBzY3JvbGwgdG9nZ2xlIHRvZ2dsZSB0b3VjaG1vdmUgdG91Y2hNb3ZlIHdoZWVsIHdoZWVsXCIuc3BsaXQoXCIgXCIpLDEpO2FkKCRjLDIpO2Zvcih2YXIgYmQ9XCJjaGFuZ2Ugc2VsZWN0aW9uY2hhbmdlIHRleHRJbnB1dCBjb21wb3NpdGlvbnN0YXJ0IGNvbXBvc2l0aW9uZW5kIGNvbXBvc2l0aW9udXBkYXRlXCIuc3BsaXQoXCIgXCIpLGNkPTA7Y2Q8YmQubGVuZ3RoO2NkKyspWmMuc2V0KGJkW2NkXSwwKTtcbnZhciBkZD1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LGVkPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LGZkPSEwO2Z1bmN0aW9uIEYoYSxiKXt2YyhiLGEsITEpfWZ1bmN0aW9uIHZjKGEsYixjKXt2YXIgZD1aYy5nZXQoYik7c3dpdGNoKHZvaWQgMD09PWQ/MjpkKXtjYXNlIDA6ZD1nZC5iaW5kKG51bGwsYiwxLGEpO2JyZWFrO2Nhc2UgMTpkPWhkLmJpbmQobnVsbCxiLDEsYSk7YnJlYWs7ZGVmYXVsdDpkPWlkLmJpbmQobnVsbCxiLDEsYSl9Yz9hLmFkZEV2ZW50TGlzdGVuZXIoYixkLCEwKTphLmFkZEV2ZW50TGlzdGVuZXIoYixkLCExKX1mdW5jdGlvbiBnZChhLGIsYyxkKXtKYXx8SGEoKTt2YXIgZT1pZCxmPUphO0phPSEwO3RyeXtHYShlLGEsYixjLGQpfWZpbmFsbHl7KEphPWYpfHxMYSgpfX1mdW5jdGlvbiBoZChhLGIsYyxkKXtlZChkZCxpZC5iaW5kKG51bGwsYSxiLGMsZCkpfVxuZnVuY3Rpb24gaWQoYSxiLGMsZCl7aWYoZmQpaWYoMDxBYy5sZW5ndGgmJi0xPEhjLmluZGV4T2YoYSkpYT1LYyhudWxsLGEsYixjLGQpLEFjLnB1c2goYSk7ZWxzZXt2YXIgZT1SYyhhLGIsYyxkKTtpZihudWxsPT09ZSlMYyhhLGQpO2Vsc2UgaWYoLTE8SGMuaW5kZXhPZihhKSlhPUtjKGUsYSxiLGMsZCksQWMucHVzaChhKTtlbHNlIGlmKCFPYyhlLGEsYixjLGQpKXtMYyhhLGQpO2E9cmMoYSxkLG51bGwsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9fX19XG5mdW5jdGlvbiBSYyhhLGIsYyxkKXtjPW5jKGQpO2M9dGMoYyk7aWYobnVsbCE9PWMpe3ZhciBlPWRjKGMpO2lmKG51bGw9PT1lKWM9bnVsbDtlbHNle3ZhciBmPWUudGFnO2lmKDEzPT09Zil7Yz1lYyhlKTtpZihudWxsIT09YylyZXR1cm4gYztjPW51bGx9ZWxzZSBpZigzPT09Zil7aWYoZS5zdGF0ZU5vZGUuaHlkcmF0ZSlyZXR1cm4gMz09PWUudGFnP2Uuc3RhdGVOb2RlLmNvbnRhaW5lckluZm86bnVsbDtjPW51bGx9ZWxzZSBlIT09YyYmKGM9bnVsbCl9fWE9cmMoYSxkLGMsYik7dHJ5e01hKHNjLGEpfWZpbmFsbHl7cWMoYSl9cmV0dXJuIG51bGx9XG52YXIgamQ9e2FuaW1hdGlvbkl0ZXJhdGlvbkNvdW50OiEwLGJvcmRlckltYWdlT3V0c2V0OiEwLGJvcmRlckltYWdlU2xpY2U6ITAsYm9yZGVySW1hZ2VXaWR0aDohMCxib3hGbGV4OiEwLGJveEZsZXhHcm91cDohMCxib3hPcmRpbmFsR3JvdXA6ITAsY29sdW1uQ291bnQ6ITAsY29sdW1uczohMCxmbGV4OiEwLGZsZXhHcm93OiEwLGZsZXhQb3NpdGl2ZTohMCxmbGV4U2hyaW5rOiEwLGZsZXhOZWdhdGl2ZTohMCxmbGV4T3JkZXI6ITAsZ3JpZEFyZWE6ITAsZ3JpZFJvdzohMCxncmlkUm93RW5kOiEwLGdyaWRSb3dTcGFuOiEwLGdyaWRSb3dTdGFydDohMCxncmlkQ29sdW1uOiEwLGdyaWRDb2x1bW5FbmQ6ITAsZ3JpZENvbHVtblNwYW46ITAsZ3JpZENvbHVtblN0YXJ0OiEwLGZvbnRXZWlnaHQ6ITAsbGluZUNsYW1wOiEwLGxpbmVIZWlnaHQ6ITAsb3BhY2l0eTohMCxvcmRlcjohMCxvcnBoYW5zOiEwLHRhYlNpemU6ITAsd2lkb3dzOiEwLHpJbmRleDohMCx6b29tOiEwLGZpbGxPcGFjaXR5OiEwLFxuZmxvb2RPcGFjaXR5OiEwLHN0b3BPcGFjaXR5OiEwLHN0cm9rZURhc2hhcnJheTohMCxzdHJva2VEYXNob2Zmc2V0OiEwLHN0cm9rZU1pdGVybGltaXQ6ITAsc3Ryb2tlT3BhY2l0eTohMCxzdHJva2VXaWR0aDohMH0sa2Q9W1wiV2Via2l0XCIsXCJtc1wiLFwiTW96XCIsXCJPXCJdO09iamVjdC5rZXlzKGpkKS5mb3JFYWNoKGZ1bmN0aW9uKGEpe2tkLmZvckVhY2goZnVuY3Rpb24oYil7Yj1iK2EuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYS5zdWJzdHJpbmcoMSk7amRbYl09amRbYV19KX0pO2Z1bmN0aW9uIGxkKGEsYixjKXtyZXR1cm4gbnVsbD09Ynx8XCJib29sZWFuXCI9PT10eXBlb2YgYnx8XCJcIj09PWI/XCJcIjpjfHxcIm51bWJlclwiIT09dHlwZW9mIGJ8fDA9PT1ifHxqZC5oYXNPd25Qcm9wZXJ0eShhKSYmamRbYV0/KFwiXCIrYikudHJpbSgpOmIrXCJweFwifVxuZnVuY3Rpb24gbWQoYSxiKXthPWEuc3R5bGU7Zm9yKHZhciBjIGluIGIpaWYoYi5oYXNPd25Qcm9wZXJ0eShjKSl7dmFyIGQ9MD09PWMuaW5kZXhPZihcIi0tXCIpLGU9bGQoYyxiW2NdLGQpO1wiZmxvYXRcIj09PWMmJihjPVwiY3NzRmxvYXRcIik7ZD9hLnNldFByb3BlcnR5KGMsZSk6YVtjXT1lfX12YXIgbmQ9bih7bWVudWl0ZW06ITB9LHthcmVhOiEwLGJhc2U6ITAsYnI6ITAsY29sOiEwLGVtYmVkOiEwLGhyOiEwLGltZzohMCxpbnB1dDohMCxrZXlnZW46ITAsbGluazohMCxtZXRhOiEwLHBhcmFtOiEwLHNvdXJjZTohMCx0cmFjazohMCx3YnI6ITB9KTtcbmZ1bmN0aW9uIG9kKGEsYil7aWYoYil7aWYobmRbYV0mJihudWxsIT1iLmNoaWxkcmVufHxudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKSl0aHJvdyBFcnJvcih1KDEzNyxhLFwiXCIpKTtpZihudWxsIT1iLmRhbmdlcm91c2x5U2V0SW5uZXJIVE1MKXtpZihudWxsIT1iLmNoaWxkcmVuKXRocm93IEVycm9yKHUoNjApKTtpZighKFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmXCJfX2h0bWxcImluIGIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwpKXRocm93IEVycm9yKHUoNjEpKTt9aWYobnVsbCE9Yi5zdHlsZSYmXCJvYmplY3RcIiE9PXR5cGVvZiBiLnN0eWxlKXRocm93IEVycm9yKHUoNjIsXCJcIikpO319XG5mdW5jdGlvbiBwZChhLGIpe2lmKC0xPT09YS5pbmRleE9mKFwiLVwiKSlyZXR1cm5cInN0cmluZ1wiPT09dHlwZW9mIGIuaXM7c3dpdGNoKGEpe2Nhc2UgXCJhbm5vdGF0aW9uLXhtbFwiOmNhc2UgXCJjb2xvci1wcm9maWxlXCI6Y2FzZSBcImZvbnQtZmFjZVwiOmNhc2UgXCJmb250LWZhY2Utc3JjXCI6Y2FzZSBcImZvbnQtZmFjZS11cmlcIjpjYXNlIFwiZm9udC1mYWNlLWZvcm1hdFwiOmNhc2UgXCJmb250LWZhY2UtbmFtZVwiOmNhc2UgXCJtaXNzaW5nLWdseXBoXCI6cmV0dXJuITE7ZGVmYXVsdDpyZXR1cm4hMH19dmFyIHFkPU1iLmh0bWw7ZnVuY3Rpb24gcmQoYSxiKXthPTk9PT1hLm5vZGVUeXBlfHwxMT09PWEubm9kZVR5cGU/YTphLm93bmVyRG9jdW1lbnQ7dmFyIGM9Y2MoYSk7Yj13YVtiXTtmb3IodmFyIGQ9MDtkPGIubGVuZ3RoO2QrKyl1YyhiW2RdLGEsYyl9ZnVuY3Rpb24gc2QoKXt9XG5mdW5jdGlvbiB0ZChhKXthPWF8fChcInVuZGVmaW5lZFwiIT09dHlwZW9mIGRvY3VtZW50P2RvY3VtZW50OnZvaWQgMCk7aWYoXCJ1bmRlZmluZWRcIj09PXR5cGVvZiBhKXJldHVybiBudWxsO3RyeXtyZXR1cm4gYS5hY3RpdmVFbGVtZW50fHxhLmJvZHl9Y2F0Y2goYil7cmV0dXJuIGEuYm9keX19ZnVuY3Rpb24gdWQoYSl7Zm9yKDthJiZhLmZpcnN0Q2hpbGQ7KWE9YS5maXJzdENoaWxkO3JldHVybiBhfWZ1bmN0aW9uIHZkKGEsYil7dmFyIGM9dWQoYSk7YT0wO2Zvcih2YXIgZDtjOyl7aWYoMz09PWMubm9kZVR5cGUpe2Q9YStjLnRleHRDb250ZW50Lmxlbmd0aDtpZihhPD1iJiZkPj1iKXJldHVybntub2RlOmMsb2Zmc2V0OmItYX07YT1kfWE6e2Zvcig7Yzspe2lmKGMubmV4dFNpYmxpbmcpe2M9Yy5uZXh0U2libGluZzticmVhayBhfWM9Yy5wYXJlbnROb2RlfWM9dm9pZCAwfWM9dWQoYyl9fVxuZnVuY3Rpb24gd2QoYSxiKXtyZXR1cm4gYSYmYj9hPT09Yj8hMDphJiYzPT09YS5ub2RlVHlwZT8hMTpiJiYzPT09Yi5ub2RlVHlwZT93ZChhLGIucGFyZW50Tm9kZSk6XCJjb250YWluc1wiaW4gYT9hLmNvbnRhaW5zKGIpOmEuY29tcGFyZURvY3VtZW50UG9zaXRpb24/ISEoYS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbihiKSYxNik6ITE6ITF9ZnVuY3Rpb24geGQoKXtmb3IodmFyIGE9d2luZG93LGI9dGQoKTtiIGluc3RhbmNlb2YgYS5IVE1MSUZyYW1lRWxlbWVudDspe3RyeXt2YXIgYz1cInN0cmluZ1wiPT09dHlwZW9mIGIuY29udGVudFdpbmRvdy5sb2NhdGlvbi5ocmVmfWNhdGNoKGQpe2M9ITF9aWYoYylhPWIuY29udGVudFdpbmRvdztlbHNlIGJyZWFrO2I9dGQoYS5kb2N1bWVudCl9cmV0dXJuIGJ9XG5mdW5jdGlvbiB5ZChhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuIGImJihcImlucHV0XCI9PT1iJiYoXCJ0ZXh0XCI9PT1hLnR5cGV8fFwic2VhcmNoXCI9PT1hLnR5cGV8fFwidGVsXCI9PT1hLnR5cGV8fFwidXJsXCI9PT1hLnR5cGV8fFwicGFzc3dvcmRcIj09PWEudHlwZSl8fFwidGV4dGFyZWFcIj09PWJ8fFwidHJ1ZVwiPT09YS5jb250ZW50RWRpdGFibGUpfXZhciB6ZD1cIiRcIixBZD1cIi8kXCIsQmQ9XCIkP1wiLENkPVwiJCFcIixEZD1udWxsLEVkPW51bGw7ZnVuY3Rpb24gRmQoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImJ1dHRvblwiOmNhc2UgXCJpbnB1dFwiOmNhc2UgXCJzZWxlY3RcIjpjYXNlIFwidGV4dGFyZWFcIjpyZXR1cm4hIWIuYXV0b0ZvY3VzfXJldHVybiExfVxuZnVuY3Rpb24gR2QoYSxiKXtyZXR1cm5cInRleHRhcmVhXCI9PT1hfHxcIm9wdGlvblwiPT09YXx8XCJub3NjcmlwdFwiPT09YXx8XCJzdHJpbmdcIj09PXR5cGVvZiBiLmNoaWxkcmVufHxcIm51bWJlclwiPT09dHlwZW9mIGIuY2hpbGRyZW58fFwib2JqZWN0XCI9PT10eXBlb2YgYi5kYW5nZXJvdXNseVNldElubmVySFRNTCYmbnVsbCE9PWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwmJm51bGwhPWIuZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUwuX19odG1sfXZhciBIZD1cImZ1bmN0aW9uXCI9PT10eXBlb2Ygc2V0VGltZW91dD9zZXRUaW1lb3V0OnZvaWQgMCxJZD1cImZ1bmN0aW9uXCI9PT10eXBlb2YgY2xlYXJUaW1lb3V0P2NsZWFyVGltZW91dDp2b2lkIDA7ZnVuY3Rpb24gSmQoYSl7Zm9yKDtudWxsIT1hO2E9YS5uZXh0U2libGluZyl7dmFyIGI9YS5ub2RlVHlwZTtpZigxPT09Ynx8Mz09PWIpYnJlYWt9cmV0dXJuIGF9XG5mdW5jdGlvbiBLZChhKXthPWEucHJldmlvdXNTaWJsaW5nO2Zvcih2YXIgYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT16ZHx8Yz09PUNkfHxjPT09QmQpe2lmKDA9PT1iKXJldHVybiBhO2ItLX1lbHNlIGM9PT1BZCYmYisrfWE9YS5wcmV2aW91c1NpYmxpbmd9cmV0dXJuIG51bGx9dmFyIExkPU1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnNsaWNlKDIpLE1kPVwiX19yZWFjdEludGVybmFsSW5zdGFuY2UkXCIrTGQsTmQ9XCJfX3JlYWN0RXZlbnRIYW5kbGVycyRcIitMZCxPZD1cIl9fcmVhY3RDb250YWluZXJlJFwiK0xkO1xuZnVuY3Rpb24gdGMoYSl7dmFyIGI9YVtNZF07aWYoYilyZXR1cm4gYjtmb3IodmFyIGM9YS5wYXJlbnROb2RlO2M7KXtpZihiPWNbT2RdfHxjW01kXSl7Yz1iLmFsdGVybmF0ZTtpZihudWxsIT09Yi5jaGlsZHx8bnVsbCE9PWMmJm51bGwhPT1jLmNoaWxkKWZvcihhPUtkKGEpO251bGwhPT1hOyl7aWYoYz1hW01kXSlyZXR1cm4gYzthPUtkKGEpfXJldHVybiBifWE9YztjPWEucGFyZW50Tm9kZX1yZXR1cm4gbnVsbH1mdW5jdGlvbiBOYyhhKXthPWFbTWRdfHxhW09kXTtyZXR1cm4hYXx8NSE9PWEudGFnJiY2IT09YS50YWcmJjEzIT09YS50YWcmJjMhPT1hLnRhZz9udWxsOmF9ZnVuY3Rpb24gUGQoYSl7aWYoNT09PWEudGFnfHw2PT09YS50YWcpcmV0dXJuIGEuc3RhdGVOb2RlO3Rocm93IEVycm9yKHUoMzMpKTt9ZnVuY3Rpb24gUWQoYSl7cmV0dXJuIGFbTmRdfHxudWxsfVxuZnVuY3Rpb24gUmQoYSl7ZG8gYT1hLnJldHVybjt3aGlsZShhJiY1IT09YS50YWcpO3JldHVybiBhP2E6bnVsbH1cbmZ1bmN0aW9uIFNkKGEsYil7dmFyIGM9YS5zdGF0ZU5vZGU7aWYoIWMpcmV0dXJuIG51bGw7dmFyIGQ9bGEoYyk7aWYoIWQpcmV0dXJuIG51bGw7Yz1kW2JdO2E6c3dpdGNoKGIpe2Nhc2UgXCJvbkNsaWNrXCI6Y2FzZSBcIm9uQ2xpY2tDYXB0dXJlXCI6Y2FzZSBcIm9uRG91YmxlQ2xpY2tcIjpjYXNlIFwib25Eb3VibGVDbGlja0NhcHR1cmVcIjpjYXNlIFwib25Nb3VzZURvd25cIjpjYXNlIFwib25Nb3VzZURvd25DYXB0dXJlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlXCI6Y2FzZSBcIm9uTW91c2VNb3ZlQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlVXBcIjpjYXNlIFwib25Nb3VzZVVwQ2FwdHVyZVwiOmNhc2UgXCJvbk1vdXNlRW50ZXJcIjooZD0hZC5kaXNhYmxlZCl8fChhPWEudHlwZSxkPSEoXCJidXR0b25cIj09PWF8fFwiaW5wdXRcIj09PWF8fFwic2VsZWN0XCI9PT1hfHxcInRleHRhcmVhXCI9PT1hKSk7YT0hZDticmVhayBhO2RlZmF1bHQ6YT0hMX1pZihhKXJldHVybiBudWxsO2lmKGMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBjKXRocm93IEVycm9yKHUoMjMxLFxuYix0eXBlb2YgYykpO3JldHVybiBjfWZ1bmN0aW9uIFRkKGEsYixjKXtpZihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lc1tiXSkpYy5fZGlzcGF0Y2hMaXN0ZW5lcnM9aWMoYy5fZGlzcGF0Y2hMaXN0ZW5lcnMsYiksYy5fZGlzcGF0Y2hJbnN0YW5jZXM9aWMoYy5fZGlzcGF0Y2hJbnN0YW5jZXMsYSl9ZnVuY3Rpb24gVWQoYSl7aWYoYSYmYS5kaXNwYXRjaENvbmZpZy5waGFzZWRSZWdpc3RyYXRpb25OYW1lcyl7Zm9yKHZhciBiPWEuX3RhcmdldEluc3QsYz1bXTtiOyljLnB1c2goYiksYj1SZChiKTtmb3IoYj1jLmxlbmd0aDswPGItLTspVGQoY1tiXSxcImNhcHR1cmVkXCIsYSk7Zm9yKGI9MDtiPGMubGVuZ3RoO2IrKylUZChjW2JdLFwiYnViYmxlZFwiLGEpfX1cbmZ1bmN0aW9uIFZkKGEsYixjKXthJiZjJiZjLmRpc3BhdGNoQ29uZmlnLnJlZ2lzdHJhdGlvbk5hbWUmJihiPVNkKGEsYy5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lKSkmJihjLl9kaXNwYXRjaExpc3RlbmVycz1pYyhjLl9kaXNwYXRjaExpc3RlbmVycyxiKSxjLl9kaXNwYXRjaEluc3RhbmNlcz1pYyhjLl9kaXNwYXRjaEluc3RhbmNlcyxhKSl9ZnVuY3Rpb24gV2QoYSl7YSYmYS5kaXNwYXRjaENvbmZpZy5yZWdpc3RyYXRpb25OYW1lJiZWZChhLl90YXJnZXRJbnN0LG51bGwsYSl9ZnVuY3Rpb24gWGQoYSl7amMoYSxVZCl9dmFyIFlkPW51bGwsWmQ9bnVsbCwkZD1udWxsO1xuZnVuY3Rpb24gYWUoKXtpZigkZClyZXR1cm4gJGQ7dmFyIGEsYj1aZCxjPWIubGVuZ3RoLGQsZT1cInZhbHVlXCJpbiBZZD9ZZC52YWx1ZTpZZC50ZXh0Q29udGVudCxmPWUubGVuZ3RoO2ZvcihhPTA7YTxjJiZiW2FdPT09ZVthXTthKyspO3ZhciBnPWMtYTtmb3IoZD0xO2Q8PWcmJmJbYy1kXT09PWVbZi1kXTtkKyspO3JldHVybiAkZD1lLnNsaWNlKGEsMTxkPzEtZDp2b2lkIDApfWZ1bmN0aW9uIGJlKCl7cmV0dXJuITB9ZnVuY3Rpb24gY2UoKXtyZXR1cm4hMX1cbmZ1bmN0aW9uIEcoYSxiLGMsZCl7dGhpcy5kaXNwYXRjaENvbmZpZz1hO3RoaXMuX3RhcmdldEluc3Q9Yjt0aGlzLm5hdGl2ZUV2ZW50PWM7YT10aGlzLmNvbnN0cnVjdG9yLkludGVyZmFjZTtmb3IodmFyIGUgaW4gYSlhLmhhc093blByb3BlcnR5KGUpJiYoKGI9YVtlXSk/dGhpc1tlXT1iKGMpOlwidGFyZ2V0XCI9PT1lP3RoaXMudGFyZ2V0PWQ6dGhpc1tlXT1jW2VdKTt0aGlzLmlzRGVmYXVsdFByZXZlbnRlZD0obnVsbCE9Yy5kZWZhdWx0UHJldmVudGVkP2MuZGVmYXVsdFByZXZlbnRlZDohMT09PWMucmV0dXJuVmFsdWUpP2JlOmNlO3RoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9Y2U7cmV0dXJuIHRoaXN9XG5uKEcucHJvdG90eXBlLHtwcmV2ZW50RGVmYXVsdDpmdW5jdGlvbigpe3RoaXMuZGVmYXVsdFByZXZlbnRlZD0hMDt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnByZXZlbnREZWZhdWx0P2EucHJldmVudERlZmF1bHQoKTpcInVua25vd25cIiE9PXR5cGVvZiBhLnJldHVyblZhbHVlJiYoYS5yZXR1cm5WYWx1ZT0hMSksdGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQ9YmUpfSxzdG9wUHJvcGFnYXRpb246ZnVuY3Rpb24oKXt2YXIgYT10aGlzLm5hdGl2ZUV2ZW50O2EmJihhLnN0b3BQcm9wYWdhdGlvbj9hLnN0b3BQcm9wYWdhdGlvbigpOlwidW5rbm93blwiIT09dHlwZW9mIGEuY2FuY2VsQnViYmxlJiYoYS5jYW5jZWxCdWJibGU9ITApLHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQ9YmUpfSxwZXJzaXN0OmZ1bmN0aW9uKCl7dGhpcy5pc1BlcnNpc3RlbnQ9YmV9LGlzUGVyc2lzdGVudDpjZSxkZXN0cnVjdG9yOmZ1bmN0aW9uKCl7dmFyIGE9dGhpcy5jb25zdHJ1Y3Rvci5JbnRlcmZhY2UsXG5iO2ZvcihiIGluIGEpdGhpc1tiXT1udWxsO3RoaXMubmF0aXZlRXZlbnQ9dGhpcy5fdGFyZ2V0SW5zdD10aGlzLmRpc3BhdGNoQ29uZmlnPW51bGw7dGhpcy5pc1Byb3BhZ2F0aW9uU3RvcHBlZD10aGlzLmlzRGVmYXVsdFByZXZlbnRlZD1jZTt0aGlzLl9kaXNwYXRjaEluc3RhbmNlcz10aGlzLl9kaXNwYXRjaExpc3RlbmVycz1udWxsfX0pO0cuSW50ZXJmYWNlPXt0eXBlOm51bGwsdGFyZ2V0Om51bGwsY3VycmVudFRhcmdldDpmdW5jdGlvbigpe3JldHVybiBudWxsfSxldmVudFBoYXNlOm51bGwsYnViYmxlczpudWxsLGNhbmNlbGFibGU6bnVsbCx0aW1lU3RhbXA6ZnVuY3Rpb24oYSl7cmV0dXJuIGEudGltZVN0YW1wfHxEYXRlLm5vdygpfSxkZWZhdWx0UHJldmVudGVkOm51bGwsaXNUcnVzdGVkOm51bGx9O1xuRy5leHRlbmQ9ZnVuY3Rpb24oYSl7ZnVuY3Rpb24gYigpe31mdW5jdGlvbiBjKCl7cmV0dXJuIGQuYXBwbHkodGhpcyxhcmd1bWVudHMpfXZhciBkPXRoaXM7Yi5wcm90b3R5cGU9ZC5wcm90b3R5cGU7dmFyIGU9bmV3IGI7bihlLGMucHJvdG90eXBlKTtjLnByb3RvdHlwZT1lO2MucHJvdG90eXBlLmNvbnN0cnVjdG9yPWM7Yy5JbnRlcmZhY2U9bih7fSxkLkludGVyZmFjZSxhKTtjLmV4dGVuZD1kLmV4dGVuZDtkZShjKTtyZXR1cm4gY307ZGUoRyk7ZnVuY3Rpb24gZWUoYSxiLGMsZCl7aWYodGhpcy5ldmVudFBvb2wubGVuZ3RoKXt2YXIgZT10aGlzLmV2ZW50UG9vbC5wb3AoKTt0aGlzLmNhbGwoZSxhLGIsYyxkKTtyZXR1cm4gZX1yZXR1cm4gbmV3IHRoaXMoYSxiLGMsZCl9XG5mdW5jdGlvbiBmZShhKXtpZighKGEgaW5zdGFuY2VvZiB0aGlzKSl0aHJvdyBFcnJvcih1KDI3OSkpO2EuZGVzdHJ1Y3RvcigpOzEwPnRoaXMuZXZlbnRQb29sLmxlbmd0aCYmdGhpcy5ldmVudFBvb2wucHVzaChhKX1mdW5jdGlvbiBkZShhKXthLmV2ZW50UG9vbD1bXTthLmdldFBvb2xlZD1lZTthLnJlbGVhc2U9ZmV9dmFyIGdlPUcuZXh0ZW5kKHtkYXRhOm51bGx9KSxoZT1HLmV4dGVuZCh7ZGF0YTpudWxsfSksaWU9WzksMTMsMjcsMzJdLGplPXlhJiZcIkNvbXBvc2l0aW9uRXZlbnRcImluIHdpbmRvdyxrZT1udWxsO3lhJiZcImRvY3VtZW50TW9kZVwiaW4gZG9jdW1lbnQmJihrZT1kb2N1bWVudC5kb2N1bWVudE1vZGUpO1xudmFyIGxlPXlhJiZcIlRleHRFdmVudFwiaW4gd2luZG93JiYha2UsbWU9eWEmJighamV8fGtlJiY4PGtlJiYxMT49a2UpLG5lPVN0cmluZy5mcm9tQ2hhckNvZGUoMzIpLG9lPXtiZWZvcmVJbnB1dDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkJlZm9yZUlucHV0XCIsY2FwdHVyZWQ6XCJvbkJlZm9yZUlucHV0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6W1wiY29tcG9zaXRpb25lbmRcIixcImtleXByZXNzXCIsXCJ0ZXh0SW5wdXRcIixcInBhc3RlXCJdfSxjb21wb3NpdGlvbkVuZDp7cGhhc2VkUmVnaXN0cmF0aW9uTmFtZXM6e2J1YmJsZWQ6XCJvbkNvbXBvc2l0aW9uRW5kXCIsY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uRW5kQ2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbXBvc2l0aW9uZW5kIGtleWRvd24ga2V5cHJlc3Mga2V5dXAgbW91c2Vkb3duXCIuc3BsaXQoXCIgXCIpfSxjb21wb3NpdGlvblN0YXJ0OntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ29tcG9zaXRpb25TdGFydFwiLFxuY2FwdHVyZWQ6XCJvbkNvbXBvc2l0aW9uU3RhcnRDYXB0dXJlXCJ9LGRlcGVuZGVuY2llczpcImJsdXIgY29tcG9zaXRpb25zdGFydCBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX0sY29tcG9zaXRpb25VcGRhdGU6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25Db21wb3NpdGlvblVwZGF0ZVwiLGNhcHR1cmVkOlwib25Db21wb3NpdGlvblVwZGF0ZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjb21wb3NpdGlvbnVwZGF0ZSBrZXlkb3duIGtleXByZXNzIGtleXVwIG1vdXNlZG93blwiLnNwbGl0KFwiIFwiKX19LHBlPSExO1xuZnVuY3Rpb24gcWUoYSxiKXtzd2l0Y2goYSl7Y2FzZSBcImtleXVwXCI6cmV0dXJuLTEhPT1pZS5pbmRleE9mKGIua2V5Q29kZSk7Y2FzZSBcImtleWRvd25cIjpyZXR1cm4gMjI5IT09Yi5rZXlDb2RlO2Nhc2UgXCJrZXlwcmVzc1wiOmNhc2UgXCJtb3VzZWRvd25cIjpjYXNlIFwiYmx1clwiOnJldHVybiEwO2RlZmF1bHQ6cmV0dXJuITF9fWZ1bmN0aW9uIHJlKGEpe2E9YS5kZXRhaWw7cmV0dXJuXCJvYmplY3RcIj09PXR5cGVvZiBhJiZcImRhdGFcImluIGE/YS5kYXRhOm51bGx9dmFyIHNlPSExO2Z1bmN0aW9uIHRlKGEsYil7c3dpdGNoKGEpe2Nhc2UgXCJjb21wb3NpdGlvbmVuZFwiOnJldHVybiByZShiKTtjYXNlIFwia2V5cHJlc3NcIjppZigzMiE9PWIud2hpY2gpcmV0dXJuIG51bGw7cGU9ITA7cmV0dXJuIG5lO2Nhc2UgXCJ0ZXh0SW5wdXRcIjpyZXR1cm4gYT1iLmRhdGEsYT09PW5lJiZwZT9udWxsOmE7ZGVmYXVsdDpyZXR1cm4gbnVsbH19XG5mdW5jdGlvbiB1ZShhLGIpe2lmKHNlKXJldHVyblwiY29tcG9zaXRpb25lbmRcIj09PWF8fCFqZSYmcWUoYSxiKT8oYT1hZSgpLCRkPVpkPVlkPW51bGwsc2U9ITEsYSk6bnVsbDtzd2l0Y2goYSl7Y2FzZSBcInBhc3RlXCI6cmV0dXJuIG51bGw7Y2FzZSBcImtleXByZXNzXCI6aWYoIShiLmN0cmxLZXl8fGIuYWx0S2V5fHxiLm1ldGFLZXkpfHxiLmN0cmxLZXkmJmIuYWx0S2V5KXtpZihiLmNoYXImJjE8Yi5jaGFyLmxlbmd0aClyZXR1cm4gYi5jaGFyO2lmKGIud2hpY2gpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoYi53aGljaCl9cmV0dXJuIG51bGw7Y2FzZSBcImNvbXBvc2l0aW9uZW5kXCI6cmV0dXJuIG1lJiZcImtvXCIhPT1iLmxvY2FsZT9udWxsOmIuZGF0YTtkZWZhdWx0OnJldHVybiBudWxsfX1cbnZhciB2ZT17ZXZlbnRUeXBlczpvZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlO2lmKGplKWI6e3N3aXRjaChhKXtjYXNlIFwiY29tcG9zaXRpb25zdGFydFwiOnZhciBmPW9lLmNvbXBvc2l0aW9uU3RhcnQ7YnJlYWsgYjtjYXNlIFwiY29tcG9zaXRpb25lbmRcIjpmPW9lLmNvbXBvc2l0aW9uRW5kO2JyZWFrIGI7Y2FzZSBcImNvbXBvc2l0aW9udXBkYXRlXCI6Zj1vZS5jb21wb3NpdGlvblVwZGF0ZTticmVhayBifWY9dm9pZCAwfWVsc2Ugc2U/cWUoYSxjKSYmKGY9b2UuY29tcG9zaXRpb25FbmQpOlwia2V5ZG93blwiPT09YSYmMjI5PT09Yy5rZXlDb2RlJiYoZj1vZS5jb21wb3NpdGlvblN0YXJ0KTtmPyhtZSYmXCJrb1wiIT09Yy5sb2NhbGUmJihzZXx8ZiE9PW9lLmNvbXBvc2l0aW9uU3RhcnQ/Zj09PW9lLmNvbXBvc2l0aW9uRW5kJiZzZSYmKGU9YWUoKSk6KFlkPWQsWmQ9XCJ2YWx1ZVwiaW4gWWQ/WWQudmFsdWU6WWQudGV4dENvbnRlbnQsc2U9ITApKSxmPWdlLmdldFBvb2xlZChmLFxuYixjLGQpLGU/Zi5kYXRhPWU6KGU9cmUoYyksbnVsbCE9PWUmJihmLmRhdGE9ZSkpLFhkKGYpLGU9Zik6ZT1udWxsOyhhPWxlP3RlKGEsYyk6dWUoYSxjKSk/KGI9aGUuZ2V0UG9vbGVkKG9lLmJlZm9yZUlucHV0LGIsYyxkKSxiLmRhdGE9YSxYZChiKSk6Yj1udWxsO3JldHVybiBudWxsPT09ZT9iOm51bGw9PT1iP2U6W2UsYl19fSx3ZT17Y29sb3I6ITAsZGF0ZTohMCxkYXRldGltZTohMCxcImRhdGV0aW1lLWxvY2FsXCI6ITAsZW1haWw6ITAsbW9udGg6ITAsbnVtYmVyOiEwLHBhc3N3b3JkOiEwLHJhbmdlOiEwLHNlYXJjaDohMCx0ZWw6ITAsdGV4dDohMCx0aW1lOiEwLHVybDohMCx3ZWVrOiEwfTtmdW5jdGlvbiB4ZShhKXt2YXIgYj1hJiZhLm5vZGVOYW1lJiZhLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7cmV0dXJuXCJpbnB1dFwiPT09Yj8hIXdlW2EudHlwZV06XCJ0ZXh0YXJlYVwiPT09Yj8hMDohMX1cbnZhciB5ZT17Y2hhbmdlOntwaGFzZWRSZWdpc3RyYXRpb25OYW1lczp7YnViYmxlZDpcIm9uQ2hhbmdlXCIsY2FwdHVyZWQ6XCJvbkNoYW5nZUNhcHR1cmVcIn0sZGVwZW5kZW5jaWVzOlwiYmx1ciBjaGFuZ2UgY2xpY2sgZm9jdXMgaW5wdXQga2V5ZG93biBrZXl1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fTtmdW5jdGlvbiB6ZShhLGIsYyl7YT1HLmdldFBvb2xlZCh5ZS5jaGFuZ2UsYSxiLGMpO2EudHlwZT1cImNoYW5nZVwiO0RhKGMpO1hkKGEpO3JldHVybiBhfXZhciBBZT1udWxsLEJlPW51bGw7ZnVuY3Rpb24gQ2UoYSl7bWMoYSl9ZnVuY3Rpb24gRGUoYSl7dmFyIGI9UGQoYSk7aWYoeWIoYikpcmV0dXJuIGF9ZnVuY3Rpb24gRWUoYSxiKXtpZihcImNoYW5nZVwiPT09YSlyZXR1cm4gYn12YXIgRmU9ITE7eWEmJihGZT1vYyhcImlucHV0XCIpJiYoIWRvY3VtZW50LmRvY3VtZW50TW9kZXx8OTxkb2N1bWVudC5kb2N1bWVudE1vZGUpKTtcbmZ1bmN0aW9uIEdlKCl7QWUmJihBZS5kZXRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSksQmU9QWU9bnVsbCl9ZnVuY3Rpb24gSGUoYSl7aWYoXCJ2YWx1ZVwiPT09YS5wcm9wZXJ0eU5hbWUmJkRlKEJlKSlpZihhPXplKEJlLGEsbmMoYSkpLEphKW1jKGEpO2Vsc2V7SmE9ITA7dHJ5e0ZhKENlLGEpfWZpbmFsbHl7SmE9ITEsTGEoKX19fWZ1bmN0aW9uIEllKGEsYixjKXtcImZvY3VzXCI9PT1hPyhHZSgpLEFlPWIsQmU9YyxBZS5hdHRhY2hFdmVudChcIm9ucHJvcGVydHljaGFuZ2VcIixIZSkpOlwiYmx1clwiPT09YSYmR2UoKX1mdW5jdGlvbiBKZShhKXtpZihcInNlbGVjdGlvbmNoYW5nZVwiPT09YXx8XCJrZXl1cFwiPT09YXx8XCJrZXlkb3duXCI9PT1hKXJldHVybiBEZShCZSl9ZnVuY3Rpb24gS2UoYSxiKXtpZihcImNsaWNrXCI9PT1hKXJldHVybiBEZShiKX1mdW5jdGlvbiBMZShhLGIpe2lmKFwiaW5wdXRcIj09PWF8fFwiY2hhbmdlXCI9PT1hKXJldHVybiBEZShiKX1cbnZhciBNZT17ZXZlbnRUeXBlczp5ZSxfaXNJbnB1dEV2ZW50U3VwcG9ydGVkOkZlLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9Yj9QZChiKTp3aW5kb3csZj1lLm5vZGVOYW1lJiZlLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7aWYoXCJzZWxlY3RcIj09PWZ8fFwiaW5wdXRcIj09PWYmJlwiZmlsZVwiPT09ZS50eXBlKXZhciBnPUVlO2Vsc2UgaWYoeGUoZSkpaWYoRmUpZz1MZTtlbHNle2c9SmU7dmFyIGg9SWV9ZWxzZShmPWUubm9kZU5hbWUpJiZcImlucHV0XCI9PT1mLnRvTG93ZXJDYXNlKCkmJihcImNoZWNrYm94XCI9PT1lLnR5cGV8fFwicmFkaW9cIj09PWUudHlwZSkmJihnPUtlKTtpZihnJiYoZz1nKGEsYikpKXJldHVybiB6ZShnLGMsZCk7aCYmaChhLGUsYik7XCJibHVyXCI9PT1hJiYoYT1lLl93cmFwcGVyU3RhdGUpJiZhLmNvbnRyb2xsZWQmJlwibnVtYmVyXCI9PT1lLnR5cGUmJkRiKGUsXCJudW1iZXJcIixlLnZhbHVlKX19LE5lPUcuZXh0ZW5kKHt2aWV3Om51bGwsZGV0YWlsOm51bGx9KSxcbk9lPXtBbHQ6XCJhbHRLZXlcIixDb250cm9sOlwiY3RybEtleVwiLE1ldGE6XCJtZXRhS2V5XCIsU2hpZnQ6XCJzaGlmdEtleVwifTtmdW5jdGlvbiBQZShhKXt2YXIgYj10aGlzLm5hdGl2ZUV2ZW50O3JldHVybiBiLmdldE1vZGlmaWVyU3RhdGU/Yi5nZXRNb2RpZmllclN0YXRlKGEpOihhPU9lW2FdKT8hIWJbYV06ITF9ZnVuY3Rpb24gUWUoKXtyZXR1cm4gUGV9XG52YXIgUmU9MCxTZT0wLFRlPSExLFVlPSExLFZlPU5lLmV4dGVuZCh7c2NyZWVuWDpudWxsLHNjcmVlblk6bnVsbCxjbGllbnRYOm51bGwsY2xpZW50WTpudWxsLHBhZ2VYOm51bGwscGFnZVk6bnVsbCxjdHJsS2V5Om51bGwsc2hpZnRLZXk6bnVsbCxhbHRLZXk6bnVsbCxtZXRhS2V5Om51bGwsZ2V0TW9kaWZpZXJTdGF0ZTpRZSxidXR0b246bnVsbCxidXR0b25zOm51bGwscmVsYXRlZFRhcmdldDpmdW5jdGlvbihhKXtyZXR1cm4gYS5yZWxhdGVkVGFyZ2V0fHwoYS5mcm9tRWxlbWVudD09PWEuc3JjRWxlbWVudD9hLnRvRWxlbWVudDphLmZyb21FbGVtZW50KX0sbW92ZW1lbnRYOmZ1bmN0aW9uKGEpe2lmKFwibW92ZW1lbnRYXCJpbiBhKXJldHVybiBhLm1vdmVtZW50WDt2YXIgYj1SZTtSZT1hLnNjcmVlblg7cmV0dXJuIFRlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5YLWI6MDooVGU9ITAsMCl9LG1vdmVtZW50WTpmdW5jdGlvbihhKXtpZihcIm1vdmVtZW50WVwiaW4gYSlyZXR1cm4gYS5tb3ZlbWVudFk7XG52YXIgYj1TZTtTZT1hLnNjcmVlblk7cmV0dXJuIFVlP1wibW91c2Vtb3ZlXCI9PT1hLnR5cGU/YS5zY3JlZW5ZLWI6MDooVWU9ITAsMCl9fSksV2U9VmUuZXh0ZW5kKHtwb2ludGVySWQ6bnVsbCx3aWR0aDpudWxsLGhlaWdodDpudWxsLHByZXNzdXJlOm51bGwsdGFuZ2VudGlhbFByZXNzdXJlOm51bGwsdGlsdFg6bnVsbCx0aWx0WTpudWxsLHR3aXN0Om51bGwscG9pbnRlclR5cGU6bnVsbCxpc1ByaW1hcnk6bnVsbH0pLFhlPXttb3VzZUVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Nb3VzZUVudGVyXCIsZGVwZW5kZW5jaWVzOltcIm1vdXNlb3V0XCIsXCJtb3VzZW92ZXJcIl19LG1vdXNlTGVhdmU6e3JlZ2lzdHJhdGlvbk5hbWU6XCJvbk1vdXNlTGVhdmVcIixkZXBlbmRlbmNpZXM6W1wibW91c2VvdXRcIixcIm1vdXNlb3ZlclwiXX0scG9pbnRlckVudGVyOntyZWdpc3RyYXRpb25OYW1lOlwib25Qb2ludGVyRW50ZXJcIixkZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19LHBvaW50ZXJMZWF2ZTp7cmVnaXN0cmF0aW9uTmFtZTpcIm9uUG9pbnRlckxlYXZlXCIsXG5kZXBlbmRlbmNpZXM6W1wicG9pbnRlcm91dFwiLFwicG9pbnRlcm92ZXJcIl19fSxZZT17ZXZlbnRUeXBlczpYZSxleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9XCJtb3VzZW92ZXJcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEsZz1cIm1vdXNlb3V0XCI9PT1hfHxcInBvaW50ZXJvdXRcIj09PWE7aWYoZiYmMD09PShlJjMyKSYmKGMucmVsYXRlZFRhcmdldHx8Yy5mcm9tRWxlbWVudCl8fCFnJiYhZilyZXR1cm4gbnVsbDtmPWQud2luZG93PT09ZD9kOihmPWQub3duZXJEb2N1bWVudCk/Zi5kZWZhdWx0Vmlld3x8Zi5wYXJlbnRXaW5kb3c6d2luZG93O2lmKGcpe2lmKGc9YixiPShiPWMucmVsYXRlZFRhcmdldHx8Yy50b0VsZW1lbnQpP3RjKGIpOm51bGwsbnVsbCE9PWIpe3ZhciBoPWRjKGIpO2lmKGIhPT1ofHw1IT09Yi50YWcmJjYhPT1iLnRhZyliPW51bGx9fWVsc2UgZz1udWxsO2lmKGc9PT1iKXJldHVybiBudWxsO2lmKFwibW91c2VvdXRcIj09PWF8fFwibW91c2VvdmVyXCI9PT1cbmEpe3ZhciBrPVZlO3ZhciBsPVhlLm1vdXNlTGVhdmU7dmFyIG09WGUubW91c2VFbnRlcjt2YXIgcD1cIm1vdXNlXCJ9ZWxzZSBpZihcInBvaW50ZXJvdXRcIj09PWF8fFwicG9pbnRlcm92ZXJcIj09PWEpaz1XZSxsPVhlLnBvaW50ZXJMZWF2ZSxtPVhlLnBvaW50ZXJFbnRlcixwPVwicG9pbnRlclwiO2E9bnVsbD09Zz9mOlBkKGcpO2Y9bnVsbD09Yj9mOlBkKGIpO2w9ay5nZXRQb29sZWQobCxnLGMsZCk7bC50eXBlPXArXCJsZWF2ZVwiO2wudGFyZ2V0PWE7bC5yZWxhdGVkVGFyZ2V0PWY7Yz1rLmdldFBvb2xlZChtLGIsYyxkKTtjLnR5cGU9cCtcImVudGVyXCI7Yy50YXJnZXQ9ZjtjLnJlbGF0ZWRUYXJnZXQ9YTtkPWc7cD1iO2lmKGQmJnApYTp7az1kO209cDtnPTA7Zm9yKGE9azthO2E9UmQoYSkpZysrO2E9MDtmb3IoYj1tO2I7Yj1SZChiKSlhKys7Zm9yKDswPGctYTspaz1SZChrKSxnLS07Zm9yKDswPGEtZzspbT1SZChtKSxhLS07Zm9yKDtnLS07KXtpZihrPT09bXx8az09PW0uYWx0ZXJuYXRlKWJyZWFrIGE7XG5rPVJkKGspO209UmQobSl9az1udWxsfWVsc2Ugaz1udWxsO209aztmb3Ioaz1bXTtkJiZkIT09bTspe2c9ZC5hbHRlcm5hdGU7aWYobnVsbCE9PWcmJmc9PT1tKWJyZWFrO2sucHVzaChkKTtkPVJkKGQpfWZvcihkPVtdO3AmJnAhPT1tOyl7Zz1wLmFsdGVybmF0ZTtpZihudWxsIT09ZyYmZz09PW0pYnJlYWs7ZC5wdXNoKHApO3A9UmQocCl9Zm9yKHA9MDtwPGsubGVuZ3RoO3ArKylWZChrW3BdLFwiYnViYmxlZFwiLGwpO2ZvcihwPWQubGVuZ3RoOzA8cC0tOylWZChkW3BdLFwiY2FwdHVyZWRcIixjKTtyZXR1cm4gMD09PShlJjY0KT9bbF06W2wsY119fTtmdW5jdGlvbiBaZShhLGIpe3JldHVybiBhPT09YiYmKDAhPT1hfHwxL2E9PT0xL2IpfHxhIT09YSYmYiE9PWJ9dmFyICRlPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBPYmplY3QuaXM/T2JqZWN0LmlzOlplLGFmPU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHk7XG5mdW5jdGlvbiBiZihhLGIpe2lmKCRlKGEsYikpcmV0dXJuITA7aWYoXCJvYmplY3RcIiE9PXR5cGVvZiBhfHxudWxsPT09YXx8XCJvYmplY3RcIiE9PXR5cGVvZiBifHxudWxsPT09YilyZXR1cm4hMTt2YXIgYz1PYmplY3Qua2V5cyhhKSxkPU9iamVjdC5rZXlzKGIpO2lmKGMubGVuZ3RoIT09ZC5sZW5ndGgpcmV0dXJuITE7Zm9yKGQ9MDtkPGMubGVuZ3RoO2QrKylpZighYWYuY2FsbChiLGNbZF0pfHwhJGUoYVtjW2RdXSxiW2NbZF1dKSlyZXR1cm4hMTtyZXR1cm4hMH1cbnZhciBjZj15YSYmXCJkb2N1bWVudE1vZGVcImluIGRvY3VtZW50JiYxMT49ZG9jdW1lbnQuZG9jdW1lbnRNb2RlLGRmPXtzZWxlY3Q6e3BoYXNlZFJlZ2lzdHJhdGlvbk5hbWVzOntidWJibGVkOlwib25TZWxlY3RcIixjYXB0dXJlZDpcIm9uU2VsZWN0Q2FwdHVyZVwifSxkZXBlbmRlbmNpZXM6XCJibHVyIGNvbnRleHRtZW51IGRyYWdlbmQgZm9jdXMga2V5ZG93biBrZXl1cCBtb3VzZWRvd24gbW91c2V1cCBzZWxlY3Rpb25jaGFuZ2VcIi5zcGxpdChcIiBcIil9fSxlZj1udWxsLGZmPW51bGwsZ2Y9bnVsbCxoZj0hMTtcbmZ1bmN0aW9uIGpmKGEsYil7dmFyIGM9Yi53aW5kb3c9PT1iP2IuZG9jdW1lbnQ6OT09PWIubm9kZVR5cGU/YjpiLm93bmVyRG9jdW1lbnQ7aWYoaGZ8fG51bGw9PWVmfHxlZiE9PXRkKGMpKXJldHVybiBudWxsO2M9ZWY7XCJzZWxlY3Rpb25TdGFydFwiaW4gYyYmeWQoYyk/Yz17c3RhcnQ6Yy5zZWxlY3Rpb25TdGFydCxlbmQ6Yy5zZWxlY3Rpb25FbmR9OihjPShjLm93bmVyRG9jdW1lbnQmJmMub3duZXJEb2N1bWVudC5kZWZhdWx0Vmlld3x8d2luZG93KS5nZXRTZWxlY3Rpb24oKSxjPXthbmNob3JOb2RlOmMuYW5jaG9yTm9kZSxhbmNob3JPZmZzZXQ6Yy5hbmNob3JPZmZzZXQsZm9jdXNOb2RlOmMuZm9jdXNOb2RlLGZvY3VzT2Zmc2V0OmMuZm9jdXNPZmZzZXR9KTtyZXR1cm4gZ2YmJmJmKGdmLGMpP251bGw6KGdmPWMsYT1HLmdldFBvb2xlZChkZi5zZWxlY3QsZmYsYSxiKSxhLnR5cGU9XCJzZWxlY3RcIixhLnRhcmdldD1lZixYZChhKSxhKX1cbnZhciBrZj17ZXZlbnRUeXBlczpkZixleHRyYWN0RXZlbnRzOmZ1bmN0aW9uKGEsYixjLGQsZSxmKXtlPWZ8fChkLndpbmRvdz09PWQ/ZC5kb2N1bWVudDo5PT09ZC5ub2RlVHlwZT9kOmQub3duZXJEb2N1bWVudCk7aWYoIShmPSFlKSl7YTp7ZT1jYyhlKTtmPXdhLm9uU2VsZWN0O2Zvcih2YXIgZz0wO2c8Zi5sZW5ndGg7ZysrKWlmKCFlLmhhcyhmW2ddKSl7ZT0hMTticmVhayBhfWU9ITB9Zj0hZX1pZihmKXJldHVybiBudWxsO2U9Yj9QZChiKTp3aW5kb3c7c3dpdGNoKGEpe2Nhc2UgXCJmb2N1c1wiOmlmKHhlKGUpfHxcInRydWVcIj09PWUuY29udGVudEVkaXRhYmxlKWVmPWUsZmY9YixnZj1udWxsO2JyZWFrO2Nhc2UgXCJibHVyXCI6Z2Y9ZmY9ZWY9bnVsbDticmVhaztjYXNlIFwibW91c2Vkb3duXCI6aGY9ITA7YnJlYWs7Y2FzZSBcImNvbnRleHRtZW51XCI6Y2FzZSBcIm1vdXNldXBcIjpjYXNlIFwiZHJhZ2VuZFwiOnJldHVybiBoZj0hMSxqZihjLGQpO2Nhc2UgXCJzZWxlY3Rpb25jaGFuZ2VcIjppZihjZilicmVhaztcbmNhc2UgXCJrZXlkb3duXCI6Y2FzZSBcImtleXVwXCI6cmV0dXJuIGpmKGMsZCl9cmV0dXJuIG51bGx9fSxsZj1HLmV4dGVuZCh7YW5pbWF0aW9uTmFtZTpudWxsLGVsYXBzZWRUaW1lOm51bGwscHNldWRvRWxlbWVudDpudWxsfSksbWY9Ry5leHRlbmQoe2NsaXBib2FyZERhdGE6ZnVuY3Rpb24oYSl7cmV0dXJuXCJjbGlwYm9hcmREYXRhXCJpbiBhP2EuY2xpcGJvYXJkRGF0YTp3aW5kb3cuY2xpcGJvYXJkRGF0YX19KSxuZj1OZS5leHRlbmQoe3JlbGF0ZWRUYXJnZXQ6bnVsbH0pO2Z1bmN0aW9uIG9mKGEpe3ZhciBiPWEua2V5Q29kZTtcImNoYXJDb2RlXCJpbiBhPyhhPWEuY2hhckNvZGUsMD09PWEmJjEzPT09YiYmKGE9MTMpKTphPWI7MTA9PT1hJiYoYT0xMyk7cmV0dXJuIDMyPD1hfHwxMz09PWE/YTowfVxudmFyIHBmPXtFc2M6XCJFc2NhcGVcIixTcGFjZWJhcjpcIiBcIixMZWZ0OlwiQXJyb3dMZWZ0XCIsVXA6XCJBcnJvd1VwXCIsUmlnaHQ6XCJBcnJvd1JpZ2h0XCIsRG93bjpcIkFycm93RG93blwiLERlbDpcIkRlbGV0ZVwiLFdpbjpcIk9TXCIsTWVudTpcIkNvbnRleHRNZW51XCIsQXBwczpcIkNvbnRleHRNZW51XCIsU2Nyb2xsOlwiU2Nyb2xsTG9ja1wiLE1velByaW50YWJsZUtleTpcIlVuaWRlbnRpZmllZFwifSxxZj17ODpcIkJhY2tzcGFjZVwiLDk6XCJUYWJcIiwxMjpcIkNsZWFyXCIsMTM6XCJFbnRlclwiLDE2OlwiU2hpZnRcIiwxNzpcIkNvbnRyb2xcIiwxODpcIkFsdFwiLDE5OlwiUGF1c2VcIiwyMDpcIkNhcHNMb2NrXCIsMjc6XCJFc2NhcGVcIiwzMjpcIiBcIiwzMzpcIlBhZ2VVcFwiLDM0OlwiUGFnZURvd25cIiwzNTpcIkVuZFwiLDM2OlwiSG9tZVwiLDM3OlwiQXJyb3dMZWZ0XCIsMzg6XCJBcnJvd1VwXCIsMzk6XCJBcnJvd1JpZ2h0XCIsNDA6XCJBcnJvd0Rvd25cIiw0NTpcIkluc2VydFwiLDQ2OlwiRGVsZXRlXCIsMTEyOlwiRjFcIiwxMTM6XCJGMlwiLDExNDpcIkYzXCIsMTE1OlwiRjRcIixcbjExNjpcIkY1XCIsMTE3OlwiRjZcIiwxMTg6XCJGN1wiLDExOTpcIkY4XCIsMTIwOlwiRjlcIiwxMjE6XCJGMTBcIiwxMjI6XCJGMTFcIiwxMjM6XCJGMTJcIiwxNDQ6XCJOdW1Mb2NrXCIsMTQ1OlwiU2Nyb2xsTG9ja1wiLDIyNDpcIk1ldGFcIn0scmY9TmUuZXh0ZW5kKHtrZXk6ZnVuY3Rpb24oYSl7aWYoYS5rZXkpe3ZhciBiPXBmW2Eua2V5XXx8YS5rZXk7aWYoXCJVbmlkZW50aWZpZWRcIiE9PWIpcmV0dXJuIGJ9cmV0dXJuXCJrZXlwcmVzc1wiPT09YS50eXBlPyhhPW9mKGEpLDEzPT09YT9cIkVudGVyXCI6U3RyaW5nLmZyb21DaGFyQ29kZShhKSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9xZlthLmtleUNvZGVdfHxcIlVuaWRlbnRpZmllZFwiOlwiXCJ9LGxvY2F0aW9uOm51bGwsY3RybEtleTpudWxsLHNoaWZ0S2V5Om51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLHJlcGVhdDpudWxsLGxvY2FsZTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWUsY2hhckNvZGU6ZnVuY3Rpb24oYSl7cmV0dXJuXCJrZXlwcmVzc1wiPT09XG5hLnR5cGU/b2YoYSk6MH0sa2V5Q29kZTpmdW5jdGlvbihhKXtyZXR1cm5cImtleWRvd25cIj09PWEudHlwZXx8XCJrZXl1cFwiPT09YS50eXBlP2Eua2V5Q29kZTowfSx3aGljaDpmdW5jdGlvbihhKXtyZXR1cm5cImtleXByZXNzXCI9PT1hLnR5cGU/b2YoYSk6XCJrZXlkb3duXCI9PT1hLnR5cGV8fFwia2V5dXBcIj09PWEudHlwZT9hLmtleUNvZGU6MH19KSxzZj1WZS5leHRlbmQoe2RhdGFUcmFuc2ZlcjpudWxsfSksdGY9TmUuZXh0ZW5kKHt0b3VjaGVzOm51bGwsdGFyZ2V0VG91Y2hlczpudWxsLGNoYW5nZWRUb3VjaGVzOm51bGwsYWx0S2V5Om51bGwsbWV0YUtleTpudWxsLGN0cmxLZXk6bnVsbCxzaGlmdEtleTpudWxsLGdldE1vZGlmaWVyU3RhdGU6UWV9KSx1Zj1HLmV4dGVuZCh7cHJvcGVydHlOYW1lOm51bGwsZWxhcHNlZFRpbWU6bnVsbCxwc2V1ZG9FbGVtZW50Om51bGx9KSx2Zj1WZS5leHRlbmQoe2RlbHRhWDpmdW5jdGlvbihhKXtyZXR1cm5cImRlbHRhWFwiaW4gYT9hLmRlbHRhWDpcIndoZWVsRGVsdGFYXCJpblxuYT8tYS53aGVlbERlbHRhWDowfSxkZWx0YVk6ZnVuY3Rpb24oYSl7cmV0dXJuXCJkZWx0YVlcImluIGE/YS5kZWx0YVk6XCJ3aGVlbERlbHRhWVwiaW4gYT8tYS53aGVlbERlbHRhWTpcIndoZWVsRGVsdGFcImluIGE/LWEud2hlZWxEZWx0YTowfSxkZWx0YVo6bnVsbCxkZWx0YU1vZGU6bnVsbH0pLHdmPXtldmVudFR5cGVzOldjLGV4dHJhY3RFdmVudHM6ZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9WWMuZ2V0KGEpO2lmKCFlKXJldHVybiBudWxsO3N3aXRjaChhKXtjYXNlIFwia2V5cHJlc3NcIjppZigwPT09b2YoYykpcmV0dXJuIG51bGw7Y2FzZSBcImtleWRvd25cIjpjYXNlIFwia2V5dXBcIjphPXJmO2JyZWFrO2Nhc2UgXCJibHVyXCI6Y2FzZSBcImZvY3VzXCI6YT1uZjticmVhaztjYXNlIFwiY2xpY2tcIjppZigyPT09Yy5idXR0b24pcmV0dXJuIG51bGw7Y2FzZSBcImF1eGNsaWNrXCI6Y2FzZSBcImRibGNsaWNrXCI6Y2FzZSBcIm1vdXNlZG93blwiOmNhc2UgXCJtb3VzZW1vdmVcIjpjYXNlIFwibW91c2V1cFwiOmNhc2UgXCJtb3VzZW91dFwiOmNhc2UgXCJtb3VzZW92ZXJcIjpjYXNlIFwiY29udGV4dG1lbnVcIjphPVxuVmU7YnJlYWs7Y2FzZSBcImRyYWdcIjpjYXNlIFwiZHJhZ2VuZFwiOmNhc2UgXCJkcmFnZW50ZXJcIjpjYXNlIFwiZHJhZ2V4aXRcIjpjYXNlIFwiZHJhZ2xlYXZlXCI6Y2FzZSBcImRyYWdvdmVyXCI6Y2FzZSBcImRyYWdzdGFydFwiOmNhc2UgXCJkcm9wXCI6YT1zZjticmVhaztjYXNlIFwidG91Y2hjYW5jZWxcIjpjYXNlIFwidG91Y2hlbmRcIjpjYXNlIFwidG91Y2htb3ZlXCI6Y2FzZSBcInRvdWNoc3RhcnRcIjphPXRmO2JyZWFrO2Nhc2UgWGI6Y2FzZSBZYjpjYXNlIFpiOmE9bGY7YnJlYWs7Y2FzZSAkYjphPXVmO2JyZWFrO2Nhc2UgXCJzY3JvbGxcIjphPU5lO2JyZWFrO2Nhc2UgXCJ3aGVlbFwiOmE9dmY7YnJlYWs7Y2FzZSBcImNvcHlcIjpjYXNlIFwiY3V0XCI6Y2FzZSBcInBhc3RlXCI6YT1tZjticmVhaztjYXNlIFwiZ290cG9pbnRlcmNhcHR1cmVcIjpjYXNlIFwibG9zdHBvaW50ZXJjYXB0dXJlXCI6Y2FzZSBcInBvaW50ZXJjYW5jZWxcIjpjYXNlIFwicG9pbnRlcmRvd25cIjpjYXNlIFwicG9pbnRlcm1vdmVcIjpjYXNlIFwicG9pbnRlcm91dFwiOmNhc2UgXCJwb2ludGVyb3ZlclwiOmNhc2UgXCJwb2ludGVydXBcIjphPVxuV2U7YnJlYWs7ZGVmYXVsdDphPUd9Yj1hLmdldFBvb2xlZChlLGIsYyxkKTtYZChiKTtyZXR1cm4gYn19O2lmKHBhKXRocm93IEVycm9yKHUoMTAxKSk7cGE9QXJyYXkucHJvdG90eXBlLnNsaWNlLmNhbGwoXCJSZXNwb25kZXJFdmVudFBsdWdpbiBTaW1wbGVFdmVudFBsdWdpbiBFbnRlckxlYXZlRXZlbnRQbHVnaW4gQ2hhbmdlRXZlbnRQbHVnaW4gU2VsZWN0RXZlbnRQbHVnaW4gQmVmb3JlSW5wdXRFdmVudFBsdWdpblwiLnNwbGl0KFwiIFwiKSk7cmEoKTt2YXIgeGY9TmM7bGE9UWQ7bWE9eGY7bmE9UGQ7eGEoe1NpbXBsZUV2ZW50UGx1Z2luOndmLEVudGVyTGVhdmVFdmVudFBsdWdpbjpZZSxDaGFuZ2VFdmVudFBsdWdpbjpNZSxTZWxlY3RFdmVudFBsdWdpbjprZixCZWZvcmVJbnB1dEV2ZW50UGx1Z2luOnZlfSk7dmFyIHlmPVtdLHpmPS0xO2Z1bmN0aW9uIEgoYSl7MD56Znx8KGEuY3VycmVudD15Zlt6Zl0seWZbemZdPW51bGwsemYtLSl9XG5mdW5jdGlvbiBJKGEsYil7emYrKzt5Zlt6Zl09YS5jdXJyZW50O2EuY3VycmVudD1ifXZhciBBZj17fSxKPXtjdXJyZW50OkFmfSxLPXtjdXJyZW50OiExfSxCZj1BZjtmdW5jdGlvbiBDZihhLGIpe3ZhciBjPWEudHlwZS5jb250ZXh0VHlwZXM7aWYoIWMpcmV0dXJuIEFmO3ZhciBkPWEuc3RhdGVOb2RlO2lmKGQmJmQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD09PWIpcmV0dXJuIGQuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ7dmFyIGU9e30sZjtmb3IoZiBpbiBjKWVbZl09YltmXTtkJiYoYT1hLnN0YXRlTm9kZSxhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkVW5tYXNrZWRDaGlsZENvbnRleHQ9YixhLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWFza2VkQ2hpbGRDb250ZXh0PWUpO3JldHVybiBlfWZ1bmN0aW9uIEwoYSl7YT1hLmNoaWxkQ29udGV4dFR5cGVzO3JldHVybiBudWxsIT09YSYmdm9pZCAwIT09YX1cbmZ1bmN0aW9uIERmKCl7SChLKTtIKEopfWZ1bmN0aW9uIEVmKGEsYixjKXtpZihKLmN1cnJlbnQhPT1BZil0aHJvdyBFcnJvcih1KDE2OCkpO0koSixiKTtJKEssYyl9ZnVuY3Rpb24gRmYoYSxiLGMpe3ZhciBkPWEuc3RhdGVOb2RlO2E9Yi5jaGlsZENvbnRleHRUeXBlcztpZihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZC5nZXRDaGlsZENvbnRleHQpcmV0dXJuIGM7ZD1kLmdldENoaWxkQ29udGV4dCgpO2Zvcih2YXIgZSBpbiBkKWlmKCEoZSBpbiBhKSl0aHJvdyBFcnJvcih1KDEwOCxwYihiKXx8XCJVbmtub3duXCIsZSkpO3JldHVybiBuKHt9LGMse30sZCl9ZnVuY3Rpb24gR2YoYSl7YT0oYT1hLnN0YXRlTm9kZSkmJmEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNZXJnZWRDaGlsZENvbnRleHR8fEFmO0JmPUouY3VycmVudDtJKEosYSk7SShLLEsuY3VycmVudCk7cmV0dXJuITB9XG5mdW5jdGlvbiBIZihhLGIsYyl7dmFyIGQ9YS5zdGF0ZU5vZGU7aWYoIWQpdGhyb3cgRXJyb3IodSgxNjkpKTtjPyhhPUZmKGEsYixCZiksZC5fX3JlYWN0SW50ZXJuYWxNZW1vaXplZE1lcmdlZENoaWxkQ29udGV4dD1hLEgoSyksSChKKSxJKEosYSkpOkgoSyk7SShLLGMpfVxudmFyIElmPXIudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5LEpmPXIudW5zdGFibGVfc2NoZWR1bGVDYWxsYmFjayxLZj1yLnVuc3RhYmxlX2NhbmNlbENhbGxiYWNrLExmPXIudW5zdGFibGVfcmVxdWVzdFBhaW50LE1mPXIudW5zdGFibGVfbm93LE5mPXIudW5zdGFibGVfZ2V0Q3VycmVudFByaW9yaXR5TGV2ZWwsT2Y9ci51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eSxQZj1yLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5LFFmPXIudW5zdGFibGVfTm9ybWFsUHJpb3JpdHksUmY9ci51bnN0YWJsZV9Mb3dQcmlvcml0eSxTZj1yLnVuc3RhYmxlX0lkbGVQcmlvcml0eSxUZj17fSxVZj1yLnVuc3RhYmxlX3Nob3VsZFlpZWxkLFZmPXZvaWQgMCE9PUxmP0xmOmZ1bmN0aW9uKCl7fSxXZj1udWxsLFhmPW51bGwsWWY9ITEsWmY9TWYoKSwkZj0xRTQ+WmY/TWY6ZnVuY3Rpb24oKXtyZXR1cm4gTWYoKS1aZn07XG5mdW5jdGlvbiBhZygpe3N3aXRjaChOZigpKXtjYXNlIE9mOnJldHVybiA5OTtjYXNlIFBmOnJldHVybiA5ODtjYXNlIFFmOnJldHVybiA5NztjYXNlIFJmOnJldHVybiA5NjtjYXNlIFNmOnJldHVybiA5NTtkZWZhdWx0OnRocm93IEVycm9yKHUoMzMyKSk7fX1mdW5jdGlvbiBiZyhhKXtzd2l0Y2goYSl7Y2FzZSA5OTpyZXR1cm4gT2Y7Y2FzZSA5ODpyZXR1cm4gUGY7Y2FzZSA5NzpyZXR1cm4gUWY7Y2FzZSA5NjpyZXR1cm4gUmY7Y2FzZSA5NTpyZXR1cm4gU2Y7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMzMikpO319ZnVuY3Rpb24gY2coYSxiKXthPWJnKGEpO3JldHVybiBJZihhLGIpfWZ1bmN0aW9uIGRnKGEsYixjKXthPWJnKGEpO3JldHVybiBKZihhLGIsYyl9ZnVuY3Rpb24gZWcoYSl7bnVsbD09PVdmPyhXZj1bYV0sWGY9SmYoT2YsZmcpKTpXZi5wdXNoKGEpO3JldHVybiBUZn1mdW5jdGlvbiBnZygpe2lmKG51bGwhPT1YZil7dmFyIGE9WGY7WGY9bnVsbDtLZihhKX1mZygpfVxuZnVuY3Rpb24gZmcoKXtpZighWWYmJm51bGwhPT1XZil7WWY9ITA7dmFyIGE9MDt0cnl7dmFyIGI9V2Y7Y2coOTksZnVuY3Rpb24oKXtmb3IoO2E8Yi5sZW5ndGg7YSsrKXt2YXIgYz1iW2FdO2RvIGM9YyghMCk7d2hpbGUobnVsbCE9PWMpfX0pO1dmPW51bGx9Y2F0Y2goYyl7dGhyb3cgbnVsbCE9PVdmJiYoV2Y9V2Yuc2xpY2UoYSsxKSksSmYoT2YsZ2cpLGM7fWZpbmFsbHl7WWY9ITF9fX1mdW5jdGlvbiBoZyhhLGIsYyl7Yy89MTA7cmV0dXJuIDEwNzM3NDE4MjEtKCgoMTA3Mzc0MTgyMS1hK2IvMTApL2N8MCkrMSkqY31mdW5jdGlvbiBpZyhhLGIpe2lmKGEmJmEuZGVmYXVsdFByb3BzKXtiPW4oe30sYik7YT1hLmRlZmF1bHRQcm9wcztmb3IodmFyIGMgaW4gYSl2b2lkIDA9PT1iW2NdJiYoYltjXT1hW2NdKX1yZXR1cm4gYn12YXIgamc9e2N1cnJlbnQ6bnVsbH0sa2c9bnVsbCxsZz1udWxsLG1nPW51bGw7ZnVuY3Rpb24gbmcoKXttZz1sZz1rZz1udWxsfVxuZnVuY3Rpb24gb2coYSl7dmFyIGI9amcuY3VycmVudDtIKGpnKTthLnR5cGUuX2NvbnRleHQuX2N1cnJlbnRWYWx1ZT1ifWZ1bmN0aW9uIHBnKGEsYil7Zm9yKDtudWxsIT09YTspe3ZhciBjPWEuYWx0ZXJuYXRlO2lmKGEuY2hpbGRFeHBpcmF0aW9uVGltZTxiKWEuY2hpbGRFeHBpcmF0aW9uVGltZT1iLG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtlbHNlIGlmKG51bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiljLmNoaWxkRXhwaXJhdGlvblRpbWU9YjtlbHNlIGJyZWFrO2E9YS5yZXR1cm59fWZ1bmN0aW9uIHFnKGEsYil7a2c9YTttZz1sZz1udWxsO2E9YS5kZXBlbmRlbmNpZXM7bnVsbCE9PWEmJm51bGwhPT1hLmZpcnN0Q29udGV4dCYmKGEuZXhwaXJhdGlvblRpbWU+PWImJihyZz0hMCksYS5maXJzdENvbnRleHQ9bnVsbCl9XG5mdW5jdGlvbiBzZyhhLGIpe2lmKG1nIT09YSYmITEhPT1iJiYwIT09Yil7aWYoXCJudW1iZXJcIiE9PXR5cGVvZiBifHwxMDczNzQxODIzPT09YiltZz1hLGI9MTA3Mzc0MTgyMztiPXtjb250ZXh0OmEsb2JzZXJ2ZWRCaXRzOmIsbmV4dDpudWxsfTtpZihudWxsPT09bGcpe2lmKG51bGw9PT1rZyl0aHJvdyBFcnJvcih1KDMwOCkpO2xnPWI7a2cuZGVwZW5kZW5jaWVzPXtleHBpcmF0aW9uVGltZTowLGZpcnN0Q29udGV4dDpiLHJlc3BvbmRlcnM6bnVsbH19ZWxzZSBsZz1sZy5uZXh0PWJ9cmV0dXJuIGEuX2N1cnJlbnRWYWx1ZX12YXIgdGc9ITE7ZnVuY3Rpb24gdWcoYSl7YS51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEubWVtb2l6ZWRTdGF0ZSxiYXNlUXVldWU6bnVsbCxzaGFyZWQ6e3BlbmRpbmc6bnVsbH0sZWZmZWN0czpudWxsfX1cbmZ1bmN0aW9uIHZnKGEsYil7YT1hLnVwZGF0ZVF1ZXVlO2IudXBkYXRlUXVldWU9PT1hJiYoYi51cGRhdGVRdWV1ZT17YmFzZVN0YXRlOmEuYmFzZVN0YXRlLGJhc2VRdWV1ZTphLmJhc2VRdWV1ZSxzaGFyZWQ6YS5zaGFyZWQsZWZmZWN0czphLmVmZmVjdHN9KX1mdW5jdGlvbiB3ZyhhLGIpe2E9e2V4cGlyYXRpb25UaW1lOmEsc3VzcGVuc2VDb25maWc6Yix0YWc6MCxwYXlsb2FkOm51bGwsY2FsbGJhY2s6bnVsbCxuZXh0Om51bGx9O3JldHVybiBhLm5leHQ9YX1mdW5jdGlvbiB4ZyhhLGIpe2E9YS51cGRhdGVRdWV1ZTtpZihudWxsIT09YSl7YT1hLnNoYXJlZDt2YXIgYz1hLnBlbmRpbmc7bnVsbD09PWM/Yi5uZXh0PWI6KGIubmV4dD1jLm5leHQsYy5uZXh0PWIpO2EucGVuZGluZz1ifX1cbmZ1bmN0aW9uIHlnKGEsYil7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJnZnKGMsYSk7YT1hLnVwZGF0ZVF1ZXVlO2M9YS5iYXNlUXVldWU7bnVsbD09PWM/KGEuYmFzZVF1ZXVlPWIubmV4dD1iLGIubmV4dD1iKTooYi5uZXh0PWMubmV4dCxjLm5leHQ9Yil9XG5mdW5jdGlvbiB6ZyhhLGIsYyxkKXt2YXIgZT1hLnVwZGF0ZVF1ZXVlO3RnPSExO3ZhciBmPWUuYmFzZVF1ZXVlLGc9ZS5zaGFyZWQucGVuZGluZztpZihudWxsIT09Zyl7aWYobnVsbCE9PWYpe3ZhciBoPWYubmV4dDtmLm5leHQ9Zy5uZXh0O2cubmV4dD1ofWY9ZztlLnNoYXJlZC5wZW5kaW5nPW51bGw7aD1hLmFsdGVybmF0ZTtudWxsIT09aCYmKGg9aC51cGRhdGVRdWV1ZSxudWxsIT09aCYmKGguYmFzZVF1ZXVlPWcpKX1pZihudWxsIT09Zil7aD1mLm5leHQ7dmFyIGs9ZS5iYXNlU3RhdGUsbD0wLG09bnVsbCxwPW51bGwseD1udWxsO2lmKG51bGwhPT1oKXt2YXIgej1oO2Rve2c9ei5leHBpcmF0aW9uVGltZTtpZihnPGQpe3ZhciBjYT17ZXhwaXJhdGlvblRpbWU6ei5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzp6LnN1c3BlbnNlQ29uZmlnLHRhZzp6LnRhZyxwYXlsb2FkOnoucGF5bG9hZCxjYWxsYmFjazp6LmNhbGxiYWNrLG5leHQ6bnVsbH07bnVsbD09PXg/KHA9eD1cbmNhLG09ayk6eD14Lm5leHQ9Y2E7Zz5sJiYobD1nKX1lbHNle251bGwhPT14JiYoeD14Lm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ei5zdXNwZW5zZUNvbmZpZyx0YWc6ei50YWcscGF5bG9hZDp6LnBheWxvYWQsY2FsbGJhY2s6ei5jYWxsYmFjayxuZXh0Om51bGx9KTtBZyhnLHouc3VzcGVuc2VDb25maWcpO2E6e3ZhciBEPWEsdD16O2c9YjtjYT1jO3N3aXRjaCh0LnRhZyl7Y2FzZSAxOkQ9dC5wYXlsb2FkO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBEKXtrPUQuY2FsbChjYSxrLGcpO2JyZWFrIGF9az1EO2JyZWFrIGE7Y2FzZSAzOkQuZWZmZWN0VGFnPUQuZWZmZWN0VGFnJi00MDk3fDY0O2Nhc2UgMDpEPXQucGF5bG9hZDtnPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBEP0QuY2FsbChjYSxrLGcpOkQ7aWYobnVsbD09PWd8fHZvaWQgMD09PWcpYnJlYWsgYTtrPW4oe30sayxnKTticmVhayBhO2Nhc2UgMjp0Zz0hMH19bnVsbCE9PXouY2FsbGJhY2smJlxuKGEuZWZmZWN0VGFnfD0zMixnPWUuZWZmZWN0cyxudWxsPT09Zz9lLmVmZmVjdHM9W3pdOmcucHVzaCh6KSl9ej16Lm5leHQ7aWYobnVsbD09PXp8fHo9PT1oKWlmKGc9ZS5zaGFyZWQucGVuZGluZyxudWxsPT09ZylicmVhaztlbHNlIHo9Zi5uZXh0PWcubmV4dCxnLm5leHQ9aCxlLmJhc2VRdWV1ZT1mPWcsZS5zaGFyZWQucGVuZGluZz1udWxsfXdoaWxlKDEpfW51bGw9PT14P209azp4Lm5leHQ9cDtlLmJhc2VTdGF0ZT1tO2UuYmFzZVF1ZXVlPXg7QmcobCk7YS5leHBpcmF0aW9uVGltZT1sO2EubWVtb2l6ZWRTdGF0ZT1rfX1cbmZ1bmN0aW9uIENnKGEsYixjKXthPWIuZWZmZWN0cztiLmVmZmVjdHM9bnVsbDtpZihudWxsIT09YSlmb3IoYj0wO2I8YS5sZW5ndGg7YisrKXt2YXIgZD1hW2JdLGU9ZC5jYWxsYmFjaztpZihudWxsIT09ZSl7ZC5jYWxsYmFjaz1udWxsO2Q9ZTtlPWM7aWYoXCJmdW5jdGlvblwiIT09dHlwZW9mIGQpdGhyb3cgRXJyb3IodSgxOTEsZCkpO2QuY2FsbChlKX19fXZhciBEZz1XYS5SZWFjdEN1cnJlbnRCYXRjaENvbmZpZyxFZz0obmV3IGFhLkNvbXBvbmVudCkucmVmcztmdW5jdGlvbiBGZyhhLGIsYyxkKXtiPWEubWVtb2l6ZWRTdGF0ZTtjPWMoZCxiKTtjPW51bGw9PT1jfHx2b2lkIDA9PT1jP2I6bih7fSxiLGMpO2EubWVtb2l6ZWRTdGF0ZT1jOzA9PT1hLmV4cGlyYXRpb25UaW1lJiYoYS51cGRhdGVRdWV1ZS5iYXNlU3RhdGU9Yyl9XG52YXIgSmc9e2lzTW91bnRlZDpmdW5jdGlvbihhKXtyZXR1cm4oYT1hLl9yZWFjdEludGVybmFsRmliZXIpP2RjKGEpPT09YTohMX0sZW5xdWV1ZVNldFN0YXRlOmZ1bmN0aW9uKGEsYixjKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgZD1HZygpLGU9RGcuc3VzcGVuc2U7ZD1IZyhkLGEsZSk7ZT13ZyhkLGUpO2UucGF5bG9hZD1iO3ZvaWQgMCE9PWMmJm51bGwhPT1jJiYoZS5jYWxsYmFjaz1jKTt4ZyhhLGUpO0lnKGEsZCl9LGVucXVldWVSZXBsYWNlU3RhdGU6ZnVuY3Rpb24oYSxiLGMpe2E9YS5fcmVhY3RJbnRlcm5hbEZpYmVyO3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXdnKGQsZSk7ZS50YWc9MTtlLnBheWxvYWQ9Yjt2b2lkIDAhPT1jJiZudWxsIT09YyYmKGUuY2FsbGJhY2s9Yyk7eGcoYSxlKTtJZyhhLGQpfSxlbnF1ZXVlRm9yY2VVcGRhdGU6ZnVuY3Rpb24oYSxiKXthPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjt2YXIgYz1HZygpLGQ9RGcuc3VzcGVuc2U7XG5jPUhnKGMsYSxkKTtkPXdnKGMsZCk7ZC50YWc9Mjt2b2lkIDAhPT1iJiZudWxsIT09YiYmKGQuY2FsbGJhY2s9Yik7eGcoYSxkKTtJZyhhLGMpfX07ZnVuY3Rpb24gS2coYSxiLGMsZCxlLGYsZyl7YT1hLnN0YXRlTm9kZTtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5zaG91bGRDb21wb25lbnRVcGRhdGU/YS5zaG91bGRDb21wb25lbnRVcGRhdGUoZCxmLGcpOmIucHJvdG90eXBlJiZiLnByb3RvdHlwZS5pc1B1cmVSZWFjdENvbXBvbmVudD8hYmYoYyxkKXx8IWJmKGUsZik6ITB9XG5mdW5jdGlvbiBMZyhhLGIsYyl7dmFyIGQ9ITEsZT1BZjt2YXIgZj1iLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY/Zj1zZyhmKTooZT1MKGIpP0JmOkouY3VycmVudCxkPWIuY29udGV4dFR5cGVzLGY9KGQ9bnVsbCE9PWQmJnZvaWQgMCE9PWQpP0NmKGEsZSk6QWYpO2I9bmV3IGIoYyxmKTthLm1lbW9pemVkU3RhdGU9bnVsbCE9PWIuc3RhdGUmJnZvaWQgMCE9PWIuc3RhdGU/Yi5zdGF0ZTpudWxsO2IudXBkYXRlcj1KZzthLnN0YXRlTm9kZT1iO2IuX3JlYWN0SW50ZXJuYWxGaWJlcj1hO2QmJihhPWEuc3RhdGVOb2RlLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRVbm1hc2tlZENoaWxkQ29udGV4dD1lLGEuX19yZWFjdEludGVybmFsTWVtb2l6ZWRNYXNrZWRDaGlsZENvbnRleHQ9Zik7cmV0dXJuIGJ9XG5mdW5jdGlvbiBNZyhhLGIsYyxkKXthPWIuc3RhdGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuY29tcG9uZW50V2lsbFJlY2VpdmVQcm9wcyYmYi5jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzKGMsZCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJmIuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMoYyxkKTtiLnN0YXRlIT09YSYmSmcuZW5xdWV1ZVJlcGxhY2VTdGF0ZShiLGIuc3RhdGUsbnVsbCl9XG5mdW5jdGlvbiBOZyhhLGIsYyxkKXt2YXIgZT1hLnN0YXRlTm9kZTtlLnByb3BzPWM7ZS5zdGF0ZT1hLm1lbW9pemVkU3RhdGU7ZS5yZWZzPUVnO3VnKGEpO3ZhciBmPWIuY29udGV4dFR5cGU7XCJvYmplY3RcIj09PXR5cGVvZiBmJiZudWxsIT09Zj9lLmNvbnRleHQ9c2coZik6KGY9TChiKT9CZjpKLmN1cnJlbnQsZS5jb250ZXh0PUNmKGEsZikpO3pnKGEsYyxlLGQpO2Uuc3RhdGU9YS5tZW1vaXplZFN0YXRlO2Y9Yi5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGYmJihGZyhhLGIsZixjKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGIuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZS5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50fHxcbihiPWUuc3RhdGUsXCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50V2lsbE1vdW50JiZlLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmUuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpLGIhPT1lLnN0YXRlJiZKZy5lbnF1ZXVlUmVwbGFjZVN0YXRlKGUsZS5zdGF0ZSxudWxsKSx6ZyhhLGMsZSxkKSxlLnN0YXRlPWEubWVtb2l6ZWRTdGF0ZSk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGUuY29tcG9uZW50RGlkTW91bnQmJihhLmVmZmVjdFRhZ3w9NCl9dmFyIE9nPUFycmF5LmlzQXJyYXk7XG5mdW5jdGlvbiBQZyhhLGIsYyl7YT1jLnJlZjtpZihudWxsIT09YSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGEmJlwib2JqZWN0XCIhPT10eXBlb2YgYSl7aWYoYy5fb3duZXIpe2M9Yy5fb3duZXI7aWYoYyl7aWYoMSE9PWMudGFnKXRocm93IEVycm9yKHUoMzA5KSk7dmFyIGQ9Yy5zdGF0ZU5vZGV9aWYoIWQpdGhyb3cgRXJyb3IodSgxNDcsYSkpO3ZhciBlPVwiXCIrYTtpZihudWxsIT09YiYmbnVsbCE9PWIucmVmJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgYi5yZWYmJmIucmVmLl9zdHJpbmdSZWY9PT1lKXJldHVybiBiLnJlZjtiPWZ1bmN0aW9uKGEpe3ZhciBiPWQucmVmcztiPT09RWcmJihiPWQucmVmcz17fSk7bnVsbD09PWE/ZGVsZXRlIGJbZV06YltlXT1hfTtiLl9zdHJpbmdSZWY9ZTtyZXR1cm4gYn1pZihcInN0cmluZ1wiIT09dHlwZW9mIGEpdGhyb3cgRXJyb3IodSgyODQpKTtpZighYy5fb3duZXIpdGhyb3cgRXJyb3IodSgyOTAsYSkpO31yZXR1cm4gYX1cbmZ1bmN0aW9uIFFnKGEsYil7aWYoXCJ0ZXh0YXJlYVwiIT09YS50eXBlKXRocm93IEVycm9yKHUoMzEsXCJbb2JqZWN0IE9iamVjdF1cIj09PU9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChiKT9cIm9iamVjdCB3aXRoIGtleXMge1wiK09iamVjdC5rZXlzKGIpLmpvaW4oXCIsIFwiKStcIn1cIjpiLFwiXCIpKTt9XG5mdW5jdGlvbiBSZyhhKXtmdW5jdGlvbiBiKGIsYyl7aWYoYSl7dmFyIGQ9Yi5sYXN0RWZmZWN0O251bGwhPT1kPyhkLm5leHRFZmZlY3Q9YyxiLmxhc3RFZmZlY3Q9Yyk6Yi5maXJzdEVmZmVjdD1iLmxhc3RFZmZlY3Q9YztjLm5leHRFZmZlY3Q9bnVsbDtjLmVmZmVjdFRhZz04fX1mdW5jdGlvbiBjKGMsZCl7aWYoIWEpcmV0dXJuIG51bGw7Zm9yKDtudWxsIT09ZDspYihjLGQpLGQ9ZC5zaWJsaW5nO3JldHVybiBudWxsfWZ1bmN0aW9uIGQoYSxiKXtmb3IoYT1uZXcgTWFwO251bGwhPT1iOyludWxsIT09Yi5rZXk/YS5zZXQoYi5rZXksYik6YS5zZXQoYi5pbmRleCxiKSxiPWIuc2libGluZztyZXR1cm4gYX1mdW5jdGlvbiBlKGEsYil7YT1TZyhhLGIpO2EuaW5kZXg9MDthLnNpYmxpbmc9bnVsbDtyZXR1cm4gYX1mdW5jdGlvbiBmKGIsYyxkKXtiLmluZGV4PWQ7aWYoIWEpcmV0dXJuIGM7ZD1iLmFsdGVybmF0ZTtpZihudWxsIT09ZClyZXR1cm4gZD1kLmluZGV4LGQ8Yz8oYi5lZmZlY3RUYWc9XG4yLGMpOmQ7Yi5lZmZlY3RUYWc9MjtyZXR1cm4gY31mdW5jdGlvbiBnKGIpe2EmJm51bGw9PT1iLmFsdGVybmF0ZSYmKGIuZWZmZWN0VGFnPTIpO3JldHVybiBifWZ1bmN0aW9uIGgoYSxiLGMsZCl7aWYobnVsbD09PWJ8fDYhPT1iLnRhZylyZXR1cm4gYj1UZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBrKGEsYixjLGQpe2lmKG51bGwhPT1iJiZiLmVsZW1lbnRUeXBlPT09Yy50eXBlKXJldHVybiBkPWUoYixjLnByb3BzKSxkLnJlZj1QZyhhLGIsYyksZC5yZXR1cm49YSxkO2Q9VWcoYy50eXBlLGMua2V5LGMucHJvcHMsbnVsbCxhLm1vZGUsZCk7ZC5yZWY9UGcoYSxiLGMpO2QucmV0dXJuPWE7cmV0dXJuIGR9ZnVuY3Rpb24gbChhLGIsYyxkKXtpZihudWxsPT09Ynx8NCE9PWIudGFnfHxiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvIT09Yy5jb250YWluZXJJbmZvfHxiLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbiE9PVxuYy5pbXBsZW1lbnRhdGlvbilyZXR1cm4gYj1WZyhjLGEubW9kZSxkKSxiLnJldHVybj1hLGI7Yj1lKGIsYy5jaGlsZHJlbnx8W10pO2IucmV0dXJuPWE7cmV0dXJuIGJ9ZnVuY3Rpb24gbShhLGIsYyxkLGYpe2lmKG51bGw9PT1ifHw3IT09Yi50YWcpcmV0dXJuIGI9V2coYyxhLm1vZGUsZCxmKSxiLnJldHVybj1hLGI7Yj1lKGIsYyk7Yi5yZXR1cm49YTtyZXR1cm4gYn1mdW5jdGlvbiBwKGEsYixjKXtpZihcInN0cmluZ1wiPT09dHlwZW9mIGJ8fFwibnVtYmVyXCI9PT10eXBlb2YgYilyZXR1cm4gYj1UZyhcIlwiK2IsYS5tb2RlLGMpLGIucmV0dXJuPWEsYjtpZihcIm9iamVjdFwiPT09dHlwZW9mIGImJm51bGwhPT1iKXtzd2l0Y2goYi4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYz1VZyhiLnR5cGUsYi5rZXksYi5wcm9wcyxudWxsLGEubW9kZSxjKSxjLnJlZj1QZyhhLG51bGwsYiksYy5yZXR1cm49YSxjO2Nhc2UgJGE6cmV0dXJuIGI9VmcoYixhLm1vZGUsYyksYi5yZXR1cm49YSxifWlmKE9nKGIpfHxcbm5iKGIpKXJldHVybiBiPVdnKGIsYS5tb2RlLGMsbnVsbCksYi5yZXR1cm49YSxiO1FnKGEsYil9cmV0dXJuIG51bGx9ZnVuY3Rpb24geChhLGIsYyxkKXt2YXIgZT1udWxsIT09Yj9iLmtleTpudWxsO2lmKFwic3RyaW5nXCI9PT10eXBlb2YgY3x8XCJudW1iZXJcIj09PXR5cGVvZiBjKXJldHVybiBudWxsIT09ZT9udWxsOmgoYSxiLFwiXCIrYyxkKTtpZihcIm9iamVjdFwiPT09dHlwZW9mIGMmJm51bGwhPT1jKXtzd2l0Y2goYy4kJHR5cGVvZil7Y2FzZSBaYTpyZXR1cm4gYy5rZXk9PT1lP2MudHlwZT09PWFiP20oYSxiLGMucHJvcHMuY2hpbGRyZW4sZCxlKTprKGEsYixjLGQpOm51bGw7Y2FzZSAkYTpyZXR1cm4gYy5rZXk9PT1lP2woYSxiLGMsZCk6bnVsbH1pZihPZyhjKXx8bmIoYykpcmV0dXJuIG51bGwhPT1lP251bGw6bShhLGIsYyxkLG51bGwpO1FnKGEsYyl9cmV0dXJuIG51bGx9ZnVuY3Rpb24geihhLGIsYyxkLGUpe2lmKFwic3RyaW5nXCI9PT10eXBlb2YgZHx8XCJudW1iZXJcIj09PXR5cGVvZiBkKXJldHVybiBhPVxuYS5nZXQoYyl8fG51bGwsaChiLGEsXCJcIitkLGUpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZCYmbnVsbCE9PWQpe3N3aXRjaChkLiQkdHlwZW9mKXtjYXNlIFphOnJldHVybiBhPWEuZ2V0KG51bGw9PT1kLmtleT9jOmQua2V5KXx8bnVsbCxkLnR5cGU9PT1hYj9tKGIsYSxkLnByb3BzLmNoaWxkcmVuLGUsZC5rZXkpOmsoYixhLGQsZSk7Y2FzZSAkYTpyZXR1cm4gYT1hLmdldChudWxsPT09ZC5rZXk/YzpkLmtleSl8fG51bGwsbChiLGEsZCxlKX1pZihPZyhkKXx8bmIoZCkpcmV0dXJuIGE9YS5nZXQoYyl8fG51bGwsbShiLGEsZCxlLG51bGwpO1FnKGIsZCl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gY2EoZSxnLGgsayl7Zm9yKHZhciBsPW51bGwsdD1udWxsLG09Zyx5PWc9MCxBPW51bGw7bnVsbCE9PW0mJnk8aC5sZW5ndGg7eSsrKXttLmluZGV4Pnk/KEE9bSxtPW51bGwpOkE9bS5zaWJsaW5nO3ZhciBxPXgoZSxtLGhbeV0sayk7aWYobnVsbD09PXEpe251bGw9PT1tJiYobT1BKTticmVha31hJiZcbm0mJm51bGw9PT1xLmFsdGVybmF0ZSYmYihlLG0pO2c9ZihxLGcseSk7bnVsbD09PXQ/bD1xOnQuc2libGluZz1xO3Q9cTttPUF9aWYoeT09PWgubGVuZ3RoKXJldHVybiBjKGUsbSksbDtpZihudWxsPT09bSl7Zm9yKDt5PGgubGVuZ3RoO3krKyltPXAoZSxoW3ldLGspLG51bGwhPT1tJiYoZz1mKG0sZyx5KSxudWxsPT09dD9sPW06dC5zaWJsaW5nPW0sdD1tKTtyZXR1cm4gbH1mb3IobT1kKGUsbSk7eTxoLmxlbmd0aDt5KyspQT16KG0sZSx5LGhbeV0sayksbnVsbCE9PUEmJihhJiZudWxsIT09QS5hbHRlcm5hdGUmJm0uZGVsZXRlKG51bGw9PT1BLmtleT95OkEua2V5KSxnPWYoQSxnLHkpLG51bGw9PT10P2w9QTp0LnNpYmxpbmc9QSx0PUEpO2EmJm0uZm9yRWFjaChmdW5jdGlvbihhKXtyZXR1cm4gYihlLGEpfSk7cmV0dXJuIGx9ZnVuY3Rpb24gRChlLGcsaCxsKXt2YXIgaz1uYihoKTtpZihcImZ1bmN0aW9uXCIhPT10eXBlb2Ygayl0aHJvdyBFcnJvcih1KDE1MCkpO2g9ay5jYWxsKGgpO1xuaWYobnVsbD09aCl0aHJvdyBFcnJvcih1KDE1MSkpO2Zvcih2YXIgbT1rPW51bGwsdD1nLHk9Zz0wLEE9bnVsbCxxPWgubmV4dCgpO251bGwhPT10JiYhcS5kb25lO3krKyxxPWgubmV4dCgpKXt0LmluZGV4Pnk/KEE9dCx0PW51bGwpOkE9dC5zaWJsaW5nO3ZhciBEPXgoZSx0LHEudmFsdWUsbCk7aWYobnVsbD09PUQpe251bGw9PT10JiYodD1BKTticmVha31hJiZ0JiZudWxsPT09RC5hbHRlcm5hdGUmJmIoZSx0KTtnPWYoRCxnLHkpO251bGw9PT1tP2s9RDptLnNpYmxpbmc9RDttPUQ7dD1BfWlmKHEuZG9uZSlyZXR1cm4gYyhlLHQpLGs7aWYobnVsbD09PXQpe2Zvcig7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXAoZSxxLnZhbHVlLGwpLG51bGwhPT1xJiYoZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTtyZXR1cm4ga31mb3IodD1kKGUsdCk7IXEuZG9uZTt5KysscT1oLm5leHQoKSlxPXoodCxlLHkscS52YWx1ZSxsKSxudWxsIT09cSYmKGEmJm51bGwhPT1cbnEuYWx0ZXJuYXRlJiZ0LmRlbGV0ZShudWxsPT09cS5rZXk/eTpxLmtleSksZz1mKHEsZyx5KSxudWxsPT09bT9rPXE6bS5zaWJsaW5nPXEsbT1xKTthJiZ0LmZvckVhY2goZnVuY3Rpb24oYSl7cmV0dXJuIGIoZSxhKX0pO3JldHVybiBrfXJldHVybiBmdW5jdGlvbihhLGQsZixoKXt2YXIgaz1cIm9iamVjdFwiPT09dHlwZW9mIGYmJm51bGwhPT1mJiZmLnR5cGU9PT1hYiYmbnVsbD09PWYua2V5O2smJihmPWYucHJvcHMuY2hpbGRyZW4pO3ZhciBsPVwib2JqZWN0XCI9PT10eXBlb2YgZiYmbnVsbCE9PWY7aWYobClzd2l0Y2goZi4kJHR5cGVvZil7Y2FzZSBaYTphOntsPWYua2V5O2ZvcihrPWQ7bnVsbCE9PWs7KXtpZihrLmtleT09PWwpe3N3aXRjaChrLnRhZyl7Y2FzZSA3OmlmKGYudHlwZT09PWFiKXtjKGEsay5zaWJsaW5nKTtkPWUoayxmLnByb3BzLmNoaWxkcmVuKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWJyZWFrO2RlZmF1bHQ6aWYoay5lbGVtZW50VHlwZT09PWYudHlwZSl7YyhhLFxuay5zaWJsaW5nKTtkPWUoayxmLnByb3BzKTtkLnJlZj1QZyhhLGssZik7ZC5yZXR1cm49YTthPWQ7YnJlYWsgYX19YyhhLGspO2JyZWFrfWVsc2UgYihhLGspO2s9ay5zaWJsaW5nfWYudHlwZT09PWFiPyhkPVdnKGYucHJvcHMuY2hpbGRyZW4sYS5tb2RlLGgsZi5rZXkpLGQucmV0dXJuPWEsYT1kKTooaD1VZyhmLnR5cGUsZi5rZXksZi5wcm9wcyxudWxsLGEubW9kZSxoKSxoLnJlZj1QZyhhLGQsZiksaC5yZXR1cm49YSxhPWgpfXJldHVybiBnKGEpO2Nhc2UgJGE6YTp7Zm9yKGs9Zi5rZXk7bnVsbCE9PWQ7KXtpZihkLmtleT09PWspaWYoND09PWQudGFnJiZkLnN0YXRlTm9kZS5jb250YWluZXJJbmZvPT09Zi5jb250YWluZXJJbmZvJiZkLnN0YXRlTm9kZS5pbXBsZW1lbnRhdGlvbj09PWYuaW1wbGVtZW50YXRpb24pe2MoYSxkLnNpYmxpbmcpO2Q9ZShkLGYuY2hpbGRyZW58fFtdKTtkLnJldHVybj1hO2E9ZDticmVhayBhfWVsc2V7YyhhLGQpO2JyZWFrfWVsc2UgYihhLGQpO2Q9XG5kLnNpYmxpbmd9ZD1WZyhmLGEubW9kZSxoKTtkLnJldHVybj1hO2E9ZH1yZXR1cm4gZyhhKX1pZihcInN0cmluZ1wiPT09dHlwZW9mIGZ8fFwibnVtYmVyXCI9PT10eXBlb2YgZilyZXR1cm4gZj1cIlwiK2YsbnVsbCE9PWQmJjY9PT1kLnRhZz8oYyhhLGQuc2libGluZyksZD1lKGQsZiksZC5yZXR1cm49YSxhPWQpOihjKGEsZCksZD1UZyhmLGEubW9kZSxoKSxkLnJldHVybj1hLGE9ZCksZyhhKTtpZihPZyhmKSlyZXR1cm4gY2EoYSxkLGYsaCk7aWYobmIoZikpcmV0dXJuIEQoYSxkLGYsaCk7bCYmUWcoYSxmKTtpZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIGYmJiFrKXN3aXRjaChhLnRhZyl7Y2FzZSAxOmNhc2UgMDp0aHJvdyBhPWEudHlwZSxFcnJvcih1KDE1MixhLmRpc3BsYXlOYW1lfHxhLm5hbWV8fFwiQ29tcG9uZW50XCIpKTt9cmV0dXJuIGMoYSxkKX19dmFyIFhnPVJnKCEwKSxZZz1SZyghMSksWmc9e30sJGc9e2N1cnJlbnQ6Wmd9LGFoPXtjdXJyZW50OlpnfSxiaD17Y3VycmVudDpaZ307XG5mdW5jdGlvbiBjaChhKXtpZihhPT09WmcpdGhyb3cgRXJyb3IodSgxNzQpKTtyZXR1cm4gYX1mdW5jdGlvbiBkaChhLGIpe0koYmgsYik7SShhaCxhKTtJKCRnLFpnKTthPWIubm9kZVR5cGU7c3dpdGNoKGEpe2Nhc2UgOTpjYXNlIDExOmI9KGI9Yi5kb2N1bWVudEVsZW1lbnQpP2IubmFtZXNwYWNlVVJJOk9iKG51bGwsXCJcIik7YnJlYWs7ZGVmYXVsdDphPTg9PT1hP2IucGFyZW50Tm9kZTpiLGI9YS5uYW1lc3BhY2VVUkl8fG51bGwsYT1hLnRhZ05hbWUsYj1PYihiLGEpfUgoJGcpO0koJGcsYil9ZnVuY3Rpb24gZWgoKXtIKCRnKTtIKGFoKTtIKGJoKX1mdW5jdGlvbiBmaChhKXtjaChiaC5jdXJyZW50KTt2YXIgYj1jaCgkZy5jdXJyZW50KTt2YXIgYz1PYihiLGEudHlwZSk7YiE9PWMmJihJKGFoLGEpLEkoJGcsYykpfWZ1bmN0aW9uIGdoKGEpe2FoLmN1cnJlbnQ9PT1hJiYoSCgkZyksSChhaCkpfXZhciBNPXtjdXJyZW50OjB9O1xuZnVuY3Rpb24gaGgoYSl7Zm9yKHZhciBiPWE7bnVsbCE9PWI7KXtpZigxMz09PWIudGFnKXt2YXIgYz1iLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsPT09Y3x8Yy5kYXRhPT09QmR8fGMuZGF0YT09PUNkKSlyZXR1cm4gYn1lbHNlIGlmKDE5PT09Yi50YWcmJnZvaWQgMCE9PWIubWVtb2l6ZWRQcm9wcy5yZXZlYWxPcmRlcil7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGJ9ZWxzZSBpZihudWxsIT09Yi5jaGlsZCl7Yi5jaGlsZC5yZXR1cm49YjtiPWIuY2hpbGQ7Y29udGludWV9aWYoYj09PWEpYnJlYWs7Zm9yKDtudWxsPT09Yi5zaWJsaW5nOyl7aWYobnVsbD09PWIucmV0dXJufHxiLnJldHVybj09PWEpcmV0dXJuIG51bGw7Yj1iLnJldHVybn1iLnNpYmxpbmcucmV0dXJuPWIucmV0dXJuO2I9Yi5zaWJsaW5nfXJldHVybiBudWxsfWZ1bmN0aW9uIGloKGEsYil7cmV0dXJue3Jlc3BvbmRlcjphLHByb3BzOmJ9fVxudmFyIGpoPVdhLlJlYWN0Q3VycmVudERpc3BhdGNoZXIsa2g9V2EuUmVhY3RDdXJyZW50QmF0Y2hDb25maWcsbGg9MCxOPW51bGwsTz1udWxsLFA9bnVsbCxtaD0hMTtmdW5jdGlvbiBRKCl7dGhyb3cgRXJyb3IodSgzMjEpKTt9ZnVuY3Rpb24gbmgoYSxiKXtpZihudWxsPT09YilyZXR1cm4hMTtmb3IodmFyIGM9MDtjPGIubGVuZ3RoJiZjPGEubGVuZ3RoO2MrKylpZighJGUoYVtjXSxiW2NdKSlyZXR1cm4hMTtyZXR1cm4hMH1cbmZ1bmN0aW9uIG9oKGEsYixjLGQsZSxmKXtsaD1mO049YjtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7Yi5leHBpcmF0aW9uVGltZT0wO2poLmN1cnJlbnQ9bnVsbD09PWF8fG51bGw9PT1hLm1lbW9pemVkU3RhdGU/cGg6cWg7YT1jKGQsZSk7aWYoYi5leHBpcmF0aW9uVGltZT09PWxoKXtmPTA7ZG97Yi5leHBpcmF0aW9uVGltZT0wO2lmKCEoMjU+ZikpdGhyb3cgRXJyb3IodSgzMDEpKTtmKz0xO1A9Tz1udWxsO2IudXBkYXRlUXVldWU9bnVsbDtqaC5jdXJyZW50PXJoO2E9YyhkLGUpfXdoaWxlKGIuZXhwaXJhdGlvblRpbWU9PT1saCl9amguY3VycmVudD1zaDtiPW51bGwhPT1PJiZudWxsIT09Ty5uZXh0O2xoPTA7UD1PPU49bnVsbDttaD0hMTtpZihiKXRocm93IEVycm9yKHUoMzAwKSk7cmV0dXJuIGF9XG5mdW5jdGlvbiB0aCgpe3ZhciBhPXttZW1vaXplZFN0YXRlOm51bGwsYmFzZVN0YXRlOm51bGwsYmFzZVF1ZXVlOm51bGwscXVldWU6bnVsbCxuZXh0Om51bGx9O251bGw9PT1QP04ubWVtb2l6ZWRTdGF0ZT1QPWE6UD1QLm5leHQ9YTtyZXR1cm4gUH1mdW5jdGlvbiB1aCgpe2lmKG51bGw9PT1PKXt2YXIgYT1OLmFsdGVybmF0ZTthPW51bGwhPT1hP2EubWVtb2l6ZWRTdGF0ZTpudWxsfWVsc2UgYT1PLm5leHQ7dmFyIGI9bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlOlAubmV4dDtpZihudWxsIT09YilQPWIsTz1hO2Vsc2V7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMTApKTtPPWE7YT17bWVtb2l6ZWRTdGF0ZTpPLm1lbW9pemVkU3RhdGUsYmFzZVN0YXRlOk8uYmFzZVN0YXRlLGJhc2VRdWV1ZTpPLmJhc2VRdWV1ZSxxdWV1ZTpPLnF1ZXVlLG5leHQ6bnVsbH07bnVsbD09PVA/Ti5tZW1vaXplZFN0YXRlPVA9YTpQPVAubmV4dD1hfXJldHVybiBQfVxuZnVuY3Rpb24gdmgoYSxiKXtyZXR1cm5cImZ1bmN0aW9uXCI9PT10eXBlb2YgYj9iKGEpOmJ9XG5mdW5jdGlvbiB3aChhKXt2YXIgYj11aCgpLGM9Yi5xdWV1ZTtpZihudWxsPT09Yyl0aHJvdyBFcnJvcih1KDMxMSkpO2MubGFzdFJlbmRlcmVkUmVkdWNlcj1hO3ZhciBkPU8sZT1kLmJhc2VRdWV1ZSxmPWMucGVuZGluZztpZihudWxsIT09Zil7aWYobnVsbCE9PWUpe3ZhciBnPWUubmV4dDtlLm5leHQ9Zi5uZXh0O2YubmV4dD1nfWQuYmFzZVF1ZXVlPWU9ZjtjLnBlbmRpbmc9bnVsbH1pZihudWxsIT09ZSl7ZT1lLm5leHQ7ZD1kLmJhc2VTdGF0ZTt2YXIgaD1nPWY9bnVsbCxrPWU7ZG97dmFyIGw9ay5leHBpcmF0aW9uVGltZTtpZihsPGxoKXt2YXIgbT17ZXhwaXJhdGlvblRpbWU6ay5leHBpcmF0aW9uVGltZSxzdXNwZW5zZUNvbmZpZzprLnN1c3BlbnNlQ29uZmlnLGFjdGlvbjprLmFjdGlvbixlYWdlclJlZHVjZXI6ay5lYWdlclJlZHVjZXIsZWFnZXJTdGF0ZTprLmVhZ2VyU3RhdGUsbmV4dDpudWxsfTtudWxsPT09aD8oZz1oPW0sZj1kKTpoPWgubmV4dD1tO2w+Ti5leHBpcmF0aW9uVGltZSYmXG4oTi5leHBpcmF0aW9uVGltZT1sLEJnKGwpKX1lbHNlIG51bGwhPT1oJiYoaD1oLm5leHQ9e2V4cGlyYXRpb25UaW1lOjEwNzM3NDE4MjMsc3VzcGVuc2VDb25maWc6ay5zdXNwZW5zZUNvbmZpZyxhY3Rpb246ay5hY3Rpb24sZWFnZXJSZWR1Y2VyOmsuZWFnZXJSZWR1Y2VyLGVhZ2VyU3RhdGU6ay5lYWdlclN0YXRlLG5leHQ6bnVsbH0pLEFnKGwsay5zdXNwZW5zZUNvbmZpZyksZD1rLmVhZ2VyUmVkdWNlcj09PWE/ay5lYWdlclN0YXRlOmEoZCxrLmFjdGlvbik7az1rLm5leHR9d2hpbGUobnVsbCE9PWsmJmshPT1lKTtudWxsPT09aD9mPWQ6aC5uZXh0PWc7JGUoZCxiLm1lbW9pemVkU3RhdGUpfHwocmc9ITApO2IubWVtb2l6ZWRTdGF0ZT1kO2IuYmFzZVN0YXRlPWY7Yi5iYXNlUXVldWU9aDtjLmxhc3RSZW5kZXJlZFN0YXRlPWR9cmV0dXJuW2IubWVtb2l6ZWRTdGF0ZSxjLmRpc3BhdGNoXX1cbmZ1bmN0aW9uIHhoKGEpe3ZhciBiPXVoKCksYz1iLnF1ZXVlO2lmKG51bGw9PT1jKXRocm93IEVycm9yKHUoMzExKSk7Yy5sYXN0UmVuZGVyZWRSZWR1Y2VyPWE7dmFyIGQ9Yy5kaXNwYXRjaCxlPWMucGVuZGluZyxmPWIubWVtb2l6ZWRTdGF0ZTtpZihudWxsIT09ZSl7Yy5wZW5kaW5nPW51bGw7dmFyIGc9ZT1lLm5leHQ7ZG8gZj1hKGYsZy5hY3Rpb24pLGc9Zy5uZXh0O3doaWxlKGchPT1lKTskZShmLGIubWVtb2l6ZWRTdGF0ZSl8fChyZz0hMCk7Yi5tZW1vaXplZFN0YXRlPWY7bnVsbD09PWIuYmFzZVF1ZXVlJiYoYi5iYXNlU3RhdGU9Zik7Yy5sYXN0UmVuZGVyZWRTdGF0ZT1mfXJldHVybltmLGRdfVxuZnVuY3Rpb24geWgoYSl7dmFyIGI9dGgoKTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSYmKGE9YSgpKTtiLm1lbW9pemVkU3RhdGU9Yi5iYXNlU3RhdGU9YTthPWIucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6dmgsbGFzdFJlbmRlcmVkU3RhdGU6YX07YT1hLmRpc3BhdGNoPXpoLmJpbmQobnVsbCxOLGEpO3JldHVybltiLm1lbW9pemVkU3RhdGUsYV19ZnVuY3Rpb24gQWgoYSxiLGMsZCl7YT17dGFnOmEsY3JlYXRlOmIsZGVzdHJveTpjLGRlcHM6ZCxuZXh0Om51bGx9O2I9Ti51cGRhdGVRdWV1ZTtudWxsPT09Yj8oYj17bGFzdEVmZmVjdDpudWxsfSxOLnVwZGF0ZVF1ZXVlPWIsYi5sYXN0RWZmZWN0PWEubmV4dD1hKTooYz1iLmxhc3RFZmZlY3QsbnVsbD09PWM/Yi5sYXN0RWZmZWN0PWEubmV4dD1hOihkPWMubmV4dCxjLm5leHQ9YSxhLm5leHQ9ZCxiLmxhc3RFZmZlY3Q9YSkpO3JldHVybiBhfVxuZnVuY3Rpb24gQmgoKXtyZXR1cm4gdWgoKS5tZW1vaXplZFN0YXRlfWZ1bmN0aW9uIENoKGEsYixjLGQpe3ZhciBlPXRoKCk7Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLHZvaWQgMCx2b2lkIDA9PT1kP251bGw6ZCl9ZnVuY3Rpb24gRGgoYSxiLGMsZCl7dmFyIGU9dWgoKTtkPXZvaWQgMD09PWQ/bnVsbDpkO3ZhciBmPXZvaWQgMDtpZihudWxsIT09Tyl7dmFyIGc9Ty5tZW1vaXplZFN0YXRlO2Y9Zy5kZXN0cm95O2lmKG51bGwhPT1kJiZuaChkLGcuZGVwcykpe0FoKGIsYyxmLGQpO3JldHVybn19Ti5lZmZlY3RUYWd8PWE7ZS5tZW1vaXplZFN0YXRlPUFoKDF8YixjLGYsZCl9ZnVuY3Rpb24gRWgoYSxiKXtyZXR1cm4gQ2goNTE2LDQsYSxiKX1mdW5jdGlvbiBGaChhLGIpe3JldHVybiBEaCg1MTYsNCxhLGIpfWZ1bmN0aW9uIEdoKGEsYil7cmV0dXJuIERoKDQsMixhLGIpfVxuZnVuY3Rpb24gSGgoYSxiKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYilyZXR1cm4gYT1hKCksYihhKSxmdW5jdGlvbigpe2IobnVsbCl9O2lmKG51bGwhPT1iJiZ2b2lkIDAhPT1iKXJldHVybiBhPWEoKSxiLmN1cnJlbnQ9YSxmdW5jdGlvbigpe2IuY3VycmVudD1udWxsfX1mdW5jdGlvbiBJaChhLGIsYyl7Yz1udWxsIT09YyYmdm9pZCAwIT09Yz9jLmNvbmNhdChbYV0pOm51bGw7cmV0dXJuIERoKDQsMixIaC5iaW5kKG51bGwsYixhKSxjKX1mdW5jdGlvbiBKaCgpe31mdW5jdGlvbiBLaChhLGIpe3RoKCkubWVtb2l6ZWRTdGF0ZT1bYSx2b2lkIDA9PT1iP251bGw6Yl07cmV0dXJuIGF9ZnVuY3Rpb24gTGgoYSxiKXt2YXIgYz11aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7dmFyIGQ9Yy5tZW1vaXplZFN0YXRlO2lmKG51bGwhPT1kJiZudWxsIT09YiYmbmgoYixkWzFdKSlyZXR1cm4gZFswXTtjLm1lbW9pemVkU3RhdGU9W2EsYl07cmV0dXJuIGF9XG5mdW5jdGlvbiBNaChhLGIpe3ZhciBjPXVoKCk7Yj12b2lkIDA9PT1iP251bGw6Yjt2YXIgZD1jLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PWQmJm51bGwhPT1iJiZuaChiLGRbMV0pKXJldHVybiBkWzBdO2E9YSgpO2MubWVtb2l6ZWRTdGF0ZT1bYSxiXTtyZXR1cm4gYX1mdW5jdGlvbiBOaChhLGIsYyl7dmFyIGQ9YWcoKTtjZyg5OD5kPzk4OmQsZnVuY3Rpb24oKXthKCEwKX0pO2NnKDk3PGQ/OTc6ZCxmdW5jdGlvbigpe3ZhciBkPWtoLnN1c3BlbnNlO2toLnN1c3BlbnNlPXZvaWQgMD09PWI/bnVsbDpiO3RyeXthKCExKSxjKCl9ZmluYWxseXtraC5zdXNwZW5zZT1kfX0pfVxuZnVuY3Rpb24gemgoYSxiLGMpe3ZhciBkPUdnKCksZT1EZy5zdXNwZW5zZTtkPUhnKGQsYSxlKTtlPXtleHBpcmF0aW9uVGltZTpkLHN1c3BlbnNlQ29uZmlnOmUsYWN0aW9uOmMsZWFnZXJSZWR1Y2VyOm51bGwsZWFnZXJTdGF0ZTpudWxsLG5leHQ6bnVsbH07dmFyIGY9Yi5wZW5kaW5nO251bGw9PT1mP2UubmV4dD1lOihlLm5leHQ9Zi5uZXh0LGYubmV4dD1lKTtiLnBlbmRpbmc9ZTtmPWEuYWx0ZXJuYXRlO2lmKGE9PT1OfHxudWxsIT09ZiYmZj09PU4pbWg9ITAsZS5leHBpcmF0aW9uVGltZT1saCxOLmV4cGlyYXRpb25UaW1lPWxoO2Vsc2V7aWYoMD09PWEuZXhwaXJhdGlvblRpbWUmJihudWxsPT09Znx8MD09PWYuZXhwaXJhdGlvblRpbWUpJiYoZj1iLmxhc3RSZW5kZXJlZFJlZHVjZXIsbnVsbCE9PWYpKXRyeXt2YXIgZz1iLmxhc3RSZW5kZXJlZFN0YXRlLGg9ZihnLGMpO2UuZWFnZXJSZWR1Y2VyPWY7ZS5lYWdlclN0YXRlPWg7aWYoJGUoaCxnKSlyZXR1cm59Y2F0Y2goayl7fWZpbmFsbHl7fUlnKGEsXG5kKX19XG52YXIgc2g9e3JlYWRDb250ZXh0OnNnLHVzZUNhbGxiYWNrOlEsdXNlQ29udGV4dDpRLHVzZUVmZmVjdDpRLHVzZUltcGVyYXRpdmVIYW5kbGU6USx1c2VMYXlvdXRFZmZlY3Q6USx1c2VNZW1vOlEsdXNlUmVkdWNlcjpRLHVzZVJlZjpRLHVzZVN0YXRlOlEsdXNlRGVidWdWYWx1ZTpRLHVzZVJlc3BvbmRlcjpRLHVzZURlZmVycmVkVmFsdWU6USx1c2VUcmFuc2l0aW9uOlF9LHBoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpLaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpFaCx1c2VJbXBlcmF0aXZlSGFuZGxlOmZ1bmN0aW9uKGEsYixjKXtjPW51bGwhPT1jJiZ2b2lkIDAhPT1jP2MuY29uY2F0KFthXSk6bnVsbDtyZXR1cm4gQ2goNCwyLEhoLmJpbmQobnVsbCxiLGEpLGMpfSx1c2VMYXlvdXRFZmZlY3Q6ZnVuY3Rpb24oYSxiKXtyZXR1cm4gQ2goNCwyLGEsYil9LHVzZU1lbW86ZnVuY3Rpb24oYSxiKXt2YXIgYz10aCgpO2I9dm9pZCAwPT09Yj9udWxsOmI7YT1hKCk7Yy5tZW1vaXplZFN0YXRlPVthLFxuYl07cmV0dXJuIGF9LHVzZVJlZHVjZXI6ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoKCk7Yj12b2lkIDAhPT1jP2MoYik6YjtkLm1lbW9pemVkU3RhdGU9ZC5iYXNlU3RhdGU9YjthPWQucXVldWU9e3BlbmRpbmc6bnVsbCxkaXNwYXRjaDpudWxsLGxhc3RSZW5kZXJlZFJlZHVjZXI6YSxsYXN0UmVuZGVyZWRTdGF0ZTpifTthPWEuZGlzcGF0Y2g9emguYmluZChudWxsLE4sYSk7cmV0dXJuW2QubWVtb2l6ZWRTdGF0ZSxhXX0sdXNlUmVmOmZ1bmN0aW9uKGEpe3ZhciBiPXRoKCk7YT17Y3VycmVudDphfTtyZXR1cm4gYi5tZW1vaXplZFN0YXRlPWF9LHVzZVN0YXRlOnloLHVzZURlYnVnVmFsdWU6SmgsdXNlUmVzcG9uZGVyOmloLHVzZURlZmVycmVkVmFsdWU6ZnVuY3Rpb24oYSxiKXt2YXIgYz15aChhKSxkPWNbMF0sZT1jWzFdO0VoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1cbmN9fSxbYSxiXSk7cmV0dXJuIGR9LHVzZVRyYW5zaXRpb246ZnVuY3Rpb24oYSl7dmFyIGI9eWgoITEpLGM9YlswXTtiPWJbMV07cmV0dXJuW0toKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHFoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6d2gsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHdoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXdoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPVxud2godmgpLGM9YlswXTtiPWJbMV07cmV0dXJuW0xoKE5oLmJpbmQobnVsbCxiLGEpLFtiLGFdKSxjXX19LHJoPXtyZWFkQ29udGV4dDpzZyx1c2VDYWxsYmFjazpMaCx1c2VDb250ZXh0OnNnLHVzZUVmZmVjdDpGaCx1c2VJbXBlcmF0aXZlSGFuZGxlOkloLHVzZUxheW91dEVmZmVjdDpHaCx1c2VNZW1vOk1oLHVzZVJlZHVjZXI6eGgsdXNlUmVmOkJoLHVzZVN0YXRlOmZ1bmN0aW9uKCl7cmV0dXJuIHhoKHZoKX0sdXNlRGVidWdWYWx1ZTpKaCx1c2VSZXNwb25kZXI6aWgsdXNlRGVmZXJyZWRWYWx1ZTpmdW5jdGlvbihhLGIpe3ZhciBjPXhoKHZoKSxkPWNbMF0sZT1jWzFdO0ZoKGZ1bmN0aW9uKCl7dmFyIGM9a2guc3VzcGVuc2U7a2guc3VzcGVuc2U9dm9pZCAwPT09Yj9udWxsOmI7dHJ5e2UoYSl9ZmluYWxseXtraC5zdXNwZW5zZT1jfX0sW2EsYl0pO3JldHVybiBkfSx1c2VUcmFuc2l0aW9uOmZ1bmN0aW9uKGEpe3ZhciBiPXhoKHZoKSxjPWJbMF07Yj1iWzFdO3JldHVybltMaChOaC5iaW5kKG51bGwsXG5iLGEpLFtiLGFdKSxjXX19LE9oPW51bGwsUGg9bnVsbCxRaD0hMTtmdW5jdGlvbiBSaChhLGIpe3ZhciBjPVNoKDUsbnVsbCxudWxsLDApO2MuZWxlbWVudFR5cGU9XCJERUxFVEVEXCI7Yy50eXBlPVwiREVMRVRFRFwiO2Muc3RhdGVOb2RlPWI7Yy5yZXR1cm49YTtjLmVmZmVjdFRhZz04O251bGwhPT1hLmxhc3RFZmZlY3Q/KGEubGFzdEVmZmVjdC5uZXh0RWZmZWN0PWMsYS5sYXN0RWZmZWN0PWMpOmEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PWN9XG5mdW5jdGlvbiBUaChhLGIpe3N3aXRjaChhLnRhZyl7Y2FzZSA1OnZhciBjPWEudHlwZTtiPTEhPT1iLm5vZGVUeXBlfHxjLnRvTG93ZXJDYXNlKCkhPT1iLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk/bnVsbDpiO3JldHVybiBudWxsIT09Yj8oYS5zdGF0ZU5vZGU9YiwhMCk6ITE7Y2FzZSA2OnJldHVybiBiPVwiXCI9PT1hLnBlbmRpbmdQcm9wc3x8MyE9PWIubm9kZVR5cGU/bnVsbDpiLG51bGwhPT1iPyhhLnN0YXRlTm9kZT1iLCEwKTohMTtjYXNlIDEzOnJldHVybiExO2RlZmF1bHQ6cmV0dXJuITF9fVxuZnVuY3Rpb24gVWgoYSl7aWYoUWgpe3ZhciBiPVBoO2lmKGIpe3ZhciBjPWI7aWYoIVRoKGEsYikpe2I9SmQoYy5uZXh0U2libGluZyk7aWYoIWJ8fCFUaChhLGIpKXthLmVmZmVjdFRhZz1hLmVmZmVjdFRhZyYtMTAyNXwyO1FoPSExO09oPWE7cmV0dXJufVJoKE9oLGMpfU9oPWE7UGg9SmQoYi5maXJzdENoaWxkKX1lbHNlIGEuZWZmZWN0VGFnPWEuZWZmZWN0VGFnJi0xMDI1fDIsUWg9ITEsT2g9YX19ZnVuY3Rpb24gVmgoYSl7Zm9yKGE9YS5yZXR1cm47bnVsbCE9PWEmJjUhPT1hLnRhZyYmMyE9PWEudGFnJiYxMyE9PWEudGFnOylhPWEucmV0dXJuO09oPWF9XG5mdW5jdGlvbiBXaChhKXtpZihhIT09T2gpcmV0dXJuITE7aWYoIVFoKXJldHVybiBWaChhKSxRaD0hMCwhMTt2YXIgYj1hLnR5cGU7aWYoNSE9PWEudGFnfHxcImhlYWRcIiE9PWImJlwiYm9keVwiIT09YiYmIUdkKGIsYS5tZW1vaXplZFByb3BzKSlmb3IoYj1QaDtiOylSaChhLGIpLGI9SmQoYi5uZXh0U2libGluZyk7VmgoYSk7aWYoMTM9PT1hLnRhZyl7YT1hLm1lbW9pemVkU3RhdGU7YT1udWxsIT09YT9hLmRlaHlkcmF0ZWQ6bnVsbDtpZighYSl0aHJvdyBFcnJvcih1KDMxNykpO2E6e2E9YS5uZXh0U2libGluZztmb3IoYj0wO2E7KXtpZig4PT09YS5ub2RlVHlwZSl7dmFyIGM9YS5kYXRhO2lmKGM9PT1BZCl7aWYoMD09PWIpe1BoPUpkKGEubmV4dFNpYmxpbmcpO2JyZWFrIGF9Yi0tfWVsc2UgYyE9PXpkJiZjIT09Q2QmJmMhPT1CZHx8YisrfWE9YS5uZXh0U2libGluZ31QaD1udWxsfX1lbHNlIFBoPU9oP0pkKGEuc3RhdGVOb2RlLm5leHRTaWJsaW5nKTpudWxsO3JldHVybiEwfVxuZnVuY3Rpb24gWGgoKXtQaD1PaD1udWxsO1FoPSExfXZhciBZaD1XYS5SZWFjdEN1cnJlbnRPd25lcixyZz0hMTtmdW5jdGlvbiBSKGEsYixjLGQpe2IuY2hpbGQ9bnVsbD09PWE/WWcoYixudWxsLGMsZCk6WGcoYixhLmNoaWxkLGMsZCl9ZnVuY3Rpb24gWmgoYSxiLGMsZCxlKXtjPWMucmVuZGVyO3ZhciBmPWIucmVmO3FnKGIsZSk7ZD1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixkLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gYWkoYSxiLGMsZCxlLGYpe2lmKG51bGw9PT1hKXt2YXIgZz1jLnR5cGU7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJiFiaShnKSYmdm9pZCAwPT09Zy5kZWZhdWx0UHJvcHMmJm51bGw9PT1jLmNvbXBhcmUmJnZvaWQgMD09PWMuZGVmYXVsdFByb3BzKXJldHVybiBiLnRhZz0xNSxiLnR5cGU9ZyxjaShhLGIsZyxkLGUsZik7YT1VZyhjLnR5cGUsbnVsbCxkLG51bGwsYi5tb2RlLGYpO2EucmVmPWIucmVmO2EucmV0dXJuPWI7cmV0dXJuIGIuY2hpbGQ9YX1nPWEuY2hpbGQ7aWYoZTxmJiYoZT1nLm1lbW9pemVkUHJvcHMsYz1jLmNvbXBhcmUsYz1udWxsIT09Yz9jOmJmLGMoZSxkKSYmYS5yZWY9PT1iLnJlZikpcmV0dXJuICRoKGEsYixmKTtiLmVmZmVjdFRhZ3w9MTthPVNnKGcsZCk7YS5yZWY9Yi5yZWY7YS5yZXR1cm49YjtyZXR1cm4gYi5jaGlsZD1hfVxuZnVuY3Rpb24gY2koYSxiLGMsZCxlLGYpe3JldHVybiBudWxsIT09YSYmYmYoYS5tZW1vaXplZFByb3BzLGQpJiZhLnJlZj09PWIucmVmJiYocmc9ITEsZTxmKT8oYi5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLCRoKGEsYixmKSk6ZGkoYSxiLGMsZCxmKX1mdW5jdGlvbiBlaShhLGIpe3ZhciBjPWIucmVmO2lmKG51bGw9PT1hJiZudWxsIT09Y3x8bnVsbCE9PWEmJmEucmVmIT09YyliLmVmZmVjdFRhZ3w9MTI4fWZ1bmN0aW9uIGRpKGEsYixjLGQsZSl7dmFyIGY9TChjKT9CZjpKLmN1cnJlbnQ7Zj1DZihiLGYpO3FnKGIsZSk7Yz1vaChhLGIsYyxkLGYsZSk7aWYobnVsbCE9PWEmJiFyZylyZXR1cm4gYi51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGIuZWZmZWN0VGFnJj0tNTE3LGEuZXhwaXJhdGlvblRpbWU8PWUmJihhLmV4cGlyYXRpb25UaW1lPTApLCRoKGEsYixlKTtiLmVmZmVjdFRhZ3w9MTtSKGEsYixjLGUpO3JldHVybiBiLmNoaWxkfVxuZnVuY3Rpb24gZmkoYSxiLGMsZCxlKXtpZihMKGMpKXt2YXIgZj0hMDtHZihiKX1lbHNlIGY9ITE7cWcoYixlKTtpZihudWxsPT09Yi5zdGF0ZU5vZGUpbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLExnKGIsYyxkKSxOZyhiLGMsZCxlKSxkPSEwO2Vsc2UgaWYobnVsbD09PWEpe3ZhciBnPWIuc3RhdGVOb2RlLGg9Yi5tZW1vaXplZFByb3BzO2cucHJvcHM9aDt2YXIgaz1nLmNvbnRleHQsbD1jLmNvbnRleHRUeXBlO1wib2JqZWN0XCI9PT10eXBlb2YgbCYmbnVsbCE9PWw/bD1zZyhsKToobD1MKGMpP0JmOkouY3VycmVudCxsPUNmKGIsbCkpO3ZhciBtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLHA9XCJmdW5jdGlvblwiPT09dHlwZW9mIG18fFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlO3B8fFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsUmVjZWl2ZVByb3BzJiZcblwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKTt0Zz0hMTt2YXIgeD1iLm1lbW9pemVkU3RhdGU7Zy5zdGF0ZT14O3pnKGIsZCxnLGUpO2s9Yi5tZW1vaXplZFN0YXRlO2ghPT1kfHx4IT09a3x8Sy5jdXJyZW50fHx0Zz8oXCJmdW5jdGlvblwiPT09dHlwZW9mIG0mJihGZyhiLGMsbSxkKSxrPWIubWVtb2l6ZWRTdGF0ZSksKGg9dGd8fEtnKGIsYyxoLGQseCxrLGwpKT8ocHx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50fHwoXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50V2lsbE1vdW50JiZnLmNvbXBvbmVudFdpbGxNb3VudCgpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLlVOU0FGRV9jb21wb25lbnRXaWxsTW91bnQmJmcuVU5TQUZFX2NvbXBvbmVudFdpbGxNb3VudCgpKSxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmNvbXBvbmVudERpZE1vdW50JiYoYi5lZmZlY3RUYWd8PTQpKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPWspLGcucHJvcHM9ZCxnLnN0YXRlPWssZy5jb250ZXh0PWwsZD1oKTooXCJmdW5jdGlvblwiPT09dHlwZW9mIGcuY29tcG9uZW50RGlkTW91bnQmJihiLmVmZmVjdFRhZ3w9NCksZD0hMSl9ZWxzZSBnPWIuc3RhdGVOb2RlLHZnKGEsYiksaD1iLm1lbW9pemVkUHJvcHMsZy5wcm9wcz1iLnR5cGU9PT1iLmVsZW1lbnRUeXBlP2g6aWcoYi50eXBlLGgpLGs9Zy5jb250ZXh0LGw9Yy5jb250ZXh0VHlwZSxcIm9iamVjdFwiPT09dHlwZW9mIGwmJm51bGwhPT1sP2w9c2cobCk6KGw9TChjKT9CZjpKLmN1cnJlbnQsbD1DZihiLGwpKSxtPWMuZ2V0RGVyaXZlZFN0YXRlRnJvbVByb3BzLChwPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBtfHxcImZ1bmN0aW9uXCI9PT1cbnR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlKXx8XCJmdW5jdGlvblwiIT09dHlwZW9mIGcuVU5TQUZFX2NvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHMmJlwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxSZWNlaXZlUHJvcHN8fChoIT09ZHx8ayE9PWwpJiZNZyhiLGcsZCxsKSx0Zz0hMSxrPWIubWVtb2l6ZWRTdGF0ZSxnLnN0YXRlPWssemcoYixkLGcsZSkseD1iLm1lbW9pemVkU3RhdGUsaCE9PWR8fGshPT14fHxLLmN1cnJlbnR8fHRnPyhcImZ1bmN0aW9uXCI9PT10eXBlb2YgbSYmKEZnKGIsYyxtLGQpLHg9Yi5tZW1vaXplZFN0YXRlKSwobT10Z3x8S2coYixjLGgsZCxrLHgsbCkpPyhwfHxcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50V2lsbFVwZGF0ZXx8KFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudFdpbGxVcGRhdGUmJmcuY29tcG9uZW50V2lsbFVwZGF0ZShkLFxueCxsKSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZSYmZy5VTlNBRkVfY29tcG9uZW50V2lsbFVwZGF0ZShkLHgsbCkpLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBnLmNvbXBvbmVudERpZFVwZGF0ZSYmKGIuZWZmZWN0VGFnfD00KSxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZy5nZXRTbmFwc2hvdEJlZm9yZVVwZGF0ZSYmKGIuZWZmZWN0VGFnfD0yNTYpKTooXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuY29tcG9uZW50RGlkVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTQpLFwiZnVuY3Rpb25cIiE9PXR5cGVvZiBnLmdldFNuYXBzaG90QmVmb3JlVXBkYXRlfHxoPT09YS5tZW1vaXplZFByb3BzJiZrPT09YS5tZW1vaXplZFN0YXRlfHwoYi5lZmZlY3RUYWd8PTI1NiksYi5tZW1vaXplZFByb3BzPWQsYi5tZW1vaXplZFN0YXRlPXgpLGcucHJvcHM9ZCxnLnN0YXRlPXgsZy5jb250ZXh0PWwsZD1tKTpcbihcImZ1bmN0aW9uXCIhPT10eXBlb2YgZy5jb21wb25lbnREaWRVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9NCksXCJmdW5jdGlvblwiIT09dHlwZW9mIGcuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGV8fGg9PT1hLm1lbW9pemVkUHJvcHMmJms9PT1hLm1lbW9pemVkU3RhdGV8fChiLmVmZmVjdFRhZ3w9MjU2KSxkPSExKTtyZXR1cm4gZ2koYSxiLGMsZCxmLGUpfVxuZnVuY3Rpb24gZ2koYSxiLGMsZCxlLGYpe2VpKGEsYik7dmFyIGc9MCE9PShiLmVmZmVjdFRhZyY2NCk7aWYoIWQmJiFnKXJldHVybiBlJiZIZihiLGMsITEpLCRoKGEsYixmKTtkPWIuc3RhdGVOb2RlO1loLmN1cnJlbnQ9Yjt2YXIgaD1nJiZcImZ1bmN0aW9uXCIhPT10eXBlb2YgYy5nZXREZXJpdmVkU3RhdGVGcm9tRXJyb3I/bnVsbDpkLnJlbmRlcigpO2IuZWZmZWN0VGFnfD0xO251bGwhPT1hJiZnPyhiLmNoaWxkPVhnKGIsYS5jaGlsZCxudWxsLGYpLGIuY2hpbGQ9WGcoYixudWxsLGgsZikpOlIoYSxiLGgsZik7Yi5tZW1vaXplZFN0YXRlPWQuc3RhdGU7ZSYmSGYoYixjLCEwKTtyZXR1cm4gYi5jaGlsZH1mdW5jdGlvbiBoaShhKXt2YXIgYj1hLnN0YXRlTm9kZTtiLnBlbmRpbmdDb250ZXh0P0VmKGEsYi5wZW5kaW5nQ29udGV4dCxiLnBlbmRpbmdDb250ZXh0IT09Yi5jb250ZXh0KTpiLmNvbnRleHQmJkVmKGEsYi5jb250ZXh0LCExKTtkaChhLGIuY29udGFpbmVySW5mbyl9XG52YXIgaWk9e2RlaHlkcmF0ZWQ6bnVsbCxyZXRyeVRpbWU6MH07XG5mdW5jdGlvbiBqaShhLGIsYyl7dmFyIGQ9Yi5tb2RlLGU9Yi5wZW5kaW5nUHJvcHMsZj1NLmN1cnJlbnQsZz0hMSxoOyhoPTAhPT0oYi5lZmZlY3RUYWcmNjQpKXx8KGg9MCE9PShmJjIpJiYobnVsbD09PWF8fG51bGwhPT1hLm1lbW9pemVkU3RhdGUpKTtoPyhnPSEwLGIuZWZmZWN0VGFnJj0tNjUpOm51bGwhPT1hJiZudWxsPT09YS5tZW1vaXplZFN0YXRlfHx2b2lkIDA9PT1lLmZhbGxiYWNrfHwhMD09PWUudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2t8fChmfD0xKTtJKE0sZiYxKTtpZihudWxsPT09YSl7dm9pZCAwIT09ZS5mYWxsYmFjayYmVWgoYik7aWYoZyl7Zz1lLmZhbGxiYWNrO2U9V2cobnVsbCxkLDAsbnVsbCk7ZS5yZXR1cm49YjtpZigwPT09KGIubW9kZSYyKSlmb3IoYT1udWxsIT09Yi5tZW1vaXplZFN0YXRlP2IuY2hpbGQuY2hpbGQ6Yi5jaGlsZCxlLmNoaWxkPWE7bnVsbCE9PWE7KWEucmV0dXJuPWUsYT1hLnNpYmxpbmc7Yz1XZyhnLGQsYyxudWxsKTtjLnJldHVybj1cbmI7ZS5zaWJsaW5nPWM7Yi5tZW1vaXplZFN0YXRlPWlpO2IuY2hpbGQ9ZTtyZXR1cm4gY31kPWUuY2hpbGRyZW47Yi5tZW1vaXplZFN0YXRlPW51bGw7cmV0dXJuIGIuY2hpbGQ9WWcoYixudWxsLGQsYyl9aWYobnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSl7YT1hLmNoaWxkO2Q9YS5zaWJsaW5nO2lmKGcpe2U9ZS5mYWxsYmFjaztjPVNnKGEsYS5wZW5kaW5nUHJvcHMpO2MucmV0dXJuPWI7aWYoMD09PShiLm1vZGUmMikmJihnPW51bGwhPT1iLm1lbW9pemVkU3RhdGU/Yi5jaGlsZC5jaGlsZDpiLmNoaWxkLGchPT1hLmNoaWxkKSlmb3IoYy5jaGlsZD1nO251bGwhPT1nOylnLnJldHVybj1jLGc9Zy5zaWJsaW5nO2Q9U2coZCxlKTtkLnJldHVybj1iO2Muc2libGluZz1kO2MuY2hpbGRFeHBpcmF0aW9uVGltZT0wO2IubWVtb2l6ZWRTdGF0ZT1paTtiLmNoaWxkPWM7cmV0dXJuIGR9Yz1YZyhiLGEuY2hpbGQsZS5jaGlsZHJlbixjKTtiLm1lbW9pemVkU3RhdGU9bnVsbDtyZXR1cm4gYi5jaGlsZD1cbmN9YT1hLmNoaWxkO2lmKGcpe2c9ZS5mYWxsYmFjaztlPVdnKG51bGwsZCwwLG51bGwpO2UucmV0dXJuPWI7ZS5jaGlsZD1hO251bGwhPT1hJiYoYS5yZXR1cm49ZSk7aWYoMD09PShiLm1vZGUmMikpZm9yKGE9bnVsbCE9PWIubWVtb2l6ZWRTdGF0ZT9iLmNoaWxkLmNoaWxkOmIuY2hpbGQsZS5jaGlsZD1hO251bGwhPT1hOylhLnJldHVybj1lLGE9YS5zaWJsaW5nO2M9V2coZyxkLGMsbnVsbCk7Yy5yZXR1cm49YjtlLnNpYmxpbmc9YztjLmVmZmVjdFRhZ3w9MjtlLmNoaWxkRXhwaXJhdGlvblRpbWU9MDtiLm1lbW9pemVkU3RhdGU9aWk7Yi5jaGlsZD1lO3JldHVybiBjfWIubWVtb2l6ZWRTdGF0ZT1udWxsO3JldHVybiBiLmNoaWxkPVhnKGIsYSxlLmNoaWxkcmVuLGMpfVxuZnVuY3Rpb24ga2koYSxiKXthLmV4cGlyYXRpb25UaW1lPGImJihhLmV4cGlyYXRpb25UaW1lPWIpO3ZhciBjPWEuYWx0ZXJuYXRlO251bGwhPT1jJiZjLmV4cGlyYXRpb25UaW1lPGImJihjLmV4cGlyYXRpb25UaW1lPWIpO3BnKGEucmV0dXJuLGIpfWZ1bmN0aW9uIGxpKGEsYixjLGQsZSxmKXt2YXIgZz1hLm1lbW9pemVkU3RhdGU7bnVsbD09PWc/YS5tZW1vaXplZFN0YXRlPXtpc0JhY2t3YXJkczpiLHJlbmRlcmluZzpudWxsLHJlbmRlcmluZ1N0YXJ0VGltZTowLGxhc3Q6ZCx0YWlsOmMsdGFpbEV4cGlyYXRpb246MCx0YWlsTW9kZTplLGxhc3RFZmZlY3Q6Zn06KGcuaXNCYWNrd2FyZHM9YixnLnJlbmRlcmluZz1udWxsLGcucmVuZGVyaW5nU3RhcnRUaW1lPTAsZy5sYXN0PWQsZy50YWlsPWMsZy50YWlsRXhwaXJhdGlvbj0wLGcudGFpbE1vZGU9ZSxnLmxhc3RFZmZlY3Q9Zil9XG5mdW5jdGlvbiBtaShhLGIsYyl7dmFyIGQ9Yi5wZW5kaW5nUHJvcHMsZT1kLnJldmVhbE9yZGVyLGY9ZC50YWlsO1IoYSxiLGQuY2hpbGRyZW4sYyk7ZD1NLmN1cnJlbnQ7aWYoMCE9PShkJjIpKWQ9ZCYxfDIsYi5lZmZlY3RUYWd8PTY0O2Vsc2V7aWYobnVsbCE9PWEmJjAhPT0oYS5lZmZlY3RUYWcmNjQpKWE6Zm9yKGE9Yi5jaGlsZDtudWxsIT09YTspe2lmKDEzPT09YS50YWcpbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYma2koYSxjKTtlbHNlIGlmKDE5PT09YS50YWcpa2koYSxjKTtlbHNlIGlmKG51bGwhPT1hLmNoaWxkKXthLmNoaWxkLnJldHVybj1hO2E9YS5jaGlsZDtjb250aW51ZX1pZihhPT09YilicmVhayBhO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1iKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfWQmPTF9SShNLGQpO2lmKDA9PT0oYi5tb2RlJjIpKWIubWVtb2l6ZWRTdGF0ZT1cbm51bGw7ZWxzZSBzd2l0Y2goZSl7Y2FzZSBcImZvcndhcmRzXCI6Yz1iLmNoaWxkO2ZvcihlPW51bGw7bnVsbCE9PWM7KWE9Yy5hbHRlcm5hdGUsbnVsbCE9PWEmJm51bGw9PT1oaChhKSYmKGU9YyksYz1jLnNpYmxpbmc7Yz1lO251bGw9PT1jPyhlPWIuY2hpbGQsYi5jaGlsZD1udWxsKTooZT1jLnNpYmxpbmcsYy5zaWJsaW5nPW51bGwpO2xpKGIsITEsZSxjLGYsYi5sYXN0RWZmZWN0KTticmVhaztjYXNlIFwiYmFja3dhcmRzXCI6Yz1udWxsO2U9Yi5jaGlsZDtmb3IoYi5jaGlsZD1udWxsO251bGwhPT1lOyl7YT1lLmFsdGVybmF0ZTtpZihudWxsIT09YSYmbnVsbD09PWhoKGEpKXtiLmNoaWxkPWU7YnJlYWt9YT1lLnNpYmxpbmc7ZS5zaWJsaW5nPWM7Yz1lO2U9YX1saShiLCEwLGMsbnVsbCxmLGIubGFzdEVmZmVjdCk7YnJlYWs7Y2FzZSBcInRvZ2V0aGVyXCI6bGkoYiwhMSxudWxsLG51bGwsdm9pZCAwLGIubGFzdEVmZmVjdCk7YnJlYWs7ZGVmYXVsdDpiLm1lbW9pemVkU3RhdGU9bnVsbH1yZXR1cm4gYi5jaGlsZH1cbmZ1bmN0aW9uICRoKGEsYixjKXtudWxsIT09YSYmKGIuZGVwZW5kZW5jaWVzPWEuZGVwZW5kZW5jaWVzKTt2YXIgZD1iLmV4cGlyYXRpb25UaW1lOzAhPT1kJiZCZyhkKTtpZihiLmNoaWxkRXhwaXJhdGlvblRpbWU8YylyZXR1cm4gbnVsbDtpZihudWxsIT09YSYmYi5jaGlsZCE9PWEuY2hpbGQpdGhyb3cgRXJyb3IodSgxNTMpKTtpZihudWxsIT09Yi5jaGlsZCl7YT1iLmNoaWxkO2M9U2coYSxhLnBlbmRpbmdQcm9wcyk7Yi5jaGlsZD1jO2ZvcihjLnJldHVybj1iO251bGwhPT1hLnNpYmxpbmc7KWE9YS5zaWJsaW5nLGM9Yy5zaWJsaW5nPVNnKGEsYS5wZW5kaW5nUHJvcHMpLGMucmV0dXJuPWI7Yy5zaWJsaW5nPW51bGx9cmV0dXJuIGIuY2hpbGR9dmFyIG5pLG9pLHBpLHFpO1xubmk9ZnVuY3Rpb24oYSxiKXtmb3IodmFyIGM9Yi5jaGlsZDtudWxsIT09Yzspe2lmKDU9PT1jLnRhZ3x8Nj09PWMudGFnKWEuYXBwZW5kQ2hpbGQoYy5zdGF0ZU5vZGUpO2Vsc2UgaWYoNCE9PWMudGFnJiZudWxsIT09Yy5jaGlsZCl7Yy5jaGlsZC5yZXR1cm49YztjPWMuY2hpbGQ7Y29udGludWV9aWYoYz09PWIpYnJlYWs7Zm9yKDtudWxsPT09Yy5zaWJsaW5nOyl7aWYobnVsbD09PWMucmV0dXJufHxjLnJldHVybj09PWIpcmV0dXJuO2M9Yy5yZXR1cm59Yy5zaWJsaW5nLnJldHVybj1jLnJldHVybjtjPWMuc2libGluZ319O29pPWZ1bmN0aW9uKCl7fTtcbnBpPWZ1bmN0aW9uKGEsYixjLGQsZSl7dmFyIGY9YS5tZW1vaXplZFByb3BzO2lmKGYhPT1kKXt2YXIgZz1iLnN0YXRlTm9kZTtjaCgkZy5jdXJyZW50KTthPW51bGw7c3dpdGNoKGMpe2Nhc2UgXCJpbnB1dFwiOmY9emIoZyxmKTtkPXpiKGcsZCk7YT1bXTticmVhaztjYXNlIFwib3B0aW9uXCI6Zj1HYihnLGYpO2Q9R2IoZyxkKTthPVtdO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpmPW4oe30sZix7dmFsdWU6dm9pZCAwfSk7ZD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO2E9W107YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6Zj1JYihnLGYpO2Q9SWIoZyxkKTthPVtdO2JyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiIT09dHlwZW9mIGYub25DbGljayYmXCJmdW5jdGlvblwiPT09dHlwZW9mIGQub25DbGljayYmKGcub25jbGljaz1zZCl9b2QoYyxkKTt2YXIgaCxrO2M9bnVsbDtmb3IoaCBpbiBmKWlmKCFkLmhhc093blByb3BlcnR5KGgpJiZmLmhhc093blByb3BlcnR5KGgpJiZudWxsIT1mW2hdKWlmKFwic3R5bGVcIj09PVxuaClmb3IoayBpbiBnPWZbaF0sZylnLmhhc093blByb3BlcnR5KGspJiYoY3x8KGM9e30pLGNba109XCJcIik7ZWxzZVwiZGFuZ2Vyb3VzbHlTZXRJbm5lckhUTUxcIiE9PWgmJlwiY2hpbGRyZW5cIiE9PWgmJlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmXCJhdXRvRm9jdXNcIiE9PWgmJih2YS5oYXNPd25Qcm9wZXJ0eShoKT9hfHwoYT1bXSk6KGE9YXx8W10pLnB1c2goaCxudWxsKSk7Zm9yKGggaW4gZCl7dmFyIGw9ZFtoXTtnPW51bGwhPWY/ZltoXTp2b2lkIDA7aWYoZC5oYXNPd25Qcm9wZXJ0eShoKSYmbCE9PWcmJihudWxsIT1sfHxudWxsIT1nKSlpZihcInN0eWxlXCI9PT1oKWlmKGcpe2ZvcihrIGluIGcpIWcuaGFzT3duUHJvcGVydHkoayl8fGwmJmwuaGFzT3duUHJvcGVydHkoayl8fChjfHwoYz17fSksY1trXT1cIlwiKTtmb3IoayBpbiBsKWwuaGFzT3duUHJvcGVydHkoaykmJmdba10hPT1sW2tdJiYoY3x8KGM9e30pLFxuY1trXT1sW2tdKX1lbHNlIGN8fChhfHwoYT1bXSksYS5wdXNoKGgsYykpLGM9bDtlbHNlXCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09aD8obD1sP2wuX19odG1sOnZvaWQgMCxnPWc/Zy5fX2h0bWw6dm9pZCAwLG51bGwhPWwmJmchPT1sJiYoYT1hfHxbXSkucHVzaChoLGwpKTpcImNoaWxkcmVuXCI9PT1oP2c9PT1sfHxcInN0cmluZ1wiIT09dHlwZW9mIGwmJlwibnVtYmVyXCIhPT10eXBlb2YgbHx8KGE9YXx8W10pLnB1c2goaCxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1oJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09aCYmKHZhLmhhc093blByb3BlcnR5KGgpPyhudWxsIT1sJiZyZChlLGgpLGF8fGc9PT1sfHwoYT1bXSkpOihhPWF8fFtdKS5wdXNoKGgsbCkpfWMmJihhPWF8fFtdKS5wdXNoKFwic3R5bGVcIixjKTtlPWE7aWYoYi51cGRhdGVRdWV1ZT1lKWIuZWZmZWN0VGFnfD00fX07XG5xaT1mdW5jdGlvbihhLGIsYyxkKXtjIT09ZCYmKGIuZWZmZWN0VGFnfD00KX07ZnVuY3Rpb24gcmkoYSxiKXtzd2l0Y2goYS50YWlsTW9kZSl7Y2FzZSBcImhpZGRlblwiOmI9YS50YWlsO2Zvcih2YXIgYz1udWxsO251bGwhPT1iOyludWxsIT09Yi5hbHRlcm5hdGUmJihjPWIpLGI9Yi5zaWJsaW5nO251bGw9PT1jP2EudGFpbD1udWxsOmMuc2libGluZz1udWxsO2JyZWFrO2Nhc2UgXCJjb2xsYXBzZWRcIjpjPWEudGFpbDtmb3IodmFyIGQ9bnVsbDtudWxsIT09YzspbnVsbCE9PWMuYWx0ZXJuYXRlJiYoZD1jKSxjPWMuc2libGluZztudWxsPT09ZD9ifHxudWxsPT09YS50YWlsP2EudGFpbD1udWxsOmEudGFpbC5zaWJsaW5nPW51bGw6ZC5zaWJsaW5nPW51bGx9fVxuZnVuY3Rpb24gc2koYSxiLGMpe3ZhciBkPWIucGVuZGluZ1Byb3BzO3N3aXRjaChiLnRhZyl7Y2FzZSAyOmNhc2UgMTY6Y2FzZSAxNTpjYXNlIDA6Y2FzZSAxMTpjYXNlIDc6Y2FzZSA4OmNhc2UgMTI6Y2FzZSA5OmNhc2UgMTQ6cmV0dXJuIG51bGw7Y2FzZSAxOnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDM6cmV0dXJuIGVoKCksSChLKSxIKEopLGM9Yi5zdGF0ZU5vZGUsYy5wZW5kaW5nQ29udGV4dCYmKGMuY29udGV4dD1jLnBlbmRpbmdDb250ZXh0LGMucGVuZGluZ0NvbnRleHQ9bnVsbCksbnVsbCE9PWEmJm51bGwhPT1hLmNoaWxkfHwhV2goYil8fChiLmVmZmVjdFRhZ3w9NCksb2koYiksbnVsbDtjYXNlIDU6Z2goYik7Yz1jaChiaC5jdXJyZW50KTt2YXIgZT1iLnR5cGU7aWYobnVsbCE9PWEmJm51bGwhPWIuc3RhdGVOb2RlKXBpKGEsYixlLGQsYyksYS5yZWYhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpO2Vsc2V7aWYoIWQpe2lmKG51bGw9PT1iLnN0YXRlTm9kZSl0aHJvdyBFcnJvcih1KDE2NikpO1xucmV0dXJuIG51bGx9YT1jaCgkZy5jdXJyZW50KTtpZihXaChiKSl7ZD1iLnN0YXRlTm9kZTtlPWIudHlwZTt2YXIgZj1iLm1lbW9pemVkUHJvcHM7ZFtNZF09YjtkW05kXT1mO3N3aXRjaChlKXtjYXNlIFwiaWZyYW1lXCI6Y2FzZSBcIm9iamVjdFwiOmNhc2UgXCJlbWJlZFwiOkYoXCJsb2FkXCIsZCk7YnJlYWs7Y2FzZSBcInZpZGVvXCI6Y2FzZSBcImF1ZGlvXCI6Zm9yKGE9MDthPGFjLmxlbmd0aDthKyspRihhY1thXSxkKTticmVhaztjYXNlIFwic291cmNlXCI6RihcImVycm9yXCIsZCk7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsZCk7RihcImxvYWRcIixkKTticmVhaztjYXNlIFwiZm9ybVwiOkYoXCJyZXNldFwiLGQpO0YoXCJzdWJtaXRcIixkKTticmVhaztjYXNlIFwiZGV0YWlsc1wiOkYoXCJ0b2dnbGVcIixkKTticmVhaztjYXNlIFwiaW5wdXRcIjpBYihkLGYpO0YoXCJpbnZhbGlkXCIsZCk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjpkLl93cmFwcGVyU3RhdGU9XG57d2FzTXVsdGlwbGU6ISFmLm11bHRpcGxlfTtGKFwiaW52YWxpZFwiLGQpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjpKYihkLGYpLEYoXCJpbnZhbGlkXCIsZCkscmQoYyxcIm9uQ2hhbmdlXCIpfW9kKGUsZik7YT1udWxsO2Zvcih2YXIgZyBpbiBmKWlmKGYuaGFzT3duUHJvcGVydHkoZykpe3ZhciBoPWZbZ107XCJjaGlsZHJlblwiPT09Zz9cInN0cmluZ1wiPT09dHlwZW9mIGg/ZC50ZXh0Q29udGVudCE9PWgmJihhPVtcImNoaWxkcmVuXCIsaF0pOlwibnVtYmVyXCI9PT10eXBlb2YgaCYmZC50ZXh0Q29udGVudCE9PVwiXCIraCYmKGE9W1wiY2hpbGRyZW5cIixcIlwiK2hdKTp2YS5oYXNPd25Qcm9wZXJ0eShnKSYmbnVsbCE9aCYmcmQoYyxnKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoZCk7RWIoZCxmLCEwKTticmVhaztjYXNlIFwidGV4dGFyZWFcIjp4YihkKTtMYihkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Y2FzZSBcIm9wdGlvblwiOmJyZWFrO2RlZmF1bHQ6XCJmdW5jdGlvblwiPT09dHlwZW9mIGYub25DbGljayYmXG4oZC5vbmNsaWNrPXNkKX1jPWE7Yi51cGRhdGVRdWV1ZT1jO251bGwhPT1jJiYoYi5lZmZlY3RUYWd8PTQpfWVsc2V7Zz05PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudDthPT09cWQmJihhPU5iKGUpKTthPT09cWQ/XCJzY3JpcHRcIj09PWU/KGE9Zy5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLGEuaW5uZXJIVE1MPVwiPHNjcmlwdD5cXHgzYy9zY3JpcHQ+XCIsYT1hLnJlbW92ZUNoaWxkKGEuZmlyc3RDaGlsZCkpOlwic3RyaW5nXCI9PT10eXBlb2YgZC5pcz9hPWcuY3JlYXRlRWxlbWVudChlLHtpczpkLmlzfSk6KGE9Zy5jcmVhdGVFbGVtZW50KGUpLFwic2VsZWN0XCI9PT1lJiYoZz1hLGQubXVsdGlwbGU/Zy5tdWx0aXBsZT0hMDpkLnNpemUmJihnLnNpemU9ZC5zaXplKSkpOmE9Zy5jcmVhdGVFbGVtZW50TlMoYSxlKTthW01kXT1iO2FbTmRdPWQ7bmkoYSxiLCExLCExKTtiLnN0YXRlTm9kZT1hO2c9cGQoZSxkKTtzd2l0Y2goZSl7Y2FzZSBcImlmcmFtZVwiOmNhc2UgXCJvYmplY3RcIjpjYXNlIFwiZW1iZWRcIjpGKFwibG9hZFwiLFxuYSk7aD1kO2JyZWFrO2Nhc2UgXCJ2aWRlb1wiOmNhc2UgXCJhdWRpb1wiOmZvcihoPTA7aDxhYy5sZW5ndGg7aCsrKUYoYWNbaF0sYSk7aD1kO2JyZWFrO2Nhc2UgXCJzb3VyY2VcIjpGKFwiZXJyb3JcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImltZ1wiOmNhc2UgXCJpbWFnZVwiOmNhc2UgXCJsaW5rXCI6RihcImVycm9yXCIsYSk7RihcImxvYWRcIixhKTtoPWQ7YnJlYWs7Y2FzZSBcImZvcm1cIjpGKFwicmVzZXRcIixhKTtGKFwic3VibWl0XCIsYSk7aD1kO2JyZWFrO2Nhc2UgXCJkZXRhaWxzXCI6RihcInRvZ2dsZVwiLGEpO2g9ZDticmVhaztjYXNlIFwiaW5wdXRcIjpBYihhLGQpO2g9emIoYSxkKTtGKFwiaW52YWxpZFwiLGEpO3JkKGMsXCJvbkNoYW5nZVwiKTticmVhaztjYXNlIFwib3B0aW9uXCI6aD1HYihhLGQpO2JyZWFrO2Nhc2UgXCJzZWxlY3RcIjphLl93cmFwcGVyU3RhdGU9e3dhc011bHRpcGxlOiEhZC5tdWx0aXBsZX07aD1uKHt9LGQse3ZhbHVlOnZvaWQgMH0pO0YoXCJpbnZhbGlkXCIsYSk7cmQoYyxcIm9uQ2hhbmdlXCIpO2JyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOkpiKGEsXG5kKTtoPUliKGEsZCk7RihcImludmFsaWRcIixhKTtyZChjLFwib25DaGFuZ2VcIik7YnJlYWs7ZGVmYXVsdDpoPWR9b2QoZSxoKTt2YXIgaz1oO2ZvcihmIGluIGspaWYoay5oYXNPd25Qcm9wZXJ0eShmKSl7dmFyIGw9a1tmXTtcInN0eWxlXCI9PT1mP21kKGEsbCk6XCJkYW5nZXJvdXNseVNldElubmVySFRNTFwiPT09Zj8obD1sP2wuX19odG1sOnZvaWQgMCxudWxsIT1sJiZRYihhLGwpKTpcImNoaWxkcmVuXCI9PT1mP1wic3RyaW5nXCI9PT10eXBlb2YgbD8oXCJ0ZXh0YXJlYVwiIT09ZXx8XCJcIiE9PWwpJiZSYihhLGwpOlwibnVtYmVyXCI9PT10eXBlb2YgbCYmUmIoYSxcIlwiK2wpOlwic3VwcHJlc3NDb250ZW50RWRpdGFibGVXYXJuaW5nXCIhPT1mJiZcInN1cHByZXNzSHlkcmF0aW9uV2FybmluZ1wiIT09ZiYmXCJhdXRvRm9jdXNcIiE9PWYmJih2YS5oYXNPd25Qcm9wZXJ0eShmKT9udWxsIT1sJiZyZChjLGYpOm51bGwhPWwmJlhhKGEsZixsLGcpKX1zd2l0Y2goZSl7Y2FzZSBcImlucHV0XCI6eGIoYSk7RWIoYSxkLCExKTtcbmJyZWFrO2Nhc2UgXCJ0ZXh0YXJlYVwiOnhiKGEpO0xiKGEpO2JyZWFrO2Nhc2UgXCJvcHRpb25cIjpudWxsIT1kLnZhbHVlJiZhLnNldEF0dHJpYnV0ZShcInZhbHVlXCIsXCJcIityYihkLnZhbHVlKSk7YnJlYWs7Y2FzZSBcInNlbGVjdFwiOmEubXVsdGlwbGU9ISFkLm11bHRpcGxlO2M9ZC52YWx1ZTtudWxsIT1jP0hiKGEsISFkLm11bHRpcGxlLGMsITEpOm51bGwhPWQuZGVmYXVsdFZhbHVlJiZIYihhLCEhZC5tdWx0aXBsZSxkLmRlZmF1bHRWYWx1ZSwhMCk7YnJlYWs7ZGVmYXVsdDpcImZ1bmN0aW9uXCI9PT10eXBlb2YgaC5vbkNsaWNrJiYoYS5vbmNsaWNrPXNkKX1GZChlLGQpJiYoYi5lZmZlY3RUYWd8PTQpfW51bGwhPT1iLnJlZiYmKGIuZWZmZWN0VGFnfD0xMjgpfXJldHVybiBudWxsO2Nhc2UgNjppZihhJiZudWxsIT1iLnN0YXRlTm9kZSlxaShhLGIsYS5tZW1vaXplZFByb3BzLGQpO2Vsc2V7aWYoXCJzdHJpbmdcIiE9PXR5cGVvZiBkJiZudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjYpKTtcbmM9Y2goYmguY3VycmVudCk7Y2goJGcuY3VycmVudCk7V2goYik/KGM9Yi5zdGF0ZU5vZGUsZD1iLm1lbW9pemVkUHJvcHMsY1tNZF09YixjLm5vZGVWYWx1ZSE9PWQmJihiLmVmZmVjdFRhZ3w9NCkpOihjPSg5PT09Yy5ub2RlVHlwZT9jOmMub3duZXJEb2N1bWVudCkuY3JlYXRlVGV4dE5vZGUoZCksY1tNZF09YixiLnN0YXRlTm9kZT1jKX1yZXR1cm4gbnVsbDtjYXNlIDEzOkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYoMCE9PShiLmVmZmVjdFRhZyY2NCkpcmV0dXJuIGIuZXhwaXJhdGlvblRpbWU9YyxiO2M9bnVsbCE9PWQ7ZD0hMTtudWxsPT09YT92b2lkIDAhPT1iLm1lbW9pemVkUHJvcHMuZmFsbGJhY2smJldoKGIpOihlPWEubWVtb2l6ZWRTdGF0ZSxkPW51bGwhPT1lLGN8fG51bGw9PT1lfHwoZT1hLmNoaWxkLnNpYmxpbmcsbnVsbCE9PWUmJihmPWIuZmlyc3RFZmZlY3QsbnVsbCE9PWY/KGIuZmlyc3RFZmZlY3Q9ZSxlLm5leHRFZmZlY3Q9Zik6KGIuZmlyc3RFZmZlY3Q9Yi5sYXN0RWZmZWN0PVxuZSxlLm5leHRFZmZlY3Q9bnVsbCksZS5lZmZlY3RUYWc9OCkpKTtpZihjJiYhZCYmMCE9PShiLm1vZGUmMikpaWYobnVsbD09PWEmJiEwIT09Yi5tZW1vaXplZFByb3BzLnVuc3RhYmxlX2F2b2lkVGhpc0ZhbGxiYWNrfHwwIT09KE0uY3VycmVudCYxKSlTPT09dGkmJihTPXVpKTtlbHNle2lmKFM9PT10aXx8Uz09PXVpKVM9dmk7MCE9PXdpJiZudWxsIT09VCYmKHhpKFQsVSkseWkoVCx3aSkpfWlmKGN8fGQpYi5lZmZlY3RUYWd8PTQ7cmV0dXJuIG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG9pKGIpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYiksbnVsbDtjYXNlIDE3OnJldHVybiBMKGIudHlwZSkmJkRmKCksbnVsbDtjYXNlIDE5OkgoTSk7ZD1iLm1lbW9pemVkU3RhdGU7aWYobnVsbD09PWQpcmV0dXJuIG51bGw7ZT0wIT09KGIuZWZmZWN0VGFnJjY0KTtmPWQucmVuZGVyaW5nO2lmKG51bGw9PT1mKWlmKGUpcmkoZCwhMSk7ZWxzZXtpZihTIT09dGl8fG51bGwhPT1hJiYwIT09KGEuZWZmZWN0VGFnJlxuNjQpKWZvcihmPWIuY2hpbGQ7bnVsbCE9PWY7KXthPWhoKGYpO2lmKG51bGwhPT1hKXtiLmVmZmVjdFRhZ3w9NjQ7cmkoZCwhMSk7ZT1hLnVwZGF0ZVF1ZXVlO251bGwhPT1lJiYoYi51cGRhdGVRdWV1ZT1lLGIuZWZmZWN0VGFnfD00KTtudWxsPT09ZC5sYXN0RWZmZWN0JiYoYi5maXJzdEVmZmVjdD1udWxsKTtiLmxhc3RFZmZlY3Q9ZC5sYXN0RWZmZWN0O2ZvcihkPWIuY2hpbGQ7bnVsbCE9PWQ7KWU9ZCxmPWMsZS5lZmZlY3RUYWcmPTIsZS5uZXh0RWZmZWN0PW51bGwsZS5maXJzdEVmZmVjdD1udWxsLGUubGFzdEVmZmVjdD1udWxsLGE9ZS5hbHRlcm5hdGUsbnVsbD09PWE/KGUuY2hpbGRFeHBpcmF0aW9uVGltZT0wLGUuZXhwaXJhdGlvblRpbWU9ZixlLmNoaWxkPW51bGwsZS5tZW1vaXplZFByb3BzPW51bGwsZS5tZW1vaXplZFN0YXRlPW51bGwsZS51cGRhdGVRdWV1ZT1udWxsLGUuZGVwZW5kZW5jaWVzPW51bGwpOihlLmNoaWxkRXhwaXJhdGlvblRpbWU9YS5jaGlsZEV4cGlyYXRpb25UaW1lLFxuZS5leHBpcmF0aW9uVGltZT1hLmV4cGlyYXRpb25UaW1lLGUuY2hpbGQ9YS5jaGlsZCxlLm1lbW9pemVkUHJvcHM9YS5tZW1vaXplZFByb3BzLGUubWVtb2l6ZWRTdGF0ZT1hLm1lbW9pemVkU3RhdGUsZS51cGRhdGVRdWV1ZT1hLnVwZGF0ZVF1ZXVlLGY9YS5kZXBlbmRlbmNpZXMsZS5kZXBlbmRlbmNpZXM9bnVsbD09PWY/bnVsbDp7ZXhwaXJhdGlvblRpbWU6Zi5leHBpcmF0aW9uVGltZSxmaXJzdENvbnRleHQ6Zi5maXJzdENvbnRleHQscmVzcG9uZGVyczpmLnJlc3BvbmRlcnN9KSxkPWQuc2libGluZztJKE0sTS5jdXJyZW50JjF8Mik7cmV0dXJuIGIuY2hpbGR9Zj1mLnNpYmxpbmd9fWVsc2V7aWYoIWUpaWYoYT1oaChmKSxudWxsIT09YSl7aWYoYi5lZmZlY3RUYWd8PTY0LGU9ITAsYz1hLnVwZGF0ZVF1ZXVlLG51bGwhPT1jJiYoYi51cGRhdGVRdWV1ZT1jLGIuZWZmZWN0VGFnfD00KSxyaShkLCEwKSxudWxsPT09ZC50YWlsJiZcImhpZGRlblwiPT09ZC50YWlsTW9kZSYmIWYuYWx0ZXJuYXRlKXJldHVybiBiPVxuYi5sYXN0RWZmZWN0PWQubGFzdEVmZmVjdCxudWxsIT09YiYmKGIubmV4dEVmZmVjdD1udWxsKSxudWxsfWVsc2UgMiokZigpLWQucmVuZGVyaW5nU3RhcnRUaW1lPmQudGFpbEV4cGlyYXRpb24mJjE8YyYmKGIuZWZmZWN0VGFnfD02NCxlPSEwLHJpKGQsITEpLGIuZXhwaXJhdGlvblRpbWU9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPWMtMSk7ZC5pc0JhY2t3YXJkcz8oZi5zaWJsaW5nPWIuY2hpbGQsYi5jaGlsZD1mKTooYz1kLmxhc3QsbnVsbCE9PWM/Yy5zaWJsaW5nPWY6Yi5jaGlsZD1mLGQubGFzdD1mKX1yZXR1cm4gbnVsbCE9PWQudGFpbD8oMD09PWQudGFpbEV4cGlyYXRpb24mJihkLnRhaWxFeHBpcmF0aW9uPSRmKCkrNTAwKSxjPWQudGFpbCxkLnJlbmRlcmluZz1jLGQudGFpbD1jLnNpYmxpbmcsZC5sYXN0RWZmZWN0PWIubGFzdEVmZmVjdCxkLnJlbmRlcmluZ1N0YXJ0VGltZT0kZigpLGMuc2libGluZz1udWxsLGI9TS5jdXJyZW50LEkoTSxlP2ImMXwyOmImMSksYyk6bnVsbH10aHJvdyBFcnJvcih1KDE1NixcbmIudGFnKSk7fWZ1bmN0aW9uIHppKGEpe3N3aXRjaChhLnRhZyl7Y2FzZSAxOkwoYS50eXBlKSYmRGYoKTt2YXIgYj1hLmVmZmVjdFRhZztyZXR1cm4gYiY0MDk2PyhhLmVmZmVjdFRhZz1iJi00MDk3fDY0LGEpOm51bGw7Y2FzZSAzOmVoKCk7SChLKTtIKEopO2I9YS5lZmZlY3RUYWc7aWYoMCE9PShiJjY0KSl0aHJvdyBFcnJvcih1KDI4NSkpO2EuZWZmZWN0VGFnPWImLTQwOTd8NjQ7cmV0dXJuIGE7Y2FzZSA1OnJldHVybiBnaChhKSxudWxsO2Nhc2UgMTM6cmV0dXJuIEgoTSksYj1hLmVmZmVjdFRhZyxiJjQwOTY/KGEuZWZmZWN0VGFnPWImLTQwOTd8NjQsYSk6bnVsbDtjYXNlIDE5OnJldHVybiBIKE0pLG51bGw7Y2FzZSA0OnJldHVybiBlaCgpLG51bGw7Y2FzZSAxMDpyZXR1cm4gb2coYSksbnVsbDtkZWZhdWx0OnJldHVybiBudWxsfX1mdW5jdGlvbiBBaShhLGIpe3JldHVybnt2YWx1ZTphLHNvdXJjZTpiLHN0YWNrOnFiKGIpfX1cbnZhciBCaT1cImZ1bmN0aW9uXCI9PT10eXBlb2YgV2Vha1NldD9XZWFrU2V0OlNldDtmdW5jdGlvbiBDaShhLGIpe3ZhciBjPWIuc291cmNlLGQ9Yi5zdGFjaztudWxsPT09ZCYmbnVsbCE9PWMmJihkPXFiKGMpKTtudWxsIT09YyYmcGIoYy50eXBlKTtiPWIudmFsdWU7bnVsbCE9PWEmJjE9PT1hLnRhZyYmcGIoYS50eXBlKTt0cnl7Y29uc29sZS5lcnJvcihiKX1jYXRjaChlKXtzZXRUaW1lb3V0KGZ1bmN0aW9uKCl7dGhyb3cgZTt9KX19ZnVuY3Rpb24gRGkoYSxiKXt0cnl7Yi5wcm9wcz1hLm1lbW9pemVkUHJvcHMsYi5zdGF0ZT1hLm1lbW9pemVkU3RhdGUsYi5jb21wb25lbnRXaWxsVW5tb3VudCgpfWNhdGNoKGMpe0VpKGEsYyl9fWZ1bmN0aW9uIEZpKGEpe3ZhciBiPWEucmVmO2lmKG51bGwhPT1iKWlmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBiKXRyeXtiKG51bGwpfWNhdGNoKGMpe0VpKGEsYyl9ZWxzZSBiLmN1cnJlbnQ9bnVsbH1cbmZ1bmN0aW9uIEdpKGEsYil7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE1OmNhc2UgMjI6cmV0dXJuO2Nhc2UgMTppZihiLmVmZmVjdFRhZyYyNTYmJm51bGwhPT1hKXt2YXIgYz1hLm1lbW9pemVkUHJvcHMsZD1hLm1lbW9pemVkU3RhdGU7YT1iLnN0YXRlTm9kZTtiPWEuZ2V0U25hcHNob3RCZWZvcmVVcGRhdGUoYi5lbGVtZW50VHlwZT09PWIudHlwZT9jOmlnKGIudHlwZSxjKSxkKTthLl9fcmVhY3RJbnRlcm5hbFNuYXBzaG90QmVmb3JlVXBkYXRlPWJ9cmV0dXJuO2Nhc2UgMzpjYXNlIDU6Y2FzZSA2OmNhc2UgNDpjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31cbmZ1bmN0aW9uIEhpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuZGVzdHJveTtjLmRlc3Ryb3k9dm9pZCAwO3ZvaWQgMCE9PWQmJmQoKX1jPWMubmV4dH13aGlsZShjIT09Yil9fWZ1bmN0aW9uIElpKGEsYil7Yj1iLnVwZGF0ZVF1ZXVlO2I9bnVsbCE9PWI/Yi5sYXN0RWZmZWN0Om51bGw7aWYobnVsbCE9PWIpe3ZhciBjPWI9Yi5uZXh0O2Rve2lmKChjLnRhZyZhKT09PWEpe3ZhciBkPWMuY3JlYXRlO2MuZGVzdHJveT1kKCl9Yz1jLm5leHR9d2hpbGUoYyE9PWIpfX1cbmZ1bmN0aW9uIEppKGEsYixjKXtzd2l0Y2goYy50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTU6Y2FzZSAyMjpJaSgzLGMpO3JldHVybjtjYXNlIDE6YT1jLnN0YXRlTm9kZTtpZihjLmVmZmVjdFRhZyY0KWlmKG51bGw9PT1iKWEuY29tcG9uZW50RGlkTW91bnQoKTtlbHNle3ZhciBkPWMuZWxlbWVudFR5cGU9PT1jLnR5cGU/Yi5tZW1vaXplZFByb3BzOmlnKGMudHlwZSxiLm1lbW9pemVkUHJvcHMpO2EuY29tcG9uZW50RGlkVXBkYXRlKGQsYi5tZW1vaXplZFN0YXRlLGEuX19yZWFjdEludGVybmFsU25hcHNob3RCZWZvcmVVcGRhdGUpfWI9Yy51cGRhdGVRdWV1ZTtudWxsIT09YiYmQ2coYyxiLGEpO3JldHVybjtjYXNlIDM6Yj1jLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthPW51bGw7aWYobnVsbCE9PWMuY2hpbGQpc3dpdGNoKGMuY2hpbGQudGFnKXtjYXNlIDU6YT1jLmNoaWxkLnN0YXRlTm9kZTticmVhaztjYXNlIDE6YT1jLmNoaWxkLnN0YXRlTm9kZX1DZyhjLGIsYSl9cmV0dXJuO1xuY2FzZSA1OmE9Yy5zdGF0ZU5vZGU7bnVsbD09PWImJmMuZWZmZWN0VGFnJjQmJkZkKGMudHlwZSxjLm1lbW9pemVkUHJvcHMpJiZhLmZvY3VzKCk7cmV0dXJuO2Nhc2UgNjpyZXR1cm47Y2FzZSA0OnJldHVybjtjYXNlIDEyOnJldHVybjtjYXNlIDEzOm51bGw9PT1jLm1lbW9pemVkU3RhdGUmJihjPWMuYWx0ZXJuYXRlLG51bGwhPT1jJiYoYz1jLm1lbW9pemVkU3RhdGUsbnVsbCE9PWMmJihjPWMuZGVoeWRyYXRlZCxudWxsIT09YyYmVmMoYykpKSk7cmV0dXJuO2Nhc2UgMTk6Y2FzZSAxNzpjYXNlIDIwOmNhc2UgMjE6cmV0dXJufXRocm93IEVycm9yKHUoMTYzKSk7fVxuZnVuY3Rpb24gS2koYSxiLGMpe1wiZnVuY3Rpb25cIj09PXR5cGVvZiBMaSYmTGkoYik7c3dpdGNoKGIudGFnKXtjYXNlIDA6Y2FzZSAxMTpjYXNlIDE0OmNhc2UgMTU6Y2FzZSAyMjphPWIudXBkYXRlUXVldWU7aWYobnVsbCE9PWEmJihhPWEubGFzdEVmZmVjdCxudWxsIT09YSkpe3ZhciBkPWEubmV4dDtjZyg5NzxjPzk3OmMsZnVuY3Rpb24oKXt2YXIgYT1kO2Rve3ZhciBjPWEuZGVzdHJveTtpZih2b2lkIDAhPT1jKXt2YXIgZz1iO3RyeXtjKCl9Y2F0Y2goaCl7RWkoZyxoKX19YT1hLm5leHR9d2hpbGUoYSE9PWQpfSl9YnJlYWs7Y2FzZSAxOkZpKGIpO2M9Yi5zdGF0ZU5vZGU7XCJmdW5jdGlvblwiPT09dHlwZW9mIGMuY29tcG9uZW50V2lsbFVubW91bnQmJkRpKGIsYyk7YnJlYWs7Y2FzZSA1OkZpKGIpO2JyZWFrO2Nhc2UgNDpNaShhLGIsYyl9fVxuZnVuY3Rpb24gTmkoYSl7dmFyIGI9YS5hbHRlcm5hdGU7YS5yZXR1cm49bnVsbDthLmNoaWxkPW51bGw7YS5tZW1vaXplZFN0YXRlPW51bGw7YS51cGRhdGVRdWV1ZT1udWxsO2EuZGVwZW5kZW5jaWVzPW51bGw7YS5hbHRlcm5hdGU9bnVsbDthLmZpcnN0RWZmZWN0PW51bGw7YS5sYXN0RWZmZWN0PW51bGw7YS5wZW5kaW5nUHJvcHM9bnVsbDthLm1lbW9pemVkUHJvcHM9bnVsbDthLnN0YXRlTm9kZT1udWxsO251bGwhPT1iJiZOaShiKX1mdW5jdGlvbiBPaShhKXtyZXR1cm4gNT09PWEudGFnfHwzPT09YS50YWd8fDQ9PT1hLnRhZ31cbmZ1bmN0aW9uIFBpKGEpe2E6e2Zvcih2YXIgYj1hLnJldHVybjtudWxsIT09Yjspe2lmKE9pKGIpKXt2YXIgYz1iO2JyZWFrIGF9Yj1iLnJldHVybn10aHJvdyBFcnJvcih1KDE2MCkpO31iPWMuc3RhdGVOb2RlO3N3aXRjaChjLnRhZyl7Y2FzZSA1OnZhciBkPSExO2JyZWFrO2Nhc2UgMzpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2Nhc2UgNDpiPWIuY29udGFpbmVySW5mbztkPSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgxNjEpKTt9Yy5lZmZlY3RUYWcmMTYmJihSYihiLFwiXCIpLGMuZWZmZWN0VGFnJj0tMTcpO2E6Yjpmb3IoYz1hOzspe2Zvcig7bnVsbD09PWMuc2libGluZzspe2lmKG51bGw9PT1jLnJldHVybnx8T2koYy5yZXR1cm4pKXtjPW51bGw7YnJlYWsgYX1jPWMucmV0dXJufWMuc2libGluZy5yZXR1cm49Yy5yZXR1cm47Zm9yKGM9Yy5zaWJsaW5nOzUhPT1jLnRhZyYmNiE9PWMudGFnJiYxOCE9PWMudGFnOyl7aWYoYy5lZmZlY3RUYWcmMiljb250aW51ZSBiO1xuaWYobnVsbD09PWMuY2hpbGR8fDQ9PT1jLnRhZyljb250aW51ZSBiO2Vsc2UgYy5jaGlsZC5yZXR1cm49YyxjPWMuY2hpbGR9aWYoIShjLmVmZmVjdFRhZyYyKSl7Yz1jLnN0YXRlTm9kZTticmVhayBhfX1kP1FpKGEsYyxiKTpSaShhLGMsYil9XG5mdW5jdGlvbiBRaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj84PT09Yy5ub2RlVHlwZT9jLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKGEsYik6Yy5pbnNlcnRCZWZvcmUoYSxiKTooOD09PWMubm9kZVR5cGU/KGI9Yy5wYXJlbnROb2RlLGIuaW5zZXJ0QmVmb3JlKGEsYykpOihiPWMsYi5hcHBlbmRDaGlsZChhKSksYz1jLl9yZWFjdFJvb3RDb250YWluZXIsbnVsbCE9PWMmJnZvaWQgMCE9PWN8fG51bGwhPT1iLm9uY2xpY2t8fChiLm9uY2xpY2s9c2QpKTtlbHNlIGlmKDQhPT1kJiYoYT1hLmNoaWxkLG51bGwhPT1hKSlmb3IoUWkoYSxiLGMpLGE9YS5zaWJsaW5nO251bGwhPT1hOylRaShhLGIsYyksYT1hLnNpYmxpbmd9XG5mdW5jdGlvbiBSaShhLGIsYyl7dmFyIGQ9YS50YWcsZT01PT09ZHx8Nj09PWQ7aWYoZSlhPWU/YS5zdGF0ZU5vZGU6YS5zdGF0ZU5vZGUuaW5zdGFuY2UsYj9jLmluc2VydEJlZm9yZShhLGIpOmMuYXBwZW5kQ2hpbGQoYSk7ZWxzZSBpZig0IT09ZCYmKGE9YS5jaGlsZCxudWxsIT09YSkpZm9yKFJpKGEsYixjKSxhPWEuc2libGluZztudWxsIT09YTspUmkoYSxiLGMpLGE9YS5zaWJsaW5nfVxuZnVuY3Rpb24gTWkoYSxiLGMpe2Zvcih2YXIgZD1iLGU9ITEsZixnOzspe2lmKCFlKXtlPWQucmV0dXJuO2E6Zm9yKDs7KXtpZihudWxsPT09ZSl0aHJvdyBFcnJvcih1KDE2MCkpO2Y9ZS5zdGF0ZU5vZGU7c3dpdGNoKGUudGFnKXtjYXNlIDU6Zz0hMTticmVhayBhO2Nhc2UgMzpmPWYuY29udGFpbmVySW5mbztnPSEwO2JyZWFrIGE7Y2FzZSA0OmY9Zi5jb250YWluZXJJbmZvO2c9ITA7YnJlYWsgYX1lPWUucmV0dXJufWU9ITB9aWYoNT09PWQudGFnfHw2PT09ZC50YWcpe2E6Zm9yKHZhciBoPWEsaz1kLGw9YyxtPWs7OylpZihLaShoLG0sbCksbnVsbCE9PW0uY2hpbGQmJjQhPT1tLnRhZyltLmNoaWxkLnJldHVybj1tLG09bS5jaGlsZDtlbHNle2lmKG09PT1rKWJyZWFrIGE7Zm9yKDtudWxsPT09bS5zaWJsaW5nOyl7aWYobnVsbD09PW0ucmV0dXJufHxtLnJldHVybj09PWspYnJlYWsgYTttPW0ucmV0dXJufW0uc2libGluZy5yZXR1cm49bS5yZXR1cm47bT1tLnNpYmxpbmd9Zz8oaD1cbmYsaz1kLnN0YXRlTm9kZSw4PT09aC5ub2RlVHlwZT9oLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoayk6aC5yZW1vdmVDaGlsZChrKSk6Zi5yZW1vdmVDaGlsZChkLnN0YXRlTm9kZSl9ZWxzZSBpZig0PT09ZC50YWcpe2lmKG51bGwhPT1kLmNoaWxkKXtmPWQuc3RhdGVOb2RlLmNvbnRhaW5lckluZm87Zz0hMDtkLmNoaWxkLnJldHVybj1kO2Q9ZC5jaGlsZDtjb250aW51ZX19ZWxzZSBpZihLaShhLGQsYyksbnVsbCE9PWQuY2hpbGQpe2QuY2hpbGQucmV0dXJuPWQ7ZD1kLmNoaWxkO2NvbnRpbnVlfWlmKGQ9PT1iKWJyZWFrO2Zvcig7bnVsbD09PWQuc2libGluZzspe2lmKG51bGw9PT1kLnJldHVybnx8ZC5yZXR1cm49PT1iKXJldHVybjtkPWQucmV0dXJuOzQ9PT1kLnRhZyYmKGU9ITEpfWQuc2libGluZy5yZXR1cm49ZC5yZXR1cm47ZD1kLnNpYmxpbmd9fVxuZnVuY3Rpb24gU2koYSxiKXtzd2l0Y2goYi50YWcpe2Nhc2UgMDpjYXNlIDExOmNhc2UgMTQ6Y2FzZSAxNTpjYXNlIDIyOkhpKDMsYik7cmV0dXJuO2Nhc2UgMTpyZXR1cm47Y2FzZSA1OnZhciBjPWIuc3RhdGVOb2RlO2lmKG51bGwhPWMpe3ZhciBkPWIubWVtb2l6ZWRQcm9wcyxlPW51bGwhPT1hP2EubWVtb2l6ZWRQcm9wczpkO2E9Yi50eXBlO3ZhciBmPWIudXBkYXRlUXVldWU7Yi51cGRhdGVRdWV1ZT1udWxsO2lmKG51bGwhPT1mKXtjW05kXT1kO1wiaW5wdXRcIj09PWEmJlwicmFkaW9cIj09PWQudHlwZSYmbnVsbCE9ZC5uYW1lJiZCYihjLGQpO3BkKGEsZSk7Yj1wZChhLGQpO2ZvcihlPTA7ZTxmLmxlbmd0aDtlKz0yKXt2YXIgZz1mW2VdLGg9ZltlKzFdO1wic3R5bGVcIj09PWc/bWQoYyxoKTpcImRhbmdlcm91c2x5U2V0SW5uZXJIVE1MXCI9PT1nP1FiKGMsaCk6XCJjaGlsZHJlblwiPT09Zz9SYihjLGgpOlhhKGMsZyxoLGIpfXN3aXRjaChhKXtjYXNlIFwiaW5wdXRcIjpDYihjLGQpO2JyZWFrO1xuY2FzZSBcInRleHRhcmVhXCI6S2IoYyxkKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLl93cmFwcGVyU3RhdGUud2FzTXVsdGlwbGUsYy5fd3JhcHBlclN0YXRlLndhc011bHRpcGxlPSEhZC5tdWx0aXBsZSxhPWQudmFsdWUsbnVsbCE9YT9IYihjLCEhZC5tdWx0aXBsZSxhLCExKTpiIT09ISFkLm11bHRpcGxlJiYobnVsbCE9ZC5kZWZhdWx0VmFsdWU/SGIoYywhIWQubXVsdGlwbGUsZC5kZWZhdWx0VmFsdWUsITApOkhiKGMsISFkLm11bHRpcGxlLGQubXVsdGlwbGU/W106XCJcIiwhMSkpfX19cmV0dXJuO2Nhc2UgNjppZihudWxsPT09Yi5zdGF0ZU5vZGUpdGhyb3cgRXJyb3IodSgxNjIpKTtiLnN0YXRlTm9kZS5ub2RlVmFsdWU9Yi5tZW1vaXplZFByb3BzO3JldHVybjtjYXNlIDM6Yj1iLnN0YXRlTm9kZTtiLmh5ZHJhdGUmJihiLmh5ZHJhdGU9ITEsVmMoYi5jb250YWluZXJJbmZvKSk7cmV0dXJuO2Nhc2UgMTI6cmV0dXJuO2Nhc2UgMTM6Yz1iO251bGw9PT1iLm1lbW9pemVkU3RhdGU/XG5kPSExOihkPSEwLGM9Yi5jaGlsZCxUaT0kZigpKTtpZihudWxsIT09YylhOmZvcihhPWM7Oyl7aWYoNT09PWEudGFnKWY9YS5zdGF0ZU5vZGUsZD8oZj1mLnN0eWxlLFwiZnVuY3Rpb25cIj09PXR5cGVvZiBmLnNldFByb3BlcnR5P2Yuc2V0UHJvcGVydHkoXCJkaXNwbGF5XCIsXCJub25lXCIsXCJpbXBvcnRhbnRcIik6Zi5kaXNwbGF5PVwibm9uZVwiKTooZj1hLnN0YXRlTm9kZSxlPWEubWVtb2l6ZWRQcm9wcy5zdHlsZSxlPXZvaWQgMCE9PWUmJm51bGwhPT1lJiZlLmhhc093blByb3BlcnR5KFwiZGlzcGxheVwiKT9lLmRpc3BsYXk6bnVsbCxmLnN0eWxlLmRpc3BsYXk9bGQoXCJkaXNwbGF5XCIsZSkpO2Vsc2UgaWYoNj09PWEudGFnKWEuc3RhdGVOb2RlLm5vZGVWYWx1ZT1kP1wiXCI6YS5tZW1vaXplZFByb3BzO2Vsc2UgaWYoMTM9PT1hLnRhZyYmbnVsbCE9PWEubWVtb2l6ZWRTdGF0ZSYmbnVsbD09PWEubWVtb2l6ZWRTdGF0ZS5kZWh5ZHJhdGVkKXtmPWEuY2hpbGQuc2libGluZztmLnJldHVybj1hO2E9XG5mO2NvbnRpbnVlfWVsc2UgaWYobnVsbCE9PWEuY2hpbGQpe2EuY2hpbGQucmV0dXJuPWE7YT1hLmNoaWxkO2NvbnRpbnVlfWlmKGE9PT1jKWJyZWFrO2Zvcig7bnVsbD09PWEuc2libGluZzspe2lmKG51bGw9PT1hLnJldHVybnx8YS5yZXR1cm49PT1jKWJyZWFrIGE7YT1hLnJldHVybn1hLnNpYmxpbmcucmV0dXJuPWEucmV0dXJuO2E9YS5zaWJsaW5nfVVpKGIpO3JldHVybjtjYXNlIDE5OlVpKGIpO3JldHVybjtjYXNlIDE3OnJldHVybn10aHJvdyBFcnJvcih1KDE2MykpO31mdW5jdGlvbiBVaShhKXt2YXIgYj1hLnVwZGF0ZVF1ZXVlO2lmKG51bGwhPT1iKXthLnVwZGF0ZVF1ZXVlPW51bGw7dmFyIGM9YS5zdGF0ZU5vZGU7bnVsbD09PWMmJihjPWEuc3RhdGVOb2RlPW5ldyBCaSk7Yi5mb3JFYWNoKGZ1bmN0aW9uKGIpe3ZhciBkPVZpLmJpbmQobnVsbCxhLGIpO2MuaGFzKGIpfHwoYy5hZGQoYiksYi50aGVuKGQsZCkpfSl9fVxudmFyIFdpPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBXZWFrTWFwP1dlYWtNYXA6TWFwO2Z1bmN0aW9uIFhpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9MztjLnBheWxvYWQ9e2VsZW1lbnQ6bnVsbH07dmFyIGQ9Yi52YWx1ZTtjLmNhbGxiYWNrPWZ1bmN0aW9uKCl7WWl8fChZaT0hMCxaaT1kKTtDaShhLGIpfTtyZXR1cm4gY31cbmZ1bmN0aW9uICRpKGEsYixjKXtjPXdnKGMsbnVsbCk7Yy50YWc9Mzt2YXIgZD1hLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBkKXt2YXIgZT1iLnZhbHVlO2MucGF5bG9hZD1mdW5jdGlvbigpe0NpKGEsYik7cmV0dXJuIGQoZSl9fXZhciBmPWEuc3RhdGVOb2RlO251bGwhPT1mJiZcImZ1bmN0aW9uXCI9PT10eXBlb2YgZi5jb21wb25lbnREaWRDYXRjaCYmKGMuY2FsbGJhY2s9ZnVuY3Rpb24oKXtcImZ1bmN0aW9uXCIhPT10eXBlb2YgZCYmKG51bGw9PT1haj9haj1uZXcgU2V0KFt0aGlzXSk6YWouYWRkKHRoaXMpLENpKGEsYikpO3ZhciBjPWIuc3RhY2s7dGhpcy5jb21wb25lbnREaWRDYXRjaChiLnZhbHVlLHtjb21wb25lbnRTdGFjazpudWxsIT09Yz9jOlwiXCJ9KX0pO3JldHVybiBjfVxudmFyIGJqPU1hdGguY2VpbCxjaj1XYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGRqPVdhLlJlYWN0Q3VycmVudE93bmVyLFY9MCxlaj04LGZqPTE2LGdqPTMyLHRpPTAsaGo9MSxpaj0yLHVpPTMsdmk9NCxqaj01LFc9VixUPW51bGwsWD1udWxsLFU9MCxTPXRpLGtqPW51bGwsbGo9MTA3Mzc0MTgyMyxtaj0xMDczNzQxODIzLG5qPW51bGwsd2k9MCxvaj0hMSxUaT0wLHBqPTUwMCxZPW51bGwsWWk9ITEsWmk9bnVsbCxhaj1udWxsLHFqPSExLHJqPW51bGwsc2o9OTAsdGo9bnVsbCx1aj0wLHZqPW51bGwsd2o9MDtmdW5jdGlvbiBHZygpe3JldHVybihXJihmanxnaikpIT09Vj8xMDczNzQxODIxLSgkZigpLzEwfDApOjAhPT13aj93ajp3aj0xMDczNzQxODIxLSgkZigpLzEwfDApfVxuZnVuY3Rpb24gSGcoYSxiLGMpe2I9Yi5tb2RlO2lmKDA9PT0oYiYyKSlyZXR1cm4gMTA3Mzc0MTgyMzt2YXIgZD1hZygpO2lmKDA9PT0oYiY0KSlyZXR1cm4gOTk9PT1kPzEwNzM3NDE4MjM6MTA3Mzc0MTgyMjtpZigoVyZmaikhPT1WKXJldHVybiBVO2lmKG51bGwhPT1jKWE9aGcoYSxjLnRpbWVvdXRNc3wwfHw1RTMsMjUwKTtlbHNlIHN3aXRjaChkKXtjYXNlIDk5OmE9MTA3Mzc0MTgyMzticmVhaztjYXNlIDk4OmE9aGcoYSwxNTAsMTAwKTticmVhaztjYXNlIDk3OmNhc2UgOTY6YT1oZyhhLDVFMywyNTApO2JyZWFrO2Nhc2UgOTU6YT0yO2JyZWFrO2RlZmF1bHQ6dGhyb3cgRXJyb3IodSgzMjYpKTt9bnVsbCE9PVQmJmE9PT1VJiYtLWE7cmV0dXJuIGF9XG5mdW5jdGlvbiBJZyhhLGIpe2lmKDUwPHVqKXRocm93IHVqPTAsdmo9bnVsbCxFcnJvcih1KDE4NSkpO2E9eGooYSxiKTtpZihudWxsIT09YSl7dmFyIGM9YWcoKTsxMDczNzQxODIzPT09Yj8oVyZlaikhPT1WJiYoVyYoZmp8Z2opKT09PVY/eWooYSk6KFooYSksVz09PVYmJmdnKCkpOlooYSk7KFcmNCk9PT1WfHw5OCE9PWMmJjk5IT09Y3x8KG51bGw9PT10aj90aj1uZXcgTWFwKFtbYSxiXV0pOihjPXRqLmdldChhKSwodm9pZCAwPT09Y3x8Yz5iKSYmdGouc2V0KGEsYikpKX19XG5mdW5jdGlvbiB4aihhLGIpe2EuZXhwaXJhdGlvblRpbWU8YiYmKGEuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGM9YS5hbHRlcm5hdGU7bnVsbCE9PWMmJmMuZXhwaXJhdGlvblRpbWU8YiYmKGMuZXhwaXJhdGlvblRpbWU9Yik7dmFyIGQ9YS5yZXR1cm4sZT1udWxsO2lmKG51bGw9PT1kJiYzPT09YS50YWcpZT1hLnN0YXRlTm9kZTtlbHNlIGZvcig7bnVsbCE9PWQ7KXtjPWQuYWx0ZXJuYXRlO2QuY2hpbGRFeHBpcmF0aW9uVGltZTxiJiYoZC5jaGlsZEV4cGlyYXRpb25UaW1lPWIpO251bGwhPT1jJiZjLmNoaWxkRXhwaXJhdGlvblRpbWU8YiYmKGMuY2hpbGRFeHBpcmF0aW9uVGltZT1iKTtpZihudWxsPT09ZC5yZXR1cm4mJjM9PT1kLnRhZyl7ZT1kLnN0YXRlTm9kZTticmVha31kPWQucmV0dXJufW51bGwhPT1lJiYoVD09PWUmJihCZyhiKSxTPT09dmkmJnhpKGUsVSkpLHlpKGUsYikpO3JldHVybiBlfVxuZnVuY3Rpb24gemooYSl7dmFyIGI9YS5sYXN0RXhwaXJlZFRpbWU7aWYoMCE9PWIpcmV0dXJuIGI7Yj1hLmZpcnN0UGVuZGluZ1RpbWU7aWYoIUFqKGEsYikpcmV0dXJuIGI7dmFyIGM9YS5sYXN0UGluZ2VkVGltZTthPWEubmV4dEtub3duUGVuZGluZ0xldmVsO2E9Yz5hP2M6YTtyZXR1cm4gMj49YSYmYiE9PWE/MDphfVxuZnVuY3Rpb24gWihhKXtpZigwIT09YS5sYXN0RXhwaXJlZFRpbWUpYS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTEwNzM3NDE4MjMsYS5jYWxsYmFja1ByaW9yaXR5PTk5LGEuY2FsbGJhY2tOb2RlPWVnKHlqLmJpbmQobnVsbCxhKSk7ZWxzZXt2YXIgYj16aihhKSxjPWEuY2FsbGJhY2tOb2RlO2lmKDA9PT1iKW51bGwhPT1jJiYoYS5jYWxsYmFja05vZGU9bnVsbCxhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9MCxhLmNhbGxiYWNrUHJpb3JpdHk9OTApO2Vsc2V7dmFyIGQ9R2coKTsxMDczNzQxODIzPT09Yj9kPTk5OjE9PT1ifHwyPT09Yj9kPTk1OihkPTEwKigxMDczNzQxODIxLWIpLTEwKigxMDczNzQxODIxLWQpLGQ9MD49ZD85OToyNTA+PWQ/OTg6NTI1MD49ZD85Nzo5NSk7aWYobnVsbCE9PWMpe3ZhciBlPWEuY2FsbGJhY2tQcmlvcml0eTtpZihhLmNhbGxiYWNrRXhwaXJhdGlvblRpbWU9PT1iJiZlPj1kKXJldHVybjtjIT09VGYmJktmKGMpfWEuY2FsbGJhY2tFeHBpcmF0aW9uVGltZT1cbmI7YS5jYWxsYmFja1ByaW9yaXR5PWQ7Yj0xMDczNzQxODIzPT09Yj9lZyh5ai5iaW5kKG51bGwsYSkpOmRnKGQsQmouYmluZChudWxsLGEpLHt0aW1lb3V0OjEwKigxMDczNzQxODIxLWIpLSRmKCl9KTthLmNhbGxiYWNrTm9kZT1ifX19XG5mdW5jdGlvbiBCaihhLGIpe3dqPTA7aWYoYilyZXR1cm4gYj1HZygpLENqKGEsYiksWihhKSxudWxsO3ZhciBjPXpqKGEpO2lmKDAhPT1jKXtiPWEuY2FsbGJhY2tOb2RlO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmM9PT1VfHxFaihhLGMpO2lmKG51bGwhPT1YKXt2YXIgZD1XO1d8PWZqO3ZhciBlPUZqKCk7ZG8gdHJ5e0dqKCk7YnJlYWt9Y2F0Y2goaCl7SGooYSxoKX13aGlsZSgxKTtuZygpO1c9ZDtjai5jdXJyZW50PWU7aWYoUz09PWhqKXRocm93IGI9a2osRWooYSxjKSx4aShhLGMpLFooYSksYjtpZihudWxsPT09WClzd2l0Y2goZT1hLmZpbmlzaGVkV29yaz1hLmN1cnJlbnQuYWx0ZXJuYXRlLGEuZmluaXNoZWRFeHBpcmF0aW9uVGltZT1jLGQ9UyxUPW51bGwsZCl7Y2FzZSB0aTpjYXNlIGhqOnRocm93IEVycm9yKHUoMzQ1KSk7Y2FzZSBpajpDaihhLDI8Yz8yOmMpO2JyZWFrO2Nhc2UgdWk6eGkoYSxjKTtkPWEubGFzdFN1c3BlbmRlZFRpbWU7XG5jPT09ZCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPUlqKGUpKTtpZigxMDczNzQxODIzPT09bGomJihlPVRpK3BqLSRmKCksMTA8ZSkpe2lmKG9qKXt2YXIgZj1hLmxhc3RQaW5nZWRUaW1lO2lmKDA9PT1mfHxmPj1jKXthLmxhc3RQaW5nZWRUaW1lPWM7RWooYSxjKTticmVha319Zj16aihhKTtpZigwIT09ZiYmZiE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPWQ7YnJlYWt9YS50aW1lb3V0SGFuZGxlPUhkKEpqLmJpbmQobnVsbCxhKSxlKTticmVha31KaihhKTticmVhaztjYXNlIHZpOnhpKGEsYyk7ZD1hLmxhc3RTdXNwZW5kZWRUaW1lO2M9PT1kJiYoYS5uZXh0S25vd25QZW5kaW5nTGV2ZWw9SWooZSkpO2lmKG9qJiYoZT1hLmxhc3RQaW5nZWRUaW1lLDA9PT1lfHxlPj1jKSl7YS5sYXN0UGluZ2VkVGltZT1jO0VqKGEsYyk7YnJlYWt9ZT16aihhKTtpZigwIT09ZSYmZSE9PWMpYnJlYWs7aWYoMCE9PWQmJmQhPT1jKXthLmxhc3RQaW5nZWRUaW1lPVxuZDticmVha30xMDczNzQxODIzIT09bWo/ZD0xMCooMTA3Mzc0MTgyMS1taiktJGYoKToxMDczNzQxODIzPT09bGo/ZD0wOihkPTEwKigxMDczNzQxODIxLWxqKS01RTMsZT0kZigpLGM9MTAqKDEwNzM3NDE4MjEtYyktZSxkPWUtZCwwPmQmJihkPTApLGQ9KDEyMD5kPzEyMDo0ODA+ZD80ODA6MTA4MD5kPzEwODA6MTkyMD5kPzE5MjA6M0UzPmQ/M0UzOjQzMjA+ZD80MzIwOjE5NjAqYmooZC8xOTYwKSktZCxjPGQmJihkPWMpKTtpZigxMDxkKXthLnRpbWVvdXRIYW5kbGU9SGQoSmouYmluZChudWxsLGEpLGQpO2JyZWFrfUpqKGEpO2JyZWFrO2Nhc2Ugamo6aWYoMTA3Mzc0MTgyMyE9PWxqJiZudWxsIT09bmope2Y9bGo7dmFyIGc9bmo7ZD1nLmJ1c3lNaW5EdXJhdGlvbk1zfDA7MD49ZD9kPTA6KGU9Zy5idXN5RGVsYXlNc3wwLGY9JGYoKS0oMTAqKDEwNzM3NDE4MjEtZiktKGcudGltZW91dE1zfDB8fDVFMykpLGQ9Zjw9ZT8wOmUrZC1mKTtpZigxMDxkKXt4aShhLGMpO2EudGltZW91dEhhbmRsZT1cbkhkKEpqLmJpbmQobnVsbCxhKSxkKTticmVha319SmooYSk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBFcnJvcih1KDMyOSkpO31aKGEpO2lmKGEuY2FsbGJhY2tOb2RlPT09YilyZXR1cm4gQmouYmluZChudWxsLGEpfX1yZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIHlqKGEpe3ZhciBiPWEubGFzdEV4cGlyZWRUaW1lO2I9MCE9PWI/YjoxMDczNzQxODIzO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO0RqKCk7YT09PVQmJmI9PT1VfHxFaihhLGIpO2lmKG51bGwhPT1YKXt2YXIgYz1XO1d8PWZqO3ZhciBkPUZqKCk7ZG8gdHJ5e0tqKCk7YnJlYWt9Y2F0Y2goZSl7SGooYSxlKX13aGlsZSgxKTtuZygpO1c9Yztjai5jdXJyZW50PWQ7aWYoUz09PWhqKXRocm93IGM9a2osRWooYSxiKSx4aShhLGIpLFooYSksYztpZihudWxsIT09WCl0aHJvdyBFcnJvcih1KDI2MSkpO2EuZmluaXNoZWRXb3JrPWEuY3VycmVudC5hbHRlcm5hdGU7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPWI7VD1udWxsO0pqKGEpO1ooYSl9cmV0dXJuIG51bGx9ZnVuY3Rpb24gTGooKXtpZihudWxsIT09dGope3ZhciBhPXRqO3RqPW51bGw7YS5mb3JFYWNoKGZ1bmN0aW9uKGEsYyl7Q2ooYyxhKTtaKGMpfSk7Z2coKX19XG5mdW5jdGlvbiBNaihhLGIpe3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fWZ1bmN0aW9uIE5qKGEsYil7dmFyIGM9VztXJj0tMjtXfD1lajt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fVxuZnVuY3Rpb24gRWooYSxiKXthLmZpbmlzaGVkV29yaz1udWxsO2EuZmluaXNoZWRFeHBpcmF0aW9uVGltZT0wO3ZhciBjPWEudGltZW91dEhhbmRsZTstMSE9PWMmJihhLnRpbWVvdXRIYW5kbGU9LTEsSWQoYykpO2lmKG51bGwhPT1YKWZvcihjPVgucmV0dXJuO251bGwhPT1jOyl7dmFyIGQ9Yztzd2l0Y2goZC50YWcpe2Nhc2UgMTpkPWQudHlwZS5jaGlsZENvbnRleHRUeXBlcztudWxsIT09ZCYmdm9pZCAwIT09ZCYmRGYoKTticmVhaztjYXNlIDM6ZWgoKTtIKEspO0goSik7YnJlYWs7Y2FzZSA1OmdoKGQpO2JyZWFrO2Nhc2UgNDplaCgpO2JyZWFrO2Nhc2UgMTM6SChNKTticmVhaztjYXNlIDE5OkgoTSk7YnJlYWs7Y2FzZSAxMDpvZyhkKX1jPWMucmV0dXJufVQ9YTtYPVNnKGEuY3VycmVudCxudWxsKTtVPWI7Uz10aTtraj1udWxsO21qPWxqPTEwNzM3NDE4MjM7bmo9bnVsbDt3aT0wO29qPSExfVxuZnVuY3Rpb24gSGooYSxiKXtkb3t0cnl7bmcoKTtqaC5jdXJyZW50PXNoO2lmKG1oKWZvcih2YXIgYz1OLm1lbW9pemVkU3RhdGU7bnVsbCE9PWM7KXt2YXIgZD1jLnF1ZXVlO251bGwhPT1kJiYoZC5wZW5kaW5nPW51bGwpO2M9Yy5uZXh0fWxoPTA7UD1PPU49bnVsbDttaD0hMTtpZihudWxsPT09WHx8bnVsbD09PVgucmV0dXJuKXJldHVybiBTPWhqLGtqPWIsWD1udWxsO2E6e3ZhciBlPWEsZj1YLnJldHVybixnPVgsaD1iO2I9VTtnLmVmZmVjdFRhZ3w9MjA0ODtnLmZpcnN0RWZmZWN0PWcubGFzdEVmZmVjdD1udWxsO2lmKG51bGwhPT1oJiZcIm9iamVjdFwiPT09dHlwZW9mIGgmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBoLnRoZW4pe3ZhciBrPWg7aWYoMD09PShnLm1vZGUmMikpe3ZhciBsPWcuYWx0ZXJuYXRlO2w/KGcudXBkYXRlUXVldWU9bC51cGRhdGVRdWV1ZSxnLm1lbW9pemVkU3RhdGU9bC5tZW1vaXplZFN0YXRlLGcuZXhwaXJhdGlvblRpbWU9bC5leHBpcmF0aW9uVGltZSk6KGcudXBkYXRlUXVldWU9XG5udWxsLGcubWVtb2l6ZWRTdGF0ZT1udWxsKX12YXIgbT0wIT09KE0uY3VycmVudCYxKSxwPWY7ZG97dmFyIHg7aWYoeD0xMz09PXAudGFnKXt2YXIgej1wLm1lbW9pemVkU3RhdGU7aWYobnVsbCE9PXopeD1udWxsIT09ei5kZWh5ZHJhdGVkPyEwOiExO2Vsc2V7dmFyIGNhPXAubWVtb2l6ZWRQcm9wczt4PXZvaWQgMD09PWNhLmZhbGxiYWNrPyExOiEwIT09Y2EudW5zdGFibGVfYXZvaWRUaGlzRmFsbGJhY2s/ITA6bT8hMTohMH19aWYoeCl7dmFyIEQ9cC51cGRhdGVRdWV1ZTtpZihudWxsPT09RCl7dmFyIHQ9bmV3IFNldDt0LmFkZChrKTtwLnVwZGF0ZVF1ZXVlPXR9ZWxzZSBELmFkZChrKTtpZigwPT09KHAubW9kZSYyKSl7cC5lZmZlY3RUYWd8PTY0O2cuZWZmZWN0VGFnJj0tMjk4MTtpZigxPT09Zy50YWcpaWYobnVsbD09PWcuYWx0ZXJuYXRlKWcudGFnPTE3O2Vsc2V7dmFyIHk9d2coMTA3Mzc0MTgyMyxudWxsKTt5LnRhZz0yO3hnKGcseSl9Zy5leHBpcmF0aW9uVGltZT0xMDczNzQxODIzO1xuYnJlYWsgYX1oPXZvaWQgMDtnPWI7dmFyIEE9ZS5waW5nQ2FjaGU7bnVsbD09PUE/KEE9ZS5waW5nQ2FjaGU9bmV3IFdpLGg9bmV3IFNldCxBLnNldChrLGgpKTooaD1BLmdldChrKSx2b2lkIDA9PT1oJiYoaD1uZXcgU2V0LEEuc2V0KGssaCkpKTtpZighaC5oYXMoZykpe2guYWRkKGcpO3ZhciBxPU9qLmJpbmQobnVsbCxlLGssZyk7ay50aGVuKHEscSl9cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO2JyZWFrIGF9cD1wLnJldHVybn13aGlsZShudWxsIT09cCk7aD1FcnJvcigocGIoZy50eXBlKXx8XCJBIFJlYWN0IGNvbXBvbmVudFwiKStcIiBzdXNwZW5kZWQgd2hpbGUgcmVuZGVyaW5nLCBidXQgbm8gZmFsbGJhY2sgVUkgd2FzIHNwZWNpZmllZC5cXG5cXG5BZGQgYSA8U3VzcGVuc2UgZmFsbGJhY2s9Li4uPiBjb21wb25lbnQgaGlnaGVyIGluIHRoZSB0cmVlIHRvIHByb3ZpZGUgYSBsb2FkaW5nIGluZGljYXRvciBvciBwbGFjZWhvbGRlciB0byBkaXNwbGF5LlwiK3FiKGcpKX1TIT09XG5qaiYmKFM9aWopO2g9QWkoaCxnKTtwPWY7ZG97c3dpdGNoKHAudGFnKXtjYXNlIDM6az1oO3AuZWZmZWN0VGFnfD00MDk2O3AuZXhwaXJhdGlvblRpbWU9Yjt2YXIgQj1YaShwLGssYik7eWcocCxCKTticmVhayBhO2Nhc2UgMTprPWg7dmFyIHc9cC50eXBlLHViPXAuc3RhdGVOb2RlO2lmKDA9PT0ocC5lZmZlY3RUYWcmNjQpJiYoXCJmdW5jdGlvblwiPT09dHlwZW9mIHcuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxudWxsIT09dWImJlwiZnVuY3Rpb25cIj09PXR5cGVvZiB1Yi5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyh1YikpKSl7cC5lZmZlY3RUYWd8PTQwOTY7cC5leHBpcmF0aW9uVGltZT1iO3ZhciB2Yj0kaShwLGssYik7eWcocCx2Yik7YnJlYWsgYX19cD1wLnJldHVybn13aGlsZShudWxsIT09cCl9WD1QaihYKX1jYXRjaChYYyl7Yj1YYztjb250aW51ZX1icmVha313aGlsZSgxKX1cbmZ1bmN0aW9uIEZqKCl7dmFyIGE9Y2ouY3VycmVudDtjai5jdXJyZW50PXNoO3JldHVybiBudWxsPT09YT9zaDphfWZ1bmN0aW9uIEFnKGEsYil7YTxsaiYmMjxhJiYobGo9YSk7bnVsbCE9PWImJmE8bWomJjI8YSYmKG1qPWEsbmo9Yil9ZnVuY3Rpb24gQmcoYSl7YT53aSYmKHdpPWEpfWZ1bmN0aW9uIEtqKCl7Zm9yKDtudWxsIT09WDspWD1RaihYKX1mdW5jdGlvbiBHaigpe2Zvcig7bnVsbCE9PVgmJiFVZigpOylYPVFqKFgpfWZ1bmN0aW9uIFFqKGEpe3ZhciBiPVJqKGEuYWx0ZXJuYXRlLGEsVSk7YS5tZW1vaXplZFByb3BzPWEucGVuZGluZ1Byb3BzO251bGw9PT1iJiYoYj1QaihhKSk7ZGouY3VycmVudD1udWxsO3JldHVybiBifVxuZnVuY3Rpb24gUGooYSl7WD1hO2Rve3ZhciBiPVguYWx0ZXJuYXRlO2E9WC5yZXR1cm47aWYoMD09PShYLmVmZmVjdFRhZyYyMDQ4KSl7Yj1zaShiLFgsVSk7aWYoMT09PVV8fDEhPT1YLmNoaWxkRXhwaXJhdGlvblRpbWUpe2Zvcih2YXIgYz0wLGQ9WC5jaGlsZDtudWxsIT09ZDspe3ZhciBlPWQuZXhwaXJhdGlvblRpbWUsZj1kLmNoaWxkRXhwaXJhdGlvblRpbWU7ZT5jJiYoYz1lKTtmPmMmJihjPWYpO2Q9ZC5zaWJsaW5nfVguY2hpbGRFeHBpcmF0aW9uVGltZT1jfWlmKG51bGwhPT1iKXJldHVybiBiO251bGwhPT1hJiYwPT09KGEuZWZmZWN0VGFnJjIwNDgpJiYobnVsbD09PWEuZmlyc3RFZmZlY3QmJihhLmZpcnN0RWZmZWN0PVguZmlyc3RFZmZlY3QpLG51bGwhPT1YLmxhc3RFZmZlY3QmJihudWxsIT09YS5sYXN0RWZmZWN0JiYoYS5sYXN0RWZmZWN0Lm5leHRFZmZlY3Q9WC5maXJzdEVmZmVjdCksYS5sYXN0RWZmZWN0PVgubGFzdEVmZmVjdCksMTxYLmVmZmVjdFRhZyYmKG51bGwhPT1cbmEubGFzdEVmZmVjdD9hLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1YOmEuZmlyc3RFZmZlY3Q9WCxhLmxhc3RFZmZlY3Q9WCkpfWVsc2V7Yj16aShYKTtpZihudWxsIT09YilyZXR1cm4gYi5lZmZlY3RUYWcmPTIwNDcsYjtudWxsIT09YSYmKGEuZmlyc3RFZmZlY3Q9YS5sYXN0RWZmZWN0PW51bGwsYS5lZmZlY3RUYWd8PTIwNDgpfWI9WC5zaWJsaW5nO2lmKG51bGwhPT1iKXJldHVybiBiO1g9YX13aGlsZShudWxsIT09WCk7Uz09PXRpJiYoUz1qaik7cmV0dXJuIG51bGx9ZnVuY3Rpb24gSWooYSl7dmFyIGI9YS5leHBpcmF0aW9uVGltZTthPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtyZXR1cm4gYj5hP2I6YX1mdW5jdGlvbiBKaihhKXt2YXIgYj1hZygpO2NnKDk5LFNqLmJpbmQobnVsbCxhLGIpKTtyZXR1cm4gbnVsbH1cbmZ1bmN0aW9uIFNqKGEsYil7ZG8gRGooKTt3aGlsZShudWxsIT09cmopO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMyNykpO3ZhciBjPWEuZmluaXNoZWRXb3JrLGQ9YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lO2lmKG51bGw9PT1jKXJldHVybiBudWxsO2EuZmluaXNoZWRXb3JrPW51bGw7YS5maW5pc2hlZEV4cGlyYXRpb25UaW1lPTA7aWYoYz09PWEuY3VycmVudCl0aHJvdyBFcnJvcih1KDE3NykpO2EuY2FsbGJhY2tOb2RlPW51bGw7YS5jYWxsYmFja0V4cGlyYXRpb25UaW1lPTA7YS5jYWxsYmFja1ByaW9yaXR5PTkwO2EubmV4dEtub3duUGVuZGluZ0xldmVsPTA7dmFyIGU9SWooYyk7YS5maXJzdFBlbmRpbmdUaW1lPWU7ZDw9YS5sYXN0U3VzcGVuZGVkVGltZT9hLmZpcnN0U3VzcGVuZGVkVGltZT1hLmxhc3RTdXNwZW5kZWRUaW1lPWEubmV4dEtub3duUGVuZGluZ0xldmVsPTA6ZDw9YS5maXJzdFN1c3BlbmRlZFRpbWUmJihhLmZpcnN0U3VzcGVuZGVkVGltZT1cbmQtMSk7ZDw9YS5sYXN0UGluZ2VkVGltZSYmKGEubGFzdFBpbmdlZFRpbWU9MCk7ZDw9YS5sYXN0RXhwaXJlZFRpbWUmJihhLmxhc3RFeHBpcmVkVGltZT0wKTthPT09VCYmKFg9VD1udWxsLFU9MCk7MTxjLmVmZmVjdFRhZz9udWxsIT09Yy5sYXN0RWZmZWN0PyhjLmxhc3RFZmZlY3QubmV4dEVmZmVjdD1jLGU9Yy5maXJzdEVmZmVjdCk6ZT1jOmU9Yy5maXJzdEVmZmVjdDtpZihudWxsIT09ZSl7dmFyIGY9VztXfD1najtkai5jdXJyZW50PW51bGw7RGQ9ZmQ7dmFyIGc9eGQoKTtpZih5ZChnKSl7aWYoXCJzZWxlY3Rpb25TdGFydFwiaW4gZyl2YXIgaD17c3RhcnQ6Zy5zZWxlY3Rpb25TdGFydCxlbmQ6Zy5zZWxlY3Rpb25FbmR9O2Vsc2UgYTp7aD0oaD1nLm93bmVyRG9jdW1lbnQpJiZoLmRlZmF1bHRWaWV3fHx3aW5kb3c7dmFyIGs9aC5nZXRTZWxlY3Rpb24mJmguZ2V0U2VsZWN0aW9uKCk7aWYoayYmMCE9PWsucmFuZ2VDb3VudCl7aD1rLmFuY2hvck5vZGU7dmFyIGw9ay5hbmNob3JPZmZzZXQsXG5tPWsuZm9jdXNOb2RlO2s9ay5mb2N1c09mZnNldDt0cnl7aC5ub2RlVHlwZSxtLm5vZGVUeXBlfWNhdGNoKHdiKXtoPW51bGw7YnJlYWsgYX12YXIgcD0wLHg9LTEsej0tMSxjYT0wLEQ9MCx0PWcseT1udWxsO2I6Zm9yKDs7KXtmb3IodmFyIEE7Oyl7dCE9PWh8fDAhPT1sJiYzIT09dC5ub2RlVHlwZXx8KHg9cCtsKTt0IT09bXx8MCE9PWsmJjMhPT10Lm5vZGVUeXBlfHwoej1wK2spOzM9PT10Lm5vZGVUeXBlJiYocCs9dC5ub2RlVmFsdWUubGVuZ3RoKTtpZihudWxsPT09KEE9dC5maXJzdENoaWxkKSlicmVhazt5PXQ7dD1BfWZvcig7Oyl7aWYodD09PWcpYnJlYWsgYjt5PT09aCYmKytjYT09PWwmJih4PXApO3k9PT1tJiYrK0Q9PT1rJiYoej1wKTtpZihudWxsIT09KEE9dC5uZXh0U2libGluZykpYnJlYWs7dD15O3k9dC5wYXJlbnROb2RlfXQ9QX1oPS0xPT09eHx8LTE9PT16P251bGw6e3N0YXJ0OngsZW5kOnp9fWVsc2UgaD1udWxsfWg9aHx8e3N0YXJ0OjAsZW5kOjB9fWVsc2UgaD1cbm51bGw7RWQ9e2FjdGl2ZUVsZW1lbnREZXRhY2hlZDpudWxsLGZvY3VzZWRFbGVtOmcsc2VsZWN0aW9uUmFuZ2U6aH07ZmQ9ITE7WT1lO2RvIHRyeXtUaigpfWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPWU7ZG8gdHJ5e2ZvcihnPWEsaD1iO251bGwhPT1ZOyl7dmFyIHE9WS5lZmZlY3RUYWc7cSYxNiYmUmIoWS5zdGF0ZU5vZGUsXCJcIik7aWYocSYxMjgpe3ZhciBCPVkuYWx0ZXJuYXRlO2lmKG51bGwhPT1CKXt2YXIgdz1CLnJlZjtudWxsIT09dyYmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiB3P3cobnVsbCk6dy5jdXJyZW50PW51bGwpfX1zd2l0Y2gocSYxMDM4KXtjYXNlIDI6UGkoWSk7WS5lZmZlY3RUYWcmPS0zO2JyZWFrO2Nhc2UgNjpQaShZKTtZLmVmZmVjdFRhZyY9LTM7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSAxMDI0OlkuZWZmZWN0VGFnJj0tMTAyNTticmVhaztjYXNlIDEwMjg6WS5lZmZlY3RUYWcmPVxuLTEwMjU7U2koWS5hbHRlcm5hdGUsWSk7YnJlYWs7Y2FzZSA0OlNpKFkuYWx0ZXJuYXRlLFkpO2JyZWFrO2Nhc2UgODpsPVksTWkoZyxsLGgpLE5pKGwpfVk9WS5uZXh0RWZmZWN0fX1jYXRjaCh3Yil7aWYobnVsbD09PVkpdGhyb3cgRXJyb3IodSgzMzApKTtFaShZLHdiKTtZPVkubmV4dEVmZmVjdH13aGlsZShudWxsIT09WSk7dz1FZDtCPXhkKCk7cT13LmZvY3VzZWRFbGVtO2g9dy5zZWxlY3Rpb25SYW5nZTtpZihCIT09cSYmcSYmcS5vd25lckRvY3VtZW50JiZ3ZChxLm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHEpKXtudWxsIT09aCYmeWQocSkmJihCPWguc3RhcnQsdz1oLmVuZCx2b2lkIDA9PT13JiYodz1CKSxcInNlbGVjdGlvblN0YXJ0XCJpbiBxPyhxLnNlbGVjdGlvblN0YXJ0PUIscS5zZWxlY3Rpb25FbmQ9TWF0aC5taW4odyxxLnZhbHVlLmxlbmd0aCkpOih3PShCPXEub3duZXJEb2N1bWVudHx8ZG9jdW1lbnQpJiZCLmRlZmF1bHRWaWV3fHx3aW5kb3csdy5nZXRTZWxlY3Rpb24mJlxuKHc9dy5nZXRTZWxlY3Rpb24oKSxsPXEudGV4dENvbnRlbnQubGVuZ3RoLGc9TWF0aC5taW4oaC5zdGFydCxsKSxoPXZvaWQgMD09PWguZW5kP2c6TWF0aC5taW4oaC5lbmQsbCksIXcuZXh0ZW5kJiZnPmgmJihsPWgsaD1nLGc9bCksbD12ZChxLGcpLG09dmQocSxoKSxsJiZtJiYoMSE9PXcucmFuZ2VDb3VudHx8dy5hbmNob3JOb2RlIT09bC5ub2RlfHx3LmFuY2hvck9mZnNldCE9PWwub2Zmc2V0fHx3LmZvY3VzTm9kZSE9PW0ubm9kZXx8dy5mb2N1c09mZnNldCE9PW0ub2Zmc2V0KSYmKEI9Qi5jcmVhdGVSYW5nZSgpLEIuc2V0U3RhcnQobC5ub2RlLGwub2Zmc2V0KSx3LnJlbW92ZUFsbFJhbmdlcygpLGc+aD8ody5hZGRSYW5nZShCKSx3LmV4dGVuZChtLm5vZGUsbS5vZmZzZXQpKTooQi5zZXRFbmQobS5ub2RlLG0ub2Zmc2V0KSx3LmFkZFJhbmdlKEIpKSkpKSk7Qj1bXTtmb3Iodz1xO3c9dy5wYXJlbnROb2RlOykxPT09dy5ub2RlVHlwZSYmQi5wdXNoKHtlbGVtZW50OncsbGVmdDp3LnNjcm9sbExlZnQsXG50b3A6dy5zY3JvbGxUb3B9KTtcImZ1bmN0aW9uXCI9PT10eXBlb2YgcS5mb2N1cyYmcS5mb2N1cygpO2ZvcihxPTA7cTxCLmxlbmd0aDtxKyspdz1CW3FdLHcuZWxlbWVudC5zY3JvbGxMZWZ0PXcubGVmdCx3LmVsZW1lbnQuc2Nyb2xsVG9wPXcudG9wfWZkPSEhRGQ7RWQ9RGQ9bnVsbDthLmN1cnJlbnQ9YztZPWU7ZG8gdHJ5e2ZvcihxPWE7bnVsbCE9PVk7KXt2YXIgdWI9WS5lZmZlY3RUYWc7dWImMzYmJkppKHEsWS5hbHRlcm5hdGUsWSk7aWYodWImMTI4KXtCPXZvaWQgMDt2YXIgdmI9WS5yZWY7aWYobnVsbCE9PXZiKXt2YXIgWGM9WS5zdGF0ZU5vZGU7c3dpdGNoKFkudGFnKXtjYXNlIDU6Qj1YYzticmVhaztkZWZhdWx0OkI9WGN9XCJmdW5jdGlvblwiPT09dHlwZW9mIHZiP3ZiKEIpOnZiLmN1cnJlbnQ9Qn19WT1ZLm5leHRFZmZlY3R9fWNhdGNoKHdiKXtpZihudWxsPT09WSl0aHJvdyBFcnJvcih1KDMzMCkpO0VpKFksd2IpO1k9WS5uZXh0RWZmZWN0fXdoaWxlKG51bGwhPT1ZKTtZPVxubnVsbDtWZigpO1c9Zn1lbHNlIGEuY3VycmVudD1jO2lmKHFqKXFqPSExLHJqPWEsc2o9YjtlbHNlIGZvcihZPWU7bnVsbCE9PVk7KWI9WS5uZXh0RWZmZWN0LFkubmV4dEVmZmVjdD1udWxsLFk9YjtiPWEuZmlyc3RQZW5kaW5nVGltZTswPT09YiYmKGFqPW51bGwpOzEwNzM3NDE4MjM9PT1iP2E9PT12aj91aisrOih1aj0wLHZqPWEpOnVqPTA7XCJmdW5jdGlvblwiPT09dHlwZW9mIFVqJiZVaihjLnN0YXRlTm9kZSxkKTtaKGEpO2lmKFlpKXRocm93IFlpPSExLGE9WmksWmk9bnVsbCxhO2lmKChXJmVqKSE9PVYpcmV0dXJuIG51bGw7Z2coKTtyZXR1cm4gbnVsbH1mdW5jdGlvbiBUaigpe2Zvcig7bnVsbCE9PVk7KXt2YXIgYT1ZLmVmZmVjdFRhZzswIT09KGEmMjU2KSYmR2koWS5hbHRlcm5hdGUsWSk7MD09PShhJjUxMil8fHFqfHwocWo9ITAsZGcoOTcsZnVuY3Rpb24oKXtEaigpO3JldHVybiBudWxsfSkpO1k9WS5uZXh0RWZmZWN0fX1cbmZ1bmN0aW9uIERqKCl7aWYoOTAhPT1zail7dmFyIGE9OTc8c2o/OTc6c2o7c2o9OTA7cmV0dXJuIGNnKGEsVmopfX1mdW5jdGlvbiBWaigpe2lmKG51bGw9PT1yailyZXR1cm4hMTt2YXIgYT1yajtyaj1udWxsO2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDMzMSkpO3ZhciBiPVc7V3w9Z2o7Zm9yKGE9YS5jdXJyZW50LmZpcnN0RWZmZWN0O251bGwhPT1hOyl7dHJ5e3ZhciBjPWE7aWYoMCE9PShjLmVmZmVjdFRhZyY1MTIpKXN3aXRjaChjLnRhZyl7Y2FzZSAwOmNhc2UgMTE6Y2FzZSAxNTpjYXNlIDIyOkhpKDUsYyksSWkoNSxjKX19Y2F0Y2goZCl7aWYobnVsbD09PWEpdGhyb3cgRXJyb3IodSgzMzApKTtFaShhLGQpfWM9YS5uZXh0RWZmZWN0O2EubmV4dEVmZmVjdD1udWxsO2E9Y31XPWI7Z2coKTtyZXR1cm4hMH1cbmZ1bmN0aW9uIFdqKGEsYixjKXtiPUFpKGMsYik7Yj1YaShhLGIsMTA3Mzc0MTgyMyk7eGcoYSxiKTthPXhqKGEsMTA3Mzc0MTgyMyk7bnVsbCE9PWEmJlooYSl9ZnVuY3Rpb24gRWkoYSxiKXtpZigzPT09YS50YWcpV2ooYSxhLGIpO2Vsc2UgZm9yKHZhciBjPWEucmV0dXJuO251bGwhPT1jOyl7aWYoMz09PWMudGFnKXtXaihjLGEsYik7YnJlYWt9ZWxzZSBpZigxPT09Yy50YWcpe3ZhciBkPWMuc3RhdGVOb2RlO2lmKFwiZnVuY3Rpb25cIj09PXR5cGVvZiBjLnR5cGUuZ2V0RGVyaXZlZFN0YXRlRnJvbUVycm9yfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5jb21wb25lbnREaWRDYXRjaCYmKG51bGw9PT1hanx8IWFqLmhhcyhkKSkpe2E9QWkoYixhKTthPSRpKGMsYSwxMDczNzQxODIzKTt4ZyhjLGEpO2M9eGooYywxMDczNzQxODIzKTtudWxsIT09YyYmWihjKTticmVha319Yz1jLnJldHVybn19XG5mdW5jdGlvbiBPaihhLGIsYyl7dmFyIGQ9YS5waW5nQ2FjaGU7bnVsbCE9PWQmJmQuZGVsZXRlKGIpO1Q9PT1hJiZVPT09Yz9TPT09dml8fFM9PT11aSYmMTA3Mzc0MTgyMz09PWxqJiYkZigpLVRpPHBqP0VqKGEsVSk6b2o9ITA6QWooYSxjKSYmKGI9YS5sYXN0UGluZ2VkVGltZSwwIT09YiYmYjxjfHwoYS5sYXN0UGluZ2VkVGltZT1jLFooYSkpKX1mdW5jdGlvbiBWaShhLGIpe3ZhciBjPWEuc3RhdGVOb2RlO251bGwhPT1jJiZjLmRlbGV0ZShiKTtiPTA7MD09PWImJihiPUdnKCksYj1IZyhiLGEsbnVsbCkpO2E9eGooYSxiKTtudWxsIT09YSYmWihhKX12YXIgUmo7XG5Saj1mdW5jdGlvbihhLGIsYyl7dmFyIGQ9Yi5leHBpcmF0aW9uVGltZTtpZihudWxsIT09YSl7dmFyIGU9Yi5wZW5kaW5nUHJvcHM7aWYoYS5tZW1vaXplZFByb3BzIT09ZXx8Sy5jdXJyZW50KXJnPSEwO2Vsc2V7aWYoZDxjKXtyZz0hMTtzd2l0Y2goYi50YWcpe2Nhc2UgMzpoaShiKTtYaCgpO2JyZWFrO2Nhc2UgNTpmaChiKTtpZihiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuKXJldHVybiBiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLG51bGw7YnJlYWs7Y2FzZSAxOkwoYi50eXBlKSYmR2YoYik7YnJlYWs7Y2FzZSA0OmRoKGIsYi5zdGF0ZU5vZGUuY29udGFpbmVySW5mbyk7YnJlYWs7Y2FzZSAxMDpkPWIubWVtb2l6ZWRQcm9wcy52YWx1ZTtlPWIudHlwZS5fY29udGV4dDtJKGpnLGUuX2N1cnJlbnRWYWx1ZSk7ZS5fY3VycmVudFZhbHVlPWQ7YnJlYWs7Y2FzZSAxMzppZihudWxsIT09Yi5tZW1vaXplZFN0YXRlKXtkPWIuY2hpbGQuY2hpbGRFeHBpcmF0aW9uVGltZTtcbmlmKDAhPT1kJiZkPj1jKXJldHVybiBqaShhLGIsYyk7SShNLE0uY3VycmVudCYxKTtiPSRoKGEsYixjKTtyZXR1cm4gbnVsbCE9PWI/Yi5zaWJsaW5nOm51bGx9SShNLE0uY3VycmVudCYxKTticmVhaztjYXNlIDE5OmQ9Yi5jaGlsZEV4cGlyYXRpb25UaW1lPj1jO2lmKDAhPT0oYS5lZmZlY3RUYWcmNjQpKXtpZihkKXJldHVybiBtaShhLGIsYyk7Yi5lZmZlY3RUYWd8PTY0fWU9Yi5tZW1vaXplZFN0YXRlO251bGwhPT1lJiYoZS5yZW5kZXJpbmc9bnVsbCxlLnRhaWw9bnVsbCk7SShNLE0uY3VycmVudCk7aWYoIWQpcmV0dXJuIG51bGx9cmV0dXJuICRoKGEsYixjKX1yZz0hMX19ZWxzZSByZz0hMTtiLmV4cGlyYXRpb25UaW1lPTA7c3dpdGNoKGIudGFnKXtjYXNlIDI6ZD1iLnR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpO2E9Yi5wZW5kaW5nUHJvcHM7ZT1DZihiLEouY3VycmVudCk7cWcoYixjKTtlPW9oKG51bGwsXG5iLGQsYSxlLGMpO2IuZWZmZWN0VGFnfD0xO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgZSYmbnVsbCE9PWUmJlwiZnVuY3Rpb25cIj09PXR5cGVvZiBlLnJlbmRlciYmdm9pZCAwPT09ZS4kJHR5cGVvZil7Yi50YWc9MTtiLm1lbW9pemVkU3RhdGU9bnVsbDtiLnVwZGF0ZVF1ZXVlPW51bGw7aWYoTChkKSl7dmFyIGY9ITA7R2YoYil9ZWxzZSBmPSExO2IubWVtb2l6ZWRTdGF0ZT1udWxsIT09ZS5zdGF0ZSYmdm9pZCAwIT09ZS5zdGF0ZT9lLnN0YXRlOm51bGw7dWcoYik7dmFyIGc9ZC5nZXREZXJpdmVkU3RhdGVGcm9tUHJvcHM7XCJmdW5jdGlvblwiPT09dHlwZW9mIGcmJkZnKGIsZCxnLGEpO2UudXBkYXRlcj1KZztiLnN0YXRlTm9kZT1lO2UuX3JlYWN0SW50ZXJuYWxGaWJlcj1iO05nKGIsZCxhLGMpO2I9Z2kobnVsbCxiLGQsITAsZixjKX1lbHNlIGIudGFnPTAsUihudWxsLGIsZSxjKSxiPWIuY2hpbGQ7cmV0dXJuIGI7Y2FzZSAxNjphOntlPWIuZWxlbWVudFR5cGU7bnVsbCE9PWEmJihhLmFsdGVybmF0ZT1cbm51bGwsYi5hbHRlcm5hdGU9bnVsbCxiLmVmZmVjdFRhZ3w9Mik7YT1iLnBlbmRpbmdQcm9wcztvYihlKTtpZigxIT09ZS5fc3RhdHVzKXRocm93IGUuX3Jlc3VsdDtlPWUuX3Jlc3VsdDtiLnR5cGU9ZTtmPWIudGFnPVhqKGUpO2E9aWcoZSxhKTtzd2l0Y2goZil7Y2FzZSAwOmI9ZGkobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTpiPWZpKG51bGwsYixlLGEsYyk7YnJlYWsgYTtjYXNlIDExOmI9WmgobnVsbCxiLGUsYSxjKTticmVhayBhO2Nhc2UgMTQ6Yj1haShudWxsLGIsZSxpZyhlLnR5cGUsYSksZCxjKTticmVhayBhfXRocm93IEVycm9yKHUoMzA2LGUsXCJcIikpO31yZXR1cm4gYjtjYXNlIDA6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZGkoYSxiLGQsZSxjKTtjYXNlIDE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksZmkoYSxiLGQsZSxjKTtcbmNhc2UgMzpoaShiKTtkPWIudXBkYXRlUXVldWU7aWYobnVsbD09PWF8fG51bGw9PT1kKXRocm93IEVycm9yKHUoMjgyKSk7ZD1iLnBlbmRpbmdQcm9wcztlPWIubWVtb2l6ZWRTdGF0ZTtlPW51bGwhPT1lP2UuZWxlbWVudDpudWxsO3ZnKGEsYik7emcoYixkLG51bGwsYyk7ZD1iLm1lbW9pemVkU3RhdGUuZWxlbWVudDtpZihkPT09ZSlYaCgpLGI9JGgoYSxiLGMpO2Vsc2V7aWYoZT1iLnN0YXRlTm9kZS5oeWRyYXRlKVBoPUpkKGIuc3RhdGVOb2RlLmNvbnRhaW5lckluZm8uZmlyc3RDaGlsZCksT2g9YixlPVFoPSEwO2lmKGUpZm9yKGM9WWcoYixudWxsLGQsYyksYi5jaGlsZD1jO2M7KWMuZWZmZWN0VGFnPWMuZWZmZWN0VGFnJi0zfDEwMjQsYz1jLnNpYmxpbmc7ZWxzZSBSKGEsYixkLGMpLFhoKCk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgNTpyZXR1cm4gZmgoYiksbnVsbD09PWEmJlVoKGIpLGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZj1udWxsIT09YT9hLm1lbW9pemVkUHJvcHM6XG5udWxsLGc9ZS5jaGlsZHJlbixHZChkLGUpP2c9bnVsbDpudWxsIT09ZiYmR2QoZCxmKSYmKGIuZWZmZWN0VGFnfD0xNiksZWkoYSxiKSxiLm1vZGUmNCYmMSE9PWMmJmUuaGlkZGVuPyhiLmV4cGlyYXRpb25UaW1lPWIuY2hpbGRFeHBpcmF0aW9uVGltZT0xLGI9bnVsbCk6KFIoYSxiLGcsYyksYj1iLmNoaWxkKSxiO2Nhc2UgNjpyZXR1cm4gbnVsbD09PWEmJlVoKGIpLG51bGw7Y2FzZSAxMzpyZXR1cm4gamkoYSxiLGMpO2Nhc2UgNDpyZXR1cm4gZGgoYixiLnN0YXRlTm9kZS5jb250YWluZXJJbmZvKSxkPWIucGVuZGluZ1Byb3BzLG51bGw9PT1hP2IuY2hpbGQ9WGcoYixudWxsLGQsYyk6UihhLGIsZCxjKSxiLmNoaWxkO2Nhc2UgMTE6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksWmgoYSxiLGQsZSxjKTtjYXNlIDc6cmV0dXJuIFIoYSxiLGIucGVuZGluZ1Byb3BzLGMpLGIuY2hpbGQ7Y2FzZSA4OnJldHVybiBSKGEsXG5iLGIucGVuZGluZ1Byb3BzLmNoaWxkcmVuLGMpLGIuY2hpbGQ7Y2FzZSAxMjpyZXR1cm4gUihhLGIsYi5wZW5kaW5nUHJvcHMuY2hpbGRyZW4sYyksYi5jaGlsZDtjYXNlIDEwOmE6e2Q9Yi50eXBlLl9jb250ZXh0O2U9Yi5wZW5kaW5nUHJvcHM7Zz1iLm1lbW9pemVkUHJvcHM7Zj1lLnZhbHVlO3ZhciBoPWIudHlwZS5fY29udGV4dDtJKGpnLGguX2N1cnJlbnRWYWx1ZSk7aC5fY3VycmVudFZhbHVlPWY7aWYobnVsbCE9PWcpaWYoaD1nLnZhbHVlLGY9JGUoaCxmKT8wOihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHM/ZC5fY2FsY3VsYXRlQ2hhbmdlZEJpdHMoaCxmKToxMDczNzQxODIzKXwwLDA9PT1mKXtpZihnLmNoaWxkcmVuPT09ZS5jaGlsZHJlbiYmIUsuY3VycmVudCl7Yj0kaChhLGIsYyk7YnJlYWsgYX19ZWxzZSBmb3IoaD1iLmNoaWxkLG51bGwhPT1oJiYoaC5yZXR1cm49Yik7bnVsbCE9PWg7KXt2YXIgaz1oLmRlcGVuZGVuY2llcztpZihudWxsIT09XG5rKXtnPWguY2hpbGQ7Zm9yKHZhciBsPWsuZmlyc3RDb250ZXh0O251bGwhPT1sOyl7aWYobC5jb250ZXh0PT09ZCYmMCE9PShsLm9ic2VydmVkQml0cyZmKSl7MT09PWgudGFnJiYobD13ZyhjLG51bGwpLGwudGFnPTIseGcoaCxsKSk7aC5leHBpcmF0aW9uVGltZTxjJiYoaC5leHBpcmF0aW9uVGltZT1jKTtsPWguYWx0ZXJuYXRlO251bGwhPT1sJiZsLmV4cGlyYXRpb25UaW1lPGMmJihsLmV4cGlyYXRpb25UaW1lPWMpO3BnKGgucmV0dXJuLGMpO2suZXhwaXJhdGlvblRpbWU8YyYmKGsuZXhwaXJhdGlvblRpbWU9Yyk7YnJlYWt9bD1sLm5leHR9fWVsc2UgZz0xMD09PWgudGFnP2gudHlwZT09PWIudHlwZT9udWxsOmguY2hpbGQ6aC5jaGlsZDtpZihudWxsIT09ZylnLnJldHVybj1oO2Vsc2UgZm9yKGc9aDtudWxsIT09Zzspe2lmKGc9PT1iKXtnPW51bGw7YnJlYWt9aD1nLnNpYmxpbmc7aWYobnVsbCE9PWgpe2gucmV0dXJuPWcucmV0dXJuO2c9aDticmVha31nPWcucmV0dXJufWg9XG5nfVIoYSxiLGUuY2hpbGRyZW4sYyk7Yj1iLmNoaWxkfXJldHVybiBiO2Nhc2UgOTpyZXR1cm4gZT1iLnR5cGUsZj1iLnBlbmRpbmdQcm9wcyxkPWYuY2hpbGRyZW4scWcoYixjKSxlPXNnKGUsZi51bnN0YWJsZV9vYnNlcnZlZEJpdHMpLGQ9ZChlKSxiLmVmZmVjdFRhZ3w9MSxSKGEsYixkLGMpLGIuY2hpbGQ7Y2FzZSAxNDpyZXR1cm4gZT1iLnR5cGUsZj1pZyhlLGIucGVuZGluZ1Byb3BzKSxmPWlnKGUudHlwZSxmKSxhaShhLGIsZSxmLGQsYyk7Y2FzZSAxNTpyZXR1cm4gY2koYSxiLGIudHlwZSxiLnBlbmRpbmdQcm9wcyxkLGMpO2Nhc2UgMTc6cmV0dXJuIGQ9Yi50eXBlLGU9Yi5wZW5kaW5nUHJvcHMsZT1iLmVsZW1lbnRUeXBlPT09ZD9lOmlnKGQsZSksbnVsbCE9PWEmJihhLmFsdGVybmF0ZT1udWxsLGIuYWx0ZXJuYXRlPW51bGwsYi5lZmZlY3RUYWd8PTIpLGIudGFnPTEsTChkKT8oYT0hMCxHZihiKSk6YT0hMSxxZyhiLGMpLExnKGIsZCxlKSxOZyhiLGQsZSxjKSxnaShudWxsLFxuYixkLCEwLGEsYyk7Y2FzZSAxOTpyZXR1cm4gbWkoYSxiLGMpfXRocm93IEVycm9yKHUoMTU2LGIudGFnKSk7fTt2YXIgVWo9bnVsbCxMaT1udWxsO2Z1bmN0aW9uIFlqKGEpe2lmKFwidW5kZWZpbmVkXCI9PT10eXBlb2YgX19SRUFDVF9ERVZUT09MU19HTE9CQUxfSE9PS19fKXJldHVybiExO3ZhciBiPV9fUkVBQ1RfREVWVE9PTFNfR0xPQkFMX0hPT0tfXztpZihiLmlzRGlzYWJsZWR8fCFiLnN1cHBvcnRzRmliZXIpcmV0dXJuITA7dHJ5e3ZhciBjPWIuaW5qZWN0KGEpO1VqPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJSb290KGMsYSx2b2lkIDAsNjQ9PT0oYS5jdXJyZW50LmVmZmVjdFRhZyY2NCkpfWNhdGNoKGUpe319O0xpPWZ1bmN0aW9uKGEpe3RyeXtiLm9uQ29tbWl0RmliZXJVbm1vdW50KGMsYSl9Y2F0Y2goZSl7fX19Y2F0Y2goZCl7fXJldHVybiEwfVxuZnVuY3Rpb24gWmooYSxiLGMsZCl7dGhpcy50YWc9YTt0aGlzLmtleT1jO3RoaXMuc2libGluZz10aGlzLmNoaWxkPXRoaXMucmV0dXJuPXRoaXMuc3RhdGVOb2RlPXRoaXMudHlwZT10aGlzLmVsZW1lbnRUeXBlPW51bGw7dGhpcy5pbmRleD0wO3RoaXMucmVmPW51bGw7dGhpcy5wZW5kaW5nUHJvcHM9Yjt0aGlzLmRlcGVuZGVuY2llcz10aGlzLm1lbW9pemVkU3RhdGU9dGhpcy51cGRhdGVRdWV1ZT10aGlzLm1lbW9pemVkUHJvcHM9bnVsbDt0aGlzLm1vZGU9ZDt0aGlzLmVmZmVjdFRhZz0wO3RoaXMubGFzdEVmZmVjdD10aGlzLmZpcnN0RWZmZWN0PXRoaXMubmV4dEVmZmVjdD1udWxsO3RoaXMuY2hpbGRFeHBpcmF0aW9uVGltZT10aGlzLmV4cGlyYXRpb25UaW1lPTA7dGhpcy5hbHRlcm5hdGU9bnVsbH1mdW5jdGlvbiBTaChhLGIsYyxkKXtyZXR1cm4gbmV3IFpqKGEsYixjLGQpfVxuZnVuY3Rpb24gYmkoYSl7YT1hLnByb3RvdHlwZTtyZXR1cm4hKCFhfHwhYS5pc1JlYWN0Q29tcG9uZW50KX1mdW5jdGlvbiBYaihhKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSlyZXR1cm4gYmkoYSk/MTowO2lmKHZvaWQgMCE9PWEmJm51bGwhPT1hKXthPWEuJCR0eXBlb2Y7aWYoYT09PWdiKXJldHVybiAxMTtpZihhPT09amIpcmV0dXJuIDE0fXJldHVybiAyfVxuZnVuY3Rpb24gU2coYSxiKXt2YXIgYz1hLmFsdGVybmF0ZTtudWxsPT09Yz8oYz1TaChhLnRhZyxiLGEua2V5LGEubW9kZSksYy5lbGVtZW50VHlwZT1hLmVsZW1lbnRUeXBlLGMudHlwZT1hLnR5cGUsYy5zdGF0ZU5vZGU9YS5zdGF0ZU5vZGUsYy5hbHRlcm5hdGU9YSxhLmFsdGVybmF0ZT1jKTooYy5wZW5kaW5nUHJvcHM9YixjLmVmZmVjdFRhZz0wLGMubmV4dEVmZmVjdD1udWxsLGMuZmlyc3RFZmZlY3Q9bnVsbCxjLmxhc3RFZmZlY3Q9bnVsbCk7Yy5jaGlsZEV4cGlyYXRpb25UaW1lPWEuY2hpbGRFeHBpcmF0aW9uVGltZTtjLmV4cGlyYXRpb25UaW1lPWEuZXhwaXJhdGlvblRpbWU7Yy5jaGlsZD1hLmNoaWxkO2MubWVtb2l6ZWRQcm9wcz1hLm1lbW9pemVkUHJvcHM7Yy5tZW1vaXplZFN0YXRlPWEubWVtb2l6ZWRTdGF0ZTtjLnVwZGF0ZVF1ZXVlPWEudXBkYXRlUXVldWU7Yj1hLmRlcGVuZGVuY2llcztjLmRlcGVuZGVuY2llcz1udWxsPT09Yj9udWxsOntleHBpcmF0aW9uVGltZTpiLmV4cGlyYXRpb25UaW1lLFxuZmlyc3RDb250ZXh0OmIuZmlyc3RDb250ZXh0LHJlc3BvbmRlcnM6Yi5yZXNwb25kZXJzfTtjLnNpYmxpbmc9YS5zaWJsaW5nO2MuaW5kZXg9YS5pbmRleDtjLnJlZj1hLnJlZjtyZXR1cm4gY31cbmZ1bmN0aW9uIFVnKGEsYixjLGQsZSxmKXt2YXIgZz0yO2Q9YTtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYSliaShhKSYmKGc9MSk7ZWxzZSBpZihcInN0cmluZ1wiPT09dHlwZW9mIGEpZz01O2Vsc2UgYTpzd2l0Y2goYSl7Y2FzZSBhYjpyZXR1cm4gV2coYy5jaGlsZHJlbixlLGYsYik7Y2FzZSBmYjpnPTg7ZXw9NzticmVhaztjYXNlIGJiOmc9ODtlfD0xO2JyZWFrO2Nhc2UgY2I6cmV0dXJuIGE9U2goMTIsYyxiLGV8OCksYS5lbGVtZW50VHlwZT1jYixhLnR5cGU9Y2IsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBoYjpyZXR1cm4gYT1TaCgxMyxjLGIsZSksYS50eXBlPWhiLGEuZWxlbWVudFR5cGU9aGIsYS5leHBpcmF0aW9uVGltZT1mLGE7Y2FzZSBpYjpyZXR1cm4gYT1TaCgxOSxjLGIsZSksYS5lbGVtZW50VHlwZT1pYixhLmV4cGlyYXRpb25UaW1lPWYsYTtkZWZhdWx0OmlmKFwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEpc3dpdGNoKGEuJCR0eXBlb2Ype2Nhc2UgZGI6Zz1cbjEwO2JyZWFrIGE7Y2FzZSBlYjpnPTk7YnJlYWsgYTtjYXNlIGdiOmc9MTE7YnJlYWsgYTtjYXNlIGpiOmc9MTQ7YnJlYWsgYTtjYXNlIGtiOmc9MTY7ZD1udWxsO2JyZWFrIGE7Y2FzZSBsYjpnPTIyO2JyZWFrIGF9dGhyb3cgRXJyb3IodSgxMzAsbnVsbD09YT9hOnR5cGVvZiBhLFwiXCIpKTt9Yj1TaChnLGMsYixlKTtiLmVsZW1lbnRUeXBlPWE7Yi50eXBlPWQ7Yi5leHBpcmF0aW9uVGltZT1mO3JldHVybiBifWZ1bmN0aW9uIFdnKGEsYixjLGQpe2E9U2goNyxhLGQsYik7YS5leHBpcmF0aW9uVGltZT1jO3JldHVybiBhfWZ1bmN0aW9uIFRnKGEsYixjKXthPVNoKDYsYSxudWxsLGIpO2EuZXhwaXJhdGlvblRpbWU9YztyZXR1cm4gYX1cbmZ1bmN0aW9uIFZnKGEsYixjKXtiPVNoKDQsbnVsbCE9PWEuY2hpbGRyZW4/YS5jaGlsZHJlbjpbXSxhLmtleSxiKTtiLmV4cGlyYXRpb25UaW1lPWM7Yi5zdGF0ZU5vZGU9e2NvbnRhaW5lckluZm86YS5jb250YWluZXJJbmZvLHBlbmRpbmdDaGlsZHJlbjpudWxsLGltcGxlbWVudGF0aW9uOmEuaW1wbGVtZW50YXRpb259O3JldHVybiBifVxuZnVuY3Rpb24gYWsoYSxiLGMpe3RoaXMudGFnPWI7dGhpcy5jdXJyZW50PW51bGw7dGhpcy5jb250YWluZXJJbmZvPWE7dGhpcy5waW5nQ2FjaGU9dGhpcy5wZW5kaW5nQ2hpbGRyZW49bnVsbDt0aGlzLmZpbmlzaGVkRXhwaXJhdGlvblRpbWU9MDt0aGlzLmZpbmlzaGVkV29yaz1udWxsO3RoaXMudGltZW91dEhhbmRsZT0tMTt0aGlzLnBlbmRpbmdDb250ZXh0PXRoaXMuY29udGV4dD1udWxsO3RoaXMuaHlkcmF0ZT1jO3RoaXMuY2FsbGJhY2tOb2RlPW51bGw7dGhpcy5jYWxsYmFja1ByaW9yaXR5PTkwO3RoaXMubGFzdEV4cGlyZWRUaW1lPXRoaXMubGFzdFBpbmdlZFRpbWU9dGhpcy5uZXh0S25vd25QZW5kaW5nTGV2ZWw9dGhpcy5sYXN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0U3VzcGVuZGVkVGltZT10aGlzLmZpcnN0UGVuZGluZ1RpbWU9MH1cbmZ1bmN0aW9uIEFqKGEsYil7dmFyIGM9YS5maXJzdFN1c3BlbmRlZFRpbWU7YT1hLmxhc3RTdXNwZW5kZWRUaW1lO3JldHVybiAwIT09YyYmYz49YiYmYTw9Yn1mdW5jdGlvbiB4aShhLGIpe3ZhciBjPWEuZmlyc3RTdXNwZW5kZWRUaW1lLGQ9YS5sYXN0U3VzcGVuZGVkVGltZTtjPGImJihhLmZpcnN0U3VzcGVuZGVkVGltZT1iKTtpZihkPmJ8fDA9PT1jKWEubGFzdFN1c3BlbmRlZFRpbWU9YjtiPD1hLmxhc3RQaW5nZWRUaW1lJiYoYS5sYXN0UGluZ2VkVGltZT0wKTtiPD1hLmxhc3RFeHBpcmVkVGltZSYmKGEubGFzdEV4cGlyZWRUaW1lPTApfVxuZnVuY3Rpb24geWkoYSxiKXtiPmEuZmlyc3RQZW5kaW5nVGltZSYmKGEuZmlyc3RQZW5kaW5nVGltZT1iKTt2YXIgYz1hLmZpcnN0U3VzcGVuZGVkVGltZTswIT09YyYmKGI+PWM/YS5maXJzdFN1c3BlbmRlZFRpbWU9YS5sYXN0U3VzcGVuZGVkVGltZT1hLm5leHRLbm93blBlbmRpbmdMZXZlbD0wOmI+PWEubGFzdFN1c3BlbmRlZFRpbWUmJihhLmxhc3RTdXNwZW5kZWRUaW1lPWIrMSksYj5hLm5leHRLbm93blBlbmRpbmdMZXZlbCYmKGEubmV4dEtub3duUGVuZGluZ0xldmVsPWIpKX1mdW5jdGlvbiBDaihhLGIpe3ZhciBjPWEubGFzdEV4cGlyZWRUaW1lO2lmKDA9PT1jfHxjPmIpYS5sYXN0RXhwaXJlZFRpbWU9Yn1cbmZ1bmN0aW9uIGJrKGEsYixjLGQpe3ZhciBlPWIuY3VycmVudCxmPUdnKCksZz1EZy5zdXNwZW5zZTtmPUhnKGYsZSxnKTthOmlmKGMpe2M9Yy5fcmVhY3RJbnRlcm5hbEZpYmVyO2I6e2lmKGRjKGMpIT09Y3x8MSE9PWMudGFnKXRocm93IEVycm9yKHUoMTcwKSk7dmFyIGg9Yztkb3tzd2l0Y2goaC50YWcpe2Nhc2UgMzpoPWguc3RhdGVOb2RlLmNvbnRleHQ7YnJlYWsgYjtjYXNlIDE6aWYoTChoLnR5cGUpKXtoPWguc3RhdGVOb2RlLl9fcmVhY3RJbnRlcm5hbE1lbW9pemVkTWVyZ2VkQ2hpbGRDb250ZXh0O2JyZWFrIGJ9fWg9aC5yZXR1cm59d2hpbGUobnVsbCE9PWgpO3Rocm93IEVycm9yKHUoMTcxKSk7fWlmKDE9PT1jLnRhZyl7dmFyIGs9Yy50eXBlO2lmKEwoaykpe2M9RmYoYyxrLGgpO2JyZWFrIGF9fWM9aH1lbHNlIGM9QWY7bnVsbD09PWIuY29udGV4dD9iLmNvbnRleHQ9YzpiLnBlbmRpbmdDb250ZXh0PWM7Yj13ZyhmLGcpO2IucGF5bG9hZD17ZWxlbWVudDphfTtkPXZvaWQgMD09PVxuZD9udWxsOmQ7bnVsbCE9PWQmJihiLmNhbGxiYWNrPWQpO3hnKGUsYik7SWcoZSxmKTtyZXR1cm4gZn1mdW5jdGlvbiBjayhhKXthPWEuY3VycmVudDtpZighYS5jaGlsZClyZXR1cm4gbnVsbDtzd2l0Y2goYS5jaGlsZC50YWcpe2Nhc2UgNTpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGU7ZGVmYXVsdDpyZXR1cm4gYS5jaGlsZC5zdGF0ZU5vZGV9fWZ1bmN0aW9uIGRrKGEsYil7YT1hLm1lbW9pemVkU3RhdGU7bnVsbCE9PWEmJm51bGwhPT1hLmRlaHlkcmF0ZWQmJmEucmV0cnlUaW1lPGImJihhLnJldHJ5VGltZT1iKX1mdW5jdGlvbiBlayhhLGIpe2RrKGEsYik7KGE9YS5hbHRlcm5hdGUpJiZkayhhLGIpfVxuZnVuY3Rpb24gZmsoYSxiLGMpe2M9bnVsbCE9YyYmITA9PT1jLmh5ZHJhdGU7dmFyIGQ9bmV3IGFrKGEsYixjKSxlPVNoKDMsbnVsbCxudWxsLDI9PT1iPzc6MT09PWI/MzowKTtkLmN1cnJlbnQ9ZTtlLnN0YXRlTm9kZT1kO3VnKGUpO2FbT2RdPWQuY3VycmVudDtjJiYwIT09YiYmSmMoYSw5PT09YS5ub2RlVHlwZT9hOmEub3duZXJEb2N1bWVudCk7dGhpcy5faW50ZXJuYWxSb290PWR9ZmsucHJvdG90eXBlLnJlbmRlcj1mdW5jdGlvbihhKXtiayhhLHRoaXMuX2ludGVybmFsUm9vdCxudWxsLG51bGwpfTtmay5wcm90b3R5cGUudW5tb3VudD1mdW5jdGlvbigpe3ZhciBhPXRoaXMuX2ludGVybmFsUm9vdCxiPWEuY29udGFpbmVySW5mbztiayhudWxsLGEsbnVsbCxmdW5jdGlvbigpe2JbT2RdPW51bGx9KX07XG5mdW5jdGlvbiBnayhhKXtyZXR1cm4hKCFhfHwxIT09YS5ub2RlVHlwZSYmOSE9PWEubm9kZVR5cGUmJjExIT09YS5ub2RlVHlwZSYmKDghPT1hLm5vZGVUeXBlfHxcIiByZWFjdC1tb3VudC1wb2ludC11bnN0YWJsZSBcIiE9PWEubm9kZVZhbHVlKSl9ZnVuY3Rpb24gaGsoYSxiKXtifHwoYj1hPzk9PT1hLm5vZGVUeXBlP2EuZG9jdW1lbnRFbGVtZW50OmEuZmlyc3RDaGlsZDpudWxsLGI9ISghYnx8MSE9PWIubm9kZVR5cGV8fCFiLmhhc0F0dHJpYnV0ZShcImRhdGEtcmVhY3Ryb290XCIpKSk7aWYoIWIpZm9yKHZhciBjO2M9YS5sYXN0Q2hpbGQ7KWEucmVtb3ZlQ2hpbGQoYyk7cmV0dXJuIG5ldyBmayhhLDAsYj97aHlkcmF0ZTohMH06dm9pZCAwKX1cbmZ1bmN0aW9uIGlrKGEsYixjLGQsZSl7dmFyIGY9Yy5fcmVhY3RSb290Q29udGFpbmVyO2lmKGYpe3ZhciBnPWYuX2ludGVybmFsUm9vdDtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgZSl7dmFyIGg9ZTtlPWZ1bmN0aW9uKCl7dmFyIGE9Y2soZyk7aC5jYWxsKGEpfX1iayhiLGcsYSxlKX1lbHNle2Y9Yy5fcmVhY3RSb290Q29udGFpbmVyPWhrKGMsZCk7Zz1mLl9pbnRlcm5hbFJvb3Q7aWYoXCJmdW5jdGlvblwiPT09dHlwZW9mIGUpe3ZhciBrPWU7ZT1mdW5jdGlvbigpe3ZhciBhPWNrKGcpO2suY2FsbChhKX19TmooZnVuY3Rpb24oKXtiayhiLGcsYSxlKX0pfXJldHVybiBjayhnKX1mdW5jdGlvbiBqayhhLGIsYyl7dmFyIGQ9Mzxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbM10/YXJndW1lbnRzWzNdOm51bGw7cmV0dXJueyQkdHlwZW9mOiRhLGtleTpudWxsPT1kP251bGw6XCJcIitkLGNoaWxkcmVuOmEsY29udGFpbmVySW5mbzpiLGltcGxlbWVudGF0aW9uOmN9fVxud2M9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9aGcoR2coKSwxNTAsMTAwKTtJZyhhLGIpO2VrKGEsYil9fTt4Yz1mdW5jdGlvbihhKXsxMz09PWEudGFnJiYoSWcoYSwzKSxlayhhLDMpKX07eWM9ZnVuY3Rpb24oYSl7aWYoMTM9PT1hLnRhZyl7dmFyIGI9R2coKTtiPUhnKGIsYSxudWxsKTtJZyhhLGIpO2VrKGEsYil9fTtcbnphPWZ1bmN0aW9uKGEsYixjKXtzd2l0Y2goYil7Y2FzZSBcImlucHV0XCI6Q2IoYSxjKTtiPWMubmFtZTtpZihcInJhZGlvXCI9PT1jLnR5cGUmJm51bGwhPWIpe2ZvcihjPWE7Yy5wYXJlbnROb2RlOyljPWMucGFyZW50Tm9kZTtjPWMucXVlcnlTZWxlY3RvckFsbChcImlucHV0W25hbWU9XCIrSlNPTi5zdHJpbmdpZnkoXCJcIitiKSsnXVt0eXBlPVwicmFkaW9cIl0nKTtmb3IoYj0wO2I8Yy5sZW5ndGg7YisrKXt2YXIgZD1jW2JdO2lmKGQhPT1hJiZkLmZvcm09PT1hLmZvcm0pe3ZhciBlPVFkKGQpO2lmKCFlKXRocm93IEVycm9yKHUoOTApKTt5YihkKTtDYihkLGUpfX19YnJlYWs7Y2FzZSBcInRleHRhcmVhXCI6S2IoYSxjKTticmVhaztjYXNlIFwic2VsZWN0XCI6Yj1jLnZhbHVlLG51bGwhPWImJkhiKGEsISFjLm11bHRpcGxlLGIsITEpfX07RmE9TWo7XG5HYT1mdW5jdGlvbihhLGIsYyxkLGUpe3ZhciBmPVc7V3w9NDt0cnl7cmV0dXJuIGNnKDk4LGEuYmluZChudWxsLGIsYyxkLGUpKX1maW5hbGx5e1c9ZixXPT09ViYmZ2coKX19O0hhPWZ1bmN0aW9uKCl7KFcmKDF8Zmp8Z2opKT09PVYmJihMaigpLERqKCkpfTtJYT1mdW5jdGlvbihhLGIpe3ZhciBjPVc7V3w9Mjt0cnl7cmV0dXJuIGEoYil9ZmluYWxseXtXPWMsVz09PVYmJmdnKCl9fTtmdW5jdGlvbiBrayhhLGIpe3ZhciBjPTI8YXJndW1lbnRzLmxlbmd0aCYmdm9pZCAwIT09YXJndW1lbnRzWzJdP2FyZ3VtZW50c1syXTpudWxsO2lmKCFnayhiKSl0aHJvdyBFcnJvcih1KDIwMCkpO3JldHVybiBqayhhLGIsbnVsbCxjKX12YXIgbGs9e0V2ZW50czpbTmMsUGQsUWQseGEsdGEsWGQsZnVuY3Rpb24oYSl7amMoYSxXZCl9LERhLEVhLGlkLG1jLERqLHtjdXJyZW50OiExfV19O1xuKGZ1bmN0aW9uKGEpe3ZhciBiPWEuZmluZEZpYmVyQnlIb3N0SW5zdGFuY2U7cmV0dXJuIFlqKG4oe30sYSx7b3ZlcnJpZGVIb29rU3RhdGU6bnVsbCxvdmVycmlkZVByb3BzOm51bGwsc2V0U3VzcGVuc2VIYW5kbGVyOm51bGwsc2NoZWR1bGVVcGRhdGU6bnVsbCxjdXJyZW50RGlzcGF0Y2hlclJlZjpXYS5SZWFjdEN1cnJlbnREaXNwYXRjaGVyLGZpbmRIb3N0SW5zdGFuY2VCeUZpYmVyOmZ1bmN0aW9uKGEpe2E9aGMoYSk7cmV0dXJuIG51bGw9PT1hP251bGw6YS5zdGF0ZU5vZGV9LGZpbmRGaWJlckJ5SG9zdEluc3RhbmNlOmZ1bmN0aW9uKGEpe3JldHVybiBiP2IoYSk6bnVsbH0sZmluZEhvc3RJbnN0YW5jZXNGb3JSZWZyZXNoOm51bGwsc2NoZWR1bGVSZWZyZXNoOm51bGwsc2NoZWR1bGVSb290Om51bGwsc2V0UmVmcmVzaEhhbmRsZXI6bnVsbCxnZXRDdXJyZW50RmliZXI6bnVsbH0pKX0pKHtmaW5kRmliZXJCeUhvc3RJbnN0YW5jZTp0YyxidW5kbGVUeXBlOjAsdmVyc2lvbjpcIjE2LjEzLjFcIixcbnJlbmRlcmVyUGFja2FnZU5hbWU6XCJyZWFjdC1kb21cIn0pO2V4cG9ydHMuX19TRUNSRVRfSU5URVJOQUxTX0RPX05PVF9VU0VfT1JfWU9VX1dJTExfQkVfRklSRUQ9bGs7ZXhwb3J0cy5jcmVhdGVQb3J0YWw9a2s7ZXhwb3J0cy5maW5kRE9NTm9kZT1mdW5jdGlvbihhKXtpZihudWxsPT1hKXJldHVybiBudWxsO2lmKDE9PT1hLm5vZGVUeXBlKXJldHVybiBhO3ZhciBiPWEuX3JlYWN0SW50ZXJuYWxGaWJlcjtpZih2b2lkIDA9PT1iKXtpZihcImZ1bmN0aW9uXCI9PT10eXBlb2YgYS5yZW5kZXIpdGhyb3cgRXJyb3IodSgxODgpKTt0aHJvdyBFcnJvcih1KDI2OCxPYmplY3Qua2V5cyhhKSkpO31hPWhjKGIpO2E9bnVsbD09PWE/bnVsbDphLnN0YXRlTm9kZTtyZXR1cm4gYX07XG5leHBvcnRzLmZsdXNoU3luYz1mdW5jdGlvbihhLGIpe2lmKChXJihmanxnaikpIT09Vil0aHJvdyBFcnJvcih1KDE4NykpO3ZhciBjPVc7V3w9MTt0cnl7cmV0dXJuIGNnKDk5LGEuYmluZChudWxsLGIpKX1maW5hbGx5e1c9YyxnZygpfX07ZXhwb3J0cy5oeWRyYXRlPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITAsYyl9O2V4cG9ydHMucmVuZGVyPWZ1bmN0aW9uKGEsYixjKXtpZighZ2soYikpdGhyb3cgRXJyb3IodSgyMDApKTtyZXR1cm4gaWsobnVsbCxhLGIsITEsYyl9O1xuZXhwb3J0cy51bm1vdW50Q29tcG9uZW50QXROb2RlPWZ1bmN0aW9uKGEpe2lmKCFnayhhKSl0aHJvdyBFcnJvcih1KDQwKSk7cmV0dXJuIGEuX3JlYWN0Um9vdENvbnRhaW5lcj8oTmooZnVuY3Rpb24oKXtpayhudWxsLG51bGwsYSwhMSxmdW5jdGlvbigpe2EuX3JlYWN0Um9vdENvbnRhaW5lcj1udWxsO2FbT2RdPW51bGx9KX0pLCEwKTohMX07ZXhwb3J0cy51bnN0YWJsZV9iYXRjaGVkVXBkYXRlcz1NajtleHBvcnRzLnVuc3RhYmxlX2NyZWF0ZVBvcnRhbD1mdW5jdGlvbihhLGIpe3JldHVybiBrayhhLGIsMjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOm51bGwpfTtcbmV4cG9ydHMudW5zdGFibGVfcmVuZGVyU3VidHJlZUludG9Db250YWluZXI9ZnVuY3Rpb24oYSxiLGMsZCl7aWYoIWdrKGMpKXRocm93IEVycm9yKHUoMjAwKSk7aWYobnVsbD09YXx8dm9pZCAwPT09YS5fcmVhY3RJbnRlcm5hbEZpYmVyKXRocm93IEVycm9yKHUoMzgpKTtyZXR1cm4gaWsoYSxiLGMsITEsZCl9O2V4cG9ydHMudmVyc2lvbj1cIjE2LjEzLjFcIjtcbiIsIid1c2Ugc3RyaWN0JztcblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WID09PSAncHJvZHVjdGlvbicpIHtcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2Nqcy9zY2hlZHVsZXIucHJvZHVjdGlvbi5taW4uanMnKTtcbn0gZWxzZSB7XG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9janMvc2NoZWR1bGVyLmRldmVsb3BtZW50LmpzJyk7XG59XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTkuMVxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1jLTE+Pj4xLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9JbW1lZGlhdGVQcmlvcml0eT0xO2V4cG9ydHMudW5zdGFibGVfTG93UHJpb3JpdHk9NDtleHBvcnRzLnVuc3RhYmxlX05vcm1hbFByaW9yaXR5PTM7ZXhwb3J0cy51bnN0YWJsZV9Qcm9maWxpbmc9bnVsbDtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9jYW5jZWxDYWxsYmFjaz1mdW5jdGlvbihhKXthLmNhbGxiYWNrPW51bGx9O2V4cG9ydHMudW5zdGFibGVfY29udGludWVFeGVjdXRpb249ZnVuY3Rpb24oKXtUfHxTfHwoVD0hMCxmKFgpKX07XG5leHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfZ2V0Rmlyc3RDYWxsYmFja05vZGU9ZnVuY3Rpb24oKXtyZXR1cm4gTChOKX07ZXhwb3J0cy51bnN0YWJsZV9uZXh0PWZ1bmN0aW9uKGEpe3N3aXRjaChSKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzp2YXIgYj0zO2JyZWFrO2RlZmF1bHQ6Yj1SfXZhciBjPVI7Uj1iO3RyeXtyZXR1cm4gYSgpfWZpbmFsbHl7Uj1jfX07ZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX3J1bldpdGhQcmlvcml0eT1mdW5jdGlvbihhLGIpe3N3aXRjaChhKXtjYXNlIDE6Y2FzZSAyOmNhc2UgMzpjYXNlIDQ6Y2FzZSA1OmJyZWFrO2RlZmF1bHQ6YT0zfXZhciBjPVI7Uj1hO3RyeXtyZXR1cm4gYigpfWZpbmFsbHl7Uj1jfX07XG5leHBvcnRzLnVuc3RhYmxlX3NjaGVkdWxlQ2FsbGJhY2s9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPWV4cG9ydHMudW5zdGFibGVfbm93KCk7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBjJiZudWxsIT09Yyl7dmFyIGU9Yy5kZWxheTtlPVwibnVtYmVyXCI9PT10eXBlb2YgZSYmMDxlP2QrZTpkO2M9XCJudW1iZXJcIj09PXR5cGVvZiBjLnRpbWVvdXQ/Yy50aW1lb3V0OlkoYSl9ZWxzZSBjPVkoYSksZT1kO2M9ZStjO2E9e2lkOlArKyxjYWxsYmFjazpiLHByaW9yaXR5TGV2ZWw6YSxzdGFydFRpbWU6ZSxleHBpcmF0aW9uVGltZTpjLHNvcnRJbmRleDotMX07ZT5kPyhhLnNvcnRJbmRleD1lLEooTyxhKSxudWxsPT09TChOKSYmYT09PUwoTykmJihVP2goKTpVPSEwLGcoVyxlLWQpKSk6KGEuc29ydEluZGV4PWMsSihOLGEpLFR8fFN8fChUPSEwLGYoWCkpKTtyZXR1cm4gYX07XG5leHBvcnRzLnVuc3RhYmxlX3Nob3VsZFlpZWxkPWZ1bmN0aW9uKCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtWKGEpO3ZhciBiPUwoTik7cmV0dXJuIGIhPT1RJiZudWxsIT09USYmbnVsbCE9PWImJm51bGwhPT1iLmNhbGxiYWNrJiZiLnN0YXJ0VGltZTw9YSYmYi5leHBpcmF0aW9uVGltZTxRLmV4cGlyYXRpb25UaW1lfHxrKCl9O2V4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtcbiIsIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDEzLXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG52YXIgUmVhY3RQcm9wVHlwZXNTZWNyZXQgPSByZXF1aXJlKCcuL2xpYi9SZWFjdFByb3BUeXBlc1NlY3JldCcpO1xuXG5mdW5jdGlvbiBlbXB0eUZ1bmN0aW9uKCkge31cbmZ1bmN0aW9uIGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQoKSB7fVxuZW1wdHlGdW5jdGlvbldpdGhSZXNldC5yZXNldFdhcm5pbmdDYWNoZSA9IGVtcHR5RnVuY3Rpb247XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oKSB7XG4gIGZ1bmN0aW9uIHNoaW0ocHJvcHMsIHByb3BOYW1lLCBjb21wb25lbnROYW1lLCBsb2NhdGlvbiwgcHJvcEZ1bGxOYW1lLCBzZWNyZXQpIHtcbiAgICBpZiAoc2VjcmV0ID09PSBSZWFjdFByb3BUeXBlc1NlY3JldCkge1xuICAgICAgLy8gSXQgaXMgc3RpbGwgc2FmZSB3aGVuIGNhbGxlZCBmcm9tIFJlYWN0LlxuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICB2YXIgZXJyID0gbmV3IEVycm9yKFxuICAgICAgJ0NhbGxpbmcgUHJvcFR5cGVzIHZhbGlkYXRvcnMgZGlyZWN0bHkgaXMgbm90IHN1cHBvcnRlZCBieSB0aGUgYHByb3AtdHlwZXNgIHBhY2thZ2UuICcgK1xuICAgICAgJ1VzZSBQcm9wVHlwZXMuY2hlY2tQcm9wVHlwZXMoKSB0byBjYWxsIHRoZW0uICcgK1xuICAgICAgJ1JlYWQgbW9yZSBhdCBodHRwOi8vZmIubWUvdXNlLWNoZWNrLXByb3AtdHlwZXMnXG4gICAgKTtcbiAgICBlcnIubmFtZSA9ICdJbnZhcmlhbnQgVmlvbGF0aW9uJztcbiAgICB0aHJvdyBlcnI7XG4gIH07XG4gIHNoaW0uaXNSZXF1aXJlZCA9IHNoaW07XG4gIGZ1bmN0aW9uIGdldFNoaW0oKSB7XG4gICAgcmV0dXJuIHNoaW07XG4gIH07XG4gIC8vIEltcG9ydGFudCFcbiAgLy8gS2VlcCB0aGlzIGxpc3QgaW4gc3luYyB3aXRoIHByb2R1Y3Rpb24gdmVyc2lvbiBpbiBgLi9mYWN0b3J5V2l0aFR5cGVDaGVja2Vycy5qc2AuXG4gIHZhciBSZWFjdFByb3BUeXBlcyA9IHtcbiAgICBhcnJheTogc2hpbSxcbiAgICBib29sOiBzaGltLFxuICAgIGZ1bmM6IHNoaW0sXG4gICAgbnVtYmVyOiBzaGltLFxuICAgIG9iamVjdDogc2hpbSxcbiAgICBzdHJpbmc6IHNoaW0sXG4gICAgc3ltYm9sOiBzaGltLFxuXG4gICAgYW55OiBzaGltLFxuICAgIGFycmF5T2Y6IGdldFNoaW0sXG4gICAgZWxlbWVudDogc2hpbSxcbiAgICBlbGVtZW50VHlwZTogc2hpbSxcbiAgICBpbnN0YW5jZU9mOiBnZXRTaGltLFxuICAgIG5vZGU6IHNoaW0sXG4gICAgb2JqZWN0T2Y6IGdldFNoaW0sXG4gICAgb25lT2Y6IGdldFNoaW0sXG4gICAgb25lT2ZUeXBlOiBnZXRTaGltLFxuICAgIHNoYXBlOiBnZXRTaGltLFxuICAgIGV4YWN0OiBnZXRTaGltLFxuXG4gICAgY2hlY2tQcm9wVHlwZXM6IGVtcHR5RnVuY3Rpb25XaXRoUmVzZXQsXG4gICAgcmVzZXRXYXJuaW5nQ2FjaGU6IGVtcHR5RnVuY3Rpb25cbiAgfTtcblxuICBSZWFjdFByb3BUeXBlcy5Qcm9wVHlwZXMgPSBSZWFjdFByb3BUeXBlcztcblxuICByZXR1cm4gUmVhY3RQcm9wVHlwZXM7XG59O1xuIiwiLyoqXG4gKiBDb3B5cmlnaHQgKGMpIDIwMTMtcHJlc2VudCwgRmFjZWJvb2ssIEluYy5cbiAqXG4gKiBUaGlzIHNvdXJjZSBjb2RlIGlzIGxpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZSBmb3VuZCBpbiB0aGVcbiAqIExJQ0VOU0UgZmlsZSBpbiB0aGUgcm9vdCBkaXJlY3Rvcnkgb2YgdGhpcyBzb3VyY2UgdHJlZS5cbiAqL1xuXG4ndXNlIHN0cmljdCc7XG5cbnZhciBSZWFjdFByb3BUeXBlc1NlY3JldCA9ICdTRUNSRVRfRE9fTk9UX1BBU1NfVEhJU19PUl9ZT1VfV0lMTF9CRV9GSVJFRCc7XG5cbm1vZHVsZS5leHBvcnRzID0gUmVhY3RQcm9wVHlwZXNTZWNyZXQ7XG4iLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjE2LjEzLjFcbiAqIHJlYWN0LWlzLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO3ZhciBiPVwiZnVuY3Rpb25cIj09PXR5cGVvZiBTeW1ib2wmJlN5bWJvbC5mb3IsYz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5lbGVtZW50XCIpOjYwMTAzLGQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QucG9ydGFsXCIpOjYwMTA2LGU9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnJhZ21lbnRcIik6NjAxMDcsZj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zdHJpY3RfbW9kZVwiKTo2MDEwOCxnPWI/U3ltYm9sLmZvcihcInJlYWN0LnByb2ZpbGVyXCIpOjYwMTE0LGg9Yj9TeW1ib2wuZm9yKFwicmVhY3QucHJvdmlkZXJcIik6NjAxMDksaz1iP1N5bWJvbC5mb3IoXCJyZWFjdC5jb250ZXh0XCIpOjYwMTEwLGw9Yj9TeW1ib2wuZm9yKFwicmVhY3QuYXN5bmNfbW9kZVwiKTo2MDExMSxtPWI/U3ltYm9sLmZvcihcInJlYWN0LmNvbmN1cnJlbnRfbW9kZVwiKTo2MDExMSxuPWI/U3ltYm9sLmZvcihcInJlYWN0LmZvcndhcmRfcmVmXCIpOjYwMTEyLHA9Yj9TeW1ib2wuZm9yKFwicmVhY3Quc3VzcGVuc2VcIik6NjAxMTMscT1iP1xuU3ltYm9sLmZvcihcInJlYWN0LnN1c3BlbnNlX2xpc3RcIik6NjAxMjAscj1iP1N5bWJvbC5mb3IoXCJyZWFjdC5tZW1vXCIpOjYwMTE1LHQ9Yj9TeW1ib2wuZm9yKFwicmVhY3QubGF6eVwiKTo2MDExNix2PWI/U3ltYm9sLmZvcihcInJlYWN0LmJsb2NrXCIpOjYwMTIxLHc9Yj9TeW1ib2wuZm9yKFwicmVhY3QuZnVuZGFtZW50YWxcIik6NjAxMTcseD1iP1N5bWJvbC5mb3IoXCJyZWFjdC5yZXNwb25kZXJcIik6NjAxMTgseT1iP1N5bWJvbC5mb3IoXCJyZWFjdC5zY29wZVwiKTo2MDExOTtcbmZ1bmN0aW9uIHooYSl7aWYoXCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSl7dmFyIHU9YS4kJHR5cGVvZjtzd2l0Y2godSl7Y2FzZSBjOnN3aXRjaChhPWEudHlwZSxhKXtjYXNlIGw6Y2FzZSBtOmNhc2UgZTpjYXNlIGc6Y2FzZSBmOmNhc2UgcDpyZXR1cm4gYTtkZWZhdWx0OnN3aXRjaChhPWEmJmEuJCR0eXBlb2YsYSl7Y2FzZSBrOmNhc2UgbjpjYXNlIHQ6Y2FzZSByOmNhc2UgaDpyZXR1cm4gYTtkZWZhdWx0OnJldHVybiB1fX1jYXNlIGQ6cmV0dXJuIHV9fX1mdW5jdGlvbiBBKGEpe3JldHVybiB6KGEpPT09bX1leHBvcnRzLkFzeW5jTW9kZT1sO2V4cG9ydHMuQ29uY3VycmVudE1vZGU9bTtleHBvcnRzLkNvbnRleHRDb25zdW1lcj1rO2V4cG9ydHMuQ29udGV4dFByb3ZpZGVyPWg7ZXhwb3J0cy5FbGVtZW50PWM7ZXhwb3J0cy5Gb3J3YXJkUmVmPW47ZXhwb3J0cy5GcmFnbWVudD1lO2V4cG9ydHMuTGF6eT10O2V4cG9ydHMuTWVtbz1yO2V4cG9ydHMuUG9ydGFsPWQ7XG5leHBvcnRzLlByb2ZpbGVyPWc7ZXhwb3J0cy5TdHJpY3RNb2RlPWY7ZXhwb3J0cy5TdXNwZW5zZT1wO2V4cG9ydHMuaXNBc3luY01vZGU9ZnVuY3Rpb24oYSl7cmV0dXJuIEEoYSl8fHooYSk9PT1sfTtleHBvcnRzLmlzQ29uY3VycmVudE1vZGU9QTtleHBvcnRzLmlzQ29udGV4dENvbnN1bWVyPWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09a307ZXhwb3J0cy5pc0NvbnRleHRQcm92aWRlcj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWh9O2V4cG9ydHMuaXNFbGVtZW50PWZ1bmN0aW9uKGEpe3JldHVyblwib2JqZWN0XCI9PT10eXBlb2YgYSYmbnVsbCE9PWEmJmEuJCR0eXBlb2Y9PT1jfTtleHBvcnRzLmlzRm9yd2FyZFJlZj1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PW59O2V4cG9ydHMuaXNGcmFnbWVudD1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWV9O2V4cG9ydHMuaXNMYXp5PWZ1bmN0aW9uKGEpe3JldHVybiB6KGEpPT09dH07XG5leHBvcnRzLmlzTWVtbz1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXJ9O2V4cG9ydHMuaXNQb3J0YWw9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1kfTtleHBvcnRzLmlzUHJvZmlsZXI9ZnVuY3Rpb24oYSl7cmV0dXJuIHooYSk9PT1nfTtleHBvcnRzLmlzU3RyaWN0TW9kZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PWZ9O2V4cG9ydHMuaXNTdXNwZW5zZT1mdW5jdGlvbihhKXtyZXR1cm4geihhKT09PXB9O1xuZXhwb3J0cy5pc1ZhbGlkRWxlbWVudFR5cGU9ZnVuY3Rpb24oYSl7cmV0dXJuXCJzdHJpbmdcIj09PXR5cGVvZiBhfHxcImZ1bmN0aW9uXCI9PT10eXBlb2YgYXx8YT09PWV8fGE9PT1tfHxhPT09Z3x8YT09PWZ8fGE9PT1wfHxhPT09cXx8XCJvYmplY3RcIj09PXR5cGVvZiBhJiZudWxsIT09YSYmKGEuJCR0eXBlb2Y9PT10fHxhLiQkdHlwZW9mPT09cnx8YS4kJHR5cGVvZj09PWh8fGEuJCR0eXBlb2Y9PT1rfHxhLiQkdHlwZW9mPT09bnx8YS4kJHR5cGVvZj09PXd8fGEuJCR0eXBlb2Y9PT14fHxhLiQkdHlwZW9mPT09eXx8YS4kJHR5cGVvZj09PXYpfTtleHBvcnRzLnR5cGVPZj16O1xuIiwiLy8gaXRlcmFibGUgRE9NIGNvbGxlY3Rpb25zXG4vLyBmbGFnIC0gYGl0ZXJhYmxlYCBpbnRlcmZhY2UgLSAnZW50cmllcycsICdrZXlzJywgJ3ZhbHVlcycsICdmb3JFYWNoJyBtZXRob2RzXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgQ1NTUnVsZUxpc3Q6IDAsXG4gIENTU1N0eWxlRGVjbGFyYXRpb246IDAsXG4gIENTU1ZhbHVlTGlzdDogMCxcbiAgQ2xpZW50UmVjdExpc3Q6IDAsXG4gIERPTVJlY3RMaXN0OiAwLFxuICBET01TdHJpbmdMaXN0OiAwLFxuICBET01Ub2tlbkxpc3Q6IDEsXG4gIERhdGFUcmFuc2Zlckl0ZW1MaXN0OiAwLFxuICBGaWxlTGlzdDogMCxcbiAgSFRNTEFsbENvbGxlY3Rpb246IDAsXG4gIEhUTUxDb2xsZWN0aW9uOiAwLFxuICBIVE1MRm9ybUVsZW1lbnQ6IDAsXG4gIEhUTUxTZWxlY3RFbGVtZW50OiAwLFxuICBNZWRpYUxpc3Q6IDAsXG4gIE1pbWVUeXBlQXJyYXk6IDAsXG4gIE5hbWVkTm9kZU1hcDogMCxcbiAgTm9kZUxpc3Q6IDEsXG4gIFBhaW50UmVxdWVzdExpc3Q6IDAsXG4gIFBsdWdpbjogMCxcbiAgUGx1Z2luQXJyYXk6IDAsXG4gIFNWR0xlbmd0aExpc3Q6IDAsXG4gIFNWR051bWJlckxpc3Q6IDAsXG4gIFNWR1BhdGhTZWdMaXN0OiAwLFxuICBTVkdQb2ludExpc3Q6IDAsXG4gIFNWR1N0cmluZ0xpc3Q6IDAsXG4gIFNWR1RyYW5zZm9ybUxpc3Q6IDAsXG4gIFNvdXJjZUJ1ZmZlckxpc3Q6IDAsXG4gIFN0eWxlU2hlZXRMaXN0OiAwLFxuICBUZXh0VHJhY2tDdWVMaXN0OiAwLFxuICBUZXh0VHJhY2tMaXN0OiAwLFxuICBUb3VjaExpc3Q6IDBcbn07XG4iLCIndXNlIHN0cmljdCc7XG52YXIgdG9JbmRleGVkT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWluZGV4ZWQtb2JqZWN0Jyk7XG52YXIgYWRkVG9VbnNjb3BhYmxlcyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hZGQtdG8tdW5zY29wYWJsZXMnKTtcbnZhciBJdGVyYXRvcnMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzJyk7XG52YXIgSW50ZXJuYWxTdGF0ZU1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnRlcm5hbC1zdGF0ZScpO1xudmFyIGRlZmluZUl0ZXJhdG9yID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2RlZmluZS1pdGVyYXRvcicpO1xuXG52YXIgQVJSQVlfSVRFUkFUT1IgPSAnQXJyYXkgSXRlcmF0b3InO1xudmFyIHNldEludGVybmFsU3RhdGUgPSBJbnRlcm5hbFN0YXRlTW9kdWxlLnNldDtcbnZhciBnZXRJbnRlcm5hbFN0YXRlID0gSW50ZXJuYWxTdGF0ZU1vZHVsZS5nZXR0ZXJGb3IoQVJSQVlfSVRFUkFUT1IpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLmVudHJpZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmVudHJpZXNcbi8vIGBBcnJheS5wcm90b3R5cGUua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUua2V5c1xuLy8gYEFycmF5LnByb3RvdHlwZS52YWx1ZXNgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLnZhbHVlc1xuLy8gYEFycmF5LnByb3RvdHlwZVtAQGl0ZXJhdG9yXWAgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUtQEBpdGVyYXRvclxuLy8gYENyZWF0ZUFycmF5SXRlcmF0b3JgIGludGVybmFsIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRlYXJyYXlpdGVyYXRvclxubW9kdWxlLmV4cG9ydHMgPSBkZWZpbmVJdGVyYXRvcihBcnJheSwgJ0FycmF5JywgZnVuY3Rpb24gKGl0ZXJhdGVkLCBraW5kKSB7XG4gIHNldEludGVybmFsU3RhdGUodGhpcywge1xuICAgIHR5cGU6IEFSUkFZX0lURVJBVE9SLFxuICAgIHRhcmdldDogdG9JbmRleGVkT2JqZWN0KGl0ZXJhdGVkKSwgLy8gdGFyZ2V0XG4gICAgaW5kZXg6IDAsICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBuZXh0IGluZGV4XG4gICAga2luZDoga2luZCAgICAgICAgICAgICAgICAgICAgICAgICAvLyBraW5kXG4gIH0pO1xuLy8gYCVBcnJheUl0ZXJhdG9yUHJvdG90eXBlJS5uZXh0YCBtZXRob2Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLSVhcnJheWl0ZXJhdG9ycHJvdG90eXBlJS5uZXh0XG59LCBmdW5jdGlvbiAoKSB7XG4gIHZhciBzdGF0ZSA9IGdldEludGVybmFsU3RhdGUodGhpcyk7XG4gIHZhciB0YXJnZXQgPSBzdGF0ZS50YXJnZXQ7XG4gIHZhciBraW5kID0gc3RhdGUua2luZDtcbiAgdmFyIGluZGV4ID0gc3RhdGUuaW5kZXgrKztcbiAgaWYgKCF0YXJnZXQgfHwgaW5kZXggPj0gdGFyZ2V0Lmxlbmd0aCkge1xuICAgIHN0YXRlLnRhcmdldCA9IHVuZGVmaW5lZDtcbiAgICByZXR1cm4geyB2YWx1ZTogdW5kZWZpbmVkLCBkb25lOiB0cnVlIH07XG4gIH1cbiAgaWYgKGtpbmQgPT0gJ2tleXMnKSByZXR1cm4geyB2YWx1ZTogaW5kZXgsIGRvbmU6IGZhbHNlIH07XG4gIGlmIChraW5kID09ICd2YWx1ZXMnKSByZXR1cm4geyB2YWx1ZTogdGFyZ2V0W2luZGV4XSwgZG9uZTogZmFsc2UgfTtcbiAgcmV0dXJuIHsgdmFsdWU6IFtpbmRleCwgdGFyZ2V0W2luZGV4XV0sIGRvbmU6IGZhbHNlIH07XG59LCAndmFsdWVzJyk7XG5cbi8vIGFyZ3VtZW50c0xpc3RbQEBpdGVyYXRvcl0gaXMgJUFycmF5UHJvdG9fdmFsdWVzJVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtY3JlYXRldW5tYXBwZWRhcmd1bWVudHNvYmplY3Rcbi8vIGh0dHBzOi8vdGMzOS5naXRodWIuaW8vZWNtYTI2Mi8jc2VjLWNyZWF0ZW1hcHBlZGFyZ3VtZW50c29iamVjdFxuSXRlcmF0b3JzLkFyZ3VtZW50cyA9IEl0ZXJhdG9ycy5BcnJheTtcblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmFkZFRvVW5zY29wYWJsZXMoJ2tleXMnKTtcbmFkZFRvVW5zY29wYWJsZXMoJ3ZhbHVlcycpO1xuYWRkVG9VbnNjb3BhYmxlcygnZW50cmllcycpO1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG52YXIgY2xhc3NvZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9jbGFzc29mLXJhdycpO1xuXG52YXIgc3BsaXQgPSAnJy5zcGxpdDtcblxuLy8gZmFsbGJhY2sgZm9yIG5vbi1hcnJheS1saWtlIEVTMyBhbmQgbm9uLWVudW1lcmFibGUgb2xkIFY4IHN0cmluZ3Ncbm1vZHVsZS5leHBvcnRzID0gZmFpbHMoZnVuY3Rpb24gKCkge1xuICAvLyB0aHJvd3MgYW4gZXJyb3IgaW4gcmhpbm8sIHNlZSBodHRwczovL2dpdGh1Yi5jb20vbW96aWxsYS9yaGluby9pc3N1ZXMvMzQ2XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1wcm90b3R5cGUtYnVpbHRpbnNcbiAgcmV0dXJuICFPYmplY3QoJ3onKS5wcm9wZXJ0eUlzRW51bWVyYWJsZSgwKTtcbn0pID8gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiBjbGFzc29mKGl0KSA9PSAnU3RyaW5nJyA/IHNwbGl0LmNhbGwoaXQsICcnKSA6IE9iamVjdChpdCk7XG59IDogT2JqZWN0O1xuIiwidmFyIHRvU3RyaW5nID0ge30udG9TdHJpbmc7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGl0KSB7XG4gIHJldHVybiB0b1N0cmluZy5jYWxsKGl0KS5zbGljZSg4LCAtMSk7XG59O1xuIiwidmFyIHdlbGxLbm93blN5bWJvbCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy93ZWxsLWtub3duLXN5bWJvbCcpO1xudmFyIGNyZWF0ZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtY3JlYXRlJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG52YXIgVU5TQ09QQUJMRVMgPSB3ZWxsS25vd25TeW1ib2woJ3Vuc2NvcGFibGVzJyk7XG52YXIgQXJyYXlQcm90b3R5cGUgPSBBcnJheS5wcm90b3R5cGU7XG5cbi8vIEFycmF5LnByb3RvdHlwZVtAQHVuc2NvcGFibGVzXVxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLUBAdW5zY29wYWJsZXNcbmlmIChBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU10gPT0gdW5kZWZpbmVkKSB7XG4gIGRlZmluZVByb3BlcnR5TW9kdWxlLmYoQXJyYXlQcm90b3R5cGUsIFVOU0NPUEFCTEVTLCB7XG4gICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgIHZhbHVlOiBjcmVhdGUobnVsbClcbiAgfSk7XG59XG5cbi8vIGFkZCBhIGtleSB0byBBcnJheS5wcm90b3R5cGVbQEB1bnNjb3BhYmxlc11cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGtleSkge1xuICBBcnJheVByb3RvdHlwZVtVTlNDT1BBQkxFU11ba2V5XSA9IHRydWU7XG59O1xuIiwidmFyIE5BVElWRV9TWU1CT0wgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvbmF0aXZlLXN5bWJvbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IE5BVElWRV9TWU1CT0xcbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICYmICFTeW1ib2wuc2hhbVxuICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW5kZWZcbiAgJiYgdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA9PSAnc3ltYm9sJztcbiIsInZhciBERVNDUklQVE9SUyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9kZXNjcmlwdG9ycycpO1xudmFyIGRlZmluZVByb3BlcnR5TW9kdWxlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1kZWZpbmUtcHJvcGVydHknKTtcbnZhciBhbk9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9hbi1vYmplY3QnKTtcbnZhciBvYmplY3RLZXlzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1rZXlzJyk7XG5cbi8vIGBPYmplY3QuZGVmaW5lUHJvcGVydGllc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZGVmaW5lcHJvcGVydGllc1xubW9kdWxlLmV4cG9ydHMgPSBERVNDUklQVE9SUyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzIDogZnVuY3Rpb24gZGVmaW5lUHJvcGVydGllcyhPLCBQcm9wZXJ0aWVzKSB7XG4gIGFuT2JqZWN0KE8pO1xuICB2YXIga2V5cyA9IG9iamVjdEtleXMoUHJvcGVydGllcyk7XG4gIHZhciBsZW5ndGggPSBrZXlzLmxlbmd0aDtcbiAgdmFyIGluZGV4ID0gMDtcbiAgdmFyIGtleTtcbiAgd2hpbGUgKGxlbmd0aCA+IGluZGV4KSBkZWZpbmVQcm9wZXJ0eU1vZHVsZS5mKE8sIGtleSA9IGtleXNbaW5kZXgrK10sIFByb3BlcnRpZXNba2V5XSk7XG4gIHJldHVybiBPO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbi8vIGBPYmplY3Qua2V5c2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3Qua2V5c1xubW9kdWxlLmV4cG9ydHMgPSBPYmplY3Qua2V5cyB8fCBmdW5jdGlvbiBrZXlzKE8pIHtcbiAgcmV0dXJuIGludGVybmFsT2JqZWN0S2V5cyhPLCBlbnVtQnVnS2V5cyk7XG59O1xuIiwidmFyIHRvSW5kZXhlZE9iamVjdCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1pbmRleGVkLW9iamVjdCcpO1xudmFyIHRvTGVuZ3RoID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWxlbmd0aCcpO1xudmFyIHRvQWJzb2x1dGVJbmRleCA9IHJlcXVpcmUoJy4uL2ludGVybmFscy90by1hYnNvbHV0ZS1pbmRleCcpO1xuXG4vLyBgQXJyYXkucHJvdG90eXBlLnsgaW5kZXhPZiwgaW5jbHVkZXMgfWAgbWV0aG9kcyBpbXBsZW1lbnRhdGlvblxudmFyIGNyZWF0ZU1ldGhvZCA9IGZ1bmN0aW9uIChJU19JTkNMVURFUykge1xuICByZXR1cm4gZnVuY3Rpb24gKCR0aGlzLCBlbCwgZnJvbUluZGV4KSB7XG4gICAgdmFyIE8gPSB0b0luZGV4ZWRPYmplY3QoJHRoaXMpO1xuICAgIHZhciBsZW5ndGggPSB0b0xlbmd0aChPLmxlbmd0aCk7XG4gICAgdmFyIGluZGV4ID0gdG9BYnNvbHV0ZUluZGV4KGZyb21JbmRleCwgbGVuZ3RoKTtcbiAgICB2YXIgdmFsdWU7XG4gICAgLy8gQXJyYXkjaW5jbHVkZXMgdXNlcyBTYW1lVmFsdWVaZXJvIGVxdWFsaXR5IGFsZ29yaXRobVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbiAgICBpZiAoSVNfSU5DTFVERVMgJiYgZWwgIT0gZWwpIHdoaWxlIChsZW5ndGggPiBpbmRleCkge1xuICAgICAgdmFsdWUgPSBPW2luZGV4KytdO1xuICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXNlbGYtY29tcGFyZVxuICAgICAgaWYgKHZhbHVlICE9IHZhbHVlKSByZXR1cm4gdHJ1ZTtcbiAgICAvLyBBcnJheSNpbmRleE9mIGlnbm9yZXMgaG9sZXMsIEFycmF5I2luY2x1ZGVzIC0gbm90XG4gICAgfSBlbHNlIGZvciAoO2xlbmd0aCA+IGluZGV4OyBpbmRleCsrKSB7XG4gICAgICBpZiAoKElTX0lOQ0xVREVTIHx8IGluZGV4IGluIE8pICYmIE9baW5kZXhdID09PSBlbCkgcmV0dXJuIElTX0lOQ0xVREVTIHx8IGluZGV4IHx8IDA7XG4gICAgfSByZXR1cm4gIUlTX0lOQ0xVREVTICYmIC0xO1xuICB9O1xufTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIC8vIGBBcnJheS5wcm90b3R5cGUuaW5jbHVkZXNgIG1ldGhvZFxuICAvLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1hcnJheS5wcm90b3R5cGUuaW5jbHVkZXNcbiAgaW5jbHVkZXM6IGNyZWF0ZU1ldGhvZCh0cnVlKSxcbiAgLy8gYEFycmF5LnByb3RvdHlwZS5pbmRleE9mYCBtZXRob2RcbiAgLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtYXJyYXkucHJvdG90eXBlLmluZGV4b2ZcbiAgaW5kZXhPZjogY3JlYXRlTWV0aG9kKGZhbHNlKVxufTtcbiIsInZhciB0b0ludGVnZXIgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvdG8taW50ZWdlcicpO1xuXG52YXIgbWluID0gTWF0aC5taW47XG5cbi8vIGBUb0xlbmd0aGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b2xlbmd0aFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIGFyZ3VtZW50ID4gMCA/IG1pbih0b0ludGVnZXIoYXJndW1lbnQpLCAweDFGRkZGRkZGRkZGRkZGKSA6IDA7IC8vIDIgKiogNTMgLSAxID09IDkwMDcxOTkyNTQ3NDA5OTFcbn07XG4iLCJ2YXIgdG9JbnRlZ2VyID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3RvLWludGVnZXInKTtcblxudmFyIG1heCA9IE1hdGgubWF4O1xudmFyIG1pbiA9IE1hdGgubWluO1xuXG4vLyBIZWxwZXIgZm9yIGEgcG9wdWxhciByZXBlYXRpbmcgY2FzZSBvZiB0aGUgc3BlYzpcbi8vIExldCBpbnRlZ2VyIGJlID8gVG9JbnRlZ2VyKGluZGV4KS5cbi8vIElmIGludGVnZXIgPCAwLCBsZXQgcmVzdWx0IGJlIG1heCgobGVuZ3RoICsgaW50ZWdlciksIDApOyBlbHNlIGxldCByZXN1bHQgYmUgbWluKGludGVnZXIsIGxlbmd0aCkuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpbmRleCwgbGVuZ3RoKSB7XG4gIHZhciBpbnRlZ2VyID0gdG9JbnRlZ2VyKGluZGV4KTtcbiAgcmV0dXJuIGludGVnZXIgPCAwID8gbWF4KGludGVnZXIgKyBsZW5ndGgsIDApIDogbWluKGludGVnZXIsIGxlbmd0aCk7XG59O1xuIiwidmFyIGdldEJ1aWx0SW4gPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2V0LWJ1aWx0LWluJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gZ2V0QnVpbHRJbignZG9jdW1lbnQnLCAnZG9jdW1lbnRFbGVtZW50Jyk7XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGdsb2JhbDtcbiIsInZhciBnbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvZ2xvYmFsJyk7XG52YXIgaW5zcGVjdFNvdXJjZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pbnNwZWN0LXNvdXJjZScpO1xuXG52YXIgV2Vha01hcCA9IGdsb2JhbC5XZWFrTWFwO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHR5cGVvZiBXZWFrTWFwID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChpbnNwZWN0U291cmNlKFdlYWtNYXApKTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciAkID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2V4cG9ydCcpO1xudmFyIGNyZWF0ZUl0ZXJhdG9yQ29uc3RydWN0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLWl0ZXJhdG9yLWNvbnN0cnVjdG9yJyk7XG52YXIgZ2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1wcm90b3R5cGUtb2YnKTtcbnZhciBzZXRQcm90b3R5cGVPZiA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3Qtc2V0LXByb3RvdHlwZS1vZicpO1xudmFyIHNldFRvU3RyaW5nVGFnID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3NldC10by1zdHJpbmctdGFnJyk7XG52YXIgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2NyZWF0ZS1ub24tZW51bWVyYWJsZS1wcm9wZXJ0eScpO1xudmFyIHJlZGVmaW5lID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3JlZGVmaW5lJyk7XG52YXIgd2VsbEtub3duU3ltYm9sID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL3dlbGwta25vd24tc3ltYm9sJyk7XG52YXIgSVNfUFVSRSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pcy1wdXJlJyk7XG52YXIgSXRlcmF0b3JzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycycpO1xudmFyIEl0ZXJhdG9yc0NvcmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXRlcmF0b3JzLWNvcmUnKTtcblxudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gSXRlcmF0b3JzQ29yZS5JdGVyYXRvclByb3RvdHlwZTtcbnZhciBCVUdHWV9TQUZBUklfSVRFUkFUT1JTID0gSXRlcmF0b3JzQ29yZS5CVUdHWV9TQUZBUklfSVRFUkFUT1JTO1xudmFyIElURVJBVE9SID0gd2VsbEtub3duU3ltYm9sKCdpdGVyYXRvcicpO1xudmFyIEtFWVMgPSAna2V5cyc7XG52YXIgVkFMVUVTID0gJ3ZhbHVlcyc7XG52YXIgRU5UUklFUyA9ICdlbnRyaWVzJztcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYWJsZSwgTkFNRSwgSXRlcmF0b3JDb25zdHJ1Y3RvciwgbmV4dCwgREVGQVVMVCwgSVNfU0VULCBGT1JDRUQpIHtcbiAgY3JlYXRlSXRlcmF0b3JDb25zdHJ1Y3RvcihJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KTtcblxuICB2YXIgZ2V0SXRlcmF0aW9uTWV0aG9kID0gZnVuY3Rpb24gKEtJTkQpIHtcbiAgICBpZiAoS0lORCA9PT0gREVGQVVMVCAmJiBkZWZhdWx0SXRlcmF0b3IpIHJldHVybiBkZWZhdWx0SXRlcmF0b3I7XG4gICAgaWYgKCFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIEtJTkQgaW4gSXRlcmFibGVQcm90b3R5cGUpIHJldHVybiBJdGVyYWJsZVByb3RvdHlwZVtLSU5EXTtcbiAgICBzd2l0Y2ggKEtJTkQpIHtcbiAgICAgIGNhc2UgS0VZUzogcmV0dXJuIGZ1bmN0aW9uIGtleXMoKSB7IHJldHVybiBuZXcgSXRlcmF0b3JDb25zdHJ1Y3Rvcih0aGlzLCBLSU5EKTsgfTtcbiAgICAgIGNhc2UgVkFMVUVTOiByZXR1cm4gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgICBjYXNlIEVOVFJJRVM6IHJldHVybiBmdW5jdGlvbiBlbnRyaWVzKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcywgS0lORCk7IH07XG4gICAgfSByZXR1cm4gZnVuY3Rpb24gKCkgeyByZXR1cm4gbmV3IEl0ZXJhdG9yQ29uc3RydWN0b3IodGhpcyk7IH07XG4gIH07XG5cbiAgdmFyIFRPX1NUUklOR19UQUcgPSBOQU1FICsgJyBJdGVyYXRvcic7XG4gIHZhciBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgPSBmYWxzZTtcbiAgdmFyIEl0ZXJhYmxlUHJvdG90eXBlID0gSXRlcmFibGUucHJvdG90eXBlO1xuICB2YXIgbmF0aXZlSXRlcmF0b3IgPSBJdGVyYWJsZVByb3RvdHlwZVtJVEVSQVRPUl1cbiAgICB8fCBJdGVyYWJsZVByb3RvdHlwZVsnQEBpdGVyYXRvciddXG4gICAgfHwgREVGQVVMVCAmJiBJdGVyYWJsZVByb3RvdHlwZVtERUZBVUxUXTtcbiAgdmFyIGRlZmF1bHRJdGVyYXRvciA9ICFCVUdHWV9TQUZBUklfSVRFUkFUT1JTICYmIG5hdGl2ZUl0ZXJhdG9yIHx8IGdldEl0ZXJhdGlvbk1ldGhvZChERUZBVUxUKTtcbiAgdmFyIGFueU5hdGl2ZUl0ZXJhdG9yID0gTkFNRSA9PSAnQXJyYXknID8gSXRlcmFibGVQcm90b3R5cGUuZW50cmllcyB8fCBuYXRpdmVJdGVyYXRvciA6IG5hdGl2ZUl0ZXJhdG9yO1xuICB2YXIgQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBtZXRob2RzLCBLRVk7XG5cbiAgLy8gZml4IG5hdGl2ZVxuICBpZiAoYW55TmF0aXZlSXRlcmF0b3IpIHtcbiAgICBDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUgPSBnZXRQcm90b3R5cGVPZihhbnlOYXRpdmVJdGVyYXRvci5jYWxsKG5ldyBJdGVyYWJsZSgpKSk7XG4gICAgaWYgKEl0ZXJhdG9yUHJvdG90eXBlICE9PSBPYmplY3QucHJvdG90eXBlICYmIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZS5uZXh0KSB7XG4gICAgICBpZiAoIUlTX1BVUkUgJiYgZ2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlKSAhPT0gSXRlcmF0b3JQcm90b3R5cGUpIHtcbiAgICAgICAgaWYgKHNldFByb3RvdHlwZU9mKSB7XG4gICAgICAgICAgc2V0UHJvdG90eXBlT2YoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBJdGVyYXRvclByb3RvdHlwZSk7XG4gICAgICAgIH0gZWxzZSBpZiAodHlwZW9mIEN1cnJlbnRJdGVyYXRvclByb3RvdHlwZVtJVEVSQVRPUl0gIT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGNyZWF0ZU5vbkVudW1lcmFibGVQcm9wZXJ0eShDdXJyZW50SXRlcmF0b3JQcm90b3R5cGUsIElURVJBVE9SLCByZXR1cm5UaGlzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gU2V0IEBAdG9TdHJpbmdUYWcgdG8gbmF0aXZlIGl0ZXJhdG9yc1xuICAgICAgc2V0VG9TdHJpbmdUYWcoQ3VycmVudEl0ZXJhdG9yUHJvdG90eXBlLCBUT19TVFJJTkdfVEFHLCB0cnVlLCB0cnVlKTtcbiAgICAgIGlmIChJU19QVVJFKSBJdGVyYXRvcnNbVE9fU1RSSU5HX1RBR10gPSByZXR1cm5UaGlzO1xuICAgIH1cbiAgfVxuXG4gIC8vIGZpeCBBcnJheSN7dmFsdWVzLCBAQGl0ZXJhdG9yfS5uYW1lIGluIFY4IC8gRkZcbiAgaWYgKERFRkFVTFQgPT0gVkFMVUVTICYmIG5hdGl2ZUl0ZXJhdG9yICYmIG5hdGl2ZUl0ZXJhdG9yLm5hbWUgIT09IFZBTFVFUykge1xuICAgIElOQ09SUkVDVF9WQUxVRVNfTkFNRSA9IHRydWU7XG4gICAgZGVmYXVsdEl0ZXJhdG9yID0gZnVuY3Rpb24gdmFsdWVzKCkgeyByZXR1cm4gbmF0aXZlSXRlcmF0b3IuY2FsbCh0aGlzKTsgfTtcbiAgfVxuXG4gIC8vIGRlZmluZSBpdGVyYXRvclxuICBpZiAoKCFJU19QVVJFIHx8IEZPUkNFRCkgJiYgSXRlcmFibGVQcm90b3R5cGVbSVRFUkFUT1JdICE9PSBkZWZhdWx0SXRlcmF0b3IpIHtcbiAgICBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkoSXRlcmFibGVQcm90b3R5cGUsIElURVJBVE9SLCBkZWZhdWx0SXRlcmF0b3IpO1xuICB9XG4gIEl0ZXJhdG9yc1tOQU1FXSA9IGRlZmF1bHRJdGVyYXRvcjtcblxuICAvLyBleHBvcnQgYWRkaXRpb25hbCBtZXRob2RzXG4gIGlmIChERUZBVUxUKSB7XG4gICAgbWV0aG9kcyA9IHtcbiAgICAgIHZhbHVlczogZ2V0SXRlcmF0aW9uTWV0aG9kKFZBTFVFUyksXG4gICAgICBrZXlzOiBJU19TRVQgPyBkZWZhdWx0SXRlcmF0b3IgOiBnZXRJdGVyYXRpb25NZXRob2QoS0VZUyksXG4gICAgICBlbnRyaWVzOiBnZXRJdGVyYXRpb25NZXRob2QoRU5UUklFUylcbiAgICB9O1xuICAgIGlmIChGT1JDRUQpIGZvciAoS0VZIGluIG1ldGhvZHMpIHtcbiAgICAgIGlmIChCVUdHWV9TQUZBUklfSVRFUkFUT1JTIHx8IElOQ09SUkVDVF9WQUxVRVNfTkFNRSB8fCAhKEtFWSBpbiBJdGVyYWJsZVByb3RvdHlwZSkpIHtcbiAgICAgICAgcmVkZWZpbmUoSXRlcmFibGVQcm90b3R5cGUsIEtFWSwgbWV0aG9kc1tLRVldKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgJCh7IHRhcmdldDogTkFNRSwgcHJvdG86IHRydWUsIGZvcmNlZDogQlVHR1lfU0FGQVJJX0lURVJBVE9SUyB8fCBJTkNPUlJFQ1RfVkFMVUVTX05BTUUgfSwgbWV0aG9kcyk7XG4gIH1cblxuICByZXR1cm4gbWV0aG9kcztcbn07XG4iLCJ2YXIgZ2xvYmFsID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dsb2JhbCcpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJykuZjtcbnZhciBjcmVhdGVOb25FbnVtZXJhYmxlUHJvcGVydHkgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLW5vbi1lbnVtZXJhYmxlLXByb3BlcnR5Jyk7XG52YXIgcmVkZWZpbmUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVkZWZpbmUnKTtcbnZhciBzZXRHbG9iYWwgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvc2V0LWdsb2JhbCcpO1xudmFyIGNvcHlDb25zdHJ1Y3RvclByb3BlcnRpZXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY29weS1jb25zdHJ1Y3Rvci1wcm9wZXJ0aWVzJyk7XG52YXIgaXNGb3JjZWQgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaXMtZm9yY2VkJyk7XG5cbi8qXG4gIG9wdGlvbnMudGFyZ2V0ICAgICAgLSBuYW1lIG9mIHRoZSB0YXJnZXQgb2JqZWN0XG4gIG9wdGlvbnMuZ2xvYmFsICAgICAgLSB0YXJnZXQgaXMgdGhlIGdsb2JhbCBvYmplY3RcbiAgb3B0aW9ucy5zdGF0ICAgICAgICAtIGV4cG9ydCBhcyBzdGF0aWMgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5wcm90byAgICAgICAtIGV4cG9ydCBhcyBwcm90b3R5cGUgbWV0aG9kcyBvZiB0YXJnZXRcbiAgb3B0aW9ucy5yZWFsICAgICAgICAtIHJlYWwgcHJvdG90eXBlIG1ldGhvZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMuZm9yY2VkICAgICAgLSBleHBvcnQgZXZlbiBpZiB0aGUgbmF0aXZlIGZlYXR1cmUgaXMgYXZhaWxhYmxlXG4gIG9wdGlvbnMuYmluZCAgICAgICAgLSBiaW5kIG1ldGhvZHMgdG8gdGhlIHRhcmdldCwgcmVxdWlyZWQgZm9yIHRoZSBgcHVyZWAgdmVyc2lvblxuICBvcHRpb25zLndyYXAgICAgICAgIC0gd3JhcCBjb25zdHJ1Y3RvcnMgdG8gcHJldmVudGluZyBnbG9iYWwgcG9sbHV0aW9uLCByZXF1aXJlZCBmb3IgdGhlIGBwdXJlYCB2ZXJzaW9uXG4gIG9wdGlvbnMudW5zYWZlICAgICAgLSB1c2UgdGhlIHNpbXBsZSBhc3NpZ25tZW50IG9mIHByb3BlcnR5IGluc3RlYWQgb2YgZGVsZXRlICsgZGVmaW5lUHJvcGVydHlcbiAgb3B0aW9ucy5zaGFtICAgICAgICAtIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgb3B0aW9ucy5lbnVtZXJhYmxlICAtIGV4cG9ydCBhcyBlbnVtZXJhYmxlIHByb3BlcnR5XG4gIG9wdGlvbnMubm9UYXJnZXRHZXQgLSBwcmV2ZW50IGNhbGxpbmcgYSBnZXR0ZXIgb24gdGFyZ2V0XG4qL1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAob3B0aW9ucywgc291cmNlKSB7XG4gIHZhciBUQVJHRVQgPSBvcHRpb25zLnRhcmdldDtcbiAgdmFyIEdMT0JBTCA9IG9wdGlvbnMuZ2xvYmFsO1xuICB2YXIgU1RBVElDID0gb3B0aW9ucy5zdGF0O1xuICB2YXIgRk9SQ0VELCB0YXJnZXQsIGtleSwgdGFyZ2V0UHJvcGVydHksIHNvdXJjZVByb3BlcnR5LCBkZXNjcmlwdG9yO1xuICBpZiAoR0xPQkFMKSB7XG4gICAgdGFyZ2V0ID0gZ2xvYmFsO1xuICB9IGVsc2UgaWYgKFNUQVRJQykge1xuICAgIHRhcmdldCA9IGdsb2JhbFtUQVJHRVRdIHx8IHNldEdsb2JhbChUQVJHRVQsIHt9KTtcbiAgfSBlbHNlIHtcbiAgICB0YXJnZXQgPSAoZ2xvYmFsW1RBUkdFVF0gfHwge30pLnByb3RvdHlwZTtcbiAgfVxuICBpZiAodGFyZ2V0KSBmb3IgKGtleSBpbiBzb3VyY2UpIHtcbiAgICBzb3VyY2VQcm9wZXJ0eSA9IHNvdXJjZVtrZXldO1xuICAgIGlmIChvcHRpb25zLm5vVGFyZ2V0R2V0KSB7XG4gICAgICBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KTtcbiAgICAgIHRhcmdldFByb3BlcnR5ID0gZGVzY3JpcHRvciAmJiBkZXNjcmlwdG9yLnZhbHVlO1xuICAgIH0gZWxzZSB0YXJnZXRQcm9wZXJ0eSA9IHRhcmdldFtrZXldO1xuICAgIEZPUkNFRCA9IGlzRm9yY2VkKEdMT0JBTCA/IGtleSA6IFRBUkdFVCArIChTVEFUSUMgPyAnLicgOiAnIycpICsga2V5LCBvcHRpb25zLmZvcmNlZCk7XG4gICAgLy8gY29udGFpbmVkIGluIHRhcmdldFxuICAgIGlmICghRk9SQ0VEICYmIHRhcmdldFByb3BlcnR5ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGlmICh0eXBlb2Ygc291cmNlUHJvcGVydHkgPT09IHR5cGVvZiB0YXJnZXRQcm9wZXJ0eSkgY29udGludWU7XG4gICAgICBjb3B5Q29uc3RydWN0b3JQcm9wZXJ0aWVzKHNvdXJjZVByb3BlcnR5LCB0YXJnZXRQcm9wZXJ0eSk7XG4gICAgfVxuICAgIC8vIGFkZCBhIGZsYWcgdG8gbm90IGNvbXBsZXRlbHkgZnVsbCBwb2x5ZmlsbHNcbiAgICBpZiAob3B0aW9ucy5zaGFtIHx8ICh0YXJnZXRQcm9wZXJ0eSAmJiB0YXJnZXRQcm9wZXJ0eS5zaGFtKSkge1xuICAgICAgY3JlYXRlTm9uRW51bWVyYWJsZVByb3BlcnR5KHNvdXJjZVByb3BlcnR5LCAnc2hhbScsIHRydWUpO1xuICAgIH1cbiAgICAvLyBleHRlbmQgZ2xvYmFsXG4gICAgcmVkZWZpbmUodGFyZ2V0LCBrZXksIHNvdXJjZVByb3BlcnR5LCBvcHRpb25zKTtcbiAgfVxufTtcbiIsIid1c2Ugc3RyaWN0JztcbnZhciBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZSA9IHt9LnByb3BlcnR5SXNFbnVtZXJhYmxlO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7XG5cbi8vIE5hc2hvcm4gfiBKREs4IGJ1Z1xudmFyIE5BU0hPUk5fQlVHID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yICYmICFuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHsgMTogMiB9LCAxKTtcblxuLy8gYE9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGVgIG1ldGhvZCBpbXBsZW1lbnRhdGlvblxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eWlzZW51bWVyYWJsZVxuZXhwb3J0cy5mID0gTkFTSE9STl9CVUcgPyBmdW5jdGlvbiBwcm9wZXJ0eUlzRW51bWVyYWJsZShWKSB7XG4gIHZhciBkZXNjcmlwdG9yID0gZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRoaXMsIFYpO1xuICByZXR1cm4gISFkZXNjcmlwdG9yICYmIGRlc2NyaXB0b3IuZW51bWVyYWJsZTtcbn0gOiBuYXRpdmVQcm9wZXJ0eUlzRW51bWVyYWJsZTtcbiIsInZhciBoYXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvaGFzJyk7XG52YXIgb3duS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vd24ta2V5cycpO1xudmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZSA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9vYmplY3QtZ2V0LW93bi1wcm9wZXJ0eS1kZXNjcmlwdG9yJyk7XG52YXIgZGVmaW5lUHJvcGVydHlNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWRlZmluZS1wcm9wZXJ0eScpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh0YXJnZXQsIHNvdXJjZSkge1xuICB2YXIga2V5cyA9IG93bktleXMoc291cmNlKTtcbiAgdmFyIGRlZmluZVByb3BlcnR5ID0gZGVmaW5lUHJvcGVydHlNb2R1bGUuZjtcbiAgdmFyIGdldE93blByb3BlcnR5RGVzY3JpcHRvciA9IGdldE93blByb3BlcnR5RGVzY3JpcHRvck1vZHVsZS5mO1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGtleXMubGVuZ3RoOyBpKyspIHtcbiAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICBpZiAoIWhhcyh0YXJnZXQsIGtleSkpIGRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Ioc291cmNlLCBrZXkpKTtcbiAgfVxufTtcbiIsInZhciBnZXRCdWlsdEluID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2dldC1idWlsdC1pbicpO1xudmFyIGdldE93blByb3BlcnR5TmFtZXNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktbmFtZXMnKTtcbnZhciBnZXRPd25Qcm9wZXJ0eVN5bWJvbHNNb2R1bGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWdldC1vd24tcHJvcGVydHktc3ltYm9scycpO1xudmFyIGFuT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2FuLW9iamVjdCcpO1xuXG4vLyBhbGwgb2JqZWN0IGtleXMsIGluY2x1ZGVzIG5vbi1lbnVtZXJhYmxlIGFuZCBzeW1ib2xzXG5tb2R1bGUuZXhwb3J0cyA9IGdldEJ1aWx0SW4oJ1JlZmxlY3QnLCAnb3duS2V5cycpIHx8IGZ1bmN0aW9uIG93bktleXMoaXQpIHtcbiAgdmFyIGtleXMgPSBnZXRPd25Qcm9wZXJ0eU5hbWVzTW9kdWxlLmYoYW5PYmplY3QoaXQpKTtcbiAgdmFyIGdldE93blByb3BlcnR5U3ltYm9scyA9IGdldE93blByb3BlcnR5U3ltYm9sc01vZHVsZS5mO1xuICByZXR1cm4gZ2V0T3duUHJvcGVydHlTeW1ib2xzID8ga2V5cy5jb25jYXQoZ2V0T3duUHJvcGVydHlTeW1ib2xzKGl0KSkgOiBrZXlzO1xufTtcbiIsInZhciBpbnRlcm5hbE9iamVjdEtleXMgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvb2JqZWN0LWtleXMtaW50ZXJuYWwnKTtcbnZhciBlbnVtQnVnS2V5cyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9lbnVtLWJ1Zy1rZXlzJyk7XG5cbnZhciBoaWRkZW5LZXlzID0gZW51bUJ1Z0tleXMuY29uY2F0KCdsZW5ndGgnLCAncHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lc2AgbWV0aG9kXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy1vYmplY3QuZ2V0b3ducHJvcGVydHluYW1lc1xuZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXMgfHwgZnVuY3Rpb24gZ2V0T3duUHJvcGVydHlOYW1lcyhPKSB7XG4gIHJldHVybiBpbnRlcm5hbE9iamVjdEtleXMoTywgaGlkZGVuS2V5cyk7XG59O1xuIiwiZXhwb3J0cy5mID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcbiIsInZhciBmYWlscyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9mYWlscycpO1xuXG52YXIgcmVwbGFjZW1lbnQgPSAvI3xcXC5wcm90b3R5cGVcXC4vO1xuXG52YXIgaXNGb3JjZWQgPSBmdW5jdGlvbiAoZmVhdHVyZSwgZGV0ZWN0aW9uKSB7XG4gIHZhciB2YWx1ZSA9IGRhdGFbbm9ybWFsaXplKGZlYXR1cmUpXTtcbiAgcmV0dXJuIHZhbHVlID09IFBPTFlGSUxMID8gdHJ1ZVxuICAgIDogdmFsdWUgPT0gTkFUSVZFID8gZmFsc2VcbiAgICA6IHR5cGVvZiBkZXRlY3Rpb24gPT0gJ2Z1bmN0aW9uJyA/IGZhaWxzKGRldGVjdGlvbilcbiAgICA6ICEhZGV0ZWN0aW9uO1xufTtcblxudmFyIG5vcm1hbGl6ZSA9IGlzRm9yY2VkLm5vcm1hbGl6ZSA9IGZ1bmN0aW9uIChzdHJpbmcpIHtcbiAgcmV0dXJuIFN0cmluZyhzdHJpbmcpLnJlcGxhY2UocmVwbGFjZW1lbnQsICcuJykudG9Mb3dlckNhc2UoKTtcbn07XG5cbnZhciBkYXRhID0gaXNGb3JjZWQuZGF0YSA9IHt9O1xudmFyIE5BVElWRSA9IGlzRm9yY2VkLk5BVElWRSA9ICdOJztcbnZhciBQT0xZRklMTCA9IGlzRm9yY2VkLlBPTFlGSUxMID0gJ1AnO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGlzRm9yY2VkO1xuIiwiJ3VzZSBzdHJpY3QnO1xudmFyIEl0ZXJhdG9yUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2l0ZXJhdG9ycy1jb3JlJykuSXRlcmF0b3JQcm90b3R5cGU7XG52YXIgY3JlYXRlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL29iamVjdC1jcmVhdGUnKTtcbnZhciBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvY3JlYXRlLXByb3BlcnR5LWRlc2NyaXB0b3InKTtcbnZhciBzZXRUb1N0cmluZ1RhZyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9zZXQtdG8tc3RyaW5nLXRhZycpO1xudmFyIEl0ZXJhdG9ycyA9IHJlcXVpcmUoJy4uL2ludGVybmFscy9pdGVyYXRvcnMnKTtcblxudmFyIHJldHVyblRoaXMgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChJdGVyYXRvckNvbnN0cnVjdG9yLCBOQU1FLCBuZXh0KSB7XG4gIHZhciBUT19TVFJJTkdfVEFHID0gTkFNRSArICcgSXRlcmF0b3InO1xuICBJdGVyYXRvckNvbnN0cnVjdG9yLnByb3RvdHlwZSA9IGNyZWF0ZShJdGVyYXRvclByb3RvdHlwZSwgeyBuZXh0OiBjcmVhdGVQcm9wZXJ0eURlc2NyaXB0b3IoMSwgbmV4dCkgfSk7XG4gIHNldFRvU3RyaW5nVGFnKEl0ZXJhdG9yQ29uc3RydWN0b3IsIFRPX1NUUklOR19UQUcsIGZhbHNlLCB0cnVlKTtcbiAgSXRlcmF0b3JzW1RPX1NUUklOR19UQUddID0gcmV0dXJuVGhpcztcbiAgcmV0dXJuIEl0ZXJhdG9yQ29uc3RydWN0b3I7XG59O1xuIiwidmFyIHJlcXVpcmVPYmplY3RDb2VyY2libGUgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvcmVxdWlyZS1vYmplY3QtY29lcmNpYmxlJyk7XG5cbi8vIGBUb09iamVjdGAgYWJzdHJhY3Qgb3BlcmF0aW9uXG4vLyBodHRwczovL3RjMzkuZ2l0aHViLmlvL2VjbWEyNjIvI3NlYy10b29iamVjdFxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoYXJndW1lbnQpIHtcbiAgcmV0dXJuIE9iamVjdChyZXF1aXJlT2JqZWN0Q29lcmNpYmxlKGFyZ3VtZW50KSk7XG59O1xuIiwidmFyIGZhaWxzID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2ZhaWxzJyk7XG5cbm1vZHVsZS5leHBvcnRzID0gIWZhaWxzKGZ1bmN0aW9uICgpIHtcbiAgZnVuY3Rpb24gRigpIHsgLyogZW1wdHkgKi8gfVxuICBGLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IG51bGw7XG4gIHJldHVybiBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmV3IEYoKSkgIT09IEYucHJvdG90eXBlO1xufSk7XG4iLCJ2YXIgYW5PYmplY3QgPSByZXF1aXJlKCcuLi9pbnRlcm5hbHMvYW4tb2JqZWN0Jyk7XG52YXIgYVBvc3NpYmxlUHJvdG90eXBlID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2EtcG9zc2libGUtcHJvdG90eXBlJyk7XG5cbi8vIGBPYmplY3Quc2V0UHJvdG90eXBlT2ZgIG1ldGhvZFxuLy8gaHR0cHM6Ly90YzM5LmdpdGh1Yi5pby9lY21hMjYyLyNzZWMtb2JqZWN0LnNldHByb3RvdHlwZW9mXG4vLyBXb3JrcyB3aXRoIF9fcHJvdG9fXyBvbmx5LiBPbGQgdjggY2FuJ3Qgd29yayB3aXRoIG51bGwgcHJvdG8gb2JqZWN0cy5cbi8qIGVzbGludC1kaXNhYmxlIG5vLXByb3RvICovXG5tb2R1bGUuZXhwb3J0cyA9IE9iamVjdC5zZXRQcm90b3R5cGVPZiB8fCAoJ19fcHJvdG9fXycgaW4ge30gPyBmdW5jdGlvbiAoKSB7XG4gIHZhciBDT1JSRUNUX1NFVFRFUiA9IGZhbHNlO1xuICB2YXIgdGVzdCA9IHt9O1xuICB2YXIgc2V0dGVyO1xuICB0cnkge1xuICAgIHNldHRlciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoT2JqZWN0LnByb3RvdHlwZSwgJ19fcHJvdG9fXycpLnNldDtcbiAgICBzZXR0ZXIuY2FsbCh0ZXN0LCBbXSk7XG4gICAgQ09SUkVDVF9TRVRURVIgPSB0ZXN0IGluc3RhbmNlb2YgQXJyYXk7XG4gIH0gY2F0Y2ggKGVycm9yKSB7IC8qIGVtcHR5ICovIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIHNldFByb3RvdHlwZU9mKE8sIHByb3RvKSB7XG4gICAgYW5PYmplY3QoTyk7XG4gICAgYVBvc3NpYmxlUHJvdG90eXBlKHByb3RvKTtcbiAgICBpZiAoQ09SUkVDVF9TRVRURVIpIHNldHRlci5jYWxsKE8sIHByb3RvKTtcbiAgICBlbHNlIE8uX19wcm90b19fID0gcHJvdG87XG4gICAgcmV0dXJuIE87XG4gIH07XG59KCkgOiB1bmRlZmluZWQpO1xuIiwidmFyIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi4vaW50ZXJuYWxzL2lzLW9iamVjdCcpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIChpdCkge1xuICBpZiAoIWlzT2JqZWN0KGl0KSAmJiBpdCAhPT0gbnVsbCkge1xuICAgIHRocm93IFR5cGVFcnJvcihcIkNhbid0IHNldCBcIiArIFN0cmluZyhpdCkgKyAnIGFzIGEgcHJvdG90eXBlJyk7XG4gIH0gcmV0dXJuIGl0O1xufTtcbiIsIm1vZHVsZS5leHBvcnRzID0gQXJyYXkuaXNBcnJheSB8fCBmdW5jdGlvbiAoYXJyKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwoYXJyKSA9PSAnW29iamVjdCBBcnJheV0nO1xufTtcbiIsIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxubW9kdWxlLmV4cG9ydHMgPSB7XCJzcGlubmVyXCI6XCJfMzBBTmJDanBWMnpoTHlNX0U1SjM0MlwifTsiLCIvKiogQGxpY2Vuc2UgUmVhY3QgdjAuMTguMFxuICogc2NoZWR1bGVyLnByb2R1Y3Rpb24ubWluLmpzXG4gKlxuICogQ29weXJpZ2h0IChjKSBGYWNlYm9vaywgSW5jLiBhbmQgaXRzIGFmZmlsaWF0ZXMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO09iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLFwiX19lc01vZHVsZVwiLHt2YWx1ZTohMH0pO3ZhciBmLGcsaCxrLGw7XG5pZihcInVuZGVmaW5lZFwiPT09dHlwZW9mIHdpbmRvd3x8XCJmdW5jdGlvblwiIT09dHlwZW9mIE1lc3NhZ2VDaGFubmVsKXt2YXIgcD1udWxsLHE9bnVsbCx0PWZ1bmN0aW9uKCl7aWYobnVsbCE9PXApdHJ5e3ZhciBhPWV4cG9ydHMudW5zdGFibGVfbm93KCk7cCghMCxhKTtwPW51bGx9Y2F0Y2goYil7dGhyb3cgc2V0VGltZW91dCh0LDApLGI7fX0sdT1EYXRlLm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIERhdGUubm93KCktdX07Zj1mdW5jdGlvbihhKXtudWxsIT09cD9zZXRUaW1lb3V0KGYsMCxhKToocD1hLHNldFRpbWVvdXQodCwwKSl9O2c9ZnVuY3Rpb24oYSxiKXtxPXNldFRpbWVvdXQoYSxiKX07aD1mdW5jdGlvbigpe2NsZWFyVGltZW91dChxKX07az1mdW5jdGlvbigpe3JldHVybiExfTtsPWV4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oKXt9fWVsc2V7dmFyIHc9d2luZG93LnBlcmZvcm1hbmNlLHg9d2luZG93LkRhdGUsXG55PXdpbmRvdy5zZXRUaW1lb3V0LHo9d2luZG93LmNsZWFyVGltZW91dDtpZihcInVuZGVmaW5lZFwiIT09dHlwZW9mIGNvbnNvbGUpe3ZhciBBPXdpbmRvdy5jYW5jZWxBbmltYXRpb25GcmFtZTtcImZ1bmN0aW9uXCIhPT10eXBlb2Ygd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgcmVxdWVzdEFuaW1hdGlvbkZyYW1lLiBNYWtlIHN1cmUgdGhhdCB5b3UgbG9hZCBhIHBvbHlmaWxsIGluIG9sZGVyIGJyb3dzZXJzLiBodHRwczovL2ZiLm1lL3JlYWN0LXBvbHlmaWxsc1wiKTtcImZ1bmN0aW9uXCIhPT10eXBlb2YgQSYmY29uc29sZS5lcnJvcihcIlRoaXMgYnJvd3NlciBkb2Vzbid0IHN1cHBvcnQgY2FuY2VsQW5pbWF0aW9uRnJhbWUuIE1ha2Ugc3VyZSB0aGF0IHlvdSBsb2FkIGEgcG9seWZpbGwgaW4gb2xkZXIgYnJvd3NlcnMuIGh0dHBzOi8vZmIubWUvcmVhY3QtcG9seWZpbGxzXCIpfWlmKFwib2JqZWN0XCI9PT1cbnR5cGVvZiB3JiZcImZ1bmN0aW9uXCI9PT10eXBlb2Ygdy5ub3cpZXhwb3J0cy51bnN0YWJsZV9ub3c9ZnVuY3Rpb24oKXtyZXR1cm4gdy5ub3coKX07ZWxzZXt2YXIgQj14Lm5vdygpO2V4cG9ydHMudW5zdGFibGVfbm93PWZ1bmN0aW9uKCl7cmV0dXJuIHgubm93KCktQn19dmFyIEM9ITEsRD1udWxsLEU9LTEsRj01LEc9MDtrPWZ1bmN0aW9uKCl7cmV0dXJuIGV4cG9ydHMudW5zdGFibGVfbm93KCk+PUd9O2w9ZnVuY3Rpb24oKXt9O2V4cG9ydHMudW5zdGFibGVfZm9yY2VGcmFtZVJhdGU9ZnVuY3Rpb24oYSl7MD5hfHwxMjU8YT9jb25zb2xlLmVycm9yKFwiZm9yY2VGcmFtZVJhdGUgdGFrZXMgYSBwb3NpdGl2ZSBpbnQgYmV0d2VlbiAwIGFuZCAxMjUsIGZvcmNpbmcgZnJhbWVyYXRlcyBoaWdoZXIgdGhhbiAxMjUgZnBzIGlzIG5vdCB1bnN1cHBvcnRlZFwiKTpGPTA8YT9NYXRoLmZsb29yKDFFMy9hKTo1fTt2YXIgSD1uZXcgTWVzc2FnZUNoYW5uZWwsST1ILnBvcnQyO0gucG9ydDEub25tZXNzYWdlPVxuZnVuY3Rpb24oKXtpZihudWxsIT09RCl7dmFyIGE9ZXhwb3J0cy51bnN0YWJsZV9ub3coKTtHPWErRjt0cnl7RCghMCxhKT9JLnBvc3RNZXNzYWdlKG51bGwpOihDPSExLEQ9bnVsbCl9Y2F0Y2goYil7dGhyb3cgSS5wb3N0TWVzc2FnZShudWxsKSxiO319ZWxzZSBDPSExfTtmPWZ1bmN0aW9uKGEpe0Q9YTtDfHwoQz0hMCxJLnBvc3RNZXNzYWdlKG51bGwpKX07Zz1mdW5jdGlvbihhLGIpe0U9eShmdW5jdGlvbigpe2EoZXhwb3J0cy51bnN0YWJsZV9ub3coKSl9LGIpfTtoPWZ1bmN0aW9uKCl7eihFKTtFPS0xfX1mdW5jdGlvbiBKKGEsYil7dmFyIGM9YS5sZW5ndGg7YS5wdXNoKGIpO2E6Zm9yKDs7KXt2YXIgZD1NYXRoLmZsb29yKChjLTEpLzIpLGU9YVtkXTtpZih2b2lkIDAhPT1lJiYwPEsoZSxiKSlhW2RdPWIsYVtjXT1lLGM9ZDtlbHNlIGJyZWFrIGF9fWZ1bmN0aW9uIEwoYSl7YT1hWzBdO3JldHVybiB2b2lkIDA9PT1hP251bGw6YX1cbmZ1bmN0aW9uIE0oYSl7dmFyIGI9YVswXTtpZih2b2lkIDAhPT1iKXt2YXIgYz1hLnBvcCgpO2lmKGMhPT1iKXthWzBdPWM7YTpmb3IodmFyIGQ9MCxlPWEubGVuZ3RoO2Q8ZTspe3ZhciBtPTIqKGQrMSktMSxuPWFbbV0sdj1tKzEscj1hW3ZdO2lmKHZvaWQgMCE9PW4mJjA+SyhuLGMpKXZvaWQgMCE9PXImJjA+SyhyLG4pPyhhW2RdPXIsYVt2XT1jLGQ9dik6KGFbZF09bixhW21dPWMsZD1tKTtlbHNlIGlmKHZvaWQgMCE9PXImJjA+SyhyLGMpKWFbZF09cixhW3ZdPWMsZD12O2Vsc2UgYnJlYWsgYX19cmV0dXJuIGJ9cmV0dXJuIG51bGx9ZnVuY3Rpb24gSyhhLGIpe3ZhciBjPWEuc29ydEluZGV4LWIuc29ydEluZGV4O3JldHVybiAwIT09Yz9jOmEuaWQtYi5pZH12YXIgTj1bXSxPPVtdLFA9MSxRPW51bGwsUj0zLFM9ITEsVD0hMSxVPSExO1xuZnVuY3Rpb24gVihhKXtmb3IodmFyIGI9TChPKTtudWxsIT09Yjspe2lmKG51bGw9PT1iLmNhbGxiYWNrKU0oTyk7ZWxzZSBpZihiLnN0YXJ0VGltZTw9YSlNKE8pLGIuc29ydEluZGV4PWIuZXhwaXJhdGlvblRpbWUsSihOLGIpO2Vsc2UgYnJlYWs7Yj1MKE8pfX1mdW5jdGlvbiBXKGEpe1U9ITE7VihhKTtpZighVClpZihudWxsIT09TChOKSlUPSEwLGYoWCk7ZWxzZXt2YXIgYj1MKE8pO251bGwhPT1iJiZnKFcsYi5zdGFydFRpbWUtYSl9fVxuZnVuY3Rpb24gWChhLGIpe1Q9ITE7VSYmKFU9ITEsaCgpKTtTPSEwO3ZhciBjPVI7dHJ5e1YoYik7Zm9yKFE9TChOKTtudWxsIT09USYmKCEoUS5leHBpcmF0aW9uVGltZT5iKXx8YSYmIWsoKSk7KXt2YXIgZD1RLmNhbGxiYWNrO2lmKG51bGwhPT1kKXtRLmNhbGxiYWNrPW51bGw7Uj1RLnByaW9yaXR5TGV2ZWw7dmFyIGU9ZChRLmV4cGlyYXRpb25UaW1lPD1iKTtiPWV4cG9ydHMudW5zdGFibGVfbm93KCk7XCJmdW5jdGlvblwiPT09dHlwZW9mIGU/US5jYWxsYmFjaz1lOlE9PT1MKE4pJiZNKE4pO1YoYil9ZWxzZSBNKE4pO1E9TChOKX1pZihudWxsIT09USl2YXIgbT0hMDtlbHNle3ZhciBuPUwoTyk7bnVsbCE9PW4mJmcoVyxuLnN0YXJ0VGltZS1iKTttPSExfXJldHVybiBtfWZpbmFsbHl7UT1udWxsLFI9YyxTPSExfX1cbmZ1bmN0aW9uIFkoYSl7c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4tMTtjYXNlIDI6cmV0dXJuIDI1MDtjYXNlIDU6cmV0dXJuIDEwNzM3NDE4MjM7Y2FzZSA0OnJldHVybiAxRTQ7ZGVmYXVsdDpyZXR1cm4gNUUzfX12YXIgWj1sO2V4cG9ydHMudW5zdGFibGVfSW1tZWRpYXRlUHJpb3JpdHk9MTtleHBvcnRzLnVuc3RhYmxlX1VzZXJCbG9ja2luZ1ByaW9yaXR5PTI7ZXhwb3J0cy51bnN0YWJsZV9Ob3JtYWxQcmlvcml0eT0zO2V4cG9ydHMudW5zdGFibGVfSWRsZVByaW9yaXR5PTU7ZXhwb3J0cy51bnN0YWJsZV9Mb3dQcmlvcml0eT00O2V4cG9ydHMudW5zdGFibGVfcnVuV2l0aFByaW9yaXR5PWZ1bmN0aW9uKGEsYil7c3dpdGNoKGEpe2Nhc2UgMTpjYXNlIDI6Y2FzZSAzOmNhc2UgNDpjYXNlIDU6YnJlYWs7ZGVmYXVsdDphPTN9dmFyIGM9UjtSPWE7dHJ5e3JldHVybiBiKCl9ZmluYWxseXtSPWN9fTtcbmV4cG9ydHMudW5zdGFibGVfbmV4dD1mdW5jdGlvbihhKXtzd2l0Y2goUil7Y2FzZSAxOmNhc2UgMjpjYXNlIDM6dmFyIGI9MzticmVhaztkZWZhdWx0OmI9Un12YXIgYz1SO1I9Yjt0cnl7cmV0dXJuIGEoKX1maW5hbGx5e1I9Y319O1xuZXhwb3J0cy51bnN0YWJsZV9zY2hlZHVsZUNhbGxiYWNrPWZ1bmN0aW9uKGEsYixjKXt2YXIgZD1leHBvcnRzLnVuc3RhYmxlX25vdygpO2lmKFwib2JqZWN0XCI9PT10eXBlb2YgYyYmbnVsbCE9PWMpe3ZhciBlPWMuZGVsYXk7ZT1cIm51bWJlclwiPT09dHlwZW9mIGUmJjA8ZT9kK2U6ZDtjPVwibnVtYmVyXCI9PT10eXBlb2YgYy50aW1lb3V0P2MudGltZW91dDpZKGEpfWVsc2UgYz1ZKGEpLGU9ZDtjPWUrYzthPXtpZDpQKyssY2FsbGJhY2s6Yixwcmlvcml0eUxldmVsOmEsc3RhcnRUaW1lOmUsZXhwaXJhdGlvblRpbWU6Yyxzb3J0SW5kZXg6LTF9O2U+ZD8oYS5zb3J0SW5kZXg9ZSxKKE8sYSksbnVsbD09PUwoTikmJmE9PT1MKE8pJiYoVT9oKCk6VT0hMCxnKFcsZS1kKSkpOihhLnNvcnRJbmRleD1jLEooTixhKSxUfHxTfHwoVD0hMCxmKFgpKSk7cmV0dXJuIGF9O2V4cG9ydHMudW5zdGFibGVfY2FuY2VsQ2FsbGJhY2s9ZnVuY3Rpb24oYSl7YS5jYWxsYmFjaz1udWxsfTtcbmV4cG9ydHMudW5zdGFibGVfd3JhcENhbGxiYWNrPWZ1bmN0aW9uKGEpe3ZhciBiPVI7cmV0dXJuIGZ1bmN0aW9uKCl7dmFyIGM9UjtSPWI7dHJ5e3JldHVybiBhLmFwcGx5KHRoaXMsYXJndW1lbnRzKX1maW5hbGx5e1I9Y319fTtleHBvcnRzLnVuc3RhYmxlX2dldEN1cnJlbnRQcmlvcml0eUxldmVsPWZ1bmN0aW9uKCl7cmV0dXJuIFJ9O2V4cG9ydHMudW5zdGFibGVfc2hvdWxkWWllbGQ9ZnVuY3Rpb24oKXt2YXIgYT1leHBvcnRzLnVuc3RhYmxlX25vdygpO1YoYSk7dmFyIGI9TChOKTtyZXR1cm4gYiE9PVEmJm51bGwhPT1RJiZudWxsIT09YiYmbnVsbCE9PWIuY2FsbGJhY2smJmIuc3RhcnRUaW1lPD1hJiZiLmV4cGlyYXRpb25UaW1lPFEuZXhwaXJhdGlvblRpbWV8fGsoKX07ZXhwb3J0cy51bnN0YWJsZV9yZXF1ZXN0UGFpbnQ9WjtleHBvcnRzLnVuc3RhYmxlX2NvbnRpbnVlRXhlY3V0aW9uPWZ1bmN0aW9uKCl7VHx8U3x8KFQ9ITAsZihYKSl9O1xuZXhwb3J0cy51bnN0YWJsZV9wYXVzZUV4ZWN1dGlvbj1mdW5jdGlvbigpe307ZXhwb3J0cy51bnN0YWJsZV9nZXRGaXJzdENhbGxiYWNrTm9kZT1mdW5jdGlvbigpe3JldHVybiBMKE4pfTtleHBvcnRzLnVuc3RhYmxlX1Byb2ZpbGluZz1udWxsO1xuIiwiLy8gZXh0cmFjdGVkIGJ5IG1pbmktY3NzLWV4dHJhY3QtcGx1Z2luXG5tb2R1bGUuZXhwb3J0cyA9IHtcImJvdHRvbVBhcnRcIjpcIl8xNWVNSXJCdjE5eE91YnNyczlnalRyXCJ9OyIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5leHBvcnQgdmFyIFJlYWN0UmVkdXhDb250ZXh0ID1cbi8qI19fUFVSRV9fKi9cblJlYWN0LmNyZWF0ZUNvbnRleHQobnVsbCk7XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFJlYWN0UmVkdXhDb250ZXh0LmRpc3BsYXlOYW1lID0gJ1JlYWN0UmVkdXgnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWFjdFJlZHV4Q29udGV4dDsiLCIvLyBEZWZhdWx0IHRvIGEgZHVtbXkgXCJiYXRjaFwiIGltcGxlbWVudGF0aW9uIHRoYXQganVzdCBydW5zIHRoZSBjYWxsYmFja1xuZnVuY3Rpb24gZGVmYXVsdE5vb3BCYXRjaChjYWxsYmFjaykge1xuICBjYWxsYmFjaygpO1xufVxuXG52YXIgYmF0Y2ggPSBkZWZhdWx0Tm9vcEJhdGNoOyAvLyBBbGxvdyBpbmplY3RpbmcgYW5vdGhlciBiYXRjaGluZyBmdW5jdGlvbiBsYXRlclxuXG5leHBvcnQgdmFyIHNldEJhdGNoID0gZnVuY3Rpb24gc2V0QmF0Y2gobmV3QmF0Y2gpIHtcbiAgcmV0dXJuIGJhdGNoID0gbmV3QmF0Y2g7XG59OyAvLyBTdXBwbHkgYSBnZXR0ZXIganVzdCB0byBza2lwIGRlYWxpbmcgd2l0aCBFU00gYmluZGluZ3NcblxuZXhwb3J0IHZhciBnZXRCYXRjaCA9IGZ1bmN0aW9uIGdldEJhdGNoKCkge1xuICByZXR1cm4gYmF0Y2g7XG59OyIsImltcG9ydCB7IGdldEJhdGNoIH0gZnJvbSAnLi9iYXRjaCc7IC8vIGVuY2Fwc3VsYXRlcyB0aGUgc3Vic2NyaXB0aW9uIGxvZ2ljIGZvciBjb25uZWN0aW5nIGEgY29tcG9uZW50IHRvIHRoZSByZWR1eCBzdG9yZSwgYXNcbi8vIHdlbGwgYXMgbmVzdGluZyBzdWJzY3JpcHRpb25zIG9mIGRlc2NlbmRhbnQgY29tcG9uZW50cywgc28gdGhhdCB3ZSBjYW4gZW5zdXJlIHRoZVxuLy8gYW5jZXN0b3IgY29tcG9uZW50cyByZS1yZW5kZXIgYmVmb3JlIGRlc2NlbmRhbnRzXG5cbnZhciBudWxsTGlzdGVuZXJzID0ge1xuICBub3RpZnk6IGZ1bmN0aW9uIG5vdGlmeSgpIHt9XG59O1xuXG5mdW5jdGlvbiBjcmVhdGVMaXN0ZW5lckNvbGxlY3Rpb24oKSB7XG4gIHZhciBiYXRjaCA9IGdldEJhdGNoKCk7XG4gIHZhciBmaXJzdCA9IG51bGw7XG4gIHZhciBsYXN0ID0gbnVsbDtcbiAgcmV0dXJuIHtcbiAgICBjbGVhcjogZnVuY3Rpb24gY2xlYXIoKSB7XG4gICAgICBmaXJzdCA9IG51bGw7XG4gICAgICBsYXN0ID0gbnVsbDtcbiAgICB9LFxuICAgIG5vdGlmeTogZnVuY3Rpb24gbm90aWZ5KCkge1xuICAgICAgYmF0Y2goZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbGlzdGVuZXIgPSBmaXJzdDtcblxuICAgICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgICBsaXN0ZW5lci5jYWxsYmFjaygpO1xuICAgICAgICAgIGxpc3RlbmVyID0gbGlzdGVuZXIubmV4dDtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBnZXQ6IGZ1bmN0aW9uIGdldCgpIHtcbiAgICAgIHZhciBsaXN0ZW5lcnMgPSBbXTtcbiAgICAgIHZhciBsaXN0ZW5lciA9IGZpcnN0O1xuXG4gICAgICB3aGlsZSAobGlzdGVuZXIpIHtcbiAgICAgICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgICAgICBsaXN0ZW5lciA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBsaXN0ZW5lcnM7XG4gICAgfSxcbiAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShjYWxsYmFjaykge1xuICAgICAgdmFyIGlzU3Vic2NyaWJlZCA9IHRydWU7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsYXN0ID0ge1xuICAgICAgICBjYWxsYmFjazogY2FsbGJhY2ssXG4gICAgICAgIG5leHQ6IG51bGwsXG4gICAgICAgIHByZXY6IGxhc3RcbiAgICAgIH07XG5cbiAgICAgIGlmIChsaXN0ZW5lci5wcmV2KSB7XG4gICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZmlyc3QgPSBsaXN0ZW5lcjtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIHVuc3Vic2NyaWJlKCkge1xuICAgICAgICBpZiAoIWlzU3Vic2NyaWJlZCB8fCBmaXJzdCA9PT0gbnVsbCkgcmV0dXJuO1xuICAgICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcblxuICAgICAgICBpZiAobGlzdGVuZXIubmV4dCkge1xuICAgICAgICAgIGxpc3RlbmVyLm5leHQucHJldiA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFzdCA9IGxpc3RlbmVyLnByZXY7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGlzdGVuZXIucHJldikge1xuICAgICAgICAgIGxpc3RlbmVyLnByZXYubmV4dCA9IGxpc3RlbmVyLm5leHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZmlyc3QgPSBsaXN0ZW5lci5uZXh0O1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH1cbiAgfTtcbn1cblxudmFyIFN1YnNjcmlwdGlvbiA9XG4vKiNfX1BVUkVfXyovXG5mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIFN1YnNjcmlwdGlvbihzdG9yZSwgcGFyZW50U3ViKSB7XG4gICAgdGhpcy5zdG9yZSA9IHN0b3JlO1xuICAgIHRoaXMucGFyZW50U3ViID0gcGFyZW50U3ViO1xuICAgIHRoaXMudW5zdWJzY3JpYmUgPSBudWxsO1xuICAgIHRoaXMubGlzdGVuZXJzID0gbnVsbExpc3RlbmVycztcbiAgICB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIgPSB0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIuYmluZCh0aGlzKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBTdWJzY3JpcHRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5hZGROZXN0ZWRTdWIgPSBmdW5jdGlvbiBhZGROZXN0ZWRTdWIobGlzdGVuZXIpIHtcbiAgICB0aGlzLnRyeVN1YnNjcmliZSgpO1xuICAgIHJldHVybiB0aGlzLmxpc3RlbmVycy5zdWJzY3JpYmUobGlzdGVuZXIpO1xuICB9O1xuXG4gIF9wcm90by5ub3RpZnlOZXN0ZWRTdWJzID0gZnVuY3Rpb24gbm90aWZ5TmVzdGVkU3VicygpIHtcbiAgICB0aGlzLmxpc3RlbmVycy5ub3RpZnkoKTtcbiAgfTtcblxuICBfcHJvdG8uaGFuZGxlQ2hhbmdlV3JhcHBlciA9IGZ1bmN0aW9uIGhhbmRsZUNoYW5nZVdyYXBwZXIoKSB7XG4gICAgaWYgKHRoaXMub25TdGF0ZUNoYW5nZSkge1xuICAgICAgdGhpcy5vblN0YXRlQ2hhbmdlKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by5pc1N1YnNjcmliZWQgPSBmdW5jdGlvbiBpc1N1YnNjcmliZWQoKSB7XG4gICAgcmV0dXJuIEJvb2xlYW4odGhpcy51bnN1YnNjcmliZSk7XG4gIH07XG5cbiAgX3Byb3RvLnRyeVN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVN1YnNjcmliZSgpIHtcbiAgICBpZiAoIXRoaXMudW5zdWJzY3JpYmUpIHtcbiAgICAgIHRoaXMudW5zdWJzY3JpYmUgPSB0aGlzLnBhcmVudFN1YiA/IHRoaXMucGFyZW50U3ViLmFkZE5lc3RlZFN1Yih0aGlzLmhhbmRsZUNoYW5nZVdyYXBwZXIpIDogdGhpcy5zdG9yZS5zdWJzY3JpYmUodGhpcy5oYW5kbGVDaGFuZ2VXcmFwcGVyKTtcbiAgICAgIHRoaXMubGlzdGVuZXJzID0gY3JlYXRlTGlzdGVuZXJDb2xsZWN0aW9uKCk7XG4gICAgfVxuICB9O1xuXG4gIF9wcm90by50cnlVbnN1YnNjcmliZSA9IGZ1bmN0aW9uIHRyeVVuc3Vic2NyaWJlKCkge1xuICAgIGlmICh0aGlzLnVuc3Vic2NyaWJlKSB7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlKCk7XG4gICAgICB0aGlzLnVuc3Vic2NyaWJlID0gbnVsbDtcbiAgICAgIHRoaXMubGlzdGVuZXJzLmNsZWFyKCk7XG4gICAgICB0aGlzLmxpc3RlbmVycyA9IG51bGxMaXN0ZW5lcnM7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBTdWJzY3JpcHRpb247XG59KCk7XG5cbmV4cG9ydCB7IFN1YnNjcmlwdGlvbiBhcyBkZWZhdWx0IH07IiwiaW1wb3J0IFJlYWN0LCB7IHVzZU1lbW8sIHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSAncHJvcC10eXBlcyc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vQ29udGV4dCc7XG5pbXBvcnQgU3Vic2NyaXB0aW9uIGZyb20gJy4uL3V0aWxzL1N1YnNjcmlwdGlvbic7XG5cbmZ1bmN0aW9uIFByb3ZpZGVyKF9yZWYpIHtcbiAgdmFyIHN0b3JlID0gX3JlZi5zdG9yZSxcbiAgICAgIGNvbnRleHQgPSBfcmVmLmNvbnRleHQsXG4gICAgICBjaGlsZHJlbiA9IF9yZWYuY2hpbGRyZW47XG4gIHZhciBjb250ZXh0VmFsdWUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICB2YXIgc3Vic2NyaXB0aW9uID0gbmV3IFN1YnNjcmlwdGlvbihzdG9yZSk7XG4gICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBzdWJzY3JpcHRpb24ubm90aWZ5TmVzdGVkU3VicztcbiAgICByZXR1cm4ge1xuICAgICAgc3RvcmU6IHN0b3JlLFxuICAgICAgc3Vic2NyaXB0aW9uOiBzdWJzY3JpcHRpb25cbiAgICB9O1xuICB9LCBbc3RvcmVdKTtcbiAgdmFyIHByZXZpb3VzU3RhdGUgPSB1c2VNZW1vKGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gc3RvcmUuZ2V0U3RhdGUoKTtcbiAgfSwgW3N0b3JlXSk7XG4gIHVzZUVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgdmFyIHN1YnNjcmlwdGlvbiA9IGNvbnRleHRWYWx1ZS5zdWJzY3JpcHRpb247XG4gICAgc3Vic2NyaXB0aW9uLnRyeVN1YnNjcmliZSgpO1xuXG4gICAgaWYgKHByZXZpb3VzU3RhdGUgIT09IHN0b3JlLmdldFN0YXRlKCkpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi5ub3RpZnlOZXN0ZWRTdWJzKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHN1YnNjcmlwdGlvbi50cnlVbnN1YnNjcmliZSgpO1xuICAgICAgc3Vic2NyaXB0aW9uLm9uU3RhdGVDaGFuZ2UgPSBudWxsO1xuICAgIH07XG4gIH0sIFtjb250ZXh0VmFsdWUsIHByZXZpb3VzU3RhdGVdKTtcbiAgdmFyIENvbnRleHQgPSBjb250ZXh0IHx8IFJlYWN0UmVkdXhDb250ZXh0O1xuICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250ZXh0LlByb3ZpZGVyLCB7XG4gICAgdmFsdWU6IGNvbnRleHRWYWx1ZVxuICB9LCBjaGlsZHJlbik7XG59XG5cbmlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gIFByb3ZpZGVyLnByb3BUeXBlcyA9IHtcbiAgICBzdG9yZTogUHJvcFR5cGVzLnNoYXBlKHtcbiAgICAgIHN1YnNjcmliZTogUHJvcFR5cGVzLmZ1bmMuaXNSZXF1aXJlZCxcbiAgICAgIGRpc3BhdGNoOiBQcm9wVHlwZXMuZnVuYy5pc1JlcXVpcmVkLFxuICAgICAgZ2V0U3RhdGU6IFByb3BUeXBlcy5mdW5jLmlzUmVxdWlyZWRcbiAgICB9KSxcbiAgICBjb250ZXh0OiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMuYW55XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFByb3ZpZGVyOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9leHRlbmRzKCkge1xuICBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gfHwgZnVuY3Rpb24gKHRhcmdldCkge1xuICAgIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldO1xuXG4gICAgICBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7XG4gICAgICAgIGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7XG4gICAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0YXJnZXQ7XG4gIH07XG5cbiAgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG59IiwiZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkge1xuICBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTtcbiAgdmFyIHRhcmdldCA9IHt9O1xuICB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7XG4gIHZhciBrZXksIGk7XG5cbiAgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHtcbiAgICBrZXkgPSBzb3VyY2VLZXlzW2ldO1xuICAgIGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7XG4gICAgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTtcbiAgfVxuXG4gIHJldHVybiB0YXJnZXQ7XG59IiwiaW1wb3J0IHsgdXNlRWZmZWN0LCB1c2VMYXlvdXRFZmZlY3QgfSBmcm9tICdyZWFjdCc7IC8vIFJlYWN0IGN1cnJlbnRseSB0aHJvd3MgYSB3YXJuaW5nIHdoZW4gdXNpbmcgdXNlTGF5b3V0RWZmZWN0IG9uIHRoZSBzZXJ2ZXIuXG4vLyBUbyBnZXQgYXJvdW5kIGl0LCB3ZSBjYW4gY29uZGl0aW9uYWxseSB1c2VFZmZlY3Qgb24gdGhlIHNlcnZlciAobm8tb3ApIGFuZFxuLy8gdXNlTGF5b3V0RWZmZWN0IGluIHRoZSBicm93c2VyLiBXZSBuZWVkIHVzZUxheW91dEVmZmVjdCB0byBlbnN1cmUgdGhlIHN0b3JlXG4vLyBzdWJzY3JpcHRpb24gY2FsbGJhY2sgYWx3YXlzIGhhcyB0aGUgc2VsZWN0b3IgZnJvbSB0aGUgbGF0ZXN0IHJlbmRlciBjb21taXRcbi8vIGF2YWlsYWJsZSwgb3RoZXJ3aXNlIGEgc3RvcmUgdXBkYXRlIG1heSBoYXBwZW4gYmV0d2VlbiByZW5kZXIgYW5kIHRoZSBlZmZlY3QsXG4vLyB3aGljaCBtYXkgY2F1c2UgbWlzc2VkIHVwZGF0ZXM7IHdlIGFsc28gbXVzdCBlbnN1cmUgdGhlIHN0b3JlIHN1YnNjcmlwdGlvblxuLy8gaXMgY3JlYXRlZCBzeW5jaHJvbm91c2x5LCBvdGhlcndpc2UgYSBzdG9yZSB1cGRhdGUgbWF5IG9jY3VyIGJlZm9yZSB0aGVcbi8vIHN1YnNjcmlwdGlvbiBpcyBjcmVhdGVkIGFuZCBhbiBpbmNvbnNpc3RlbnQgc3RhdGUgbWF5IGJlIG9ic2VydmVkXG5cbmV4cG9ydCB2YXIgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9IHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCcgPyB1c2VMYXlvdXRFZmZlY3QgOiB1c2VFZmZlY3Q7IiwiaW1wb3J0ICQkb2JzZXJ2YWJsZSBmcm9tICdzeW1ib2wtb2JzZXJ2YWJsZSc7XG5cbi8qKlxuICogVGhlc2UgYXJlIHByaXZhdGUgYWN0aW9uIHR5cGVzIHJlc2VydmVkIGJ5IFJlZHV4LlxuICogRm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHlvdSBtdXN0IHJldHVybiB0aGUgY3VycmVudCBzdGF0ZS5cbiAqIElmIHRoZSBjdXJyZW50IHN0YXRlIGlzIHVuZGVmaW5lZCwgeW91IG11c3QgcmV0dXJuIHRoZSBpbml0aWFsIHN0YXRlLlxuICogRG8gbm90IHJlZmVyZW5jZSB0aGVzZSBhY3Rpb24gdHlwZXMgZGlyZWN0bHkgaW4geW91ciBjb2RlLlxuICovXG52YXIgcmFuZG9tU3RyaW5nID0gZnVuY3Rpb24gcmFuZG9tU3RyaW5nKCkge1xuICByZXR1cm4gTWF0aC5yYW5kb20oKS50b1N0cmluZygzNikuc3Vic3RyaW5nKDcpLnNwbGl0KCcnKS5qb2luKCcuJyk7XG59O1xuXG52YXIgQWN0aW9uVHlwZXMgPSB7XG4gIElOSVQ6IFwiQEByZWR1eC9JTklUXCIgKyByYW5kb21TdHJpbmcoKSxcbiAgUkVQTEFDRTogXCJAQHJlZHV4L1JFUExBQ0VcIiArIHJhbmRvbVN0cmluZygpLFxuICBQUk9CRV9VTktOT1dOX0FDVElPTjogZnVuY3Rpb24gUFJPQkVfVU5LTk9XTl9BQ1RJT04oKSB7XG4gICAgcmV0dXJuIFwiQEByZWR1eC9QUk9CRV9VTktOT1dOX0FDVElPTlwiICsgcmFuZG9tU3RyaW5nKCk7XG4gIH1cbn07XG5cbi8qKlxuICogQHBhcmFtIHthbnl9IG9iaiBUaGUgb2JqZWN0IHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gVHJ1ZSBpZiB0aGUgYXJndW1lbnQgYXBwZWFycyB0byBiZSBhIHBsYWluIG9iamVjdC5cbiAqL1xuZnVuY3Rpb24gaXNQbGFpbk9iamVjdChvYmopIHtcbiAgaWYgKHR5cGVvZiBvYmogIT09ICdvYmplY3QnIHx8IG9iaiA9PT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuICB2YXIgcHJvdG8gPSBvYmo7XG5cbiAgd2hpbGUgKE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90bykgIT09IG51bGwpIHtcbiAgICBwcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZihwcm90byk7XG4gIH1cblxuICByZXR1cm4gT2JqZWN0LmdldFByb3RvdHlwZU9mKG9iaikgPT09IHByb3RvO1xufVxuXG4vKipcbiAqIENyZWF0ZXMgYSBSZWR1eCBzdG9yZSB0aGF0IGhvbGRzIHRoZSBzdGF0ZSB0cmVlLlxuICogVGhlIG9ubHkgd2F5IHRvIGNoYW5nZSB0aGUgZGF0YSBpbiB0aGUgc3RvcmUgaXMgdG8gY2FsbCBgZGlzcGF0Y2goKWAgb24gaXQuXG4gKlxuICogVGhlcmUgc2hvdWxkIG9ubHkgYmUgYSBzaW5nbGUgc3RvcmUgaW4geW91ciBhcHAuIFRvIHNwZWNpZnkgaG93IGRpZmZlcmVudFxuICogcGFydHMgb2YgdGhlIHN0YXRlIHRyZWUgcmVzcG9uZCB0byBhY3Rpb25zLCB5b3UgbWF5IGNvbWJpbmUgc2V2ZXJhbCByZWR1Y2Vyc1xuICogaW50byBhIHNpbmdsZSByZWR1Y2VyIGZ1bmN0aW9uIGJ5IHVzaW5nIGBjb21iaW5lUmVkdWNlcnNgLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHJlZHVjZXIgQSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIG5leHQgc3RhdGUgdHJlZSwgZ2l2ZW5cbiAqIHRoZSBjdXJyZW50IHN0YXRlIHRyZWUgYW5kIHRoZSBhY3Rpb24gdG8gaGFuZGxlLlxuICpcbiAqIEBwYXJhbSB7YW55fSBbcHJlbG9hZGVkU3RhdGVdIFRoZSBpbml0aWFsIHN0YXRlLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gaHlkcmF0ZSB0aGUgc3RhdGUgZnJvbSB0aGUgc2VydmVyIGluIHVuaXZlcnNhbCBhcHBzLCBvciB0byByZXN0b3JlIGFcbiAqIHByZXZpb3VzbHkgc2VyaWFsaXplZCB1c2VyIHNlc3Npb24uXG4gKiBJZiB5b3UgdXNlIGBjb21iaW5lUmVkdWNlcnNgIHRvIHByb2R1Y2UgdGhlIHJvb3QgcmVkdWNlciBmdW5jdGlvbiwgdGhpcyBtdXN0IGJlXG4gKiBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBhcyBgY29tYmluZVJlZHVjZXJzYCBrZXlzLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtlbmhhbmNlcl0gVGhlIHN0b3JlIGVuaGFuY2VyLiBZb3UgbWF5IG9wdGlvbmFsbHkgc3BlY2lmeSBpdFxuICogdG8gZW5oYW5jZSB0aGUgc3RvcmUgd2l0aCB0aGlyZC1wYXJ0eSBjYXBhYmlsaXRpZXMgc3VjaCBhcyBtaWRkbGV3YXJlLFxuICogdGltZSB0cmF2ZWwsIHBlcnNpc3RlbmNlLCBldGMuIFRoZSBvbmx5IHN0b3JlIGVuaGFuY2VyIHRoYXQgc2hpcHMgd2l0aCBSZWR1eFxuICogaXMgYGFwcGx5TWlkZGxld2FyZSgpYC5cbiAqXG4gKiBAcmV0dXJucyB7U3RvcmV9IEEgUmVkdXggc3RvcmUgdGhhdCBsZXRzIHlvdSByZWFkIHRoZSBzdGF0ZSwgZGlzcGF0Y2ggYWN0aW9uc1xuICogYW5kIHN1YnNjcmliZSB0byBjaGFuZ2VzLlxuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVN0b3JlKHJlZHVjZXIsIHByZWxvYWRlZFN0YXRlLCBlbmhhbmNlcikge1xuICB2YXIgX3JlZjI7XG5cbiAgaWYgKHR5cGVvZiBwcmVsb2FkZWRTdGF0ZSA9PT0gJ2Z1bmN0aW9uJyAmJiB0eXBlb2YgZW5oYW5jZXIgPT09ICdmdW5jdGlvbicgfHwgdHlwZW9mIGVuaGFuY2VyID09PSAnZnVuY3Rpb24nICYmIHR5cGVvZiBhcmd1bWVudHNbM10gPT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0l0IGxvb2tzIGxpa2UgeW91IGFyZSBwYXNzaW5nIHNldmVyYWwgc3RvcmUgZW5oYW5jZXJzIHRvICcgKyAnY3JlYXRlU3RvcmUoKS4gVGhpcyBpcyBub3Qgc3VwcG9ydGVkLiBJbnN0ZWFkLCBjb21wb3NlIHRoZW0gJyArICd0b2dldGhlciB0byBhIHNpbmdsZSBmdW5jdGlvbi4nKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgcHJlbG9hZGVkU3RhdGUgPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIGVuaGFuY2VyID09PSAndW5kZWZpbmVkJykge1xuICAgIGVuaGFuY2VyID0gcHJlbG9hZGVkU3RhdGU7XG4gICAgcHJlbG9hZGVkU3RhdGUgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBpZiAodHlwZW9mIGVuaGFuY2VyICE9PSAndW5kZWZpbmVkJykge1xuICAgIGlmICh0eXBlb2YgZW5oYW5jZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIGVuaGFuY2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGVuaGFuY2VyKGNyZWF0ZVN0b3JlKShyZWR1Y2VyLCBwcmVsb2FkZWRTdGF0ZSk7XG4gIH1cblxuICBpZiAodHlwZW9mIHJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSByZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gIH1cblxuICB2YXIgY3VycmVudFJlZHVjZXIgPSByZWR1Y2VyO1xuICB2YXIgY3VycmVudFN0YXRlID0gcHJlbG9hZGVkU3RhdGU7XG4gIHZhciBjdXJyZW50TGlzdGVuZXJzID0gW107XG4gIHZhciBuZXh0TGlzdGVuZXJzID0gY3VycmVudExpc3RlbmVycztcbiAgdmFyIGlzRGlzcGF0Y2hpbmcgPSBmYWxzZTtcbiAgLyoqXG4gICAqIFRoaXMgbWFrZXMgYSBzaGFsbG93IGNvcHkgb2YgY3VycmVudExpc3RlbmVycyBzbyB3ZSBjYW4gdXNlXG4gICAqIG5leHRMaXN0ZW5lcnMgYXMgYSB0ZW1wb3JhcnkgbGlzdCB3aGlsZSBkaXNwYXRjaGluZy5cbiAgICpcbiAgICogVGhpcyBwcmV2ZW50cyBhbnkgYnVncyBhcm91bmQgY29uc3VtZXJzIGNhbGxpbmdcbiAgICogc3Vic2NyaWJlL3Vuc3Vic2NyaWJlIGluIHRoZSBtaWRkbGUgb2YgYSBkaXNwYXRjaC5cbiAgICovXG5cbiAgZnVuY3Rpb24gZW5zdXJlQ2FuTXV0YXRlTmV4dExpc3RlbmVycygpIHtcbiAgICBpZiAobmV4dExpc3RlbmVycyA9PT0gY3VycmVudExpc3RlbmVycykge1xuICAgICAgbmV4dExpc3RlbmVycyA9IGN1cnJlbnRMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICB9XG4gIH1cbiAgLyoqXG4gICAqIFJlYWRzIHRoZSBzdGF0ZSB0cmVlIG1hbmFnZWQgYnkgdGhlIHN0b3JlLlxuICAgKlxuICAgKiBAcmV0dXJucyB7YW55fSBUaGUgY3VycmVudCBzdGF0ZSB0cmVlIG9mIHlvdXIgYXBwbGljYXRpb24uXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZ2V0U3RhdGUoKSB7XG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgY2FsbCBzdG9yZS5nZXRTdGF0ZSgpIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdUaGUgcmVkdWNlciBoYXMgYWxyZWFkeSByZWNlaXZlZCB0aGUgc3RhdGUgYXMgYW4gYXJndW1lbnQuICcgKyAnUGFzcyBpdCBkb3duIGZyb20gdGhlIHRvcCByZWR1Y2VyIGluc3RlYWQgb2YgcmVhZGluZyBpdCBmcm9tIHRoZSBzdG9yZS4nKTtcbiAgICB9XG5cbiAgICByZXR1cm4gY3VycmVudFN0YXRlO1xuICB9XG4gIC8qKlxuICAgKiBBZGRzIGEgY2hhbmdlIGxpc3RlbmVyLiBJdCB3aWxsIGJlIGNhbGxlZCBhbnkgdGltZSBhbiBhY3Rpb24gaXMgZGlzcGF0Y2hlZCxcbiAgICogYW5kIHNvbWUgcGFydCBvZiB0aGUgc3RhdGUgdHJlZSBtYXkgcG90ZW50aWFsbHkgaGF2ZSBjaGFuZ2VkLiBZb3UgbWF5IHRoZW5cbiAgICogY2FsbCBgZ2V0U3RhdGUoKWAgdG8gcmVhZCB0aGUgY3VycmVudCBzdGF0ZSB0cmVlIGluc2lkZSB0aGUgY2FsbGJhY2suXG4gICAqXG4gICAqIFlvdSBtYXkgY2FsbCBgZGlzcGF0Y2goKWAgZnJvbSBhIGNoYW5nZSBsaXN0ZW5lciwgd2l0aCB0aGUgZm9sbG93aW5nXG4gICAqIGNhdmVhdHM6XG4gICAqXG4gICAqIDEuIFRoZSBzdWJzY3JpcHRpb25zIGFyZSBzbmFwc2hvdHRlZCBqdXN0IGJlZm9yZSBldmVyeSBgZGlzcGF0Y2goKWAgY2FsbC5cbiAgICogSWYgeW91IHN1YnNjcmliZSBvciB1bnN1YnNjcmliZSB3aGlsZSB0aGUgbGlzdGVuZXJzIGFyZSBiZWluZyBpbnZva2VkLCB0aGlzXG4gICAqIHdpbGwgbm90IGhhdmUgYW55IGVmZmVjdCBvbiB0aGUgYGRpc3BhdGNoKClgIHRoYXQgaXMgY3VycmVudGx5IGluIHByb2dyZXNzLlxuICAgKiBIb3dldmVyLCB0aGUgbmV4dCBgZGlzcGF0Y2goKWAgY2FsbCwgd2hldGhlciBuZXN0ZWQgb3Igbm90LCB3aWxsIHVzZSBhIG1vcmVcbiAgICogcmVjZW50IHNuYXBzaG90IG9mIHRoZSBzdWJzY3JpcHRpb24gbGlzdC5cbiAgICpcbiAgICogMi4gVGhlIGxpc3RlbmVyIHNob3VsZCBub3QgZXhwZWN0IHRvIHNlZSBhbGwgc3RhdGUgY2hhbmdlcywgYXMgdGhlIHN0YXRlXG4gICAqIG1pZ2h0IGhhdmUgYmVlbiB1cGRhdGVkIG11bHRpcGxlIHRpbWVzIGR1cmluZyBhIG5lc3RlZCBgZGlzcGF0Y2goKWAgYmVmb3JlXG4gICAqIHRoZSBsaXN0ZW5lciBpcyBjYWxsZWQuIEl0IGlzLCBob3dldmVyLCBndWFyYW50ZWVkIHRoYXQgYWxsIHN1YnNjcmliZXJzXG4gICAqIHJlZ2lzdGVyZWQgYmVmb3JlIHRoZSBgZGlzcGF0Y2goKWAgc3RhcnRlZCB3aWxsIGJlIGNhbGxlZCB3aXRoIHRoZSBsYXRlc3RcbiAgICogc3RhdGUgYnkgdGhlIHRpbWUgaXQgZXhpdHMuXG4gICAqXG4gICAqIEBwYXJhbSB7RnVuY3Rpb259IGxpc3RlbmVyIEEgY2FsbGJhY2sgdG8gYmUgaW52b2tlZCBvbiBldmVyeSBkaXNwYXRjaC5cbiAgICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRvIHJlbW92ZSB0aGlzIGNoYW5nZSBsaXN0ZW5lci5cbiAgICovXG5cblxuICBmdW5jdGlvbiBzdWJzY3JpYmUobGlzdGVuZXIpIHtcbiAgICBpZiAodHlwZW9mIGxpc3RlbmVyICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0V4cGVjdGVkIHRoZSBsaXN0ZW5lciB0byBiZSBhIGZ1bmN0aW9uLicpO1xuICAgIH1cblxuICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ1lvdSBtYXkgbm90IGNhbGwgc3RvcmUuc3Vic2NyaWJlKCkgd2hpbGUgdGhlIHJlZHVjZXIgaXMgZXhlY3V0aW5nLiAnICsgJ0lmIHlvdSB3b3VsZCBsaWtlIHRvIGJlIG5vdGlmaWVkIGFmdGVyIHRoZSBzdG9yZSBoYXMgYmVlbiB1cGRhdGVkLCBzdWJzY3JpYmUgZnJvbSBhICcgKyAnY29tcG9uZW50IGFuZCBpbnZva2Ugc3RvcmUuZ2V0U3RhdGUoKSBpbiB0aGUgY2FsbGJhY2sgdG8gYWNjZXNzIHRoZSBsYXRlc3Qgc3RhdGUuICcgKyAnU2VlIGh0dHBzOi8vcmVkdXguanMub3JnL2FwaS1yZWZlcmVuY2Uvc3RvcmUjc3Vic2NyaWJlbGlzdGVuZXIgZm9yIG1vcmUgZGV0YWlscy4nKTtcbiAgICB9XG5cbiAgICB2YXIgaXNTdWJzY3JpYmVkID0gdHJ1ZTtcbiAgICBlbnN1cmVDYW5NdXRhdGVOZXh0TGlzdGVuZXJzKCk7XG4gICAgbmV4dExpc3RlbmVycy5wdXNoKGxpc3RlbmVyKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gdW5zdWJzY3JpYmUoKSB7XG4gICAgICBpZiAoIWlzU3Vic2NyaWJlZCkge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGlmIChpc0Rpc3BhdGNoaW5nKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignWW91IG1heSBub3QgdW5zdWJzY3JpYmUgZnJvbSBhIHN0b3JlIGxpc3RlbmVyIHdoaWxlIHRoZSByZWR1Y2VyIGlzIGV4ZWN1dGluZy4gJyArICdTZWUgaHR0cHM6Ly9yZWR1eC5qcy5vcmcvYXBpLXJlZmVyZW5jZS9zdG9yZSNzdWJzY3JpYmVsaXN0ZW5lciBmb3IgbW9yZSBkZXRhaWxzLicpO1xuICAgICAgfVxuXG4gICAgICBpc1N1YnNjcmliZWQgPSBmYWxzZTtcbiAgICAgIGVuc3VyZUNhbk11dGF0ZU5leHRMaXN0ZW5lcnMoKTtcbiAgICAgIHZhciBpbmRleCA9IG5leHRMaXN0ZW5lcnMuaW5kZXhPZihsaXN0ZW5lcik7XG4gICAgICBuZXh0TGlzdGVuZXJzLnNwbGljZShpbmRleCwgMSk7XG4gICAgICBjdXJyZW50TGlzdGVuZXJzID0gbnVsbDtcbiAgICB9O1xuICB9XG4gIC8qKlxuICAgKiBEaXNwYXRjaGVzIGFuIGFjdGlvbi4gSXQgaXMgdGhlIG9ubHkgd2F5IHRvIHRyaWdnZXIgYSBzdGF0ZSBjaGFuZ2UuXG4gICAqXG4gICAqIFRoZSBgcmVkdWNlcmAgZnVuY3Rpb24sIHVzZWQgdG8gY3JlYXRlIHRoZSBzdG9yZSwgd2lsbCBiZSBjYWxsZWQgd2l0aCB0aGVcbiAgICogY3VycmVudCBzdGF0ZSB0cmVlIGFuZCB0aGUgZ2l2ZW4gYGFjdGlvbmAuIEl0cyByZXR1cm4gdmFsdWUgd2lsbFxuICAgKiBiZSBjb25zaWRlcmVkIHRoZSAqKm5leHQqKiBzdGF0ZSBvZiB0aGUgdHJlZSwgYW5kIHRoZSBjaGFuZ2UgbGlzdGVuZXJzXG4gICAqIHdpbGwgYmUgbm90aWZpZWQuXG4gICAqXG4gICAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9ubHkgc3VwcG9ydHMgcGxhaW4gb2JqZWN0IGFjdGlvbnMuIElmIHlvdSB3YW50IHRvXG4gICAqIGRpc3BhdGNoIGEgUHJvbWlzZSwgYW4gT2JzZXJ2YWJsZSwgYSB0aHVuaywgb3Igc29tZXRoaW5nIGVsc2UsIHlvdSBuZWVkIHRvXG4gICAqIHdyYXAgeW91ciBzdG9yZSBjcmVhdGluZyBmdW5jdGlvbiBpbnRvIHRoZSBjb3JyZXNwb25kaW5nIG1pZGRsZXdhcmUuIEZvclxuICAgKiBleGFtcGxlLCBzZWUgdGhlIGRvY3VtZW50YXRpb24gZm9yIHRoZSBgcmVkdXgtdGh1bmtgIHBhY2thZ2UuIEV2ZW4gdGhlXG4gICAqIG1pZGRsZXdhcmUgd2lsbCBldmVudHVhbGx5IGRpc3BhdGNoIHBsYWluIG9iamVjdCBhY3Rpb25zIHVzaW5nIHRoaXMgbWV0aG9kLlxuICAgKlxuICAgKiBAcGFyYW0ge09iamVjdH0gYWN0aW9uIEEgcGxhaW4gb2JqZWN0IHJlcHJlc2VudGluZyDigJx3aGF0IGNoYW5nZWTigJ0uIEl0IGlzXG4gICAqIGEgZ29vZCBpZGVhIHRvIGtlZXAgYWN0aW9ucyBzZXJpYWxpemFibGUgc28geW91IGNhbiByZWNvcmQgYW5kIHJlcGxheSB1c2VyXG4gICAqIHNlc3Npb25zLCBvciB1c2UgdGhlIHRpbWUgdHJhdmVsbGluZyBgcmVkdXgtZGV2dG9vbHNgLiBBbiBhY3Rpb24gbXVzdCBoYXZlXG4gICAqIGEgYHR5cGVgIHByb3BlcnR5IHdoaWNoIG1heSBub3QgYmUgYHVuZGVmaW5lZGAuIEl0IGlzIGEgZ29vZCBpZGVhIHRvIHVzZVxuICAgKiBzdHJpbmcgY29uc3RhbnRzIGZvciBhY3Rpb24gdHlwZXMuXG4gICAqXG4gICAqIEByZXR1cm5zIHtPYmplY3R9IEZvciBjb252ZW5pZW5jZSwgdGhlIHNhbWUgYWN0aW9uIG9iamVjdCB5b3UgZGlzcGF0Y2hlZC5cbiAgICpcbiAgICogTm90ZSB0aGF0LCBpZiB5b3UgdXNlIGEgY3VzdG9tIG1pZGRsZXdhcmUsIGl0IG1heSB3cmFwIGBkaXNwYXRjaCgpYCB0b1xuICAgKiByZXR1cm4gc29tZXRoaW5nIGVsc2UgKGZvciBleGFtcGxlLCBhIFByb21pc2UgeW91IGNhbiBhd2FpdCkuXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gZGlzcGF0Y2goYWN0aW9uKSB7XG4gICAgaWYgKCFpc1BsYWluT2JqZWN0KGFjdGlvbikpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignQWN0aW9ucyBtdXN0IGJlIHBsYWluIG9iamVjdHMuICcgKyAnVXNlIGN1c3RvbSBtaWRkbGV3YXJlIGZvciBhc3luYyBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgYWN0aW9uLnR5cGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoJ0FjdGlvbnMgbWF5IG5vdCBoYXZlIGFuIHVuZGVmaW5lZCBcInR5cGVcIiBwcm9wZXJ0eS4gJyArICdIYXZlIHlvdSBtaXNzcGVsbGVkIGEgY29uc3RhbnQ/Jyk7XG4gICAgfVxuXG4gICAgaWYgKGlzRGlzcGF0Y2hpbmcpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignUmVkdWNlcnMgbWF5IG5vdCBkaXNwYXRjaCBhY3Rpb25zLicpO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICBpc0Rpc3BhdGNoaW5nID0gdHJ1ZTtcbiAgICAgIGN1cnJlbnRTdGF0ZSA9IGN1cnJlbnRSZWR1Y2VyKGN1cnJlbnRTdGF0ZSwgYWN0aW9uKTtcbiAgICB9IGZpbmFsbHkge1xuICAgICAgaXNEaXNwYXRjaGluZyA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciBsaXN0ZW5lcnMgPSBjdXJyZW50TGlzdGVuZXJzID0gbmV4dExpc3RlbmVycztcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdGVuZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbGlzdGVuZXIgPSBsaXN0ZW5lcnNbaV07XG4gICAgICBsaXN0ZW5lcigpO1xuICAgIH1cblxuICAgIHJldHVybiBhY3Rpb247XG4gIH1cbiAgLyoqXG4gICAqIFJlcGxhY2VzIHRoZSByZWR1Y2VyIGN1cnJlbnRseSB1c2VkIGJ5IHRoZSBzdG9yZSB0byBjYWxjdWxhdGUgdGhlIHN0YXRlLlxuICAgKlxuICAgKiBZb3UgbWlnaHQgbmVlZCB0aGlzIGlmIHlvdXIgYXBwIGltcGxlbWVudHMgY29kZSBzcGxpdHRpbmcgYW5kIHlvdSB3YW50IHRvXG4gICAqIGxvYWQgc29tZSBvZiB0aGUgcmVkdWNlcnMgZHluYW1pY2FsbHkuIFlvdSBtaWdodCBhbHNvIG5lZWQgdGhpcyBpZiB5b3VcbiAgICogaW1wbGVtZW50IGEgaG90IHJlbG9hZGluZyBtZWNoYW5pc20gZm9yIFJlZHV4LlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBuZXh0UmVkdWNlciBUaGUgcmVkdWNlciBmb3IgdGhlIHN0b3JlIHRvIHVzZSBpbnN0ZWFkLlxuICAgKiBAcmV0dXJucyB7dm9pZH1cbiAgICovXG5cblxuICBmdW5jdGlvbiByZXBsYWNlUmVkdWNlcihuZXh0UmVkdWNlcikge1xuICAgIGlmICh0eXBlb2YgbmV4dFJlZHVjZXIgIT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgdGhlIG5leHRSZWR1Y2VyIHRvIGJlIGEgZnVuY3Rpb24uJyk7XG4gICAgfVxuXG4gICAgY3VycmVudFJlZHVjZXIgPSBuZXh0UmVkdWNlcjsgLy8gVGhpcyBhY3Rpb24gaGFzIGEgc2ltaWxpYXIgZWZmZWN0IHRvIEFjdGlvblR5cGVzLklOSVQuXG4gICAgLy8gQW55IHJlZHVjZXJzIHRoYXQgZXhpc3RlZCBpbiBib3RoIHRoZSBuZXcgYW5kIG9sZCByb290UmVkdWNlclxuICAgIC8vIHdpbGwgcmVjZWl2ZSB0aGUgcHJldmlvdXMgc3RhdGUuIFRoaXMgZWZmZWN0aXZlbHkgcG9wdWxhdGVzXG4gICAgLy8gdGhlIG5ldyBzdGF0ZSB0cmVlIHdpdGggYW55IHJlbGV2YW50IGRhdGEgZnJvbSB0aGUgb2xkIG9uZS5cblxuICAgIGRpc3BhdGNoKHtcbiAgICAgIHR5cGU6IEFjdGlvblR5cGVzLlJFUExBQ0VcbiAgICB9KTtcbiAgfVxuICAvKipcbiAgICogSW50ZXJvcGVyYWJpbGl0eSBwb2ludCBmb3Igb2JzZXJ2YWJsZS9yZWFjdGl2ZSBsaWJyYXJpZXMuXG4gICAqIEByZXR1cm5zIHtvYnNlcnZhYmxlfSBBIG1pbmltYWwgb2JzZXJ2YWJsZSBvZiBzdGF0ZSBjaGFuZ2VzLlxuICAgKiBGb3IgbW9yZSBpbmZvcm1hdGlvbiwgc2VlIHRoZSBvYnNlcnZhYmxlIHByb3Bvc2FsOlxuICAgKiBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1vYnNlcnZhYmxlXG4gICAqL1xuXG5cbiAgZnVuY3Rpb24gb2JzZXJ2YWJsZSgpIHtcbiAgICB2YXIgX3JlZjtcblxuICAgIHZhciBvdXRlclN1YnNjcmliZSA9IHN1YnNjcmliZTtcbiAgICByZXR1cm4gX3JlZiA9IHtcbiAgICAgIC8qKlxuICAgICAgICogVGhlIG1pbmltYWwgb2JzZXJ2YWJsZSBzdWJzY3JpcHRpb24gbWV0aG9kLlxuICAgICAgICogQHBhcmFtIHtPYmplY3R9IG9ic2VydmVyIEFueSBvYmplY3QgdGhhdCBjYW4gYmUgdXNlZCBhcyBhbiBvYnNlcnZlci5cbiAgICAgICAqIFRoZSBvYnNlcnZlciBvYmplY3Qgc2hvdWxkIGhhdmUgYSBgbmV4dGAgbWV0aG9kLlxuICAgICAgICogQHJldHVybnMge3N1YnNjcmlwdGlvbn0gQW4gb2JqZWN0IHdpdGggYW4gYHVuc3Vic2NyaWJlYCBtZXRob2QgdGhhdCBjYW5cbiAgICAgICAqIGJlIHVzZWQgdG8gdW5zdWJzY3JpYmUgdGhlIG9ic2VydmFibGUgZnJvbSB0aGUgc3RvcmUsIGFuZCBwcmV2ZW50IGZ1cnRoZXJcbiAgICAgICAqIGVtaXNzaW9uIG9mIHZhbHVlcyBmcm9tIHRoZSBvYnNlcnZhYmxlLlxuICAgICAgICovXG4gICAgICBzdWJzY3JpYmU6IGZ1bmN0aW9uIHN1YnNjcmliZShvYnNlcnZlcikge1xuICAgICAgICBpZiAodHlwZW9mIG9ic2VydmVyICE9PSAnb2JqZWN0JyB8fCBvYnNlcnZlciA9PT0gbnVsbCkge1xuICAgICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ0V4cGVjdGVkIHRoZSBvYnNlcnZlciB0byBiZSBhbiBvYmplY3QuJyk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBvYnNlcnZlU3RhdGUoKSB7XG4gICAgICAgICAgaWYgKG9ic2VydmVyLm5leHQpIHtcbiAgICAgICAgICAgIG9ic2VydmVyLm5leHQoZ2V0U3RhdGUoKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgb2JzZXJ2ZVN0YXRlKCk7XG4gICAgICAgIHZhciB1bnN1YnNjcmliZSA9IG91dGVyU3Vic2NyaWJlKG9ic2VydmVTdGF0ZSk7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgdW5zdWJzY3JpYmU6IHVuc3Vic2NyaWJlXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgfSwgX3JlZlskJG9ic2VydmFibGVdID0gZnVuY3Rpb24gKCkge1xuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfSwgX3JlZjtcbiAgfSAvLyBXaGVuIGEgc3RvcmUgaXMgY3JlYXRlZCwgYW4gXCJJTklUXCIgYWN0aW9uIGlzIGRpc3BhdGNoZWQgc28gdGhhdCBldmVyeVxuICAvLyByZWR1Y2VyIHJldHVybnMgdGhlaXIgaW5pdGlhbCBzdGF0ZS4gVGhpcyBlZmZlY3RpdmVseSBwb3B1bGF0ZXNcbiAgLy8gdGhlIGluaXRpYWwgc3RhdGUgdHJlZS5cblxuXG4gIGRpc3BhdGNoKHtcbiAgICB0eXBlOiBBY3Rpb25UeXBlcy5JTklUXG4gIH0pO1xuICByZXR1cm4gX3JlZjIgPSB7XG4gICAgZGlzcGF0Y2g6IGRpc3BhdGNoLFxuICAgIHN1YnNjcmliZTogc3Vic2NyaWJlLFxuICAgIGdldFN0YXRlOiBnZXRTdGF0ZSxcbiAgICByZXBsYWNlUmVkdWNlcjogcmVwbGFjZVJlZHVjZXJcbiAgfSwgX3JlZjJbJCRvYnNlcnZhYmxlXSA9IG9ic2VydmFibGUsIF9yZWYyO1xufVxuXG4vKipcbiAqIFByaW50cyBhIHdhcm5pbmcgaW4gdGhlIGNvbnNvbGUgaWYgaXQgZXhpc3RzLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlIFRoZSB3YXJuaW5nIG1lc3NhZ2UuXG4gKiBAcmV0dXJucyB7dm9pZH1cbiAqL1xuZnVuY3Rpb24gd2FybmluZyhtZXNzYWdlKSB7XG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLWNvbnNvbGUgKi9cbiAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiB0eXBlb2YgY29uc29sZS5lcnJvciA9PT0gJ2Z1bmN0aW9uJykge1xuICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gIH1cbiAgLyogZXNsaW50LWVuYWJsZSBuby1jb25zb2xlICovXG5cblxuICB0cnkge1xuICAgIC8vIFRoaXMgZXJyb3Igd2FzIHRocm93biBhcyBhIGNvbnZlbmllbmNlIHNvIHRoYXQgaWYgeW91IGVuYWJsZVxuICAgIC8vIFwiYnJlYWsgb24gYWxsIGV4Y2VwdGlvbnNcIiBpbiB5b3VyIGNvbnNvbGUsXG4gICAgLy8gaXQgd291bGQgcGF1c2UgdGhlIGV4ZWN1dGlvbiBhdCB0aGlzIGxpbmUuXG4gICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICB9IGNhdGNoIChlKSB7fSAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWVtcHR5XG5cbn1cblxuZnVuY3Rpb24gZ2V0VW5kZWZpbmVkU3RhdGVFcnJvck1lc3NhZ2Uoa2V5LCBhY3Rpb24pIHtcbiAgdmFyIGFjdGlvblR5cGUgPSBhY3Rpb24gJiYgYWN0aW9uLnR5cGU7XG4gIHZhciBhY3Rpb25EZXNjcmlwdGlvbiA9IGFjdGlvblR5cGUgJiYgXCJhY3Rpb24gXFxcIlwiICsgU3RyaW5nKGFjdGlvblR5cGUpICsgXCJcXFwiXCIgfHwgJ2FuIGFjdGlvbic7XG4gIHJldHVybiBcIkdpdmVuIFwiICsgYWN0aW9uRGVzY3JpcHRpb24gKyBcIiwgcmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkLiBcIiArIFwiVG8gaWdub3JlIGFuIGFjdGlvbiwgeW91IG11c3QgZXhwbGljaXRseSByZXR1cm4gdGhlIHByZXZpb3VzIHN0YXRlLiBcIiArIFwiSWYgeW91IHdhbnQgdGhpcyByZWR1Y2VyIHRvIGhvbGQgbm8gdmFsdWUsIHlvdSBjYW4gcmV0dXJuIG51bGwgaW5zdGVhZCBvZiB1bmRlZmluZWQuXCI7XG59XG5cbmZ1bmN0aW9uIGdldFVuZXhwZWN0ZWRTdGF0ZVNoYXBlV2FybmluZ01lc3NhZ2UoaW5wdXRTdGF0ZSwgcmVkdWNlcnMsIGFjdGlvbiwgdW5leHBlY3RlZEtleUNhY2hlKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGFyZ3VtZW50TmFtZSA9IGFjdGlvbiAmJiBhY3Rpb24udHlwZSA9PT0gQWN0aW9uVHlwZXMuSU5JVCA/ICdwcmVsb2FkZWRTdGF0ZSBhcmd1bWVudCBwYXNzZWQgdG8gY3JlYXRlU3RvcmUnIDogJ3ByZXZpb3VzIHN0YXRlIHJlY2VpdmVkIGJ5IHRoZSByZWR1Y2VyJztcblxuICBpZiAocmVkdWNlcktleXMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuICdTdG9yZSBkb2VzIG5vdCBoYXZlIGEgdmFsaWQgcmVkdWNlci4gTWFrZSBzdXJlIHRoZSBhcmd1bWVudCBwYXNzZWQgJyArICd0byBjb21iaW5lUmVkdWNlcnMgaXMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgcmVkdWNlcnMuJztcbiAgfVxuXG4gIGlmICghaXNQbGFpbk9iamVjdChpbnB1dFN0YXRlKSkge1xuICAgIHJldHVybiBcIlRoZSBcIiArIGFyZ3VtZW50TmFtZSArIFwiIGhhcyB1bmV4cGVjdGVkIHR5cGUgb2YgXFxcIlwiICsge30udG9TdHJpbmcuY2FsbChpbnB1dFN0YXRlKS5tYXRjaCgvXFxzKFthLXp8QS1aXSspLylbMV0gKyBcIlxcXCIuIEV4cGVjdGVkIGFyZ3VtZW50IHRvIGJlIGFuIG9iamVjdCB3aXRoIHRoZSBmb2xsb3dpbmcgXCIgKyAoXCJrZXlzOiBcXFwiXCIgKyByZWR1Y2VyS2V5cy5qb2luKCdcIiwgXCInKSArIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHZhciB1bmV4cGVjdGVkS2V5cyA9IE9iamVjdC5rZXlzKGlucHV0U3RhdGUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuICFyZWR1Y2Vycy5oYXNPd25Qcm9wZXJ0eShrZXkpICYmICF1bmV4cGVjdGVkS2V5Q2FjaGVba2V5XTtcbiAgfSk7XG4gIHVuZXhwZWN0ZWRLZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgIHVuZXhwZWN0ZWRLZXlDYWNoZVtrZXldID0gdHJ1ZTtcbiAgfSk7XG4gIGlmIChhY3Rpb24gJiYgYWN0aW9uLnR5cGUgPT09IEFjdGlvblR5cGVzLlJFUExBQ0UpIHJldHVybjtcblxuICBpZiAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMCkge1xuICAgIHJldHVybiBcIlVuZXhwZWN0ZWQgXCIgKyAodW5leHBlY3RlZEtleXMubGVuZ3RoID4gMSA/ICdrZXlzJyA6ICdrZXknKSArIFwiIFwiICsgKFwiXFxcIlwiICsgdW5leHBlY3RlZEtleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIgZm91bmQgaW4gXCIgKyBhcmd1bWVudE5hbWUgKyBcIi4gXCIpICsgXCJFeHBlY3RlZCB0byBmaW5kIG9uZSBvZiB0aGUga25vd24gcmVkdWNlciBrZXlzIGluc3RlYWQ6IFwiICsgKFwiXFxcIlwiICsgcmVkdWNlcktleXMuam9pbignXCIsIFwiJykgKyBcIlxcXCIuIFVuZXhwZWN0ZWQga2V5cyB3aWxsIGJlIGlnbm9yZWQuXCIpO1xuICB9XG59XG5cbmZ1bmN0aW9uIGFzc2VydFJlZHVjZXJTaGFwZShyZWR1Y2Vycykge1xuICBPYmplY3Qua2V5cyhyZWR1Y2VycykuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgdmFyIHJlZHVjZXIgPSByZWR1Y2Vyc1trZXldO1xuICAgIHZhciBpbml0aWFsU3RhdGUgPSByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuSU5JVFxuICAgIH0pO1xuXG4gICAgaWYgKHR5cGVvZiBpbml0aWFsU3RhdGUgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXCJSZWR1Y2VyIFxcXCJcIiArIGtleSArIFwiXFxcIiByZXR1cm5lZCB1bmRlZmluZWQgZHVyaW5nIGluaXRpYWxpemF0aW9uLiBcIiArIFwiSWYgdGhlIHN0YXRlIHBhc3NlZCB0byB0aGUgcmVkdWNlciBpcyB1bmRlZmluZWQsIHlvdSBtdXN0IFwiICsgXCJleHBsaWNpdGx5IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZS4gVGhlIGluaXRpYWwgc3RhdGUgbWF5IFwiICsgXCJub3QgYmUgdW5kZWZpbmVkLiBJZiB5b3UgZG9uJ3Qgd2FudCB0byBzZXQgYSB2YWx1ZSBmb3IgdGhpcyByZWR1Y2VyLCBcIiArIFwieW91IGNhbiB1c2UgbnVsbCBpbnN0ZWFkIG9mIHVuZGVmaW5lZC5cIik7XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2VyKHVuZGVmaW5lZCwge1xuICAgICAgdHlwZTogQWN0aW9uVHlwZXMuUFJPQkVfVU5LTk9XTl9BQ1RJT04oKVxuICAgIH0pID09PSAndW5kZWZpbmVkJykge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiUmVkdWNlciBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgcmV0dXJuZWQgdW5kZWZpbmVkIHdoZW4gcHJvYmVkIHdpdGggYSByYW5kb20gdHlwZS4gXCIgKyAoXCJEb24ndCB0cnkgdG8gaGFuZGxlIFwiICsgQWN0aW9uVHlwZXMuSU5JVCArIFwiIG9yIG90aGVyIGFjdGlvbnMgaW4gXFxcInJlZHV4LypcXFwiIFwiKSArIFwibmFtZXNwYWNlLiBUaGV5IGFyZSBjb25zaWRlcmVkIHByaXZhdGUuIEluc3RlYWQsIHlvdSBtdXN0IHJldHVybiB0aGUgXCIgKyBcImN1cnJlbnQgc3RhdGUgZm9yIGFueSB1bmtub3duIGFjdGlvbnMsIHVubGVzcyBpdCBpcyB1bmRlZmluZWQsIFwiICsgXCJpbiB3aGljaCBjYXNlIHlvdSBtdXN0IHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZSwgcmVnYXJkbGVzcyBvZiB0aGUgXCIgKyBcImFjdGlvbiB0eXBlLiBUaGUgaW5pdGlhbCBzdGF0ZSBtYXkgbm90IGJlIHVuZGVmaW5lZCwgYnV0IGNhbiBiZSBudWxsLlwiKTtcbiAgICB9XG4gIH0pO1xufVxuLyoqXG4gKiBUdXJucyBhbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBkaWZmZXJlbnQgcmVkdWNlciBmdW5jdGlvbnMsIGludG8gYSBzaW5nbGVcbiAqIHJlZHVjZXIgZnVuY3Rpb24uIEl0IHdpbGwgY2FsbCBldmVyeSBjaGlsZCByZWR1Y2VyLCBhbmQgZ2F0aGVyIHRoZWlyIHJlc3VsdHNcbiAqIGludG8gYSBzaW5nbGUgc3RhdGUgb2JqZWN0LCB3aG9zZSBrZXlzIGNvcnJlc3BvbmQgdG8gdGhlIGtleXMgb2YgdGhlIHBhc3NlZFxuICogcmVkdWNlciBmdW5jdGlvbnMuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHJlZHVjZXJzIEFuIG9iamVjdCB3aG9zZSB2YWx1ZXMgY29ycmVzcG9uZCB0byBkaWZmZXJlbnRcbiAqIHJlZHVjZXIgZnVuY3Rpb25zIHRoYXQgbmVlZCB0byBiZSBjb21iaW5lZCBpbnRvIG9uZS4gT25lIGhhbmR5IHdheSB0byBvYnRhaW5cbiAqIGl0IGlzIHRvIHVzZSBFUzYgYGltcG9ydCAqIGFzIHJlZHVjZXJzYCBzeW50YXguIFRoZSByZWR1Y2VycyBtYXkgbmV2ZXIgcmV0dXJuXG4gKiB1bmRlZmluZWQgZm9yIGFueSBhY3Rpb24uIEluc3RlYWQsIHRoZXkgc2hvdWxkIHJldHVybiB0aGVpciBpbml0aWFsIHN0YXRlXG4gKiBpZiB0aGUgc3RhdGUgcGFzc2VkIHRvIHRoZW0gd2FzIHVuZGVmaW5lZCwgYW5kIHRoZSBjdXJyZW50IHN0YXRlIGZvciBhbnlcbiAqIHVucmVjb2duaXplZCBhY3Rpb24uXG4gKlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHJlZHVjZXIgZnVuY3Rpb24gdGhhdCBpbnZva2VzIGV2ZXJ5IHJlZHVjZXIgaW5zaWRlIHRoZVxuICogcGFzc2VkIG9iamVjdCwgYW5kIGJ1aWxkcyBhIHN0YXRlIG9iamVjdCB3aXRoIHRoZSBzYW1lIHNoYXBlLlxuICovXG5cblxuZnVuY3Rpb24gY29tYmluZVJlZHVjZXJzKHJlZHVjZXJzKSB7XG4gIHZhciByZWR1Y2VyS2V5cyA9IE9iamVjdC5rZXlzKHJlZHVjZXJzKTtcbiAgdmFyIGZpbmFsUmVkdWNlcnMgPSB7fTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHJlZHVjZXJLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGtleSA9IHJlZHVjZXJLZXlzW2ldO1xuXG4gICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgIGlmICh0eXBlb2YgcmVkdWNlcnNba2V5XSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgd2FybmluZyhcIk5vIHJlZHVjZXIgcHJvdmlkZWQgZm9yIGtleSBcXFwiXCIgKyBrZXkgKyBcIlxcXCJcIik7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiByZWR1Y2Vyc1trZXldID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBmaW5hbFJlZHVjZXJzW2tleV0gPSByZWR1Y2Vyc1trZXldO1xuICAgIH1cbiAgfVxuXG4gIHZhciBmaW5hbFJlZHVjZXJLZXlzID0gT2JqZWN0LmtleXMoZmluYWxSZWR1Y2Vycyk7IC8vIFRoaXMgaXMgdXNlZCB0byBtYWtlIHN1cmUgd2UgZG9uJ3Qgd2FybiBhYm91dCB0aGUgc2FtZVxuICAvLyBrZXlzIG11bHRpcGxlIHRpbWVzLlxuXG4gIHZhciB1bmV4cGVjdGVkS2V5Q2FjaGU7XG5cbiAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICB1bmV4cGVjdGVkS2V5Q2FjaGUgPSB7fTtcbiAgfVxuXG4gIHZhciBzaGFwZUFzc2VydGlvbkVycm9yO1xuXG4gIHRyeSB7XG4gICAgYXNzZXJ0UmVkdWNlclNoYXBlKGZpbmFsUmVkdWNlcnMpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgc2hhcGVBc3NlcnRpb25FcnJvciA9IGU7XG4gIH1cblxuICByZXR1cm4gZnVuY3Rpb24gY29tYmluYXRpb24oc3RhdGUsIGFjdGlvbikge1xuICAgIGlmIChzdGF0ZSA9PT0gdm9pZCAwKSB7XG4gICAgICBzdGF0ZSA9IHt9O1xuICAgIH1cblxuICAgIGlmIChzaGFwZUFzc2VydGlvbkVycm9yKSB7XG4gICAgICB0aHJvdyBzaGFwZUFzc2VydGlvbkVycm9yO1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICB2YXIgd2FybmluZ01lc3NhZ2UgPSBnZXRVbmV4cGVjdGVkU3RhdGVTaGFwZVdhcm5pbmdNZXNzYWdlKHN0YXRlLCBmaW5hbFJlZHVjZXJzLCBhY3Rpb24sIHVuZXhwZWN0ZWRLZXlDYWNoZSk7XG5cbiAgICAgIGlmICh3YXJuaW5nTWVzc2FnZSkge1xuICAgICAgICB3YXJuaW5nKHdhcm5pbmdNZXNzYWdlKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgaGFzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBuZXh0U3RhdGUgPSB7fTtcblxuICAgIGZvciAodmFyIF9pID0gMDsgX2kgPCBmaW5hbFJlZHVjZXJLZXlzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9rZXkgPSBmaW5hbFJlZHVjZXJLZXlzW19pXTtcbiAgICAgIHZhciByZWR1Y2VyID0gZmluYWxSZWR1Y2Vyc1tfa2V5XTtcbiAgICAgIHZhciBwcmV2aW91c1N0YXRlRm9yS2V5ID0gc3RhdGVbX2tleV07XG4gICAgICB2YXIgbmV4dFN0YXRlRm9yS2V5ID0gcmVkdWNlcihwcmV2aW91c1N0YXRlRm9yS2V5LCBhY3Rpb24pO1xuXG4gICAgICBpZiAodHlwZW9mIG5leHRTdGF0ZUZvcktleSA9PT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgdmFyIGVycm9yTWVzc2FnZSA9IGdldFVuZGVmaW5lZFN0YXRlRXJyb3JNZXNzYWdlKF9rZXksIGFjdGlvbik7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihlcnJvck1lc3NhZ2UpO1xuICAgICAgfVxuXG4gICAgICBuZXh0U3RhdGVbX2tleV0gPSBuZXh0U3RhdGVGb3JLZXk7XG4gICAgICBoYXNDaGFuZ2VkID0gaGFzQ2hhbmdlZCB8fCBuZXh0U3RhdGVGb3JLZXkgIT09IHByZXZpb3VzU3RhdGVGb3JLZXk7XG4gICAgfVxuXG4gICAgaGFzQ2hhbmdlZCA9IGhhc0NoYW5nZWQgfHwgZmluYWxSZWR1Y2VyS2V5cy5sZW5ndGggIT09IE9iamVjdC5rZXlzKHN0YXRlKS5sZW5ndGg7XG4gICAgcmV0dXJuIGhhc0NoYW5nZWQgPyBuZXh0U3RhdGUgOiBzdGF0ZTtcbiAgfTtcbn1cblxuZnVuY3Rpb24gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvciwgZGlzcGF0Y2gpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gZGlzcGF0Y2goYWN0aW9uQ3JlYXRvci5hcHBseSh0aGlzLCBhcmd1bWVudHMpKTtcbiAgfTtcbn1cbi8qKlxuICogVHVybnMgYW4gb2JqZWN0IHdob3NlIHZhbHVlcyBhcmUgYWN0aW9uIGNyZWF0b3JzLCBpbnRvIGFuIG9iamVjdCB3aXRoIHRoZVxuICogc2FtZSBrZXlzLCBidXQgd2l0aCBldmVyeSBmdW5jdGlvbiB3cmFwcGVkIGludG8gYSBgZGlzcGF0Y2hgIGNhbGwgc28gdGhleVxuICogbWF5IGJlIGludm9rZWQgZGlyZWN0bHkuIFRoaXMgaXMganVzdCBhIGNvbnZlbmllbmNlIG1ldGhvZCwgYXMgeW91IGNhbiBjYWxsXG4gKiBgc3RvcmUuZGlzcGF0Y2goTXlBY3Rpb25DcmVhdG9ycy5kb1NvbWV0aGluZygpKWAgeW91cnNlbGYganVzdCBmaW5lLlxuICpcbiAqIEZvciBjb252ZW5pZW5jZSwgeW91IGNhbiBhbHNvIHBhc3MgYW4gYWN0aW9uIGNyZWF0b3IgYXMgdGhlIGZpcnN0IGFyZ3VtZW50LFxuICogYW5kIGdldCBhIGRpc3BhdGNoIHdyYXBwZWQgZnVuY3Rpb24gaW4gcmV0dXJuLlxuICpcbiAqIEBwYXJhbSB7RnVuY3Rpb258T2JqZWN0fSBhY3Rpb25DcmVhdG9ycyBBbiBvYmplY3Qgd2hvc2UgdmFsdWVzIGFyZSBhY3Rpb25cbiAqIGNyZWF0b3IgZnVuY3Rpb25zLiBPbmUgaGFuZHkgd2F5IHRvIG9idGFpbiBpdCBpcyB0byB1c2UgRVM2IGBpbXBvcnQgKiBhc2BcbiAqIHN5bnRheC4gWW91IG1heSBhbHNvIHBhc3MgYSBzaW5nbGUgZnVuY3Rpb24uXG4gKlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2ggVGhlIGBkaXNwYXRjaGAgZnVuY3Rpb24gYXZhaWxhYmxlIG9uIHlvdXIgUmVkdXhcbiAqIHN0b3JlLlxuICpcbiAqIEByZXR1cm5zIHtGdW5jdGlvbnxPYmplY3R9IFRoZSBvYmplY3QgbWltaWNraW5nIHRoZSBvcmlnaW5hbCBvYmplY3QsIGJ1dCB3aXRoXG4gKiBldmVyeSBhY3Rpb24gY3JlYXRvciB3cmFwcGVkIGludG8gdGhlIGBkaXNwYXRjaGAgY2FsbC4gSWYgeW91IHBhc3NlZCBhXG4gKiBmdW5jdGlvbiBhcyBgYWN0aW9uQ3JlYXRvcnNgLCB0aGUgcmV0dXJuIHZhbHVlIHdpbGwgYWxzbyBiZSBhIHNpbmdsZVxuICogZnVuY3Rpb24uXG4gKi9cblxuXG5mdW5jdGlvbiBiaW5kQWN0aW9uQ3JlYXRvcnMoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKSB7XG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgPT09ICdmdW5jdGlvbicpIHtcbiAgICByZXR1cm4gYmluZEFjdGlvbkNyZWF0b3IoYWN0aW9uQ3JlYXRvcnMsIGRpc3BhdGNoKTtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYWN0aW9uQ3JlYXRvcnMgIT09ICdvYmplY3QnIHx8IGFjdGlvbkNyZWF0b3JzID09PSBudWxsKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiYmluZEFjdGlvbkNyZWF0b3JzIGV4cGVjdGVkIGFuIG9iamVjdCBvciBhIGZ1bmN0aW9uLCBpbnN0ZWFkIHJlY2VpdmVkIFwiICsgKGFjdGlvbkNyZWF0b3JzID09PSBudWxsID8gJ251bGwnIDogdHlwZW9mIGFjdGlvbkNyZWF0b3JzKSArIFwiLiBcIiArIFwiRGlkIHlvdSB3cml0ZSBcXFwiaW1wb3J0IEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiIGluc3RlYWQgb2YgXFxcImltcG9ydCAqIGFzIEFjdGlvbkNyZWF0b3JzIGZyb21cXFwiP1wiKTtcbiAgfVxuXG4gIHZhciBib3VuZEFjdGlvbkNyZWF0b3JzID0ge307XG5cbiAgZm9yICh2YXIga2V5IGluIGFjdGlvbkNyZWF0b3JzKSB7XG4gICAgdmFyIGFjdGlvbkNyZWF0b3IgPSBhY3Rpb25DcmVhdG9yc1trZXldO1xuXG4gICAgaWYgKHR5cGVvZiBhY3Rpb25DcmVhdG9yID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICBib3VuZEFjdGlvbkNyZWF0b3JzW2tleV0gPSBiaW5kQWN0aW9uQ3JlYXRvcihhY3Rpb25DcmVhdG9yLCBkaXNwYXRjaCk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGJvdW5kQWN0aW9uQ3JlYXRvcnM7XG59XG5cbmZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgdmFsdWUpIHtcbiAgaWYgKGtleSBpbiBvYmopIHtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHtcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgICB3cml0YWJsZTogdHJ1ZVxuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIG9ialtrZXldID0gdmFsdWU7XG4gIH1cblxuICByZXR1cm4gb2JqO1xufVxuXG5mdW5jdGlvbiBvd25LZXlzKG9iamVjdCwgZW51bWVyYWJsZU9ubHkpIHtcbiAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmplY3QpO1xuXG4gIGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7XG4gICAga2V5cy5wdXNoLmFwcGx5KGtleXMsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMob2JqZWN0KSk7XG4gIH1cblxuICBpZiAoZW51bWVyYWJsZU9ubHkpIGtleXMgPSBrZXlzLmZpbHRlcihmdW5jdGlvbiAoc3ltKSB7XG4gICAgcmV0dXJuIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3Iob2JqZWN0LCBzeW0pLmVudW1lcmFibGU7XG4gIH0pO1xuICByZXR1cm4ga2V5cztcbn1cblxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIodGFyZ2V0KSB7XG4gIGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXSAhPSBudWxsID8gYXJndW1lbnRzW2ldIDoge307XG5cbiAgICBpZiAoaSAlIDIpIHtcbiAgICAgIG93bktleXMoc291cmNlLCB0cnVlKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7XG4gICAgICB9KTtcbiAgICB9IGVsc2UgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBvd25LZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRhcmdldDtcbn1cblxuLyoqXG4gKiBDb21wb3NlcyBzaW5nbGUtYXJndW1lbnQgZnVuY3Rpb25zIGZyb20gcmlnaHQgdG8gbGVmdC4gVGhlIHJpZ2h0bW9zdFxuICogZnVuY3Rpb24gY2FuIHRha2UgbXVsdGlwbGUgYXJndW1lbnRzIGFzIGl0IHByb3ZpZGVzIHRoZSBzaWduYXR1cmUgZm9yXG4gKiB0aGUgcmVzdWx0aW5nIGNvbXBvc2l0ZSBmdW5jdGlvbi5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBmdW5jcyBUaGUgZnVuY3Rpb25zIHRvIGNvbXBvc2UuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgZnVuY3Rpb24gb2J0YWluZWQgYnkgY29tcG9zaW5nIHRoZSBhcmd1bWVudCBmdW5jdGlvbnNcbiAqIGZyb20gcmlnaHQgdG8gbGVmdC4gRm9yIGV4YW1wbGUsIGNvbXBvc2UoZiwgZywgaCkgaXMgaWRlbnRpY2FsIHRvIGRvaW5nXG4gKiAoLi4uYXJncykgPT4gZihnKGgoLi4uYXJncykpKS5cbiAqL1xuZnVuY3Rpb24gY29tcG9zZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIGZ1bmNzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIGZ1bmNzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgaWYgKGZ1bmNzLmxlbmd0aCA9PT0gMCkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoYXJnKSB7XG4gICAgICByZXR1cm4gYXJnO1xuICAgIH07XG4gIH1cblxuICBpZiAoZnVuY3MubGVuZ3RoID09PSAxKSB7XG4gICAgcmV0dXJuIGZ1bmNzWzBdO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmNzLnJlZHVjZShmdW5jdGlvbiAoYSwgYikge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gYShiLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKSk7XG4gICAgfTtcbiAgfSk7XG59XG5cbi8qKlxuICogQ3JlYXRlcyBhIHN0b3JlIGVuaGFuY2VyIHRoYXQgYXBwbGllcyBtaWRkbGV3YXJlIHRvIHRoZSBkaXNwYXRjaCBtZXRob2RcbiAqIG9mIHRoZSBSZWR1eCBzdG9yZS4gVGhpcyBpcyBoYW5keSBmb3IgYSB2YXJpZXR5IG9mIHRhc2tzLCBzdWNoIGFzIGV4cHJlc3NpbmdcbiAqIGFzeW5jaHJvbm91cyBhY3Rpb25zIGluIGEgY29uY2lzZSBtYW5uZXIsIG9yIGxvZ2dpbmcgZXZlcnkgYWN0aW9uIHBheWxvYWQuXG4gKlxuICogU2VlIGByZWR1eC10aHVua2AgcGFja2FnZSBhcyBhbiBleGFtcGxlIG9mIHRoZSBSZWR1eCBtaWRkbGV3YXJlLlxuICpcbiAqIEJlY2F1c2UgbWlkZGxld2FyZSBpcyBwb3RlbnRpYWxseSBhc3luY2hyb25vdXMsIHRoaXMgc2hvdWxkIGJlIHRoZSBmaXJzdFxuICogc3RvcmUgZW5oYW5jZXIgaW4gdGhlIGNvbXBvc2l0aW9uIGNoYWluLlxuICpcbiAqIE5vdGUgdGhhdCBlYWNoIG1pZGRsZXdhcmUgd2lsbCBiZSBnaXZlbiB0aGUgYGRpc3BhdGNoYCBhbmQgYGdldFN0YXRlYCBmdW5jdGlvbnNcbiAqIGFzIG5hbWVkIGFyZ3VtZW50cy5cbiAqXG4gKiBAcGFyYW0gey4uLkZ1bmN0aW9ufSBtaWRkbGV3YXJlcyBUaGUgbWlkZGxld2FyZSBjaGFpbiB0byBiZSBhcHBsaWVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIHN0b3JlIGVuaGFuY2VyIGFwcGx5aW5nIHRoZSBtaWRkbGV3YXJlLlxuICovXG5cbmZ1bmN0aW9uIGFwcGx5TWlkZGxld2FyZSgpIHtcbiAgZm9yICh2YXIgX2xlbiA9IGFyZ3VtZW50cy5sZW5ndGgsIG1pZGRsZXdhcmVzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIG1pZGRsZXdhcmVzW19rZXldID0gYXJndW1lbnRzW19rZXldO1xuICB9XG5cbiAgcmV0dXJuIGZ1bmN0aW9uIChjcmVhdGVTdG9yZSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICB2YXIgc3RvcmUgPSBjcmVhdGVTdG9yZS5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG5cbiAgICAgIHZhciBfZGlzcGF0Y2ggPSBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdEaXNwYXRjaGluZyB3aGlsZSBjb25zdHJ1Y3RpbmcgeW91ciBtaWRkbGV3YXJlIGlzIG5vdCBhbGxvd2VkLiAnICsgJ090aGVyIG1pZGRsZXdhcmUgd291bGQgbm90IGJlIGFwcGxpZWQgdG8gdGhpcyBkaXNwYXRjaC4nKTtcbiAgICAgIH07XG5cbiAgICAgIHZhciBtaWRkbGV3YXJlQVBJID0ge1xuICAgICAgICBnZXRTdGF0ZTogc3RvcmUuZ2V0U3RhdGUsXG4gICAgICAgIGRpc3BhdGNoOiBmdW5jdGlvbiBkaXNwYXRjaCgpIHtcbiAgICAgICAgICByZXR1cm4gX2Rpc3BhdGNoLmFwcGx5KHZvaWQgMCwgYXJndW1lbnRzKTtcbiAgICAgICAgfVxuICAgICAgfTtcbiAgICAgIHZhciBjaGFpbiA9IG1pZGRsZXdhcmVzLm1hcChmdW5jdGlvbiAobWlkZGxld2FyZSkge1xuICAgICAgICByZXR1cm4gbWlkZGxld2FyZShtaWRkbGV3YXJlQVBJKTtcbiAgICAgIH0pO1xuICAgICAgX2Rpc3BhdGNoID0gY29tcG9zZS5hcHBseSh2b2lkIDAsIGNoYWluKShzdG9yZS5kaXNwYXRjaCk7XG4gICAgICByZXR1cm4gX29iamVjdFNwcmVhZDIoe30sIHN0b3JlLCB7XG4gICAgICAgIGRpc3BhdGNoOiBfZGlzcGF0Y2hcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qXG4gKiBUaGlzIGlzIGEgZHVtbXkgZnVuY3Rpb24gdG8gY2hlY2sgaWYgdGhlIGZ1bmN0aW9uIG5hbWUgaGFzIGJlZW4gYWx0ZXJlZCBieSBtaW5pZmljYXRpb24uXG4gKiBJZiB0aGUgZnVuY3Rpb24gaGFzIGJlZW4gbWluaWZpZWQgYW5kIE5PREVfRU5WICE9PSAncHJvZHVjdGlvbicsIHdhcm4gdGhlIHVzZXIuXG4gKi9cblxuZnVuY3Rpb24gaXNDcnVzaGVkKCkge31cblxuaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicgJiYgdHlwZW9mIGlzQ3J1c2hlZC5uYW1lID09PSAnc3RyaW5nJyAmJiBpc0NydXNoZWQubmFtZSAhPT0gJ2lzQ3J1c2hlZCcpIHtcbiAgd2FybmluZygnWW91IGFyZSBjdXJyZW50bHkgdXNpbmcgbWluaWZpZWQgY29kZSBvdXRzaWRlIG9mIE5PREVfRU5WID09PSBcInByb2R1Y3Rpb25cIi4gJyArICdUaGlzIG1lYW5zIHRoYXQgeW91IGFyZSBydW5uaW5nIGEgc2xvd2VyIGRldmVsb3BtZW50IGJ1aWxkIG9mIFJlZHV4LiAnICsgJ1lvdSBjYW4gdXNlIGxvb3NlLWVudmlmeSAoaHR0cHM6Ly9naXRodWIuY29tL3plcnRvc2gvbG9vc2UtZW52aWZ5KSBmb3IgYnJvd3NlcmlmeSAnICsgJ29yIHNldHRpbmcgbW9kZSB0byBwcm9kdWN0aW9uIGluIHdlYnBhY2sgKGh0dHBzOi8vd2VicGFjay5qcy5vcmcvY29uY2VwdHMvbW9kZS8pICcgKyAndG8gZW5zdXJlIHlvdSBoYXZlIHRoZSBjb3JyZWN0IGNvZGUgZm9yIHlvdXIgcHJvZHVjdGlvbiBidWlsZC4nKTtcbn1cblxuZXhwb3J0IHsgQWN0aW9uVHlwZXMgYXMgX19ET19OT1RfVVNFX19BY3Rpb25UeXBlcywgYXBwbHlNaWRkbGV3YXJlLCBiaW5kQWN0aW9uQ3JlYXRvcnMsIGNvbWJpbmVSZWR1Y2VycywgY29tcG9zZSwgY3JlYXRlU3RvcmUgfTtcbiIsImltcG9ydCB7IHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG4vKipcclxuICogQSBob29rIHRvIGFjY2VzcyB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGAuIFRoaXMgaXMgYSBsb3ctbGV2ZWxcclxuICogaG9vayB0aGF0IHlvdSBzaG91bGQgdXN1YWxseSBub3QgbmVlZCB0byBjYWxsIGRpcmVjdGx5LlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgdmFsdWUgb2YgdGhlIGBSZWFjdFJlZHV4Q29udGV4dGBcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgfSBmcm9tICdyZWFjdC1yZWR1eCdcclxuICpcclxuICogZXhwb3J0IGNvbnN0IENvdW50ZXJDb21wb25lbnQgPSAoeyB2YWx1ZSB9KSA9PiB7XHJcbiAqICAgY29uc3QgeyBzdG9yZSB9ID0gdXNlUmVkdXhDb250ZXh0KClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZVJlZHV4Q29udGV4dCgpIHtcbiAgdmFyIGNvbnRleHRWYWx1ZSA9IHVzZUNvbnRleHQoUmVhY3RSZWR1eENvbnRleHQpO1xuXG4gIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFjb250ZXh0VmFsdWUpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ2NvdWxkIG5vdCBmaW5kIHJlYWN0LXJlZHV4IGNvbnRleHQgdmFsdWU7IHBsZWFzZSBlbnN1cmUgdGhlIGNvbXBvbmVudCBpcyB3cmFwcGVkIGluIGEgPFByb3ZpZGVyPicpO1xuICB9XG5cbiAgcmV0dXJuIGNvbnRleHRWYWx1ZTtcbn0iLCJpbXBvcnQgeyB1c2VDb250ZXh0IH0gZnJvbSAncmVhY3QnO1xuaW1wb3J0IHsgUmVhY3RSZWR1eENvbnRleHQgfSBmcm9tICcuLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IHsgdXNlUmVkdXhDb250ZXh0IGFzIHVzZURlZmF1bHRSZWR1eENvbnRleHQgfSBmcm9tICcuL3VzZVJlZHV4Q29udGV4dCc7XG4vKipcclxuICogSG9vayBmYWN0b3J5LCB3aGljaCBjcmVhdGVzIGEgYHVzZVN0b3JlYCBob29rIGJvdW5kIHRvIGEgZ2l2ZW4gY29udGV4dC5cclxuICpcclxuICogQHBhcmFtIHtSZWFjdC5Db250ZXh0fSBbY29udGV4dD1SZWFjdFJlZHV4Q29udGV4dF0gQ29udGV4dCBwYXNzZWQgdG8geW91ciBgPFByb3ZpZGVyPmAuXHJcbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gQSBgdXNlU3RvcmVgIGhvb2sgYm91bmQgdG8gdGhlIHNwZWNpZmllZCBjb250ZXh0LlxyXG4gKi9cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZVN0b3JlSG9vayhjb250ZXh0KSB7XG4gIGlmIChjb250ZXh0ID09PSB2b2lkIDApIHtcbiAgICBjb250ZXh0ID0gUmVhY3RSZWR1eENvbnRleHQ7XG4gIH1cblxuICB2YXIgdXNlUmVkdXhDb250ZXh0ID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0UmVkdXhDb250ZXh0IDogZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiB1c2VDb250ZXh0KGNvbnRleHQpO1xuICB9O1xuICByZXR1cm4gZnVuY3Rpb24gdXNlU3RvcmUoKSB7XG4gICAgdmFyIF91c2VSZWR1eENvbnRleHQgPSB1c2VSZWR1eENvbnRleHQoKSxcbiAgICAgICAgc3RvcmUgPSBfdXNlUmVkdXhDb250ZXh0LnN0b3JlO1xuXG4gICAgcmV0dXJuIHN0b3JlO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fSB0aGUgcmVkdXggc3RvcmVcclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xyXG4gKiBpbXBvcnQgeyB1c2VTdG9yZSB9IGZyb20gJ3JlYWN0LXJlZHV4J1xyXG4gKlxyXG4gKiBleHBvcnQgY29uc3QgRXhhbXBsZUNvbXBvbmVudCA9ICgpID0+IHtcclxuICogICBjb25zdCBzdG9yZSA9IHVzZVN0b3JlKClcclxuICogICByZXR1cm4gPGRpdj57c3RvcmUuZ2V0U3RhdGUoKX08L2Rpdj5cclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VTdG9yZSA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVTdG9yZUhvb2soKTsiLCJpbXBvcnQgeyBSZWFjdFJlZHV4Q29udGV4dCB9IGZyb20gJy4uL2NvbXBvbmVudHMvQ29udGV4dCc7XG5pbXBvcnQgeyB1c2VTdG9yZSBhcyB1c2VEZWZhdWx0U3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vdXNlU3RvcmUnO1xuLyoqXHJcbiAqIEhvb2sgZmFjdG9yeSwgd2hpY2ggY3JlYXRlcyBhIGB1c2VEaXNwYXRjaGAgaG9vayBib3VuZCB0byBhIGdpdmVuIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7UmVhY3QuQ29udGV4dH0gW2NvbnRleHQ9UmVhY3RSZWR1eENvbnRleHRdIENvbnRleHQgcGFzc2VkIHRvIHlvdXIgYDxQcm92aWRlcj5gLlxyXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IEEgYHVzZURpc3BhdGNoYCBob29rIGJvdW5kIHRvIHRoZSBzcGVjaWZpZWQgY29udGV4dC5cclxuICovXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVEaXNwYXRjaEhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVN0b3JlID0gY29udGV4dCA9PT0gUmVhY3RSZWR1eENvbnRleHQgPyB1c2VEZWZhdWx0U3RvcmUgOiBjcmVhdGVTdG9yZUhvb2soY29udGV4dCk7XG4gIHJldHVybiBmdW5jdGlvbiB1c2VEaXNwYXRjaCgpIHtcbiAgICB2YXIgc3RvcmUgPSB1c2VTdG9yZSgpO1xuICAgIHJldHVybiBzdG9yZS5kaXNwYXRjaDtcbiAgfTtcbn1cbi8qKlxyXG4gKiBBIGhvb2sgdG8gYWNjZXNzIHRoZSByZWR1eCBgZGlzcGF0Y2hgIGZ1bmN0aW9uLlxyXG4gKlxyXG4gKiBAcmV0dXJucyB7YW55fGZ1bmN0aW9ufSByZWR1eCBzdG9yZSdzIGBkaXNwYXRjaGAgZnVuY3Rpb25cclxuICpcclxuICogQGV4YW1wbGVcclxuICpcclxuICogaW1wb3J0IFJlYWN0LCB7IHVzZUNhbGxiYWNrIH0gZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZURpc3BhdGNoIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKHsgdmFsdWUgfSkgPT4ge1xyXG4gKiAgIGNvbnN0IGRpc3BhdGNoID0gdXNlRGlzcGF0Y2goKVxyXG4gKiAgIGNvbnN0IGluY3JlYXNlQ291bnRlciA9IHVzZUNhbGxiYWNrKCgpID0+IGRpc3BhdGNoKHsgdHlwZTogJ2luY3JlYXNlLWNvdW50ZXInIH0pLCBbXSlcclxuICogICByZXR1cm4gKFxyXG4gKiAgICAgPGRpdj5cclxuICogICAgICAgPHNwYW4+e3ZhbHVlfTwvc3Bhbj5cclxuICogICAgICAgPGJ1dHRvbiBvbkNsaWNrPXtpbmNyZWFzZUNvdW50ZXJ9PkluY3JlYXNlIGNvdW50ZXI8L2J1dHRvbj5cclxuICogICAgIDwvZGl2PlxyXG4gKiAgIClcclxuICogfVxyXG4gKi9cblxuZXhwb3J0IHZhciB1c2VEaXNwYXRjaCA9XG4vKiNfX1BVUkVfXyovXG5jcmVhdGVEaXNwYXRjaEhvb2soKTsiLCJpbXBvcnQgeyB1c2VSZWR1Y2VyLCB1c2VSZWYsIHVzZU1lbW8sIHVzZUNvbnRleHQgfSBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyB1c2VSZWR1eENvbnRleHQgYXMgdXNlRGVmYXVsdFJlZHV4Q29udGV4dCB9IGZyb20gJy4vdXNlUmVkdXhDb250ZXh0JztcbmltcG9ydCBTdWJzY3JpcHRpb24gZnJvbSAnLi4vdXRpbHMvU3Vic2NyaXB0aW9uJztcbmltcG9ydCB7IHVzZUlzb21vcnBoaWNMYXlvdXRFZmZlY3QgfSBmcm9tICcuLi91dGlscy91c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0JztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi4vY29tcG9uZW50cy9Db250ZXh0JztcblxudmFyIHJlZkVxdWFsaXR5ID0gZnVuY3Rpb24gcmVmRXF1YWxpdHkoYSwgYikge1xuICByZXR1cm4gYSA9PT0gYjtcbn07XG5cbmZ1bmN0aW9uIHVzZVNlbGVjdG9yV2l0aFN0b3JlQW5kU3Vic2NyaXB0aW9uKHNlbGVjdG9yLCBlcXVhbGl0eUZuLCBzdG9yZSwgY29udGV4dFN1Yikge1xuICB2YXIgX3VzZVJlZHVjZXIgPSB1c2VSZWR1Y2VyKGZ1bmN0aW9uIChzKSB7XG4gICAgcmV0dXJuIHMgKyAxO1xuICB9LCAwKSxcbiAgICAgIGZvcmNlUmVuZGVyID0gX3VzZVJlZHVjZXJbMV07XG5cbiAgdmFyIHN1YnNjcmlwdGlvbiA9IHVzZU1lbW8oZnVuY3Rpb24gKCkge1xuICAgIHJldHVybiBuZXcgU3Vic2NyaXB0aW9uKHN0b3JlLCBjb250ZXh0U3ViKTtcbiAgfSwgW3N0b3JlLCBjb250ZXh0U3ViXSk7XG4gIHZhciBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yID0gdXNlUmVmKCk7XG4gIHZhciBsYXRlc3RTZWxlY3RvciA9IHVzZVJlZigpO1xuICB2YXIgbGF0ZXN0U2VsZWN0ZWRTdGF0ZSA9IHVzZVJlZigpO1xuICB2YXIgc2VsZWN0ZWRTdGF0ZTtcblxuICB0cnkge1xuICAgIGlmIChzZWxlY3RvciAhPT0gbGF0ZXN0U2VsZWN0b3IuY3VycmVudCB8fCBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIHNlbGVjdGVkU3RhdGUgPSBzZWxlY3RvcihzdG9yZS5nZXRTdGF0ZSgpKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc2VsZWN0ZWRTdGF0ZSA9IGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudDtcbiAgICB9XG4gIH0gY2F0Y2ggKGVycikge1xuICAgIGlmIChsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQpIHtcbiAgICAgIGVyci5tZXNzYWdlICs9IFwiXFxuVGhlIGVycm9yIG1heSBiZSBjb3JyZWxhdGVkIHdpdGggdGhpcyBwcmV2aW91cyBlcnJvcjpcXG5cIiArIGxhdGVzdFN1YnNjcmlwdGlvbkNhbGxiYWNrRXJyb3IuY3VycmVudC5zdGFjayArIFwiXFxuXFxuXCI7XG4gICAgfVxuXG4gICAgdGhyb3cgZXJyO1xuICB9XG5cbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgbGF0ZXN0U2VsZWN0b3IuY3VycmVudCA9IHNlbGVjdG9yO1xuICAgIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCA9IHNlbGVjdGVkU3RhdGU7XG4gICAgbGF0ZXN0U3Vic2NyaXB0aW9uQ2FsbGJhY2tFcnJvci5jdXJyZW50ID0gdW5kZWZpbmVkO1xuICB9KTtcbiAgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gY2hlY2tGb3JVcGRhdGVzKCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdmFyIG5ld1NlbGVjdGVkU3RhdGUgPSBsYXRlc3RTZWxlY3Rvci5jdXJyZW50KHN0b3JlLmdldFN0YXRlKCkpO1xuXG4gICAgICAgIGlmIChlcXVhbGl0eUZuKG5ld1NlbGVjdGVkU3RhdGUsIGxhdGVzdFNlbGVjdGVkU3RhdGUuY3VycmVudCkpIHtcbiAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cblxuICAgICAgICBsYXRlc3RTZWxlY3RlZFN0YXRlLmN1cnJlbnQgPSBuZXdTZWxlY3RlZFN0YXRlO1xuICAgICAgfSBjYXRjaCAoZXJyKSB7XG4gICAgICAgIC8vIHdlIGlnbm9yZSBhbGwgZXJyb3JzIGhlcmUsIHNpbmNlIHdoZW4gdGhlIGNvbXBvbmVudFxuICAgICAgICAvLyBpcyByZS1yZW5kZXJlZCwgdGhlIHNlbGVjdG9ycyBhcmUgY2FsbGVkIGFnYWluLCBhbmRcbiAgICAgICAgLy8gd2lsbCB0aHJvdyBhZ2FpbiwgaWYgbmVpdGhlciBwcm9wcyBub3Igc3RvcmUgc3RhdGVcbiAgICAgICAgLy8gY2hhbmdlZFxuICAgICAgICBsYXRlc3RTdWJzY3JpcHRpb25DYWxsYmFja0Vycm9yLmN1cnJlbnQgPSBlcnI7XG4gICAgICB9XG5cbiAgICAgIGZvcmNlUmVuZGVyKHt9KTtcbiAgICB9XG5cbiAgICBzdWJzY3JpcHRpb24ub25TdGF0ZUNoYW5nZSA9IGNoZWNrRm9yVXBkYXRlcztcbiAgICBzdWJzY3JpcHRpb24udHJ5U3Vic2NyaWJlKCk7XG4gICAgY2hlY2tGb3JVcGRhdGVzKCk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBzdWJzY3JpcHRpb24udHJ5VW5zdWJzY3JpYmUoKTtcbiAgICB9O1xuICB9LCBbc3RvcmUsIHN1YnNjcmlwdGlvbl0pO1xuICByZXR1cm4gc2VsZWN0ZWRTdGF0ZTtcbn1cbi8qKlxyXG4gKiBIb29rIGZhY3RvcnksIHdoaWNoIGNyZWF0ZXMgYSBgdXNlU2VsZWN0b3JgIGhvb2sgYm91bmQgdG8gYSBnaXZlbiBjb250ZXh0LlxyXG4gKlxyXG4gKiBAcGFyYW0ge1JlYWN0LkNvbnRleHR9IFtjb250ZXh0PVJlYWN0UmVkdXhDb250ZXh0XSBDb250ZXh0IHBhc3NlZCB0byB5b3VyIGA8UHJvdmlkZXI+YC5cclxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGB1c2VTZWxlY3RvcmAgaG9vayBib3VuZCB0byB0aGUgc3BlY2lmaWVkIGNvbnRleHQuXHJcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVTZWxlY3Rvckhvb2soY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IFJlYWN0UmVkdXhDb250ZXh0O1xuICB9XG5cbiAgdmFyIHVzZVJlZHV4Q29udGV4dCA9IGNvbnRleHQgPT09IFJlYWN0UmVkdXhDb250ZXh0ID8gdXNlRGVmYXVsdFJlZHV4Q29udGV4dCA6IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gdXNlQ29udGV4dChjb250ZXh0KTtcbiAgfTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVzZVNlbGVjdG9yKHNlbGVjdG9yLCBlcXVhbGl0eUZuKSB7XG4gICAgaWYgKGVxdWFsaXR5Rm4gPT09IHZvaWQgMCkge1xuICAgICAgZXF1YWxpdHlGbiA9IHJlZkVxdWFsaXR5O1xuICAgIH1cblxuICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nICYmICFzZWxlY3Rvcikge1xuICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWW91IG11c3QgcGFzcyBhIHNlbGVjdG9yIHRvIHVzZVNlbGVjdG9yc1wiKTtcbiAgICB9XG5cbiAgICB2YXIgX3VzZVJlZHV4Q29udGV4dCA9IHVzZVJlZHV4Q29udGV4dCgpLFxuICAgICAgICBzdG9yZSA9IF91c2VSZWR1eENvbnRleHQuc3RvcmUsXG4gICAgICAgIGNvbnRleHRTdWIgPSBfdXNlUmVkdXhDb250ZXh0LnN1YnNjcmlwdGlvbjtcblxuICAgIHJldHVybiB1c2VTZWxlY3RvcldpdGhTdG9yZUFuZFN1YnNjcmlwdGlvbihzZWxlY3RvciwgZXF1YWxpdHlGbiwgc3RvcmUsIGNvbnRleHRTdWIpO1xuICB9O1xufVxuLyoqXHJcbiAqIEEgaG9vayB0byBhY2Nlc3MgdGhlIHJlZHV4IHN0b3JlJ3Mgc3RhdGUuIFRoaXMgaG9vayB0YWtlcyBhIHNlbGVjdG9yIGZ1bmN0aW9uXHJcbiAqIGFzIGFuIGFyZ3VtZW50LiBUaGUgc2VsZWN0b3IgaXMgY2FsbGVkIHdpdGggdGhlIHN0b3JlIHN0YXRlLlxyXG4gKlxyXG4gKiBUaGlzIGhvb2sgdGFrZXMgYW4gb3B0aW9uYWwgZXF1YWxpdHkgY29tcGFyaXNvbiBmdW5jdGlvbiBhcyB0aGUgc2Vjb25kIHBhcmFtZXRlclxyXG4gKiB0aGF0IGFsbG93cyB5b3UgdG8gY3VzdG9taXplIHRoZSB3YXkgdGhlIHNlbGVjdGVkIHN0YXRlIGlzIGNvbXBhcmVkIHRvIGRldGVybWluZVxyXG4gKiB3aGV0aGVyIHRoZSBjb21wb25lbnQgbmVlZHMgdG8gYmUgcmUtcmVuZGVyZWQuXHJcbiAqXHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNlbGVjdG9yIHRoZSBzZWxlY3RvciBmdW5jdGlvblxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9uPX0gZXF1YWxpdHlGbiB0aGUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIHVzZWQgdG8gZGV0ZXJtaW5lIGVxdWFsaXR5XHJcbiAqXHJcbiAqIEByZXR1cm5zIHthbnl9IHRoZSBzZWxlY3RlZCBzdGF0ZVxyXG4gKlxyXG4gKiBAZXhhbXBsZVxyXG4gKlxyXG4gKiBpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXHJcbiAqIGltcG9ydCB7IHVzZVNlbGVjdG9yIH0gZnJvbSAncmVhY3QtcmVkdXgnXHJcbiAqXHJcbiAqIGV4cG9ydCBjb25zdCBDb3VudGVyQ29tcG9uZW50ID0gKCkgPT4ge1xyXG4gKiAgIGNvbnN0IGNvdW50ZXIgPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS5jb3VudGVyKVxyXG4gKiAgIHJldHVybiA8ZGl2Pntjb3VudGVyfTwvZGl2PlxyXG4gKiB9XHJcbiAqL1xuXG5leHBvcnQgdmFyIHVzZVNlbGVjdG9yID1cbi8qI19fUFVSRV9fKi9cbmNyZWF0ZVNlbGVjdG9ySG9vaygpOyIsImltcG9ydCBQcm92aWRlciBmcm9tICcuL2NvbXBvbmVudHMvUHJvdmlkZXInO1xuaW1wb3J0IGNvbm5lY3RBZHZhbmNlZCBmcm9tICcuL2NvbXBvbmVudHMvY29ubmVjdEFkdmFuY2VkJztcbmltcG9ydCB7IFJlYWN0UmVkdXhDb250ZXh0IH0gZnJvbSAnLi9jb21wb25lbnRzL0NvbnRleHQnO1xuaW1wb3J0IGNvbm5lY3QgZnJvbSAnLi9jb25uZWN0L2Nvbm5lY3QnO1xuaW1wb3J0IHsgdXNlRGlzcGF0Y2gsIGNyZWF0ZURpc3BhdGNoSG9vayB9IGZyb20gJy4vaG9va3MvdXNlRGlzcGF0Y2gnO1xuaW1wb3J0IHsgdXNlU2VsZWN0b3IsIGNyZWF0ZVNlbGVjdG9ySG9vayB9IGZyb20gJy4vaG9va3MvdXNlU2VsZWN0b3InO1xuaW1wb3J0IHsgdXNlU3RvcmUsIGNyZWF0ZVN0b3JlSG9vayB9IGZyb20gJy4vaG9va3MvdXNlU3RvcmUnO1xuaW1wb3J0IHsgc2V0QmF0Y2ggfSBmcm9tICcuL3V0aWxzL2JhdGNoJztcbmltcG9ydCB7IHVuc3RhYmxlX2JhdGNoZWRVcGRhdGVzIGFzIGJhdGNoIH0gZnJvbSAnLi91dGlscy9yZWFjdEJhdGNoZWRVcGRhdGVzJztcbmltcG9ydCBzaGFsbG93RXF1YWwgZnJvbSAnLi91dGlscy9zaGFsbG93RXF1YWwnO1xuc2V0QmF0Y2goYmF0Y2gpO1xuZXhwb3J0IHsgUHJvdmlkZXIsIGNvbm5lY3RBZHZhbmNlZCwgUmVhY3RSZWR1eENvbnRleHQsIGNvbm5lY3QsIGJhdGNoLCB1c2VEaXNwYXRjaCwgY3JlYXRlRGlzcGF0Y2hIb29rLCB1c2VTZWxlY3RvciwgY3JlYXRlU2VsZWN0b3JIb29rLCB1c2VTdG9yZSwgY3JlYXRlU3RvcmVIb29rLCBzaGFsbG93RXF1YWwgfTsiLCJpbXBvcnQge2NyZWF0ZVN0b3JlfSBmcm9tIFwicmVkdXhcIjtcbmltcG9ydCB7XG4gICAgc2V0VXNlcixcbiAgICBzZXRBdXRoVG9rZW5TdGF0dXMsXG4gICAgYWRkTm90ZVxufSBmcm9tICcuL3JlZHVjZXJzJ1xuXG5cbmNvbnN0IGluaWNpYWxTdGF0ZSA9IHtcbiAgICB1c2VyOiB7XG4gICAgICAgIG5hbWU6IG51bGwsXG4gICAgICAgIGVtYWlsOiBudWxsLFxuICAgICAgICAvLyDQldGB0YLRjCDQu9C4INCyINCx0YDQsNGD0LfQtdGA0LUg0YLQvtC60LXQvS4g0JXRgdC70LggMSwg0YLQviDQvdC1INC40LfQstC10YHRgtC90L4uXG4gICAgICAgIC8vINCV0YHQu9C4IDIsINGC0L4g0L3QtdGCINC40LvQuCDQvtC9INC90LXQstC10YDQvdGL0LkuINCV0YHQu9C4IDMsINGC0L4g0L/RgNCw0LLQuNC70YzQvdGL0LkuXG4gICAgICAgIGF1dGhUb2tlblN0YXR1czogMFxuICAgIH0sXG4gICAgbm90ZXM6IFtcbiAgICAgICAgLyp7XG4gICAgICAgICAgICB0ZXh0OiAnJyxcbiAgICAgICAgICAgIGltcG9ydGFudDogZmFsc2VcbiAgICAgICAgfSovXG4gICAgXVxufVxuXG5cbmZ1bmN0aW9uIHJlZHVjZXIoc3RhdGUgPSBpbmljaWFsU3RhdGUsIGFjdGlvbikge1xuICAgIHN3aXRjaCAoYWN0aW9uLnR5cGUpIHtcbiAgICAgICAgY2FzZSAnU0VUX1VTRVInOlxuICAgICAgICAgICAgcmV0dXJuIHNldFVzZXIoc3RhdGUsIGFjdGlvbilcbiAgICAgICAgY2FzZSAnU0VUX0FVVEhfVE9LRU5fU1RBVFVTJzpcbiAgICAgICAgICAgIHJldHVybiBzZXRBdXRoVG9rZW5TdGF0dXMoc3RhdGUsIGFjdGlvbilcbiAgICAgICAgY2FzZSAnQUREX05PVEUnOlxuICAgICAgICAgICAgcmV0dXJuIGFkZE5vdGUoc3RhdGUsIGFjdGlvbilcbiAgICAgICAgZGVmYXVsdDpcbiAgICAgICAgICAgIHJldHVybiBzdGF0ZVxuICAgIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgY3JlYXRlU3RvcmUocmVkdWNlcikiLCJcbmV4cG9ydCBmdW5jdGlvbiBzZXRVc2VyKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBjb25zdCBjb3B5U3RhdGUgPSB7Li4uc3RhdGV9XG4gICAgY29uc3QgY29weVVzZXIgPSB7Li4uY29weVN0YXRlLnVzZXJ9XG4gICAgXG4gICAgY29weVVzZXIubmFtZSA9IGFjdGlvbi5uYW1lXG4gICAgY29weVVzZXIuZW1haWwgPSBhY3Rpb24uZW1haWxcbiAgICBcbiAgICBjb3B5U3RhdGUudXNlciA9IGNvcHlVc2VyXG4gICAgXG4gICAgcmV0dXJuIGNvcHlTdGF0ZVxufVxuXG5leHBvcnQgZnVuY3Rpb24gc2V0QXV0aFRva2VuU3RhdHVzKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBjb25zdCBjb3B5U3RhdGUgPSB7Li4uc3RhdGV9XG4gICAgY29uc3QgY29weVVzZXIgPSB7Li4uY29weVN0YXRlLnVzZXJ9XG4gICAgXG4gICAgY29weVVzZXIuYXV0aFRva2VuU3RhdHVzID0gYWN0aW9uLnN0YXR1c1xuICAgIFxuICAgIGNvcHlTdGF0ZS51c2VyID0gY29weVVzZXJcbiAgICBcbiAgICByZXR1cm4gY29weVN0YXRlXG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhZGROb3RlKHN0YXRlLCBhY3Rpb24pIHtcbiAgICBjb25zdCBjb3B5U3RhdGUgPSB7Li4uc3RhdGV9XG4gICAgY29uc3QgY29weU5vdGVzID0gWy4uLmNvcHlTdGF0ZS5ub3Rlc11cbiAgICBcbiAgICBjb25zdCBuZXdOb3RlID0ge1xuICAgICAgICB0ZXh0OiBhY3Rpb24udGV4dCxcbiAgICAgICAgaW1wb3J0YW50OiBmYWxzZVxuICAgIH1cbiAgICBcbiAgICBjb3B5Tm90ZXMudW5zaGlmdChuZXdOb3RlKVxuICAgIFxuICAgIGNvcHlTdGF0ZS5ub3RlcyA9IGNvcHlOb3Rlc1xuICAgIFxuICAgIHJldHVybiBjb3B5U3RhdGVcbn0iLCJmdW5jdGlvbiBpc0Fic29sdXRlKHBhdGhuYW1lKSB7XG4gIHJldHVybiBwYXRobmFtZS5jaGFyQXQoMCkgPT09ICcvJztcbn1cblxuLy8gQWJvdXQgMS41eCBmYXN0ZXIgdGhhbiB0aGUgdHdvLWFyZyB2ZXJzaW9uIG9mIEFycmF5I3NwbGljZSgpXG5mdW5jdGlvbiBzcGxpY2VPbmUobGlzdCwgaW5kZXgpIHtcbiAgZm9yICh2YXIgaSA9IGluZGV4LCBrID0gaSArIDEsIG4gPSBsaXN0Lmxlbmd0aDsgayA8IG47IGkgKz0gMSwgayArPSAxKSB7XG4gICAgbGlzdFtpXSA9IGxpc3Rba107XG4gIH1cblxuICBsaXN0LnBvcCgpO1xufVxuXG4vLyBUaGlzIGltcGxlbWVudGF0aW9uIGlzIGJhc2VkIGhlYXZpbHkgb24gbm9kZSdzIHVybC5wYXJzZVxuZnVuY3Rpb24gcmVzb2x2ZVBhdGhuYW1lKHRvLCBmcm9tKSB7XG4gIGlmIChmcm9tID09PSB1bmRlZmluZWQpIGZyb20gPSAnJztcblxuICB2YXIgdG9QYXJ0cyA9ICh0byAmJiB0by5zcGxpdCgnLycpKSB8fCBbXTtcbiAgdmFyIGZyb21QYXJ0cyA9IChmcm9tICYmIGZyb20uc3BsaXQoJy8nKSkgfHwgW107XG5cbiAgdmFyIGlzVG9BYnMgPSB0byAmJiBpc0Fic29sdXRlKHRvKTtcbiAgdmFyIGlzRnJvbUFicyA9IGZyb20gJiYgaXNBYnNvbHV0ZShmcm9tKTtcbiAgdmFyIG11c3RFbmRBYnMgPSBpc1RvQWJzIHx8IGlzRnJvbUFicztcblxuICBpZiAodG8gJiYgaXNBYnNvbHV0ZSh0bykpIHtcbiAgICAvLyB0byBpcyBhYnNvbHV0ZVxuICAgIGZyb21QYXJ0cyA9IHRvUGFydHM7XG4gIH0gZWxzZSBpZiAodG9QYXJ0cy5sZW5ndGgpIHtcbiAgICAvLyB0byBpcyByZWxhdGl2ZSwgZHJvcCB0aGUgZmlsZW5hbWVcbiAgICBmcm9tUGFydHMucG9wKCk7XG4gICAgZnJvbVBhcnRzID0gZnJvbVBhcnRzLmNvbmNhdCh0b1BhcnRzKTtcbiAgfVxuXG4gIGlmICghZnJvbVBhcnRzLmxlbmd0aCkgcmV0dXJuICcvJztcblxuICB2YXIgaGFzVHJhaWxpbmdTbGFzaDtcbiAgaWYgKGZyb21QYXJ0cy5sZW5ndGgpIHtcbiAgICB2YXIgbGFzdCA9IGZyb21QYXJ0c1tmcm9tUGFydHMubGVuZ3RoIC0gMV07XG4gICAgaGFzVHJhaWxpbmdTbGFzaCA9IGxhc3QgPT09ICcuJyB8fCBsYXN0ID09PSAnLi4nIHx8IGxhc3QgPT09ICcnO1xuICB9IGVsc2Uge1xuICAgIGhhc1RyYWlsaW5nU2xhc2ggPSBmYWxzZTtcbiAgfVxuXG4gIHZhciB1cCA9IDA7XG4gIGZvciAodmFyIGkgPSBmcm9tUGFydHMubGVuZ3RoOyBpID49IDA7IGktLSkge1xuICAgIHZhciBwYXJ0ID0gZnJvbVBhcnRzW2ldO1xuXG4gICAgaWYgKHBhcnQgPT09ICcuJykge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgfSBlbHNlIGlmIChwYXJ0ID09PSAnLi4nKSB7XG4gICAgICBzcGxpY2VPbmUoZnJvbVBhcnRzLCBpKTtcbiAgICAgIHVwKys7XG4gICAgfSBlbHNlIGlmICh1cCkge1xuICAgICAgc3BsaWNlT25lKGZyb21QYXJ0cywgaSk7XG4gICAgICB1cC0tO1xuICAgIH1cbiAgfVxuXG4gIGlmICghbXVzdEVuZEFicykgZm9yICg7IHVwLS07IHVwKSBmcm9tUGFydHMudW5zaGlmdCgnLi4nKTtcblxuICBpZiAoXG4gICAgbXVzdEVuZEFicyAmJlxuICAgIGZyb21QYXJ0c1swXSAhPT0gJycgJiZcbiAgICAoIWZyb21QYXJ0c1swXSB8fCAhaXNBYnNvbHV0ZShmcm9tUGFydHNbMF0pKVxuICApXG4gICAgZnJvbVBhcnRzLnVuc2hpZnQoJycpO1xuXG4gIHZhciByZXN1bHQgPSBmcm9tUGFydHMuam9pbignLycpO1xuXG4gIGlmIChoYXNUcmFpbGluZ1NsYXNoICYmIHJlc3VsdC5zdWJzdHIoLTEpICE9PSAnLycpIHJlc3VsdCArPSAnLyc7XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgcmVzb2x2ZVBhdGhuYW1lO1xuIiwiZnVuY3Rpb24gdmFsdWVPZihvYmopIHtcbiAgcmV0dXJuIG9iai52YWx1ZU9mID8gb2JqLnZhbHVlT2YoKSA6IE9iamVjdC5wcm90b3R5cGUudmFsdWVPZi5jYWxsKG9iaik7XG59XG5cbmZ1bmN0aW9uIHZhbHVlRXF1YWwoYSwgYikge1xuICAvLyBUZXN0IGZvciBzdHJpY3QgZXF1YWxpdHkgZmlyc3QuXG4gIGlmIChhID09PSBiKSByZXR1cm4gdHJ1ZTtcblxuICAvLyBPdGhlcndpc2UsIGlmIGVpdGhlciBvZiB0aGVtID09IG51bGwgdGhleSBhcmUgbm90IGVxdWFsLlxuICBpZiAoYSA9PSBudWxsIHx8IGIgPT0gbnVsbCkgcmV0dXJuIGZhbHNlO1xuXG4gIGlmIChBcnJheS5pc0FycmF5KGEpKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIEFycmF5LmlzQXJyYXkoYikgJiZcbiAgICAgIGEubGVuZ3RoID09PSBiLmxlbmd0aCAmJlxuICAgICAgYS5ldmVyeShmdW5jdGlvbihpdGVtLCBpbmRleCkge1xuICAgICAgICByZXR1cm4gdmFsdWVFcXVhbChpdGVtLCBiW2luZGV4XSk7XG4gICAgICB9KVxuICAgICk7XG4gIH1cblxuICBpZiAodHlwZW9mIGEgPT09ICdvYmplY3QnIHx8IHR5cGVvZiBiID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBhVmFsdWUgPSB2YWx1ZU9mKGEpO1xuICAgIHZhciBiVmFsdWUgPSB2YWx1ZU9mKGIpO1xuXG4gICAgaWYgKGFWYWx1ZSAhPT0gYSB8fCBiVmFsdWUgIT09IGIpIHJldHVybiB2YWx1ZUVxdWFsKGFWYWx1ZSwgYlZhbHVlKTtcblxuICAgIHJldHVybiBPYmplY3Qua2V5cyhPYmplY3QuYXNzaWduKHt9LCBhLCBiKSkuZXZlcnkoZnVuY3Rpb24oa2V5KSB7XG4gICAgICByZXR1cm4gdmFsdWVFcXVhbChhW2tleV0sIGJba2V5XSk7XG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlRXF1YWw7XG4iLCJ2YXIgaXNQcm9kdWN0aW9uID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgPT09ICdwcm9kdWN0aW9uJztcbnZhciBwcmVmaXggPSAnSW52YXJpYW50IGZhaWxlZCc7XG5mdW5jdGlvbiBpbnZhcmlhbnQoY29uZGl0aW9uLCBtZXNzYWdlKSB7XG4gICAgaWYgKGNvbmRpdGlvbikge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChpc1Byb2R1Y3Rpb24pIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKHByZWZpeCk7XG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihwcmVmaXggKyBcIjogXCIgKyAobWVzc2FnZSB8fCAnJykpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpbnZhcmlhbnQ7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSAnQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kcyc7XG5pbXBvcnQgcmVzb2x2ZVBhdGhuYW1lIGZyb20gJ3Jlc29sdmUtcGF0aG5hbWUnO1xuaW1wb3J0IHZhbHVlRXF1YWwgZnJvbSAndmFsdWUtZXF1YWwnO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS1pbnZhcmlhbnQnO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGggOiAnLycgKyBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICcvJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIGhhc0Jhc2VuYW1lKHBhdGgsIHByZWZpeCkge1xuICByZXR1cm4gcGF0aC50b0xvd2VyQ2FzZSgpLmluZGV4T2YocHJlZml4LnRvTG93ZXJDYXNlKCkpID09PSAwICYmICcvPyMnLmluZGV4T2YocGF0aC5jaGFyQXQocHJlZml4Lmxlbmd0aCkpICE9PSAtMTtcbn1cbmZ1bmN0aW9uIHN0cmlwQmFzZW5hbWUocGF0aCwgcHJlZml4KSB7XG4gIHJldHVybiBoYXNCYXNlbmFtZShwYXRoLCBwcmVmaXgpID8gcGF0aC5zdWJzdHIocHJlZml4Lmxlbmd0aCkgOiBwYXRoO1xufVxuZnVuY3Rpb24gc3RyaXBUcmFpbGluZ1NsYXNoKHBhdGgpIHtcbiAgcmV0dXJuIHBhdGguY2hhckF0KHBhdGgubGVuZ3RoIC0gMSkgPT09ICcvJyA/IHBhdGguc2xpY2UoMCwgLTEpIDogcGF0aDtcbn1cbmZ1bmN0aW9uIHBhcnNlUGF0aChwYXRoKSB7XG4gIHZhciBwYXRobmFtZSA9IHBhdGggfHwgJy8nO1xuICB2YXIgc2VhcmNoID0gJyc7XG4gIHZhciBoYXNoID0gJyc7XG4gIHZhciBoYXNoSW5kZXggPSBwYXRobmFtZS5pbmRleE9mKCcjJyk7XG5cbiAgaWYgKGhhc2hJbmRleCAhPT0gLTEpIHtcbiAgICBoYXNoID0gcGF0aG5hbWUuc3Vic3RyKGhhc2hJbmRleCk7XG4gICAgcGF0aG5hbWUgPSBwYXRobmFtZS5zdWJzdHIoMCwgaGFzaEluZGV4KTtcbiAgfVxuXG4gIHZhciBzZWFyY2hJbmRleCA9IHBhdGhuYW1lLmluZGV4T2YoJz8nKTtcblxuICBpZiAoc2VhcmNoSW5kZXggIT09IC0xKSB7XG4gICAgc2VhcmNoID0gcGF0aG5hbWUuc3Vic3RyKHNlYXJjaEluZGV4KTtcbiAgICBwYXRobmFtZSA9IHBhdGhuYW1lLnN1YnN0cigwLCBzZWFyY2hJbmRleCk7XG4gIH1cblxuICByZXR1cm4ge1xuICAgIHBhdGhuYW1lOiBwYXRobmFtZSxcbiAgICBzZWFyY2g6IHNlYXJjaCA9PT0gJz8nID8gJycgOiBzZWFyY2gsXG4gICAgaGFzaDogaGFzaCA9PT0gJyMnID8gJycgOiBoYXNoXG4gIH07XG59XG5mdW5jdGlvbiBjcmVhdGVQYXRoKGxvY2F0aW9uKSB7XG4gIHZhciBwYXRobmFtZSA9IGxvY2F0aW9uLnBhdGhuYW1lLFxuICAgICAgc2VhcmNoID0gbG9jYXRpb24uc2VhcmNoLFxuICAgICAgaGFzaCA9IGxvY2F0aW9uLmhhc2g7XG4gIHZhciBwYXRoID0gcGF0aG5hbWUgfHwgJy8nO1xuICBpZiAoc2VhcmNoICYmIHNlYXJjaCAhPT0gJz8nKSBwYXRoICs9IHNlYXJjaC5jaGFyQXQoMCkgPT09ICc/JyA/IHNlYXJjaCA6IFwiP1wiICsgc2VhcmNoO1xuICBpZiAoaGFzaCAmJiBoYXNoICE9PSAnIycpIHBhdGggKz0gaGFzaC5jaGFyQXQoMCkgPT09ICcjJyA/IGhhc2ggOiBcIiNcIiArIGhhc2g7XG4gIHJldHVybiBwYXRoO1xufVxuXG5mdW5jdGlvbiBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwga2V5LCBjdXJyZW50TG9jYXRpb24pIHtcbiAgdmFyIGxvY2F0aW9uO1xuXG4gIGlmICh0eXBlb2YgcGF0aCA9PT0gJ3N0cmluZycpIHtcbiAgICAvLyBUd28tYXJnIGZvcm06IHB1c2gocGF0aCwgc3RhdGUpXG4gICAgbG9jYXRpb24gPSBwYXJzZVBhdGgocGF0aCk7XG4gICAgbG9jYXRpb24uc3RhdGUgPSBzdGF0ZTtcbiAgfSBlbHNlIHtcbiAgICAvLyBPbmUtYXJnIGZvcm06IHB1c2gobG9jYXRpb24pXG4gICAgbG9jYXRpb24gPSBfZXh0ZW5kcyh7fSwgcGF0aCk7XG4gICAgaWYgKGxvY2F0aW9uLnBhdGhuYW1lID09PSB1bmRlZmluZWQpIGxvY2F0aW9uLnBhdGhuYW1lID0gJyc7XG5cbiAgICBpZiAobG9jYXRpb24uc2VhcmNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uc2VhcmNoLmNoYXJBdCgwKSAhPT0gJz8nKSBsb2NhdGlvbi5zZWFyY2ggPSAnPycgKyBsb2NhdGlvbi5zZWFyY2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLnNlYXJjaCA9ICcnO1xuICAgIH1cblxuICAgIGlmIChsb2NhdGlvbi5oYXNoKSB7XG4gICAgICBpZiAobG9jYXRpb24uaGFzaC5jaGFyQXQoMCkgIT09ICcjJykgbG9jYXRpb24uaGFzaCA9ICcjJyArIGxvY2F0aW9uLmhhc2g7XG4gICAgfSBlbHNlIHtcbiAgICAgIGxvY2F0aW9uLmhhc2ggPSAnJztcbiAgICB9XG5cbiAgICBpZiAoc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBsb2NhdGlvbi5zdGF0ZSA9PT0gdW5kZWZpbmVkKSBsb2NhdGlvbi5zdGF0ZSA9IHN0YXRlO1xuICB9XG5cbiAgdHJ5IHtcbiAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGRlY29kZVVSSShsb2NhdGlvbi5wYXRobmFtZSk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICBpZiAoZSBpbnN0YW5jZW9mIFVSSUVycm9yKSB7XG4gICAgICB0aHJvdyBuZXcgVVJJRXJyb3IoJ1BhdGhuYW1lIFwiJyArIGxvY2F0aW9uLnBhdGhuYW1lICsgJ1wiIGNvdWxkIG5vdCBiZSBkZWNvZGVkLiAnICsgJ1RoaXMgaXMgbGlrZWx5IGNhdXNlZCBieSBhbiBpbnZhbGlkIHBlcmNlbnQtZW5jb2RpbmcuJyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRocm93IGU7XG4gICAgfVxuICB9XG5cbiAgaWYgKGtleSkgbG9jYXRpb24ua2V5ID0ga2V5O1xuXG4gIGlmIChjdXJyZW50TG9jYXRpb24pIHtcbiAgICAvLyBSZXNvbHZlIGluY29tcGxldGUvcmVsYXRpdmUgcGF0aG5hbWUgcmVsYXRpdmUgdG8gY3VycmVudCBsb2NhdGlvbi5cbiAgICBpZiAoIWxvY2F0aW9uLnBhdGhuYW1lKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IGN1cnJlbnRMb2NhdGlvbi5wYXRobmFtZTtcbiAgICB9IGVsc2UgaWYgKGxvY2F0aW9uLnBhdGhuYW1lLmNoYXJBdCgwKSAhPT0gJy8nKSB7XG4gICAgICBsb2NhdGlvbi5wYXRobmFtZSA9IHJlc29sdmVQYXRobmFtZShsb2NhdGlvbi5wYXRobmFtZSwgY3VycmVudExvY2F0aW9uLnBhdGhuYW1lKTtcbiAgICB9XG4gIH0gZWxzZSB7XG4gICAgLy8gV2hlbiB0aGVyZSBpcyBubyBwcmlvciBsb2NhdGlvbiBhbmQgcGF0aG5hbWUgaXMgZW1wdHksIHNldCBpdCB0byAvXG4gICAgaWYgKCFsb2NhdGlvbi5wYXRobmFtZSkge1xuICAgICAgbG9jYXRpb24ucGF0aG5hbWUgPSAnLyc7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGxvY2F0aW9uO1xufVxuZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwoYSwgYikge1xuICByZXR1cm4gYS5wYXRobmFtZSA9PT0gYi5wYXRobmFtZSAmJiBhLnNlYXJjaCA9PT0gYi5zZWFyY2ggJiYgYS5oYXNoID09PSBiLmhhc2ggJiYgYS5rZXkgPT09IGIua2V5ICYmIHZhbHVlRXF1YWwoYS5zdGF0ZSwgYi5zdGF0ZSk7XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVRyYW5zaXRpb25NYW5hZ2VyKCkge1xuICB2YXIgcHJvbXB0ID0gbnVsbDtcblxuICBmdW5jdGlvbiBzZXRQcm9tcHQobmV4dFByb21wdCkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcocHJvbXB0ID09IG51bGwsICdBIGhpc3Rvcnkgc3VwcG9ydHMgb25seSBvbmUgcHJvbXB0IGF0IGEgdGltZScpIDogdm9pZCAwO1xuICAgIHByb21wdCA9IG5leHRQcm9tcHQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChwcm9tcHQgPT09IG5leHRQcm9tcHQpIHByb21wdCA9IG51bGw7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgY2FsbGJhY2spIHtcbiAgICAvLyBUT0RPOiBJZiBhbm90aGVyIHRyYW5zaXRpb24gc3RhcnRzIHdoaWxlIHdlJ3JlIHN0aWxsIGNvbmZpcm1pbmdcbiAgICAvLyB0aGUgcHJldmlvdXMgb25lLCB3ZSBtYXkgZW5kIHVwIGluIGEgd2VpcmQgc3RhdGUuIEZpZ3VyZSBvdXQgdGhlXG4gICAgLy8gYmVzdCB3YXkgdG8gaGFuZGxlIHRoaXMuXG4gICAgaWYgKHByb21wdCAhPSBudWxsKSB7XG4gICAgICB2YXIgcmVzdWx0ID0gdHlwZW9mIHByb21wdCA9PT0gJ2Z1bmN0aW9uJyA/IHByb21wdChsb2NhdGlvbiwgYWN0aW9uKSA6IHByb21wdDtcblxuICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIGlmICh0eXBlb2YgZ2V0VXNlckNvbmZpcm1hdGlvbiA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICAgIGdldFVzZXJDb25maXJtYXRpb24ocmVzdWx0LCBjYWxsYmFjayk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0EgaGlzdG9yeSBuZWVkcyBhIGdldFVzZXJDb25maXJtYXRpb24gZnVuY3Rpb24gaW4gb3JkZXIgdG8gdXNlIGEgcHJvbXB0IG1lc3NhZ2UnKSA6IHZvaWQgMDtcbiAgICAgICAgICBjYWxsYmFjayh0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gUmV0dXJuIGZhbHNlIGZyb20gYSB0cmFuc2l0aW9uIGhvb2sgdG8gY2FuY2VsIHRoZSB0cmFuc2l0aW9uLlxuICAgICAgICBjYWxsYmFjayhyZXN1bHQgIT09IGZhbHNlKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgY2FsbGJhY2sodHJ1ZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGxpc3RlbmVycyA9IFtdO1xuXG4gIGZ1bmN0aW9uIGFwcGVuZExpc3RlbmVyKGZuKSB7XG4gICAgdmFyIGlzQWN0aXZlID0gdHJ1ZTtcblxuICAgIGZ1bmN0aW9uIGxpc3RlbmVyKCkge1xuICAgICAgaWYgKGlzQWN0aXZlKSBmbi5hcHBseSh2b2lkIDAsIGFyZ3VtZW50cyk7XG4gICAgfVxuXG4gICAgbGlzdGVuZXJzLnB1c2gobGlzdGVuZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpc0FjdGl2ZSA9IGZhbHNlO1xuICAgICAgbGlzdGVuZXJzID0gbGlzdGVuZXJzLmZpbHRlcihmdW5jdGlvbiAoaXRlbSkge1xuICAgICAgICByZXR1cm4gaXRlbSAhPT0gbGlzdGVuZXI7XG4gICAgICB9KTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbm90aWZ5TGlzdGVuZXJzKCkge1xuICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4pLCBfa2V5ID0gMDsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgICAgYXJnc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICB9XG5cbiAgICBsaXN0ZW5lcnMuZm9yRWFjaChmdW5jdGlvbiAobGlzdGVuZXIpIHtcbiAgICAgIHJldHVybiBsaXN0ZW5lci5hcHBseSh2b2lkIDAsIGFyZ3MpO1xuICAgIH0pO1xuICB9XG5cbiAgcmV0dXJuIHtcbiAgICBzZXRQcm9tcHQ6IHNldFByb21wdCxcbiAgICBjb25maXJtVHJhbnNpdGlvblRvOiBjb25maXJtVHJhbnNpdGlvblRvLFxuICAgIGFwcGVuZExpc3RlbmVyOiBhcHBlbmRMaXN0ZW5lcixcbiAgICBub3RpZnlMaXN0ZW5lcnM6IG5vdGlmeUxpc3RlbmVyc1xuICB9O1xufVxuXG52YXIgY2FuVXNlRE9NID0gISEodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LmRvY3VtZW50ICYmIHdpbmRvdy5kb2N1bWVudC5jcmVhdGVFbGVtZW50KTtcbmZ1bmN0aW9uIGdldENvbmZpcm1hdGlvbihtZXNzYWdlLCBjYWxsYmFjaykge1xuICBjYWxsYmFjayh3aW5kb3cuY29uZmlybShtZXNzYWdlKSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tYWxlcnRcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIHRoZSBIVE1MNSBoaXN0b3J5IEFQSSBpcyBzdXBwb3J0ZWQuIFRha2VuIGZyb20gTW9kZXJuaXpyLlxuICpcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL0xJQ0VOU0VcbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9oaXN0b3J5LmpzXG4gKiBjaGFuZ2VkIHRvIGF2b2lkIGZhbHNlIG5lZ2F0aXZlcyBmb3IgV2luZG93cyBQaG9uZXM6IGh0dHBzOi8vZ2l0aHViLmNvbS9yZWFjdGpzL3JlYWN0LXJvdXRlci9pc3N1ZXMvNTg2XG4gKi9cblxuZnVuY3Rpb24gc3VwcG9ydHNIaXN0b3J5KCkge1xuICB2YXIgdWEgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudDtcbiAgaWYgKCh1YS5pbmRleE9mKCdBbmRyb2lkIDIuJykgIT09IC0xIHx8IHVhLmluZGV4T2YoJ0FuZHJvaWQgNC4wJykgIT09IC0xKSAmJiB1YS5pbmRleE9mKCdNb2JpbGUgU2FmYXJpJykgIT09IC0xICYmIHVhLmluZGV4T2YoJ0Nocm9tZScpID09PSAtMSAmJiB1YS5pbmRleE9mKCdXaW5kb3dzIFBob25lJykgPT09IC0xKSByZXR1cm4gZmFsc2U7XG4gIHJldHVybiB3aW5kb3cuaGlzdG9yeSAmJiAncHVzaFN0YXRlJyBpbiB3aW5kb3cuaGlzdG9yeTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGJyb3dzZXIgZmlyZXMgcG9wc3RhdGUgb24gaGFzaCBjaGFuZ2UuXG4gKiBJRTEwIGFuZCBJRTExIGRvIG5vdC5cbiAqL1xuXG5mdW5jdGlvbiBzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignVHJpZGVudCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyBmYWxzZSBpZiB1c2luZyBnbyhuKSB3aXRoIGhhc2ggaGlzdG9yeSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkLlxuICovXG5cbmZ1bmN0aW9uIHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCkge1xuICByZXR1cm4gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignRmlyZWZveCcpID09PSAtMTtcbn1cbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIGEgZ2l2ZW4gcG9wc3RhdGUgZXZlbnQgaXMgYW4gZXh0cmFuZW91cyBXZWJLaXQgZXZlbnQuXG4gKiBBY2NvdW50cyBmb3IgdGhlIGZhY3QgdGhhdCBDaHJvbWUgb24gaU9TIGZpcmVzIHJlYWwgcG9wc3RhdGUgZXZlbnRzXG4gKiBjb250YWluaW5nIHVuZGVmaW5lZCBzdGF0ZSB3aGVuIHByZXNzaW5nIHRoZSBiYWNrIGJ1dHRvbi5cbiAqL1xuXG5mdW5jdGlvbiBpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSB7XG4gIHJldHVybiBldmVudC5zdGF0ZSA9PT0gdW5kZWZpbmVkICYmIG5hdmlnYXRvci51c2VyQWdlbnQuaW5kZXhPZignQ3JpT1MnKSA9PT0gLTE7XG59XG5cbnZhciBQb3BTdGF0ZUV2ZW50ID0gJ3BvcHN0YXRlJztcbnZhciBIYXNoQ2hhbmdlRXZlbnQgPSAnaGFzaGNoYW5nZSc7XG5cbmZ1bmN0aW9uIGdldEhpc3RvcnlTdGF0ZSgpIHtcbiAgdHJ5IHtcbiAgICByZXR1cm4gd2luZG93Lmhpc3Rvcnkuc3RhdGUgfHwge307XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICAvLyBJRSAxMSBzb21ldGltZXMgdGhyb3dzIHdoZW4gYWNjZXNzaW5nIHdpbmRvdy5oaXN0b3J5LnN0YXRlXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9SZWFjdFRyYWluaW5nL2hpc3RvcnkvcHVsbC8yODlcbiAgICByZXR1cm4ge307XG4gIH1cbn1cbi8qKlxuICogQ3JlYXRlcyBhIGhpc3Rvcnkgb2JqZWN0IHRoYXQgdXNlcyB0aGUgSFRNTDUgaGlzdG9yeSBBUEkgaW5jbHVkaW5nXG4gKiBwdXNoU3RhdGUsIHJlcGxhY2VTdGF0ZSwgYW5kIHRoZSBwb3BzdGF0ZSBldmVudC5cbiAqL1xuXG5cbmZ1bmN0aW9uIGNyZWF0ZUJyb3dzZXJIaXN0b3J5KHByb3BzKSB7XG4gIGlmIChwcm9wcyA9PT0gdm9pZCAwKSB7XG4gICAgcHJvcHMgPSB7fTtcbiAgfVxuXG4gICFjYW5Vc2VET00gPyBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyBpbnZhcmlhbnQoZmFsc2UsICdCcm93c2VyIGhpc3RvcnkgbmVlZHMgYSBET00nKSA6IGludmFyaWFudChmYWxzZSkgOiB2b2lkIDA7XG4gIHZhciBnbG9iYWxIaXN0b3J5ID0gd2luZG93Lmhpc3Rvcnk7XG4gIHZhciBjYW5Vc2VIaXN0b3J5ID0gc3VwcG9ydHNIaXN0b3J5KCk7XG4gIHZhciBuZWVkc0hhc2hDaGFuZ2VMaXN0ZW5lciA9ICFzdXBwb3J0c1BvcFN0YXRlT25IYXNoQ2hhbmdlKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRmb3JjZVJlZnJlc2ggPSBfcHJvcHMuZm9yY2VSZWZyZXNoLFxuICAgICAgZm9yY2VSZWZyZXNoID0gX3Byb3BzJGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwID8gZmFsc2UgOiBfcHJvcHMkZm9yY2VSZWZyZXNoLFxuICAgICAgX3Byb3BzJGdldFVzZXJDb25maXJtID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzJGdldFVzZXJDb25maXJtID09PSB2b2lkIDAgPyBnZXRDb25maXJtYXRpb24gOiBfcHJvcHMkZ2V0VXNlckNvbmZpcm0sXG4gICAgICBfcHJvcHMka2V5TGVuZ3RoID0gX3Byb3BzLmtleUxlbmd0aCxcbiAgICAgIGtleUxlbmd0aCA9IF9wcm9wcyRrZXlMZW5ndGggPT09IHZvaWQgMCA/IDYgOiBfcHJvcHMka2V5TGVuZ3RoO1xuICB2YXIgYmFzZW5hbWUgPSBwcm9wcy5iYXNlbmFtZSA/IHN0cmlwVHJhaWxpbmdTbGFzaChhZGRMZWFkaW5nU2xhc2gocHJvcHMuYmFzZW5hbWUpKSA6ICcnO1xuXG4gIGZ1bmN0aW9uIGdldERPTUxvY2F0aW9uKGhpc3RvcnlTdGF0ZSkge1xuICAgIHZhciBfcmVmID0gaGlzdG9yeVN0YXRlIHx8IHt9LFxuICAgICAgICBrZXkgPSBfcmVmLmtleSxcbiAgICAgICAgc3RhdGUgPSBfcmVmLnN0YXRlO1xuXG4gICAgdmFyIF93aW5kb3ckbG9jYXRpb24gPSB3aW5kb3cubG9jYXRpb24sXG4gICAgICAgIHBhdGhuYW1lID0gX3dpbmRvdyRsb2NhdGlvbi5wYXRobmFtZSxcbiAgICAgICAgc2VhcmNoID0gX3dpbmRvdyRsb2NhdGlvbi5zZWFyY2gsXG4gICAgICAgIGhhc2ggPSBfd2luZG93JGxvY2F0aW9uLmhhc2g7XG4gICAgdmFyIHBhdGggPSBwYXRobmFtZSArIHNlYXJjaCArIGhhc2g7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghYmFzZW5hbWUgfHwgaGFzQmFzZW5hbWUocGF0aCwgYmFzZW5hbWUpLCAnWW91IGFyZSBhdHRlbXB0aW5nIHRvIHVzZSBhIGJhc2VuYW1lIG9uIGEgcGFnZSB3aG9zZSBVUkwgcGF0aCBkb2VzIG5vdCBiZWdpbiAnICsgJ3dpdGggdGhlIGJhc2VuYW1lLiBFeHBlY3RlZCBwYXRoIFwiJyArIHBhdGggKyAnXCIgdG8gYmVnaW4gd2l0aCBcIicgKyBiYXNlbmFtZSArICdcIi4nKSA6IHZvaWQgMDtcbiAgICBpZiAoYmFzZW5hbWUpIHBhdGggPSBzdHJpcEJhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKTtcbiAgICByZXR1cm4gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGtleSk7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wU3RhdGUoZXZlbnQpIHtcbiAgICAvLyBJZ25vcmUgZXh0cmFuZW91cyBwb3BzdGF0ZSBldmVudHMgaW4gV2ViS2l0LlxuICAgIGlmIChpc0V4dHJhbmVvdXNQb3BzdGF0ZUV2ZW50KGV2ZW50KSkgcmV0dXJuO1xuICAgIGhhbmRsZVBvcChnZXRET01Mb2NhdGlvbihldmVudC5zdGF0ZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlSGFzaENoYW5nZSgpIHtcbiAgICBoYW5kbGVQb3AoZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpKTtcbiAgfVxuXG4gIHZhciBmb3JjZU5leHRQb3AgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBoYW5kbGVQb3AobG9jYXRpb24pIHtcbiAgICBpZiAoZm9yY2VOZXh0UG9wKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSBmYWxzZTtcbiAgICAgIHNldFN0YXRlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBhY3Rpb24gPSAnUE9QJztcbiAgICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICAgIGlmIChvaykge1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcmV2ZXJ0UG9wKGxvY2F0aW9uKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmV2ZXJ0UG9wKGZyb21Mb2NhdGlvbikge1xuICAgIHZhciB0b0xvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjsgLy8gVE9ETzogV2UgY291bGQgcHJvYmFibHkgbWFrZSB0aGlzIG1vcmUgcmVsaWFibGUgYnlcbiAgICAvLyBrZWVwaW5nIGEgbGlzdCBvZiBrZXlzIHdlJ3ZlIHNlZW4gaW4gc2Vzc2lvblN0b3JhZ2UuXG4gICAgLy8gSW5zdGVhZCwgd2UganVzdCBkZWZhdWx0IHRvIDAgZm9yIGtleXMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsS2V5cy5pbmRleE9mKHRvTG9jYXRpb24ua2V5KTtcbiAgICBpZiAodG9JbmRleCA9PT0gLTEpIHRvSW5kZXggPSAwO1xuICAgIHZhciBmcm9tSW5kZXggPSBhbGxLZXlzLmluZGV4T2YoZnJvbUxvY2F0aW9uLmtleSk7XG4gICAgaWYgKGZyb21JbmRleCA9PT0gLTEpIGZyb21JbmRleCA9IDA7XG4gICAgdmFyIGRlbHRhID0gdG9JbmRleCAtIGZyb21JbmRleDtcblxuICAgIGlmIChkZWx0YSkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gdHJ1ZTtcbiAgICAgIGdvKGRlbHRhKTtcbiAgICB9XG4gIH1cblxuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oZ2V0SGlzdG9yeVN0YXRlKCkpO1xuICB2YXIgYWxsS2V5cyA9IFtpbml0aWFsTG9jYXRpb24ua2V5XTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUhyZWYobG9jYXRpb24pIHtcbiAgICByZXR1cm4gYmFzZW5hbWUgKyBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHB1c2ggd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdQVVNIJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgaHJlZiA9IGNyZWF0ZUhyZWYobG9jYXRpb24pO1xuICAgICAgdmFyIGtleSA9IGxvY2F0aW9uLmtleSxcbiAgICAgICAgICBzdGF0ZSA9IGxvY2F0aW9uLnN0YXRlO1xuXG4gICAgICBpZiAoY2FuVXNlSGlzdG9yeSkge1xuICAgICAgICBnbG9iYWxIaXN0b3J5LnB1c2hTdGF0ZSh7XG4gICAgICAgICAga2V5OiBrZXksXG4gICAgICAgICAgc3RhdGU6IHN0YXRlXG4gICAgICAgIH0sIG51bGwsIGhyZWYpO1xuXG4gICAgICAgIGlmIChmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgICB3aW5kb3cubG9jYXRpb24uaHJlZiA9IGhyZWY7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyIHByZXZJbmRleCA9IGFsbEtleXMuaW5kZXhPZihoaXN0b3J5LmxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgdmFyIG5leHRLZXlzID0gYWxsS2V5cy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgICBuZXh0S2V5cy5wdXNoKGxvY2F0aW9uLmtleSk7XG4gICAgICAgICAgYWxsS2V5cyA9IG5leHRLZXlzO1xuICAgICAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0Jyb3dzZXIgaGlzdG9yeSBjYW5ub3QgcHVzaCBzdGF0ZSBpbiBicm93c2VycyB0aGF0IGRvIG5vdCBzdXBwb3J0IEhUTUw1IGhpc3RvcnknKSA6IHZvaWQgMDtcbiAgICAgICAgd2luZG93LmxvY2F0aW9uLmhyZWYgPSBocmVmO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoISh0eXBlb2YgcGF0aCA9PT0gJ29iamVjdCcgJiYgcGF0aC5zdGF0ZSAhPT0gdW5kZWZpbmVkICYmIHN0YXRlICE9PSB1bmRlZmluZWQpLCAnWW91IHNob3VsZCBhdm9pZCBwcm92aWRpbmcgYSAybmQgc3RhdGUgYXJndW1lbnQgdG8gcmVwbGFjZSB3aGVuIHRoZSAxc3QgJyArICdhcmd1bWVudCBpcyBhIGxvY2F0aW9uLWxpa2Ugb2JqZWN0IHRoYXQgYWxyZWFkeSBoYXMgc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1JFUExBQ0UnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHN0YXRlLCBjcmVhdGVLZXkoKSwgaGlzdG9yeS5sb2NhdGlvbik7XG4gICAgdHJhbnNpdGlvbk1hbmFnZXIuY29uZmlybVRyYW5zaXRpb25Ubyhsb2NhdGlvbiwgYWN0aW9uLCBnZXRVc2VyQ29uZmlybWF0aW9uLCBmdW5jdGlvbiAob2spIHtcbiAgICAgIGlmICghb2spIHJldHVybjtcbiAgICAgIHZhciBocmVmID0gY3JlYXRlSHJlZihsb2NhdGlvbik7XG4gICAgICB2YXIga2V5ID0gbG9jYXRpb24ua2V5LFxuICAgICAgICAgIHN0YXRlID0gbG9jYXRpb24uc3RhdGU7XG5cbiAgICAgIGlmIChjYW5Vc2VIaXN0b3J5KSB7XG4gICAgICAgIGdsb2JhbEhpc3RvcnkucmVwbGFjZVN0YXRlKHtcbiAgICAgICAgICBrZXk6IGtleSxcbiAgICAgICAgICBzdGF0ZTogc3RhdGVcbiAgICAgICAgfSwgbnVsbCwgaHJlZik7XG5cbiAgICAgICAgaWYgKGZvcmNlUmVmcmVzaCkge1xuICAgICAgICAgIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKGhyZWYpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxLZXlzLmluZGV4T2YoaGlzdG9yeS5sb2NhdGlvbi5rZXkpO1xuICAgICAgICAgIGlmIChwcmV2SW5kZXggIT09IC0xKSBhbGxLZXlzW3ByZXZJbmRleF0gPSBsb2NhdGlvbi5rZXk7XG4gICAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgICBsb2NhdGlvbjogbG9jYXRpb25cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhzdGF0ZSA9PT0gdW5kZWZpbmVkLCAnQnJvd3NlciBoaXN0b3J5IGNhbm5vdCByZXBsYWNlIHN0YXRlIGluIGJyb3dzZXJzIHRoYXQgZG8gbm90IHN1cHBvcnQgSFRNTDUgaGlzdG9yeScpIDogdm9pZCAwO1xuICAgICAgICB3aW5kb3cubG9jYXRpb24ucmVwbGFjZShocmVmKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBnbG9iYWxIaXN0b3J5LmdvKG4pO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29CYWNrKCkge1xuICAgIGdvKC0xKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvRm9yd2FyZCgpIHtcbiAgICBnbygxKTtcbiAgfVxuXG4gIHZhciBsaXN0ZW5lckNvdW50ID0gMDtcblxuICBmdW5jdGlvbiBjaGVja0RPTUxpc3RlbmVycyhkZWx0YSkge1xuICAgIGxpc3RlbmVyQ291bnQgKz0gZGVsdGE7XG5cbiAgICBpZiAobGlzdGVuZXJDb3VudCA9PT0gMSAmJiBkZWx0YSA9PT0gMSkge1xuICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH0gZWxzZSBpZiAobGlzdGVuZXJDb3VudCA9PT0gMCkge1xuICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoUG9wU3RhdGVFdmVudCwgaGFuZGxlUG9wU3RhdGUpO1xuICAgICAgaWYgKG5lZWRzSGFzaENoYW5nZUxpc3RlbmVyKSB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQsIGhhbmRsZUhhc2hDaGFuZ2UpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBpc0Jsb2NrZWQgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBibG9jayhwcm9tcHQpIHtcbiAgICBpZiAocHJvbXB0ID09PSB2b2lkIDApIHtcbiAgICAgIHByb21wdCA9IGZhbHNlO1xuICAgIH1cblxuICAgIHZhciB1bmJsb2NrID0gdHJhbnNpdGlvbk1hbmFnZXIuc2V0UHJvbXB0KHByb21wdCk7XG5cbiAgICBpZiAoIWlzQmxvY2tlZCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoMSk7XG4gICAgICBpc0Jsb2NrZWQgPSB0cnVlO1xuICAgIH1cblxuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoaXNCbG9ja2VkKSB7XG4gICAgICAgIGlzQmxvY2tlZCA9IGZhbHNlO1xuICAgICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB1bmJsb2NrKCk7XG4gICAgfTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpc3RlbihsaXN0ZW5lcikge1xuICAgIHZhciB1bmxpc3RlbiA9IHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgY2hlY2tET01MaXN0ZW5lcnMoLTEpO1xuICAgICAgdW5saXN0ZW4oKTtcbiAgICB9O1xuICB9XG5cbiAgdmFyIGhpc3RvcnkgPSB7XG4gICAgbGVuZ3RoOiBnbG9iYWxIaXN0b3J5Lmxlbmd0aCxcbiAgICBhY3Rpb246ICdQT1AnLFxuICAgIGxvY2F0aW9uOiBpbml0aWFsTG9jYXRpb24sXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGJsb2NrOiBibG9jayxcbiAgICBsaXN0ZW46IGxpc3RlblxuICB9O1xuICByZXR1cm4gaGlzdG9yeTtcbn1cblxudmFyIEhhc2hDaGFuZ2VFdmVudCQxID0gJ2hhc2hjaGFuZ2UnO1xudmFyIEhhc2hQYXRoQ29kZXJzID0ge1xuICBoYXNoYmFuZzoge1xuICAgIGVuY29kZVBhdGg6IGZ1bmN0aW9uIGVuY29kZVBhdGgocGF0aCkge1xuICAgICAgcmV0dXJuIHBhdGguY2hhckF0KDApID09PSAnIScgPyBwYXRoIDogJyEvJyArIHN0cmlwTGVhZGluZ1NsYXNoKHBhdGgpO1xuICAgIH0sXG4gICAgZGVjb2RlUGF0aDogZnVuY3Rpb24gZGVjb2RlUGF0aChwYXRoKSB7XG4gICAgICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09ICchJyA/IHBhdGguc3Vic3RyKDEpIDogcGF0aDtcbiAgICB9XG4gIH0sXG4gIG5vc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBzdHJpcExlYWRpbmdTbGFzaCxcbiAgICBkZWNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2hcbiAgfSxcbiAgc2xhc2g6IHtcbiAgICBlbmNvZGVQYXRoOiBhZGRMZWFkaW5nU2xhc2gsXG4gICAgZGVjb2RlUGF0aDogYWRkTGVhZGluZ1NsYXNoXG4gIH1cbn07XG5cbmZ1bmN0aW9uIHN0cmlwSGFzaCh1cmwpIHtcbiAgdmFyIGhhc2hJbmRleCA9IHVybC5pbmRleE9mKCcjJyk7XG4gIHJldHVybiBoYXNoSW5kZXggPT09IC0xID8gdXJsIDogdXJsLnNsaWNlKDAsIGhhc2hJbmRleCk7XG59XG5cbmZ1bmN0aW9uIGdldEhhc2hQYXRoKCkge1xuICAvLyBXZSBjYW4ndCB1c2Ugd2luZG93LmxvY2F0aW9uLmhhc2ggaGVyZSBiZWNhdXNlIGl0J3Mgbm90XG4gIC8vIGNvbnNpc3RlbnQgYWNyb3NzIGJyb3dzZXJzIC0gRmlyZWZveCB3aWxsIHByZS1kZWNvZGUgaXQhXG4gIHZhciBocmVmID0gd2luZG93LmxvY2F0aW9uLmhyZWY7XG4gIHZhciBoYXNoSW5kZXggPSBocmVmLmluZGV4T2YoJyMnKTtcbiAgcmV0dXJuIGhhc2hJbmRleCA9PT0gLTEgPyAnJyA6IGhyZWYuc3Vic3RyaW5nKGhhc2hJbmRleCArIDEpO1xufVxuXG5mdW5jdGlvbiBwdXNoSGFzaFBhdGgocGF0aCkge1xuICB3aW5kb3cubG9jYXRpb24uaGFzaCA9IHBhdGg7XG59XG5cbmZ1bmN0aW9uIHJlcGxhY2VIYXNoUGF0aChwYXRoKSB7XG4gIHdpbmRvdy5sb2NhdGlvbi5yZXBsYWNlKHN0cmlwSGFzaCh3aW5kb3cubG9jYXRpb24uaHJlZikgKyAnIycgKyBwYXRoKTtcbn1cblxuZnVuY3Rpb24gY3JlYXRlSGFzaEhpc3RvcnkocHJvcHMpIHtcbiAgaWYgKHByb3BzID09PSB2b2lkIDApIHtcbiAgICBwcm9wcyA9IHt9O1xuICB9XG5cbiAgIWNhblVzZURPTSA/IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IGludmFyaWFudChmYWxzZSwgJ0hhc2ggaGlzdG9yeSBuZWVkcyBhIERPTScpIDogaW52YXJpYW50KGZhbHNlKSA6IHZvaWQgMDtcbiAgdmFyIGdsb2JhbEhpc3RvcnkgPSB3aW5kb3cuaGlzdG9yeTtcbiAgdmFyIGNhbkdvV2l0aG91dFJlbG9hZCA9IHN1cHBvcnRzR29XaXRob3V0UmVsb2FkVXNpbmdIYXNoKCk7XG4gIHZhciBfcHJvcHMgPSBwcm9wcyxcbiAgICAgIF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9IF9wcm9wcy5nZXRVc2VyQ29uZmlybWF0aW9uLFxuICAgICAgZ2V0VXNlckNvbmZpcm1hdGlvbiA9IF9wcm9wcyRnZXRVc2VyQ29uZmlybSA9PT0gdm9pZCAwID8gZ2V0Q29uZmlybWF0aW9uIDogX3Byb3BzJGdldFVzZXJDb25maXJtLFxuICAgICAgX3Byb3BzJGhhc2hUeXBlID0gX3Byb3BzLmhhc2hUeXBlLFxuICAgICAgaGFzaFR5cGUgPSBfcHJvcHMkaGFzaFR5cGUgPT09IHZvaWQgMCA/ICdzbGFzaCcgOiBfcHJvcHMkaGFzaFR5cGU7XG4gIHZhciBiYXNlbmFtZSA9IHByb3BzLmJhc2VuYW1lID8gc3RyaXBUcmFpbGluZ1NsYXNoKGFkZExlYWRpbmdTbGFzaChwcm9wcy5iYXNlbmFtZSkpIDogJyc7XG4gIHZhciBfSGFzaFBhdGhDb2RlcnMkaGFzaFQgPSBIYXNoUGF0aENvZGVyc1toYXNoVHlwZV0sXG4gICAgICBlbmNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmVuY29kZVBhdGgsXG4gICAgICBkZWNvZGVQYXRoID0gX0hhc2hQYXRoQ29kZXJzJGhhc2hULmRlY29kZVBhdGg7XG5cbiAgZnVuY3Rpb24gZ2V0RE9NTG9jYXRpb24oKSB7XG4gICAgdmFyIHBhdGggPSBkZWNvZGVQYXRoKGdldEhhc2hQYXRoKCkpO1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoIWJhc2VuYW1lIHx8IGhhc0Jhc2VuYW1lKHBhdGgsIGJhc2VuYW1lKSwgJ1lvdSBhcmUgYXR0ZW1wdGluZyB0byB1c2UgYSBiYXNlbmFtZSBvbiBhIHBhZ2Ugd2hvc2UgVVJMIHBhdGggZG9lcyBub3QgYmVnaW4gJyArICd3aXRoIHRoZSBiYXNlbmFtZS4gRXhwZWN0ZWQgcGF0aCBcIicgKyBwYXRoICsgJ1wiIHRvIGJlZ2luIHdpdGggXCInICsgYmFzZW5hbWUgKyAnXCIuJykgOiB2b2lkIDA7XG4gICAgaWYgKGJhc2VuYW1lKSBwYXRoID0gc3RyaXBCYXNlbmFtZShwYXRoLCBiYXNlbmFtZSk7XG4gICAgcmV0dXJuIGNyZWF0ZUxvY2F0aW9uKHBhdGgpO1xuICB9XG5cbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBnbG9iYWxIaXN0b3J5Lmxlbmd0aDtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5ub3RpZnlMaXN0ZW5lcnMoaGlzdG9yeS5sb2NhdGlvbiwgaGlzdG9yeS5hY3Rpb24pO1xuICB9XG5cbiAgdmFyIGZvcmNlTmV4dFBvcCA9IGZhbHNlO1xuICB2YXIgaWdub3JlUGF0aCA9IG51bGw7XG5cbiAgZnVuY3Rpb24gbG9jYXRpb25zQXJlRXF1YWwkJDEoYSwgYikge1xuICAgIHJldHVybiBhLnBhdGhuYW1lID09PSBiLnBhdGhuYW1lICYmIGEuc2VhcmNoID09PSBiLnNlYXJjaCAmJiBhLmhhc2ggPT09IGIuaGFzaDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGhhbmRsZUhhc2hDaGFuZ2UoKSB7XG4gICAgdmFyIHBhdGggPSBnZXRIYXNoUGF0aCgpO1xuICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgocGF0aCk7XG5cbiAgICBpZiAocGF0aCAhPT0gZW5jb2RlZFBhdGgpIHtcbiAgICAgIC8vIEVuc3VyZSB3ZSBhbHdheXMgaGF2ZSBhIHByb3Blcmx5LWVuY29kZWQgaGFzaC5cbiAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBsb2NhdGlvbiA9IGdldERPTUxvY2F0aW9uKCk7XG4gICAgICB2YXIgcHJldkxvY2F0aW9uID0gaGlzdG9yeS5sb2NhdGlvbjtcbiAgICAgIGlmICghZm9yY2VOZXh0UG9wICYmIGxvY2F0aW9uc0FyZUVxdWFsJCQxKHByZXZMb2NhdGlvbiwgbG9jYXRpb24pKSByZXR1cm47IC8vIEEgaGFzaGNoYW5nZSBkb2Vzbid0IGFsd2F5cyA9PSBsb2NhdGlvbiBjaGFuZ2UuXG5cbiAgICAgIGlmIChpZ25vcmVQYXRoID09PSBjcmVhdGVQYXRoKGxvY2F0aW9uKSkgcmV0dXJuOyAvLyBJZ25vcmUgdGhpcyBjaGFuZ2U7IHdlIGFscmVhZHkgc2V0U3RhdGUgaW4gcHVzaC9yZXBsYWNlLlxuXG4gICAgICBpZ25vcmVQYXRoID0gbnVsbDtcbiAgICAgIGhhbmRsZVBvcChsb2NhdGlvbik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaGFuZGxlUG9wKGxvY2F0aW9uKSB7XG4gICAgaWYgKGZvcmNlTmV4dFBvcCkge1xuICAgICAgZm9yY2VOZXh0UG9wID0gZmFsc2U7XG4gICAgICBzZXRTdGF0ZSgpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgYWN0aW9uID0gJ1BPUCc7XG4gICAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgICBpZiAob2spIHtcbiAgICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgICAgIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJldmVydFBvcChsb2NhdGlvbik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHJldmVydFBvcChmcm9tTG9jYXRpb24pIHtcbiAgICB2YXIgdG9Mb2NhdGlvbiA9IGhpc3RvcnkubG9jYXRpb247IC8vIFRPRE86IFdlIGNvdWxkIHByb2JhYmx5IG1ha2UgdGhpcyBtb3JlIHJlbGlhYmxlIGJ5XG4gICAgLy8ga2VlcGluZyBhIGxpc3Qgb2YgcGF0aHMgd2UndmUgc2VlbiBpbiBzZXNzaW9uU3RvcmFnZS5cbiAgICAvLyBJbnN0ZWFkLCB3ZSBqdXN0IGRlZmF1bHQgdG8gMCBmb3IgcGF0aHMgd2UgZG9uJ3Qga25vdy5cblxuICAgIHZhciB0b0luZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aCh0b0xvY2F0aW9uKSk7XG4gICAgaWYgKHRvSW5kZXggPT09IC0xKSB0b0luZGV4ID0gMDtcbiAgICB2YXIgZnJvbUluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChmcm9tTG9jYXRpb24pKTtcbiAgICBpZiAoZnJvbUluZGV4ID09PSAtMSkgZnJvbUluZGV4ID0gMDtcbiAgICB2YXIgZGVsdGEgPSB0b0luZGV4IC0gZnJvbUluZGV4O1xuXG4gICAgaWYgKGRlbHRhKSB7XG4gICAgICBmb3JjZU5leHRQb3AgPSB0cnVlO1xuICAgICAgZ28oZGVsdGEpO1xuICAgIH1cbiAgfSAvLyBFbnN1cmUgdGhlIGhhc2ggaXMgZW5jb2RlZCBwcm9wZXJseSBiZWZvcmUgZG9pbmcgYW55dGhpbmcgZWxzZS5cblxuXG4gIHZhciBwYXRoID0gZ2V0SGFzaFBhdGgoKTtcbiAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChwYXRoKTtcbiAgaWYgKHBhdGggIT09IGVuY29kZWRQYXRoKSByZXBsYWNlSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICB2YXIgaW5pdGlhbExvY2F0aW9uID0gZ2V0RE9NTG9jYXRpb24oKTtcbiAgdmFyIGFsbFBhdGhzID0gW2NyZWF0ZVBhdGgoaW5pdGlhbExvY2F0aW9uKV07IC8vIFB1YmxpYyBpbnRlcmZhY2VcblxuICBmdW5jdGlvbiBjcmVhdGVIcmVmKGxvY2F0aW9uKSB7XG4gICAgdmFyIGJhc2VUYWcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdiYXNlJyk7XG4gICAgdmFyIGhyZWYgPSAnJztcblxuICAgIGlmIChiYXNlVGFnICYmIGJhc2VUYWcuZ2V0QXR0cmlidXRlKCdocmVmJykpIHtcbiAgICAgIGhyZWYgPSBzdHJpcEhhc2god2luZG93LmxvY2F0aW9uLmhyZWYpO1xuICAgIH1cblxuICAgIHJldHVybiBocmVmICsgJyMnICsgZW5jb2RlUGF0aChiYXNlbmFtZSArIGNyZWF0ZVBhdGgobG9jYXRpb24pKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHB1c2gocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKHN0YXRlID09PSB1bmRlZmluZWQsICdIYXNoIGhpc3RvcnkgY2Fubm90IHB1c2ggc3RhdGU7IGl0IGlzIGlnbm9yZWQnKSA6IHZvaWQgMDtcbiAgICB2YXIgYWN0aW9uID0gJ1BVU0gnO1xuICAgIHZhciBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKHBhdGgsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHBhdGggPSBjcmVhdGVQYXRoKGxvY2F0aW9uKTtcbiAgICAgIHZhciBlbmNvZGVkUGF0aCA9IGVuY29kZVBhdGgoYmFzZW5hbWUgKyBwYXRoKTtcbiAgICAgIHZhciBoYXNoQ2hhbmdlZCA9IGdldEhhc2hQYXRoKCkgIT09IGVuY29kZWRQYXRoO1xuXG4gICAgICBpZiAoaGFzaENoYW5nZWQpIHtcbiAgICAgICAgLy8gV2UgY2Fubm90IHRlbGwgaWYgYSBoYXNoY2hhbmdlIHdhcyBjYXVzZWQgYnkgYSBQVVNILCBzbyB3ZSdkXG4gICAgICAgIC8vIHJhdGhlciBzZXRTdGF0ZSBoZXJlIGFuZCBpZ25vcmUgdGhlIGhhc2hjaGFuZ2UuIFRoZSBjYXZlYXQgaGVyZVxuICAgICAgICAvLyBpcyB0aGF0IG90aGVyIGhhc2ggaGlzdG9yaWVzIGluIHRoZSBwYWdlIHdpbGwgY29uc2lkZXIgaXQgYSBQT1AuXG4gICAgICAgIGlnbm9yZVBhdGggPSBwYXRoO1xuICAgICAgICBwdXNoSGFzaFBhdGgoZW5jb2RlZFBhdGgpO1xuICAgICAgICB2YXIgcHJldkluZGV4ID0gYWxsUGF0aHMubGFzdEluZGV4T2YoY3JlYXRlUGF0aChoaXN0b3J5LmxvY2F0aW9uKSk7XG4gICAgICAgIHZhciBuZXh0UGF0aHMgPSBhbGxQYXRocy5zbGljZSgwLCBwcmV2SW5kZXggKyAxKTtcbiAgICAgICAgbmV4dFBhdGhzLnB1c2gocGF0aCk7XG4gICAgICAgIGFsbFBhdGhzID0gbmV4dFBhdGhzO1xuICAgICAgICBzZXRTdGF0ZSh7XG4gICAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyhmYWxzZSwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgUFVTSCB0aGUgc2FtZSBwYXRoOyBhIG5ldyBlbnRyeSB3aWxsIG5vdCBiZSBhZGRlZCB0byB0aGUgaGlzdG9yeSBzdGFjaycpIDogdm9pZCAwO1xuICAgICAgICBzZXRTdGF0ZSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVwbGFjZShwYXRoLCBzdGF0ZSkge1xuICAgIHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSBcInByb2R1Y3Rpb25cIiA/IHdhcm5pbmcoc3RhdGUgPT09IHVuZGVmaW5lZCwgJ0hhc2ggaGlzdG9yeSBjYW5ub3QgcmVwbGFjZSBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUkVQTEFDRSc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICB2YXIgcGF0aCA9IGNyZWF0ZVBhdGgobG9jYXRpb24pO1xuICAgICAgdmFyIGVuY29kZWRQYXRoID0gZW5jb2RlUGF0aChiYXNlbmFtZSArIHBhdGgpO1xuICAgICAgdmFyIGhhc2hDaGFuZ2VkID0gZ2V0SGFzaFBhdGgoKSAhPT0gZW5jb2RlZFBhdGg7XG5cbiAgICAgIGlmIChoYXNoQ2hhbmdlZCkge1xuICAgICAgICAvLyBXZSBjYW5ub3QgdGVsbCBpZiBhIGhhc2hjaGFuZ2Ugd2FzIGNhdXNlZCBieSBhIFJFUExBQ0UsIHNvIHdlJ2RcbiAgICAgICAgLy8gcmF0aGVyIHNldFN0YXRlIGhlcmUgYW5kIGlnbm9yZSB0aGUgaGFzaGNoYW5nZS4gVGhlIGNhdmVhdCBoZXJlXG4gICAgICAgIC8vIGlzIHRoYXQgb3RoZXIgaGFzaCBoaXN0b3JpZXMgaW4gdGhlIHBhZ2Ugd2lsbCBjb25zaWRlciBpdCBhIFBPUC5cbiAgICAgICAgaWdub3JlUGF0aCA9IHBhdGg7XG4gICAgICAgIHJlcGxhY2VIYXNoUGF0aChlbmNvZGVkUGF0aCk7XG4gICAgICB9XG5cbiAgICAgIHZhciBwcmV2SW5kZXggPSBhbGxQYXRocy5pbmRleE9mKGNyZWF0ZVBhdGgoaGlzdG9yeS5sb2NhdGlvbikpO1xuICAgICAgaWYgKHByZXZJbmRleCAhPT0gLTEpIGFsbFBhdGhzW3ByZXZJbmRleF0gPSBwYXRoO1xuICAgICAgc2V0U3RhdGUoe1xuICAgICAgICBhY3Rpb246IGFjdGlvbixcbiAgICAgICAgbG9jYXRpb246IGxvY2F0aW9uXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdvKG4pIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKGNhbkdvV2l0aG91dFJlbG9hZCwgJ0hhc2ggaGlzdG9yeSBnbyhuKSBjYXVzZXMgYSBmdWxsIHBhZ2UgcmVsb2FkIGluIHRoaXMgYnJvd3NlcicpIDogdm9pZCAwO1xuICAgIGdsb2JhbEhpc3RvcnkuZ28obik7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgdmFyIGxpc3RlbmVyQ291bnQgPSAwO1xuXG4gIGZ1bmN0aW9uIGNoZWNrRE9NTGlzdGVuZXJzKGRlbHRhKSB7XG4gICAgbGlzdGVuZXJDb3VudCArPSBkZWx0YTtcblxuICAgIGlmIChsaXN0ZW5lckNvdW50ID09PSAxICYmIGRlbHRhID09PSAxKSB7XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfSBlbHNlIGlmIChsaXN0ZW5lckNvdW50ID09PSAwKSB7XG4gICAgICB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcihIYXNoQ2hhbmdlRXZlbnQkMSwgaGFuZGxlSGFzaENoYW5nZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIGlzQmxvY2tlZCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgdmFyIHVuYmxvY2sgPSB0cmFuc2l0aW9uTWFuYWdlci5zZXRQcm9tcHQocHJvbXB0KTtcblxuICAgIGlmICghaXNCbG9ja2VkKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygxKTtcbiAgICAgIGlzQmxvY2tlZCA9IHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChpc0Jsb2NrZWQpIHtcbiAgICAgICAgaXNCbG9ja2VkID0gZmFsc2U7XG4gICAgICAgIGNoZWNrRE9NTGlzdGVuZXJzKC0xKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHVuYmxvY2soKTtcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgdmFyIHVubGlzdGVuID0gdHJhbnNpdGlvbk1hbmFnZXIuYXBwZW5kTGlzdGVuZXIobGlzdGVuZXIpO1xuICAgIGNoZWNrRE9NTGlzdGVuZXJzKDEpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICBjaGVja0RPTUxpc3RlbmVycygtMSk7XG4gICAgICB1bmxpc3RlbigpO1xuICAgIH07XG4gIH1cblxuICB2YXIgaGlzdG9yeSA9IHtcbiAgICBsZW5ndGg6IGdsb2JhbEhpc3RvcnkubGVuZ3RoLFxuICAgIGFjdGlvbjogJ1BPUCcsXG4gICAgbG9jYXRpb246IGluaXRpYWxMb2NhdGlvbixcbiAgICBjcmVhdGVIcmVmOiBjcmVhdGVIcmVmLFxuICAgIHB1c2g6IHB1c2gsXG4gICAgcmVwbGFjZTogcmVwbGFjZSxcbiAgICBnbzogZ28sXG4gICAgZ29CYWNrOiBnb0JhY2ssXG4gICAgZ29Gb3J3YXJkOiBnb0ZvcndhcmQsXG4gICAgYmxvY2s6IGJsb2NrLFxuICAgIGxpc3RlbjogbGlzdGVuXG4gIH07XG4gIHJldHVybiBoaXN0b3J5O1xufVxuXG5mdW5jdGlvbiBjbGFtcChuLCBsb3dlckJvdW5kLCB1cHBlckJvdW5kKSB7XG4gIHJldHVybiBNYXRoLm1pbihNYXRoLm1heChuLCBsb3dlckJvdW5kKSwgdXBwZXJCb3VuZCk7XG59XG4vKipcbiAqIENyZWF0ZXMgYSBoaXN0b3J5IG9iamVjdCB0aGF0IHN0b3JlcyBsb2NhdGlvbnMgaW4gbWVtb3J5LlxuICovXG5cblxuZnVuY3Rpb24gY3JlYXRlTWVtb3J5SGlzdG9yeShwcm9wcykge1xuICBpZiAocHJvcHMgPT09IHZvaWQgMCkge1xuICAgIHByb3BzID0ge307XG4gIH1cblxuICB2YXIgX3Byb3BzID0gcHJvcHMsXG4gICAgICBnZXRVc2VyQ29uZmlybWF0aW9uID0gX3Byb3BzLmdldFVzZXJDb25maXJtYXRpb24sXG4gICAgICBfcHJvcHMkaW5pdGlhbEVudHJpZXMgPSBfcHJvcHMuaW5pdGlhbEVudHJpZXMsXG4gICAgICBpbml0aWFsRW50cmllcyA9IF9wcm9wcyRpbml0aWFsRW50cmllcyA9PT0gdm9pZCAwID8gWycvJ10gOiBfcHJvcHMkaW5pdGlhbEVudHJpZXMsXG4gICAgICBfcHJvcHMkaW5pdGlhbEluZGV4ID0gX3Byb3BzLmluaXRpYWxJbmRleCxcbiAgICAgIGluaXRpYWxJbmRleCA9IF9wcm9wcyRpbml0aWFsSW5kZXggPT09IHZvaWQgMCA/IDAgOiBfcHJvcHMkaW5pdGlhbEluZGV4LFxuICAgICAgX3Byb3BzJGtleUxlbmd0aCA9IF9wcm9wcy5rZXlMZW5ndGgsXG4gICAgICBrZXlMZW5ndGggPSBfcHJvcHMka2V5TGVuZ3RoID09PSB2b2lkIDAgPyA2IDogX3Byb3BzJGtleUxlbmd0aDtcbiAgdmFyIHRyYW5zaXRpb25NYW5hZ2VyID0gY3JlYXRlVHJhbnNpdGlvbk1hbmFnZXIoKTtcblxuICBmdW5jdGlvbiBzZXRTdGF0ZShuZXh0U3RhdGUpIHtcbiAgICBfZXh0ZW5kcyhoaXN0b3J5LCBuZXh0U3RhdGUpO1xuXG4gICAgaGlzdG9yeS5sZW5ndGggPSBoaXN0b3J5LmVudHJpZXMubGVuZ3RoO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLm5vdGlmeUxpc3RlbmVycyhoaXN0b3J5LmxvY2F0aW9uLCBoaXN0b3J5LmFjdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVLZXkoKSB7XG4gICAgcmV0dXJuIE1hdGgucmFuZG9tKCkudG9TdHJpbmcoMzYpLnN1YnN0cigyLCBrZXlMZW5ndGgpO1xuICB9XG5cbiAgdmFyIGluZGV4ID0gY2xhbXAoaW5pdGlhbEluZGV4LCAwLCBpbml0aWFsRW50cmllcy5sZW5ndGggLSAxKTtcbiAgdmFyIGVudHJpZXMgPSBpbml0aWFsRW50cmllcy5tYXAoZnVuY3Rpb24gKGVudHJ5KSB7XG4gICAgcmV0dXJuIHR5cGVvZiBlbnRyeSA9PT0gJ3N0cmluZycgPyBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBjcmVhdGVLZXkoKSkgOiBjcmVhdGVMb2NhdGlvbihlbnRyeSwgdW5kZWZpbmVkLCBlbnRyeS5rZXkgfHwgY3JlYXRlS2V5KCkpO1xuICB9KTsgLy8gUHVibGljIGludGVyZmFjZVxuXG4gIHZhciBjcmVhdGVIcmVmID0gY3JlYXRlUGF0aDtcblxuICBmdW5jdGlvbiBwdXNoKHBhdGgsIHN0YXRlKSB7XG4gICAgcHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09IFwicHJvZHVjdGlvblwiID8gd2FybmluZyghKHR5cGVvZiBwYXRoID09PSAnb2JqZWN0JyAmJiBwYXRoLnN0YXRlICE9PSB1bmRlZmluZWQgJiYgc3RhdGUgIT09IHVuZGVmaW5lZCksICdZb3Ugc2hvdWxkIGF2b2lkIHByb3ZpZGluZyBhIDJuZCBzdGF0ZSBhcmd1bWVudCB0byBwdXNoIHdoZW4gdGhlIDFzdCAnICsgJ2FyZ3VtZW50IGlzIGEgbG9jYXRpb24tbGlrZSBvYmplY3QgdGhhdCBhbHJlYWR5IGhhcyBzdGF0ZTsgaXQgaXMgaWdub3JlZCcpIDogdm9pZCAwO1xuICAgIHZhciBhY3Rpb24gPSAnUFVTSCc7XG4gICAgdmFyIGxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocGF0aCwgc3RhdGUsIGNyZWF0ZUtleSgpLCBoaXN0b3J5LmxvY2F0aW9uKTtcbiAgICB0cmFuc2l0aW9uTWFuYWdlci5jb25maXJtVHJhbnNpdGlvblRvKGxvY2F0aW9uLCBhY3Rpb24sIGdldFVzZXJDb25maXJtYXRpb24sIGZ1bmN0aW9uIChvaykge1xuICAgICAgaWYgKCFvaykgcmV0dXJuO1xuICAgICAgdmFyIHByZXZJbmRleCA9IGhpc3RvcnkuaW5kZXg7XG4gICAgICB2YXIgbmV4dEluZGV4ID0gcHJldkluZGV4ICsgMTtcbiAgICAgIHZhciBuZXh0RW50cmllcyA9IGhpc3RvcnkuZW50cmllcy5zbGljZSgwKTtcblxuICAgICAgaWYgKG5leHRFbnRyaWVzLmxlbmd0aCA+IG5leHRJbmRleCkge1xuICAgICAgICBuZXh0RW50cmllcy5zcGxpY2UobmV4dEluZGV4LCBuZXh0RW50cmllcy5sZW5ndGggLSBuZXh0SW5kZXgsIGxvY2F0aW9uKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5leHRFbnRyaWVzLnB1c2gobG9jYXRpb24pO1xuICAgICAgfVxuXG4gICAgICBzZXRTdGF0ZSh7XG4gICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICBsb2NhdGlvbjogbG9jYXRpb24sXG4gICAgICAgIGluZGV4OiBuZXh0SW5kZXgsXG4gICAgICAgIGVudHJpZXM6IG5leHRFbnRyaWVzXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGxhY2UocGF0aCwgc3RhdGUpIHtcbiAgICBwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gXCJwcm9kdWN0aW9uXCIgPyB3YXJuaW5nKCEodHlwZW9mIHBhdGggPT09ICdvYmplY3QnICYmIHBhdGguc3RhdGUgIT09IHVuZGVmaW5lZCAmJiBzdGF0ZSAhPT0gdW5kZWZpbmVkKSwgJ1lvdSBzaG91bGQgYXZvaWQgcHJvdmlkaW5nIGEgMm5kIHN0YXRlIGFyZ3VtZW50IHRvIHJlcGxhY2Ugd2hlbiB0aGUgMXN0ICcgKyAnYXJndW1lbnQgaXMgYSBsb2NhdGlvbi1saWtlIG9iamVjdCB0aGF0IGFscmVhZHkgaGFzIHN0YXRlOyBpdCBpcyBpZ25vcmVkJykgOiB2b2lkIDA7XG4gICAgdmFyIGFjdGlvbiA9ICdSRVBMQUNFJztcbiAgICB2YXIgbG9jYXRpb24gPSBjcmVhdGVMb2NhdGlvbihwYXRoLCBzdGF0ZSwgY3JlYXRlS2V5KCksIGhpc3RvcnkubG9jYXRpb24pO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAoIW9rKSByZXR1cm47XG4gICAgICBoaXN0b3J5LmVudHJpZXNbaGlzdG9yeS5pbmRleF0gPSBsb2NhdGlvbjtcbiAgICAgIHNldFN0YXRlKHtcbiAgICAgICAgYWN0aW9uOiBhY3Rpb24sXG4gICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvblxuICAgICAgfSk7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnbyhuKSB7XG4gICAgdmFyIG5leHRJbmRleCA9IGNsYW1wKGhpc3RvcnkuaW5kZXggKyBuLCAwLCBoaXN0b3J5LmVudHJpZXMubGVuZ3RoIC0gMSk7XG4gICAgdmFyIGFjdGlvbiA9ICdQT1AnO1xuICAgIHZhciBsb2NhdGlvbiA9IGhpc3RvcnkuZW50cmllc1tuZXh0SW5kZXhdO1xuICAgIHRyYW5zaXRpb25NYW5hZ2VyLmNvbmZpcm1UcmFuc2l0aW9uVG8obG9jYXRpb24sIGFjdGlvbiwgZ2V0VXNlckNvbmZpcm1hdGlvbiwgZnVuY3Rpb24gKG9rKSB7XG4gICAgICBpZiAob2spIHtcbiAgICAgICAgc2V0U3RhdGUoe1xuICAgICAgICAgIGFjdGlvbjogYWN0aW9uLFxuICAgICAgICAgIGxvY2F0aW9uOiBsb2NhdGlvbixcbiAgICAgICAgICBpbmRleDogbmV4dEluZGV4XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gTWltaWMgdGhlIGJlaGF2aW9yIG9mIERPTSBoaXN0b3JpZXMgYnlcbiAgICAgICAgLy8gY2F1c2luZyBhIHJlbmRlciBhZnRlciBhIGNhbmNlbGxlZCBQT1AuXG4gICAgICAgIHNldFN0YXRlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBnb0JhY2soKSB7XG4gICAgZ28oLTEpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ29Gb3J3YXJkKCkge1xuICAgIGdvKDEpO1xuICB9XG5cbiAgZnVuY3Rpb24gY2FuR28obikge1xuICAgIHZhciBuZXh0SW5kZXggPSBoaXN0b3J5LmluZGV4ICsgbjtcbiAgICByZXR1cm4gbmV4dEluZGV4ID49IDAgJiYgbmV4dEluZGV4IDwgaGlzdG9yeS5lbnRyaWVzLmxlbmd0aDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGJsb2NrKHByb21wdCkge1xuICAgIGlmIChwcm9tcHQgPT09IHZvaWQgMCkge1xuICAgICAgcHJvbXB0ID0gZmFsc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLnNldFByb21wdChwcm9tcHQpO1xuICB9XG5cbiAgZnVuY3Rpb24gbGlzdGVuKGxpc3RlbmVyKSB7XG4gICAgcmV0dXJuIHRyYW5zaXRpb25NYW5hZ2VyLmFwcGVuZExpc3RlbmVyKGxpc3RlbmVyKTtcbiAgfVxuXG4gIHZhciBoaXN0b3J5ID0ge1xuICAgIGxlbmd0aDogZW50cmllcy5sZW5ndGgsXG4gICAgYWN0aW9uOiAnUE9QJyxcbiAgICBsb2NhdGlvbjogZW50cmllc1tpbmRleF0sXG4gICAgaW5kZXg6IGluZGV4LFxuICAgIGVudHJpZXM6IGVudHJpZXMsXG4gICAgY3JlYXRlSHJlZjogY3JlYXRlSHJlZixcbiAgICBwdXNoOiBwdXNoLFxuICAgIHJlcGxhY2U6IHJlcGxhY2UsXG4gICAgZ286IGdvLFxuICAgIGdvQmFjazogZ29CYWNrLFxuICAgIGdvRm9yd2FyZDogZ29Gb3J3YXJkLFxuICAgIGNhbkdvOiBjYW5HbyxcbiAgICBibG9jazogYmxvY2ssXG4gICAgbGlzdGVuOiBsaXN0ZW5cbiAgfTtcbiAgcmV0dXJuIGhpc3Rvcnk7XG59XG5cbmV4cG9ydCB7IGNyZWF0ZUJyb3dzZXJIaXN0b3J5LCBjcmVhdGVIYXNoSGlzdG9yeSwgY3JlYXRlTWVtb3J5SGlzdG9yeSwgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsLCBwYXJzZVBhdGgsIGNyZWF0ZVBhdGggfTtcbiIsImltcG9ydCBjcmVhdGVOYW1lZENvbnRleHQgZnJvbSBcIi4vY3JlYXRlTmFtZUNvbnRleHRcIjtcblxuY29uc3QgaGlzdG9yeUNvbnRleHQgPSAvKiNfX1BVUkVfXyovIGNyZWF0ZU5hbWVkQ29udGV4dChcIlJvdXRlci1IaXN0b3J5XCIpO1xuZXhwb3J0IGRlZmF1bHQgaGlzdG9yeUNvbnRleHQ7XG4iLCIvLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tIFwibWluaS1jcmVhdGUtcmVhY3QtY29udGV4dFwiO1xuXG5jb25zdCBjcmVhdGVOYW1lZENvbnRleHQgPSBuYW1lID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVOYW1lZENvbnRleHQ7XG4iLCIvLyBUT0RPOiBSZXBsYWNlIHdpdGggUmVhY3QuY3JlYXRlQ29udGV4dCBvbmNlIHdlIGNhbiBhc3N1bWUgUmVhY3QgMTYrXG5pbXBvcnQgY3JlYXRlQ29udGV4dCBmcm9tIFwibWluaS1jcmVhdGUtcmVhY3QtY29udGV4dFwiO1xuXG5jb25zdCBjcmVhdGVOYW1lZENvbnRleHQgPSBuYW1lID0+IHtcbiAgY29uc3QgY29udGV4dCA9IGNyZWF0ZUNvbnRleHQoKTtcbiAgY29udGV4dC5kaXNwbGF5TmFtZSA9IG5hbWU7XG5cbiAgcmV0dXJuIGNvbnRleHQ7XG59O1xuXG5jb25zdCBjb250ZXh0ID0gLyojX19QVVJFX18qLyBjcmVhdGVOYW1lZENvbnRleHQoXCJSb3V0ZXJcIik7XG5leHBvcnQgZGVmYXVsdCBjb250ZXh0O1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgSGlzdG9yeUNvbnRleHQgZnJvbSBcIi4vSGlzdG9yeUNvbnRleHQuanNcIjtcbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgcHV0dGluZyBoaXN0b3J5IG9uIGNvbnRleHQuXG4gKi9cbmNsYXNzIFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHN0YXRpYyBjb21wdXRlUm9vdE1hdGNoKHBhdGhuYW1lKSB7XG4gICAgcmV0dXJuIHsgcGF0aDogXCIvXCIsIHVybDogXCIvXCIsIHBhcmFtczoge30sIGlzRXhhY3Q6IHBhdGhuYW1lID09PSBcIi9cIiB9O1xuICB9XG5cbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG5cbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgbG9jYXRpb246IHByb3BzLmhpc3RvcnkubG9jYXRpb25cbiAgICB9O1xuXG4gICAgLy8gVGhpcyBpcyBhIGJpdCBvZiBhIGhhY2suIFdlIGhhdmUgdG8gc3RhcnQgbGlzdGVuaW5nIGZvciBsb2NhdGlvblxuICAgIC8vIGNoYW5nZXMgaGVyZSBpbiB0aGUgY29uc3RydWN0b3IgaW4gY2FzZSB0aGVyZSBhcmUgYW55IDxSZWRpcmVjdD5zXG4gICAgLy8gb24gdGhlIGluaXRpYWwgcmVuZGVyLiBJZiB0aGVyZSBhcmUsIHRoZXkgd2lsbCByZXBsYWNlL3B1c2ggd2hlblxuICAgIC8vIHRoZXkgbW91bnQgYW5kIHNpbmNlIGNETSBmaXJlcyBpbiBjaGlsZHJlbiBiZWZvcmUgcGFyZW50cywgd2UgbWF5XG4gICAgLy8gZ2V0IGEgbmV3IGxvY2F0aW9uIGJlZm9yZSB0aGUgPFJvdXRlcj4gaXMgbW91bnRlZC5cbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLl9wZW5kaW5nTG9jYXRpb24gPSBudWxsO1xuXG4gICAgaWYgKCFwcm9wcy5zdGF0aWNDb250ZXh0KSB7XG4gICAgICB0aGlzLnVubGlzdGVuID0gcHJvcHMuaGlzdG9yeS5saXN0ZW4obG9jYXRpb24gPT4ge1xuICAgICAgICBpZiAodGhpcy5faXNNb3VudGVkKSB7XG4gICAgICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uIH0pO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRoaXMuX3BlbmRpbmdMb2NhdGlvbiA9IGxvY2F0aW9uO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSB0cnVlO1xuXG4gICAgaWYgKHRoaXMuX3BlbmRpbmdMb2NhdGlvbikge1xuICAgICAgdGhpcy5zZXRTdGF0ZSh7IGxvY2F0aW9uOiB0aGlzLl9wZW5kaW5nTG9jYXRpb24gfSk7XG4gICAgfVxuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMudW5saXN0ZW4pIHRoaXMudW5saXN0ZW4oKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgdmFsdWU9e3tcbiAgICAgICAgICBoaXN0b3J5OiB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICAgICAgbG9jYXRpb246IHRoaXMuc3RhdGUubG9jYXRpb24sXG4gICAgICAgICAgbWF0Y2g6IFJvdXRlci5jb21wdXRlUm9vdE1hdGNoKHRoaXMuc3RhdGUubG9jYXRpb24ucGF0aG5hbWUpLFxuICAgICAgICAgIHN0YXRpY0NvbnRleHQ6IHRoaXMucHJvcHMuc3RhdGljQ29udGV4dFxuICAgICAgICB9fVxuICAgICAgPlxuICAgICAgICA8SGlzdG9yeUNvbnRleHQuUHJvdmlkZXJcbiAgICAgICAgICBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbiB8fCBudWxsfVxuICAgICAgICAgIHZhbHVlPXt0aGlzLnByb3BzLmhpc3Rvcnl9XG4gICAgICAgIC8+XG4gICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBSb3V0ZXIucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBoaXN0b3J5OiBQcm9wVHlwZXMub2JqZWN0LmlzUmVxdWlyZWQsXG4gICAgc3RhdGljQ29udGV4dDogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFJvdXRlci5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgIHByZXZQcm9wcy5oaXN0b3J5ID09PSB0aGlzLnByb3BzLmhpc3RvcnksXG4gICAgICBcIllvdSBjYW5ub3QgY2hhbmdlIDxSb3V0ZXIgaGlzdG9yeT5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB7IGNyZWF0ZU1lbW9yeUhpc3RvcnkgYXMgY3JlYXRlSGlzdG9yeSB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXIgZnJvbSBcIi4vUm91dGVyLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIGEgPFJvdXRlcj4gdGhhdCBzdG9yZXMgbG9jYXRpb24gaW4gbWVtb3J5LlxuICovXG5jbGFzcyBNZW1vcnlSb3V0ZXIgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICBoaXN0b3J5ID0gY3JlYXRlSGlzdG9yeSh0aGlzLnByb3BzKTtcblxuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIDxSb3V0ZXIgaGlzdG9yeT17dGhpcy5oaXN0b3J5fSBjaGlsZHJlbj17dGhpcy5wcm9wcy5jaGlsZHJlbn0gLz47XG4gIH1cbn1cblxuaWYgKF9fREVWX18pIHtcbiAgTWVtb3J5Um91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBpbml0aWFsRW50cmllczogUHJvcFR5cGVzLmFycmF5LFxuICAgIGluaXRpYWxJbmRleDogUHJvcFR5cGVzLm51bWJlcixcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXIsXG4gICAgY2hpbGRyZW46IFByb3BUeXBlcy5ub2RlXG4gIH07XG5cbiAgTWVtb3J5Um91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8TWVtb3J5Um91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArXG4gICAgICAgIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgTWVtb3J5Um91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IE1lbW9yeVJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcblxuY2xhc3MgTGlmZWN5Y2xlIGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50IHtcbiAgY29tcG9uZW50RGlkTW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Nb3VudCkgdGhpcy5wcm9wcy5vbk1vdW50LmNhbGwodGhpcywgdGhpcyk7XG4gIH1cblxuICBjb21wb25lbnREaWRVcGRhdGUocHJldlByb3BzKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25VcGRhdGUpIHRoaXMucHJvcHMub25VcGRhdGUuY2FsbCh0aGlzLCB0aGlzLCBwcmV2UHJvcHMpO1xuICB9XG5cbiAgY29tcG9uZW50V2lsbFVubW91bnQoKSB7XG4gICAgaWYgKHRoaXMucHJvcHMub25Vbm1vdW50KSB0aGlzLnByb3BzLm9uVW5tb3VudC5jYWxsKHRoaXMsIHRoaXMpO1xuICB9XG5cbiAgcmVuZGVyKCkge1xuICAgIHJldHVybiBudWxsO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpZmVjeWNsZTtcbiIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgpIHtcbiAgaWYgKGNhY2hlW3BhdGhdKSByZXR1cm4gY2FjaGVbcGF0aF07XG5cbiAgY29uc3QgZ2VuZXJhdG9yID0gcGF0aFRvUmVnZXhwLmNvbXBpbGUocGF0aCk7XG5cbiAgaWYgKGNhY2hlQ291bnQgPCBjYWNoZUxpbWl0KSB7XG4gICAgY2FjaGVbcGF0aF0gPSBnZW5lcmF0b3I7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIGdlbmVyYXRvcjtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBnZW5lcmF0aW5nIGEgVVJMIHBhdGhuYW1lIGZyb20gYSBwYXRoIGFuZCBwYXJhbWV0ZXJzLlxuICovXG5mdW5jdGlvbiBnZW5lcmF0ZVBhdGgocGF0aCA9IFwiL1wiLCBwYXJhbXMgPSB7fSkge1xuICByZXR1cm4gcGF0aCA9PT0gXCIvXCIgPyBwYXRoIDogY29tcGlsZVBhdGgocGF0aCkocGFyYW1zLCB7IHByZXR0eTogdHJ1ZSB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2VuZXJhdGVQYXRoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHsgY3JlYXRlTG9jYXRpb24sIGxvY2F0aW9uc0FyZUVxdWFsIH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBMaWZlY3ljbGUgZnJvbSBcIi4vTGlmZWN5Y2xlLmpzXCI7XG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgZ2VuZXJhdGVQYXRoIGZyb20gXCIuL2dlbmVyYXRlUGF0aC5qc1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBuYXZpZ2F0aW5nIHByb2dyYW1tYXRpY2FsbHkgd2l0aCBhIGNvbXBvbmVudC5cbiAqL1xuZnVuY3Rpb24gUmVkaXJlY3QoeyBjb21wdXRlZE1hdGNoLCB0bywgcHVzaCA9IGZhbHNlIH0pIHtcbiAgcmV0dXJuIChcbiAgICA8Um91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSZWRpcmVjdD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgIGNvbnN0IHsgaGlzdG9yeSwgc3RhdGljQ29udGV4dCB9ID0gY29udGV4dDtcblxuICAgICAgICBjb25zdCBtZXRob2QgPSBwdXNoID8gaGlzdG9yeS5wdXNoIDogaGlzdG9yeS5yZXBsYWNlO1xuICAgICAgICBjb25zdCBsb2NhdGlvbiA9IGNyZWF0ZUxvY2F0aW9uKFxuICAgICAgICAgIGNvbXB1dGVkTWF0Y2hcbiAgICAgICAgICAgID8gdHlwZW9mIHRvID09PSBcInN0cmluZ1wiXG4gICAgICAgICAgICAgID8gZ2VuZXJhdGVQYXRoKHRvLCBjb21wdXRlZE1hdGNoLnBhcmFtcylcbiAgICAgICAgICAgICAgOiB7XG4gICAgICAgICAgICAgICAgICAuLi50byxcbiAgICAgICAgICAgICAgICAgIHBhdGhuYW1lOiBnZW5lcmF0ZVBhdGgodG8ucGF0aG5hbWUsIGNvbXB1dGVkTWF0Y2gucGFyYW1zKVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIDogdG9cbiAgICAgICAgKTtcblxuICAgICAgICAvLyBXaGVuIHJlbmRlcmluZyBpbiBhIHN0YXRpYyBjb250ZXh0LFxuICAgICAgICAvLyBzZXQgdGhlIG5ldyBsb2NhdGlvbiBpbW1lZGlhdGVseS5cbiAgICAgICAgaWYgKHN0YXRpY0NvbnRleHQpIHtcbiAgICAgICAgICBtZXRob2QobG9jYXRpb24pO1xuICAgICAgICAgIHJldHVybiBudWxsO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIChcbiAgICAgICAgICA8TGlmZWN5Y2xlXG4gICAgICAgICAgICBvbk1vdW50PXsoKSA9PiB7XG4gICAgICAgICAgICAgIG1ldGhvZChsb2NhdGlvbik7XG4gICAgICAgICAgICB9fVxuICAgICAgICAgICAgb25VcGRhdGU9eyhzZWxmLCBwcmV2UHJvcHMpID0+IHtcbiAgICAgICAgICAgICAgY29uc3QgcHJldkxvY2F0aW9uID0gY3JlYXRlTG9jYXRpb24ocHJldlByb3BzLnRvKTtcbiAgICAgICAgICAgICAgaWYgKFxuICAgICAgICAgICAgICAgICFsb2NhdGlvbnNBcmVFcXVhbChwcmV2TG9jYXRpb24sIHtcbiAgICAgICAgICAgICAgICAgIC4uLmxvY2F0aW9uLFxuICAgICAgICAgICAgICAgICAga2V5OiBwcmV2TG9jYXRpb24ua2V5XG4gICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfX1cbiAgICAgICAgICAgIHRvPXt0b31cbiAgICAgICAgICAvPlxuICAgICAgICApO1xuICAgICAgfX1cbiAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICk7XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJlZGlyZWN0LnByb3BUeXBlcyA9IHtcbiAgICBwdXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBmcm9tOiBQcm9wVHlwZXMuc3RyaW5nLFxuICAgIHRvOiBQcm9wVHlwZXMub25lT2ZUeXBlKFtQcm9wVHlwZXMuc3RyaW5nLCBQcm9wVHlwZXMub2JqZWN0XSkuaXNSZXF1aXJlZFxuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBSZWRpcmVjdDtcbiIsImltcG9ydCBwYXRoVG9SZWdleHAgZnJvbSBcInBhdGgtdG8tcmVnZXhwXCI7XG5cbmNvbnN0IGNhY2hlID0ge307XG5jb25zdCBjYWNoZUxpbWl0ID0gMTAwMDA7XG5sZXQgY2FjaGVDb3VudCA9IDA7XG5cbmZ1bmN0aW9uIGNvbXBpbGVQYXRoKHBhdGgsIG9wdGlvbnMpIHtcbiAgY29uc3QgY2FjaGVLZXkgPSBgJHtvcHRpb25zLmVuZH0ke29wdGlvbnMuc3RyaWN0fSR7b3B0aW9ucy5zZW5zaXRpdmV9YDtcbiAgY29uc3QgcGF0aENhY2hlID0gY2FjaGVbY2FjaGVLZXldIHx8IChjYWNoZVtjYWNoZUtleV0gPSB7fSk7XG5cbiAgaWYgKHBhdGhDYWNoZVtwYXRoXSkgcmV0dXJuIHBhdGhDYWNoZVtwYXRoXTtcblxuICBjb25zdCBrZXlzID0gW107XG4gIGNvbnN0IHJlZ2V4cCA9IHBhdGhUb1JlZ2V4cChwYXRoLCBrZXlzLCBvcHRpb25zKTtcbiAgY29uc3QgcmVzdWx0ID0geyByZWdleHAsIGtleXMgfTtcblxuICBpZiAoY2FjaGVDb3VudCA8IGNhY2hlTGltaXQpIHtcbiAgICBwYXRoQ2FjaGVbcGF0aF0gPSByZXN1bHQ7XG4gICAgY2FjaGVDb3VudCsrO1xuICB9XG5cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuLyoqXG4gKiBQdWJsaWMgQVBJIGZvciBtYXRjaGluZyBhIFVSTCBwYXRobmFtZSB0byBhIHBhdGguXG4gKi9cbmZ1bmN0aW9uIG1hdGNoUGF0aChwYXRobmFtZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiB8fCBBcnJheS5pc0FycmF5KG9wdGlvbnMpKSB7XG4gICAgb3B0aW9ucyA9IHsgcGF0aDogb3B0aW9ucyB9O1xuICB9XG5cbiAgY29uc3QgeyBwYXRoLCBleGFjdCA9IGZhbHNlLCBzdHJpY3QgPSBmYWxzZSwgc2Vuc2l0aXZlID0gZmFsc2UgfSA9IG9wdGlvbnM7XG5cbiAgY29uc3QgcGF0aHMgPSBbXS5jb25jYXQocGF0aCk7XG5cbiAgcmV0dXJuIHBhdGhzLnJlZHVjZSgobWF0Y2hlZCwgcGF0aCkgPT4ge1xuICAgIGlmICghcGF0aCAmJiBwYXRoICE9PSBcIlwiKSByZXR1cm4gbnVsbDtcbiAgICBpZiAobWF0Y2hlZCkgcmV0dXJuIG1hdGNoZWQ7XG5cbiAgICBjb25zdCB7IHJlZ2V4cCwga2V5cyB9ID0gY29tcGlsZVBhdGgocGF0aCwge1xuICAgICAgZW5kOiBleGFjdCxcbiAgICAgIHN0cmljdCxcbiAgICAgIHNlbnNpdGl2ZVxuICAgIH0pO1xuICAgIGNvbnN0IG1hdGNoID0gcmVnZXhwLmV4ZWMocGF0aG5hbWUpO1xuXG4gICAgaWYgKCFtYXRjaCkgcmV0dXJuIG51bGw7XG5cbiAgICBjb25zdCBbdXJsLCAuLi52YWx1ZXNdID0gbWF0Y2g7XG4gICAgY29uc3QgaXNFeGFjdCA9IHBhdGhuYW1lID09PSB1cmw7XG5cbiAgICBpZiAoZXhhY3QgJiYgIWlzRXhhY3QpIHJldHVybiBudWxsO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIHBhdGgsIC8vIHRoZSBwYXRoIHVzZWQgdG8gbWF0Y2hcbiAgICAgIHVybDogcGF0aCA9PT0gXCIvXCIgJiYgdXJsID09PSBcIlwiID8gXCIvXCIgOiB1cmwsIC8vIHRoZSBtYXRjaGVkIHBvcnRpb24gb2YgdGhlIFVSTFxuICAgICAgaXNFeGFjdCwgLy8gd2hldGhlciBvciBub3Qgd2UgbWF0Y2hlZCBleGFjdGx5XG4gICAgICBwYXJhbXM6IGtleXMucmVkdWNlKChtZW1vLCBrZXksIGluZGV4KSA9PiB7XG4gICAgICAgIG1lbW9ba2V5Lm5hbWVdID0gdmFsdWVzW2luZGV4XTtcbiAgICAgICAgcmV0dXJuIG1lbW87XG4gICAgICB9LCB7fSlcbiAgICB9O1xuICB9LCBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWF0Y2hQYXRoO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0IHsgaXNWYWxpZEVsZW1lbnRUeXBlIH0gZnJvbSBcInJlYWN0LWlzXCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyQ29udGV4dCBmcm9tIFwiLi9Sb3V0ZXJDb250ZXh0LmpzXCI7XG5pbXBvcnQgbWF0Y2hQYXRoIGZyb20gXCIuL21hdGNoUGF0aC5qc1wiO1xuXG5mdW5jdGlvbiBpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pIHtcbiAgcmV0dXJuIFJlYWN0LkNoaWxkcmVuLmNvdW50KGNoaWxkcmVuKSA9PT0gMDtcbn1cblxuZnVuY3Rpb24gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgcGF0aCkge1xuICBjb25zdCB2YWx1ZSA9IGNoaWxkcmVuKHByb3BzKTtcblxuICB3YXJuaW5nKFxuICAgIHZhbHVlICE9PSB1bmRlZmluZWQsXG4gICAgXCJZb3UgcmV0dXJuZWQgYHVuZGVmaW5lZGAgZnJvbSB0aGUgYGNoaWxkcmVuYCBmdW5jdGlvbiBvZiBcIiArXG4gICAgICBgPFJvdXRlJHtwYXRoID8gYCBwYXRoPVwiJHtwYXRofVwiYCA6IFwiXCJ9PiwgYnV0IHlvdSBgICtcbiAgICAgIFwic2hvdWxkIGhhdmUgcmV0dXJuZWQgYSBSZWFjdCBlbGVtZW50IG9yIGBudWxsYFwiXG4gICk7XG5cbiAgcmV0dXJuIHZhbHVlIHx8IG51bGw7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIG1hdGNoaW5nIGEgc2luZ2xlIHBhdGggYW5kIHJlbmRlcmluZy5cbiAqL1xuY2xhc3MgUm91dGUgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQge1xuICByZW5kZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxSb3V0ZT4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSB0aGlzLnByb3BzLmNvbXB1dGVkTWF0Y2hcbiAgICAgICAgICAgID8gdGhpcy5wcm9wcy5jb21wdXRlZE1hdGNoIC8vIDxTd2l0Y2g+IGFscmVhZHkgY29tcHV0ZWQgdGhlIG1hdGNoIGZvciB1c1xuICAgICAgICAgICAgOiB0aGlzLnByb3BzLnBhdGhcbiAgICAgICAgICAgID8gbWF0Y2hQYXRoKGxvY2F0aW9uLnBhdGhuYW1lLCB0aGlzLnByb3BzKVxuICAgICAgICAgICAgOiBjb250ZXh0Lm1hdGNoO1xuXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSB7IC4uLmNvbnRleHQsIGxvY2F0aW9uLCBtYXRjaCB9O1xuXG4gICAgICAgICAgbGV0IHsgY2hpbGRyZW4sIGNvbXBvbmVudCwgcmVuZGVyIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgICAgICAgLy8gUHJlYWN0IHVzZXMgYW4gZW1wdHkgYXJyYXkgYXMgY2hpbGRyZW4gYnlcbiAgICAgICAgICAvLyBkZWZhdWx0LCBzbyB1c2UgbnVsbCBpZiB0aGF0J3MgdGhlIGNhc2UuXG4gICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pICYmIGNoaWxkcmVuLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgY2hpbGRyZW4gPSBudWxsO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiAoXG4gICAgICAgICAgICA8Um91dGVyQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17cHJvcHN9PlxuICAgICAgICAgICAgICB7cHJvcHMubWF0Y2hcbiAgICAgICAgICAgICAgICA/IGNoaWxkcmVuXG4gICAgICAgICAgICAgICAgICA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gXCJmdW5jdGlvblwiXG4gICAgICAgICAgICAgICAgICAgID8gX19ERVZfX1xuICAgICAgICAgICAgICAgICAgICAgID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgdGhpcy5wcm9wcy5wYXRoKVxuICAgICAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW4ocHJvcHMpXG4gICAgICAgICAgICAgICAgICAgIDogY2hpbGRyZW5cbiAgICAgICAgICAgICAgICAgIDogY29tcG9uZW50XG4gICAgICAgICAgICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcylcbiAgICAgICAgICAgICAgICAgIDogcmVuZGVyXG4gICAgICAgICAgICAgICAgICA/IHJlbmRlcihwcm9wcylcbiAgICAgICAgICAgICAgICAgIDogbnVsbFxuICAgICAgICAgICAgICAgIDogdHlwZW9mIGNoaWxkcmVuID09PSBcImZ1bmN0aW9uXCJcbiAgICAgICAgICAgICAgICA/IF9fREVWX19cbiAgICAgICAgICAgICAgICAgID8gZXZhbENoaWxkcmVuRGV2KGNoaWxkcmVuLCBwcm9wcywgdGhpcy5wcm9wcy5wYXRoKVxuICAgICAgICAgICAgICAgICAgOiBjaGlsZHJlbihwcm9wcylcbiAgICAgICAgICAgICAgICA6IG51bGx9XG4gICAgICAgICAgICA8L1JvdXRlckNvbnRleHQuUHJvdmlkZXI+XG4gICAgICAgICAgKTtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFJvdXRlLnByb3BUeXBlcyA9IHtcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLmZ1bmMsIFByb3BUeXBlcy5ub2RlXSksXG4gICAgY29tcG9uZW50OiAocHJvcHMsIHByb3BOYW1lKSA9PiB7XG4gICAgICBpZiAocHJvcHNbcHJvcE5hbWVdICYmICFpc1ZhbGlkRWxlbWVudFR5cGUocHJvcHNbcHJvcE5hbWVdKSkge1xuICAgICAgICByZXR1cm4gbmV3IEVycm9yKFxuICAgICAgICAgIGBJbnZhbGlkIHByb3AgJ2NvbXBvbmVudCcgc3VwcGxpZWQgdG8gJ1JvdXRlJzogdGhlIHByb3AgaXMgbm90IGEgdmFsaWQgUmVhY3QgY29tcG9uZW50YFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGxvY2F0aW9uOiBQcm9wVHlwZXMub2JqZWN0LFxuICAgIHBhdGg6IFByb3BUeXBlcy5vbmVPZlR5cGUoW1xuICAgICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICAgIFByb3BUeXBlcy5hcnJheU9mKFByb3BUeXBlcy5zdHJpbmcpXG4gICAgXSksXG4gICAgcmVuZGVyOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2xcbiAgfTtcblxuICBSb3V0ZS5wcm90b3R5cGUuY29tcG9uZW50RGlkTW91bnQgPSBmdW5jdGlvbigpIHtcbiAgICB3YXJuaW5nKFxuICAgICAgIShcbiAgICAgICAgdGhpcy5wcm9wcy5jaGlsZHJlbiAmJlxuICAgICAgICAhaXNFbXB0eUNoaWxkcmVuKHRoaXMucHJvcHMuY2hpbGRyZW4pICYmXG4gICAgICAgIHRoaXMucHJvcHMuY29tcG9uZW50XG4gICAgICApLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSBjaGlsZHJlbj4gaW4gdGhlIHNhbWUgcm91dGU7IDxSb3V0ZSBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZFwiXG4gICAgKTtcblxuICAgIHdhcm5pbmcoXG4gICAgICAhKFxuICAgICAgICB0aGlzLnByb3BzLmNoaWxkcmVuICYmXG4gICAgICAgICFpc0VtcHR5Q2hpbGRyZW4odGhpcy5wcm9wcy5jaGlsZHJlbikgJiZcbiAgICAgICAgdGhpcy5wcm9wcy5yZW5kZXJcbiAgICAgICksXG4gICAgICBcIllvdSBzaG91bGQgbm90IHVzZSA8Um91dGUgcmVuZGVyPiBhbmQgPFJvdXRlIGNoaWxkcmVuPiBpbiB0aGUgc2FtZSByb3V0ZTsgPFJvdXRlIHJlbmRlcj4gd2lsbCBiZSBpZ25vcmVkXCJcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5jb21wb25lbnQgJiYgdGhpcy5wcm9wcy5yZW5kZXIpLFxuICAgICAgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFJvdXRlIGNvbXBvbmVudD4gYW5kIDxSb3V0ZSByZW5kZXI+IGluIHRoZSBzYW1lIHJvdXRlOyA8Um91dGUgcmVuZGVyPiB3aWxsIGJlIGlnbm9yZWRcIlxuICAgICk7XG4gIH07XG5cbiAgUm91dGUucHJvdG90eXBlLmNvbXBvbmVudERpZFVwZGF0ZSA9IGZ1bmN0aW9uKHByZXZQcm9wcykge1xuICAgIHdhcm5pbmcoXG4gICAgICAhKHRoaXMucHJvcHMubG9jYXRpb24gJiYgIXByZXZQcm9wcy5sb2NhdGlvbiksXG4gICAgICAnPFJvdXRlPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8Um91dGU+IGVsZW1lbnRzIHNob3VsZCBub3QgY2hhbmdlIGZyb20gY29udHJvbGxlZCB0byB1bmNvbnRyb2xsZWQgKG9yIHZpY2UgdmVyc2EpLiBZb3UgcHJvdmlkZWQgYSBcImxvY2F0aW9uXCIgcHJvcCBpbml0aWFsbHkgYnV0IG9taXR0ZWQgaXQgb24gYSBzdWJzZXF1ZW50IHJlbmRlci4nXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgUm91dGU7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgUHJvcFR5cGVzIGZyb20gXCJwcm9wLXR5cGVzXCI7XG5pbXBvcnQgeyBjcmVhdGVMb2NhdGlvbiwgY3JlYXRlUGF0aCB9IGZyb20gXCJoaXN0b3J5XCI7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gXCJ0aW55LWludmFyaWFudFwiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG5pbXBvcnQgUm91dGVyIGZyb20gXCIuL1JvdXRlci5qc1wiO1xuXG5mdW5jdGlvbiBhZGRMZWFkaW5nU2xhc2gocGF0aCkge1xuICByZXR1cm4gcGF0aC5jaGFyQXQoMCkgPT09IFwiL1wiID8gcGF0aCA6IFwiL1wiICsgcGF0aDtcbn1cblxuZnVuY3Rpb24gYWRkQmFzZW5hbWUoYmFzZW5hbWUsIGxvY2F0aW9uKSB7XG4gIGlmICghYmFzZW5hbWUpIHJldHVybiBsb2NhdGlvbjtcblxuICByZXR1cm4ge1xuICAgIC4uLmxvY2F0aW9uLFxuICAgIHBhdGhuYW1lOiBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpICsgbG9jYXRpb24ucGF0aG5hbWVcbiAgfTtcbn1cblxuZnVuY3Rpb24gc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgbG9jYXRpb24pIHtcbiAgaWYgKCFiYXNlbmFtZSkgcmV0dXJuIGxvY2F0aW9uO1xuXG4gIGNvbnN0IGJhc2UgPSBhZGRMZWFkaW5nU2xhc2goYmFzZW5hbWUpO1xuXG4gIGlmIChsb2NhdGlvbi5wYXRobmFtZS5pbmRleE9mKGJhc2UpICE9PSAwKSByZXR1cm4gbG9jYXRpb247XG5cbiAgcmV0dXJuIHtcbiAgICAuLi5sb2NhdGlvbixcbiAgICBwYXRobmFtZTogbG9jYXRpb24ucGF0aG5hbWUuc3Vic3RyKGJhc2UubGVuZ3RoKVxuICB9O1xufVxuXG5mdW5jdGlvbiBjcmVhdGVVUkwobG9jYXRpb24pIHtcbiAgcmV0dXJuIHR5cGVvZiBsb2NhdGlvbiA9PT0gXCJzdHJpbmdcIiA/IGxvY2F0aW9uIDogY3JlYXRlUGF0aChsb2NhdGlvbik7XG59XG5cbmZ1bmN0aW9uIHN0YXRpY0hhbmRsZXIobWV0aG9kTmFtZSkge1xuICByZXR1cm4gKCkgPT4ge1xuICAgIGludmFyaWFudChmYWxzZSwgXCJZb3UgY2Fubm90ICVzIHdpdGggPFN0YXRpY1JvdXRlcj5cIiwgbWV0aG9kTmFtZSk7XG4gIH07XG59XG5cbmZ1bmN0aW9uIG5vb3AoKSB7fVxuXG4vKipcbiAqIFRoZSBwdWJsaWMgdG9wLWxldmVsIEFQSSBmb3IgYSBcInN0YXRpY1wiIDxSb3V0ZXI+LCBzby1jYWxsZWQgYmVjYXVzZSBpdFxuICogY2FuJ3QgYWN0dWFsbHkgY2hhbmdlIHRoZSBjdXJyZW50IGxvY2F0aW9uLiBJbnN0ZWFkLCBpdCBqdXN0IHJlY29yZHNcbiAqIGxvY2F0aW9uIGNoYW5nZXMgaW4gYSBjb250ZXh0IG9iamVjdC4gVXNlZnVsIG1haW5seSBpbiB0ZXN0aW5nIGFuZFxuICogc2VydmVyLXJlbmRlcmluZyBzY2VuYXJpb3MuXG4gKi9cbmNsYXNzIFN0YXRpY1JvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIG5hdmlnYXRlVG8obG9jYXRpb24sIGFjdGlvbikge1xuICAgIGNvbnN0IHsgYmFzZW5hbWUgPSBcIlwiLCBjb250ZXh0ID0ge30gfSA9IHRoaXMucHJvcHM7XG4gICAgY29udGV4dC5hY3Rpb24gPSBhY3Rpb247XG4gICAgY29udGV4dC5sb2NhdGlvbiA9IGFkZEJhc2VuYW1lKGJhc2VuYW1lLCBjcmVhdGVMb2NhdGlvbihsb2NhdGlvbikpO1xuICAgIGNvbnRleHQudXJsID0gY3JlYXRlVVJMKGNvbnRleHQubG9jYXRpb24pO1xuICB9XG5cbiAgaGFuZGxlUHVzaCA9IGxvY2F0aW9uID0+IHRoaXMubmF2aWdhdGVUbyhsb2NhdGlvbiwgXCJQVVNIXCIpO1xuICBoYW5kbGVSZXBsYWNlID0gbG9jYXRpb24gPT4gdGhpcy5uYXZpZ2F0ZVRvKGxvY2F0aW9uLCBcIlJFUExBQ0VcIik7XG4gIGhhbmRsZUxpc3RlbiA9ICgpID0+IG5vb3A7XG4gIGhhbmRsZUJsb2NrID0gKCkgPT4gbm9vcDtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgeyBiYXNlbmFtZSA9IFwiXCIsIGNvbnRleHQgPSB7fSwgbG9jYXRpb24gPSBcIi9cIiwgLi4ucmVzdCB9ID0gdGhpcy5wcm9wcztcblxuICAgIGNvbnN0IGhpc3RvcnkgPSB7XG4gICAgICBjcmVhdGVIcmVmOiBwYXRoID0+IGFkZExlYWRpbmdTbGFzaChiYXNlbmFtZSArIGNyZWF0ZVVSTChwYXRoKSksXG4gICAgICBhY3Rpb246IFwiUE9QXCIsXG4gICAgICBsb2NhdGlvbjogc3RyaXBCYXNlbmFtZShiYXNlbmFtZSwgY3JlYXRlTG9jYXRpb24obG9jYXRpb24pKSxcbiAgICAgIHB1c2g6IHRoaXMuaGFuZGxlUHVzaCxcbiAgICAgIHJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGdvOiBzdGF0aWNIYW5kbGVyKFwiZ29cIiksXG4gICAgICBnb0JhY2s6IHN0YXRpY0hhbmRsZXIoXCJnb0JhY2tcIiksXG4gICAgICBnb0ZvcndhcmQ6IHN0YXRpY0hhbmRsZXIoXCJnb0ZvcndhcmRcIiksXG4gICAgICBsaXN0ZW46IHRoaXMuaGFuZGxlTGlzdGVuLFxuICAgICAgYmxvY2s6IHRoaXMuaGFuZGxlQmxvY2tcbiAgICB9O1xuXG4gICAgcmV0dXJuIDxSb3V0ZXIgey4uLnJlc3R9IGhpc3Rvcnk9e2hpc3Rvcnl9IHN0YXRpY0NvbnRleHQ9e2NvbnRleHR9IC8+O1xuICB9XG59XG5cbmlmIChfX0RFVl9fKSB7XG4gIFN0YXRpY1JvdXRlci5wcm9wVHlwZXMgPSB7XG4gICAgYmFzZW5hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgY29udGV4dDogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9uZU9mVHlwZShbUHJvcFR5cGVzLnN0cmluZywgUHJvcFR5cGVzLm9iamVjdF0pXG4gIH07XG5cbiAgU3RhdGljUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8U3RhdGljUm91dGVyPiBpZ25vcmVzIHRoZSBoaXN0b3J5IHByb3AuIFRvIHVzZSBhIGN1c3RvbSBoaXN0b3J5LCBcIiArXG4gICAgICAgIFwidXNlIGBpbXBvcnQgeyBSb3V0ZXIgfWAgaW5zdGVhZCBvZiBgaW1wb3J0IHsgU3RhdGljUm91dGVyIGFzIFJvdXRlciB9YC5cIlxuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN0YXRpY1JvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQgd2FybmluZyBmcm9tIFwidGlueS13YXJuaW5nXCI7XG5cbmltcG9ydCBSb3V0ZXJDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBtYXRjaFBhdGggZnJvbSBcIi4vbWF0Y2hQYXRoLmpzXCI7XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyB0aGUgZmlyc3QgPFJvdXRlPiB0aGF0IG1hdGNoZXMuXG4gKi9cbmNsYXNzIFN3aXRjaCBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPFN3aXRjaD4gb3V0c2lkZSBhIDxSb3V0ZXI+XCIpO1xuXG4gICAgICAgICAgY29uc3QgbG9jYXRpb24gPSB0aGlzLnByb3BzLmxvY2F0aW9uIHx8IGNvbnRleHQubG9jYXRpb247XG5cbiAgICAgICAgICBsZXQgZWxlbWVudCwgbWF0Y2g7XG5cbiAgICAgICAgICAvLyBXZSB1c2UgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCBpbnN0ZWFkIG9mIFJlYWN0LkNoaWxkcmVuLnRvQXJyYXkoKS5maW5kKClcbiAgICAgICAgICAvLyBoZXJlIGJlY2F1c2UgdG9BcnJheSBhZGRzIGtleXMgdG8gYWxsIGNoaWxkIGVsZW1lbnRzIGFuZCB3ZSBkbyBub3Qgd2FudFxuICAgICAgICAgIC8vIHRvIHRyaWdnZXIgYW4gdW5tb3VudC9yZW1vdW50IGZvciB0d28gPFJvdXRlPnMgdGhhdCByZW5kZXIgdGhlIHNhbWVcbiAgICAgICAgICAvLyBjb21wb25lbnQgYXQgZGlmZmVyZW50IFVSTHMuXG4gICAgICAgICAgUmVhY3QuQ2hpbGRyZW4uZm9yRWFjaCh0aGlzLnByb3BzLmNoaWxkcmVuLCBjaGlsZCA9PiB7XG4gICAgICAgICAgICBpZiAobWF0Y2ggPT0gbnVsbCAmJiBSZWFjdC5pc1ZhbGlkRWxlbWVudChjaGlsZCkpIHtcbiAgICAgICAgICAgICAgZWxlbWVudCA9IGNoaWxkO1xuXG4gICAgICAgICAgICAgIGNvbnN0IHBhdGggPSBjaGlsZC5wcm9wcy5wYXRoIHx8IGNoaWxkLnByb3BzLmZyb207XG5cbiAgICAgICAgICAgICAgbWF0Y2ggPSBwYXRoXG4gICAgICAgICAgICAgICAgPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHsgLi4uY2hpbGQucHJvcHMsIHBhdGggfSlcbiAgICAgICAgICAgICAgICA6IGNvbnRleHQubWF0Y2g7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gbWF0Y2hcbiAgICAgICAgICAgID8gUmVhY3QuY2xvbmVFbGVtZW50KGVsZW1lbnQsIHsgbG9jYXRpb24sIGNvbXB1dGVkTWF0Y2g6IG1hdGNoIH0pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBTd2l0Y2gucHJvcFR5cGVzID0ge1xuICAgIGNoaWxkcmVuOiBQcm9wVHlwZXMubm9kZSxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdFxuICB9O1xuXG4gIFN3aXRjaC5wcm90b3R5cGUuY29tcG9uZW50RGlkVXBkYXRlID0gZnVuY3Rpb24ocHJldlByb3BzKSB7XG4gICAgd2FybmluZyhcbiAgICAgICEodGhpcy5wcm9wcy5sb2NhdGlvbiAmJiAhcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIHVuY29udHJvbGxlZCB0byBjb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IGluaXRpYWxseSB1c2VkIG5vIFwibG9jYXRpb25cIiBwcm9wIGFuZCB0aGVuIHByb3ZpZGVkIG9uZSBvbiBhIHN1YnNlcXVlbnQgcmVuZGVyLidcbiAgICApO1xuXG4gICAgd2FybmluZyhcbiAgICAgICEoIXRoaXMucHJvcHMubG9jYXRpb24gJiYgcHJldlByb3BzLmxvY2F0aW9uKSxcbiAgICAgICc8U3dpdGNoPiBlbGVtZW50cyBzaG91bGQgbm90IGNoYW5nZSBmcm9tIGNvbnRyb2xsZWQgdG8gdW5jb250cm9sbGVkIChvciB2aWNlIHZlcnNhKS4gWW91IHByb3ZpZGVkIGEgXCJsb2NhdGlvblwiIHByb3AgaW5pdGlhbGx5IGJ1dCBvbWl0dGVkIGl0IG9uIGEgc3Vic2VxdWVudCByZW5kZXIuJ1xuICAgICk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IFN3aXRjaDtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5cbmltcG9ydCBDb250ZXh0IGZyb20gXCIuL1JvdXRlckNvbnRleHQuanNcIjtcbmltcG9ydCBIaXN0b3J5Q29udGV4dCBmcm9tIFwiLi9IaXN0b3J5Q29udGV4dC5qc1wiO1xuaW1wb3J0IG1hdGNoUGF0aCBmcm9tIFwiLi9tYXRjaFBhdGguanNcIjtcblxuY29uc3QgdXNlQ29udGV4dCA9IFJlYWN0LnVzZUNvbnRleHQ7XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VIaXN0b3J5KCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VIaXN0b3J5KClcIlxuICAgICk7XG4gIH1cblxuICByZXR1cm4gdXNlQ29udGV4dChIaXN0b3J5Q29udGV4dCk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VMb2NhdGlvbigpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlTG9jYXRpb24oKVwiXG4gICAgKTtcbiAgfVxuXG4gIHJldHVybiB1c2VDb250ZXh0KENvbnRleHQpLmxvY2F0aW9uO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gdXNlUGFyYW1zKCkge1xuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIHR5cGVvZiB1c2VDb250ZXh0ID09PSBcImZ1bmN0aW9uXCIsXG4gICAgICBcIllvdSBtdXN0IHVzZSBSZWFjdCA+PSAxNi44IGluIG9yZGVyIHRvIHVzZSB1c2VQYXJhbXMoKVwiXG4gICAgKTtcbiAgfVxuXG4gIGNvbnN0IG1hdGNoID0gdXNlQ29udGV4dChDb250ZXh0KS5tYXRjaDtcbiAgcmV0dXJuIG1hdGNoID8gbWF0Y2gucGFyYW1zIDoge307XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VSb3V0ZU1hdGNoKHBhdGgpIHtcbiAgaWYgKF9fREVWX18pIHtcbiAgICBpbnZhcmlhbnQoXG4gICAgICB0eXBlb2YgdXNlQ29udGV4dCA9PT0gXCJmdW5jdGlvblwiLFxuICAgICAgXCJZb3UgbXVzdCB1c2UgUmVhY3QgPj0gMTYuOCBpbiBvcmRlciB0byB1c2UgdXNlUm91dGVNYXRjaCgpXCJcbiAgICApO1xuICB9XG5cbiAgY29uc3QgbG9jYXRpb24gPSB1c2VMb2NhdGlvbigpO1xuICBjb25zdCBtYXRjaCA9IHVzZUNvbnRleHQoQ29udGV4dCkubWF0Y2g7XG5cbiAgcmV0dXJuIHBhdGggPyBtYXRjaFBhdGgobG9jYXRpb24ucGF0aG5hbWUsIHBhdGgpIDogbWF0Y2g7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBSb3V0ZXIgfSBmcm9tIFwicmVhY3Qtcm91dGVyXCI7XG5pbXBvcnQgeyBjcmVhdGVCcm93c2VySGlzdG9yeSBhcyBjcmVhdGVIaXN0b3J5IH0gZnJvbSBcImhpc3RvcnlcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCB3YXJuaW5nIGZyb20gXCJ0aW55LXdhcm5pbmdcIjtcblxuLyoqXG4gKiBUaGUgcHVibGljIEFQSSBmb3IgYSA8Um91dGVyPiB0aGF0IHVzZXMgSFRNTDUgaGlzdG9yeS5cbiAqL1xuY2xhc3MgQnJvd3NlclJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBCcm93c2VyUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZm9yY2VSZWZyZXNoOiBQcm9wVHlwZXMuYm9vbCxcbiAgICBnZXRVc2VyQ29uZmlybWF0aW9uOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBrZXlMZW5ndGg6IFByb3BUeXBlcy5udW1iZXJcbiAgfTtcblxuICBCcm93c2VyUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8QnJvd3NlclJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEJyb3dzZXJSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgQnJvd3NlclJvdXRlcjtcbiIsImltcG9ydCBSZWFjdCBmcm9tIFwicmVhY3RcIjtcbmltcG9ydCB7IFJvdXRlciB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCB7IGNyZWF0ZUhhc2hIaXN0b3J5IGFzIGNyZWF0ZUhpc3RvcnkgfSBmcm9tIFwiaGlzdG9yeVwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IHdhcm5pbmcgZnJvbSBcInRpbnktd2FybmluZ1wiO1xuXG4vKipcbiAqIFRoZSBwdWJsaWMgQVBJIGZvciBhIDxSb3V0ZXI+IHRoYXQgdXNlcyB3aW5kb3cubG9jYXRpb24uaGFzaC5cbiAqL1xuY2xhc3MgSGFzaFJvdXRlciBleHRlbmRzIFJlYWN0LkNvbXBvbmVudCB7XG4gIGhpc3RvcnkgPSBjcmVhdGVIaXN0b3J5KHRoaXMucHJvcHMpO1xuXG4gIHJlbmRlcigpIHtcbiAgICByZXR1cm4gPFJvdXRlciBoaXN0b3J5PXt0aGlzLmhpc3Rvcnl9IGNoaWxkcmVuPXt0aGlzLnByb3BzLmNoaWxkcmVufSAvPjtcbiAgfVxufVxuXG5pZiAoX19ERVZfXykge1xuICBIYXNoUm91dGVyLnByb3BUeXBlcyA9IHtcbiAgICBiYXNlbmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBjaGlsZHJlbjogUHJvcFR5cGVzLm5vZGUsXG4gICAgZ2V0VXNlckNvbmZpcm1hdGlvbjogUHJvcFR5cGVzLmZ1bmMsXG4gICAgaGFzaFR5cGU6IFByb3BUeXBlcy5vbmVPZihbXCJoYXNoYmFuZ1wiLCBcIm5vc2xhc2hcIiwgXCJzbGFzaFwiXSlcbiAgfTtcblxuICBIYXNoUm91dGVyLnByb3RvdHlwZS5jb21wb25lbnREaWRNb3VudCA9IGZ1bmN0aW9uKCkge1xuICAgIHdhcm5pbmcoXG4gICAgICAhdGhpcy5wcm9wcy5oaXN0b3J5LFxuICAgICAgXCI8SGFzaFJvdXRlcj4gaWdub3JlcyB0aGUgaGlzdG9yeSBwcm9wLiBUbyB1c2UgYSBjdXN0b20gaGlzdG9yeSwgXCIgK1xuICAgICAgICBcInVzZSBgaW1wb3J0IHsgUm91dGVyIH1gIGluc3RlYWQgb2YgYGltcG9ydCB7IEhhc2hSb3V0ZXIgYXMgUm91dGVyIH1gLlwiXG4gICAgKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgSGFzaFJvdXRlcjtcbiIsImltcG9ydCB7IGNyZWF0ZUxvY2F0aW9uIH0gZnJvbSBcImhpc3RvcnlcIjtcblxuZXhwb3J0IGNvbnN0IHJlc29sdmVUb0xvY2F0aW9uID0gKHRvLCBjdXJyZW50TG9jYXRpb24pID0+XG4gIHR5cGVvZiB0byA9PT0gXCJmdW5jdGlvblwiID8gdG8oY3VycmVudExvY2F0aW9uKSA6IHRvO1xuXG5leHBvcnQgY29uc3Qgbm9ybWFsaXplVG9Mb2NhdGlvbiA9ICh0bywgY3VycmVudExvY2F0aW9uKSA9PiB7XG4gIHJldHVybiB0eXBlb2YgdG8gPT09IFwic3RyaW5nXCJcbiAgICA/IGNyZWF0ZUxvY2F0aW9uKHRvLCBudWxsLCBudWxsLCBjdXJyZW50TG9jYXRpb24pXG4gICAgOiB0bztcbn07XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCB9IGZyb20gXCJyZWFjdC1yb3V0ZXJcIjtcbmltcG9ydCBQcm9wVHlwZXMgZnJvbSBcInByb3AtdHlwZXNcIjtcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSBcInRpbnktaW52YXJpYW50XCI7XG5pbXBvcnQge1xuICByZXNvbHZlVG9Mb2NhdGlvbixcbiAgbm9ybWFsaXplVG9Mb2NhdGlvblxufSBmcm9tIFwiLi91dGlscy9sb2NhdGlvblV0aWxzLmpzXCI7XG5cbi8vIFJlYWN0IDE1IGNvbXBhdFxuY29uc3QgZm9yd2FyZFJlZlNoaW0gPSBDID0+IEM7XG5sZXQgeyBmb3J3YXJkUmVmIH0gPSBSZWFjdDtcbmlmICh0eXBlb2YgZm9yd2FyZFJlZiA9PT0gXCJ1bmRlZmluZWRcIikge1xuICBmb3J3YXJkUmVmID0gZm9yd2FyZFJlZlNoaW07XG59XG5cbmZ1bmN0aW9uIGlzTW9kaWZpZWRFdmVudChldmVudCkge1xuICByZXR1cm4gISEoZXZlbnQubWV0YUtleSB8fCBldmVudC5hbHRLZXkgfHwgZXZlbnQuY3RybEtleSB8fCBldmVudC5zaGlmdEtleSk7XG59XG5cbmNvbnN0IExpbmtBbmNob3IgPSBmb3J3YXJkUmVmKFxuICAoXG4gICAge1xuICAgICAgaW5uZXJSZWYsIC8vIFRPRE86IGRlcHJlY2F0ZVxuICAgICAgbmF2aWdhdGUsXG4gICAgICBvbkNsaWNrLFxuICAgICAgLi4ucmVzdFxuICAgIH0sXG4gICAgZm9yd2FyZGVkUmVmXG4gICkgPT4ge1xuICAgIGNvbnN0IHsgdGFyZ2V0IH0gPSByZXN0O1xuXG4gICAgbGV0IHByb3BzID0ge1xuICAgICAgLi4ucmVzdCxcbiAgICAgIG9uQ2xpY2s6IGV2ZW50ID0+IHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBpZiAob25DbGljaykgb25DbGljayhldmVudCk7XG4gICAgICAgIH0gY2F0Y2ggKGV4KSB7XG4gICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICB0aHJvdyBleDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChcbiAgICAgICAgICAhZXZlbnQuZGVmYXVsdFByZXZlbnRlZCAmJiAvLyBvbkNsaWNrIHByZXZlbnRlZCBkZWZhdWx0XG4gICAgICAgICAgZXZlbnQuYnV0dG9uID09PSAwICYmIC8vIGlnbm9yZSBldmVyeXRoaW5nIGJ1dCBsZWZ0IGNsaWNrc1xuICAgICAgICAgICghdGFyZ2V0IHx8IHRhcmdldCA9PT0gXCJfc2VsZlwiKSAmJiAvLyBsZXQgYnJvd3NlciBoYW5kbGUgXCJ0YXJnZXQ9X2JsYW5rXCIgZXRjLlxuICAgICAgICAgICFpc01vZGlmaWVkRXZlbnQoZXZlbnQpIC8vIGlnbm9yZSBjbGlja3Mgd2l0aCBtb2RpZmllciBrZXlzXG4gICAgICAgICkge1xuICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgbmF2aWdhdGUoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG5cbiAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICB9IGVsc2Uge1xuICAgICAgcHJvcHMucmVmID0gaW5uZXJSZWY7XG4gICAgfVxuXG4gICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGpzeC1hMTF5L2FuY2hvci1oYXMtY29udGVudCAqL1xuICAgIHJldHVybiA8YSB7Li4ucHJvcHN9IC8+O1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBMaW5rQW5jaG9yLmRpc3BsYXlOYW1lID0gXCJMaW5rQW5jaG9yXCI7XG59XG5cbi8qKlxuICogVGhlIHB1YmxpYyBBUEkgZm9yIHJlbmRlcmluZyBhIGhpc3RvcnktYXdhcmUgPGE+LlxuICovXG5jb25zdCBMaW5rID0gZm9yd2FyZFJlZihcbiAgKFxuICAgIHtcbiAgICAgIGNvbXBvbmVudCA9IExpbmtBbmNob3IsXG4gICAgICByZXBsYWNlLFxuICAgICAgdG8sXG4gICAgICBpbm5lclJlZiwgLy8gVE9ETzogZGVwcmVjYXRlXG4gICAgICAuLi5yZXN0XG4gICAgfSxcbiAgICBmb3J3YXJkZWRSZWZcbiAgKSA9PiB7XG4gICAgcmV0dXJuIChcbiAgICAgIDxSb3V0ZXJDb250ZXh0LkNvbnN1bWVyPlxuICAgICAgICB7Y29udGV4dCA9PiB7XG4gICAgICAgICAgaW52YXJpYW50KGNvbnRleHQsIFwiWW91IHNob3VsZCBub3QgdXNlIDxMaW5rPiBvdXRzaWRlIGEgPFJvdXRlcj5cIik7XG5cbiAgICAgICAgICBjb25zdCB7IGhpc3RvcnkgfSA9IGNvbnRleHQ7XG5cbiAgICAgICAgICBjb25zdCBsb2NhdGlvbiA9IG5vcm1hbGl6ZVRvTG9jYXRpb24oXG4gICAgICAgICAgICByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbiksXG4gICAgICAgICAgICBjb250ZXh0LmxvY2F0aW9uXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IGhyZWYgPSBsb2NhdGlvbiA/IGhpc3RvcnkuY3JlYXRlSHJlZihsb2NhdGlvbikgOiBcIlwiO1xuICAgICAgICAgIGNvbnN0IHByb3BzID0ge1xuICAgICAgICAgICAgLi4ucmVzdCxcbiAgICAgICAgICAgIGhyZWYsXG4gICAgICAgICAgICBuYXZpZ2F0ZSgpIHtcbiAgICAgICAgICAgICAgY29uc3QgbG9jYXRpb24gPSByZXNvbHZlVG9Mb2NhdGlvbih0bywgY29udGV4dC5sb2NhdGlvbik7XG4gICAgICAgICAgICAgIGNvbnN0IG1ldGhvZCA9IHJlcGxhY2UgPyBoaXN0b3J5LnJlcGxhY2UgOiBoaXN0b3J5LnB1c2g7XG5cbiAgICAgICAgICAgICAgbWV0aG9kKGxvY2F0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gUmVhY3QgMTUgY29tcGF0XG4gICAgICAgICAgaWYgKGZvcndhcmRSZWZTaGltICE9PSBmb3J3YXJkUmVmKSB7XG4gICAgICAgICAgICBwcm9wcy5yZWYgPSBmb3J3YXJkZWRSZWYgfHwgaW5uZXJSZWY7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHByb3BzLmlubmVyUmVmID0gaW5uZXJSZWY7XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50LCBwcm9wcyk7XG4gICAgICAgIH19XG4gICAgICA8L1JvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgKTtcbiAgfVxuKTtcblxuaWYgKF9fREVWX18pIHtcbiAgY29uc3QgdG9UeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMub2JqZWN0LFxuICAgIFByb3BUeXBlcy5mdW5jXG4gIF0pO1xuICBjb25zdCByZWZUeXBlID0gUHJvcFR5cGVzLm9uZU9mVHlwZShbXG4gICAgUHJvcFR5cGVzLnN0cmluZyxcbiAgICBQcm9wVHlwZXMuZnVuYyxcbiAgICBQcm9wVHlwZXMuc2hhcGUoeyBjdXJyZW50OiBQcm9wVHlwZXMuYW55IH0pXG4gIF0pO1xuXG4gIExpbmsuZGlzcGxheU5hbWUgPSBcIkxpbmtcIjtcblxuICBMaW5rLnByb3BUeXBlcyA9IHtcbiAgICBpbm5lclJlZjogcmVmVHlwZSxcbiAgICBvbkNsaWNrOiBQcm9wVHlwZXMuZnVuYyxcbiAgICByZXBsYWNlOiBQcm9wVHlwZXMuYm9vbCxcbiAgICB0YXJnZXQ6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgdG86IHRvVHlwZS5pc1JlcXVpcmVkXG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IExpbms7XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgeyBfX1JvdXRlckNvbnRleHQgYXMgUm91dGVyQ29udGV4dCwgbWF0Y2hQYXRoIH0gZnJvbSBcInJlYWN0LXJvdXRlclwiO1xuaW1wb3J0IFByb3BUeXBlcyBmcm9tIFwicHJvcC10eXBlc1wiO1xuaW1wb3J0IGludmFyaWFudCBmcm9tIFwidGlueS1pbnZhcmlhbnRcIjtcbmltcG9ydCBMaW5rIGZyb20gXCIuL0xpbmsuanNcIjtcbmltcG9ydCB7XG4gIHJlc29sdmVUb0xvY2F0aW9uLFxuICBub3JtYWxpemVUb0xvY2F0aW9uXG59IGZyb20gXCIuL3V0aWxzL2xvY2F0aW9uVXRpbHMuanNcIjtcblxuLy8gUmVhY3QgMTUgY29tcGF0XG5jb25zdCBmb3J3YXJkUmVmU2hpbSA9IEMgPT4gQztcbmxldCB7IGZvcndhcmRSZWYgfSA9IFJlYWN0O1xuaWYgKHR5cGVvZiBmb3J3YXJkUmVmID09PSBcInVuZGVmaW5lZFwiKSB7XG4gIGZvcndhcmRSZWYgPSBmb3J3YXJkUmVmU2hpbTtcbn1cblxuZnVuY3Rpb24gam9pbkNsYXNzbmFtZXMoLi4uY2xhc3NuYW1lcykge1xuICByZXR1cm4gY2xhc3NuYW1lcy5maWx0ZXIoaSA9PiBpKS5qb2luKFwiIFwiKTtcbn1cblxuLyoqXG4gKiBBIDxMaW5rPiB3cmFwcGVyIHRoYXQga25vd3MgaWYgaXQncyBcImFjdGl2ZVwiIG9yIG5vdC5cbiAqL1xuY29uc3QgTmF2TGluayA9IGZvcndhcmRSZWYoXG4gIChcbiAgICB7XG4gICAgICBcImFyaWEtY3VycmVudFwiOiBhcmlhQ3VycmVudCA9IFwicGFnZVwiLFxuICAgICAgYWN0aXZlQ2xhc3NOYW1lID0gXCJhY3RpdmVcIixcbiAgICAgIGFjdGl2ZVN0eWxlLFxuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWVQcm9wLFxuICAgICAgZXhhY3QsXG4gICAgICBpc0FjdGl2ZTogaXNBY3RpdmVQcm9wLFxuICAgICAgbG9jYXRpb246IGxvY2F0aW9uUHJvcCxcbiAgICAgIHNlbnNpdGl2ZSxcbiAgICAgIHN0cmljdCxcbiAgICAgIHN0eWxlOiBzdHlsZVByb3AsXG4gICAgICB0byxcbiAgICAgIGlubmVyUmVmLCAvLyBUT0RPOiBkZXByZWNhdGVcbiAgICAgIC4uLnJlc3RcbiAgICB9LFxuICAgIGZvcndhcmRlZFJlZlxuICApID0+IHtcbiAgICByZXR1cm4gKFxuICAgICAgPFJvdXRlckNvbnRleHQuQ29uc3VtZXI+XG4gICAgICAgIHtjb250ZXh0ID0+IHtcbiAgICAgICAgICBpbnZhcmlhbnQoY29udGV4dCwgXCJZb3Ugc2hvdWxkIG5vdCB1c2UgPE5hdkxpbms+IG91dHNpZGUgYSA8Um91dGVyPlwiKTtcblxuICAgICAgICAgIGNvbnN0IGN1cnJlbnRMb2NhdGlvbiA9IGxvY2F0aW9uUHJvcCB8fCBjb250ZXh0LmxvY2F0aW9uO1xuICAgICAgICAgIGNvbnN0IHRvTG9jYXRpb24gPSBub3JtYWxpemVUb0xvY2F0aW9uKFxuICAgICAgICAgICAgcmVzb2x2ZVRvTG9jYXRpb24odG8sIGN1cnJlbnRMb2NhdGlvbiksXG4gICAgICAgICAgICBjdXJyZW50TG9jYXRpb25cbiAgICAgICAgICApO1xuICAgICAgICAgIGNvbnN0IHsgcGF0aG5hbWU6IHBhdGggfSA9IHRvTG9jYXRpb247XG4gICAgICAgICAgLy8gUmVnZXggdGFrZW4gZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL3BpbGxhcmpzL3BhdGgtdG8tcmVnZXhwL2Jsb2IvbWFzdGVyL2luZGV4LmpzI0wyMDJcbiAgICAgICAgICBjb25zdCBlc2NhcGVkUGF0aCA9XG4gICAgICAgICAgICBwYXRoICYmIHBhdGgucmVwbGFjZSgvKFsuKyo/PV4hOiR7fSgpW1xcXXwvXFxcXF0pL2csIFwiXFxcXCQxXCIpO1xuXG4gICAgICAgICAgY29uc3QgbWF0Y2ggPSBlc2NhcGVkUGF0aFxuICAgICAgICAgICAgPyBtYXRjaFBhdGgoY3VycmVudExvY2F0aW9uLnBhdGhuYW1lLCB7XG4gICAgICAgICAgICAgICAgcGF0aDogZXNjYXBlZFBhdGgsXG4gICAgICAgICAgICAgICAgZXhhY3QsXG4gICAgICAgICAgICAgICAgc2Vuc2l0aXZlLFxuICAgICAgICAgICAgICAgIHN0cmljdFxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgIGNvbnN0IGlzQWN0aXZlID0gISEoaXNBY3RpdmVQcm9wXG4gICAgICAgICAgICA/IGlzQWN0aXZlUHJvcChtYXRjaCwgY3VycmVudExvY2F0aW9uKVxuICAgICAgICAgICAgOiBtYXRjaCk7XG5cbiAgICAgICAgICBjb25zdCBjbGFzc05hbWUgPSBpc0FjdGl2ZVxuICAgICAgICAgICAgPyBqb2luQ2xhc3NuYW1lcyhjbGFzc05hbWVQcm9wLCBhY3RpdmVDbGFzc05hbWUpXG4gICAgICAgICAgICA6IGNsYXNzTmFtZVByb3A7XG4gICAgICAgICAgY29uc3Qgc3R5bGUgPSBpc0FjdGl2ZSA/IHsgLi4uc3R5bGVQcm9wLCAuLi5hY3RpdmVTdHlsZSB9IDogc3R5bGVQcm9wO1xuXG4gICAgICAgICAgY29uc3QgcHJvcHMgPSB7XG4gICAgICAgICAgICBcImFyaWEtY3VycmVudFwiOiAoaXNBY3RpdmUgJiYgYXJpYUN1cnJlbnQpIHx8IG51bGwsXG4gICAgICAgICAgICBjbGFzc05hbWUsXG4gICAgICAgICAgICBzdHlsZSxcbiAgICAgICAgICAgIHRvOiB0b0xvY2F0aW9uLFxuICAgICAgICAgICAgLi4ucmVzdFxuICAgICAgICAgIH07XG5cbiAgICAgICAgICAvLyBSZWFjdCAxNSBjb21wYXRcbiAgICAgICAgICBpZiAoZm9yd2FyZFJlZlNoaW0gIT09IGZvcndhcmRSZWYpIHtcbiAgICAgICAgICAgIHByb3BzLnJlZiA9IGZvcndhcmRlZFJlZiB8fCBpbm5lclJlZjtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcHJvcHMuaW5uZXJSZWYgPSBpbm5lclJlZjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gPExpbmsgey4uLnByb3BzfSAvPjtcbiAgICAgICAgfX1cbiAgICAgIDwvUm91dGVyQ29udGV4dC5Db25zdW1lcj5cbiAgICApO1xuICB9XG4pO1xuXG5pZiAoX19ERVZfXykge1xuICBOYXZMaW5rLmRpc3BsYXlOYW1lID0gXCJOYXZMaW5rXCI7XG5cbiAgY29uc3QgYXJpYUN1cnJlbnRUeXBlID0gUHJvcFR5cGVzLm9uZU9mKFtcbiAgICBcInBhZ2VcIixcbiAgICBcInN0ZXBcIixcbiAgICBcImxvY2F0aW9uXCIsXG4gICAgXCJkYXRlXCIsXG4gICAgXCJ0aW1lXCIsXG4gICAgXCJ0cnVlXCJcbiAgXSk7XG5cbiAgTmF2TGluay5wcm9wVHlwZXMgPSB7XG4gICAgLi4uTGluay5wcm9wVHlwZXMsXG4gICAgXCJhcmlhLWN1cnJlbnRcIjogYXJpYUN1cnJlbnRUeXBlLFxuICAgIGFjdGl2ZUNsYXNzTmFtZTogUHJvcFR5cGVzLnN0cmluZyxcbiAgICBhY3RpdmVTdHlsZTogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBjbGFzc05hbWU6IFByb3BUeXBlcy5zdHJpbmcsXG4gICAgZXhhY3Q6IFByb3BUeXBlcy5ib29sLFxuICAgIGlzQWN0aXZlOiBQcm9wVHlwZXMuZnVuYyxcbiAgICBsb2NhdGlvbjogUHJvcFR5cGVzLm9iamVjdCxcbiAgICBzZW5zaXRpdmU6IFByb3BUeXBlcy5ib29sLFxuICAgIHN0cmljdDogUHJvcFR5cGVzLmJvb2wsXG4gICAgc3R5bGU6IFByb3BUeXBlcy5vYmplY3RcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgTmF2TGluaztcbiIsIlxuLy8g0J3QsNGF0L7QtNC40YLRgdGPINC70Lgg0YHQsNC50YIg0LIg0YDQtdC20LjQvNC1INGA0LDQt9GA0LDQsdC+0YLQutC4XG5jb25zdCBpc0RldmVsb3BtZW50ID0gbG9jYXRpb24uaG9zdC5zdGFydHNXaXRoKCdsb2NhbGhvc3QnKVxuXG5jb25zdCBzZXJ2ZXJPcmlnaW4gPSBpc0RldmVsb3BtZW50XG4gICAgPyBsb2NhdGlvbi5wcm90b2NvbCArICcvLycgKyBsb2NhdGlvbi5ob3N0bmFtZSArICc6MzAwMCcgOiAnJ1xuXG5jb25zdCBicm93c2VyQ29uZmlnID0ge1xuICAgIC8vINCd0LDRhdC+0LTQuNGC0YHRjyDQu9C4INGB0LDQudGCINCyINGA0LXQttC40LzQtSDRgNCw0LfRgNCw0LHQvtGC0LrQuFxuICAgIGlzRGV2ZWxvcG1lbnQsXG4gICAgLy8g0JDQtNGA0LXRgSDRgdCw0LnRgtCwXG4gICAgc2VydmVyT3JpZ2luXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgYnJvd3NlckNvbmZpZyIsImltcG9ydCBicm93c2VyQ29uZmlnIGZyb20gXCIuLi8uLi8uLi9icm93c2VyQ29uZmlnXCI7XG5cblxuYXN5bmMgZnVuY3Rpb24gY2hlY2tUb2tlbigpIHtcbiAgICBcbiAgICAvLyDQktC+0LfRjNC80YMg0YLQvtC60LXQvSDQuNC3IExvY2FsU3RvcmFnZVxuICAgIGNvbnN0IGxvY1N0clRva2VuID0gbG9jYWxTdG9yYWdlLmdldEl0ZW0oJ2F1dGhUb2tlbicpXG4gICAgXG4gICAgLy8g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwXG4gICAgbGV0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnXG4gICAgfVxuICAgIFxuICAgIGlmKGxvY1N0clRva2VuICYmIGJyb3dzZXJDb25maWcuaXNEZXZlbG9wbWVudCkge1xuICAgICAgICBvcHRpb25zLmhlYWRlcnMgPSB7ICdBdXRob3JpemF0aW9uJzogJ0JlYXJlciAnICsgbG9jU3RyVG9rZW4gfVxuICAgIH1cbiAgICBcbiAgICBjb25zdCB7c2VydmVyT3JpZ2lufSA9IGJyb3dzZXJDb25maWdcbiAgICBjb25zdCBhcGlVcmwgPSBzZXJ2ZXJPcmlnaW4gKyAnL2FwaS92MS91c2Vycy9jaGVja1Rva2VuJ1xuICAgIFxuICAgIGNvbnN0IHNlcnZlclJlcyA9IGF3YWl0IGZldGNoKGFwaVVybCwgb3B0aW9ucylcbiAgICAgICAgICAgIC50aGVuKGRhdGEgPT4gZGF0YS5qc29uKCkpXG4gICAgICAgICAgICAudGhlbihqc29uID0+IGpzb24pXG4gICAgXG4gICAgcmV0dXJuIHNlcnZlclJlcyA/IDIgOiAxXG59XG5cbmV4cG9ydCB7IGNoZWNrVG9rZW4gfSIsIlxuZXhwb3J0IGZ1bmN0aW9uIHNldFVzZXIobmFtZSwgZW1haWwpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnU0VUX1VTRVInLFxuICAgICAgICBuYW1lLFxuICAgICAgICBlbWFpbFxuICAgIH1cbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHNldEF1dGhUb2tlblN0YXR1cyhzdGF0dXMpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB0eXBlOiAnU0VUX0FVVEhfVE9LRU5fU1RBVFVTJyxcbiAgICAgICAgc3RhdHVzXG4gICAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYWRkTm90ZSh0ZXh0KSB7XG4gICAgcmV0dXJuIHtcbiAgICAgICAgdHlwZTogJ0FERF9OT1RFJyxcbiAgICAgICAgdGV4dFxuICAgIH1cbn0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQge1JlZGlyZWN0fSBmcm9tICdyZWFjdC1yb3V0ZXItZG9tJ1xuaW1wb3J0IHt1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3J9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHtjaGVja1Rva2VufSBmcm9tIFwiLi9qcy9jaGVja1Rva2VuXCI7XG5pbXBvcnQge3NldEF1dGhUb2tlblN0YXR1c30gZnJvbSBcIi4uLy4uL3N0b3JlL2FjdGlvbnNcIjtcblxuXG5mdW5jdGlvbiBNYWluUGFnZSgpIHtcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0YMg0YHRgtCw0YLRg9GBINGC0L7QutC10L3QsFxuICAgIGNvbnN0IHthdXRoVG9rZW5TdGF0dXN9ID0gdXNlU2VsZWN0b3Ioc3RvcmUgPT4gc3RvcmUudXNlcilcbiAgICBcbiAgICAvLyDQldGB0LvQuCBhdXRoVG9rZW5TdGF0dXMg0YDQsNCy0LXQvSDQvdGD0LvRjiwg0YLQviDQvdC1INC/0L7QvdGP0YLQvdC+INC10YHRgtGMINC70Lgg0LIg0LHRgNCw0YPQt9C10YDQtSDRgtC+0LrQtdC9INC4INCy0LXRgNC10L0g0LvQuCDQvtC9LlxuICAgIC8vINCf0L7RjdGC0L7QvNGDINC/0YDQvtCy0LXRgNGOLlxuICAgIGlmKGF1dGhUb2tlblN0YXR1cyA9PT0gMCkge1xuICAgICAgICBjaGVja1Rva2VuKCkudGhlbigoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaCggc2V0QXV0aFRva2VuU3RhdHVzKHN0YXR1cykgKVxuICAgICAgICB9KVxuICAgICAgICBcbiAgICAgICAgcmV0dXJuICdJbmRleFBhZ2UnXG4gICAgfVxuICAgIFxuICAgIC8vINCV0YHQu9C4INGC0L7QutC10L3QsCDQvdC10YIg0LjQu9C4INC+0L0g0L3QtdCy0LXRgNC90YvQuSwg0YLQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Ywg0LXRidC1INC90LUg0LLQvtGI0ZHQuywg0L/QtdGA0LXQvdCw0L/RgNCw0LLQuNGC0Ywg0L3QsCDRgdGC0YDQsNC90LjRhtGDINCy0YXQvtC00LBcbiAgICBpZihhdXRoVG9rZW5TdGF0dXMgPT09IDEpIHJldHVybiA8UmVkaXJlY3QgdG89Jy9lbnRlcicgLz5cbiAgICBcbiAgICAvLyDQldGB0YLRjCDQv9GA0LDQstC40LvRjNC90YvQuSDRgtC+0LrQtdC9LiDQn9C10YDQtdC90LDQv9GA0LDQstC40YLRjCDQvdCwINGB0YLRgNCw0L3QuNGG0YMg0LfQsNC80LXRgtC+0LouXG4gICAgcmV0dXJuIDxSZWRpcmVjdCB0bz0nL25vdGVzJyAvPlxufVxuXG5leHBvcnQgZGVmYXVsdCBNYWluUGFnZSIsImltcG9ydCBNYWluUGFnZSBmcm9tICcuL21haW5QYWdlJ1xuZXhwb3J0IGRlZmF1bHQgTWFpblBhZ2UiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBMaW5rIH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCAnLi9jc3MvYnV0dG9uLnNjc3MnXG5pbXBvcnQgJy4vY3NzL3NwaW5uZXIuc2NzcydcblxuXG5mdW5jdGlvbiBCdXR0b24ocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHRleHQgPSBgVGV4dCBkaWRuJ3QgcGFzc2AsIC8vINCi0LXQutGB0YIg0L3QsCDQutC90L7Qv9C60LVcbiAgICAgICAgaSxcbiAgICAgICAgY291bnRlciwgLy8g0KHRh9GR0YLRh9C40Log0L3QsCDQutC90L7Qv9C60LVcbiAgICAgICAgZGlzYWJsZWQgPSBmYWxzZSwgLy8g0JfQsNCx0LvQvtC60LjRgNC+0LLQsNC90LAg0LvQuCDQutC90L7Qv9C60LBcbiAgICB9ID0gcHJvcHNcbiAgICBcbiAgICBjb25zdCBhdHRycyA9IHt9XG4gICAgXG4gICAgLy8g0KLQuNC/INC60L3QvtC/0LrQuFxuICAgIGF0dHJzLnR5cGUgPSBwcm9wcy50eXBlID8gcHJvcHMudHlwZSA6ICdidXR0b24nXG4gICAgaWYocHJvcHMuaHJlZikgZGVsZXRlIGF0dHJzLnR5cGVcbiAgICBcbiAgICAvLyDQpNC+0YDQvNC40YDQvtCy0LDQvdC40LUg0LrQu9Cw0YHRgdC+0LJcbiAgICBsZXQgY2xzID0gJ2J0bidcbiAgICBpZihwcm9wcy5tb2RlMSkgY2xzICs9ICcgYnRuLS1tb2RlLTEnXG4gICAgaWYocHJvcHMubW9kZTIpIGNscyArPSAnIGJ0bi0tbW9kZS0yJ1xuICAgIGF0dHJzLmNsYXNzTmFtZSA9IGNsc1xuICAgIFxuICAgIC8vINCQ0YLRgtGA0LjQsdGD0YIgaHJlZlxuICAgIGlmKHByb3BzLmhyZWYpIGF0dHJzLnRvID0gcHJvcHMuaHJlZlxuICAgIFxuICAgIC8vINCQ0YLRgtGA0LjQsdGD0YIgZGlzYWJsZWRcbiAgICBpZihkaXNhYmxlZCkgYXR0cnMuZGlzYWJsZWQgPSB0cnVlXG4gICAgXG4gICAgaWYoaSkgYXR0cnMua2V5ID0gaVxuICAgIFxuICAgIC8vINCa0L7QvdGC0LXQvdGCXG4gICAgY29uc3Qgc2lnbkVsID0gY3JlYXRlU2lnbihwcm9wcy5zaWduKVxuICAgIGNvbnN0IGNvdW50ZXJFbCA9IDxzcGFuIGNsYXNzTmFtZT0nYnRuX19jb3VudGVyJyBrZXk9J2InPntjb3VudGVyfTwvc3Bhbj5cbiAgICBjb25zdCBpbm5lckNvbnRlbnQgPSBbc2lnbkVsLCB0ZXh0LCBjb3VudGVyRWxdXG4gICAgXG4gICAgXG4gICAgcmV0dXJuICBwcm9wcy50YWcgPT09ICdhJ1xuICAgICAgICA/IDxMaW5rIHsuLi5hdHRyc30+e2lubmVyQ29udGVudH08L0xpbms+XG4gICAgICAgIDogPGJ1dHRvbiB7Li4uYXR0cnN9Pntpbm5lckNvbnRlbnR9PC9idXR0b24+XG59XG5cbi8vIHR5cGUg4oCULSDQt9C90LDRh9GR0Log0L3QsCDQutC90L7Qv9C60LUuINCX0L3QsNGH0LXQvdC40Y86IHBlcnNvbiwgZXhpdCwgY2hlY2stYWxsLCBzdW4sIGNsb3NlLCBzcGlubmVyXG5mdW5jdGlvbiBjcmVhdGVTaWduKHR5cGUpIHtcbiAgICBpZighdHlwZSkgcmV0dXJuIG51bGxcbiAgICBpZih0eXBlID09PSAnc3Bpbm5lcicpIHJldHVybiBjcmVhdGVTcGlubmVyKClcbiAgICBcbiAgICBsZXQgY2xzID0gJ2J0bl9fc2lnbiAnO1xuICAgIFxuICAgIHN3aXRjaCAodHlwZSkge1xuICAgICAgICBjYXNlICdwZXJzb24nOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLXBlcnNvbidcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ2V4aXQnOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLWV4aXQnXG4gICAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdjaGVjay1hbGwnOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLWNoZWNrLWFsbCdcbiAgICAgICAgICAgIGJyZWFrXG4gICAgICAgIGNhc2UgJ3N1bic6XG4gICAgICAgICAgICBjbHMgKz0gJ2J0bl9fc2lnbi0tc3VuJ1xuICAgICAgICAgICAgYnJlYWtcbiAgICAgICAgY2FzZSAnY2xvc2UnOlxuICAgICAgICAgICAgY2xzICs9ICdidG5fX3NpZ24tLWNsb3NlJ1xuICAgICAgICAgICAgYnJlYWtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIDxzcGFuIGNsYXNzTmFtZT17Y2xzfSBrZXk9J2EnIC8+XG59XG5cbmZ1bmN0aW9uIGNyZWF0ZVNwaW5uZXIoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9J2J0blNwaW5uZXJXcmFwcGVyJyBrZXk9J2gnPlxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9J2J0blNwaW5uZXInPlxuICAgICAgICAgICAgICAgIDxkaXYgLz5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEJ1dHRvbiIsImltcG9ydCBCdXR0b24gZnJvbSAnLi9idXR0b24nXG5leHBvcnQgZGVmYXVsdCBCdXR0b24iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi9mb3JtRWxlbWVudHMvYnV0dG9uXCI7XG5pbXBvcnQgcyBmcm9tICcuL2Nzcy90b3BOYXZpZ2F0aW9uLnNjc3MnXG5cbmltcG9ydCB7IHVzZVJvdXRlTWF0Y2ggfSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5cbmZ1bmN0aW9uIFRvcE5hdkVudHJhbmNlKCkge1xuICAgIGNvbnN0IHJlZ0J0biA9ICAgPFRvcE5hdkxpbmsgdG89Jy9yZWcnIGxhYmVsPSdTaWduIHVwJyBpPScxJyAvPlxuICAgIGNvbnN0IGVudGVyQnRuID0gPFRvcE5hdkxpbmsgdG89Jy9lbnRlcicgbGFiZWw9J0xvZyBpbicgaT0nMicgLz5cbiAgICBcbiAgICByZXR1cm4gPG5hdiBjbGFzc05hbWU9e3Mud3JhcHBlcn0+XG4gICAgICAgIHtlbnRlckJ0bn1cbiAgICAgICAge3JlZ0J0bn1cbiAgICA8L25hdj5cbn1cblxuXG5mdW5jdGlvbiBUb3BOYXZMaW5rKHsgbGFiZWwsIHRvLCBpIH0pIHtcbiAgICBsZXQgbWF0Y2ggPSB1c2VSb3V0ZU1hdGNoKHtcbiAgICAgICAgcGF0aDogdG9cbiAgICB9KTtcbiAgICBcbiAgICBpZihtYXRjaCkge1xuICAgICAgICByZXR1cm4gPEJ1dHRvbiB0YWc9J2EnIGhyZWY9e3RvfSB0ZXh0PXtsYWJlbH0gaT17aX0gLz5cbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIDxCdXR0b24gdGFnPSdhJyBocmVmPXt0b30gdGV4dD17bGFiZWx9IG1vZGUxPXt0cnVlfSBpPXtpfSAvPlxufVxuXG5leHBvcnQgZGVmYXVsdCBUb3BOYXZFbnRyYW5jZSIsImltcG9ydCBUb3BOYXZpZ2F0aW9uIGZyb20gJy4vdG9wTmF2RW50cmFuY2UnXG5leHBvcnQgZGVmYXVsdCBUb3BOYXZpZ2F0aW9uIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHMgZnJvbSAnLi9jc3MvYXV0aFNwbGl0Q29udGFpbmVyLnNjc3MnXG5cblxuZnVuY3Rpb24gQXV0aFNwbGl0Q29udGFpbmVyKHtjaGlsZHJlbn0pIHtcbiAgICBcbiAgICBcbiAgICByZXR1cm4gPHNlY3Rpb24gY2xhc3NOYW1lPXtzLndyYXBwZXJ9PlxuICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cy5sZWZ0UGFydH0gLz5cbiAgICAgICAgPGRpdiBjbGFzc05hbWU9e3MucmlnaHRQYXJ0fT5cbiAgICAgICAgICAgIHtjaGlsZHJlbn1cbiAgICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxufVxuXG5leHBvcnQgZGVmYXVsdCBBdXRoU3BsaXRDb250YWluZXIiLCJpbXBvcnQgQXV0aFNwbGl0Q29udGFpbmVyIGZyb20gJy4vYXV0aFNwbGl0Q29udGFpbmVyJ1xuZXhwb3J0IGRlZmF1bHQgQXV0aFNwbGl0Q29udGFpbmVyIiwidmFyIGlzTWVyZ2VhYmxlT2JqZWN0ID0gZnVuY3Rpb24gaXNNZXJnZWFibGVPYmplY3QodmFsdWUpIHtcblx0cmV0dXJuIGlzTm9uTnVsbE9iamVjdCh2YWx1ZSlcblx0XHQmJiAhaXNTcGVjaWFsKHZhbHVlKVxufTtcblxuZnVuY3Rpb24gaXNOb25OdWxsT2JqZWN0KHZhbHVlKSB7XG5cdHJldHVybiAhIXZhbHVlICYmIHR5cGVvZiB2YWx1ZSA9PT0gJ29iamVjdCdcbn1cblxuZnVuY3Rpb24gaXNTcGVjaWFsKHZhbHVlKSB7XG5cdHZhciBzdHJpbmdWYWx1ZSA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG5cblx0cmV0dXJuIHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBSZWdFeHBdJ1xuXHRcdHx8IHN0cmluZ1ZhbHVlID09PSAnW29iamVjdCBEYXRlXSdcblx0XHR8fCBpc1JlYWN0RWxlbWVudCh2YWx1ZSlcbn1cblxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9yZWFjdC9ibG9iL2I1YWM5NjNmYjc5MWQxMjk4ZTdmMzk2MjM2MzgzYmM5NTVmOTE2YzEvc3JjL2lzb21vcnBoaWMvY2xhc3NpYy9lbGVtZW50L1JlYWN0RWxlbWVudC5qcyNMMjEtTDI1XG52YXIgY2FuVXNlU3ltYm9sID0gdHlwZW9mIFN5bWJvbCA9PT0gJ2Z1bmN0aW9uJyAmJiBTeW1ib2wuZm9yO1xudmFyIFJFQUNUX0VMRU1FTlRfVFlQRSA9IGNhblVzZVN5bWJvbCA/IFN5bWJvbC5mb3IoJ3JlYWN0LmVsZW1lbnQnKSA6IDB4ZWFjNztcblxuZnVuY3Rpb24gaXNSZWFjdEVsZW1lbnQodmFsdWUpIHtcblx0cmV0dXJuIHZhbHVlLiQkdHlwZW9mID09PSBSRUFDVF9FTEVNRU5UX1RZUEVcbn1cblxuZnVuY3Rpb24gZW1wdHlUYXJnZXQodmFsKSB7XG5cdHJldHVybiBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9XG59XG5cbmZ1bmN0aW9uIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHZhbHVlLCBvcHRpb25zKSB7XG5cdHJldHVybiAob3B0aW9ucy5jbG9uZSAhPT0gZmFsc2UgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCh2YWx1ZSkpXG5cdFx0PyBkZWVwbWVyZ2UoZW1wdHlUYXJnZXQodmFsdWUpLCB2YWx1ZSwgb3B0aW9ucylcblx0XHQ6IHZhbHVlXG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRBcnJheU1lcmdlKHRhcmdldCwgc291cmNlLCBvcHRpb25zKSB7XG5cdHJldHVybiB0YXJnZXQuY29uY2F0KHNvdXJjZSkubWFwKGZ1bmN0aW9uKGVsZW1lbnQpIHtcblx0XHRyZXR1cm4gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQoZWxlbWVudCwgb3B0aW9ucylcblx0fSlcbn1cblxuZnVuY3Rpb24gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0dmFyIGRlc3RpbmF0aW9uID0ge307XG5cdGlmIChvcHRpb25zLmlzTWVyZ2VhYmxlT2JqZWN0KHRhcmdldCkpIHtcblx0XHRPYmplY3Qua2V5cyh0YXJnZXQpLmZvckVhY2goZnVuY3Rpb24oa2V5KSB7XG5cdFx0XHRkZXN0aW5hdGlvbltrZXldID0gY2xvbmVVbmxlc3NPdGhlcndpc2VTcGVjaWZpZWQodGFyZ2V0W2tleV0sIG9wdGlvbnMpO1xuXHRcdH0pO1xuXHR9XG5cdE9iamVjdC5rZXlzKHNvdXJjZSkuZm9yRWFjaChmdW5jdGlvbihrZXkpIHtcblx0XHRpZiAoIW9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3Qoc291cmNlW2tleV0pIHx8ICF0YXJnZXRba2V5XSkge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZVtrZXldLCBvcHRpb25zKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZGVzdGluYXRpb25ba2V5XSA9IGRlZXBtZXJnZSh0YXJnZXRba2V5XSwgc291cmNlW2tleV0sIG9wdGlvbnMpO1xuXHRcdH1cblx0fSk7XG5cdHJldHVybiBkZXN0aW5hdGlvblxufVxuXG5mdW5jdGlvbiBkZWVwbWVyZ2UodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpIHtcblx0b3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cdG9wdGlvbnMuYXJyYXlNZXJnZSA9IG9wdGlvbnMuYXJyYXlNZXJnZSB8fCBkZWZhdWx0QXJyYXlNZXJnZTtcblx0b3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdCA9IG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QgfHwgaXNNZXJnZWFibGVPYmplY3Q7XG5cblx0dmFyIHNvdXJjZUlzQXJyYXkgPSBBcnJheS5pc0FycmF5KHNvdXJjZSk7XG5cdHZhciB0YXJnZXRJc0FycmF5ID0gQXJyYXkuaXNBcnJheSh0YXJnZXQpO1xuXHR2YXIgc291cmNlQW5kVGFyZ2V0VHlwZXNNYXRjaCA9IHNvdXJjZUlzQXJyYXkgPT09IHRhcmdldElzQXJyYXk7XG5cblx0aWYgKCFzb3VyY2VBbmRUYXJnZXRUeXBlc01hdGNoKSB7XG5cdFx0cmV0dXJuIGNsb25lVW5sZXNzT3RoZXJ3aXNlU3BlY2lmaWVkKHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIGlmIChzb3VyY2VJc0FycmF5KSB7XG5cdFx0cmV0dXJuIG9wdGlvbnMuYXJyYXlNZXJnZSh0YXJnZXQsIHNvdXJjZSwgb3B0aW9ucylcblx0fSBlbHNlIHtcblx0XHRyZXR1cm4gbWVyZ2VPYmplY3QodGFyZ2V0LCBzb3VyY2UsIG9wdGlvbnMpXG5cdH1cbn1cblxuZGVlcG1lcmdlLmFsbCA9IGZ1bmN0aW9uIGRlZXBtZXJnZUFsbChhcnJheSwgb3B0aW9ucykge1xuXHRpZiAoIUFycmF5LmlzQXJyYXkoYXJyYXkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKCdmaXJzdCBhcmd1bWVudCBzaG91bGQgYmUgYW4gYXJyYXknKVxuXHR9XG5cblx0cmV0dXJuIGFycmF5LnJlZHVjZShmdW5jdGlvbihwcmV2LCBuZXh0KSB7XG5cdFx0cmV0dXJuIGRlZXBtZXJnZShwcmV2LCBuZXh0LCBvcHRpb25zKVxuXHR9LCB7fSlcbn07XG5cbnZhciBkZWVwbWVyZ2VfMSA9IGRlZXBtZXJnZTtcblxuZXhwb3J0IGRlZmF1bHQgZGVlcG1lcmdlXzE7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgU3ltYm9sID0gcm9vdC5TeW1ib2w7XG5cbmV4cG9ydCBkZWZhdWx0IFN5bWJvbDtcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBVc2VkIHRvIHJlc29sdmUgdGhlXG4gKiBbYHRvU3RyaW5nVGFnYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LnByb3RvdHlwZS50b3N0cmluZylcbiAqIG9mIHZhbHVlcy5cbiAqL1xudmFyIG5hdGl2ZU9iamVjdFRvU3RyaW5nID0gb2JqZWN0UHJvdG8udG9TdHJpbmc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bVRvU3RyaW5nVGFnID0gU3ltYm9sID8gU3ltYm9sLnRvU3RyaW5nVGFnIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUdldFRhZ2Agd2hpY2ggaWdub3JlcyBgU3ltYm9sLnRvU3RyaW5nVGFnYCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHF1ZXJ5LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgcmF3IGB0b1N0cmluZ1RhZ2AuXG4gKi9cbmZ1bmN0aW9uIGdldFJhd1RhZyh2YWx1ZSkge1xuICB2YXIgaXNPd24gPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCBzeW1Ub1N0cmluZ1RhZyksXG4gICAgICB0YWcgPSB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ107XG5cbiAgdHJ5IHtcbiAgICB2YWx1ZVtzeW1Ub1N0cmluZ1RhZ10gPSB1bmRlZmluZWQ7XG4gICAgdmFyIHVubWFza2VkID0gdHJ1ZTtcbiAgfSBjYXRjaCAoZSkge31cblxuICB2YXIgcmVzdWx0ID0gbmF0aXZlT2JqZWN0VG9TdHJpbmcuY2FsbCh2YWx1ZSk7XG4gIGlmICh1bm1hc2tlZCkge1xuICAgIGlmIChpc093bikge1xuICAgICAgdmFsdWVbc3ltVG9TdHJpbmdUYWddID0gdGFnO1xuICAgIH0gZWxzZSB7XG4gICAgICBkZWxldGUgdmFsdWVbc3ltVG9TdHJpbmdUYWddO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXRSYXdUYWc7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgbmF0aXZlT2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgdmFsdWVgIHRvIGEgc3RyaW5nIHVzaW5nIGBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKi9cbmZ1bmN0aW9uIG9iamVjdFRvU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiBuYXRpdmVPYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgb2JqZWN0VG9TdHJpbmc7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgZ2V0UmF3VGFnIGZyb20gJy4vX2dldFJhd1RhZy5qcyc7XG5pbXBvcnQgb2JqZWN0VG9TdHJpbmcgZnJvbSAnLi9fb2JqZWN0VG9TdHJpbmcuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbnVsbFRhZyA9ICdbb2JqZWN0IE51bGxdJyxcbiAgICB1bmRlZmluZWRUYWcgPSAnW29iamVjdCBVbmRlZmluZWRdJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3ltVG9TdHJpbmdUYWcgPSBTeW1ib2wgPyBTeW1ib2wudG9TdHJpbmdUYWcgOiB1bmRlZmluZWQ7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGdldFRhZ2Agd2l0aG91dCBmYWxsYmFja3MgZm9yIGJ1Z2d5IGVudmlyb25tZW50cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG5mdW5jdGlvbiBiYXNlR2V0VGFnKHZhbHVlKSB7XG4gIGlmICh2YWx1ZSA9PSBudWxsKSB7XG4gICAgcmV0dXJuIHZhbHVlID09PSB1bmRlZmluZWQgPyB1bmRlZmluZWRUYWcgOiBudWxsVGFnO1xuICB9XG4gIHJldHVybiAoc3ltVG9TdHJpbmdUYWcgJiYgc3ltVG9TdHJpbmdUYWcgaW4gT2JqZWN0KHZhbHVlKSlcbiAgICA/IGdldFJhd1RhZyh2YWx1ZSlcbiAgICA6IG9iamVjdFRvU3RyaW5nKHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldFRhZztcbiIsIi8qKlxuICogQ3JlYXRlcyBhIHVuYXJ5IGZ1bmN0aW9uIHRoYXQgaW52b2tlcyBgZnVuY2Agd2l0aCBpdHMgYXJndW1lbnQgdHJhbnNmb3JtZWQuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIHdyYXAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSB0cmFuc2Zvcm0gVGhlIGFyZ3VtZW50IHRyYW5zZm9ybS5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBvdmVyQXJnKGZ1bmMsIHRyYW5zZm9ybSkge1xuICByZXR1cm4gZnVuY3Rpb24oYXJnKSB7XG4gICAgcmV0dXJuIGZ1bmModHJhbnNmb3JtKGFyZykpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBvdmVyQXJnO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIGdldFByb3RvdHlwZSA9IG92ZXJBcmcoT2JqZWN0LmdldFByb3RvdHlwZU9mLCBPYmplY3QpO1xuXG5leHBvcnQgZGVmYXVsdCBnZXRQcm90b3R5cGU7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLiBBIHZhbHVlIGlzIG9iamVjdC1saWtlIGlmIGl0J3Mgbm90IGBudWxsYFxuICogYW5kIGhhcyBhIGB0eXBlb2ZgIHJlc3VsdCBvZiBcIm9iamVjdFwiLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIG9iamVjdC1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKHt9KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0TGlrZShbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKF8ubm9vcCk7XG4gKiAvLyA9PiBmYWxzZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3RMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHR5cGVvZiB2YWx1ZSA9PSAnb2JqZWN0Jztcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNPYmplY3RMaWtlO1xuIiwiaW1wb3J0IGJhc2VHZXRUYWcgZnJvbSAnLi9fYmFzZUdldFRhZy5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlLFxuICAgIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gcmVzb2x2ZSB0aGUgZGVjb21waWxlZCBzb3VyY2Ugb2YgZnVuY3Rpb25zLiAqL1xudmFyIGZ1bmNUb1N0cmluZyA9IGZ1bmNQcm90by50b1N0cmluZztcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqIFVzZWQgdG8gaW5mZXIgdGhlIGBPYmplY3RgIGNvbnN0cnVjdG9yLiAqL1xudmFyIG9iamVjdEN0b3JTdHJpbmcgPSBmdW5jVG9TdHJpbmcuY2FsbChPYmplY3QpO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGF0IGlzLCBhbiBvYmplY3QgY3JlYXRlZCBieSB0aGVcbiAqIGBPYmplY3RgIGNvbnN0cnVjdG9yIG9yIG9uZSB3aXRoIGEgYFtbUHJvdG90eXBlXV1gIG9mIGBudWxsYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuOC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHBsYWluIG9iamVjdCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiB9XG4gKlxuICogXy5pc1BsYWluT2JqZWN0KG5ldyBGb28pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzUGxhaW5PYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KHsgJ3gnOiAwLCAneSc6IDAgfSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1BsYWluT2JqZWN0KE9iamVjdC5jcmVhdGUobnVsbCkpO1xuICogLy8gPT4gdHJ1ZVxuICovXG5mdW5jdGlvbiBpc1BsYWluT2JqZWN0KHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3RMaWtlKHZhbHVlKSB8fCBiYXNlR2V0VGFnKHZhbHVlKSAhPSBvYmplY3RUYWcpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIHByb3RvID0gZ2V0UHJvdG90eXBlKHZhbHVlKTtcbiAgaWYgKHByb3RvID09PSBudWxsKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgdmFyIEN0b3IgPSBoYXNPd25Qcm9wZXJ0eS5jYWxsKHByb3RvLCAnY29uc3RydWN0b3InKSAmJiBwcm90by5jb25zdHJ1Y3RvcjtcbiAgcmV0dXJuIHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3RvciBpbnN0YW5jZW9mIEN0b3IgJiZcbiAgICBmdW5jVG9TdHJpbmcuY2FsbChDdG9yKSA9PSBvYmplY3RDdG9yU3RyaW5nO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1BsYWluT2JqZWN0O1xuIiwiLyoqXG4gKiBSZW1vdmVzIGFsbCBrZXktdmFsdWUgZW50cmllcyBmcm9tIHRoZSBsaXN0IGNhY2hlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICovXG5mdW5jdGlvbiBsaXN0Q2FjaGVDbGVhcigpIHtcbiAgdGhpcy5fX2RhdGFfXyA9IFtdO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBsaXN0Q2FjaGVDbGVhcjtcbiIsIi8qKlxuICogUGVyZm9ybXMgYVxuICogW2BTYW1lVmFsdWVaZXJvYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtc2FtZXZhbHVlemVybylcbiAqIGNvbXBhcmlzb24gYmV0d2VlbiB0d28gdmFsdWVzIHRvIGRldGVybWluZSBpZiB0aGV5IGFyZSBlcXVpdmFsZW50LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgdmFsdWVzIGFyZSBlcXVpdmFsZW50LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSB9O1xuICogdmFyIG90aGVyID0geyAnYSc6IDEgfTtcbiAqXG4gKiBfLmVxKG9iamVjdCwgb2JqZWN0KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKG9iamVjdCwgb3RoZXIpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKCdhJywgJ2EnKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmVxKCdhJywgT2JqZWN0KCdhJykpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmVxKE5hTiwgTmFOKTtcbiAqIC8vID0+IHRydWVcbiAqL1xuZnVuY3Rpb24gZXEodmFsdWUsIG90aGVyKSB7XG4gIHJldHVybiB2YWx1ZSA9PT0gb3RoZXIgfHwgKHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXIpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcTtcbiIsImltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBpbmRleCBhdCB3aGljaCB0aGUgYGtleWAgaXMgZm91bmQgaW4gYGFycmF5YCBvZiBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBpbnNwZWN0LlxuICogQHBhcmFtIHsqfSBrZXkgVGhlIGtleSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgdmFsdWUsIGVsc2UgYC0xYC5cbiAqL1xuZnVuY3Rpb24gYXNzb2NJbmRleE9mKGFycmF5LCBrZXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgaWYgKGVxKGFycmF5W2xlbmd0aF1bMF0sIGtleSkpIHtcbiAgICAgIHJldHVybiBsZW5ndGg7XG4gICAgfVxuICB9XG4gIHJldHVybiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzb2NJbmRleE9mO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgYXJyYXlQcm90byA9IEFycmF5LnByb3RvdHlwZTtcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgc3BsaWNlID0gYXJyYXlQcm90by5zcGxpY2U7XG5cbi8qKlxuICogUmVtb3ZlcyBga2V5YCBhbmQgaXRzIHZhbHVlIGZyb20gdGhlIGxpc3QgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIExpc3RDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZURlbGV0ZShrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fLFxuICAgICAgaW5kZXggPSBhc3NvY0luZGV4T2YoZGF0YSwga2V5KTtcblxuICBpZiAoaW5kZXggPCAwKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIHZhciBsYXN0SW5kZXggPSBkYXRhLmxlbmd0aCAtIDE7XG4gIGlmIChpbmRleCA9PSBsYXN0SW5kZXgpIHtcbiAgICBkYXRhLnBvcCgpO1xuICB9IGVsc2Uge1xuICAgIHNwbGljZS5jYWxsKGRhdGEsIGluZGV4LCAxKTtcbiAgfVxuICAtLXRoaXMuc2l6ZTtcbiAgcmV0dXJuIHRydWU7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZURlbGV0ZTtcbiIsImltcG9ydCBhc3NvY0luZGV4T2YgZnJvbSAnLi9fYXNzb2NJbmRleE9mLmpzJztcblxuLyoqXG4gKiBHZXRzIHRoZSBsaXN0IGNhY2hlIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlR2V0KGtleSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX18sXG4gICAgICBpbmRleCA9IGFzc29jSW5kZXhPZihkYXRhLCBrZXkpO1xuXG4gIHJldHVybiBpbmRleCA8IDAgPyB1bmRlZmluZWQgOiBkYXRhW2luZGV4XVsxXTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlR2V0O1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGxpc3QgY2FjaGUgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gbGlzdENhY2hlSGFzKGtleSkge1xuICByZXR1cm4gYXNzb2NJbmRleE9mKHRoaXMuX19kYXRhX18sIGtleSkgPiAtMTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbGlzdENhY2hlSGFzO1xuIiwiaW1wb3J0IGFzc29jSW5kZXhPZiBmcm9tICcuL19hc3NvY0luZGV4T2YuanMnO1xuXG4vKipcbiAqIFNldHMgdGhlIGxpc3QgY2FjaGUgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTGlzdENhY2hlXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHNldC5cbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGxpc3QgY2FjaGUgaW5zdGFuY2UuXG4gKi9cbmZ1bmN0aW9uIGxpc3RDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIGluZGV4ID0gYXNzb2NJbmRleE9mKGRhdGEsIGtleSk7XG5cbiAgaWYgKGluZGV4IDwgMCkge1xuICAgICsrdGhpcy5zaXplO1xuICAgIGRhdGEucHVzaChba2V5LCB2YWx1ZV0pO1xuICB9IGVsc2Uge1xuICAgIGRhdGFbaW5kZXhdWzFdID0gdmFsdWU7XG4gIH1cbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGxpc3RDYWNoZVNldDtcbiIsImltcG9ydCBsaXN0Q2FjaGVDbGVhciBmcm9tICcuL19saXN0Q2FjaGVDbGVhci5qcyc7XG5pbXBvcnQgbGlzdENhY2hlRGVsZXRlIGZyb20gJy4vX2xpc3RDYWNoZURlbGV0ZS5qcyc7XG5pbXBvcnQgbGlzdENhY2hlR2V0IGZyb20gJy4vX2xpc3RDYWNoZUdldC5qcyc7XG5pbXBvcnQgbGlzdENhY2hlSGFzIGZyb20gJy4vX2xpc3RDYWNoZUhhcy5qcyc7XG5pbXBvcnQgbGlzdENhY2hlU2V0IGZyb20gJy4vX2xpc3RDYWNoZVNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBsaXN0IGNhY2hlIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbZW50cmllc10gVGhlIGtleS12YWx1ZSBwYWlycyB0byBjYWNoZS5cbiAqL1xuZnVuY3Rpb24gTGlzdENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYExpc3RDYWNoZWAuXG5MaXN0Q2FjaGUucHJvdG90eXBlLmNsZWFyID0gbGlzdENhY2hlQ2xlYXI7XG5MaXN0Q2FjaGUucHJvdG90eXBlWydkZWxldGUnXSA9IGxpc3RDYWNoZURlbGV0ZTtcbkxpc3RDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbGlzdENhY2hlR2V0O1xuTGlzdENhY2hlLnByb3RvdHlwZS5oYXMgPSBsaXN0Q2FjaGVIYXM7XG5MaXN0Q2FjaGUucHJvdG90eXBlLnNldCA9IGxpc3RDYWNoZVNldDtcblxuZXhwb3J0IGRlZmF1bHQgTGlzdENhY2hlO1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIHN0YWNrLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIFN0YWNrXG4gKi9cbmZ1bmN0aW9uIHN0YWNrQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTGlzdENhY2hlO1xuICB0aGlzLnNpemUgPSAwO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0NsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgc3RhY2suXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGRlbGV0ZVxuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIHJlbW92ZS5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgZW50cnkgd2FzIHJlbW92ZWQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tEZWxldGUoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyxcbiAgICAgIHJlc3VsdCA9IGRhdGFbJ2RlbGV0ZSddKGtleSk7XG5cbiAgdGhpcy5zaXplID0gZGF0YS5zaXplO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0RlbGV0ZTtcbiIsIi8qKlxuICogR2V0cyB0aGUgc3RhY2sgdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgZW50cnkgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIHN0YWNrR2V0KGtleSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgc3RhY2tHZXQ7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBhIHN0YWNrIHZhbHVlIGZvciBga2V5YCBleGlzdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFN0YWNrXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIGVudHJ5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGFuIGVudHJ5IGZvciBga2V5YCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gc3RhY2tIYXMoa2V5KSB7XG4gIHJldHVybiB0aGlzLl9fZGF0YV9fLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdGFja0hhcztcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgdGhlXG4gKiBbbGFuZ3VhZ2UgdHlwZV0oaHR0cDovL3d3dy5lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLWVjbWFzY3JpcHQtbGFuZ3VhZ2UtdHlwZXMpXG4gKiBvZiBgT2JqZWN0YC4gKGUuZy4gYXJyYXlzLCBmdW5jdGlvbnMsIG9iamVjdHMsIHJlZ2V4ZXMsIGBuZXcgTnVtYmVyKDApYCwgYW5kIGBuZXcgU3RyaW5nKCcnKWApXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gb2JqZWN0LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNPYmplY3Qoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KF8ubm9vcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChudWxsKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzT2JqZWN0KHZhbHVlKSB7XG4gIHZhciB0eXBlID0gdHlwZW9mIHZhbHVlO1xuICByZXR1cm4gdmFsdWUgIT0gbnVsbCAmJiAodHlwZSA9PSAnb2JqZWN0JyB8fCB0eXBlID09ICdmdW5jdGlvbicpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc09iamVjdDtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXN5bmNUYWcgPSAnW29iamVjdCBBc3luY0Z1bmN0aW9uXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBwcm94eVRhZyA9ICdbb2JqZWN0IFByb3h5XSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBGdW5jdGlvbmAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgZnVuY3Rpb24sIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0Z1bmN0aW9uKF8pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNGdW5jdGlvbigvYWJjLyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc0Z1bmN0aW9uKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIFRoZSB1c2Ugb2YgYE9iamVjdCN0b1N0cmluZ2AgYXZvaWRzIGlzc3VlcyB3aXRoIHRoZSBgdHlwZW9mYCBvcGVyYXRvclxuICAvLyBpbiBTYWZhcmkgOSB3aGljaCByZXR1cm5zICdvYmplY3QnIGZvciB0eXBlZCBhcnJheXMgYW5kIG90aGVyIGNvbnN0cnVjdG9ycy5cbiAgdmFyIHRhZyA9IGJhc2VHZXRUYWcodmFsdWUpO1xuICByZXR1cm4gdGFnID09IGZ1bmNUYWcgfHwgdGFnID09IGdlblRhZyB8fCB0YWcgPT0gYXN5bmNUYWcgfHwgdGFnID09IHByb3h5VGFnO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0Z1bmN0aW9uO1xuIiwiaW1wb3J0IGNvcmVKc0RhdGEgZnJvbSAnLi9fY29yZUpzRGF0YS5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBtZXRob2RzIG1hc3F1ZXJhZGluZyBhcyBuYXRpdmUuICovXG52YXIgbWFza1NyY0tleSA9IChmdW5jdGlvbigpIHtcbiAgdmFyIHVpZCA9IC9bXi5dKyQvLmV4ZWMoY29yZUpzRGF0YSAmJiBjb3JlSnNEYXRhLmtleXMgJiYgY29yZUpzRGF0YS5rZXlzLklFX1BST1RPIHx8ICcnKTtcbiAgcmV0dXJuIHVpZCA/ICgnU3ltYm9sKHNyYylfMS4nICsgdWlkKSA6ICcnO1xufSgpKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYGZ1bmNgIGhhcyBpdHMgc291cmNlIG1hc2tlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGZ1bmNgIGlzIG1hc2tlZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc01hc2tlZChmdW5jKSB7XG4gIHJldHVybiAhIW1hc2tTcmNLZXkgJiYgKG1hc2tTcmNLZXkgaW4gZnVuYyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzTWFza2VkO1xuIiwiaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBvdmVycmVhY2hpbmcgY29yZS1qcyBzaGltcy4gKi9cbnZhciBjb3JlSnNEYXRhID0gcm9vdFsnX19jb3JlLWpzX3NoYXJlZF9fJ107XG5cbmV4cG9ydCBkZWZhdWx0IGNvcmVKc0RhdGE7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgZnVuY1Byb3RvID0gRnVuY3Rpb24ucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byByZXNvbHZlIHRoZSBkZWNvbXBpbGVkIHNvdXJjZSBvZiBmdW5jdGlvbnMuICovXG52YXIgZnVuY1RvU3RyaW5nID0gZnVuY1Byb3RvLnRvU3RyaW5nO1xuXG4vKipcbiAqIENvbnZlcnRzIGBmdW5jYCB0byBpdHMgc291cmNlIGNvZGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBzb3VyY2UgY29kZS5cbiAqL1xuZnVuY3Rpb24gdG9Tb3VyY2UoZnVuYykge1xuICBpZiAoZnVuYyAhPSBudWxsKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBmdW5jVG9TdHJpbmcuY2FsbChmdW5jKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuICAgIHRyeSB7XG4gICAgICByZXR1cm4gKGZ1bmMgKyAnJyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuICByZXR1cm4gJyc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU291cmNlO1xuIiwiaW1wb3J0IGlzRnVuY3Rpb24gZnJvbSAnLi9pc0Z1bmN0aW9uLmpzJztcbmltcG9ydCBpc01hc2tlZCBmcm9tICcuL19pc01hc2tlZC5qcyc7XG5pbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgdG9Tb3VyY2UgZnJvbSAnLi9fdG9Tb3VyY2UuanMnO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggYFJlZ0V4cGBcbiAqIFtzeW50YXggY2hhcmFjdGVyc10oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtcGF0dGVybnMpLlxuICovXG52YXIgcmVSZWdFeHBDaGFyID0gL1tcXFxcXiQuKis/KClbXFxde318XS9nO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgaG9zdCBjb25zdHJ1Y3RvcnMgKFNhZmFyaSkuICovXG52YXIgcmVJc0hvc3RDdG9yID0gL15cXFtvYmplY3QgLis/Q29uc3RydWN0b3JcXF0kLztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIGZ1bmNQcm90byA9IEZ1bmN0aW9uLnByb3RvdHlwZSxcbiAgICBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIHJlc29sdmUgdGhlIGRlY29tcGlsZWQgc291cmNlIG9mIGZ1bmN0aW9ucy4gKi9cbnZhciBmdW5jVG9TdHJpbmcgPSBmdW5jUHJvdG8udG9TdHJpbmc7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBpZiBhIG1ldGhvZCBpcyBuYXRpdmUuICovXG52YXIgcmVJc05hdGl2ZSA9IFJlZ0V4cCgnXicgK1xuICBmdW5jVG9TdHJpbmcuY2FsbChoYXNPd25Qcm9wZXJ0eSkucmVwbGFjZShyZVJlZ0V4cENoYXIsICdcXFxcJCYnKVxuICAucmVwbGFjZSgvaGFzT3duUHJvcGVydHl8KGZ1bmN0aW9uKS4qPyg/PVxcXFxcXCgpfCBmb3IgLis/KD89XFxcXFxcXSkvZywgJyQxLio/JykgKyAnJCdcbik7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNOYXRpdmVgIHdpdGhvdXQgYmFkIHNoaW0gY2hlY2tzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbmF0aXZlIGZ1bmN0aW9uLFxuICogIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzTmF0aXZlKHZhbHVlKSB7XG4gIGlmICghaXNPYmplY3QodmFsdWUpIHx8IGlzTWFza2VkKHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgcGF0dGVybiA9IGlzRnVuY3Rpb24odmFsdWUpID8gcmVJc05hdGl2ZSA6IHJlSXNIb3N0Q3RvcjtcbiAgcmV0dXJuIHBhdHRlcm4udGVzdCh0b1NvdXJjZSh2YWx1ZSkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNOYXRpdmU7XG4iLCIvKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBrZXlgIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIHByb3BlcnR5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBnZXRWYWx1ZShvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ID09IG51bGwgPyB1bmRlZmluZWQgOiBvYmplY3Rba2V5XTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VmFsdWU7XG4iLCJpbXBvcnQgYmFzZUlzTmF0aXZlIGZyb20gJy4vX2Jhc2VJc05hdGl2ZS5qcyc7XG5pbXBvcnQgZ2V0VmFsdWUgZnJvbSAnLi9fZ2V0VmFsdWUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIG5hdGl2ZSBmdW5jdGlvbiBhdCBga2V5YCBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBtZXRob2QgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGZ1bmN0aW9uIGlmIGl0J3MgbmF0aXZlLCBlbHNlIGB1bmRlZmluZWRgLlxuICovXG5mdW5jdGlvbiBnZXROYXRpdmUob2JqZWN0LCBrZXkpIHtcbiAgdmFyIHZhbHVlID0gZ2V0VmFsdWUob2JqZWN0LCBrZXkpO1xuICByZXR1cm4gYmFzZUlzTmF0aXZlKHZhbHVlKSA/IHZhbHVlIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBnZXROYXRpdmU7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIE1hcCA9IGdldE5hdGl2ZShyb290LCAnTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcDtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIG5hdGl2ZUNyZWF0ZSA9IGdldE5hdGl2ZShPYmplY3QsICdjcmVhdGUnKTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlQ3JlYXRlO1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKipcbiAqIFJlbW92ZXMgYWxsIGtleS12YWx1ZSBlbnRyaWVzIGZyb20gdGhlIGhhc2guXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGNsZWFyXG4gKiBAbWVtYmVyT2YgSGFzaFxuICovXG5mdW5jdGlvbiBoYXNoQ2xlYXIoKSB7XG4gIHRoaXMuX19kYXRhX18gPSBuYXRpdmVDcmVhdGUgPyBuYXRpdmVDcmVhdGUobnVsbCkgOiB7fTtcbiAgdGhpcy5zaXplID0gMDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaENsZWFyO1xuIiwiLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgaGFzaC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZGVsZXRlXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtPYmplY3R9IGhhc2ggVGhlIGhhc2ggdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hEZWxldGUoa2V5KSB7XG4gIHZhciByZXN1bHQgPSB0aGlzLmhhcyhrZXkpICYmIGRlbGV0ZSB0aGlzLl9fZGF0YV9fW2tleV07XG4gIHRoaXMuc2l6ZSAtPSByZXN1bHQgPyAxIDogMDtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzaERlbGV0ZTtcbiIsImltcG9ydCBuYXRpdmVDcmVhdGUgZnJvbSAnLi9fbmF0aXZlQ3JlYXRlLmpzJztcblxuLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEdldHMgdGhlIGhhc2ggdmFsdWUgZm9yIGBrZXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBnZXRcbiAqIEBtZW1iZXJPZiBIYXNoXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSBrZXkgb2YgdGhlIHZhbHVlIHRvIGdldC5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBlbnRyeSB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gaGFzaEdldChrZXkpIHtcbiAgdmFyIGRhdGEgPSB0aGlzLl9fZGF0YV9fO1xuICBpZiAobmF0aXZlQ3JlYXRlKSB7XG4gICAgdmFyIHJlc3VsdCA9IGRhdGFba2V5XTtcbiAgICByZXR1cm4gcmVzdWx0ID09PSBIQVNIX1VOREVGSU5FRCA/IHVuZGVmaW5lZCA6IHJlc3VsdDtcbiAgfVxuICByZXR1cm4gaGFzT3duUHJvcGVydHkuY2FsbChkYXRhLCBrZXkpID8gZGF0YVtrZXldIDogdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoR2V0O1xuIiwiaW1wb3J0IG5hdGl2ZUNyZWF0ZSBmcm9tICcuL19uYXRpdmVDcmVhdGUuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBhIGhhc2ggdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgSGFzaFxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGhhc2hIYXMoa2V5KSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgcmV0dXJuIG5hdGl2ZUNyZWF0ZSA/IChkYXRhW2tleV0gIT09IHVuZGVmaW5lZCkgOiBoYXNPd25Qcm9wZXJ0eS5jYWxsKGRhdGEsIGtleSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc2hIYXM7XG4iLCJpbXBvcnQgbmF0aXZlQ3JlYXRlIGZyb20gJy4vX25hdGl2ZUNyZWF0ZS5qcyc7XG5cbi8qKiBVc2VkIHRvIHN0YW5kLWluIGZvciBgdW5kZWZpbmVkYCBoYXNoIHZhbHVlcy4gKi9cbnZhciBIQVNIX1VOREVGSU5FRCA9ICdfX2xvZGFzaF9oYXNoX3VuZGVmaW5lZF9fJztcblxuLyoqXG4gKiBTZXRzIHRoZSBoYXNoIGBrZXlgIHRvIGB2YWx1ZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIHNldFxuICogQG1lbWJlck9mIEhhc2hcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaGFzaCBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gaGFzaFNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXztcbiAgdGhpcy5zaXplICs9IHRoaXMuaGFzKGtleSkgPyAwIDogMTtcbiAgZGF0YVtrZXldID0gKG5hdGl2ZUNyZWF0ZSAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSA/IEhBU0hfVU5ERUZJTkVEIDogdmFsdWU7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNoU2V0O1xuIiwiaW1wb3J0IGhhc2hDbGVhciBmcm9tICcuL19oYXNoQ2xlYXIuanMnO1xuaW1wb3J0IGhhc2hEZWxldGUgZnJvbSAnLi9faGFzaERlbGV0ZS5qcyc7XG5pbXBvcnQgaGFzaEdldCBmcm9tICcuL19oYXNoR2V0LmpzJztcbmltcG9ydCBoYXNoSGFzIGZyb20gJy4vX2hhc2hIYXMuanMnO1xuaW1wb3J0IGhhc2hTZXQgZnJvbSAnLi9faGFzaFNldC5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGhhc2ggb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBIYXNoKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYEhhc2hgLlxuSGFzaC5wcm90b3R5cGUuY2xlYXIgPSBoYXNoQ2xlYXI7XG5IYXNoLnByb3RvdHlwZVsnZGVsZXRlJ10gPSBoYXNoRGVsZXRlO1xuSGFzaC5wcm90b3R5cGUuZ2V0ID0gaGFzaEdldDtcbkhhc2gucHJvdG90eXBlLmhhcyA9IGhhc2hIYXM7XG5IYXNoLnByb3RvdHlwZS5zZXQgPSBoYXNoU2V0O1xuXG5leHBvcnQgZGVmYXVsdCBIYXNoO1xuIiwiaW1wb3J0IEhhc2ggZnJvbSAnLi9fSGFzaC5qcyc7XG5pbXBvcnQgTGlzdENhY2hlIGZyb20gJy4vX0xpc3RDYWNoZS5qcyc7XG5pbXBvcnQgTWFwIGZyb20gJy4vX01hcC5qcyc7XG5cbi8qKlxuICogUmVtb3ZlcyBhbGwga2V5LXZhbHVlIGVudHJpZXMgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBjbGVhclxuICogQG1lbWJlck9mIE1hcENhY2hlXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlQ2xlYXIoKSB7XG4gIHRoaXMuc2l6ZSA9IDA7XG4gIHRoaXMuX19kYXRhX18gPSB7XG4gICAgJ2hhc2gnOiBuZXcgSGFzaCxcbiAgICAnbWFwJzogbmV3IChNYXAgfHwgTGlzdENhY2hlKSxcbiAgICAnc3RyaW5nJzogbmV3IEhhc2hcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVDbGVhcjtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgc3VpdGFibGUgZm9yIHVzZSBhcyB1bmlxdWUgb2JqZWN0IGtleS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleWFibGUodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAodHlwZSA9PSAnc3RyaW5nJyB8fCB0eXBlID09ICdudW1iZXInIHx8IHR5cGUgPT0gJ3N5bWJvbCcgfHwgdHlwZSA9PSAnYm9vbGVhbicpXG4gICAgPyAodmFsdWUgIT09ICdfX3Byb3RvX18nKVxuICAgIDogKHZhbHVlID09PSBudWxsKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNLZXlhYmxlO1xuIiwiaW1wb3J0IGlzS2V5YWJsZSBmcm9tICcuL19pc0tleWFibGUuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIGRhdGEgZm9yIGBtYXBgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge3N0cmluZ30ga2V5IFRoZSByZWZlcmVuY2Uga2V5LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIG1hcCBkYXRhLlxuICovXG5mdW5jdGlvbiBnZXRNYXBEYXRhKG1hcCwga2V5KSB7XG4gIHZhciBkYXRhID0gbWFwLl9fZGF0YV9fO1xuICByZXR1cm4gaXNLZXlhYmxlKGtleSlcbiAgICA/IGRhdGFbdHlwZW9mIGtleSA9PSAnc3RyaW5nJyA/ICdzdHJpbmcnIDogJ2hhc2gnXVxuICAgIDogZGF0YS5tYXA7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldE1hcERhdGE7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBSZW1vdmVzIGBrZXlgIGFuZCBpdHMgdmFsdWUgZnJvbSB0aGUgbWFwLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBkZWxldGVcbiAqIEBtZW1iZXJPZiBNYXBDYWNoZVxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byByZW1vdmUuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGVudHJ5IHdhcyByZW1vdmVkLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIG1hcENhY2hlRGVsZXRlKGtleSkge1xuICB2YXIgcmVzdWx0ID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpWydkZWxldGUnXShrZXkpO1xuICB0aGlzLnNpemUgLT0gcmVzdWx0ID8gMSA6IDA7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcENhY2hlRGVsZXRlO1xuIiwiaW1wb3J0IGdldE1hcERhdGEgZnJvbSAnLi9fZ2V0TWFwRGF0YS5qcyc7XG5cbi8qKlxuICogR2V0cyB0aGUgbWFwIHZhbHVlIGZvciBga2V5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgZ2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gZ2V0LlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGVudHJ5IHZhbHVlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUdldChrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5nZXQoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVHZXQ7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYSBtYXAgdmFsdWUgZm9yIGBrZXlgIGV4aXN0cy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgaGFzXG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgZW50cnkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW4gZW50cnkgZm9yIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZUhhcyhrZXkpIHtcbiAgcmV0dXJuIGdldE1hcERhdGEodGhpcywga2V5KS5oYXMoa2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwQ2FjaGVIYXM7XG4iLCJpbXBvcnQgZ2V0TWFwRGF0YSBmcm9tICcuL19nZXRNYXBEYXRhLmpzJztcblxuLyoqXG4gKiBTZXRzIHRoZSBtYXAgYGtleWAgdG8gYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQG5hbWUgc2V0XG4gKiBAbWVtYmVyT2YgTWFwQ2FjaGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgdmFsdWUgdG8gc2V0LlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gc2V0LlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbWFwIGNhY2hlIGluc3RhbmNlLlxuICovXG5mdW5jdGlvbiBtYXBDYWNoZVNldChrZXksIHZhbHVlKSB7XG4gIHZhciBkYXRhID0gZ2V0TWFwRGF0YSh0aGlzLCBrZXkpLFxuICAgICAgc2l6ZSA9IGRhdGEuc2l6ZTtcblxuICBkYXRhLnNldChrZXksIHZhbHVlKTtcbiAgdGhpcy5zaXplICs9IGRhdGEuc2l6ZSA9PSBzaXplID8gMCA6IDE7XG4gIHJldHVybiB0aGlzO1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBDYWNoZVNldDtcbiIsImltcG9ydCBtYXBDYWNoZUNsZWFyIGZyb20gJy4vX21hcENhY2hlQ2xlYXIuanMnO1xuaW1wb3J0IG1hcENhY2hlRGVsZXRlIGZyb20gJy4vX21hcENhY2hlRGVsZXRlLmpzJztcbmltcG9ydCBtYXBDYWNoZUdldCBmcm9tICcuL19tYXBDYWNoZUdldC5qcyc7XG5pbXBvcnQgbWFwQ2FjaGVIYXMgZnJvbSAnLi9fbWFwQ2FjaGVIYXMuanMnO1xuaW1wb3J0IG1hcENhY2hlU2V0IGZyb20gJy4vX21hcENhY2hlU2V0LmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgbWFwIGNhY2hlIG9iamVjdCB0byBzdG9yZSBrZXktdmFsdWUgcGFpcnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBjb25zdHJ1Y3RvclxuICogQHBhcmFtIHtBcnJheX0gW2VudHJpZXNdIFRoZSBrZXktdmFsdWUgcGFpcnMgdG8gY2FjaGUuXG4gKi9cbmZ1bmN0aW9uIE1hcENhY2hlKGVudHJpZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBlbnRyaWVzID09IG51bGwgPyAwIDogZW50cmllcy5sZW5ndGg7XG5cbiAgdGhpcy5jbGVhcigpO1xuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBlbnRyeSA9IGVudHJpZXNbaW5kZXhdO1xuICAgIHRoaXMuc2V0KGVudHJ5WzBdLCBlbnRyeVsxXSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYE1hcENhY2hlYC5cbk1hcENhY2hlLnByb3RvdHlwZS5jbGVhciA9IG1hcENhY2hlQ2xlYXI7XG5NYXBDYWNoZS5wcm90b3R5cGVbJ2RlbGV0ZSddID0gbWFwQ2FjaGVEZWxldGU7XG5NYXBDYWNoZS5wcm90b3R5cGUuZ2V0ID0gbWFwQ2FjaGVHZXQ7XG5NYXBDYWNoZS5wcm90b3R5cGUuaGFzID0gbWFwQ2FjaGVIYXM7XG5NYXBDYWNoZS5wcm90b3R5cGUuc2V0ID0gbWFwQ2FjaGVTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IE1hcENhY2hlO1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIFVzZWQgYXMgdGhlIHNpemUgdG8gZW5hYmxlIGxhcmdlIGFycmF5IG9wdGltaXphdGlvbnMuICovXG52YXIgTEFSR0VfQVJSQVlfU0laRSA9IDIwMDtcblxuLyoqXG4gKiBTZXRzIHRoZSBzdGFjayBga2V5YCB0byBgdmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAbmFtZSBzZXRcbiAqIEBtZW1iZXJPZiBTdGFja1xuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBzdGFjayBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc3RhY2tTZXQoa2V5LCB2YWx1ZSkge1xuICB2YXIgZGF0YSA9IHRoaXMuX19kYXRhX187XG4gIGlmIChkYXRhIGluc3RhbmNlb2YgTGlzdENhY2hlKSB7XG4gICAgdmFyIHBhaXJzID0gZGF0YS5fX2RhdGFfXztcbiAgICBpZiAoIU1hcCB8fCAocGFpcnMubGVuZ3RoIDwgTEFSR0VfQVJSQVlfU0laRSAtIDEpKSB7XG4gICAgICBwYWlycy5wdXNoKFtrZXksIHZhbHVlXSk7XG4gICAgICB0aGlzLnNpemUgPSArK2RhdGEuc2l6ZTtcbiAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBNYXBDYWNoZShwYWlycyk7XG4gIH1cbiAgZGF0YS5zZXQoa2V5LCB2YWx1ZSk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0YWNrU2V0O1xuIiwiaW1wb3J0IExpc3RDYWNoZSBmcm9tICcuL19MaXN0Q2FjaGUuanMnO1xuaW1wb3J0IHN0YWNrQ2xlYXIgZnJvbSAnLi9fc3RhY2tDbGVhci5qcyc7XG5pbXBvcnQgc3RhY2tEZWxldGUgZnJvbSAnLi9fc3RhY2tEZWxldGUuanMnO1xuaW1wb3J0IHN0YWNrR2V0IGZyb20gJy4vX3N0YWNrR2V0LmpzJztcbmltcG9ydCBzdGFja0hhcyBmcm9tICcuL19zdGFja0hhcy5qcyc7XG5pbXBvcnQgc3RhY2tTZXQgZnJvbSAnLi9fc3RhY2tTZXQuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBzdGFjayBjYWNoZSBvYmplY3QgdG8gc3RvcmUga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAY29uc3RydWN0b3JcbiAqIEBwYXJhbSB7QXJyYXl9IFtlbnRyaWVzXSBUaGUga2V5LXZhbHVlIHBhaXJzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTdGFjayhlbnRyaWVzKSB7XG4gIHZhciBkYXRhID0gdGhpcy5fX2RhdGFfXyA9IG5ldyBMaXN0Q2FjaGUoZW50cmllcyk7XG4gIHRoaXMuc2l6ZSA9IGRhdGEuc2l6ZTtcbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFN0YWNrYC5cblN0YWNrLnByb3RvdHlwZS5jbGVhciA9IHN0YWNrQ2xlYXI7XG5TdGFjay5wcm90b3R5cGVbJ2RlbGV0ZSddID0gc3RhY2tEZWxldGU7XG5TdGFjay5wcm90b3R5cGUuZ2V0ID0gc3RhY2tHZXQ7XG5TdGFjay5wcm90b3R5cGUuaGFzID0gc3RhY2tIYXM7XG5TdGFjay5wcm90b3R5cGUuc2V0ID0gc3RhY2tTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IFN0YWNrO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8uZm9yRWFjaGAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGFycmF5RWFjaChhcnJheSwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBhcnJheSA9PSBudWxsID8gMCA6IGFycmF5Lmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGlmIChpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkgPT09IGZhbHNlKSB7XG4gICAgICBicmVhaztcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGFycmF5O1xufVxuXG5leHBvcnQgZGVmYXVsdCBhcnJheUVhY2g7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5cbnZhciBkZWZpbmVQcm9wZXJ0eSA9IChmdW5jdGlvbigpIHtcbiAgdHJ5IHtcbiAgICB2YXIgZnVuYyA9IGdldE5hdGl2ZShPYmplY3QsICdkZWZpbmVQcm9wZXJ0eScpO1xuICAgIGZ1bmMoe30sICcnLCB7fSk7XG4gICAgcmV0dXJuIGZ1bmM7XG4gIH0gY2F0Y2ggKGUpIHt9XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVQcm9wZXJ0eTtcbiIsImltcG9ydCBkZWZpbmVQcm9wZXJ0eSBmcm9tICcuL19kZWZpbmVQcm9wZXJ0eS5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGFzc2lnblZhbHVlYCBhbmQgYGFzc2lnbk1lcmdlVmFsdWVgIHdpdGhvdXRcbiAqIHZhbHVlIGNoZWNrcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gYXNzaWduLlxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gYXNzaWduLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIHZhbHVlKSB7XG4gIGlmIChrZXkgPT0gJ19fcHJvdG9fXycgJiYgZGVmaW5lUHJvcGVydHkpIHtcbiAgICBkZWZpbmVQcm9wZXJ0eShvYmplY3QsIGtleSwge1xuICAgICAgJ2NvbmZpZ3VyYWJsZSc6IHRydWUsXG4gICAgICAnZW51bWVyYWJsZSc6IHRydWUsXG4gICAgICAndmFsdWUnOiB2YWx1ZSxcbiAgICAgICd3cml0YWJsZSc6IHRydWVcbiAgICB9KTtcbiAgfSBlbHNlIHtcbiAgICBvYmplY3Rba2V5XSA9IHZhbHVlO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VBc3NpZ25WYWx1ZTtcbiIsImltcG9ydCBiYXNlQXNzaWduVmFsdWUgZnJvbSAnLi9fYmFzZUFzc2lnblZhbHVlLmpzJztcbmltcG9ydCBlcSBmcm9tICcuL2VxLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBBc3NpZ25zIGB2YWx1ZWAgdG8gYGtleWAgb2YgYG9iamVjdGAgaWYgdGhlIGV4aXN0aW5nIHZhbHVlIGlzIG5vdCBlcXVpdmFsZW50XG4gKiB1c2luZyBbYFNhbWVWYWx1ZVplcm9gXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1zYW1ldmFsdWV6ZXJvKVxuICogZm9yIGVxdWFsaXR5IGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gbW9kaWZ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBwcm9wZXJ0eSB0byBhc3NpZ24uXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBhc3NpZ24uXG4gKi9cbmZ1bmN0aW9uIGFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSkge1xuICB2YXIgb2JqVmFsdWUgPSBvYmplY3Rba2V5XTtcbiAgaWYgKCEoaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIGtleSkgJiYgZXEob2JqVmFsdWUsIHZhbHVlKSkgfHxcbiAgICAgICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpKSB7XG4gICAgYmFzZUFzc2lnblZhbHVlKG9iamVjdCwga2V5LCB2YWx1ZSk7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgYXNzaWduVmFsdWU7XG4iLCJpbXBvcnQgYXNzaWduVmFsdWUgZnJvbSAnLi9fYXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuXG4vKipcbiAqIENvcGllcyBwcm9wZXJ0aWVzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBwcm9wZXJ0aWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBwcm9wcyBUaGUgcHJvcGVydHkgaWRlbnRpZmllcnMgdG8gY29weS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0PXt9XSBUaGUgb2JqZWN0IHRvIGNvcHkgcHJvcGVydGllcyB0by5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvcGllZCB2YWx1ZXMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5T2JqZWN0KHNvdXJjZSwgcHJvcHMsIG9iamVjdCwgY3VzdG9taXplcikge1xuICB2YXIgaXNOZXcgPSAhb2JqZWN0O1xuICBvYmplY3QgfHwgKG9iamVjdCA9IHt9KTtcblxuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciBrZXkgPSBwcm9wc1tpbmRleF07XG5cbiAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICA/IGN1c3RvbWl6ZXIob2JqZWN0W2tleV0sIHNvdXJjZVtrZXldLCBrZXksIG9iamVjdCwgc291cmNlKVxuICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgbmV3VmFsdWUgPSBzb3VyY2Vba2V5XTtcbiAgICB9XG4gICAgaWYgKGlzTmV3KSB7XG4gICAgICBiYXNlQXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXNzaWduVmFsdWUob2JqZWN0LCBrZXksIG5ld1ZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG9iamVjdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weU9iamVjdDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8udGltZXNgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kc1xuICogb3IgbWF4IGFycmF5IGxlbmd0aCBjaGVja3MuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7bnVtYmVyfSBuIFRoZSBudW1iZXIgb2YgdGltZXMgdG8gaW52b2tlIGBpdGVyYXRlZWAuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBhcnJheSBvZiByZXN1bHRzLlxuICovXG5mdW5jdGlvbiBiYXNlVGltZXMobiwgaXRlcmF0ZWUpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShuKTtcblxuICB3aGlsZSAoKytpbmRleCA8IG4pIHtcbiAgICByZXN1bHRbaW5kZXhdID0gaXRlcmF0ZWUoaW5kZXgpO1xuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VUaW1lcztcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzT2JqZWN0TGlrZSBmcm9tICcuL2lzT2JqZWN0TGlrZS5qcyc7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNBcmd1bWVudHNgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGFuIGBhcmd1bWVudHNgIG9iamVjdCxcbiAqL1xuZnVuY3Rpb24gYmFzZUlzQXJndW1lbnRzKHZhbHVlKSB7XG4gIHJldHVybiBpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IGFyZ3NUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0FyZ3VtZW50cztcbiIsImltcG9ydCBiYXNlSXNBcmd1bWVudHMgZnJvbSAnLi9fYmFzZUlzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBwcm9wZXJ0eUlzRW51bWVyYWJsZSA9IG9iamVjdFByb3RvLnByb3BlcnR5SXNFbnVtZXJhYmxlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhbiBgYXJndW1lbnRzYCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYGFyZ3VtZW50c2Agb2JqZWN0LFxuICogIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FyZ3VtZW50cyhmdW5jdGlvbigpIHsgcmV0dXJuIGFyZ3VtZW50czsgfSgpKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJndW1lbnRzKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNBcmd1bWVudHMgPSBiYXNlSXNBcmd1bWVudHMoZnVuY3Rpb24oKSB7IHJldHVybiBhcmd1bWVudHM7IH0oKSkgPyBiYXNlSXNBcmd1bWVudHMgOiBmdW5jdGlvbih2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlLCAnY2FsbGVlJykgJiZcbiAgICAhcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbCh2YWx1ZSwgJ2NhbGxlZScpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcmd1bWVudHM7XG4iLCIvKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYW4gYEFycmF5YCBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYW4gYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0FycmF5KFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc0FycmF5KGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzQXJyYXkoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbnZhciBpc0FycmF5ID0gQXJyYXkuaXNBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgaXNBcnJheTtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgdW5zaWduZWQgaW50ZWdlciB2YWx1ZXMuICovXG52YXIgcmVJc1VpbnQgPSAvXig/OjB8WzEtOV1cXGQqKSQvO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBpbmRleC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcGFyYW0ge251bWJlcn0gW2xlbmd0aD1NQVhfU0FGRV9JTlRFR0VSXSBUaGUgdXBwZXIgYm91bmRzIG9mIGEgdmFsaWQgaW5kZXguXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHZhbGlkIGluZGV4LCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGlzSW5kZXgodmFsdWUsIGxlbmd0aCkge1xuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgbGVuZ3RoID0gbGVuZ3RoID09IG51bGwgPyBNQVhfU0FGRV9JTlRFR0VSIDogbGVuZ3RoO1xuXG4gIHJldHVybiAhIWxlbmd0aCAmJlxuICAgICh0eXBlID09ICdudW1iZXInIHx8XG4gICAgICAodHlwZSAhPSAnc3ltYm9sJyAmJiByZUlzVWludC50ZXN0KHZhbHVlKSkpICYmXG4gICAgICAgICh2YWx1ZSA+IC0xICYmIHZhbHVlICUgMSA9PSAwICYmIHZhbHVlIDwgbGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNJbmRleDtcbiIsIi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE1BWF9TQUZFX0lOVEVHRVIgPSA5MDA3MTk5MjU0NzQwOTkxO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGEgdmFsaWQgYXJyYXktbGlrZSBsZW5ndGguXG4gKlxuICogKipOb3RlOioqIFRoaXMgbWV0aG9kIGlzIGxvb3NlbHkgYmFzZWQgb25cbiAqIFtgVG9MZW5ndGhgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy10b2xlbmd0aCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSB2YWxpZCBsZW5ndGgsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc0xlbmd0aCgzKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzTGVuZ3RoKE51bWJlci5NSU5fVkFMVUUpO1xuICogLy8gPT4gZmFsc2VcbiAqXG4gKiBfLmlzTGVuZ3RoKEluZmluaXR5KTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc0xlbmd0aCgnMycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNMZW5ndGgodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJyAmJlxuICAgIHZhbHVlID4gLTEgJiYgdmFsdWUgJSAxID09IDAgJiYgdmFsdWUgPD0gTUFYX1NBRkVfSU5URUdFUjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNMZW5ndGg7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc0xlbmd0aCBmcm9tICcuL2lzTGVuZ3RoLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgYXJnc1RhZyA9ICdbb2JqZWN0IEFyZ3VtZW50c10nLFxuICAgIGFycmF5VGFnID0gJ1tvYmplY3QgQXJyYXldJyxcbiAgICBib29sVGFnID0gJ1tvYmplY3QgQm9vbGVhbl0nLFxuICAgIGRhdGVUYWcgPSAnW29iamVjdCBEYXRlXScsXG4gICAgZXJyb3JUYWcgPSAnW29iamVjdCBFcnJvcl0nLFxuICAgIGZ1bmNUYWcgPSAnW29iamVjdCBGdW5jdGlvbl0nLFxuICAgIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG51bWJlclRhZyA9ICdbb2JqZWN0IE51bWJlcl0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHJlZ2V4cFRhZyA9ICdbb2JqZWN0IFJlZ0V4cF0nLFxuICAgIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nLFxuICAgIHN0cmluZ1RhZyA9ICdbb2JqZWN0IFN0cmluZ10nLFxuICAgIHdlYWtNYXBUYWcgPSAnW29iamVjdCBXZWFrTWFwXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nLFxuICAgIGZsb2F0MzJUYWcgPSAnW29iamVjdCBGbG9hdDMyQXJyYXldJyxcbiAgICBmbG9hdDY0VGFnID0gJ1tvYmplY3QgRmxvYXQ2NEFycmF5XScsXG4gICAgaW50OFRhZyA9ICdbb2JqZWN0IEludDhBcnJheV0nLFxuICAgIGludDE2VGFnID0gJ1tvYmplY3QgSW50MTZBcnJheV0nLFxuICAgIGludDMyVGFnID0gJ1tvYmplY3QgSW50MzJBcnJheV0nLFxuICAgIHVpbnQ4VGFnID0gJ1tvYmplY3QgVWludDhBcnJheV0nLFxuICAgIHVpbnQ4Q2xhbXBlZFRhZyA9ICdbb2JqZWN0IFVpbnQ4Q2xhbXBlZEFycmF5XScsXG4gICAgdWludDE2VGFnID0gJ1tvYmplY3QgVWludDE2QXJyYXldJyxcbiAgICB1aW50MzJUYWcgPSAnW29iamVjdCBVaW50MzJBcnJheV0nO1xuXG4vKiogVXNlZCB0byBpZGVudGlmeSBgdG9TdHJpbmdUYWdgIHZhbHVlcyBvZiB0eXBlZCBhcnJheXMuICovXG52YXIgdHlwZWRBcnJheVRhZ3MgPSB7fTtcbnR5cGVkQXJyYXlUYWdzW2Zsb2F0MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbZmxvYXQ2NFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50OFRhZ10gPSB0eXBlZEFycmF5VGFnc1tpbnQxNlRhZ10gPVxudHlwZWRBcnJheVRhZ3NbaW50MzJUYWddID0gdHlwZWRBcnJheVRhZ3NbdWludDhUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPSB0eXBlZEFycmF5VGFnc1t1aW50MTZUYWddID1cbnR5cGVkQXJyYXlUYWdzW3VpbnQzMlRhZ10gPSB0cnVlO1xudHlwZWRBcnJheVRhZ3NbYXJnc1RhZ10gPSB0eXBlZEFycmF5VGFnc1thcnJheVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbYXJyYXlCdWZmZXJUYWddID0gdHlwZWRBcnJheVRhZ3NbYm9vbFRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZGF0YVZpZXdUYWddID0gdHlwZWRBcnJheVRhZ3NbZGF0ZVRhZ10gPVxudHlwZWRBcnJheVRhZ3NbZXJyb3JUYWddID0gdHlwZWRBcnJheVRhZ3NbZnVuY1RhZ10gPVxudHlwZWRBcnJheVRhZ3NbbWFwVGFnXSA9IHR5cGVkQXJyYXlUYWdzW251bWJlclRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbb2JqZWN0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3JlZ2V4cFRhZ10gPVxudHlwZWRBcnJheVRhZ3Nbc2V0VGFnXSA9IHR5cGVkQXJyYXlUYWdzW3N0cmluZ1RhZ10gPVxudHlwZWRBcnJheVRhZ3Nbd2Vha01hcFRhZ10gPSBmYWxzZTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc1R5cGVkQXJyYXlgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgdHlwZWQgYXJyYXksIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzVHlwZWRBcnJheSh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJlxuICAgIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgISF0eXBlZEFycmF5VGFnc1tiYXNlR2V0VGFnKHZhbHVlKV07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1R5cGVkQXJyYXk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnVuYXJ5YCB3aXRob3V0IHN1cHBvcnQgZm9yIHN0b3JpbmcgbWV0YWRhdGEuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGNhcCBhcmd1bWVudHMgZm9yLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FwcGVkIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlVW5hcnkoZnVuYykge1xuICByZXR1cm4gZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXR1cm4gZnVuYyh2YWx1ZSk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VVbmFyeTtcbiIsImltcG9ydCBiYXNlSXNUeXBlZEFycmF5IGZyb20gJy4vX2Jhc2VJc1R5cGVkQXJyYXkuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNUeXBlZEFycmF5ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNUeXBlZEFycmF5O1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSB0eXBlZCBhcnJheS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHR5cGVkIGFycmF5LCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNUeXBlZEFycmF5KG5ldyBVaW50OEFycmF5KTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzVHlwZWRBcnJheShbXSk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNUeXBlZEFycmF5ID0gbm9kZUlzVHlwZWRBcnJheSA/IGJhc2VVbmFyeShub2RlSXNUeXBlZEFycmF5KSA6IGJhc2VJc1R5cGVkQXJyYXk7XG5cbmV4cG9ydCBkZWZhdWx0IGlzVHlwZWRBcnJheTtcbiIsImltcG9ydCBiYXNlVGltZXMgZnJvbSAnLi9fYmFzZVRpbWVzLmpzJztcbmltcG9ydCBpc0FyZ3VtZW50cyBmcm9tICcuL2lzQXJndW1lbnRzLmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNCdWZmZXIgZnJvbSAnLi9pc0J1ZmZlci5qcyc7XG5pbXBvcnQgaXNJbmRleCBmcm9tICcuL19pc0luZGV4LmpzJztcbmltcG9ydCBpc1R5cGVkQXJyYXkgZnJvbSAnLi9pc1R5cGVkQXJyYXkuanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIENyZWF0ZXMgYW4gYXJyYXkgb2YgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgb2YgdGhlIGFycmF5LWxpa2UgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IGluaGVyaXRlZCBTcGVjaWZ5IHJldHVybmluZyBpbmhlcml0ZWQgcHJvcGVydHkgbmFtZXMuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBhcnJheUxpa2VLZXlzKHZhbHVlLCBpbmhlcml0ZWQpIHtcbiAgdmFyIGlzQXJyID0gaXNBcnJheSh2YWx1ZSksXG4gICAgICBpc0FyZyA9ICFpc0FyciAmJiBpc0FyZ3VtZW50cyh2YWx1ZSksXG4gICAgICBpc0J1ZmYgPSAhaXNBcnIgJiYgIWlzQXJnICYmIGlzQnVmZmVyKHZhbHVlKSxcbiAgICAgIGlzVHlwZSA9ICFpc0FyciAmJiAhaXNBcmcgJiYgIWlzQnVmZiAmJiBpc1R5cGVkQXJyYXkodmFsdWUpLFxuICAgICAgc2tpcEluZGV4ZXMgPSBpc0FyciB8fCBpc0FyZyB8fCBpc0J1ZmYgfHwgaXNUeXBlLFxuICAgICAgcmVzdWx0ID0gc2tpcEluZGV4ZXMgPyBiYXNlVGltZXModmFsdWUubGVuZ3RoLCBTdHJpbmcpIDogW10sXG4gICAgICBsZW5ndGggPSByZXN1bHQubGVuZ3RoO1xuXG4gIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgIGlmICgoaW5oZXJpdGVkIHx8IGhhc093blByb3BlcnR5LmNhbGwodmFsdWUsIGtleSkpICYmXG4gICAgICAgICEoc2tpcEluZGV4ZXMgJiYgKFxuICAgICAgICAgICAvLyBTYWZhcmkgOSBoYXMgZW51bWVyYWJsZSBgYXJndW1lbnRzLmxlbmd0aGAgaW4gc3RyaWN0IG1vZGUuXG4gICAgICAgICAgIGtleSA9PSAnbGVuZ3RoJyB8fFxuICAgICAgICAgICAvLyBOb2RlLmpzIDAuMTAgaGFzIGVudW1lcmFibGUgbm9uLWluZGV4IHByb3BlcnRpZXMgb24gYnVmZmVycy5cbiAgICAgICAgICAgKGlzQnVmZiAmJiAoa2V5ID09ICdvZmZzZXQnIHx8IGtleSA9PSAncGFyZW50JykpIHx8XG4gICAgICAgICAgIC8vIFBoYW50b21KUyAyIGhhcyBlbnVtZXJhYmxlIG5vbi1pbmRleCBwcm9wZXJ0aWVzIG9uIHR5cGVkIGFycmF5cy5cbiAgICAgICAgICAgKGlzVHlwZSAmJiAoa2V5ID09ICdidWZmZXInIHx8IGtleSA9PSAnYnl0ZUxlbmd0aCcgfHwga2V5ID09ICdieXRlT2Zmc2V0JykpIHx8XG4gICAgICAgICAgIC8vIFNraXAgaW5kZXggcHJvcGVydGllcy5cbiAgICAgICAgICAgaXNJbmRleChrZXksIGxlbmd0aClcbiAgICAgICAgKSkpIHtcbiAgICAgIHJlc3VsdC5wdXNoKGtleSk7XG4gICAgfVxuICB9XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5TGlrZUtleXM7XG4iLCIvKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGxpa2VseSBhIHByb3RvdHlwZSBvYmplY3QuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBwcm90b3R5cGUsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaXNQcm90b3R5cGUodmFsdWUpIHtcbiAgdmFyIEN0b3IgPSB2YWx1ZSAmJiB2YWx1ZS5jb25zdHJ1Y3RvcixcbiAgICAgIHByb3RvID0gKHR5cGVvZiBDdG9yID09ICdmdW5jdGlvbicgJiYgQ3Rvci5wcm90b3R5cGUpIHx8IG9iamVjdFByb3RvO1xuXG4gIHJldHVybiB2YWx1ZSA9PT0gcHJvdG87XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzUHJvdG90eXBlO1xuIiwiaW1wb3J0IG92ZXJBcmcgZnJvbSAnLi9fb3ZlckFyZy5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVLZXlzID0gb3ZlckFyZyhPYmplY3Qua2V5cywgT2JqZWN0KTtcblxuZXhwb3J0IGRlZmF1bHQgbmF0aXZlS2V5cztcbiIsImltcG9ydCBpc1Byb3RvdHlwZSBmcm9tICcuL19pc1Byb3RvdHlwZS5qcyc7XG5pbXBvcnQgbmF0aXZlS2V5cyBmcm9tICcuL19uYXRpdmVLZXlzLmpzJztcblxuLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5rZXlzYCB3aGljaCBkb2Vzbid0IHRyZWF0IHNwYXJzZSBhcnJheXMgYXMgZGVuc2UuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VLZXlzKG9iamVjdCkge1xuICBpZiAoIWlzUHJvdG90eXBlKG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5cyhvYmplY3QpO1xuICB9XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgaWYgKGhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBrZXkpICYmIGtleSAhPSAnY29uc3RydWN0b3InKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5cztcbiIsImltcG9ydCBpc0Z1bmN0aW9uIGZyb20gJy4vaXNGdW5jdGlvbi5qcyc7XG5pbXBvcnQgaXNMZW5ndGggZnJvbSAnLi9pc0xlbmd0aC5qcyc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgYXJyYXktbGlrZS4gQSB2YWx1ZSBpcyBjb25zaWRlcmVkIGFycmF5LWxpa2UgaWYgaXQnc1xuICogbm90IGEgZnVuY3Rpb24gYW5kIGhhcyBhIGB2YWx1ZS5sZW5ndGhgIHRoYXQncyBhbiBpbnRlZ2VyIGdyZWF0ZXIgdGhhbiBvclxuICogZXF1YWwgdG8gYDBgIGFuZCBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gYE51bWJlci5NQVhfU0FGRV9JTlRFR0VSYC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhcnJheS1saWtlLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoWzEsIDIsIDNdKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzQXJyYXlMaWtlKGRvY3VtZW50LmJvZHkuY2hpbGRyZW4pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoJ2FiYycpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNBcnJheUxpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIGlzTGVuZ3RoKHZhbHVlLmxlbmd0aCkgJiYgIWlzRnVuY3Rpb24odmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc0FycmF5TGlrZTtcbiIsImltcG9ydCBhcnJheUxpa2VLZXlzIGZyb20gJy4vX2FycmF5TGlrZUtleXMuanMnO1xuaW1wb3J0IGJhc2VLZXlzIGZyb20gJy4vX2Jhc2VLZXlzLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBwcm9wZXJ0eSBuYW1lcyBvZiBgb2JqZWN0YC5cbiAqXG4gKiAqKk5vdGU6KiogTm9uLW9iamVjdCB2YWx1ZXMgYXJlIGNvZXJjZWQgdG8gb2JqZWN0cy4gU2VlIHRoZVxuICogW0VTIHNwZWNdKGh0dHA6Ly9lY21hLWludGVybmF0aW9uYWwub3JnL2VjbWEtMjYyLzcuMC8jc2VjLW9iamVjdC5rZXlzKVxuICogZm9yIG1vcmUgZGV0YWlscy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLmtleXMobmV3IEZvbyk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKlxuICogXy5rZXlzKCdoaScpO1xuICogLy8gPT4gWycwJywgJzEnXVxuICovXG5mdW5jdGlvbiBrZXlzKG9iamVjdCkge1xuICByZXR1cm4gaXNBcnJheUxpa2Uob2JqZWN0KSA/IGFycmF5TGlrZUtleXMob2JqZWN0KSA6IGJhc2VLZXlzKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXM7XG4iLCJpbXBvcnQgY29weU9iamVjdCBmcm9tICcuL19jb3B5T2JqZWN0LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduYCB3aXRob3V0IHN1cHBvcnQgZm9yIG11bHRpcGxlIHNvdXJjZXNcbiAqIG9yIGBjdXN0b21pemVyYCBmdW5jdGlvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIGRlc3RpbmF0aW9uIG9iamVjdC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIHNvdXJjZSBvYmplY3QuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlQXNzaWduKG9iamVjdCwgc291cmNlKSB7XG4gIHJldHVybiBvYmplY3QgJiYgY29weU9iamVjdChzb3VyY2UsIGtleXMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnbjtcbiIsIi8qKlxuICogVGhpcyBmdW5jdGlvbiBpcyBsaWtlXG4gKiBbYE9iamVjdC5rZXlzYF0oaHR0cDovL2VjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtb2JqZWN0LmtleXMpXG4gKiBleGNlcHQgdGhhdCBpdCBpbmNsdWRlcyBpbmhlcml0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBuYXRpdmVLZXlzSW4ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgaWYgKG9iamVjdCAhPSBudWxsKSB7XG4gICAgZm9yICh2YXIga2V5IGluIE9iamVjdChvYmplY3QpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBuYXRpdmVLZXlzSW47XG4iLCJpbXBvcnQgaXNPYmplY3QgZnJvbSAnLi9pc09iamVjdC5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuaW1wb3J0IG5hdGl2ZUtleXNJbiBmcm9tICcuL19uYXRpdmVLZXlzSW4uanMnO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmtleXNJbmAgd2hpY2ggZG9lc24ndCB0cmVhdCBzcGFyc2UgYXJyYXlzIGFzIGRlbnNlLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzLlxuICovXG5mdW5jdGlvbiBiYXNlS2V5c0luKG9iamVjdCkge1xuICBpZiAoIWlzT2JqZWN0KG9iamVjdCkpIHtcbiAgICByZXR1cm4gbmF0aXZlS2V5c0luKG9iamVjdCk7XG4gIH1cbiAgdmFyIGlzUHJvdG8gPSBpc1Byb3RvdHlwZShvYmplY3QpLFxuICAgICAgcmVzdWx0ID0gW107XG5cbiAgZm9yICh2YXIga2V5IGluIG9iamVjdCkge1xuICAgIGlmICghKGtleSA9PSAnY29uc3RydWN0b3InICYmIChpc1Byb3RvIHx8ICFoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KSkpKSB7XG4gICAgICByZXN1bHQucHVzaChrZXkpO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlS2V5c0luO1xuIiwiaW1wb3J0IGFycmF5TGlrZUtleXMgZnJvbSAnLi9fYXJyYXlMaWtlS2V5cy5qcyc7XG5pbXBvcnQgYmFzZUtleXNJbiBmcm9tICcuL19iYXNlS2V5c0luLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMuXG4gKiBAZXhhbXBsZVxuICpcbiAqIGZ1bmN0aW9uIEZvbygpIHtcbiAqICAgdGhpcy5hID0gMTtcbiAqICAgdGhpcy5iID0gMjtcbiAqIH1cbiAqXG4gKiBGb28ucHJvdG90eXBlLmMgPSAzO1xuICpcbiAqIF8ua2V5c0luKG5ldyBGb28pO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddIChpdGVyYXRpb24gb3JkZXIgaXMgbm90IGd1YXJhbnRlZWQpXG4gKi9cbmZ1bmN0aW9uIGtleXNJbihvYmplY3QpIHtcbiAgcmV0dXJuIGlzQXJyYXlMaWtlKG9iamVjdCkgPyBhcnJheUxpa2VLZXlzKG9iamVjdCwgdHJ1ZSkgOiBiYXNlS2V5c0luKG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGtleXNJbjtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGtleXNJbiBmcm9tICcuL2tleXNJbi5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uYXNzaWduSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgbXVsdGlwbGUgc291cmNlc1xuICogb3IgYGN1c3RvbWl6ZXJgIGZ1bmN0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgZGVzdGluYXRpb24gb2JqZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgc291cmNlIG9iamVjdC5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VBc3NpZ25JbihvYmplY3QsIHNvdXJjZSkge1xuICByZXR1cm4gb2JqZWN0ICYmIGNvcHlPYmplY3Qoc291cmNlLCBrZXlzSW4oc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUFzc2lnbkluO1xuIiwiLyoqXG4gKiBDb3BpZXMgdGhlIHZhbHVlcyBvZiBgc291cmNlYCB0byBgYXJyYXlgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBzb3VyY2UgVGhlIGFycmF5IHRvIGNvcHkgdmFsdWVzIGZyb20uXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXk9W11dIFRoZSBhcnJheSB0byBjb3B5IHZhbHVlcyB0by5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyBgYXJyYXlgLlxuICovXG5mdW5jdGlvbiBjb3B5QXJyYXkoc291cmNlLCBhcnJheSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IHNvdXJjZS5sZW5ndGg7XG5cbiAgYXJyYXkgfHwgKGFycmF5ID0gQXJyYXkobGVuZ3RoKSk7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbaW5kZXhdID0gc291cmNlW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlBcnJheTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLmZpbHRlcmAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBwcmVkaWNhdGUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgbmV3IGZpbHRlcmVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhcnJheUZpbHRlcihhcnJheSwgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGgsXG4gICAgICByZXNJbmRleCA9IDAsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHZhciB2YWx1ZSA9IGFycmF5W2luZGV4XTtcbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBpbmRleCwgYXJyYXkpKSB7XG4gICAgICByZXN1bHRbcmVzSW5kZXgrK10gPSB2YWx1ZTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlGaWx0ZXI7XG4iLCIvKipcbiAqIFRoaXMgbWV0aG9kIHJldHVybnMgYSBuZXcgZW1wdHkgYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjEzLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBlbXB0eSBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIGFycmF5cyA9IF8udGltZXMoMiwgXy5zdHViQXJyYXkpO1xuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5cyk7XG4gKiAvLyA9PiBbW10sIFtdXVxuICpcbiAqIGNvbnNvbGUubG9nKGFycmF5c1swXSA9PT0gYXJyYXlzWzFdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIHN0dWJBcnJheSgpIHtcbiAgcmV0dXJuIFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzdHViQXJyYXk7XG4iLCJpbXBvcnQgYXJyYXlGaWx0ZXIgZnJvbSAnLi9fYXJyYXlGaWx0ZXIuanMnO1xuaW1wb3J0IHN0dWJBcnJheSBmcm9tICcuL3N0dWJBcnJheS5qcyc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHByb3BlcnR5SXNFbnVtZXJhYmxlID0gb2JqZWN0UHJvdG8ucHJvcGVydHlJc0VudW1lcmFibGU7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHN5bWJvbHMuXG4gKi9cbnZhciBnZXRTeW1ib2xzID0gIW5hdGl2ZUdldFN5bWJvbHMgPyBzdHViQXJyYXkgOiBmdW5jdGlvbihvYmplY3QpIHtcbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuIFtdO1xuICB9XG4gIG9iamVjdCA9IE9iamVjdChvYmplY3QpO1xuICByZXR1cm4gYXJyYXlGaWx0ZXIobmF0aXZlR2V0U3ltYm9scyhvYmplY3QpLCBmdW5jdGlvbihzeW1ib2wpIHtcbiAgICByZXR1cm4gcHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChvYmplY3QsIHN5bWJvbCk7XG4gIH0pO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZ2V0U3ltYm9scztcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHMgZnJvbSAnLi9fZ2V0U3ltYm9scy5qcyc7XG5cbi8qKlxuICogQ29waWVzIG93biBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9scyhzb3VyY2UsIG9iamVjdCkge1xuICByZXR1cm4gY29weU9iamVjdChzb3VyY2UsIGdldFN5bWJvbHMoc291cmNlKSwgb2JqZWN0KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY29weVN5bWJvbHM7XG4iLCIvKipcbiAqIEFwcGVuZHMgdGhlIGVsZW1lbnRzIG9mIGB2YWx1ZXNgIHRvIGBhcnJheWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IFRoZSBhcnJheSB0byBtb2RpZnkuXG4gKiBAcGFyYW0ge0FycmF5fSB2YWx1ZXMgVGhlIHZhbHVlcyB0byBhcHBlbmQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgYGFycmF5YC5cbiAqL1xuZnVuY3Rpb24gYXJyYXlQdXNoKGFycmF5LCB2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMubGVuZ3RoLFxuICAgICAgb2Zmc2V0ID0gYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYXJyYXlbb2Zmc2V0ICsgaW5kZXhdID0gdmFsdWVzW2luZGV4XTtcbiAgfVxuICByZXR1cm4gYXJyYXk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5UHVzaDtcbiIsImltcG9ydCBhcnJheVB1c2ggZnJvbSAnLi9fYXJyYXlQdXNoLmpzJztcbmltcG9ydCBnZXRQcm90b3R5cGUgZnJvbSAnLi9fZ2V0UHJvdG90eXBlLmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuaW1wb3J0IHN0dWJBcnJheSBmcm9tICcuL3N0dWJBcnJheS5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIGZvciB0aG9zZSB3aXRoIHRoZSBzYW1lIG5hbWUgYXMgb3RoZXIgYGxvZGFzaGAgbWV0aG9kcy4gKi9cbnZhciBuYXRpdmVHZXRTeW1ib2xzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gYW5kIGluaGVyaXRlZCBlbnVtZXJhYmxlIHN5bWJvbHMgb2YgYG9iamVjdGAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2Ygc3ltYm9scy5cbiAqL1xudmFyIGdldFN5bWJvbHNJbiA9ICFuYXRpdmVHZXRTeW1ib2xzID8gc3R1YkFycmF5IDogZnVuY3Rpb24ob2JqZWN0KSB7XG4gIHZhciByZXN1bHQgPSBbXTtcbiAgd2hpbGUgKG9iamVjdCkge1xuICAgIGFycmF5UHVzaChyZXN1bHQsIGdldFN5bWJvbHMob2JqZWN0KSk7XG4gICAgb2JqZWN0ID0gZ2V0UHJvdG90eXBlKG9iamVjdCk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGdldFN5bWJvbHNJbjtcbiIsImltcG9ydCBjb3B5T2JqZWN0IGZyb20gJy4vX2NvcHlPYmplY3QuanMnO1xuaW1wb3J0IGdldFN5bWJvbHNJbiBmcm9tICcuL19nZXRTeW1ib2xzSW4uanMnO1xuXG4vKipcbiAqIENvcGllcyBvd24gYW5kIGluaGVyaXRlZCBzeW1ib2xzIG9mIGBzb3VyY2VgIHRvIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBvYmplY3QgdG8gY29weSBzeW1ib2xzIGZyb20uXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdD17fV0gVGhlIG9iamVjdCB0byBjb3B5IHN5bWJvbHMgdG8uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBjb3B5U3ltYm9sc0luKHNvdXJjZSwgb2JqZWN0KSB7XG4gIHJldHVybiBjb3B5T2JqZWN0KHNvdXJjZSwgZ2V0U3ltYm9sc0luKHNvdXJjZSksIG9iamVjdCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvcHlTeW1ib2xzSW47XG4iLCJpbXBvcnQgYXJyYXlQdXNoIGZyb20gJy4vX2FycmF5UHVzaC5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBnZXRBbGxLZXlzYCBhbmQgYGdldEFsbEtleXNJbmAgd2hpY2ggdXNlc1xuICogYGtleXNGdW5jYCBhbmQgYHN5bWJvbHNGdW5jYCB0byBnZXQgdGhlIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBrZXlzRnVuYyBUaGUgZnVuY3Rpb24gdG8gZ2V0IHRoZSBrZXlzIG9mIGBvYmplY3RgLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc3ltYm9sc0Z1bmMgVGhlIGZ1bmN0aW9uIHRvIGdldCB0aGUgc3ltYm9scyBvZiBgb2JqZWN0YC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgbmFtZXMgYW5kIHN5bWJvbHMuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXRBbGxLZXlzKG9iamVjdCwga2V5c0Z1bmMsIHN5bWJvbHNGdW5jKSB7XG4gIHZhciByZXN1bHQgPSBrZXlzRnVuYyhvYmplY3QpO1xuICByZXR1cm4gaXNBcnJheShvYmplY3QpID8gcmVzdWx0IDogYXJyYXlQdXNoKHJlc3VsdCwgc3ltYm9sc0Z1bmMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VHZXRBbGxLZXlzO1xuIiwiaW1wb3J0IGJhc2VHZXRBbGxLZXlzIGZyb20gJy4vX2Jhc2VHZXRBbGxLZXlzLmpzJztcbmltcG9ydCBnZXRTeW1ib2xzIGZyb20gJy4vX2dldFN5bWJvbHMuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBlbnVtZXJhYmxlIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzKG9iamVjdCkge1xuICByZXR1cm4gYmFzZUdldEFsbEtleXMob2JqZWN0LCBrZXlzLCBnZXRTeW1ib2xzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsS2V5cztcbiIsImltcG9ydCBiYXNlR2V0QWxsS2V5cyBmcm9tICcuL19iYXNlR2V0QWxsS2V5cy5qcyc7XG5pbXBvcnQgZ2V0U3ltYm9sc0luIGZyb20gJy4vX2dldFN5bWJvbHNJbi5qcyc7XG5pbXBvcnQga2V5c0luIGZyb20gJy4va2V5c0luLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIG93biBhbmQgaW5oZXJpdGVkIGVudW1lcmFibGUgcHJvcGVydHkgbmFtZXMgYW5kXG4gKiBzeW1ib2xzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IG5hbWVzIGFuZCBzeW1ib2xzLlxuICovXG5mdW5jdGlvbiBnZXRBbGxLZXlzSW4ob2JqZWN0KSB7XG4gIHJldHVybiBiYXNlR2V0QWxsS2V5cyhvYmplY3QsIGtleXNJbiwgZ2V0U3ltYm9sc0luKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0QWxsS2V5c0luO1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBEYXRhVmlldyA9IGdldE5hdGl2ZShyb290LCAnRGF0YVZpZXcnKTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0YVZpZXc7XG4iLCJpbXBvcnQgZ2V0TmF0aXZlIGZyb20gJy4vX2dldE5hdGl2ZS5qcyc7XG5pbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgdGhhdCBhcmUgdmVyaWZpZWQgdG8gYmUgbmF0aXZlLiAqL1xudmFyIFByb21pc2UgPSBnZXROYXRpdmUocm9vdCwgJ1Byb21pc2UnKTtcblxuZXhwb3J0IGRlZmF1bHQgUHJvbWlzZTtcbiIsImltcG9ydCBnZXROYXRpdmUgZnJvbSAnLi9fZ2V0TmF0aXZlLmpzJztcbmltcG9ydCByb290IGZyb20gJy4vX3Jvb3QuanMnO1xuXG4vKiBCdWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcyB0aGF0IGFyZSB2ZXJpZmllZCB0byBiZSBuYXRpdmUuICovXG52YXIgU2V0ID0gZ2V0TmF0aXZlKHJvb3QsICdTZXQnKTtcblxuZXhwb3J0IGRlZmF1bHQgU2V0O1xuIiwiaW1wb3J0IGdldE5hdGl2ZSBmcm9tICcuL19nZXROYXRpdmUuanMnO1xuaW1wb3J0IHJvb3QgZnJvbSAnLi9fcm9vdC5qcyc7XG5cbi8qIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHRoYXQgYXJlIHZlcmlmaWVkIHRvIGJlIG5hdGl2ZS4gKi9cbnZhciBXZWFrTWFwID0gZ2V0TmF0aXZlKHJvb3QsICdXZWFrTWFwJyk7XG5cbmV4cG9ydCBkZWZhdWx0IFdlYWtNYXA7XG4iLCJpbXBvcnQgRGF0YVZpZXcgZnJvbSAnLi9fRGF0YVZpZXcuanMnO1xuaW1wb3J0IE1hcCBmcm9tICcuL19NYXAuanMnO1xuaW1wb3J0IFByb21pc2UgZnJvbSAnLi9fUHJvbWlzZS5qcyc7XG5pbXBvcnQgU2V0IGZyb20gJy4vX1NldC5qcyc7XG5pbXBvcnQgV2Vha01hcCBmcm9tICcuL19XZWFrTWFwLmpzJztcbmltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IHRvU291cmNlIGZyb20gJy4vX3RvU291cmNlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIG1hcFRhZyA9ICdbb2JqZWN0IE1hcF0nLFxuICAgIG9iamVjdFRhZyA9ICdbb2JqZWN0IE9iamVjdF0nLFxuICAgIHByb21pc2VUYWcgPSAnW29iamVjdCBQcm9taXNlXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgd2Vha01hcFRhZyA9ICdbb2JqZWN0IFdlYWtNYXBdJztcblxudmFyIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG1hcHMsIHNldHMsIGFuZCB3ZWFrbWFwcy4gKi9cbnZhciBkYXRhVmlld0N0b3JTdHJpbmcgPSB0b1NvdXJjZShEYXRhVmlldyksXG4gICAgbWFwQ3RvclN0cmluZyA9IHRvU291cmNlKE1hcCksXG4gICAgcHJvbWlzZUN0b3JTdHJpbmcgPSB0b1NvdXJjZShQcm9taXNlKSxcbiAgICBzZXRDdG9yU3RyaW5nID0gdG9Tb3VyY2UoU2V0KSxcbiAgICB3ZWFrTWFwQ3RvclN0cmluZyA9IHRvU291cmNlKFdlYWtNYXApO1xuXG4vKipcbiAqIEdldHMgdGhlIGB0b1N0cmluZ1RhZ2Agb2YgYHZhbHVlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBgdG9TdHJpbmdUYWdgLlxuICovXG52YXIgZ2V0VGFnID0gYmFzZUdldFRhZztcblxuLy8gRmFsbGJhY2sgZm9yIGRhdGEgdmlld3MsIG1hcHMsIHNldHMsIGFuZCB3ZWFrIG1hcHMgaW4gSUUgMTEgYW5kIHByb21pc2VzIGluIE5vZGUuanMgPCA2LlxuaWYgKChEYXRhVmlldyAmJiBnZXRUYWcobmV3IERhdGFWaWV3KG5ldyBBcnJheUJ1ZmZlcigxKSkpICE9IGRhdGFWaWV3VGFnKSB8fFxuICAgIChNYXAgJiYgZ2V0VGFnKG5ldyBNYXApICE9IG1hcFRhZykgfHxcbiAgICAoUHJvbWlzZSAmJiBnZXRUYWcoUHJvbWlzZS5yZXNvbHZlKCkpICE9IHByb21pc2VUYWcpIHx8XG4gICAgKFNldCAmJiBnZXRUYWcobmV3IFNldCkgIT0gc2V0VGFnKSB8fFxuICAgIChXZWFrTWFwICYmIGdldFRhZyhuZXcgV2Vha01hcCkgIT0gd2Vha01hcFRhZykpIHtcbiAgZ2V0VGFnID0gZnVuY3Rpb24odmFsdWUpIHtcbiAgICB2YXIgcmVzdWx0ID0gYmFzZUdldFRhZyh2YWx1ZSksXG4gICAgICAgIEN0b3IgPSByZXN1bHQgPT0gb2JqZWN0VGFnID8gdmFsdWUuY29uc3RydWN0b3IgOiB1bmRlZmluZWQsXG4gICAgICAgIGN0b3JTdHJpbmcgPSBDdG9yID8gdG9Tb3VyY2UoQ3RvcikgOiAnJztcblxuICAgIGlmIChjdG9yU3RyaW5nKSB7XG4gICAgICBzd2l0Y2ggKGN0b3JTdHJpbmcpIHtcbiAgICAgICAgY2FzZSBkYXRhVmlld0N0b3JTdHJpbmc6IHJldHVybiBkYXRhVmlld1RhZztcbiAgICAgICAgY2FzZSBtYXBDdG9yU3RyaW5nOiByZXR1cm4gbWFwVGFnO1xuICAgICAgICBjYXNlIHByb21pc2VDdG9yU3RyaW5nOiByZXR1cm4gcHJvbWlzZVRhZztcbiAgICAgICAgY2FzZSBzZXRDdG9yU3RyaW5nOiByZXR1cm4gc2V0VGFnO1xuICAgICAgICBjYXNlIHdlYWtNYXBDdG9yU3RyaW5nOiByZXR1cm4gd2Vha01hcFRhZztcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0VGFnO1xuIiwiLyoqIFVzZWQgZm9yIGJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzLiAqL1xudmFyIG9iamVjdFByb3RvID0gT2JqZWN0LnByb3RvdHlwZTtcblxuLyoqIFVzZWQgdG8gY2hlY2sgb2JqZWN0cyBmb3Igb3duIHByb3BlcnRpZXMuICovXG52YXIgaGFzT3duUHJvcGVydHkgPSBvYmplY3RQcm90by5oYXNPd25Qcm9wZXJ0eTtcblxuLyoqXG4gKiBJbml0aWFsaXplcyBhbiBhcnJheSBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBpbml0aWFsaXplZCBjbG9uZS5cbiAqL1xuZnVuY3Rpb24gaW5pdENsb25lQXJyYXkoYXJyYXkpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IG5ldyBhcnJheS5jb25zdHJ1Y3RvcihsZW5ndGgpO1xuXG4gIC8vIEFkZCBwcm9wZXJ0aWVzIGFzc2lnbmVkIGJ5IGBSZWdFeHAjZXhlY2AuXG4gIGlmIChsZW5ndGggJiYgdHlwZW9mIGFycmF5WzBdID09ICdzdHJpbmcnICYmIGhhc093blByb3BlcnR5LmNhbGwoYXJyYXksICdpbmRleCcpKSB7XG4gICAgcmVzdWx0LmluZGV4ID0gYXJyYXkuaW5kZXg7XG4gICAgcmVzdWx0LmlucHV0ID0gYXJyYXkuaW5wdXQ7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaW5pdENsb25lQXJyYXk7XG4iLCJpbXBvcnQgcm9vdCBmcm9tICcuL19yb290LmpzJztcblxuLyoqIEJ1aWx0LWluIHZhbHVlIHJlZmVyZW5jZXMuICovXG52YXIgVWludDhBcnJheSA9IHJvb3QuVWludDhBcnJheTtcblxuZXhwb3J0IGRlZmF1bHQgVWludDhBcnJheTtcbiIsImltcG9ydCBVaW50OEFycmF5IGZyb20gJy4vX1VpbnQ4QXJyYXkuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgYXJyYXlCdWZmZXJgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5QnVmZmVyfSBhcnJheUJ1ZmZlciBUaGUgYXJyYXkgYnVmZmVyIHRvIGNsb25lLlxuICogQHJldHVybnMge0FycmF5QnVmZmVyfSBSZXR1cm5zIHRoZSBjbG9uZWQgYXJyYXkgYnVmZmVyLlxuICovXG5mdW5jdGlvbiBjbG9uZUFycmF5QnVmZmVyKGFycmF5QnVmZmVyKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgYXJyYXlCdWZmZXIuY29uc3RydWN0b3IoYXJyYXlCdWZmZXIuYnl0ZUxlbmd0aCk7XG4gIG5ldyBVaW50OEFycmF5KHJlc3VsdCkuc2V0KG5ldyBVaW50OEFycmF5KGFycmF5QnVmZmVyKSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lQXJyYXlCdWZmZXI7XG4iLCJpbXBvcnQgY2xvbmVBcnJheUJ1ZmZlciBmcm9tICcuL19jbG9uZUFycmF5QnVmZmVyLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgYGRhdGFWaWV3YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IGRhdGFWaWV3IFRoZSBkYXRhIHZpZXcgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIGRhdGEgdmlldy5cbiAqL1xuZnVuY3Rpb24gY2xvbmVEYXRhVmlldyhkYXRhVmlldywgaXNEZWVwKSB7XG4gIHZhciBidWZmZXIgPSBpc0RlZXAgPyBjbG9uZUFycmF5QnVmZmVyKGRhdGFWaWV3LmJ1ZmZlcikgOiBkYXRhVmlldy5idWZmZXI7XG4gIHJldHVybiBuZXcgZGF0YVZpZXcuY29uc3RydWN0b3IoYnVmZmVyLCBkYXRhVmlldy5ieXRlT2Zmc2V0LCBkYXRhVmlldy5ieXRlTGVuZ3RoKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVEYXRhVmlldztcbiIsIi8qKiBVc2VkIHRvIG1hdGNoIGBSZWdFeHBgIGZsYWdzIGZyb20gdGhlaXIgY29lcmNlZCBzdHJpbmcgdmFsdWVzLiAqL1xudmFyIHJlRmxhZ3MgPSAvXFx3KiQvO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBjbG9uZSBvZiBgcmVnZXhwYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHJlZ2V4cCBUaGUgcmVnZXhwIHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgY2xvbmVkIHJlZ2V4cC5cbiAqL1xuZnVuY3Rpb24gY2xvbmVSZWdFeHAocmVnZXhwKSB7XG4gIHZhciByZXN1bHQgPSBuZXcgcmVnZXhwLmNvbnN0cnVjdG9yKHJlZ2V4cC5zb3VyY2UsIHJlRmxhZ3MuZXhlYyhyZWdleHApKTtcbiAgcmVzdWx0Lmxhc3RJbmRleCA9IHJlZ2V4cC5sYXN0SW5kZXg7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lUmVnRXhwO1xuIiwiaW1wb3J0IFN5bWJvbCBmcm9tICcuL19TeW1ib2wuanMnO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgY2xvbmUgb2YgdGhlIGBzeW1ib2xgIG9iamVjdC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHN5bWJvbCBUaGUgc3ltYm9sIG9iamVjdCB0byBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCBzeW1ib2wgb2JqZWN0LlxuICovXG5mdW5jdGlvbiBjbG9uZVN5bWJvbChzeW1ib2wpIHtcbiAgcmV0dXJuIHN5bWJvbFZhbHVlT2YgPyBPYmplY3Qoc3ltYm9sVmFsdWVPZi5jYWxsKHN5bWJvbCkpIDoge307XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lU3ltYm9sO1xuIiwiaW1wb3J0IGNsb25lQXJyYXlCdWZmZXIgZnJvbSAnLi9fY2xvbmVBcnJheUJ1ZmZlci5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGNsb25lIG9mIGB0eXBlZEFycmF5YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHR5cGVkQXJyYXkgVGhlIHR5cGVkIGFycmF5IHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBbaXNEZWVwXSBTcGVjaWZ5IGEgZGVlcCBjbG9uZS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGNsb25lZCB0eXBlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gY2xvbmVUeXBlZEFycmF5KHR5cGVkQXJyYXksIGlzRGVlcCkge1xuICB2YXIgYnVmZmVyID0gaXNEZWVwID8gY2xvbmVBcnJheUJ1ZmZlcih0eXBlZEFycmF5LmJ1ZmZlcikgOiB0eXBlZEFycmF5LmJ1ZmZlcjtcbiAgcmV0dXJuIG5ldyB0eXBlZEFycmF5LmNvbnN0cnVjdG9yKGJ1ZmZlciwgdHlwZWRBcnJheS5ieXRlT2Zmc2V0LCB0eXBlZEFycmF5Lmxlbmd0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lVHlwZWRBcnJheTtcbiIsImltcG9ydCBjbG9uZUFycmF5QnVmZmVyIGZyb20gJy4vX2Nsb25lQXJyYXlCdWZmZXIuanMnO1xuaW1wb3J0IGNsb25lRGF0YVZpZXcgZnJvbSAnLi9fY2xvbmVEYXRhVmlldy5qcyc7XG5pbXBvcnQgY2xvbmVSZWdFeHAgZnJvbSAnLi9fY2xvbmVSZWdFeHAuanMnO1xuaW1wb3J0IGNsb25lU3ltYm9sIGZyb20gJy4vX2Nsb25lU3ltYm9sLmpzJztcbmltcG9ydCBjbG9uZVR5cGVkQXJyYXkgZnJvbSAnLi9fY2xvbmVUeXBlZEFycmF5LmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJztcblxudmFyIGFycmF5QnVmZmVyVGFnID0gJ1tvYmplY3QgQXJyYXlCdWZmZXJdJyxcbiAgICBkYXRhVmlld1RhZyA9ICdbb2JqZWN0IERhdGFWaWV3XScsXG4gICAgZmxvYXQzMlRhZyA9ICdbb2JqZWN0IEZsb2F0MzJBcnJheV0nLFxuICAgIGZsb2F0NjRUYWcgPSAnW29iamVjdCBGbG9hdDY0QXJyYXldJyxcbiAgICBpbnQ4VGFnID0gJ1tvYmplY3QgSW50OEFycmF5XScsXG4gICAgaW50MTZUYWcgPSAnW29iamVjdCBJbnQxNkFycmF5XScsXG4gICAgaW50MzJUYWcgPSAnW29iamVjdCBJbnQzMkFycmF5XScsXG4gICAgdWludDhUYWcgPSAnW29iamVjdCBVaW50OEFycmF5XScsXG4gICAgdWludDhDbGFtcGVkVGFnID0gJ1tvYmplY3QgVWludDhDbGFtcGVkQXJyYXldJyxcbiAgICB1aW50MTZUYWcgPSAnW29iamVjdCBVaW50MTZBcnJheV0nLFxuICAgIHVpbnQzMlRhZyA9ICdbb2JqZWN0IFVpbnQzMkFycmF5XSc7XG5cbi8qKlxuICogSW5pdGlhbGl6ZXMgYW4gb2JqZWN0IGNsb25lIGJhc2VkIG9uIGl0cyBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY2xvbmluZyB2YWx1ZXMgd2l0aCB0YWdzIG9mXG4gKiBgQm9vbGVhbmAsIGBEYXRlYCwgYEVycm9yYCwgYE1hcGAsIGBOdW1iZXJgLCBgUmVnRXhwYCwgYFNldGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3QgdG8gY2xvbmUuXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFtpc0RlZXBdIFNwZWNpZnkgYSBkZWVwIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZUJ5VGFnKG9iamVjdCwgdGFnLCBpc0RlZXApIHtcbiAgdmFyIEN0b3IgPSBvYmplY3QuY29uc3RydWN0b3I7XG4gIHN3aXRjaCAodGFnKSB7XG4gICAgY2FzZSBhcnJheUJ1ZmZlclRhZzpcbiAgICAgIHJldHVybiBjbG9uZUFycmF5QnVmZmVyKG9iamVjdCk7XG5cbiAgICBjYXNlIGJvb2xUYWc6XG4gICAgY2FzZSBkYXRlVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKCtvYmplY3QpO1xuXG4gICAgY2FzZSBkYXRhVmlld1RhZzpcbiAgICAgIHJldHVybiBjbG9uZURhdGFWaWV3KG9iamVjdCwgaXNEZWVwKTtcblxuICAgIGNhc2UgZmxvYXQzMlRhZzogY2FzZSBmbG9hdDY0VGFnOlxuICAgIGNhc2UgaW50OFRhZzogY2FzZSBpbnQxNlRhZzogY2FzZSBpbnQzMlRhZzpcbiAgICBjYXNlIHVpbnQ4VGFnOiBjYXNlIHVpbnQ4Q2xhbXBlZFRhZzogY2FzZSB1aW50MTZUYWc6IGNhc2UgdWludDMyVGFnOlxuICAgICAgcmV0dXJuIGNsb25lVHlwZWRBcnJheShvYmplY3QsIGlzRGVlcCk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHJldHVybiBuZXcgQ3RvcjtcblxuICAgIGNhc2UgbnVtYmVyVGFnOlxuICAgIGNhc2Ugc3RyaW5nVGFnOlxuICAgICAgcmV0dXJuIG5ldyBDdG9yKG9iamVjdCk7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVJlZ0V4cChvYmplY3QpO1xuXG4gICAgY2FzZSBzZXRUYWc6XG4gICAgICByZXR1cm4gbmV3IEN0b3I7XG5cbiAgICBjYXNlIHN5bWJvbFRhZzpcbiAgICAgIHJldHVybiBjbG9uZVN5bWJvbChvYmplY3QpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZUJ5VGFnO1xuIiwiaW1wb3J0IGlzT2JqZWN0IGZyb20gJy4vaXNPYmplY3QuanMnO1xuXG4vKiogQnVpbHQtaW4gdmFsdWUgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RDcmVhdGUgPSBPYmplY3QuY3JlYXRlO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmNyZWF0ZWAgd2l0aG91dCBzdXBwb3J0IGZvciBhc3NpZ25pbmdcbiAqIHByb3BlcnRpZXMgdG8gdGhlIGNyZWF0ZWQgb2JqZWN0LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gcHJvdG8gVGhlIG9iamVjdCB0byBpbmhlcml0IGZyb20uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBuZXcgb2JqZWN0LlxuICovXG52YXIgYmFzZUNyZWF0ZSA9IChmdW5jdGlvbigpIHtcbiAgZnVuY3Rpb24gb2JqZWN0KCkge31cbiAgcmV0dXJuIGZ1bmN0aW9uKHByb3RvKSB7XG4gICAgaWYgKCFpc09iamVjdChwcm90bykpIHtcbiAgICAgIHJldHVybiB7fTtcbiAgICB9XG4gICAgaWYgKG9iamVjdENyZWF0ZSkge1xuICAgICAgcmV0dXJuIG9iamVjdENyZWF0ZShwcm90byk7XG4gICAgfVxuICAgIG9iamVjdC5wcm90b3R5cGUgPSBwcm90bztcbiAgICB2YXIgcmVzdWx0ID0gbmV3IG9iamVjdDtcbiAgICBvYmplY3QucHJvdG90eXBlID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH07XG59KCkpO1xuXG5leHBvcnQgZGVmYXVsdCBiYXNlQ3JlYXRlO1xuIiwiaW1wb3J0IGJhc2VDcmVhdGUgZnJvbSAnLi9fYmFzZUNyZWF0ZS5qcyc7XG5pbXBvcnQgZ2V0UHJvdG90eXBlIGZyb20gJy4vX2dldFByb3RvdHlwZS5qcyc7XG5pbXBvcnQgaXNQcm90b3R5cGUgZnJvbSAnLi9faXNQcm90b3R5cGUuanMnO1xuXG4vKipcbiAqIEluaXRpYWxpemVzIGFuIG9iamVjdCBjbG9uZS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNsb25lLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgaW5pdGlhbGl6ZWQgY2xvbmUuXG4gKi9cbmZ1bmN0aW9uIGluaXRDbG9uZU9iamVjdChvYmplY3QpIHtcbiAgcmV0dXJuICh0eXBlb2Ygb2JqZWN0LmNvbnN0cnVjdG9yID09ICdmdW5jdGlvbicgJiYgIWlzUHJvdG90eXBlKG9iamVjdCkpXG4gICAgPyBiYXNlQ3JlYXRlKGdldFByb3RvdHlwZShvYmplY3QpKVxuICAgIDoge307XG59XG5cbmV4cG9ydCBkZWZhdWx0IGluaXRDbG9uZU9iamVjdDtcbiIsImltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXSc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaXNNYXBgIHdpdGhvdXQgTm9kZS5qcyBvcHRpbWl6YXRpb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hcCh2YWx1ZSkge1xuICByZXR1cm4gaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBnZXRUYWcodmFsdWUpID09IG1hcFRhZztcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUlzTWFwO1xuIiwiaW1wb3J0IGJhc2VJc01hcCBmcm9tICcuL19iYXNlSXNNYXAuanMnO1xuaW1wb3J0IGJhc2VVbmFyeSBmcm9tICcuL19iYXNlVW5hcnkuanMnO1xuaW1wb3J0IG5vZGVVdGlsIGZyb20gJy4vX25vZGVVdGlsLmpzJztcblxuLyogTm9kZS5qcyBoZWxwZXIgcmVmZXJlbmNlcy4gKi9cbnZhciBub2RlSXNNYXAgPSBub2RlVXRpbCAmJiBub2RlVXRpbC5pc01hcDtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBjbGFzc2lmaWVkIGFzIGEgYE1hcGAgb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4zLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgbWFwLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNNYXAobmV3IE1hcCk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc01hcChuZXcgV2Vha01hcCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG52YXIgaXNNYXAgPSBub2RlSXNNYXAgPyBiYXNlVW5hcnkobm9kZUlzTWFwKSA6IGJhc2VJc01hcDtcblxuZXhwb3J0IGRlZmF1bHQgaXNNYXA7XG4iLCJpbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIHNldFRhZyA9ICdbb2JqZWN0IFNldF0nO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLmlzU2V0YCB3aXRob3V0IE5vZGUuanMgb3B0aW1pemF0aW9ucy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSXNTZXQodmFsdWUpIHtcbiAgcmV0dXJuIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgZ2V0VGFnKHZhbHVlKSA9PSBzZXRUYWc7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc1NldDtcbiIsImltcG9ydCBiYXNlSXNTZXQgZnJvbSAnLi9fYmFzZUlzU2V0LmpzJztcbmltcG9ydCBiYXNlVW5hcnkgZnJvbSAnLi9fYmFzZVVuYXJ5LmpzJztcbmltcG9ydCBub2RlVXRpbCBmcm9tICcuL19ub2RlVXRpbC5qcyc7XG5cbi8qIE5vZGUuanMgaGVscGVyIHJlZmVyZW5jZXMuICovXG52YXIgbm9kZUlzU2V0ID0gbm9kZVV0aWwgJiYgbm9kZVV0aWwuaXNTZXQ7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTZXRgIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMy4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhIHNldCwgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmlzU2V0KG5ldyBTZXQpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTZXQobmV3IFdlYWtTZXQpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xudmFyIGlzU2V0ID0gbm9kZUlzU2V0ID8gYmFzZVVuYXJ5KG5vZGVJc1NldCkgOiBiYXNlSXNTZXQ7XG5cbmV4cG9ydCBkZWZhdWx0IGlzU2V0O1xuIiwiaW1wb3J0IFN0YWNrIGZyb20gJy4vX1N0YWNrLmpzJztcbmltcG9ydCBhcnJheUVhY2ggZnJvbSAnLi9fYXJyYXlFYWNoLmpzJztcbmltcG9ydCBhc3NpZ25WYWx1ZSBmcm9tICcuL19hc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUFzc2lnbiBmcm9tICcuL19iYXNlQXNzaWduLmpzJztcbmltcG9ydCBiYXNlQXNzaWduSW4gZnJvbSAnLi9fYmFzZUFzc2lnbkluLmpzJztcbmltcG9ydCBjbG9uZUJ1ZmZlciBmcm9tICcuL19jbG9uZUJ1ZmZlci5qcyc7XG5pbXBvcnQgY29weUFycmF5IGZyb20gJy4vX2NvcHlBcnJheS5qcyc7XG5pbXBvcnQgY29weVN5bWJvbHMgZnJvbSAnLi9fY29weVN5bWJvbHMuanMnO1xuaW1wb3J0IGNvcHlTeW1ib2xzSW4gZnJvbSAnLi9fY29weVN5bWJvbHNJbi5qcyc7XG5pbXBvcnQgZ2V0QWxsS2V5cyBmcm9tICcuL19nZXRBbGxLZXlzLmpzJztcbmltcG9ydCBnZXRBbGxLZXlzSW4gZnJvbSAnLi9fZ2V0QWxsS2V5c0luLmpzJztcbmltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpbml0Q2xvbmVBcnJheSBmcm9tICcuL19pbml0Q2xvbmVBcnJheS5qcyc7XG5pbXBvcnQgaW5pdENsb25lQnlUYWcgZnJvbSAnLi9faW5pdENsb25lQnlUYWcuanMnO1xuaW1wb3J0IGluaXRDbG9uZU9iamVjdCBmcm9tICcuL19pbml0Q2xvbmVPYmplY3QuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0J1ZmZlciBmcm9tICcuL2lzQnVmZmVyLmpzJztcbmltcG9ydCBpc01hcCBmcm9tICcuL2lzTWFwLmpzJztcbmltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcbmltcG9ydCBpc1NldCBmcm9tICcuL2lzU2V0LmpzJztcbmltcG9ydCBrZXlzIGZyb20gJy4va2V5cy5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfREVFUF9GTEFHID0gMSxcbiAgICBDTE9ORV9GTEFUX0ZMQUcgPSAyLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKiBgT2JqZWN0I3RvU3RyaW5nYCByZXN1bHQgcmVmZXJlbmNlcy4gKi9cbnZhciBhcmdzVGFnID0gJ1tvYmplY3QgQXJndW1lbnRzXScsXG4gICAgYXJyYXlUYWcgPSAnW29iamVjdCBBcnJheV0nLFxuICAgIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgZnVuY1RhZyA9ICdbb2JqZWN0IEZ1bmN0aW9uXScsXG4gICAgZ2VuVGFnID0gJ1tvYmplY3QgR2VuZXJhdG9yRnVuY3Rpb25dJyxcbiAgICBtYXBUYWcgPSAnW29iamVjdCBNYXBdJyxcbiAgICBudW1iZXJUYWcgPSAnW29iamVjdCBOdW1iZXJdJyxcbiAgICBvYmplY3RUYWcgPSAnW29iamVjdCBPYmplY3RdJyxcbiAgICByZWdleHBUYWcgPSAnW29iamVjdCBSZWdFeHBdJyxcbiAgICBzZXRUYWcgPSAnW29iamVjdCBTZXRdJyxcbiAgICBzdHJpbmdUYWcgPSAnW29iamVjdCBTdHJpbmddJyxcbiAgICBzeW1ib2xUYWcgPSAnW29iamVjdCBTeW1ib2xdJyxcbiAgICB3ZWFrTWFwVGFnID0gJ1tvYmplY3QgV2Vha01hcF0nO1xuXG52YXIgYXJyYXlCdWZmZXJUYWcgPSAnW29iamVjdCBBcnJheUJ1ZmZlcl0nLFxuICAgIGRhdGFWaWV3VGFnID0gJ1tvYmplY3QgRGF0YVZpZXddJyxcbiAgICBmbG9hdDMyVGFnID0gJ1tvYmplY3QgRmxvYXQzMkFycmF5XScsXG4gICAgZmxvYXQ2NFRhZyA9ICdbb2JqZWN0IEZsb2F0NjRBcnJheV0nLFxuICAgIGludDhUYWcgPSAnW29iamVjdCBJbnQ4QXJyYXldJyxcbiAgICBpbnQxNlRhZyA9ICdbb2JqZWN0IEludDE2QXJyYXldJyxcbiAgICBpbnQzMlRhZyA9ICdbb2JqZWN0IEludDMyQXJyYXldJyxcbiAgICB1aW50OFRhZyA9ICdbb2JqZWN0IFVpbnQ4QXJyYXldJyxcbiAgICB1aW50OENsYW1wZWRUYWcgPSAnW29iamVjdCBVaW50OENsYW1wZWRBcnJheV0nLFxuICAgIHVpbnQxNlRhZyA9ICdbb2JqZWN0IFVpbnQxNkFycmF5XScsXG4gICAgdWludDMyVGFnID0gJ1tvYmplY3QgVWludDMyQXJyYXldJztcblxuLyoqIFVzZWQgdG8gaWRlbnRpZnkgYHRvU3RyaW5nVGFnYCB2YWx1ZXMgc3VwcG9ydGVkIGJ5IGBfLmNsb25lYC4gKi9cbnZhciBjbG9uZWFibGVUYWdzID0ge307XG5jbG9uZWFibGVUYWdzW2FyZ3NUYWddID0gY2xvbmVhYmxlVGFnc1thcnJheVRhZ10gPVxuY2xvbmVhYmxlVGFnc1thcnJheUJ1ZmZlclRhZ10gPSBjbG9uZWFibGVUYWdzW2RhdGFWaWV3VGFnXSA9XG5jbG9uZWFibGVUYWdzW2Jvb2xUYWddID0gY2xvbmVhYmxlVGFnc1tkYXRlVGFnXSA9XG5jbG9uZWFibGVUYWdzW2Zsb2F0MzJUYWddID0gY2xvbmVhYmxlVGFnc1tmbG9hdDY0VGFnXSA9XG5jbG9uZWFibGVUYWdzW2ludDhUYWddID0gY2xvbmVhYmxlVGFnc1tpbnQxNlRhZ10gPVxuY2xvbmVhYmxlVGFnc1tpbnQzMlRhZ10gPSBjbG9uZWFibGVUYWdzW21hcFRhZ10gPVxuY2xvbmVhYmxlVGFnc1tudW1iZXJUYWddID0gY2xvbmVhYmxlVGFnc1tvYmplY3RUYWddID1cbmNsb25lYWJsZVRhZ3NbcmVnZXhwVGFnXSA9IGNsb25lYWJsZVRhZ3Nbc2V0VGFnXSA9XG5jbG9uZWFibGVUYWdzW3N0cmluZ1RhZ10gPSBjbG9uZWFibGVUYWdzW3N5bWJvbFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50OFRhZ10gPSBjbG9uZWFibGVUYWdzW3VpbnQ4Q2xhbXBlZFRhZ10gPVxuY2xvbmVhYmxlVGFnc1t1aW50MTZUYWddID0gY2xvbmVhYmxlVGFnc1t1aW50MzJUYWddID0gdHJ1ZTtcbmNsb25lYWJsZVRhZ3NbZXJyb3JUYWddID0gY2xvbmVhYmxlVGFnc1tmdW5jVGFnXSA9XG5jbG9uZWFibGVUYWdzW3dlYWtNYXBUYWddID0gZmFsc2U7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uY2xvbmVgIGFuZCBgXy5jbG9uZURlZXBgIHdoaWNoIHRyYWNrc1xuICogdHJhdmVyc2VkIG9iamVjdHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHBhcmFtIHtib29sZWFufSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLlxuICogIDEgLSBEZWVwIGNsb25lXG4gKiAgMiAtIEZsYXR0ZW4gaW5oZXJpdGVkIHByb3BlcnRpZXNcbiAqICA0IC0gQ2xvbmUgc3ltYm9sc1xuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBba2V5XSBUaGUga2V5IG9mIGB2YWx1ZWAuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIHBhcmVudCBvYmplY3Qgb2YgYHZhbHVlYC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgb2JqZWN0cyBhbmQgdGhlaXIgY2xvbmUgY291bnRlcnBhcnRzLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUNsb25lKHZhbHVlLCBiaXRtYXNrLCBjdXN0b21pemVyLCBrZXksIG9iamVjdCwgc3RhY2spIHtcbiAgdmFyIHJlc3VsdCxcbiAgICAgIGlzRGVlcCA9IGJpdG1hc2sgJiBDTE9ORV9ERUVQX0ZMQUcsXG4gICAgICBpc0ZsYXQgPSBiaXRtYXNrICYgQ0xPTkVfRkxBVF9GTEFHLFxuICAgICAgaXNGdWxsID0gYml0bWFzayAmIENMT05FX1NZTUJPTFNfRkxBRztcblxuICBpZiAoY3VzdG9taXplcikge1xuICAgIHJlc3VsdCA9IG9iamVjdCA/IGN1c3RvbWl6ZXIodmFsdWUsIGtleSwgb2JqZWN0LCBzdGFjaykgOiBjdXN0b21pemVyKHZhbHVlKTtcbiAgfVxuICBpZiAocmVzdWx0ICE9PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gcmVzdWx0O1xuICB9XG4gIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciBpc0FyciA9IGlzQXJyYXkodmFsdWUpO1xuICBpZiAoaXNBcnIpIHtcbiAgICByZXN1bHQgPSBpbml0Q2xvbmVBcnJheSh2YWx1ZSk7XG4gICAgaWYgKCFpc0RlZXApIHtcbiAgICAgIHJldHVybiBjb3B5QXJyYXkodmFsdWUsIHJlc3VsdCk7XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgICBpc0Z1bmMgPSB0YWcgPT0gZnVuY1RhZyB8fCB0YWcgPT0gZ2VuVGFnO1xuXG4gICAgaWYgKGlzQnVmZmVyKHZhbHVlKSkge1xuICAgICAgcmV0dXJuIGNsb25lQnVmZmVyKHZhbHVlLCBpc0RlZXApO1xuICAgIH1cbiAgICBpZiAodGFnID09IG9iamVjdFRhZyB8fCB0YWcgPT0gYXJnc1RhZyB8fCAoaXNGdW5jICYmICFvYmplY3QpKSB7XG4gICAgICByZXN1bHQgPSAoaXNGbGF0IHx8IGlzRnVuYykgPyB7fSA6IGluaXRDbG9uZU9iamVjdCh2YWx1ZSk7XG4gICAgICBpZiAoIWlzRGVlcCkge1xuICAgICAgICByZXR1cm4gaXNGbGF0XG4gICAgICAgICAgPyBjb3B5U3ltYm9sc0luKHZhbHVlLCBiYXNlQXNzaWduSW4ocmVzdWx0LCB2YWx1ZSkpXG4gICAgICAgICAgOiBjb3B5U3ltYm9scyh2YWx1ZSwgYmFzZUFzc2lnbihyZXN1bHQsIHZhbHVlKSk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmICghY2xvbmVhYmxlVGFnc1t0YWddKSB7XG4gICAgICAgIHJldHVybiBvYmplY3QgPyB2YWx1ZSA6IHt9O1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gaW5pdENsb25lQnlUYWcodmFsdWUsIHRhZywgaXNEZWVwKTtcbiAgICB9XG4gIH1cbiAgLy8gQ2hlY2sgZm9yIGNpcmN1bGFyIHJlZmVyZW5jZXMgYW5kIHJldHVybiBpdHMgY29ycmVzcG9uZGluZyBjbG9uZS5cbiAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQodmFsdWUpO1xuICBpZiAoc3RhY2tlZCkge1xuICAgIHJldHVybiBzdGFja2VkO1xuICB9XG4gIHN0YWNrLnNldCh2YWx1ZSwgcmVzdWx0KTtcblxuICBpZiAoaXNTZXQodmFsdWUpKSB7XG4gICAgdmFsdWUuZm9yRWFjaChmdW5jdGlvbihzdWJWYWx1ZSkge1xuICAgICAgcmVzdWx0LmFkZChiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN1YlZhbHVlLCB2YWx1ZSwgc3RhY2spKTtcbiAgICB9KTtcbiAgfSBlbHNlIGlmIChpc01hcCh2YWx1ZSkpIHtcbiAgICB2YWx1ZS5mb3JFYWNoKGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICAgIHJlc3VsdC5zZXQoa2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gICAgfSk7XG4gIH1cblxuICB2YXIga2V5c0Z1bmMgPSBpc0Z1bGxcbiAgICA/IChpc0ZsYXQgPyBnZXRBbGxLZXlzSW4gOiBnZXRBbGxLZXlzKVxuICAgIDogKGlzRmxhdCA/IGtleXNJbiA6IGtleXMpO1xuXG4gIHZhciBwcm9wcyA9IGlzQXJyID8gdW5kZWZpbmVkIDoga2V5c0Z1bmModmFsdWUpO1xuICBhcnJheUVhY2gocHJvcHMgfHwgdmFsdWUsIGZ1bmN0aW9uKHN1YlZhbHVlLCBrZXkpIHtcbiAgICBpZiAocHJvcHMpIHtcbiAgICAgIGtleSA9IHN1YlZhbHVlO1xuICAgICAgc3ViVmFsdWUgPSB2YWx1ZVtrZXldO1xuICAgIH1cbiAgICAvLyBSZWN1cnNpdmVseSBwb3B1bGF0ZSBjbG9uZSAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGFzc2lnblZhbHVlKHJlc3VsdCwga2V5LCBiYXNlQ2xvbmUoc3ViVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGtleSwgdmFsdWUsIHN0YWNrKSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlQ2xvbmU7XG4iLCJpbXBvcnQgYmFzZUNsb25lIGZyb20gJy4vX2Jhc2VDbG9uZS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIGNsb25pbmcuICovXG52YXIgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBDcmVhdGVzIGEgc2hhbGxvdyBjbG9uZSBvZiBgdmFsdWVgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIG1ldGhvZCBpcyBsb29zZWx5IGJhc2VkIG9uIHRoZVxuICogW3N0cnVjdHVyZWQgY2xvbmUgYWxnb3JpdGhtXShodHRwczovL21kbi5pby9TdHJ1Y3R1cmVkX2Nsb25lX2FsZ29yaXRobSlcbiAqIGFuZCBzdXBwb3J0cyBjbG9uaW5nIGFycmF5cywgYXJyYXkgYnVmZmVycywgYm9vbGVhbnMsIGRhdGUgb2JqZWN0cywgbWFwcyxcbiAqIG51bWJlcnMsIGBPYmplY3RgIG9iamVjdHMsIHJlZ2V4ZXMsIHNldHMsIHN0cmluZ3MsIHN5bWJvbHMsIGFuZCB0eXBlZFxuICogYXJyYXlzLiBUaGUgb3duIGVudW1lcmFibGUgcHJvcGVydGllcyBvZiBgYXJndW1lbnRzYCBvYmplY3RzIGFyZSBjbG9uZWRcbiAqIGFzIHBsYWluIG9iamVjdHMuIEFuIGVtcHR5IG9iamVjdCBpcyByZXR1cm5lZCBmb3IgdW5jbG9uZWFibGUgdmFsdWVzIHN1Y2hcbiAqIGFzIGVycm9yIG9iamVjdHMsIGZ1bmN0aW9ucywgRE9NIG5vZGVzLCBhbmQgV2Vha01hcHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZURlZXBcbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdHMgPSBbeyAnYSc6IDEgfSwgeyAnYic6IDIgfV07XG4gKlxuICogdmFyIHNoYWxsb3cgPSBfLmNsb25lKG9iamVjdHMpO1xuICogY29uc29sZS5sb2coc2hhbGxvd1swXSA9PT0gb2JqZWN0c1swXSk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGNsb25lKHZhbHVlKSB7XG4gIHJldHVybiBiYXNlQ2xvbmUodmFsdWUsIENMT05FX1NZTUJPTFNfRkxBRyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNsb25lO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYF8ubWFwYCBmb3IgYXJyYXlzIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWVcbiAqIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IFthcnJheV0gVGhlIGFycmF5IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG5ldyBtYXBwZWQgYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGFycmF5TWFwKGFycmF5LCBpdGVyYXRlZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcblxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIHJlc3VsdFtpbmRleF0gPSBpdGVyYXRlZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlNYXA7XG4iLCJpbXBvcnQgYmFzZUdldFRhZyBmcm9tICcuL19iYXNlR2V0VGFnLmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTeW1ib2xgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzeW1ib2wsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N5bWJvbChTeW1ib2wuaXRlcmF0b3IpO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNTeW1ib2woJ2FiYycpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNTeW1ib2wodmFsdWUpIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PSAnc3ltYm9sJyB8fFxuICAgIChpc09iamVjdExpa2UodmFsdWUpICYmIGJhc2VHZXRUYWcodmFsdWUpID09IHN5bWJvbFRhZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGlzU3ltYm9sO1xuIiwiaW1wb3J0IE1hcENhY2hlIGZyb20gJy4vX01hcENhY2hlLmpzJztcblxuLyoqIEVycm9yIG1lc3NhZ2UgY29uc3RhbnRzLiAqL1xudmFyIEZVTkNfRVJST1JfVEVYVCA9ICdFeHBlY3RlZCBhIGZ1bmN0aW9uJztcblxuLyoqXG4gKiBDcmVhdGVzIGEgZnVuY3Rpb24gdGhhdCBtZW1vaXplcyB0aGUgcmVzdWx0IG9mIGBmdW5jYC4gSWYgYHJlc29sdmVyYCBpc1xuICogcHJvdmlkZWQsIGl0IGRldGVybWluZXMgdGhlIGNhY2hlIGtleSBmb3Igc3RvcmluZyB0aGUgcmVzdWx0IGJhc2VkIG9uIHRoZVxuICogYXJndW1lbnRzIHByb3ZpZGVkIHRvIHRoZSBtZW1vaXplZCBmdW5jdGlvbi4gQnkgZGVmYXVsdCwgdGhlIGZpcnN0IGFyZ3VtZW50XG4gKiBwcm92aWRlZCB0byB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24gaXMgdXNlZCBhcyB0aGUgbWFwIGNhY2hlIGtleS4gVGhlIGBmdW5jYFxuICogaXMgaW52b2tlZCB3aXRoIHRoZSBgdGhpc2AgYmluZGluZyBvZiB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKlxuICogKipOb3RlOioqIFRoZSBjYWNoZSBpcyBleHBvc2VkIGFzIHRoZSBgY2FjaGVgIHByb3BlcnR5IG9uIHRoZSBtZW1vaXplZFxuICogZnVuY3Rpb24uIEl0cyBjcmVhdGlvbiBtYXkgYmUgY3VzdG9taXplZCBieSByZXBsYWNpbmcgdGhlIGBfLm1lbW9pemUuQ2FjaGVgXG4gKiBjb25zdHJ1Y3RvciB3aXRoIG9uZSB3aG9zZSBpbnN0YW5jZXMgaW1wbGVtZW50IHRoZVxuICogW2BNYXBgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1wcm9wZXJ0aWVzLW9mLXRoZS1tYXAtcHJvdG90eXBlLW9iamVjdClcbiAqIG1ldGhvZCBpbnRlcmZhY2Ugb2YgYGNsZWFyYCwgYGRlbGV0ZWAsIGBnZXRgLCBgaGFzYCwgYW5kIGBzZXRgLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBjYXRlZ29yeSBGdW5jdGlvblxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW3Jlc29sdmVyXSBUaGUgZnVuY3Rpb24gdG8gcmVzb2x2ZSB0aGUgY2FjaGUga2V5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSB7ICdhJzogMSwgJ2InOiAyIH07XG4gKiB2YXIgb3RoZXIgPSB7ICdjJzogMywgJ2QnOiA0IH07XG4gKlxuICogdmFyIHZhbHVlcyA9IF8ubWVtb2l6ZShfLnZhbHVlcyk7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIHZhbHVlcyhvdGhlcik7XG4gKiAvLyA9PiBbMywgNF1cbiAqXG4gKiBvYmplY3QuYSA9IDI7XG4gKiB2YWx1ZXMob2JqZWN0KTtcbiAqIC8vID0+IFsxLCAyXVxuICpcbiAqIC8vIE1vZGlmeSB0aGUgcmVzdWx0IGNhY2hlLlxuICogdmFsdWVzLmNhY2hlLnNldChvYmplY3QsIFsnYScsICdiJ10pO1xuICogdmFsdWVzKG9iamVjdCk7XG4gKiAvLyA9PiBbJ2EnLCAnYiddXG4gKlxuICogLy8gUmVwbGFjZSBgXy5tZW1vaXplLkNhY2hlYC5cbiAqIF8ubWVtb2l6ZS5DYWNoZSA9IFdlYWtNYXA7XG4gKi9cbmZ1bmN0aW9uIG1lbW9pemUoZnVuYywgcmVzb2x2ZXIpIHtcbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicgfHwgKHJlc29sdmVyICE9IG51bGwgJiYgdHlwZW9mIHJlc29sdmVyICE9ICdmdW5jdGlvbicpKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIHZhciBtZW1vaXplZCA9IGZ1bmN0aW9uKCkge1xuICAgIHZhciBhcmdzID0gYXJndW1lbnRzLFxuICAgICAgICBrZXkgPSByZXNvbHZlciA/IHJlc29sdmVyLmFwcGx5KHRoaXMsIGFyZ3MpIDogYXJnc1swXSxcbiAgICAgICAgY2FjaGUgPSBtZW1vaXplZC5jYWNoZTtcblxuICAgIGlmIChjYWNoZS5oYXMoa2V5KSkge1xuICAgICAgcmV0dXJuIGNhY2hlLmdldChrZXkpO1xuICAgIH1cbiAgICB2YXIgcmVzdWx0ID0gZnVuYy5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICBtZW1vaXplZC5jYWNoZSA9IGNhY2hlLnNldChrZXksIHJlc3VsdCkgfHwgY2FjaGU7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcbiAgbWVtb2l6ZWQuY2FjaGUgPSBuZXcgKG1lbW9pemUuQ2FjaGUgfHwgTWFwQ2FjaGUpO1xuICByZXR1cm4gbWVtb2l6ZWQ7XG59XG5cbi8vIEV4cG9zZSBgTWFwQ2FjaGVgLlxubWVtb2l6ZS5DYWNoZSA9IE1hcENhY2hlO1xuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplO1xuIiwiaW1wb3J0IG1lbW9pemUgZnJvbSAnLi9tZW1vaXplLmpzJztcblxuLyoqIFVzZWQgYXMgdGhlIG1heGltdW0gbWVtb2l6ZSBjYWNoZSBzaXplLiAqL1xudmFyIE1BWF9NRU1PSVpFX1NJWkUgPSA1MDA7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLm1lbW9pemVgIHdoaWNoIGNsZWFycyB0aGUgbWVtb2l6ZWQgZnVuY3Rpb24nc1xuICogY2FjaGUgd2hlbiBpdCBleGNlZWRzIGBNQVhfTUVNT0laRV9TSVpFYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gZnVuYyBUaGUgZnVuY3Rpb24gdG8gaGF2ZSBpdHMgb3V0cHV0IG1lbW9pemVkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgbWVtb2l6ZWQgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIG1lbW9pemVDYXBwZWQoZnVuYykge1xuICB2YXIgcmVzdWx0ID0gbWVtb2l6ZShmdW5jLCBmdW5jdGlvbihrZXkpIHtcbiAgICBpZiAoY2FjaGUuc2l6ZSA9PT0gTUFYX01FTU9JWkVfU0laRSkge1xuICAgICAgY2FjaGUuY2xlYXIoKTtcbiAgICB9XG4gICAgcmV0dXJuIGtleTtcbiAgfSk7XG5cbiAgdmFyIGNhY2hlID0gcmVzdWx0LmNhY2hlO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtZW1vaXplQ2FwcGVkO1xuIiwiaW1wb3J0IG1lbW9pemVDYXBwZWQgZnJvbSAnLi9fbWVtb2l6ZUNhcHBlZC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZVByb3BOYW1lID0gL1teLltcXF1dK3xcXFsoPzooLT9cXGQrKD86XFwuXFxkKyk/KXwoW1wiJ10pKCg/Oig/IVxcMilbXlxcXFxdfFxcXFwuKSo/KVxcMilcXF18KD89KD86XFwufFxcW1xcXSkoPzpcXC58XFxbXFxdfCQpKS9nO1xuXG4vKiogVXNlZCB0byBtYXRjaCBiYWNrc2xhc2hlcyBpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUVzY2FwZUNoYXIgPSAvXFxcXChcXFxcKT8vZztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhIHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBzdHJpbmcgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICovXG52YXIgc3RyaW5nVG9QYXRoID0gbWVtb2l6ZUNhcHBlZChmdW5jdGlvbihzdHJpbmcpIHtcbiAgdmFyIHJlc3VsdCA9IFtdO1xuICBpZiAoc3RyaW5nLmNoYXJDb2RlQXQoMCkgPT09IDQ2IC8qIC4gKi8pIHtcbiAgICByZXN1bHQucHVzaCgnJyk7XG4gIH1cbiAgc3RyaW5nLnJlcGxhY2UocmVQcm9wTmFtZSwgZnVuY3Rpb24obWF0Y2gsIG51bWJlciwgcXVvdGUsIHN1YlN0cmluZykge1xuICAgIHJlc3VsdC5wdXNoKHF1b3RlID8gc3ViU3RyaW5nLnJlcGxhY2UocmVFc2NhcGVDaGFyLCAnJDEnKSA6IChudW1iZXIgfHwgbWF0Y2gpKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59KTtcblxuZXhwb3J0IGRlZmF1bHQgc3RyaW5nVG9QYXRoO1xuIiwiaW1wb3J0IGlzU3ltYm9sIGZyb20gJy4vaXNTeW1ib2wuanMnO1xuXG4vKiogVXNlZCBhcyByZWZlcmVuY2VzIGZvciB2YXJpb3VzIGBOdW1iZXJgIGNvbnN0YW50cy4gKi9cbnZhciBJTkZJTklUWSA9IDEgLyAwO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcga2V5IGlmIGl0J3Mgbm90IGEgc3RyaW5nIG9yIHN5bWJvbC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtzdHJpbmd8c3ltYm9sfSBSZXR1cm5zIHRoZSBrZXkuXG4gKi9cbmZ1bmN0aW9uIHRvS2V5KHZhbHVlKSB7XG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHwgaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgdG9LZXk7XG4iLCJpbXBvcnQgU3ltYm9sIGZyb20gJy4vX1N5bWJvbC5qcyc7XG5pbXBvcnQgYXJyYXlNYXAgZnJvbSAnLi9fYXJyYXlNYXAuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc1N5bWJvbCBmcm9tICcuL2lzU3ltYm9sLmpzJztcblxuLyoqIFVzZWQgYXMgcmVmZXJlbmNlcyBmb3IgdmFyaW91cyBgTnVtYmVyYCBjb25zdGFudHMuICovXG52YXIgSU5GSU5JVFkgPSAxIC8gMDtcblxuLyoqIFVzZWQgdG8gY29udmVydCBzeW1ib2xzIHRvIHByaW1pdGl2ZXMgYW5kIHN0cmluZ3MuICovXG52YXIgc3ltYm9sUHJvdG8gPSBTeW1ib2wgPyBTeW1ib2wucHJvdG90eXBlIDogdW5kZWZpbmVkLFxuICAgIHN5bWJvbFRvU3RyaW5nID0gc3ltYm9sUHJvdG8gPyBzeW1ib2xQcm90by50b1N0cmluZyA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy50b1N0cmluZ2Agd2hpY2ggZG9lc24ndCBjb252ZXJ0IG51bGxpc2hcbiAqIHZhbHVlcyB0byBlbXB0eSBzdHJpbmdzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBwcm9jZXNzLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc3RyaW5nLlxuICovXG5mdW5jdGlvbiBiYXNlVG9TdHJpbmcodmFsdWUpIHtcbiAgLy8gRXhpdCBlYXJseSBmb3Igc3RyaW5ncyB0byBhdm9pZCBhIHBlcmZvcm1hbmNlIGhpdCBpbiBzb21lIGVudmlyb25tZW50cy5cbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAvLyBSZWN1cnNpdmVseSBjb252ZXJ0IHZhbHVlcyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIHJldHVybiBhcnJheU1hcCh2YWx1ZSwgYmFzZVRvU3RyaW5nKSArICcnO1xuICB9XG4gIGlmIChpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gc3ltYm9sVG9TdHJpbmcgPyBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbHVlKSA6ICcnO1xuICB9XG4gIHZhciByZXN1bHQgPSAodmFsdWUgKyAnJyk7XG4gIHJldHVybiAocmVzdWx0ID09ICcwJyAmJiAoMSAvIHZhbHVlKSA9PSAtSU5GSU5JVFkpID8gJy0wJyA6IHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVRvU3RyaW5nO1xuIiwiaW1wb3J0IGJhc2VUb1N0cmluZyBmcm9tICcuL19iYXNlVG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBzdHJpbmcuIEFuIGVtcHR5IHN0cmluZyBpcyByZXR1cm5lZCBmb3IgYG51bGxgXG4gKiBhbmQgYHVuZGVmaW5lZGAgdmFsdWVzLiBUaGUgc2lnbiBvZiBgLTBgIGlzIHByZXNlcnZlZC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9TdHJpbmcobnVsbCk7XG4gKiAvLyA9PiAnJ1xuICpcbiAqIF8udG9TdHJpbmcoLTApO1xuICogLy8gPT4gJy0wJ1xuICpcbiAqIF8udG9TdHJpbmcoWzEsIDIsIDNdKTtcbiAqIC8vID0+ICcxLDIsMydcbiAqL1xuZnVuY3Rpb24gdG9TdHJpbmcodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09IG51bGwgPyAnJyA6IGJhc2VUb1N0cmluZyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvU3RyaW5nO1xuIiwiaW1wb3J0IGFycmF5TWFwIGZyb20gJy4vX2FycmF5TWFwLmpzJztcbmltcG9ydCBjb3B5QXJyYXkgZnJvbSAnLi9fY29weUFycmF5LmpzJztcbmltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5pbXBvcnQgc3RyaW5nVG9QYXRoIGZyb20gJy4vX3N0cmluZ1RvUGF0aC5qcyc7XG5pbXBvcnQgdG9LZXkgZnJvbSAnLi9fdG9LZXkuanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBwcm9wZXJ0eSBwYXRoIGFycmF5LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBVdGlsXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb252ZXJ0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBuZXcgcHJvcGVydHkgcGF0aCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b1BhdGgoJ2EuYi5jJyk7XG4gKiAvLyA9PiBbJ2EnLCAnYicsICdjJ11cbiAqXG4gKiBfLnRvUGF0aCgnYVswXS5iLmMnKTtcbiAqIC8vID0+IFsnYScsICcwJywgJ2InLCAnYyddXG4gKi9cbmZ1bmN0aW9uIHRvUGF0aCh2YWx1ZSkge1xuICBpZiAoaXNBcnJheSh2YWx1ZSkpIHtcbiAgICByZXR1cm4gYXJyYXlNYXAodmFsdWUsIHRvS2V5KTtcbiAgfVxuICByZXR1cm4gaXNTeW1ib2wodmFsdWUpID8gW3ZhbHVlXSA6IGNvcHlBcnJheShzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvUGF0aDtcbiIsImltcG9ydCBiYXNlQ2xvbmUgZnJvbSAnLi9fYmFzZUNsb25lLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgY2xvbmluZy4gKi9cbnZhciBDTE9ORV9ERUVQX0ZMQUcgPSAxLFxuICAgIENMT05FX1NZTUJPTFNfRkxBRyA9IDQ7XG5cbi8qKlxuICogVGhpcyBtZXRob2QgaXMgbGlrZSBgXy5jbG9uZWAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAxLjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICogQHJldHVybnMgeyp9IFJldHVybnMgdGhlIGRlZXAgY2xvbmVkIHZhbHVlLlxuICogQHNlZSBfLmNsb25lXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3RzID0gW3sgJ2EnOiAxIH0sIHsgJ2InOiAyIH1dO1xuICpcbiAqIHZhciBkZWVwID0gXy5jbG9uZURlZXAob2JqZWN0cyk7XG4gKiBjb25zb2xlLmxvZyhkZWVwWzBdID09PSBvYmplY3RzWzBdKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGNsb25lRGVlcCh2YWx1ZSkge1xuICByZXR1cm4gYmFzZUNsb25lKHZhbHVlLCBDTE9ORV9ERUVQX0ZMQUcgfCBDTE9ORV9TWU1CT0xTX0ZMQUcpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjbG9uZURlZXA7XG4iLCJpbXBvcnQgY2xvbmUgZnJvbSAnbG9kYXNoL2Nsb25lJztcbmltcG9ydCB0b1BhdGggZnJvbSAnbG9kYXNoL3RvUGF0aCc7XG5pbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbi8vIEFzc2VydGlvbnNcblxuLyoqIEBwcml2YXRlIGlzIHRoZSB2YWx1ZSBhbiBlbXB0eSBhcnJheT8gKi9cbmV4cG9ydCBjb25zdCBpc0VtcHR5QXJyYXkgPSAodmFsdWU/OiBhbnkpID0+XG4gIEFycmF5LmlzQXJyYXkodmFsdWUpICYmIHZhbHVlLmxlbmd0aCA9PT0gMDtcblxuLyoqIEBwcml2YXRlIGlzIHRoZSBnaXZlbiBvYmplY3QgYSBGdW5jdGlvbj8gKi9cbmV4cG9ydCBjb25zdCBpc0Z1bmN0aW9uID0gKG9iajogYW55KTogb2JqIGlzIEZ1bmN0aW9uID0+XG4gIHR5cGVvZiBvYmogPT09ICdmdW5jdGlvbic7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0IGFuIE9iamVjdD8gKi9cbmV4cG9ydCBjb25zdCBpc09iamVjdCA9IChvYmo6IGFueSk6IG9iaiBpcyBPYmplY3QgPT5cbiAgb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdCBhbiBpbnRlZ2VyPyAqL1xuZXhwb3J0IGNvbnN0IGlzSW50ZWdlciA9IChvYmo6IGFueSk6IGJvb2xlYW4gPT5cbiAgU3RyaW5nKE1hdGguZmxvb3IoTnVtYmVyKG9iaikpKSA9PT0gb2JqO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdCBhIHN0cmluZz8gKi9cbmV4cG9ydCBjb25zdCBpc1N0cmluZyA9IChvYmo6IGFueSk6IG9iaiBpcyBzdHJpbmcgPT5cbiAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IFN0cmluZ10nO1xuXG4vKiogQHByaXZhdGUgaXMgdGhlIGdpdmVuIG9iamVjdCBhIE5hTj8gKi9cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby1zZWxmLWNvbXBhcmVcbmV4cG9ydCBjb25zdCBpc05hTiA9IChvYmo6IGFueSk6IGJvb2xlYW4gPT4gb2JqICE9PSBvYmo7XG5cbi8qKiBAcHJpdmF0ZSBEb2VzIGEgUmVhY3QgY29tcG9uZW50IGhhdmUgZXhhY3RseSAwIGNoaWxkcmVuPyAqL1xuZXhwb3J0IGNvbnN0IGlzRW1wdHlDaGlsZHJlbiA9IChjaGlsZHJlbjogYW55KTogYm9vbGVhbiA9PlxuICBSZWFjdC5DaGlsZHJlbi5jb3VudChjaGlsZHJlbikgPT09IDA7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0L3ZhbHVlIGEgcHJvbWlzZT8gKi9cbmV4cG9ydCBjb25zdCBpc1Byb21pc2UgPSAodmFsdWU6IGFueSk6IHZhbHVlIGlzIFByb21pc2VMaWtlPGFueT4gPT5cbiAgaXNPYmplY3QodmFsdWUpICYmIGlzRnVuY3Rpb24odmFsdWUudGhlbik7XG5cbi8qKiBAcHJpdmF0ZSBpcyB0aGUgZ2l2ZW4gb2JqZWN0L3ZhbHVlIGEgdHlwZSBvZiBzeW50aGV0aWMgZXZlbnQ/ICovXG5leHBvcnQgY29uc3QgaXNJbnB1dEV2ZW50ID0gKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBSZWFjdC5TeW50aGV0aWNFdmVudDxhbnk+ID0+XG4gIHZhbHVlICYmIGlzT2JqZWN0KHZhbHVlKSAmJiBpc09iamVjdCh2YWx1ZS50YXJnZXQpO1xuXG4vKipcbiAqIFNhbWUgYXMgZG9jdW1lbnQuYWN0aXZlRWxlbWVudCBidXQgd3JhcHMgaW4gYSB0cnktY2F0Y2ggYmxvY2suIEluIElFIGl0IGlzXG4gKiBub3Qgc2FmZSB0byBjYWxsIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgaWYgdGhlcmUgaXMgbm90aGluZyBmb2N1c2VkLlxuICpcbiAqIFRoZSBhY3RpdmVFbGVtZW50IHdpbGwgYmUgbnVsbCBvbmx5IGlmIHRoZSBkb2N1bWVudCBvciBkb2N1bWVudCBib2R5IGlzIG5vdFxuICogeWV0IGRlZmluZWQuXG4gKlxuICogQHBhcmFtIHs/RG9jdW1lbnR9IGRvYyBEZWZhdWx0cyB0byBjdXJyZW50IGRvY3VtZW50LlxuICogQHJldHVybiB7RWxlbWVudCB8IG51bGx9XG4gKiBAc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlYm9vay9mYmpzL2Jsb2IvbWFzdGVyL3BhY2thZ2VzL2ZianMvc3JjL2NvcmUvZG9tL2dldEFjdGl2ZUVsZW1lbnQuanNcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGdldEFjdGl2ZUVsZW1lbnQoZG9jPzogRG9jdW1lbnQpOiBFbGVtZW50IHwgbnVsbCB7XG4gIGRvYyA9IGRvYyB8fCAodHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJyA/IGRvY3VtZW50IDogdW5kZWZpbmVkKTtcbiAgaWYgKHR5cGVvZiBkb2MgPT09ICd1bmRlZmluZWQnKSB7XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgdHJ5IHtcbiAgICByZXR1cm4gZG9jLmFjdGl2ZUVsZW1lbnQgfHwgZG9jLmJvZHk7XG4gIH0gY2F0Y2ggKGUpIHtcbiAgICByZXR1cm4gZG9jLmJvZHk7XG4gIH1cbn1cblxuLyoqXG4gKiBEZWVwbHkgZ2V0IGEgdmFsdWUgZnJvbSBhbiBvYmplY3QgdmlhIGl0cyBwYXRoLlxuICovXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW4oXG4gIG9iajogYW55LFxuICBrZXk6IHN0cmluZyB8IHN0cmluZ1tdLFxuICBkZWY/OiBhbnksXG4gIHA6IG51bWJlciA9IDBcbikge1xuICBjb25zdCBwYXRoID0gdG9QYXRoKGtleSk7XG4gIHdoaWxlIChvYmogJiYgcCA8IHBhdGgubGVuZ3RoKSB7XG4gICAgb2JqID0gb2JqW3BhdGhbcCsrXV07XG4gIH1cbiAgcmV0dXJuIG9iaiA9PT0gdW5kZWZpbmVkID8gZGVmIDogb2JqO1xufVxuXG4vKipcbiAqIERlZXBseSBzZXQgYSB2YWx1ZSBmcm9tIGluIG9iamVjdCB2aWEgaXQncyBwYXRoLiBJZiB0aGUgdmFsdWUgYXQgYHBhdGhgXG4gKiBoYXMgY2hhbmdlZCwgcmV0dXJuIGEgc2hhbGxvdyBjb3B5IG9mIG9iaiB3aXRoIGB2YWx1ZWAgc2V0IGF0IGBwYXRoYC5cbiAqIElmIGB2YWx1ZWAgaGFzIG5vdCBjaGFuZ2VkLCByZXR1cm4gdGhlIG9yaWdpbmFsIGBvYmpgLlxuICpcbiAqIEV4aXN0aW5nIG9iamVjdHMgLyBhcnJheXMgYWxvbmcgYHBhdGhgIGFyZSBhbHNvIHNoYWxsb3cgY29waWVkLiBTaWJsaW5nXG4gKiBvYmplY3RzIGFsb25nIHBhdGggcmV0YWluIHRoZSBzYW1lIGludGVybmFsIGpzIHJlZmVyZW5jZS4gU2luY2UgbmV3XG4gKiBvYmplY3RzIC8gYXJyYXlzIGFyZSBvbmx5IGNyZWF0ZWQgYWxvbmcgYHBhdGhgLCB3ZSBjYW4gdGVzdCBpZiBhbnl0aGluZ1xuICogY2hhbmdlZCBpbiBhIG5lc3RlZCBzdHJ1Y3R1cmUgYnkgY29tcGFyaW5nIHRoZSBvYmplY3QncyByZWZlcmVuY2UgaW5cbiAqIHRoZSBvbGQgYW5kIG5ldyBvYmplY3QsIHNpbWlsYXIgdG8gaG93IHJ1c3NpYW4gZG9sbCBjYWNoZSBpbnZhbGlkYXRpb25cbiAqIHdvcmtzLlxuICpcbiAqIEluIGVhcmxpZXIgdmVyc2lvbnMgb2YgdGhpcyBmdW5jdGlvbiwgd2hpY2ggdXNlZCBjbG9uZURlZXAsIHRoZXJlIHdlcmVcbiAqIGlzc3VlcyB3aGVyZWJ5IHNldHRpbmdzIGEgbmVzdGVkIHZhbHVlIHdvdWxkIG11dGF0ZSB0aGUgcGFyZW50XG4gKiBpbnN0ZWFkIG9mIGNyZWF0aW5nIGEgbmV3IG9iamVjdC4gYGNsb25lYCBhdm9pZHMgdGhhdCBidWcgbWFraW5nIGFcbiAqIHNoYWxsb3cgY29weSBvZiB0aGUgb2JqZWN0cyBhbG9uZyB0aGUgdXBkYXRlIHBhdGhcbiAqIHNvIG5vIG9iamVjdCBpcyBtdXRhdGVkIGluIHBsYWNlLlxuICpcbiAqIEJlZm9yZSBjaGFuZ2luZyB0aGlzIGZ1bmN0aW9uLCBwbGVhc2UgcmVhZCB0aHJvdWdoIHRoZSBmb2xsb3dpbmdcbiAqIGRpc2N1c3Npb25zLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2RldmVsb3BpdC9saW5rc3RhdGVcbiAqIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2phcmVkcGFsbWVyL2Zvcm1pay9wdWxsLzEyM1xuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0SW4ob2JqOiBhbnksIHBhdGg6IHN0cmluZywgdmFsdWU6IGFueSk6IGFueSB7XG4gIGxldCByZXM6IGFueSA9IGNsb25lKG9iaik7IC8vIHRoaXMga2VlcHMgaW5oZXJpdGFuY2Ugd2hlbiBvYmogaXMgYSBjbGFzc1xuICBsZXQgcmVzVmFsOiBhbnkgPSByZXM7XG4gIGxldCBpID0gMDtcbiAgbGV0IHBhdGhBcnJheSA9IHRvUGF0aChwYXRoKTtcblxuICBmb3IgKDsgaSA8IHBhdGhBcnJheS5sZW5ndGggLSAxOyBpKyspIHtcbiAgICBjb25zdCBjdXJyZW50UGF0aDogc3RyaW5nID0gcGF0aEFycmF5W2ldO1xuICAgIGxldCBjdXJyZW50T2JqOiBhbnkgPSBnZXRJbihvYmosIHBhdGhBcnJheS5zbGljZSgwLCBpICsgMSkpO1xuXG4gICAgaWYgKGN1cnJlbnRPYmogJiYgKGlzT2JqZWN0KGN1cnJlbnRPYmopIHx8IEFycmF5LmlzQXJyYXkoY3VycmVudE9iaikpKSB7XG4gICAgICByZXNWYWwgPSByZXNWYWxbY3VycmVudFBhdGhdID0gY2xvbmUoY3VycmVudE9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IG5leHRQYXRoOiBzdHJpbmcgPSBwYXRoQXJyYXlbaSArIDFdO1xuICAgICAgcmVzVmFsID0gcmVzVmFsW2N1cnJlbnRQYXRoXSA9XG4gICAgICAgIGlzSW50ZWdlcihuZXh0UGF0aCkgJiYgTnVtYmVyKG5leHRQYXRoKSA+PSAwID8gW10gOiB7fTtcbiAgICB9XG4gIH1cblxuICAvLyBSZXR1cm4gb3JpZ2luYWwgb2JqZWN0IGlmIG5ldyB2YWx1ZSBpcyB0aGUgc2FtZSBhcyBjdXJyZW50XG4gIGlmICgoaSA9PT0gMCA/IG9iaiA6IHJlc1ZhbClbcGF0aEFycmF5W2ldXSA9PT0gdmFsdWUpIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG5cbiAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHtcbiAgICBkZWxldGUgcmVzVmFsW3BhdGhBcnJheVtpXV07XG4gIH0gZWxzZSB7XG4gICAgcmVzVmFsW3BhdGhBcnJheVtpXV0gPSB2YWx1ZTtcbiAgfVxuXG4gIC8vIElmIHRoZSBwYXRoIGFycmF5IGhhcyBhIHNpbmdsZSBlbGVtZW50LCB0aGUgbG9vcCBkaWQgbm90IHJ1bi5cbiAgLy8gRGVsZXRpbmcgb24gYHJlc1ZhbGAgaGFkIG5vIGVmZmVjdCBpbiB0aGlzIHNjZW5hcmlvLCBzbyB3ZSBkZWxldGUgb24gdGhlIHJlc3VsdCBpbnN0ZWFkLlxuICBpZiAoaSA9PT0gMCAmJiB2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgZGVsZXRlIHJlc1twYXRoQXJyYXlbaV1dO1xuICB9XG5cbiAgcmV0dXJuIHJlcztcbn1cblxuLyoqXG4gKiBSZWN1cnNpdmVseSBhIHNldCB0aGUgc2FtZSB2YWx1ZSBmb3IgYWxsIGtleXMgYW5kIGFycmF5cyBuZXN0ZWQgb2JqZWN0LCBjbG9uaW5nXG4gKiBAcGFyYW0gb2JqZWN0XG4gKiBAcGFyYW0gdmFsdWVcbiAqIEBwYXJhbSB2aXNpdGVkXG4gKiBAcGFyYW0gcmVzcG9uc2VcbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHNldE5lc3RlZE9iamVjdFZhbHVlczxUPihcbiAgb2JqZWN0OiBhbnksXG4gIHZhbHVlOiBhbnksXG4gIHZpc2l0ZWQ6IGFueSA9IG5ldyBXZWFrTWFwKCksXG4gIHJlc3BvbnNlOiBhbnkgPSB7fVxuKTogVCB7XG4gIGZvciAobGV0IGsgb2YgT2JqZWN0LmtleXMob2JqZWN0KSkge1xuICAgIGNvbnN0IHZhbCA9IG9iamVjdFtrXTtcbiAgICBpZiAoaXNPYmplY3QodmFsKSkge1xuICAgICAgaWYgKCF2aXNpdGVkLmdldCh2YWwpKSB7XG4gICAgICAgIHZpc2l0ZWQuc2V0KHZhbCwgdHJ1ZSk7XG4gICAgICAgIC8vIEluIG9yZGVyIHRvIGtlZXAgYXJyYXkgdmFsdWVzIGNvbnNpc3RlbnQgZm9yIGJvdGggZG90IHBhdGggIGFuZFxuICAgICAgICAvLyBicmFja2V0IHN5bnRheCwgd2UgbmVlZCB0byBjaGVjayBpZiB0aGlzIGlzIGFuIGFycmF5IHNvIHRoYXRcbiAgICAgICAgLy8gdGhpcyB3aWxsIG91dHB1dCAgeyBmcmllbmRzOiBbdHJ1ZV0gfSBhbmQgbm90IHsgZnJpZW5kczogeyBcIjBcIjogdHJ1ZSB9IH1cbiAgICAgICAgcmVzcG9uc2Vba10gPSBBcnJheS5pc0FycmF5KHZhbCkgPyBbXSA6IHt9O1xuICAgICAgICBzZXROZXN0ZWRPYmplY3RWYWx1ZXModmFsLCB2YWx1ZSwgdmlzaXRlZCwgcmVzcG9uc2Vba10pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXNwb25zZVtrXSA9IHZhbHVlO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXNwb25zZTtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1pa0NvbnRleHRUeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbmV4cG9ydCBjb25zdCBGb3JtaWtDb250ZXh0ID0gUmVhY3QuY3JlYXRlQ29udGV4dDxGb3JtaWtDb250ZXh0VHlwZTxhbnk+PihcbiAgdW5kZWZpbmVkIGFzIGFueVxuKTtcbmV4cG9ydCBjb25zdCBGb3JtaWtQcm92aWRlciA9IEZvcm1pa0NvbnRleHQuUHJvdmlkZXI7XG5leHBvcnQgY29uc3QgRm9ybWlrQ29uc3VtZXIgPSBGb3JtaWtDb250ZXh0LkNvbnN1bWVyO1xuXG5leHBvcnQgZnVuY3Rpb24gdXNlRm9ybWlrQ29udGV4dDxWYWx1ZXM+KCkge1xuICBjb25zdCBmb3JtaWsgPSBSZWFjdC51c2VDb250ZXh0PEZvcm1pa0NvbnRleHRUeXBlPFZhbHVlcz4+KEZvcm1pa0NvbnRleHQpO1xuXG4gIGludmFyaWFudChcbiAgICAhIWZvcm1payxcbiAgICBgRm9ybWlrIGNvbnRleHQgaXMgdW5kZWZpbmVkLCBwbGVhc2UgdmVyaWZ5IHlvdSBhcmUgY2FsbGluZyB1c2VGb3JtaWtDb250ZXh0KCkgYXMgY2hpbGQgb2YgYSA8Rm9ybWlrPiBjb21wb25lbnQuYFxuICApO1xuXG4gIHJldHVybiBmb3JtaWs7XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgaXNFcXVhbCBmcm9tICdyZWFjdC1mYXN0LWNvbXBhcmUnO1xuaW1wb3J0IGRlZXBtZXJnZSBmcm9tICdkZWVwbWVyZ2UnO1xuaW1wb3J0IGlzUGxhaW5PYmplY3QgZnJvbSAnbG9kYXNoL2lzUGxhaW5PYmplY3QnO1xuaW1wb3J0IHtcbiAgRm9ybWlrQ29uZmlnLFxuICBGb3JtaWtFcnJvcnMsXG4gIEZvcm1pa1N0YXRlLFxuICBGb3JtaWtUb3VjaGVkLFxuICBGb3JtaWtWYWx1ZXMsXG4gIEZvcm1pa1Byb3BzLFxuICBGaWVsZE1ldGFQcm9wcyxcbiAgRmllbGRIZWxwZXJQcm9wcyxcbiAgRmllbGRJbnB1dFByb3BzLFxuICBGb3JtaWtIZWxwZXJzLFxufSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7XG4gIGlzRnVuY3Rpb24sXG4gIGlzU3RyaW5nLFxuICBzZXRJbixcbiAgaXNFbXB0eUNoaWxkcmVuLFxuICBpc1Byb21pc2UsXG4gIHNldE5lc3RlZE9iamVjdFZhbHVlcyxcbiAgZ2V0QWN0aXZlRWxlbWVudCxcbiAgZ2V0SW4sXG4gIGlzT2JqZWN0LFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCB7IEZvcm1pa1Byb3ZpZGVyIH0gZnJvbSAnLi9Gb3JtaWtDb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS13YXJuaW5nJztcbmltcG9ydCB7IExvd1ByaW9yaXR5LCB1bnN0YWJsZV9ydW5XaXRoUHJpb3JpdHkgfSBmcm9tICdzY2hlZHVsZXInO1xuXG50eXBlIEZvcm1pa01lc3NhZ2U8VmFsdWVzPiA9XG4gIHwgeyB0eXBlOiAnU1VCTUlUX0FUVEVNUFQnIH1cbiAgfCB7IHR5cGU6ICdTVUJNSVRfRkFJTFVSRScgfVxuICB8IHsgdHlwZTogJ1NVQk1JVF9TVUNDRVNTJyB9XG4gIHwgeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORyc7IHBheWxvYWQ6IGJvb2xlYW4gfVxuICB8IHsgdHlwZTogJ1NFVF9JU1NVQk1JVFRJTkcnOyBwYXlsb2FkOiBib29sZWFuIH1cbiAgfCB7IHR5cGU6ICdTRVRfVkFMVUVTJzsgcGF5bG9hZDogVmFsdWVzIH1cbiAgfCB7IHR5cGU6ICdTRVRfRklFTERfVkFMVUUnOyBwYXlsb2FkOiB7IGZpZWxkOiBzdHJpbmc7IHZhbHVlPzogYW55IH0gfVxuICB8IHsgdHlwZTogJ1NFVF9GSUVMRF9UT1VDSEVEJzsgcGF5bG9hZDogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZT86IGJvb2xlYW4gfSB9XG4gIHwgeyB0eXBlOiAnU0VUX0ZJRUxEX0VSUk9SJzsgcGF5bG9hZDogeyBmaWVsZDogc3RyaW5nOyB2YWx1ZT86IHN0cmluZyB9IH1cbiAgfCB7IHR5cGU6ICdTRVRfVE9VQ0hFRCc7IHBheWxvYWQ6IEZvcm1pa1RvdWNoZWQ8VmFsdWVzPiB9XG4gIHwgeyB0eXBlOiAnU0VUX0VSUk9SUyc7IHBheWxvYWQ6IEZvcm1pa0Vycm9yczxWYWx1ZXM+IH1cbiAgfCB7IHR5cGU6ICdTRVRfU1RBVFVTJzsgcGF5bG9hZDogYW55IH1cbiAgfCB7XG4gICAgICB0eXBlOiAnU0VUX0ZPUk1JS19TVEFURSc7XG4gICAgICBwYXlsb2FkOiAoczogRm9ybWlrU3RhdGU8VmFsdWVzPikgPT4gRm9ybWlrU3RhdGU8VmFsdWVzPjtcbiAgICB9XG4gIHwge1xuICAgICAgdHlwZTogJ1JFU0VUX0ZPUk0nO1xuICAgICAgcGF5bG9hZDogRm9ybWlrU3RhdGU8VmFsdWVzPjtcbiAgICB9O1xuXG4vLyBTdGF0ZSByZWR1Y2VyXG5mdW5jdGlvbiBmb3JtaWtSZWR1Y2VyPFZhbHVlcz4oXG4gIHN0YXRlOiBGb3JtaWtTdGF0ZTxWYWx1ZXM+LFxuICBtc2c6IEZvcm1pa01lc3NhZ2U8VmFsdWVzPlxuKSB7XG4gIHN3aXRjaCAobXNnLnR5cGUpIHtcbiAgICBjYXNlICdTRVRfVkFMVUVTJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCB2YWx1ZXM6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX1RPVUNIRUQnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIHRvdWNoZWQ6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0VSUk9SUyc6XG4gICAgICBpZiAoaXNFcXVhbChzdGF0ZS5lcnJvcnMsIG1zZy5wYXlsb2FkKSkge1xuICAgICAgICByZXR1cm4gc3RhdGU7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBlcnJvcnM6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX1NUQVRVUyc6XG4gICAgICByZXR1cm4geyAuLi5zdGF0ZSwgc3RhdHVzOiBtc2cucGF5bG9hZCB9O1xuICAgIGNhc2UgJ1NFVF9JU1NVQk1JVFRJTkcnOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIGlzU3VibWl0dGluZzogbXNnLnBheWxvYWQgfTtcbiAgICBjYXNlICdTRVRfSVNWQUxJREFUSU5HJzpcbiAgICAgIHJldHVybiB7IC4uLnN0YXRlLCBpc1ZhbGlkYXRpbmc6IG1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0ZJRUxEX1ZBTFVFJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB2YWx1ZXM6IHNldEluKHN0YXRlLnZhbHVlcywgbXNnLnBheWxvYWQuZmllbGQsIG1zZy5wYXlsb2FkLnZhbHVlKSxcbiAgICAgIH07XG4gICAgY2FzZSAnU0VUX0ZJRUxEX1RPVUNIRUQnOlxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgIHRvdWNoZWQ6IHNldEluKHN0YXRlLnRvdWNoZWQsIG1zZy5wYXlsb2FkLmZpZWxkLCBtc2cucGF5bG9hZC52YWx1ZSksXG4gICAgICB9O1xuICAgIGNhc2UgJ1NFVF9GSUVMRF9FUlJPUic6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgZXJyb3JzOiBzZXRJbihzdGF0ZS5lcnJvcnMsIG1zZy5wYXlsb2FkLmZpZWxkLCBtc2cucGF5bG9hZC52YWx1ZSksXG4gICAgICB9O1xuICAgIGNhc2UgJ1JFU0VUX0ZPUk0nOlxuICAgICAgcmV0dXJuIHsgLi4uc3RhdGUsIC4uLm1zZy5wYXlsb2FkIH07XG4gICAgY2FzZSAnU0VUX0ZPUk1JS19TVEFURSc6XG4gICAgICByZXR1cm4gbXNnLnBheWxvYWQoc3RhdGUpO1xuICAgIGNhc2UgJ1NVQk1JVF9BVFRFTVBUJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICB0b3VjaGVkOiBzZXROZXN0ZWRPYmplY3RWYWx1ZXM8Rm9ybWlrVG91Y2hlZDxWYWx1ZXM+PihcbiAgICAgICAgICBzdGF0ZS52YWx1ZXMsXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApLFxuICAgICAgICBpc1N1Ym1pdHRpbmc6IHRydWUsXG4gICAgICAgIHN1Ym1pdENvdW50OiBzdGF0ZS5zdWJtaXRDb3VudCArIDEsXG4gICAgICB9O1xuICAgIGNhc2UgJ1NVQk1JVF9GQUlMVVJFJzpcbiAgICAgIHJldHVybiB7XG4gICAgICAgIC4uLnN0YXRlLFxuICAgICAgICBpc1N1Ym1pdHRpbmc6IGZhbHNlLFxuICAgICAgfTtcbiAgICBjYXNlICdTVUJNSVRfU1VDQ0VTUyc6XG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5zdGF0ZSxcbiAgICAgICAgaXNTdWJtaXR0aW5nOiBmYWxzZSxcbiAgICAgIH07XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBzdGF0ZTtcbiAgfVxufVxuXG4vLyBJbml0aWFsIGVtcHR5IHN0YXRlcyAvLyBvYmplY3RzXG5jb25zdCBlbXB0eUVycm9yczogRm9ybWlrRXJyb3JzPHVua25vd24+ID0ge307XG5jb25zdCBlbXB0eVRvdWNoZWQ6IEZvcm1pa1RvdWNoZWQ8dW5rbm93bj4gPSB7fTtcblxuLy8gVGhpcyBpcyBhbiBvYmplY3QgdGhhdCBjb250YWlucyBhIG1hcCBvZiBhbGwgcmVnaXN0ZXJlZCBmaWVsZHNcbi8vIGFuZCB0aGVpciB2YWxpZGF0ZSBmdW5jdGlvbnNcbmludGVyZmFjZSBGaWVsZFJlZ2lzdHJ5IHtcbiAgW2ZpZWxkOiBzdHJpbmddOiB7XG4gICAgdmFsaWRhdGU6ICh2YWx1ZTogYW55KSA9PiBzdHJpbmcgfCBQcm9taXNlPHN0cmluZz4gfCB1bmRlZmluZWQ7XG4gIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB1c2VGb3JtaWs8VmFsdWVzIGV4dGVuZHMgRm9ybWlrVmFsdWVzID0gRm9ybWlrVmFsdWVzPih7XG4gIHZhbGlkYXRlT25DaGFuZ2UgPSB0cnVlLFxuICB2YWxpZGF0ZU9uQmx1ciA9IHRydWUsXG4gIHZhbGlkYXRlT25Nb3VudCA9IGZhbHNlLFxuICBpc0luaXRpYWxWYWxpZCxcbiAgZW5hYmxlUmVpbml0aWFsaXplID0gZmFsc2UsXG4gIG9uU3VibWl0LFxuICAuLi5yZXN0XG59OiBGb3JtaWtDb25maWc8VmFsdWVzPikge1xuICBjb25zdCBwcm9wcyA9IHtcbiAgICB2YWxpZGF0ZU9uQ2hhbmdlLFxuICAgIHZhbGlkYXRlT25CbHVyLFxuICAgIHZhbGlkYXRlT25Nb3VudCxcbiAgICBvblN1Ym1pdCxcbiAgICAuLi5yZXN0LFxuICB9O1xuICBjb25zdCBpbml0aWFsVmFsdWVzID0gUmVhY3QudXNlUmVmKHByb3BzLmluaXRpYWxWYWx1ZXMpO1xuICBjb25zdCBpbml0aWFsRXJyb3JzID0gUmVhY3QudXNlUmVmKHByb3BzLmluaXRpYWxFcnJvcnMgfHwgZW1wdHlFcnJvcnMpO1xuICBjb25zdCBpbml0aWFsVG91Y2hlZCA9IFJlYWN0LnVzZVJlZihwcm9wcy5pbml0aWFsVG91Y2hlZCB8fCBlbXB0eVRvdWNoZWQpO1xuICBjb25zdCBpbml0aWFsU3RhdHVzID0gUmVhY3QudXNlUmVmKHByb3BzLmluaXRpYWxTdGF0dXMpO1xuICBjb25zdCBpc01vdW50ZWQgPSBSZWFjdC51c2VSZWY8Ym9vbGVhbj4oZmFsc2UpO1xuICBjb25zdCBmaWVsZFJlZ2lzdHJ5ID0gUmVhY3QudXNlUmVmPEZpZWxkUmVnaXN0cnk+KHt9KTtcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICB0eXBlb2YgaXNJbml0aWFsVmFsaWQgPT09ICd1bmRlZmluZWQnLFxuICAgICAgICAnaXNJbml0aWFsVmFsaWQgaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBGb3JtaWsuIFBsZWFzZSB1c2UgaW5pdGlhbEVycm9ycyBvciB2YWxpZGF0ZU9uTW91bnQgaW5zdGVhZC4nXG4gICAgICApO1xuICAgIH1cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcbiAgfSwgW10pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaXNNb3VudGVkLmN1cnJlbnQgPSB0cnVlO1xuXG4gICAgcmV0dXJuICgpID0+IHtcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID0gZmFsc2U7XG4gICAgfTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IFtzdGF0ZSwgZGlzcGF0Y2hdID0gUmVhY3QudXNlUmVkdWNlcjxcbiAgICBSZWFjdC5SZWR1Y2VyPEZvcm1pa1N0YXRlPFZhbHVlcz4sIEZvcm1pa01lc3NhZ2U8VmFsdWVzPj5cbiAgPihmb3JtaWtSZWR1Y2VyLCB7XG4gICAgdmFsdWVzOiBwcm9wcy5pbml0aWFsVmFsdWVzLFxuICAgIGVycm9yczogcHJvcHMuaW5pdGlhbEVycm9ycyB8fCBlbXB0eUVycm9ycyxcbiAgICB0b3VjaGVkOiBwcm9wcy5pbml0aWFsVG91Y2hlZCB8fCBlbXB0eVRvdWNoZWQsXG4gICAgc3RhdHVzOiBwcm9wcy5pbml0aWFsU3RhdHVzLFxuICAgIGlzU3VibWl0dGluZzogZmFsc2UsXG4gICAgaXNWYWxpZGF0aW5nOiBmYWxzZSxcbiAgICBzdWJtaXRDb3VudDogMCxcbiAgfSk7XG5cbiAgY29uc3QgcnVuVmFsaWRhdGVIYW5kbGVyID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzLCBmaWVsZD86IHN0cmluZyk6IFByb21pc2U8Rm9ybWlrRXJyb3JzPFZhbHVlcz4+ID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGNvbnN0IG1heWJlUHJvbWlzZWRFcnJvcnMgPSAocHJvcHMudmFsaWRhdGUgYXMgYW55KSh2YWx1ZXMsIGZpZWxkKTtcbiAgICAgICAgaWYgKG1heWJlUHJvbWlzZWRFcnJvcnMgPT0gbnVsbCkge1xuICAgICAgICAgIC8vIHVzZSBsb29zZSBudWxsIGNoZWNrIGhlcmUgb24gcHVycG9zZVxuICAgICAgICAgIHJlc29sdmUoZW1wdHlFcnJvcnMpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2VkRXJyb3JzKSkge1xuICAgICAgICAgIChtYXliZVByb21pc2VkRXJyb3JzIGFzIFByb21pc2U8YW55PikudGhlbihcbiAgICAgICAgICAgIGVycm9ycyA9PiB7XG4gICAgICAgICAgICAgIHJlc29sdmUoZXJyb3JzIHx8IGVtcHR5RXJyb3JzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhY3R1YWxFeGNlcHRpb24gPT4ge1xuICAgICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICAgIGBXYXJuaW5nOiBBbiB1bmhhbmRsZWQgZXJyb3Igd2FzIGNhdWdodCBkdXJpbmcgdmFsaWRhdGlvbiBpbiA8Rm9ybWlrIHZhbGlkYXRlIC8+YCxcbiAgICAgICAgICAgICAgICAgIGFjdHVhbEV4Y2VwdGlvblxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZWplY3QoYWN0dWFsRXhjZXB0aW9uKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUobWF5YmVQcm9taXNlZEVycm9ycyk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG4gICAgW3Byb3BzLnZhbGlkYXRlXVxuICApO1xuXG4gIC8qKlxuICAgKiBSdW4gdmFsaWRhdGlvbiBhZ2FpbnN0IGEgWXVwIHNjaGVtYSBhbmQgb3B0aW9uYWxseSBydW4gYSBmdW5jdGlvbiBpZiBzdWNjZXNzZnVsXG4gICAqL1xuICBjb25zdCBydW5WYWxpZGF0aW9uU2NoZW1hID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzLCBmaWVsZD86IHN0cmluZyk6IFByb21pc2U8Rm9ybWlrRXJyb3JzPFZhbHVlcz4+ID0+IHtcbiAgICAgIGNvbnN0IHZhbGlkYXRpb25TY2hlbWEgPSBwcm9wcy52YWxpZGF0aW9uU2NoZW1hO1xuICAgICAgY29uc3Qgc2NoZW1hID0gaXNGdW5jdGlvbih2YWxpZGF0aW9uU2NoZW1hKVxuICAgICAgICA/IHZhbGlkYXRpb25TY2hlbWEoZmllbGQpXG4gICAgICAgIDogdmFsaWRhdGlvblNjaGVtYTtcbiAgICAgIGNvbnN0IHByb21pc2UgPVxuICAgICAgICBmaWVsZCAmJiBzY2hlbWEudmFsaWRhdGVBdFxuICAgICAgICAgID8gc2NoZW1hLnZhbGlkYXRlQXQoZmllbGQsIHZhbHVlcylcbiAgICAgICAgICA6IHZhbGlkYXRlWXVwU2NoZW1hKHZhbHVlcywgc2NoZW1hKTtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIHByb21pc2UudGhlbihcbiAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICByZXNvbHZlKGVtcHR5RXJyb3JzKTtcbiAgICAgICAgICB9LFxuICAgICAgICAgIChlcnI6IGFueSkgPT4ge1xuICAgICAgICAgICAgLy8gWXVwIHdpbGwgdGhyb3cgYSB2YWxpZGF0aW9uIGVycm9yIGlmIHZhbGlkYXRpb24gZmFpbHMuIFdlIGNhdGNoIHRob3NlIGFuZFxuICAgICAgICAgICAgLy8gcmVzb2x2ZSB0aGVtIGludG8gRm9ybWlrIGVycm9ycy4gV2UgY2FuIHNuaWZmIGlmIHNvbWV0aGluZyBpcyBhIFl1cCBlcnJvclxuICAgICAgICAgICAgLy8gYnkgY2hlY2tpbmcgZXJyb3IubmFtZS5cbiAgICAgICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVuc2UveXVwI3ZhbGlkYXRpb25lcnJvcmVycm9ycy1zdHJpbmctLWFycmF5c3RyaW5nLXZhbHVlLWFueS1wYXRoLXN0cmluZ1xuICAgICAgICAgICAgaWYgKGVyci5uYW1lID09PSAnVmFsaWRhdGlvbkVycm9yJykge1xuICAgICAgICAgICAgICByZXNvbHZlKHl1cFRvRm9ybUVycm9ycyhlcnIpKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIC8vIFdlIHRocm93IGFueSBvdGhlciBlcnJvcnNcbiAgICAgICAgICAgICAgaWYgKHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbicpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgICAgICAgICBgV2FybmluZzogQW4gdW5oYW5kbGVkIGVycm9yIHdhcyBjYXVnaHQgZHVyaW5nIHZhbGlkYXRpb24gaW4gPEZvcm1payB2YWxpZGF0aW9uU2NoZW1hIC8+YCxcbiAgICAgICAgICAgICAgICAgIGVyclxuICAgICAgICAgICAgICAgICk7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICByZWplY3QoZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICk7XG4gICAgICB9KTtcbiAgICB9LFxuICAgIFtwcm9wcy52YWxpZGF0aW9uU2NoZW1hXVxuICApO1xuXG4gIGNvbnN0IHJ1blNpbmdsZUZpZWxkTGV2ZWxWYWxpZGF0aW9uID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGZpZWxkOiBzdHJpbmcsIHZhbHVlOiB2b2lkIHwgc3RyaW5nKTogUHJvbWlzZTxzdHJpbmc+ID0+IHtcbiAgICAgIHJldHVybiBuZXcgUHJvbWlzZShyZXNvbHZlID0+XG4gICAgICAgIHJlc29sdmUoZmllbGRSZWdpc3RyeS5jdXJyZW50W2ZpZWxkXS52YWxpZGF0ZSh2YWx1ZSkpXG4gICAgICApO1xuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBydW5GaWVsZExldmVsVmFsaWRhdGlvbnMgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMpOiBQcm9taXNlPEZvcm1pa0Vycm9yczxWYWx1ZXM+PiA9PiB7XG4gICAgICBjb25zdCBmaWVsZEtleXNXaXRoVmFsaWRhdGlvbjogc3RyaW5nW10gPSBPYmplY3Qua2V5cyhcbiAgICAgICAgZmllbGRSZWdpc3RyeS5jdXJyZW50XG4gICAgICApLmZpbHRlcihmID0+IGlzRnVuY3Rpb24oZmllbGRSZWdpc3RyeS5jdXJyZW50W2ZdLnZhbGlkYXRlKSk7XG5cbiAgICAgIC8vIENvbnN0cnVjdCBhbiBhcnJheSB3aXRoIGFsbCBvZiB0aGUgZmllbGQgdmFsaWRhdGlvbiBmdW5jdGlvbnNcbiAgICAgIGNvbnN0IGZpZWxkVmFsaWRhdGlvbnM6IFByb21pc2U8c3RyaW5nPltdID1cbiAgICAgICAgZmllbGRLZXlzV2l0aFZhbGlkYXRpb24ubGVuZ3RoID4gMFxuICAgICAgICAgID8gZmllbGRLZXlzV2l0aFZhbGlkYXRpb24ubWFwKGYgPT5cbiAgICAgICAgICAgICAgcnVuU2luZ2xlRmllbGRMZXZlbFZhbGlkYXRpb24oZiwgZ2V0SW4odmFsdWVzLCBmKSlcbiAgICAgICAgICAgIClcbiAgICAgICAgICA6IFtQcm9taXNlLnJlc29sdmUoJ0RPX05PVF9ERUxFVEVfWU9VX1dJTExfQkVfRklSRUQnKV07IC8vIHVzZSBzcGVjaWFsIGNhc2UgOylcblxuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKGZpZWxkVmFsaWRhdGlvbnMpLnRoZW4oKGZpZWxkRXJyb3JzTGlzdDogc3RyaW5nW10pID0+XG4gICAgICAgIGZpZWxkRXJyb3JzTGlzdC5yZWR1Y2UoKHByZXYsIGN1cnIsIGluZGV4KSA9PiB7XG4gICAgICAgICAgaWYgKGN1cnIgPT09ICdET19OT1RfREVMRVRFX1lPVV9XSUxMX0JFX0ZJUkVEJykge1xuICAgICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChjdXJyKSB7XG4gICAgICAgICAgICBwcmV2ID0gc2V0SW4ocHJldiwgZmllbGRLZXlzV2l0aFZhbGlkYXRpb25baW5kZXhdLCBjdXJyKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuIHByZXY7XG4gICAgICAgIH0sIHt9KVxuICAgICAgKTtcbiAgICB9LFxuICAgIFtydW5TaW5nbGVGaWVsZExldmVsVmFsaWRhdGlvbl1cbiAgKTtcblxuICAvLyBSdW4gYWxsIHZhbGlkYXRpb25zIGFuZCByZXR1cm4gdGhlIHJlc3VsdFxuICBjb25zdCBydW5BbGxWYWxpZGF0aW9ucyA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgICh2YWx1ZXM6IFZhbHVlcykgPT4ge1xuICAgICAgcmV0dXJuIFByb21pc2UuYWxsKFtcbiAgICAgICAgcnVuRmllbGRMZXZlbFZhbGlkYXRpb25zKHZhbHVlcyksXG4gICAgICAgIHByb3BzLnZhbGlkYXRpb25TY2hlbWEgPyBydW5WYWxpZGF0aW9uU2NoZW1hKHZhbHVlcykgOiB7fSxcbiAgICAgICAgcHJvcHMudmFsaWRhdGUgPyBydW5WYWxpZGF0ZUhhbmRsZXIodmFsdWVzKSA6IHt9LFxuICAgICAgXSkudGhlbigoW2ZpZWxkRXJyb3JzLCBzY2hlbWFFcnJvcnMsIHZhbGlkYXRlRXJyb3JzXSkgPT4ge1xuICAgICAgICBjb25zdCBjb21iaW5lZEVycm9ycyA9IGRlZXBtZXJnZS5hbGw8Rm9ybWlrRXJyb3JzPFZhbHVlcz4+KFxuICAgICAgICAgIFtmaWVsZEVycm9ycywgc2NoZW1hRXJyb3JzLCB2YWxpZGF0ZUVycm9yc10sXG4gICAgICAgICAgeyBhcnJheU1lcmdlIH1cbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIGNvbWJpbmVkRXJyb3JzO1xuICAgICAgfSk7XG4gICAgfSxcbiAgICBbXG4gICAgICBwcm9wcy52YWxpZGF0ZSxcbiAgICAgIHByb3BzLnZhbGlkYXRpb25TY2hlbWEsXG4gICAgICBydW5GaWVsZExldmVsVmFsaWRhdGlvbnMsXG4gICAgICBydW5WYWxpZGF0ZUhhbmRsZXIsXG4gICAgICBydW5WYWxpZGF0aW9uU2NoZW1hLFxuICAgIF1cbiAgKTtcblxuICAvLyBSdW4gdmFsaWRhdGlvbnMgYW5kIGRpc3BhdGNoaW5nIHRoZSByZXN1bHQgYXMgbG93LXByaW9yaXR5IHZpYSByQUYuXG4gIC8vXG4gIC8vIFRoZSB0aGlua2luZyBpcyB0aGF0IHZhbGlkYXRpb24gYXMgYSByZXN1bHQgb2Ygb25DaGFuZ2UgYW5kIG9uQmx1clxuICAvLyBzaG91bGQgbmV2ZXIgYmxvY2sgdXNlciBpbnB1dC4gTm90ZTogVGhpcyBtZXRob2Qgc2hvdWxkIG5ldmVyIGJlIGNhbGxlZFxuICAvLyBkdXJpbmcgdGhlIHN1Ym1pc3Npb24gcGhhc2UgYmVjYXVzZSB2YWxpZGF0aW9uIHByaW9yIHRvIHN1Ym1pc3Npb25cbiAgLy8gaXMgYWN0YXVsbHkgaGlnaC1wcmlvcml0eSBzaW5jZSB3ZSBhYnNvbHV0ZWx5IG5lZWQgdG8gZ3VhcmFudGVlIHRoZVxuICAvLyBmb3JtIGlzIHZhbGlkIGJlZm9yZSBleGVjdXRpbmcgcHJvcHMub25TdWJtaXQuXG4gIGNvbnN0IHZhbGlkYXRlRm9ybVdpdGhMb3dQcmlvcml0eSA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKHZhbHVlczogVmFsdWVzID0gc3RhdGUudmFsdWVzKSA9PiB7XG4gICAgICByZXR1cm4gdW5zdGFibGVfcnVuV2l0aFByaW9yaXR5KExvd1ByaW9yaXR5LCAoKSA9PiB7XG4gICAgICAgIHJldHVybiBydW5BbGxWYWxpZGF0aW9ucyh2YWx1ZXMpXG4gICAgICAgICAgLnRoZW4oY29tYmluZWRFcnJvcnMgPT4ge1xuICAgICAgICAgICAgaWYgKCEhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0VSUk9SUycsIHBheWxvYWQ6IGNvbWJpbmVkRXJyb3JzIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGNvbWJpbmVkRXJyb3JzO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKGFjdHVhbEV4Y2VwdGlvbiA9PiB7XG4gICAgICAgICAgICBpZiAocHJvY2Vzcy5lbnYuTk9ERV9FTlYgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgICAgICAgICAvLyBVc2VycyBjYW4gdGhyb3cgZHVyaW5nIHZhbGlkYXRlLCBob3dldmVyIHRoZXkgaGF2ZSBubyB3YXkgb2YgaGFuZGxpbmcgdGhlaXIgZXJyb3Igb24gdG91Y2ggLyBibHVyLiBJbiBsb3cgcHJpb3JpdHksIHdlIG5lZWQgdG8gaGFuZGxlIGl0XG4gICAgICAgICAgICAgIGNvbnNvbGUud2FybihcbiAgICAgICAgICAgICAgICBgV2FybmluZzogQW4gdW5oYW5kbGVkIGVycm9yIHdhcyBjYXVnaHQgZHVyaW5nIGxvdyBwcmlvcml0eSB2YWxpZGF0aW9uIGluIDxGb3JtaWsgdmFsaWRhdGUgLz5gLFxuICAgICAgICAgICAgICAgIGFjdHVhbEV4Y2VwdGlvblxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xuXG4gIC8vIFJ1biBhbGwgdmFsaWRhdGlvbnMgbWV0aG9kcyBhbmQgdXBkYXRlIHN0YXRlIGFjY29yZGluZ2x5XG4gIGNvbnN0IHZhbGlkYXRlRm9ybVdpdGhIaWdoUHJpb3JpdHkgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgICh2YWx1ZXM6IFZhbHVlcyA9IHN0YXRlLnZhbHVlcykgPT4ge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IHRydWUgfSk7XG4gICAgICByZXR1cm4gcnVuQWxsVmFsaWRhdGlvbnModmFsdWVzKS50aGVuKGNvbWJpbmVkRXJyb3JzID0+IHtcbiAgICAgICAgaWYgKCEhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNWQUxJREFUSU5HJywgcGF5bG9hZDogZmFsc2UgfSk7XG4gICAgICAgICAgaWYgKCFpc0VxdWFsKHN0YXRlLmVycm9ycywgY29tYmluZWRFcnJvcnMpKSB7XG4gICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVJST1JTJywgcGF5bG9hZDogY29tYmluZWRFcnJvcnMgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBjb21iaW5lZEVycm9ycztcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICh2YWxpZGF0ZU9uTW91bnQgJiYgaXNNb3VudGVkLmN1cnJlbnQgPT09IHRydWUpIHtcbiAgICAgIHZhbGlkYXRlRm9ybVdpdGhMb3dQcmlvcml0eShpbml0aWFsVmFsdWVzLmN1cnJlbnQpO1xuICAgIH1cbiAgfSwgW3ZhbGlkYXRlT25Nb3VudCwgdmFsaWRhdGVGb3JtV2l0aExvd1ByaW9yaXR5XSk7XG5cbiAgY29uc3QgcmVzZXRGb3JtID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5leHRTdGF0ZT86IFBhcnRpYWw8Rm9ybWlrU3RhdGU8VmFsdWVzPj4pID0+IHtcbiAgICAgIGNvbnN0IHZhbHVlcyA9XG4gICAgICAgIG5leHRTdGF0ZSAmJiBuZXh0U3RhdGUudmFsdWVzXG4gICAgICAgICAgPyBuZXh0U3RhdGUudmFsdWVzXG4gICAgICAgICAgOiBpbml0aWFsVmFsdWVzLmN1cnJlbnQ7XG4gICAgICBjb25zdCBlcnJvcnMgPVxuICAgICAgICBuZXh0U3RhdGUgJiYgbmV4dFN0YXRlLmVycm9yc1xuICAgICAgICAgID8gbmV4dFN0YXRlLmVycm9yc1xuICAgICAgICAgIDogaW5pdGlhbEVycm9ycy5jdXJyZW50XG4gICAgICAgICAgPyBpbml0aWFsRXJyb3JzLmN1cnJlbnRcbiAgICAgICAgICA6IHByb3BzLmluaXRpYWxFcnJvcnMgfHwge307XG4gICAgICBjb25zdCB0b3VjaGVkID1cbiAgICAgICAgbmV4dFN0YXRlICYmIG5leHRTdGF0ZS50b3VjaGVkXG4gICAgICAgICAgPyBuZXh0U3RhdGUudG91Y2hlZFxuICAgICAgICAgIDogaW5pdGlhbFRvdWNoZWQuY3VycmVudFxuICAgICAgICAgID8gaW5pdGlhbFRvdWNoZWQuY3VycmVudFxuICAgICAgICAgIDogcHJvcHMuaW5pdGlhbFRvdWNoZWQgfHwge307XG4gICAgICBjb25zdCBzdGF0dXMgPVxuICAgICAgICBuZXh0U3RhdGUgJiYgbmV4dFN0YXRlLnN0YXR1c1xuICAgICAgICAgID8gbmV4dFN0YXRlLnN0YXR1c1xuICAgICAgICAgIDogaW5pdGlhbFN0YXR1cy5jdXJyZW50XG4gICAgICAgICAgPyBpbml0aWFsU3RhdHVzLmN1cnJlbnRcbiAgICAgICAgICA6IHByb3BzLmluaXRpYWxTdGF0dXM7XG4gICAgICBpbml0aWFsVmFsdWVzLmN1cnJlbnQgPSB2YWx1ZXM7XG4gICAgICBpbml0aWFsRXJyb3JzLmN1cnJlbnQgPSBlcnJvcnM7XG4gICAgICBpbml0aWFsVG91Y2hlZC5jdXJyZW50ID0gdG91Y2hlZDtcbiAgICAgIGluaXRpYWxTdGF0dXMuY3VycmVudCA9IHN0YXR1cztcblxuICAgICAgY29uc3QgZGlzcGF0Y2hGbiA9ICgpID0+IHtcbiAgICAgICAgZGlzcGF0Y2goe1xuICAgICAgICAgIHR5cGU6ICdSRVNFVF9GT1JNJyxcbiAgICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgICBpc1N1Ym1pdHRpbmc6ICEhbmV4dFN0YXRlICYmICEhbmV4dFN0YXRlLmlzU3VibWl0dGluZyxcbiAgICAgICAgICAgIGVycm9ycyxcbiAgICAgICAgICAgIHRvdWNoZWQsXG4gICAgICAgICAgICBzdGF0dXMsXG4gICAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgICAgICBpc1ZhbGlkYXRpbmc6ICEhbmV4dFN0YXRlICYmICEhbmV4dFN0YXRlLmlzVmFsaWRhdGluZyxcbiAgICAgICAgICAgIHN1Ym1pdENvdW50OlxuICAgICAgICAgICAgICAhIW5leHRTdGF0ZSAmJlxuICAgICAgICAgICAgICAhIW5leHRTdGF0ZS5zdWJtaXRDb3VudCAmJlxuICAgICAgICAgICAgICB0eXBlb2YgbmV4dFN0YXRlLnN1Ym1pdENvdW50ID09PSAnbnVtYmVyJ1xuICAgICAgICAgICAgICAgID8gbmV4dFN0YXRlLnN1Ym1pdENvdW50XG4gICAgICAgICAgICAgICAgOiAwLFxuICAgICAgICAgIH0sXG4gICAgICAgIH0pO1xuICAgICAgfTtcblxuICAgICAgaWYgKHByb3BzLm9uUmVzZXQpIHtcbiAgICAgICAgY29uc3QgbWF5YmVQcm9taXNlZE9uUmVzZXQgPSAocHJvcHMub25SZXNldCBhcyBhbnkpKFxuICAgICAgICAgIHN0YXRlLnZhbHVlcyxcbiAgICAgICAgICBpbXBlcmF0aXZlTWV0aG9kc1xuICAgICAgICApO1xuXG4gICAgICAgIGlmIChpc1Byb21pc2UobWF5YmVQcm9taXNlZE9uUmVzZXQpKSB7XG4gICAgICAgICAgKG1heWJlUHJvbWlzZWRPblJlc2V0IGFzIFByb21pc2U8YW55PikudGhlbihkaXNwYXRjaEZuKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkaXNwYXRjaEZuKCk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRpc3BhdGNoRm4oKTtcbiAgICAgIH1cbiAgICB9LFxuICAgIFtwcm9wcy5pbml0aWFsRXJyb3JzLCBwcm9wcy5pbml0aWFsU3RhdHVzLCBwcm9wcy5pbml0aWFsVG91Y2hlZF1cbiAgKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmICghZW5hYmxlUmVpbml0aWFsaXplKSB7XG4gICAgICBpbml0aWFsVmFsdWVzLmN1cnJlbnQgPSBwcm9wcy5pbml0aWFsVmFsdWVzO1xuICAgIH1cbiAgfSwgW2VuYWJsZVJlaW5pdGlhbGl6ZSwgcHJvcHMuaW5pdGlhbFZhbHVlc10pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZW5hYmxlUmVpbml0aWFsaXplICYmXG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9PT0gdHJ1ZSAmJlxuICAgICAgIWlzRXF1YWwoaW5pdGlhbFZhbHVlcy5jdXJyZW50LCBwcm9wcy5pbml0aWFsVmFsdWVzKVxuICAgICkge1xuICAgICAgaW5pdGlhbFZhbHVlcy5jdXJyZW50ID0gcHJvcHMuaW5pdGlhbFZhbHVlcztcbiAgICAgIHJlc2V0Rm9ybSgpO1xuICAgIH1cbiAgfSwgW2VuYWJsZVJlaW5pdGlhbGl6ZSwgcHJvcHMuaW5pdGlhbFZhbHVlcywgcmVzZXRGb3JtXSk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoXG4gICAgICBlbmFibGVSZWluaXRpYWxpemUgJiZcbiAgICAgIGlzTW91bnRlZC5jdXJyZW50ID09PSB0cnVlICYmXG4gICAgICAhaXNFcXVhbChpbml0aWFsRXJyb3JzLmN1cnJlbnQsIHByb3BzLmluaXRpYWxFcnJvcnMpXG4gICAgKSB7XG4gICAgICBpbml0aWFsRXJyb3JzLmN1cnJlbnQgPSBwcm9wcy5pbml0aWFsRXJyb3JzIHx8IGVtcHR5RXJyb3JzO1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU0VUX0VSUk9SUycsXG4gICAgICAgIHBheWxvYWQ6IHByb3BzLmluaXRpYWxFcnJvcnMgfHwgZW1wdHlFcnJvcnMsXG4gICAgICB9KTtcbiAgICB9XG4gIH0sIFtlbmFibGVSZWluaXRpYWxpemUsIHByb3BzLmluaXRpYWxFcnJvcnNdKTtcblxuICBSZWFjdC51c2VFZmZlY3QoKCkgPT4ge1xuICAgIGlmIChcbiAgICAgIGVuYWJsZVJlaW5pdGlhbGl6ZSAmJlxuICAgICAgaXNNb3VudGVkLmN1cnJlbnQgPT09IHRydWUgJiZcbiAgICAgICFpc0VxdWFsKGluaXRpYWxUb3VjaGVkLmN1cnJlbnQsIHByb3BzLmluaXRpYWxUb3VjaGVkKVxuICAgICkge1xuICAgICAgaW5pdGlhbFRvdWNoZWQuY3VycmVudCA9IHByb3BzLmluaXRpYWxUb3VjaGVkIHx8IGVtcHR5VG91Y2hlZDtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9UT1VDSEVEJyxcbiAgICAgICAgcGF5bG9hZDogcHJvcHMuaW5pdGlhbFRvdWNoZWQgfHwgZW1wdHlUb3VjaGVkLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZW5hYmxlUmVpbml0aWFsaXplLCBwcm9wcy5pbml0aWFsVG91Y2hlZF0pO1xuXG4gIFJlYWN0LnVzZUVmZmVjdCgoKSA9PiB7XG4gICAgaWYgKFxuICAgICAgZW5hYmxlUmVpbml0aWFsaXplICYmXG4gICAgICBpc01vdW50ZWQuY3VycmVudCA9PT0gdHJ1ZSAmJlxuICAgICAgIWlzRXF1YWwoaW5pdGlhbFN0YXR1cy5jdXJyZW50LCBwcm9wcy5pbml0aWFsU3RhdHVzKVxuICAgICkge1xuICAgICAgaW5pdGlhbFN0YXR1cy5jdXJyZW50ID0gcHJvcHMuaW5pdGlhbFN0YXR1cztcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9TVEFUVVMnLFxuICAgICAgICBwYXlsb2FkOiBwcm9wcy5pbml0aWFsU3RhdHVzLFxuICAgICAgfSk7XG4gICAgfVxuICB9LCBbZW5hYmxlUmVpbml0aWFsaXplLCBwcm9wcy5pbml0aWFsU3RhdHVzLCBwcm9wcy5pbml0aWFsVG91Y2hlZF0pO1xuXG4gIGNvbnN0IHZhbGlkYXRlRmllbGQgPSB1c2VFdmVudENhbGxiYWNrKChuYW1lOiBzdHJpbmcpID0+IHtcbiAgICAvLyBUaGlzIHdpbGwgZWZmaWNpZW50bHkgdmFsaWRhdGUgYSBzaW5nbGUgZmllbGQgYnkgYXZvaWRpbmcgc3RhdGVcbiAgICAvLyBjaGFuZ2VzIGlmIHRoZSB2YWxpZGF0aW9uIGZ1bmN0aW9uIGlzIHN5bmNocm9ub3VzLiBJdCdzIGRpZmZlcmVudCBmcm9tXG4gICAgLy8gd2hhdCBpcyBjYWxsZWQgd2hlbiB1c2luZyB2YWxpZGF0ZUZvcm0uXG5cbiAgICBpZiAoaXNGdW5jdGlvbihmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbbmFtZV0udmFsaWRhdGUpKSB7XG4gICAgICBjb25zdCB2YWx1ZSA9IGdldEluKHN0YXRlLnZhbHVlcywgbmFtZSk7XG4gICAgICBjb25zdCBtYXliZVByb21pc2UgPSBmaWVsZFJlZ2lzdHJ5LmN1cnJlbnRbbmFtZV0udmFsaWRhdGUodmFsdWUpO1xuICAgICAgaWYgKGlzUHJvbWlzZShtYXliZVByb21pc2UpKSB7XG4gICAgICAgIC8vIE9ubHkgZmxpcCBpc1ZhbGlkYXRpbmcgaWYgdGhlIGZ1bmN0aW9uIGlzIGFzeW5jLlxuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNWQUxJREFUSU5HJywgcGF5bG9hZDogdHJ1ZSB9KTtcbiAgICAgICAgcmV0dXJuIG1heWJlUHJvbWlzZVxuICAgICAgICAgIC50aGVuKCh4OiBhbnkpID0+IHgpXG4gICAgICAgICAgLnRoZW4oKGVycm9yOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9FUlJPUicsXG4gICAgICAgICAgICAgIHBheWxvYWQ6IHsgZmllbGQ6IG5hbWUsIHZhbHVlOiBlcnJvciB9LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNWQUxJREFUSU5HJywgcGF5bG9hZDogZmFsc2UgfSk7XG4gICAgICAgICAgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaCh7XG4gICAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9FUlJPUicsXG4gICAgICAgICAgcGF5bG9hZDoge1xuICAgICAgICAgICAgZmllbGQ6IG5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogbWF5YmVQcm9taXNlIGFzIHN0cmluZyB8IHVuZGVmaW5lZCxcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShtYXliZVByb21pc2UgYXMgc3RyaW5nIHwgdW5kZWZpbmVkKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHByb3BzLnZhbGlkYXRpb25TY2hlbWEpIHtcbiAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9JU1ZBTElEQVRJTkcnLCBwYXlsb2FkOiB0cnVlIH0pO1xuICAgICAgcmV0dXJuIHJ1blZhbGlkYXRpb25TY2hlbWEoc3RhdGUudmFsdWVzLCBuYW1lKVxuICAgICAgICAudGhlbigoeDogYW55KSA9PiB4KVxuICAgICAgICAudGhlbigoZXJyb3I6IGFueSkgPT4ge1xuICAgICAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgICAgIHR5cGU6ICdTRVRfRklFTERfRVJST1InLFxuICAgICAgICAgICAgcGF5bG9hZDogeyBmaWVsZDogbmFtZSwgdmFsdWU6IGVycm9yW25hbWVdIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX0lTVkFMSURBVElORycsIHBheWxvYWQ6IGZhbHNlIH0pO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCk7XG4gIH0pO1xuXG4gIGNvbnN0IHJlZ2lzdGVyRmllbGQgPSBSZWFjdC51c2VDYWxsYmFjaygobmFtZTogc3RyaW5nLCB7IHZhbGlkYXRlIH06IGFueSkgPT4ge1xuICAgIGZpZWxkUmVnaXN0cnkuY3VycmVudFtuYW1lXSA9IHtcbiAgICAgIHZhbGlkYXRlLFxuICAgIH07XG4gIH0sIFtdKTtcblxuICBjb25zdCB1bnJlZ2lzdGVyRmllbGQgPSBSZWFjdC51c2VDYWxsYmFjaygobmFtZTogc3RyaW5nKSA9PiB7XG4gICAgZGVsZXRlIGZpZWxkUmVnaXN0cnkuY3VycmVudFtuYW1lXTtcbiAgfSwgW10pO1xuXG4gIGNvbnN0IHNldFRvdWNoZWQgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgICh0b3VjaGVkOiBGb3JtaWtUb3VjaGVkPFZhbHVlcz4sIHNob3VsZFZhbGlkYXRlPzogYm9vbGVhbikgPT4ge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX1RPVUNIRUQnLCBwYXlsb2FkOiB0b3VjaGVkIH0pO1xuICAgICAgY29uc3Qgd2lsbFZhbGlkYXRlID1cbiAgICAgICAgc2hvdWxkVmFsaWRhdGUgPT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlT25CbHVyIDogc2hvdWxkVmFsaWRhdGU7XG4gICAgICByZXR1cm4gd2lsbFZhbGlkYXRlXG4gICAgICAgID8gdmFsaWRhdGVGb3JtV2l0aExvd1ByaW9yaXR5KHN0YXRlLnZhbHVlcylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3Qgc2V0RXJyb3JzID0gUmVhY3QudXNlQ2FsbGJhY2soKGVycm9yczogRm9ybWlrRXJyb3JzPFZhbHVlcz4pID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRVJST1JTJywgcGF5bG9hZDogZXJyb3JzIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2V0VmFsdWVzID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAodmFsdWVzOiBWYWx1ZXMsIHNob3VsZFZhbGlkYXRlPzogYm9vbGVhbikgPT4ge1xuICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU0VUX1ZBTFVFUycsIHBheWxvYWQ6IHZhbHVlcyB9KTtcbiAgICAgIGNvbnN0IHdpbGxWYWxpZGF0ZSA9XG4gICAgICAgIHNob3VsZFZhbGlkYXRlID09PSB1bmRlZmluZWQgPyB2YWxpZGF0ZU9uQ2hhbmdlIDogc2hvdWxkVmFsaWRhdGU7XG4gICAgICByZXR1cm4gd2lsbFZhbGlkYXRlXG4gICAgICAgID8gdmFsaWRhdGVGb3JtV2l0aExvd1ByaW9yaXR5KHZhbHVlcylcbiAgICAgICAgOiBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB9XG4gICk7XG5cbiAgY29uc3Qgc2V0RmllbGRFcnJvciA9IFJlYWN0LnVzZUNhbGxiYWNrKFxuICAgIChmaWVsZDogc3RyaW5nLCB2YWx1ZTogc3RyaW5nIHwgdW5kZWZpbmVkKSA9PiB7XG4gICAgICBkaXNwYXRjaCh7XG4gICAgICAgIHR5cGU6ICdTRVRfRklFTERfRVJST1InLFxuICAgICAgICBwYXlsb2FkOiB7IGZpZWxkLCB2YWx1ZSB9LFxuICAgICAgfSk7XG4gICAgfSxcbiAgICBbXVxuICApO1xuXG4gIGNvbnN0IHNldEZpZWxkVmFsdWUgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgIChmaWVsZDogc3RyaW5nLCB2YWx1ZTogYW55LCBzaG91bGRWYWxpZGF0ZT86IGJvb2xlYW4pID0+IHtcbiAgICAgIGRpc3BhdGNoKHtcbiAgICAgICAgdHlwZTogJ1NFVF9GSUVMRF9WQUxVRScsXG4gICAgICAgIHBheWxvYWQ6IHtcbiAgICAgICAgICBmaWVsZCxcbiAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgfSxcbiAgICAgIH0pO1xuICAgICAgY29uc3Qgd2lsbFZhbGlkYXRlID1cbiAgICAgICAgc2hvdWxkVmFsaWRhdGUgPT09IHVuZGVmaW5lZCA/IHZhbGlkYXRlT25DaGFuZ2UgOiBzaG91bGRWYWxpZGF0ZTtcbiAgICAgIHJldHVybiB3aWxsVmFsaWRhdGVcbiAgICAgICAgPyB2YWxpZGF0ZUZvcm1XaXRoTG93UHJpb3JpdHkoc2V0SW4oc3RhdGUudmFsdWVzLCBmaWVsZCwgdmFsdWUpKVxuICAgICAgICA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBleGVjdXRlQ2hhbmdlID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGV2ZW50T3JUZXh0VmFsdWU6IHN0cmluZyB8IFJlYWN0LkNoYW5nZUV2ZW50PGFueT4sIG1heWJlUGF0aD86IHN0cmluZykgPT4ge1xuICAgICAgLy8gQnkgZGVmYXVsdCwgYXNzdW1lIHRoYXQgdGhlIGZpcnN0IGFyZ3VtZW50IGlzIGEgc3RyaW5nLiBUaGlzIGFsbG93cyB1cyB0byB1c2VcbiAgICAgIC8vIGhhbmRsZUNoYW5nZSB3aXRoIFJlYWN0IE5hdGl2ZSBhbmQgUmVhY3QgTmF0aXZlIFdlYidzIG9uQ2hhbmdlVGV4dCBwcm9wIHdoaWNoXG4gICAgICAvLyBwcm92aWRlcyBqdXN0IHRoZSB2YWx1ZSBvZiB0aGUgaW5wdXQuXG4gICAgICBsZXQgZmllbGQgPSBtYXliZVBhdGg7XG4gICAgICBsZXQgdmFsID0gZXZlbnRPclRleHRWYWx1ZTtcbiAgICAgIGxldCBwYXJzZWQ7XG4gICAgICAvLyBJZiB0aGUgZmlyc3QgYXJndW1lbnQgaXMgbm90IGEgc3RyaW5nIHRob3VnaCwgaXQgaGFzIHRvIGJlIGEgc3ludGhldGljIFJlYWN0IEV2ZW50IChvciBhIGZha2Ugb25lKSxcbiAgICAgIC8vIHNvIHdlIGhhbmRsZSBsaWtlIHdlIHdvdWxkIGEgbm9ybWFsIEhUTUwgY2hhbmdlIGV2ZW50LlxuICAgICAgaWYgKCFpc1N0cmluZyhldmVudE9yVGV4dFZhbHVlKSkge1xuICAgICAgICAvLyBJZiB3ZSBjYW4sIHBlcnNpc3QgdGhlIGV2ZW50XG4gICAgICAgIC8vIEBzZWUgaHR0cHM6Ly9yZWFjdGpzLm9yZy9kb2NzL2V2ZW50cy5odG1sI2V2ZW50LXBvb2xpbmdcbiAgICAgICAgaWYgKChldmVudE9yVGV4dFZhbHVlIGFzIFJlYWN0LkNoYW5nZUV2ZW50PGFueT4pLnBlcnNpc3QpIHtcbiAgICAgICAgICAoZXZlbnRPclRleHRWYWx1ZSBhcyBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+KS5wZXJzaXN0KCk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFyZ2V0ID0gZXZlbnRPclRleHRWYWx1ZS50YXJnZXRcbiAgICAgICAgICA/IChldmVudE9yVGV4dFZhbHVlIGFzIFJlYWN0LkNoYW5nZUV2ZW50PGFueT4pLnRhcmdldFxuICAgICAgICAgIDogKGV2ZW50T3JUZXh0VmFsdWUgYXMgUmVhY3QuQ2hhbmdlRXZlbnQ8YW55PikuY3VycmVudFRhcmdldDtcblxuICAgICAgICBjb25zdCB7XG4gICAgICAgICAgdHlwZSxcbiAgICAgICAgICBuYW1lLFxuICAgICAgICAgIGlkLFxuICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgIGNoZWNrZWQsXG4gICAgICAgICAgb3V0ZXJIVE1MLFxuICAgICAgICAgIG9wdGlvbnMsXG4gICAgICAgICAgbXVsdGlwbGUsXG4gICAgICAgIH0gPSB0YXJnZXQ7XG5cbiAgICAgICAgZmllbGQgPSBtYXliZVBhdGggPyBtYXliZVBhdGggOiBuYW1lID8gbmFtZSA6IGlkO1xuICAgICAgICBpZiAoIWZpZWxkICYmIF9fREVWX18pIHtcbiAgICAgICAgICB3YXJuQWJvdXRNaXNzaW5nSWRlbnRpZmllcih7XG4gICAgICAgICAgICBodG1sQ29udGVudDogb3V0ZXJIVE1MLFxuICAgICAgICAgICAgZG9jdW1lbnRhdGlvbkFuY2hvckxpbms6ICdoYW5kbGVjaGFuZ2UtZS1yZWFjdGNoYW5nZWV2ZW50YW55LS12b2lkJyxcbiAgICAgICAgICAgIGhhbmRsZXJOYW1lOiAnaGFuZGxlQ2hhbmdlJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB2YWwgPSAvbnVtYmVyfHJhbmdlLy50ZXN0KHR5cGUpXG4gICAgICAgICAgPyAoKHBhcnNlZCA9IHBhcnNlRmxvYXQodmFsdWUpKSwgaXNOYU4ocGFyc2VkKSA/ICcnIDogcGFyc2VkKVxuICAgICAgICAgIDogL2NoZWNrYm94Ly50ZXN0KHR5cGUpIC8vIGNoZWNrYm94ZXNcbiAgICAgICAgICA/IGdldFZhbHVlRm9yQ2hlY2tib3goZ2V0SW4oc3RhdGUudmFsdWVzLCBmaWVsZCEpLCBjaGVja2VkLCB2YWx1ZSlcbiAgICAgICAgICA6ICEhbXVsdGlwbGUgLy8gPHNlbGVjdCBtdWx0aXBsZT5cbiAgICAgICAgICA/IGdldFNlbGVjdGVkVmFsdWVzKG9wdGlvbnMpXG4gICAgICAgICAgOiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKGZpZWxkKSB7XG4gICAgICAgIC8vIFNldCBmb3JtIGZpZWxkcyBieSBuYW1lXG4gICAgICAgIHNldEZpZWxkVmFsdWUoZmllbGQsIHZhbCk7XG4gICAgICB9XG4gICAgfSxcbiAgICBbc2V0RmllbGRWYWx1ZSwgc3RhdGUudmFsdWVzXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUNoYW5nZSA9IHVzZUV2ZW50Q2FsbGJhY2soXG4gICAgKFxuICAgICAgZXZlbnRPclBhdGg6IHN0cmluZyB8IFJlYWN0LkNoYW5nZUV2ZW50PGFueT5cbiAgICApOiB2b2lkIHwgKChldmVudE9yVGV4dFZhbHVlOiBzdHJpbmcgfCBSZWFjdC5DaGFuZ2VFdmVudDxhbnk+KSA9PiB2b2lkKSA9PiB7XG4gICAgICBpZiAoaXNTdHJpbmcoZXZlbnRPclBhdGgpKSB7XG4gICAgICAgIHJldHVybiBldmVudCA9PiBleGVjdXRlQ2hhbmdlKGV2ZW50LCBldmVudE9yUGF0aCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBleGVjdXRlQ2hhbmdlKGV2ZW50T3JQYXRoKTtcbiAgICAgIH1cbiAgICB9XG4gICk7XG5cbiAgY29uc3Qgc2V0RmllbGRUb3VjaGVkID0gdXNlRXZlbnRDYWxsYmFjayhcbiAgICAoZmllbGQ6IHN0cmluZywgdG91Y2hlZDogYm9vbGVhbiA9IHRydWUsIHNob3VsZFZhbGlkYXRlPzogYm9vbGVhbikgPT4ge1xuICAgICAgZGlzcGF0Y2goe1xuICAgICAgICB0eXBlOiAnU0VUX0ZJRUxEX1RPVUNIRUQnLFxuICAgICAgICBwYXlsb2FkOiB7XG4gICAgICAgICAgZmllbGQsXG4gICAgICAgICAgdmFsdWU6IHRvdWNoZWQsXG4gICAgICAgIH0sXG4gICAgICB9KTtcbiAgICAgIGNvbnN0IHdpbGxWYWxpZGF0ZSA9XG4gICAgICAgIHNob3VsZFZhbGlkYXRlID09PSB1bmRlZmluZWQgPyB2YWxpZGF0ZU9uQmx1ciA6IHNob3VsZFZhbGlkYXRlO1xuICAgICAgcmV0dXJuIHdpbGxWYWxpZGF0ZVxuICAgICAgICA/IHZhbGlkYXRlRm9ybVdpdGhMb3dQcmlvcml0eShzdGF0ZS52YWx1ZXMpXG4gICAgICAgIDogUHJvbWlzZS5yZXNvbHZlKCk7XG4gICAgfVxuICApO1xuXG4gIGNvbnN0IGV4ZWN1dGVCbHVyID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKGU6IGFueSwgcGF0aD86IHN0cmluZykgPT4ge1xuICAgICAgaWYgKGUucGVyc2lzdCkge1xuICAgICAgICBlLnBlcnNpc3QoKTtcbiAgICAgIH1cbiAgICAgIGNvbnN0IHsgbmFtZSwgaWQsIG91dGVySFRNTCB9ID0gZS50YXJnZXQ7XG4gICAgICBjb25zdCBmaWVsZCA9IHBhdGggPyBwYXRoIDogbmFtZSA/IG5hbWUgOiBpZDtcblxuICAgICAgaWYgKCFmaWVsZCAmJiBfX0RFVl9fKSB7XG4gICAgICAgIHdhcm5BYm91dE1pc3NpbmdJZGVudGlmaWVyKHtcbiAgICAgICAgICBodG1sQ29udGVudDogb3V0ZXJIVE1MLFxuICAgICAgICAgIGRvY3VtZW50YXRpb25BbmNob3JMaW5rOiAnaGFuZGxlYmx1ci1lLWFueS0tdm9pZCcsXG4gICAgICAgICAgaGFuZGxlck5hbWU6ICdoYW5kbGVCbHVyJyxcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHNldEZpZWxkVG91Y2hlZChmaWVsZCwgdHJ1ZSk7XG4gICAgfSxcbiAgICBbc2V0RmllbGRUb3VjaGVkXVxuICApO1xuXG4gIGNvbnN0IGhhbmRsZUJsdXIgPSB1c2VFdmVudENhbGxiYWNrKChldmVudE9yU3RyaW5nOiBhbnkpOlxuICAgIHwgdm9pZFxuICAgIHwgKChlOiBhbnkpID0+IHZvaWQpID0+IHtcbiAgICBpZiAoaXNTdHJpbmcoZXZlbnRPclN0cmluZykpIHtcbiAgICAgIHJldHVybiBldmVudCA9PiBleGVjdXRlQmx1cihldmVudCwgZXZlbnRPclN0cmluZyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGV4ZWN1dGVCbHVyKGV2ZW50T3JTdHJpbmcpO1xuICAgIH1cbiAgfSk7XG5cbiAgY29uc3Qgc2V0Rm9ybWlrU3RhdGUgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAoXG4gICAgICBzdGF0ZU9yQ2I6XG4gICAgICAgIHwgRm9ybWlrU3RhdGU8VmFsdWVzPlxuICAgICAgICB8ICgoc3RhdGU6IEZvcm1pa1N0YXRlPFZhbHVlcz4pID0+IEZvcm1pa1N0YXRlPFZhbHVlcz4pXG4gICAgKTogdm9pZCA9PiB7XG4gICAgICBpZiAoaXNGdW5jdGlvbihzdGF0ZU9yQ2IpKSB7XG4gICAgICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NFVF9GT1JNSUtfU1RBVEUnLCBwYXlsb2FkOiBzdGF0ZU9yQ2IgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfRk9STUlLX1NUQVRFJywgcGF5bG9hZDogKCkgPT4gc3RhdGVPckNiIH0pO1xuICAgICAgfVxuICAgIH0sXG4gICAgW11cbiAgKTtcblxuICBjb25zdCBzZXRTdGF0dXMgPSBSZWFjdC51c2VDYWxsYmFjaygoc3RhdHVzOiBhbnkpID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfU1RBVFVTJywgcGF5bG9hZDogc3RhdHVzIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc2V0U3VibWl0dGluZyA9IFJlYWN0LnVzZUNhbGxiYWNrKChpc1N1Ym1pdHRpbmc6IGJvb2xlYW4pID0+IHtcbiAgICBkaXNwYXRjaCh7IHR5cGU6ICdTRVRfSVNTVUJNSVRUSU5HJywgcGF5bG9hZDogaXNTdWJtaXR0aW5nIH0pO1xuICB9LCBbXSk7XG5cbiAgY29uc3Qgc3VibWl0Rm9ybSA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIGRpc3BhdGNoKHsgdHlwZTogJ1NVQk1JVF9BVFRFTVBUJyB9KTtcbiAgICByZXR1cm4gdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSgpLnRoZW4oXG4gICAgICAoY29tYmluZWRFcnJvcnM6IEZvcm1pa0Vycm9yczxWYWx1ZXM+KSA9PiB7XG4gICAgICAgIC8vIEluIGNhc2UgYW4gZXJyb3Igd2FzIHRocm93biBhbmQgcGFzc2VkIHRvIHRoZSByZXNvbHZlZCBQcm9taXNlLFxuICAgICAgICAvLyBgY29tYmluZWRFcnJvcnNgIGNhbiBiZSBhbiBpbnN0YW5jZSBvZiBhbiBFcnJvci4gV2UgbmVlZCB0byBjaGVja1xuICAgICAgICAvLyB0aGF0IGFuZCBhYm9ydCB0aGUgc3VibWl0LlxuICAgICAgICAvLyBJZiB3ZSBkb24ndCBkbyB0aGF0LCBjYWxsaW5nIGBPYmplY3Qua2V5cyhuZXcgRXJyb3IoKSlgIHlpZWxkcyBhblxuICAgICAgICAvLyBlbXB0eSBhcnJheSwgd2hpY2ggY2F1c2VzIHRoZSB2YWxpZGF0aW9uIHRvIHBhc3MgYW5kIHRoZSBmb3JtXG4gICAgICAgIC8vIHRvIGJlIHN1Ym1pdHRlZC5cblxuICAgICAgICBjb25zdCBpc0luc3RhbmNlT2ZFcnJvciA9IGNvbWJpbmVkRXJyb3JzIGluc3RhbmNlb2YgRXJyb3I7XG4gICAgICAgIGNvbnN0IGlzQWN0dWFsbHlWYWxpZCA9XG4gICAgICAgICAgIWlzSW5zdGFuY2VPZkVycm9yICYmIE9iamVjdC5rZXlzKGNvbWJpbmVkRXJyb3JzKS5sZW5ndGggPT09IDA7XG4gICAgICAgIGlmIChpc0FjdHVhbGx5VmFsaWQpIHtcbiAgICAgICAgICAvLyBQcm9jZWVkIHdpdGggc3VibWl0Li4uXG4gICAgICAgICAgLy9cbiAgICAgICAgICAvLyBUbyByZXNwZWN0IHN5bmMgc3VibWl0IGZucywgd2UgY2FuJ3Qgc2ltcGx5IHdyYXAgZXhlY3V0ZVN1Ym1pdCBpbiBhIHByb21pc2UgYW5kXG4gICAgICAgICAgLy8gX2Fsd2F5c18gZGlzcGF0Y2ggU1VCTUlUX1NVQ0NFU1MgYmVjYXVzZSBpc1N1Ym1pdHRpbmcgd291bGQgdGhlbiBhbHdheXMgYmUgZmFsc2UuXG4gICAgICAgICAgLy8gVGhpcyB3b3VsZCBiZSBmaW5lIGluIHNpbXBsZSBjYXNlcywgYnV0IG1ha2UgaXQgaW1wb3NzaWJsZSB0byBkaXNhYmxlIHN1Ym1pdFxuICAgICAgICAgIC8vIGJ1dHRvbnMgd2hlcmUgcGVvcGxlIHVzZSBjYWxsYmFja3Mgb3IgcHJvbWlzZXMgYXMgc2lkZSBlZmZlY3RzICh3aGljaCBpcyBiYXNpY2FsbHlcbiAgICAgICAgICAvLyBhbGwgb2YgdjEgRm9ybWlrIGNvZGUpLiBJbnN0ZWFkLCByZWNhbGwgdGhhdCB3ZSBhcmUgaW5zaWRlIG9mIGEgcHJvbWlzZSBjaGFpbiBhbHJlYWR5LFxuICAgICAgICAgIC8vICBzbyB3ZSBjYW4gdHJ5L2NhdGNoIGV4ZWN1dGVTdWJtaXQoKSwgaWYgaXQgcmV0dXJucyB1bmRlZmluZWQsIHRoZW4ganVzdCBiYWlsLlxuICAgICAgICAgIC8vIElmIHRoZXJlIGFyZSBlcnJvcnMsIHRocm93IGVtLiBPdGhlcndpc2UsIHdyYXAgZXhlY3V0ZVN1Ym1pdCBpbiBhIHByb21pc2UgYW5kIGhhbmRsZVxuICAgICAgICAgIC8vIGNsZWFudXAgb2YgaXNTdWJtaXR0aW5nIG9uIGJlaGFsZiBvZiB0aGUgY29uc3VtZXIuXG4gICAgICAgICAgbGV0IHByb21pc2VPclVuZGVmaW5lZDtcbiAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgcHJvbWlzZU9yVW5kZWZpbmVkID0gZXhlY3V0ZVN1Ym1pdCgpO1xuICAgICAgICAgICAgLy8gQmFpbCBpZiBpdCdzIHN5bmMsIGNvbnN1bWVyIGlzIHJlc3BvbnNpYmxlIGZvciBjbGVhbmluZyB1cFxuICAgICAgICAgICAgLy8gdmlhIHNldFN1Ym1pdHRpbmcoZmFsc2UpXG4gICAgICAgICAgICBpZiAocHJvbWlzZU9yVW5kZWZpbmVkID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICB0aHJvdyBlcnJvcjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZXNvbHZlKHByb21pc2VPclVuZGVmaW5lZClcbiAgICAgICAgICAgIC50aGVuKCgpID0+IHtcbiAgICAgICAgICAgICAgaWYgKCEhaXNNb3VudGVkLmN1cnJlbnQpIHtcbiAgICAgICAgICAgICAgICBkaXNwYXRjaCh7IHR5cGU6ICdTVUJNSVRfU1VDQ0VTUycgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAuY2F0Y2goX2Vycm9ycyA9PiB7XG4gICAgICAgICAgICAgIGlmICghIWlzTW91bnRlZC5jdXJyZW50KSB7XG4gICAgICAgICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU1VCTUlUX0ZBSUxVUkUnIH0pO1xuICAgICAgICAgICAgICAgIC8vIFRoaXMgaXMgYSBsZWdpdCBlcnJvciByZWplY3RlZCBieSB0aGUgb25TdWJtaXQgZm5cbiAgICAgICAgICAgICAgICAvLyBzbyB3ZSBkb24ndCB3YW50IHRvIGJyZWFrIHRoZSBwcm9taXNlIGNoYWluXG4gICAgICAgICAgICAgICAgdGhyb3cgX2Vycm9ycztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSBpZiAoISFpc01vdW50ZWQuY3VycmVudCkge1xuICAgICAgICAgIC8vIF5eXiBNYWtlIHN1cmUgRm9ybWlrIGlzIHN0aWxsIG1vdW50ZWQgYmVmb3JlIHVwZGF0aW5nIHN0YXRlXG4gICAgICAgICAgZGlzcGF0Y2goeyB0eXBlOiAnU1VCTUlUX0ZBSUxVUkUnIH0pO1xuICAgICAgICAgIC8vIHRocm93IGNvbWJpbmVkRXJyb3JzO1xuICAgICAgICAgIGlmIChpc0luc3RhbmNlT2ZFcnJvcikge1xuICAgICAgICAgICAgdGhyb3cgY29tYmluZWRFcnJvcnM7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybjtcbiAgICAgIH1cbiAgICApO1xuICB9KTtcblxuICBjb25zdCBoYW5kbGVTdWJtaXQgPSB1c2VFdmVudENhbGxiYWNrKFxuICAgIChlPzogUmVhY3QuRm9ybUV2ZW50PEhUTUxGb3JtRWxlbWVudD4pID0+IHtcbiAgICAgIGlmIChlICYmIGUucHJldmVudERlZmF1bHQgJiYgaXNGdW5jdGlvbihlLnByZXZlbnREZWZhdWx0KSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChlICYmIGUuc3RvcFByb3BhZ2F0aW9uICYmIGlzRnVuY3Rpb24oZS5zdG9wUHJvcGFnYXRpb24pKSB7XG4gICAgICAgIGUuc3RvcFByb3BhZ2F0aW9uKCk7XG4gICAgICB9XG5cbiAgICAgIC8vIFdhcm4gaWYgZm9ybSBzdWJtaXNzaW9uIGlzIHRyaWdnZXJlZCBieSBhIDxidXR0b24+IHdpdGhvdXQgYVxuICAgICAgLy8gc3BlY2lmaWVkIGB0eXBlYCBhdHRyaWJ1dGUgZHVyaW5nIGRldmVsb3BtZW50LiBUaGlzIG1pdGlnYXRlc1xuICAgICAgLy8gYSBjb21tb24gZ290Y2hhIGluIGZvcm1zIHdpdGggYm90aCByZXNldCBhbmQgc3VibWl0IGJ1dHRvbnMsXG4gICAgICAvLyB3aGVyZSB0aGUgZGV2IGZvcmdldHMgdG8gYWRkIHR5cGU9XCJidXR0b25cIiB0byB0aGUgcmVzZXQgYnV0dG9uLlxuICAgICAgaWYgKF9fREVWX18gJiYgdHlwZW9mIGRvY3VtZW50ICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgICAvLyBTYWZlbHkgZ2V0IHRoZSBhY3RpdmUgZWxlbWVudCAod29ya3Mgd2l0aCBJRSlcbiAgICAgICAgY29uc3QgYWN0aXZlRWxlbWVudCA9IGdldEFjdGl2ZUVsZW1lbnQoKTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGFjdGl2ZUVsZW1lbnQgIT09IG51bGwgJiZcbiAgICAgICAgICBhY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEJ1dHRvbkVsZW1lbnRcbiAgICAgICAgKSB7XG4gICAgICAgICAgaW52YXJpYW50KFxuICAgICAgICAgICAgYWN0aXZlRWxlbWVudC5hdHRyaWJ1dGVzICYmXG4gICAgICAgICAgICAgIGFjdGl2ZUVsZW1lbnQuYXR0cmlidXRlcy5nZXROYW1lZEl0ZW0oJ3R5cGUnKSxcbiAgICAgICAgICAgICdZb3Ugc3VibWl0dGVkIGEgRm9ybWlrIGZvcm0gdXNpbmcgYSBidXR0b24gd2l0aCBhbiB1bnNwZWNpZmllZCBgdHlwZWAgYXR0cmlidXRlLiAgTW9zdCBicm93c2VycyBkZWZhdWx0IGJ1dHRvbiBlbGVtZW50cyB0byBgdHlwZT1cInN1Ym1pdFwiYC4gSWYgdGhpcyBpcyBub3QgYSBzdWJtaXQgYnV0dG9uLCBwbGVhc2UgYWRkIGB0eXBlPVwiYnV0dG9uXCJgLidcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN1Ym1pdEZvcm0oKS5jYXRjaChyZWFzb24gPT4ge1xuICAgICAgICBjb25zb2xlLndhcm4oXG4gICAgICAgICAgYFdhcm5pbmc6IEFuIHVuaGFuZGxlZCBlcnJvciB3YXMgY2F1Z2h0IGZyb20gc3VibWl0Rm9ybSgpYCxcbiAgICAgICAgICByZWFzb25cbiAgICAgICAgKTtcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcblxuICBjb25zdCBpbXBlcmF0aXZlTWV0aG9kczogRm9ybWlrSGVscGVyczxWYWx1ZXM+ID0ge1xuICAgIHJlc2V0Rm9ybSxcblxuICAgIHZhbGlkYXRlRm9ybTogdmFsaWRhdGVGb3JtV2l0aEhpZ2hQcmlvcml0eSxcbiAgICB2YWxpZGF0ZUZpZWxkLFxuICAgIHNldEVycm9ycyxcbiAgICBzZXRGaWVsZEVycm9yLFxuICAgIHNldEZpZWxkVG91Y2hlZCxcbiAgICBzZXRGaWVsZFZhbHVlLFxuICAgIHNldFN0YXR1cyxcbiAgICBzZXRTdWJtaXR0aW5nLFxuICAgIHNldFRvdWNoZWQsXG4gICAgc2V0VmFsdWVzLFxuICAgIHNldEZvcm1pa1N0YXRlLFxuICAgIHN1Ym1pdEZvcm0sXG4gIH07XG5cbiAgY29uc3QgZXhlY3V0ZVN1Ym1pdCA9IHVzZUV2ZW50Q2FsbGJhY2soKCkgPT4ge1xuICAgIHJldHVybiBvblN1Ym1pdChzdGF0ZS52YWx1ZXMsIGltcGVyYXRpdmVNZXRob2RzKTtcbiAgfSk7XG5cbiAgY29uc3QgaGFuZGxlUmVzZXQgPSB1c2VFdmVudENhbGxiYWNrKGUgPT4ge1xuICAgIGlmIChlICYmIGUucHJldmVudERlZmF1bHQgJiYgaXNGdW5jdGlvbihlLnByZXZlbnREZWZhdWx0KSkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cblxuICAgIGlmIChlICYmIGUuc3RvcFByb3BhZ2F0aW9uICYmIGlzRnVuY3Rpb24oZS5zdG9wUHJvcGFnYXRpb24pKSB7XG4gICAgICBlLnN0b3BQcm9wYWdhdGlvbigpO1xuICAgIH1cblxuICAgIHJlc2V0Rm9ybSgpO1xuICB9KTtcblxuICBjb25zdCBnZXRGaWVsZE1ldGEgPSBSZWFjdC51c2VDYWxsYmFjayhcbiAgICAobmFtZTogc3RyaW5nKTogRmllbGRNZXRhUHJvcHM8YW55PiA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogZ2V0SW4oc3RhdGUudmFsdWVzLCBuYW1lKSxcbiAgICAgICAgZXJyb3I6IGdldEluKHN0YXRlLmVycm9ycywgbmFtZSksXG4gICAgICAgIHRvdWNoZWQ6ICEhZ2V0SW4oc3RhdGUudG91Y2hlZCwgbmFtZSksXG4gICAgICAgIGluaXRpYWxWYWx1ZTogZ2V0SW4oaW5pdGlhbFZhbHVlcy5jdXJyZW50LCBuYW1lKSxcbiAgICAgICAgaW5pdGlhbFRvdWNoZWQ6ICEhZ2V0SW4oaW5pdGlhbFRvdWNoZWQuY3VycmVudCwgbmFtZSksXG4gICAgICAgIGluaXRpYWxFcnJvcjogZ2V0SW4oaW5pdGlhbEVycm9ycy5jdXJyZW50LCBuYW1lKSxcbiAgICAgIH07XG4gICAgfSxcbiAgICBbc3RhdGUuZXJyb3JzLCBzdGF0ZS50b3VjaGVkLCBzdGF0ZS52YWx1ZXNdXG4gICk7XG5cbiAgY29uc3QgZ2V0RmllbGRIZWxwZXJzID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5hbWU6IHN0cmluZyk6IEZpZWxkSGVscGVyUHJvcHM8YW55PiA9PiB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBzZXRWYWx1ZTogKHZhbHVlOiBhbnkpID0+IHNldEZpZWxkVmFsdWUobmFtZSwgdmFsdWUpLFxuICAgICAgICBzZXRUb3VjaGVkOiAodmFsdWU6IGJvb2xlYW4pID0+IHNldEZpZWxkVG91Y2hlZChuYW1lLCB2YWx1ZSksXG4gICAgICAgIHNldEVycm9yOiAodmFsdWU6IGFueSkgPT4gc2V0RmllbGRFcnJvcihuYW1lLCB2YWx1ZSksXG4gICAgICB9O1xuICAgIH0sXG4gICAgW3NldEZpZWxkVmFsdWUsIHNldEZpZWxkVG91Y2hlZCwgc2V0RmllbGRFcnJvcl1cbiAgKTtcblxuICBjb25zdCBnZXRGaWVsZFByb3BzID0gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKG5hbWVPck9wdGlvbnMpOiBGaWVsZElucHV0UHJvcHM8YW55PiA9PiB7XG4gICAgICBjb25zdCBpc0FuT2JqZWN0ID0gaXNPYmplY3QobmFtZU9yT3B0aW9ucyk7XG4gICAgICBjb25zdCBuYW1lID0gaXNBbk9iamVjdCA/IG5hbWVPck9wdGlvbnMubmFtZSA6IG5hbWVPck9wdGlvbnM7XG4gICAgICBjb25zdCB2YWx1ZVN0YXRlID0gZ2V0SW4oc3RhdGUudmFsdWVzLCBuYW1lKTtcblxuICAgICAgY29uc3QgZmllbGQ6IEZpZWxkSW5wdXRQcm9wczxhbnk+ID0ge1xuICAgICAgICBuYW1lLFxuICAgICAgICB2YWx1ZTogdmFsdWVTdGF0ZSxcbiAgICAgICAgb25DaGFuZ2U6IGhhbmRsZUNoYW5nZSxcbiAgICAgICAgb25CbHVyOiBoYW5kbGVCbHVyLFxuICAgICAgfTtcbiAgICAgIGlmIChpc0FuT2JqZWN0KSB7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICB0eXBlLFxuICAgICAgICAgIHZhbHVlOiB2YWx1ZVByb3AsIC8vIHZhbHVlIGlzIHNwZWNpYWwgZm9yIGNoZWNrYm94ZXNcbiAgICAgICAgICBhczogaXMsXG4gICAgICAgICAgbXVsdGlwbGUsXG4gICAgICAgIH0gPSBuYW1lT3JPcHRpb25zO1xuXG4gICAgICAgIGlmICh0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICAgICAgaWYgKHZhbHVlUHJvcCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBmaWVsZC5jaGVja2VkID0gISF2YWx1ZVN0YXRlO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBmaWVsZC5jaGVja2VkID0gISEoXG4gICAgICAgICAgICAgIEFycmF5LmlzQXJyYXkodmFsdWVTdGF0ZSkgJiYgfnZhbHVlU3RhdGUuaW5kZXhPZih2YWx1ZVByb3ApXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgZmllbGQudmFsdWUgPSB2YWx1ZVByb3A7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdyYWRpbycpIHtcbiAgICAgICAgICBmaWVsZC5jaGVja2VkID0gdmFsdWVTdGF0ZSA9PT0gdmFsdWVQcm9wO1xuICAgICAgICAgIGZpZWxkLnZhbHVlID0gdmFsdWVQcm9wO1xuICAgICAgICB9IGVsc2UgaWYgKGlzID09PSAnc2VsZWN0JyAmJiBtdWx0aXBsZSkge1xuICAgICAgICAgIGZpZWxkLnZhbHVlID0gZmllbGQudmFsdWUgfHwgW107XG4gICAgICAgICAgZmllbGQubXVsdGlwbGUgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gZmllbGQ7XG4gICAgfSxcbiAgICBbaGFuZGxlQmx1ciwgaGFuZGxlQ2hhbmdlLCBzdGF0ZS52YWx1ZXNdXG4gICk7XG5cbiAgY29uc3QgZGlydHkgPSBSZWFjdC51c2VNZW1vKFxuICAgICgpID0+ICFpc0VxdWFsKGluaXRpYWxWYWx1ZXMuY3VycmVudCwgc3RhdGUudmFsdWVzKSxcbiAgICBbaW5pdGlhbFZhbHVlcy5jdXJyZW50LCBzdGF0ZS52YWx1ZXNdXG4gICk7XG5cbiAgY29uc3QgaXNWYWxpZCA9IFJlYWN0LnVzZU1lbW8oXG4gICAgKCkgPT5cbiAgICAgIHR5cGVvZiBpc0luaXRpYWxWYWxpZCAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICAgPyBkaXJ0eVxuICAgICAgICAgID8gc3RhdGUuZXJyb3JzICYmIE9iamVjdC5rZXlzKHN0YXRlLmVycm9ycykubGVuZ3RoID09PSAwXG4gICAgICAgICAgOiBpc0luaXRpYWxWYWxpZCAhPT0gZmFsc2UgJiYgaXNGdW5jdGlvbihpc0luaXRpYWxWYWxpZClcbiAgICAgICAgICA/IChpc0luaXRpYWxWYWxpZCBhcyAocHJvcHM6IEZvcm1pa0NvbmZpZzxWYWx1ZXM+KSA9PiBib29sZWFuKShwcm9wcylcbiAgICAgICAgICA6IChpc0luaXRpYWxWYWxpZCBhcyBib29sZWFuKVxuICAgICAgICA6IHN0YXRlLmVycm9ycyAmJiBPYmplY3Qua2V5cyhzdGF0ZS5lcnJvcnMpLmxlbmd0aCA9PT0gMCxcbiAgICBbaXNJbml0aWFsVmFsaWQsIGRpcnR5LCBzdGF0ZS5lcnJvcnMsIHByb3BzXVxuICApO1xuXG4gIGNvbnN0IGN0eCA9IHtcbiAgICAuLi5zdGF0ZSxcbiAgICBpbml0aWFsVmFsdWVzOiBpbml0aWFsVmFsdWVzLmN1cnJlbnQsXG4gICAgaW5pdGlhbEVycm9yczogaW5pdGlhbEVycm9ycy5jdXJyZW50LFxuICAgIGluaXRpYWxUb3VjaGVkOiBpbml0aWFsVG91Y2hlZC5jdXJyZW50LFxuICAgIGluaXRpYWxTdGF0dXM6IGluaXRpYWxTdGF0dXMuY3VycmVudCxcbiAgICBoYW5kbGVCbHVyLFxuICAgIGhhbmRsZUNoYW5nZSxcbiAgICBoYW5kbGVSZXNldCxcbiAgICBoYW5kbGVTdWJtaXQsXG4gICAgcmVzZXRGb3JtLFxuICAgIHNldEVycm9ycyxcbiAgICBzZXRGb3JtaWtTdGF0ZSxcbiAgICBzZXRGaWVsZFRvdWNoZWQsXG4gICAgc2V0RmllbGRWYWx1ZSxcbiAgICBzZXRGaWVsZEVycm9yLFxuICAgIHNldFN0YXR1cyxcbiAgICBzZXRTdWJtaXR0aW5nLFxuICAgIHNldFRvdWNoZWQsXG4gICAgc2V0VmFsdWVzLFxuICAgIHN1Ym1pdEZvcm0sXG4gICAgdmFsaWRhdGVGb3JtOiB2YWxpZGF0ZUZvcm1XaXRoSGlnaFByaW9yaXR5LFxuICAgIHZhbGlkYXRlRmllbGQsXG4gICAgaXNWYWxpZCxcbiAgICBkaXJ0eSxcbiAgICB1bnJlZ2lzdGVyRmllbGQsXG4gICAgcmVnaXN0ZXJGaWVsZCxcbiAgICBnZXRGaWVsZFByb3BzLFxuICAgIGdldEZpZWxkTWV0YSxcbiAgICBnZXRGaWVsZEhlbHBlcnMsXG4gICAgdmFsaWRhdGVPbkJsdXIsXG4gICAgdmFsaWRhdGVPbkNoYW5nZSxcbiAgICB2YWxpZGF0ZU9uTW91bnQsXG4gIH07XG5cbiAgcmV0dXJuIGN0eDtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIEZvcm1pazxcbiAgVmFsdWVzIGV4dGVuZHMgRm9ybWlrVmFsdWVzID0gRm9ybWlrVmFsdWVzLFxuICBFeHRyYVByb3BzID0ge31cbj4ocHJvcHM6IEZvcm1pa0NvbmZpZzxWYWx1ZXM+ICYgRXh0cmFQcm9wcykge1xuICBjb25zdCBmb3JtaWtiYWcgPSB1c2VGb3JtaWs8VmFsdWVzPihwcm9wcyk7XG4gIGNvbnN0IHsgY29tcG9uZW50LCBjaGlsZHJlbiwgcmVuZGVyLCBpbm5lclJlZiB9ID0gcHJvcHM7XG5cbiAgLy8gVGhpcyBhbGxvd3MgZm9sa3MgdG8gcGFzcyBhIHJlZiB0byA8Rm9ybWlrIC8+XG4gIFJlYWN0LnVzZUltcGVyYXRpdmVIYW5kbGUoaW5uZXJSZWYsICgpID0+IGZvcm1pa2JhZyk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhcHJvcHMucmVuZGVyLFxuICAgICAgICBgPEZvcm1payByZW5kZXI+IGhhcyBiZWVuIGRlcHJlY2F0ZWQgYW5kIHdpbGwgYmUgcmVtb3ZlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgRm9ybWlrLiBQbGVhc2UgdXNlIGEgY2hpbGQgY2FsbGJhY2sgZnVuY3Rpb24gaW5zdGVhZC4gVG8gZ2V0IHJpZCBvZiB0aGlzIHdhcm5pbmcsIHJlcGxhY2UgPEZvcm1payByZW5kZXI9eyhwcm9wcykgPT4gLi4ufSAvPiB3aXRoIDxGb3JtaWs+eyhwcm9wcykgPT4gLi4ufTwvRm9ybWlrPmBcbiAgICAgICk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICB9LCBbXSk7XG4gIHJldHVybiAoXG4gICAgPEZvcm1pa1Byb3ZpZGVyIHZhbHVlPXtmb3JtaWtiYWd9PlxuICAgICAge2NvbXBvbmVudFxuICAgICAgICA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoY29tcG9uZW50IGFzIGFueSwgZm9ybWlrYmFnKVxuICAgICAgICA6IHJlbmRlclxuICAgICAgICA/IHJlbmRlcihmb3JtaWtiYWcpXG4gICAgICAgIDogY2hpbGRyZW4gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgICAgID8gaXNGdW5jdGlvbihjaGlsZHJlbilcbiAgICAgICAgICA/IChjaGlsZHJlbiBhcyAoYmFnOiBGb3JtaWtQcm9wczxWYWx1ZXM+KSA9PiBSZWFjdC5SZWFjdE5vZGUpKFxuICAgICAgICAgICAgICBmb3JtaWtiYWcgYXMgRm9ybWlrUHJvcHM8VmFsdWVzPlxuICAgICAgICAgICAgKVxuICAgICAgICAgIDogIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbilcbiAgICAgICAgICA/IFJlYWN0LkNoaWxkcmVuLm9ubHkoY2hpbGRyZW4pXG4gICAgICAgICAgOiBudWxsXG4gICAgICAgIDogbnVsbH1cbiAgICA8L0Zvcm1pa1Byb3ZpZGVyPlxuICApO1xufVxuXG5mdW5jdGlvbiB3YXJuQWJvdXRNaXNzaW5nSWRlbnRpZmllcih7XG4gIGh0bWxDb250ZW50LFxuICBkb2N1bWVudGF0aW9uQW5jaG9yTGluayxcbiAgaGFuZGxlck5hbWUsXG59OiB7XG4gIGh0bWxDb250ZW50OiBzdHJpbmc7XG4gIGRvY3VtZW50YXRpb25BbmNob3JMaW5rOiBzdHJpbmc7XG4gIGhhbmRsZXJOYW1lOiBzdHJpbmc7XG59KSB7XG4gIGNvbnNvbGUud2FybihcbiAgICBgV2FybmluZzogRm9ybWlrIGNhbGxlZCBcXGAke2hhbmRsZXJOYW1lfVxcYCwgYnV0IHlvdSBmb3Jnb3QgdG8gcGFzcyBhbiBcXGBpZFxcYCBvciBcXGBuYW1lXFxgIGF0dHJpYnV0ZSB0byB5b3VyIGlucHV0OlxuICAgICR7aHRtbENvbnRlbnR9XG4gICAgRm9ybWlrIGNhbm5vdCBkZXRlcm1pbmUgd2hpY2ggdmFsdWUgdG8gdXBkYXRlLiBGb3IgbW9yZSBpbmZvIHNlZSBodHRwczovL2dpdGh1Yi5jb20vamFyZWRwYWxtZXIvZm9ybWlrIyR7ZG9jdW1lbnRhdGlvbkFuY2hvckxpbmt9XG4gIGBcbiAgKTtcbn1cblxuLyoqXG4gKiBUcmFuc2Zvcm0gWXVwIFZhbGlkYXRpb25FcnJvciB0byBhIG1vcmUgdXNhYmxlIG9iamVjdFxuICovXG5leHBvcnQgZnVuY3Rpb24geXVwVG9Gb3JtRXJyb3JzPFZhbHVlcz4oeXVwRXJyb3I6IGFueSk6IEZvcm1pa0Vycm9yczxWYWx1ZXM+IHtcbiAgbGV0IGVycm9yczogRm9ybWlrRXJyb3JzPFZhbHVlcz4gPSB7fTtcbiAgaWYgKHl1cEVycm9yLmlubmVyKSB7XG4gICAgaWYgKHl1cEVycm9yLmlubmVyLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHNldEluKGVycm9ycywgeXVwRXJyb3IucGF0aCwgeXVwRXJyb3IubWVzc2FnZSk7XG4gICAgfVxuICAgIGZvciAobGV0IGVyciBvZiB5dXBFcnJvci5pbm5lcikge1xuICAgICAgaWYgKCFnZXRJbihlcnJvcnMsIGVyci5wYXRoKSkge1xuICAgICAgICBlcnJvcnMgPSBzZXRJbihlcnJvcnMsIGVyci5wYXRoLCBlcnIubWVzc2FnZSk7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiBlcnJvcnM7XG59XG5cbi8qKlxuICogVmFsaWRhdGUgYSB5dXAgc2NoZW1hLlxuICovXG5leHBvcnQgZnVuY3Rpb24gdmFsaWRhdGVZdXBTY2hlbWE8VCBleHRlbmRzIEZvcm1pa1ZhbHVlcz4oXG4gIHZhbHVlczogVCxcbiAgc2NoZW1hOiBhbnksXG4gIHN5bmM6IGJvb2xlYW4gPSBmYWxzZSxcbiAgY29udGV4dDogYW55ID0ge31cbik6IFByb21pc2U8UGFydGlhbDxUPj4ge1xuICBjb25zdCB2YWxpZGF0ZURhdGE6IEZvcm1pa1ZhbHVlcyA9IHByZXBhcmVEYXRhRm9yVmFsaWRhdGlvbih2YWx1ZXMpO1xuICByZXR1cm4gc2NoZW1hW3N5bmMgPyAndmFsaWRhdGVTeW5jJyA6ICd2YWxpZGF0ZSddKHZhbGlkYXRlRGF0YSwge1xuICAgIGFib3J0RWFybHk6IGZhbHNlLFxuICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gIH0pO1xufVxuXG4vKipcbiAqIFJlY3Vyc2l2ZWx5IHByZXBhcmUgdmFsdWVzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gcHJlcGFyZURhdGFGb3JWYWxpZGF0aW9uPFQgZXh0ZW5kcyBGb3JtaWtWYWx1ZXM+KFxuICB2YWx1ZXM6IFRcbik6IEZvcm1pa1ZhbHVlcyB7XG4gIGxldCBkYXRhOiBGb3JtaWtWYWx1ZXMgPSB7fTtcbiAgZm9yIChsZXQgayBpbiB2YWx1ZXMpIHtcbiAgICBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHZhbHVlcywgaykpIHtcbiAgICAgIGNvbnN0IGtleSA9IFN0cmluZyhrKTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlc1trZXldKSA9PT0gdHJ1ZSkge1xuICAgICAgICBkYXRhW2tleV0gPSB2YWx1ZXNba2V5XS5tYXAoKHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkgPT09IHRydWUgfHwgaXNQbGFpbk9iamVjdCh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBwcmVwYXJlRGF0YUZvclZhbGlkYXRpb24odmFsdWUpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gdmFsdWUgIT09ICcnID8gdmFsdWUgOiB1bmRlZmluZWQ7XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAoaXNQbGFpbk9iamVjdCh2YWx1ZXNba2V5XSkpIHtcbiAgICAgICAgZGF0YVtrZXldID0gcHJlcGFyZURhdGFGb3JWYWxpZGF0aW9uKHZhbHVlc1trZXldKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGRhdGFba2V5XSA9IHZhbHVlc1trZXldICE9PSAnJyA/IHZhbHVlc1trZXldIDogdW5kZWZpbmVkO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICByZXR1cm4gZGF0YTtcbn1cblxuLyoqXG4gKiBkZWVwbWVyZ2UgYXJyYXkgbWVyZ2luZyBhbGdvcml0aG1cbiAqIGh0dHBzOi8vZ2l0aHViLmNvbS9LeWxlQU1hdGhld3MvZGVlcG1lcmdlI2NvbWJpbmUtYXJyYXlcbiAqL1xuZnVuY3Rpb24gYXJyYXlNZXJnZSh0YXJnZXQ6IGFueVtdLCBzb3VyY2U6IGFueVtdLCBvcHRpb25zOiBhbnkpOiBhbnlbXSB7XG4gIGNvbnN0IGRlc3RpbmF0aW9uID0gdGFyZ2V0LnNsaWNlKCk7XG5cbiAgc291cmNlLmZvckVhY2goZnVuY3Rpb24oZTogYW55LCBpOiBudW1iZXIpIHtcbiAgICBpZiAodHlwZW9mIGRlc3RpbmF0aW9uW2ldID09PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc3QgY2xvbmVSZXF1ZXN0ZWQgPSBvcHRpb25zLmNsb25lICE9PSBmYWxzZTtcbiAgICAgIGNvbnN0IHNob3VsZENsb25lID0gY2xvbmVSZXF1ZXN0ZWQgJiYgb3B0aW9ucy5pc01lcmdlYWJsZU9iamVjdChlKTtcbiAgICAgIGRlc3RpbmF0aW9uW2ldID0gc2hvdWxkQ2xvbmVcbiAgICAgICAgPyBkZWVwbWVyZ2UoQXJyYXkuaXNBcnJheShlKSA/IFtdIDoge30sIGUsIG9wdGlvbnMpXG4gICAgICAgIDogZTtcbiAgICB9IGVsc2UgaWYgKG9wdGlvbnMuaXNNZXJnZWFibGVPYmplY3QoZSkpIHtcbiAgICAgIGRlc3RpbmF0aW9uW2ldID0gZGVlcG1lcmdlKHRhcmdldFtpXSwgZSwgb3B0aW9ucyk7XG4gICAgfSBlbHNlIGlmICh0YXJnZXQuaW5kZXhPZihlKSA9PT0gLTEpIHtcbiAgICAgIGRlc3RpbmF0aW9uLnB1c2goZSk7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGRlc3RpbmF0aW9uO1xufVxuXG4vKiogUmV0dXJuIG11bHRpIHNlbGVjdCB2YWx1ZXMgYmFzZWQgb24gYW4gYXJyYXkgb2Ygb3B0aW9ucyAqL1xuZnVuY3Rpb24gZ2V0U2VsZWN0ZWRWYWx1ZXMob3B0aW9uczogYW55W10pIHtcbiAgcmV0dXJuIEFycmF5LmZyb20ob3B0aW9ucylcbiAgICAuZmlsdGVyKGVsID0+IGVsLnNlbGVjdGVkKVxuICAgIC5tYXAoZWwgPT4gZWwudmFsdWUpO1xufVxuXG4vKiogUmV0dXJuIHRoZSBuZXh0IHZhbHVlIGZvciBhIGNoZWNrYm94ICovXG5mdW5jdGlvbiBnZXRWYWx1ZUZvckNoZWNrYm94KFxuICBjdXJyZW50VmFsdWU6IHN0cmluZyB8IGFueVtdLFxuICBjaGVja2VkOiBib29sZWFuLFxuICB2YWx1ZVByb3A6IGFueVxuKSB7XG4gIC8vIElmIHRoZSBjdXJyZW50IHZhbHVlIHdhcyBhIGJvb2xlYW4sIHJldHVybiBhIGJvb2xlYW5cbiAgaWYgKHR5cGVvZiBjdXJyZW50VmFsdWUgPT09ICdib29sZWFuJykge1xuICAgIHJldHVybiBCb29sZWFuKGNoZWNrZWQpO1xuICB9XG5cbiAgLy8gSWYgdGhlIGN1cnJlbnRWYWx1ZSB3YXMgbm90IGEgYm9vbGVhbiB3ZSB3YW50IHRvIHJldHVybiBhbiBhcnJheVxuICBsZXQgY3VycmVudEFycmF5T2ZWYWx1ZXMgPSBbXTtcbiAgbGV0IGlzVmFsdWVJbkFycmF5ID0gZmFsc2U7XG4gIGxldCBpbmRleCA9IC0xO1xuXG4gIGlmICghQXJyYXkuaXNBcnJheShjdXJyZW50VmFsdWUpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGVxZXFlcVxuICAgIGlmICghdmFsdWVQcm9wIHx8IHZhbHVlUHJvcCA9PSAndHJ1ZScgfHwgdmFsdWVQcm9wID09ICdmYWxzZScpIHtcbiAgICAgIHJldHVybiBCb29sZWFuKGNoZWNrZWQpO1xuICAgIH1cbiAgfSBlbHNlIHtcbiAgICAvLyBJZiB0aGUgY3VycmVudCB2YWx1ZSBpcyBhbHJlYWR5IGFuIGFycmF5LCB1c2UgaXRcbiAgICBjdXJyZW50QXJyYXlPZlZhbHVlcyA9IGN1cnJlbnRWYWx1ZTtcbiAgICBpbmRleCA9IGN1cnJlbnRWYWx1ZS5pbmRleE9mKHZhbHVlUHJvcCk7XG4gICAgaXNWYWx1ZUluQXJyYXkgPSBpbmRleCA+PSAwO1xuICB9XG5cbiAgLy8gSWYgdGhlIGNoZWNrYm94IHdhcyBjaGVja2VkIGFuZCB0aGUgdmFsdWUgaXMgbm90IGFscmVhZHkgcHJlc2VudCBpbiB0aGUgYXJheSB3ZSB3YW50IHRvIGFkZCB0aGUgbmV3IHZhbHVlIHRvIHRoZSBhcnJheSBvZiB2YWx1ZXNcbiAgaWYgKGNoZWNrZWQgJiYgdmFsdWVQcm9wICYmICFpc1ZhbHVlSW5BcnJheSkge1xuICAgIHJldHVybiBjdXJyZW50QXJyYXlPZlZhbHVlcy5jb25jYXQodmFsdWVQcm9wKTtcbiAgfVxuXG4gIC8vIElmIHRoZSBjaGVja2JveCB3YXMgdW5jaGVja2VkIGFuZCB0aGUgdmFsdWUgaXMgbm90IGluIHRoZSBhcnJheSwgc2ltcGx5IHJldHVybiB0aGUgYWxyZWFkeSBleGlzdGluZyBhcnJheSBvZiB2YWx1ZXNcbiAgaWYgKCFpc1ZhbHVlSW5BcnJheSkge1xuICAgIHJldHVybiBjdXJyZW50QXJyYXlPZlZhbHVlcztcbiAgfVxuXG4gIC8vIElmIHRoZSBjaGVja2JveCB3YXMgdW5jaGVja2VkIGFuZCB0aGUgdmFsdWUgaXMgaW4gdGhlIGFycmF5LCByZW1vdmUgdGhlIHZhbHVlIGFuZCByZXR1cm4gdGhlIGFycmF5XG4gIHJldHVybiBjdXJyZW50QXJyYXlPZlZhbHVlc1xuICAgIC5zbGljZSgwLCBpbmRleClcbiAgICAuY29uY2F0KGN1cnJlbnRBcnJheU9mVmFsdWVzLnNsaWNlKGluZGV4ICsgMSkpO1xufVxuXG4vLyBSZWFjdCBjdXJyZW50bHkgdGhyb3dzIGEgd2FybmluZyB3aGVuIHVzaW5nIHVzZUxheW91dEVmZmVjdCBvbiB0aGUgc2VydmVyLlxuLy8gVG8gZ2V0IGFyb3VuZCBpdCwgd2UgY2FuIGNvbmRpdGlvbmFsbHkgdXNlRWZmZWN0IG9uIHRoZSBzZXJ2ZXIgKG5vLW9wKSBhbmRcbi8vIHVzZUxheW91dEVmZmVjdCBpbiB0aGUgYnJvd3Nlci5cbi8vIEBzZWUgaHR0cHM6Ly9naXN0LmdpdGh1Yi5jb20vZ2FlYXJvbi9lN2Q5N2NkZjM4YTI5MDc5MjRlYTEyZTRlYmRmM2M4NVxuY29uc3QgdXNlSXNvbW9ycGhpY0xheW91dEVmZmVjdCA9XG4gIHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQgIT09ICd1bmRlZmluZWQnICYmXG4gIHR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuY3JlYXRlRWxlbWVudCAhPT0gJ3VuZGVmaW5lZCdcbiAgICA/IFJlYWN0LnVzZUxheW91dEVmZmVjdFxuICAgIDogUmVhY3QudXNlRWZmZWN0O1xuXG5mdW5jdGlvbiB1c2VFdmVudENhbGxiYWNrPFQgZXh0ZW5kcyAoLi4uYXJnczogYW55W10pID0+IGFueT4oZm46IFQpOiBUIHtcbiAgY29uc3QgcmVmOiBhbnkgPSBSZWFjdC51c2VSZWYoZm4pO1xuXG4gIC8vIHdlIGNvcHkgYSByZWYgdG8gdGhlIGNhbGxiYWNrIHNjb3BlZCB0byB0aGUgY3VycmVudCBzdGF0ZS9wcm9wcyBvbiBlYWNoIHJlbmRlclxuICB1c2VJc29tb3JwaGljTGF5b3V0RWZmZWN0KCgpID0+IHtcbiAgICByZWYuY3VycmVudCA9IGZuO1xuICB9KTtcblxuICByZXR1cm4gUmVhY3QudXNlQ2FsbGJhY2soXG4gICAgKC4uLmFyZ3M6IGFueVtdKSA9PiByZWYuY3VycmVudC5hcHBseSh2b2lkIDAsIGFyZ3MpLFxuICAgIFtdXG4gICkgYXMgVDtcbn1cbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHVzZUZvcm1pa0NvbnRleHQgfSBmcm9tICcuL0Zvcm1pa0NvbnRleHQnO1xuXG5leHBvcnQgdHlwZSBGb3JtaWtGb3JtUHJvcHMgPSBQaWNrPFxuICBSZWFjdC5Gb3JtSFRNTEF0dHJpYnV0ZXM8SFRNTEZvcm1FbGVtZW50PixcbiAgRXhjbHVkZTxcbiAgICBrZXlvZiBSZWFjdC5Gb3JtSFRNTEF0dHJpYnV0ZXM8SFRNTEZvcm1FbGVtZW50PixcbiAgICAnb25SZXNldCcgfCAnb25TdWJtaXQnXG4gID5cbj47XG5cbnR5cGUgRm9ybVByb3BzID0gUmVhY3QuQ29tcG9uZW50UHJvcHNXaXRob3V0UmVmPCdmb3JtJz47XG5cbi8vIEB0b2RvIHRlc3RzXG5leHBvcnQgY29uc3QgRm9ybSA9IFJlYWN0LmZvcndhcmRSZWY8SFRNTEZvcm1FbGVtZW50LCBGb3JtUHJvcHM+KFxuICAocHJvcHM6IEZvcm1pa0Zvcm1Qcm9wcywgcmVmKSA9PiB7XG4gICAgLy8gaU9TIG5lZWRzIGFuIFwiYWN0aW9uXCIgYXR0cmlidXRlIGZvciBuaWNlIGlucHV0OiBodHRwczovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMzk0ODUxNjIvNDA2NzI1XG4gICAgLy8gV2UgZGVmYXVsdCB0aGUgYWN0aW9uIHRvIFwiI1wiIGluIGNhc2UgdGhlIHByZXZlbnREZWZhdWx0IGZhaWxzIChqdXN0IHVwZGF0ZXMgdGhlIFVSTCBoYXNoKVxuICAgIGNvbnN0IHsgYWN0aW9uLCAuLi5yZXN0IH0gPSBwcm9wcztcbiAgICBjb25zdCBfYWN0aW9uID0gYWN0aW9uIHx8ICcjJztcbiAgICBjb25zdCB7IGhhbmRsZVJlc2V0LCBoYW5kbGVTdWJtaXQgfSA9IHVzZUZvcm1pa0NvbnRleHQoKTtcbiAgICByZXR1cm4gKFxuICAgICAgPGZvcm1cbiAgICAgICAgb25TdWJtaXQ9e2hhbmRsZVN1Ym1pdH1cbiAgICAgICAgcmVmPXtyZWZ9XG4gICAgICAgIG9uUmVzZXQ9e2hhbmRsZVJlc2V0fVxuICAgICAgICBhY3Rpb249e19hY3Rpb259XG4gICAgICAgIHsuLi5yZXN0fVxuICAgICAgLz5cbiAgICApO1xuICB9XG4pO1xuXG5Gb3JtLmRpc3BsYXlOYW1lID0gJ0Zvcm0nO1xuIiwiaW1wb3J0ICogYXMgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IGhvaXN0Tm9uUmVhY3RTdGF0aWNzIGZyb20gJ2hvaXN0LW5vbi1yZWFjdC1zdGF0aWNzJztcblxuaW1wb3J0IHsgRm9ybWlrQ29udGV4dFR5cGUgfSBmcm9tICcuL3R5cGVzJztcbmltcG9ydCB7IEZvcm1pa0NvbnN1bWVyIH0gZnJvbSAnLi9Gb3JtaWtDb250ZXh0JztcbmltcG9ydCBpbnZhcmlhbnQgZnJvbSAndGlueS13YXJuaW5nJztcblxuLyoqXG4gKiBDb25uZWN0IGFueSBjb21wb25lbnQgdG8gRm9ybWlrIGNvbnRleHQsIGFuZCBpbmplY3QgYXMgYSBwcm9wIGNhbGxlZCBgZm9ybWlrYDtcbiAqIEBwYXJhbSBDb21wIFJlYWN0IENvbXBvbmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gY29ubmVjdDxPdXRlclByb3BzLCBWYWx1ZXMgPSB7fT4oXG4gIENvbXA6IFJlYWN0LkNvbXBvbmVudFR5cGU8T3V0ZXJQcm9wcyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxWYWx1ZXM+IH0+XG4pIHtcbiAgY29uc3QgQzogUmVhY3QuU0ZDPE91dGVyUHJvcHM+ID0gKHByb3BzOiBPdXRlclByb3BzKSA9PiAoXG4gICAgPEZvcm1pa0NvbnN1bWVyPlxuICAgICAge2Zvcm1payA9PiB7XG4gICAgICAgIGludmFyaWFudChcbiAgICAgICAgICAhIWZvcm1payxcbiAgICAgICAgICBgRm9ybWlrIGNvbnRleHQgaXMgdW5kZWZpbmVkLCBwbGVhc2UgdmVyaWZ5IHlvdSBhcmUgcmVuZGVyaW5nIDxGb3JtPiwgPEZpZWxkPiwgPEZhc3RGaWVsZD4sIDxGaWVsZEFycmF5Piwgb3IgeW91ciBjdXN0b20gY29udGV4dC11c2luZyBjb21wb25lbnQgYXMgYSBjaGlsZCBvZiBhIDxGb3JtaWs+IGNvbXBvbmVudC4gQ29tcG9uZW50IG5hbWU6ICR7Q29tcC5uYW1lfWBcbiAgICAgICAgKTtcbiAgICAgICAgcmV0dXJuIDxDb21wIHsuLi5wcm9wc30gZm9ybWlrPXtmb3JtaWt9IC8+O1xuICAgICAgfX1cbiAgICA8L0Zvcm1pa0NvbnN1bWVyPlxuICApO1xuICBjb25zdCBjb21wb25lbnREaXNwbGF5TmFtZSA9XG4gICAgQ29tcC5kaXNwbGF5TmFtZSB8fFxuICAgIENvbXAubmFtZSB8fFxuICAgIChDb21wLmNvbnN0cnVjdG9yICYmIENvbXAuY29uc3RydWN0b3IubmFtZSkgfHxcbiAgICAnQ29tcG9uZW50JztcblxuICAvLyBBc3NpZ24gQ29tcCB0byBDLldyYXBwZWRDb21wb25lbnQgc28gd2UgY2FuIGFjY2VzcyB0aGUgaW5uZXIgY29tcG9uZW50IGluIHRlc3RzXG4gIC8vIEZvciBleGFtcGxlLCA8RmllbGQuV3JhcHBlZENvbXBvbmVudCAvPiBnZXRzIHVzIDxGaWVsZElubmVyLz5cbiAgKEMgYXMgUmVhY3QuU0ZDPE91dGVyUHJvcHM+ICYge1xuICAgIFdyYXBwZWRDb21wb25lbnQ6IFJlYWN0LlJlYWN0Tm9kZTtcbiAgfSkuV3JhcHBlZENvbXBvbmVudCA9IENvbXA7XG5cbiAgQy5kaXNwbGF5TmFtZSA9IGBGb3JtaWtDb25uZWN0KCR7Y29tcG9uZW50RGlzcGxheU5hbWV9KWA7XG5cbiAgcmV0dXJuIGhvaXN0Tm9uUmVhY3RTdGF0aWNzKFxuICAgIEMsXG4gICAgQ29tcCBhcyBSZWFjdC5Db21wb25lbnRDbGFzczxcbiAgICAgIE91dGVyUHJvcHMgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9XG4gICAgPiAvLyBjYXN0IHR5cGUgdG8gQ29tcG9uZW50Q2xhc3MgKGV2ZW4gaWYgU0ZDKVxuICApIGFzIFJlYWN0LkNvbXBvbmVudFR5cGU8T3V0ZXJQcm9wcz47XG59XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgY2xvbmVEZWVwIGZyb20gJ2xvZGFzaC9jbG9uZURlZXAnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJy4vY29ubmVjdCc7XG5pbXBvcnQge1xuICBGb3JtaWtDb250ZXh0VHlwZSxcbiAgRm9ybWlrU3RhdGUsXG4gIFNoYXJlZFJlbmRlclByb3BzLFxuICBGb3JtaWtQcm9wcyxcbn0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQge1xuICBnZXRJbixcbiAgaXNFbXB0eUNoaWxkcmVuLFxuICBpc0Z1bmN0aW9uLFxuICBzZXRJbixcbiAgaXNFbXB0eUFycmF5LFxufSBmcm9tICcuL3V0aWxzJztcbmltcG9ydCBpc0VxdWFsIGZyb20gJ3JlYWN0LWZhc3QtY29tcGFyZSc7XG5cbmV4cG9ydCB0eXBlIEZpZWxkQXJyYXlSZW5kZXJQcm9wcyA9IEFycmF5SGVscGVycyAmIHtcbiAgZm9ybTogRm9ybWlrUHJvcHM8YW55PjtcbiAgbmFtZTogc3RyaW5nO1xufTtcblxuZXhwb3J0IHR5cGUgRmllbGRBcnJheUNvbmZpZyA9IHtcbiAgLyoqIFJlYWxseSB0aGUgcGF0aCB0byB0aGUgYXJyYXkgZmllbGQgdG8gYmUgdXBkYXRlZCAqL1xuICBuYW1lOiBzdHJpbmc7XG4gIC8qKiBTaG91bGQgZmllbGQgYXJyYXkgdmFsaWRhdGUgdGhlIGZvcm0gQUZURVIgYXJyYXkgdXBkYXRlcy9jaGFuZ2VzPyAqL1xuICB2YWxpZGF0ZU9uQ2hhbmdlPzogYm9vbGVhbjtcbn0gJiBTaGFyZWRSZW5kZXJQcm9wczxGaWVsZEFycmF5UmVuZGVyUHJvcHM+O1xuZXhwb3J0IGludGVyZmFjZSBBcnJheUhlbHBlcnMge1xuICAvKiogSW1wZXJhdGl2ZWx5IGFkZCBhIHZhbHVlIHRvIHRoZSBlbmQgb2YgYW4gYXJyYXkgKi9cbiAgcHVzaDogKG9iajogYW55KSA9PiB2b2lkO1xuICAvKiogQ3VycmllZCBmbiB0byBhZGQgYSB2YWx1ZSB0byB0aGUgZW5kIG9mIGFuIGFycmF5ICovXG4gIGhhbmRsZVB1c2g6IChvYmo6IGFueSkgPT4gKCkgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSBzd2FwIHR3byB2YWx1ZXMgaW4gYW4gYXJyYXkgKi9cbiAgc3dhcDogKGluZGV4QTogbnVtYmVyLCBpbmRleEI6IG51bWJlcikgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gc3dhcCB0d28gdmFsdWVzIGluIGFuIGFycmF5ICovXG4gIGhhbmRsZVN3YXA6IChpbmRleEE6IG51bWJlciwgaW5kZXhCOiBudW1iZXIpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgbW92ZSBhbiBlbGVtZW50IGluIGFuIGFycmF5IHRvIGFub3RoZXIgaW5kZXggKi9cbiAgbW92ZTogKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gdm9pZDtcbiAgLyoqIEltcGVyYXRpdmVseSBtb3ZlIGFuIGVsZW1lbnQgaW4gYW4gYXJyYXkgdG8gYW5vdGhlciBpbmRleCAqL1xuICBoYW5kbGVNb3ZlOiAoZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IGluc2VydCBhbiBlbGVtZW50IGF0IGEgZ2l2ZW4gaW5kZXggaW50byB0aGUgYXJyYXkgKi9cbiAgaW5zZXJ0OiAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT4gdm9pZDtcbiAgLyoqIEN1cnJpZWQgZm4gdG8gaW5zZXJ0IGFuIGVsZW1lbnQgYXQgYSBnaXZlbiBpbmRleCBpbnRvIHRoZSBhcnJheSAqL1xuICBoYW5kbGVJbnNlcnQ6IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IHJlcGxhY2UgYSB2YWx1ZSBhdCBhbiBpbmRleCBvZiBhbiBhcnJheSAgKi9cbiAgcmVwbGFjZTogKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIHJlcGxhY2UgYW4gZWxlbWVudCBhdCBhIGdpdmVuIGluZGV4IGludG8gdGhlIGFycmF5ICovXG4gIGhhbmRsZVJlcGxhY2U6IChpbmRleDogbnVtYmVyLCB2YWx1ZTogYW55KSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IGFkZCBhbiBlbGVtZW50IHRvIHRoZSBiZWdpbm5pbmcgb2YgYW4gYXJyYXkgYW5kIHJldHVybiBpdHMgbGVuZ3RoICovXG4gIHVuc2hpZnQ6ICh2YWx1ZTogYW55KSA9PiBudW1iZXI7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIGFkZCBhbiBlbGVtZW50IHRvIHRoZSBiZWdpbm5pbmcgb2YgYW4gYXJyYXkgKi9cbiAgaGFuZGxlVW5zaGlmdDogKHZhbHVlOiBhbnkpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIHJlbW92ZSBhbiBlbGVtZW50IGF0IGFuIGluZGV4IG9mIGFuIGFycmF5ICovXG4gIGhhbmRsZVJlbW92ZTogKGluZGV4OiBudW1iZXIpID0+ICgpID0+IHZvaWQ7XG4gIC8qKiBDdXJyaWVkIGZuIHRvIHJlbW92ZSBhIHZhbHVlIGZyb20gdGhlIGVuZCBvZiB0aGUgYXJyYXkgKi9cbiAgaGFuZGxlUG9wOiAoKSA9PiAoKSA9PiB2b2lkO1xuICAvKiogSW1wZXJhdGl2ZWx5IHJlbW92ZSBhbmQgZWxlbWVudCBhdCBhbiBpbmRleCBvZiBhbiBhcnJheSAqL1xuICByZW1vdmU8VD4oaW5kZXg6IG51bWJlcik6IFQgfCB1bmRlZmluZWQ7XG4gIC8qKiBJbXBlcmF0aXZlbHkgcmVtb3ZlIGFuZCByZXR1cm4gdmFsdWUgZnJvbSB0aGUgZW5kIG9mIHRoZSBhcnJheSAqL1xuICBwb3A8VD4oKTogVCB8IHVuZGVmaW5lZDtcbn1cblxuLyoqXG4gKiBTb21lIGFycmF5IGhlbHBlcnMhXG4gKi9cbmV4cG9ydCBjb25zdCBtb3ZlID0gKGFycmF5OiBhbnlbXSwgZnJvbTogbnVtYmVyLCB0bzogbnVtYmVyKSA9PiB7XG4gIGNvbnN0IGNvcHkgPSBjb3B5QXJyYXlMaWtlKGFycmF5KTtcbiAgY29uc3QgdmFsdWUgPSBjb3B5W2Zyb21dO1xuICBjb3B5LnNwbGljZShmcm9tLCAxKTtcbiAgY29weS5zcGxpY2UodG8sIDAsIHZhbHVlKTtcbiAgcmV0dXJuIGNvcHk7XG59O1xuXG5leHBvcnQgY29uc3Qgc3dhcCA9IChcbiAgYXJyYXlMaWtlOiBBcnJheUxpa2U8YW55PixcbiAgaW5kZXhBOiBudW1iZXIsXG4gIGluZGV4QjogbnVtYmVyXG4pID0+IHtcbiAgY29uc3QgY29weSA9IGNvcHlBcnJheUxpa2UoYXJyYXlMaWtlKTtcbiAgY29uc3QgYSA9IGNvcHlbaW5kZXhBXTtcbiAgY29weVtpbmRleEFdID0gY29weVtpbmRleEJdO1xuICBjb3B5W2luZGV4Ql0gPSBhO1xuICByZXR1cm4gY29weTtcbn07XG5cbmV4cG9ydCBjb25zdCBpbnNlcnQgPSAoXG4gIGFycmF5TGlrZTogQXJyYXlMaWtlPGFueT4sXG4gIGluZGV4OiBudW1iZXIsXG4gIHZhbHVlOiBhbnlcbikgPT4ge1xuICBjb25zdCBjb3B5ID0gY29weUFycmF5TGlrZShhcnJheUxpa2UpO1xuICBjb3B5LnNwbGljZShpbmRleCwgMCwgdmFsdWUpO1xuICByZXR1cm4gY29weTtcbn07XG5cbmV4cG9ydCBjb25zdCByZXBsYWNlID0gKFxuICBhcnJheUxpa2U6IEFycmF5TGlrZTxhbnk+LFxuICBpbmRleDogbnVtYmVyLFxuICB2YWx1ZTogYW55XG4pID0+IHtcbiAgY29uc3QgY29weSA9IGNvcHlBcnJheUxpa2UoYXJyYXlMaWtlKTtcbiAgY29weVtpbmRleF0gPSB2YWx1ZTtcbiAgcmV0dXJuIGNvcHk7XG59O1xuXG5jb25zdCBjb3B5QXJyYXlMaWtlID0gKGFycmF5TGlrZTogQXJyYXlMaWtlPGFueT4pID0+IHtcbiAgaWYgKCFhcnJheUxpa2UpIHtcbiAgICByZXR1cm4gW107XG4gIH0gZWxzZSBpZiAoQXJyYXkuaXNBcnJheShhcnJheUxpa2UpKSB7XG4gICAgcmV0dXJuIFsuLi5hcnJheUxpa2VdO1xuICB9IGVsc2Uge1xuICAgIGNvbnN0IG1heEluZGV4ID0gT2JqZWN0LmtleXMoYXJyYXlMaWtlKVxuICAgICAgLm1hcChrZXkgPT4gcGFyc2VJbnQoa2V5KSlcbiAgICAgIC5yZWR1Y2UoKG1heCwgZWwpID0+IChlbCA+IG1heCA/IGVsIDogbWF4KSwgMCk7XG4gICAgcmV0dXJuIEFycmF5LmZyb20oeyAuLi5hcnJheUxpa2UsIGxlbmd0aDogbWF4SW5kZXggKyAxIH0pO1xuICB9XG59O1xuXG5jbGFzcyBGaWVsZEFycmF5SW5uZXI8VmFsdWVzID0ge30+IGV4dGVuZHMgUmVhY3QuQ29tcG9uZW50PFxuICBGaWVsZEFycmF5Q29uZmlnICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPFZhbHVlcz4gfSxcbiAge31cbj4ge1xuICBzdGF0aWMgZGVmYXVsdFByb3BzID0ge1xuICAgIHZhbGlkYXRlT25DaGFuZ2U6IHRydWUsXG4gIH07XG5cbiAgY29uc3RydWN0b3IocHJvcHM6IEZpZWxkQXJyYXlDb25maWcgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9KSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIC8vIFdlIG5lZWQgVHlwZVNjcmlwdCBnZW5lcmljcyBvbiB0aGVzZSwgc28gd2UnbGwgYmluZCB0aGVtIGluIHRoZSBjb25zdHJ1Y3RvclxuICAgIC8vIEB0b2RvIEZpeCBUUyAzLjIuMVxuICAgIHRoaXMucmVtb3ZlID0gdGhpcy5yZW1vdmUuYmluZCh0aGlzKSBhcyBhbnk7XG4gICAgdGhpcy5wb3AgPSB0aGlzLnBvcC5iaW5kKHRoaXMpIGFzIGFueTtcbiAgfVxuXG4gIGNvbXBvbmVudERpZFVwZGF0ZShcbiAgICBwcmV2UHJvcHM6IEZpZWxkQXJyYXlDb25maWcgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8VmFsdWVzPiB9XG4gICkge1xuICAgIGlmIChcbiAgICAgICFpc0VxdWFsKFxuICAgICAgICBnZXRJbihwcmV2UHJvcHMuZm9ybWlrLnZhbHVlcywgcHJldlByb3BzLm5hbWUpLFxuICAgICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay52YWx1ZXMsIHRoaXMucHJvcHMubmFtZSlcbiAgICAgICkgJiZcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnZhbGlkYXRlT25DaGFuZ2VcbiAgICApIHtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnZhbGlkYXRlRm9ybSh0aGlzLnByb3BzLmZvcm1pay52YWx1ZXMpO1xuICAgIH1cbiAgfVxuXG4gIHVwZGF0ZUFycmF5RmllbGQgPSAoXG4gICAgZm46IEZ1bmN0aW9uLFxuICAgIGFsdGVyVG91Y2hlZDogYm9vbGVhbiB8IEZ1bmN0aW9uLFxuICAgIGFsdGVyRXJyb3JzOiBib29sZWFuIHwgRnVuY3Rpb25cbiAgKSA9PiB7XG4gICAgY29uc3Qge1xuICAgICAgbmFtZSxcblxuICAgICAgZm9ybWlrOiB7IHNldEZvcm1pa1N0YXRlIH0sXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgc2V0Rm9ybWlrU3RhdGUoKHByZXZTdGF0ZTogRm9ybWlrU3RhdGU8YW55PikgPT4ge1xuICAgICAgbGV0IHVwZGF0ZUVycm9ycyA9IHR5cGVvZiBhbHRlckVycm9ycyA9PT0gJ2Z1bmN0aW9uJyA/IGFsdGVyRXJyb3JzIDogZm47XG4gICAgICBsZXQgdXBkYXRlVG91Y2hlZCA9XG4gICAgICAgIHR5cGVvZiBhbHRlclRvdWNoZWQgPT09ICdmdW5jdGlvbicgPyBhbHRlclRvdWNoZWQgOiBmbjtcblxuICAgICAgLy8gdmFsdWVzIGZuIHNob3VsZCBiZSBleGVjdXRlZCBiZWZvcmUgdXBkYXRlRXJyb3JzIGFuZCB1cGRhdGVUb3VjaGVkLFxuICAgICAgLy8gb3RoZXJ3aXNlIGl0IGNhdXNlcyBhbiBlcnJvciB3aXRoIHVuc2hpZnQuXG4gICAgICBsZXQgdmFsdWVzID0gc2V0SW4oXG4gICAgICAgIHByZXZTdGF0ZS52YWx1ZXMsXG4gICAgICAgIG5hbWUsXG4gICAgICAgIGZuKGdldEluKHByZXZTdGF0ZS52YWx1ZXMsIG5hbWUpKVxuICAgICAgKTtcblxuICAgICAgbGV0IGZpZWxkRXJyb3IgPSBhbHRlckVycm9yc1xuICAgICAgICA/IHVwZGF0ZUVycm9ycyhnZXRJbihwcmV2U3RhdGUuZXJyb3JzLCBuYW1lKSlcbiAgICAgICAgOiB1bmRlZmluZWQ7XG4gICAgICBsZXQgZmllbGRUb3VjaGVkID0gYWx0ZXJUb3VjaGVkXG4gICAgICAgID8gdXBkYXRlVG91Y2hlZChnZXRJbihwcmV2U3RhdGUudG91Y2hlZCwgbmFtZSkpXG4gICAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgICBpZiAoaXNFbXB0eUFycmF5KGZpZWxkRXJyb3IpKSB7XG4gICAgICAgIGZpZWxkRXJyb3IgPSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgICBpZiAoaXNFbXB0eUFycmF5KGZpZWxkVG91Y2hlZCkpIHtcbiAgICAgICAgZmllbGRUb3VjaGVkID0gdW5kZWZpbmVkO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICAuLi5wcmV2U3RhdGUsXG4gICAgICAgIHZhbHVlcyxcbiAgICAgICAgZXJyb3JzOiBhbHRlckVycm9yc1xuICAgICAgICAgID8gc2V0SW4ocHJldlN0YXRlLmVycm9ycywgbmFtZSwgZmllbGRFcnJvcilcbiAgICAgICAgICA6IHByZXZTdGF0ZS5lcnJvcnMsXG4gICAgICAgIHRvdWNoZWQ6IGFsdGVyVG91Y2hlZFxuICAgICAgICAgID8gc2V0SW4ocHJldlN0YXRlLnRvdWNoZWQsIG5hbWUsIGZpZWxkVG91Y2hlZClcbiAgICAgICAgICA6IHByZXZTdGF0ZS50b3VjaGVkLFxuICAgICAgfTtcbiAgICB9KTtcbiAgfTtcblxuICBwdXNoID0gKHZhbHVlOiBhbnkpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgKGFycmF5TGlrZTogQXJyYXlMaWtlPGFueT4pID0+IFtcbiAgICAgICAgLi4uY29weUFycmF5TGlrZShhcnJheUxpa2UpLFxuICAgICAgICBjbG9uZURlZXAodmFsdWUpLFxuICAgICAgXSxcbiAgICAgIGZhbHNlLFxuICAgICAgZmFsc2VcbiAgICApO1xuXG4gIGhhbmRsZVB1c2ggPSAodmFsdWU6IGFueSkgPT4gKCkgPT4gdGhpcy5wdXNoKHZhbHVlKTtcblxuICBzd2FwID0gKGluZGV4QTogbnVtYmVyLCBpbmRleEI6IG51bWJlcikgPT5cbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiBzd2FwKGFycmF5LCBpbmRleEEsIGluZGV4QiksXG4gICAgICB0cnVlLFxuICAgICAgdHJ1ZVxuICAgICk7XG5cbiAgaGFuZGxlU3dhcCA9IChpbmRleEE6IG51bWJlciwgaW5kZXhCOiBudW1iZXIpID0+ICgpID0+XG4gICAgdGhpcy5zd2FwKGluZGV4QSwgaW5kZXhCKTtcblxuICBtb3ZlID0gKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT5cbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoKGFycmF5OiBhbnlbXSkgPT4gbW92ZShhcnJheSwgZnJvbSwgdG8pLCB0cnVlLCB0cnVlKTtcblxuICBoYW5kbGVNb3ZlID0gKGZyb206IG51bWJlciwgdG86IG51bWJlcikgPT4gKCkgPT4gdGhpcy5tb3ZlKGZyb20sIHRvKTtcblxuICBpbnNlcnQgPSAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT5cbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiBpbnNlcnQoYXJyYXksIGluZGV4LCB2YWx1ZSksXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiBpbnNlcnQoYXJyYXksIGluZGV4LCBudWxsKSxcbiAgICAgIChhcnJheTogYW55W10pID0+IGluc2VydChhcnJheSwgaW5kZXgsIG51bGwpXG4gICAgKTtcblxuICBoYW5kbGVJbnNlcnQgPSAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT4gKCkgPT4gdGhpcy5pbnNlcnQoaW5kZXgsIHZhbHVlKTtcblxuICByZXBsYWNlID0gKGluZGV4OiBudW1iZXIsIHZhbHVlOiBhbnkpID0+XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4gcmVwbGFjZShhcnJheSwgaW5kZXgsIHZhbHVlKSxcbiAgICAgIGZhbHNlLFxuICAgICAgZmFsc2VcbiAgICApO1xuXG4gIGhhbmRsZVJlcGxhY2UgPSAoaW5kZXg6IG51bWJlciwgdmFsdWU6IGFueSkgPT4gKCkgPT5cbiAgICB0aGlzLnJlcGxhY2UoaW5kZXgsIHZhbHVlKTtcblxuICB1bnNoaWZ0ID0gKHZhbHVlOiBhbnkpID0+IHtcbiAgICBsZXQgbGVuZ3RoID0gLTE7XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBhcnJheSA/IFt2YWx1ZSwgLi4uYXJyYXldIDogW3ZhbHVlXTtcbiAgICAgICAgaWYgKGxlbmd0aCA8IDApIHtcbiAgICAgICAgICBsZW5ndGggPSBhcnIubGVuZ3RoO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBhcnI7XG4gICAgICB9LFxuICAgICAgKGFycmF5OiBhbnlbXSkgPT4ge1xuICAgICAgICBjb25zdCBhcnIgPSBhcnJheSA/IFtudWxsLCAuLi5hcnJheV0gOiBbbnVsbF07XG4gICAgICAgIGlmIChsZW5ndGggPCAwKSB7XG4gICAgICAgICAgbGVuZ3RoID0gYXJyLmxlbmd0aDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gYXJyO1xuICAgICAgfSxcbiAgICAgIChhcnJheTogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgYXJyID0gYXJyYXkgPyBbbnVsbCwgLi4uYXJyYXldIDogW251bGxdO1xuICAgICAgICBpZiAobGVuZ3RoIDwgMCkge1xuICAgICAgICAgIGxlbmd0aCA9IGFyci5sZW5ndGg7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGFycjtcbiAgICAgIH1cbiAgICApO1xuICAgIHJldHVybiBsZW5ndGg7XG4gIH07XG5cbiAgaGFuZGxlVW5zaGlmdCA9ICh2YWx1ZTogYW55KSA9PiAoKSA9PiB0aGlzLnVuc2hpZnQodmFsdWUpO1xuXG4gIHJlbW92ZTxUPihpbmRleDogbnVtYmVyKTogVCB7XG4gICAgLy8gV2UgbmVlZCB0byBtYWtlIHN1cmUgd2UgYWxzbyByZW1vdmUgcmVsZXZhbnQgcGllY2VzIG9mIGB0b3VjaGVkYCBhbmQgYGVycm9yc2BcbiAgICBsZXQgcmVzdWx0OiBhbnk7XG4gICAgdGhpcy51cGRhdGVBcnJheUZpZWxkKFxuICAgICAgLy8gc28gdGhpcyBnZXRzIGNhbGwgMyB0aW1lc1xuICAgICAgKGFycmF5PzogYW55W10pID0+IHtcbiAgICAgICAgY29uc3QgY29weSA9IGFycmF5ID8gY29weUFycmF5TGlrZShhcnJheSkgOiBbXTtcbiAgICAgICAgaWYgKCFyZXN1bHQpIHtcbiAgICAgICAgICByZXN1bHQgPSBjb3B5W2luZGV4XTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNGdW5jdGlvbihjb3B5LnNwbGljZSkpIHtcbiAgICAgICAgICBjb3B5LnNwbGljZShpbmRleCwgMSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNvcHk7XG4gICAgICB9LFxuICAgICAgdHJ1ZSxcbiAgICAgIHRydWVcbiAgICApO1xuXG4gICAgcmV0dXJuIHJlc3VsdCBhcyBUO1xuICB9XG5cbiAgaGFuZGxlUmVtb3ZlID0gKGluZGV4OiBudW1iZXIpID0+ICgpID0+IHRoaXMucmVtb3ZlPGFueT4oaW5kZXgpO1xuXG4gIHBvcDxUPigpOiBUIHtcbiAgICAvLyBSZW1vdmUgcmVsZXZhbnQgcGllY2VzIG9mIGB0b3VjaGVkYCBhbmQgYGVycm9yc2AgdG9vIVxuICAgIGxldCByZXN1bHQ6IGFueTtcbiAgICB0aGlzLnVwZGF0ZUFycmF5RmllbGQoXG4gICAgICAvLyBzbyB0aGlzIGdldHMgY2FsbCAzIHRpbWVzXG4gICAgICAoYXJyYXk6IGFueVtdKSA9PiB7XG4gICAgICAgIGNvbnN0IHRtcCA9IGFycmF5O1xuICAgICAgICBpZiAoIXJlc3VsdCkge1xuICAgICAgICAgIHJlc3VsdCA9IHRtcCAmJiB0bXAucG9wICYmIHRtcC5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdG1wO1xuICAgICAgfSxcbiAgICAgIHRydWUsXG4gICAgICB0cnVlXG4gICAgKTtcblxuICAgIHJldHVybiByZXN1bHQgYXMgVDtcbiAgfVxuXG4gIGhhbmRsZVBvcCA9ICgpID0+ICgpID0+IHRoaXMucG9wPGFueT4oKTtcblxuICByZW5kZXIoKSB7XG4gICAgY29uc3QgYXJyYXlIZWxwZXJzOiBBcnJheUhlbHBlcnMgPSB7XG4gICAgICBwdXNoOiB0aGlzLnB1c2gsXG4gICAgICBwb3A6IHRoaXMucG9wLFxuICAgICAgc3dhcDogdGhpcy5zd2FwLFxuICAgICAgbW92ZTogdGhpcy5tb3ZlLFxuICAgICAgaW5zZXJ0OiB0aGlzLmluc2VydCxcbiAgICAgIHJlcGxhY2U6IHRoaXMucmVwbGFjZSxcbiAgICAgIHVuc2hpZnQ6IHRoaXMudW5zaGlmdCxcbiAgICAgIHJlbW92ZTogdGhpcy5yZW1vdmUsXG4gICAgICBoYW5kbGVQdXNoOiB0aGlzLmhhbmRsZVB1c2gsXG4gICAgICBoYW5kbGVQb3A6IHRoaXMuaGFuZGxlUG9wLFxuICAgICAgaGFuZGxlU3dhcDogdGhpcy5oYW5kbGVTd2FwLFxuICAgICAgaGFuZGxlTW92ZTogdGhpcy5oYW5kbGVNb3ZlLFxuICAgICAgaGFuZGxlSW5zZXJ0OiB0aGlzLmhhbmRsZUluc2VydCxcbiAgICAgIGhhbmRsZVJlcGxhY2U6IHRoaXMuaGFuZGxlUmVwbGFjZSxcbiAgICAgIGhhbmRsZVVuc2hpZnQ6IHRoaXMuaGFuZGxlVW5zaGlmdCxcbiAgICAgIGhhbmRsZVJlbW92ZTogdGhpcy5oYW5kbGVSZW1vdmUsXG4gICAgfTtcblxuICAgIGNvbnN0IHtcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIHJlbmRlcixcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgbmFtZSxcbiAgICAgIGZvcm1pazoge1xuICAgICAgICB2YWxpZGF0ZTogX3ZhbGlkYXRlLFxuICAgICAgICB2YWxpZGF0aW9uU2NoZW1hOiBfdmFsaWRhdGlvblNjaGVtYSxcbiAgICAgICAgLi4ucmVzdE9mRm9ybWlrXG4gICAgICB9LFxuICAgIH0gPSB0aGlzLnByb3BzO1xuXG4gICAgY29uc3QgcHJvcHM6IEZpZWxkQXJyYXlSZW5kZXJQcm9wcyA9IHtcbiAgICAgIC4uLmFycmF5SGVscGVycyxcbiAgICAgIGZvcm06IHJlc3RPZkZvcm1payxcbiAgICAgIG5hbWUsXG4gICAgfTtcblxuICAgIHJldHVybiBjb21wb25lbnRcbiAgICAgID8gUmVhY3QuY3JlYXRlRWxlbWVudChjb21wb25lbnQgYXMgYW55LCBwcm9wcylcbiAgICAgIDogcmVuZGVyXG4gICAgICA/IChyZW5kZXIgYXMgYW55KShwcm9wcylcbiAgICAgIDogY2hpbGRyZW4gLy8gY2hpbGRyZW4gY29tZSBsYXN0LCBhbHdheXMgY2FsbGVkXG4gICAgICA/IHR5cGVvZiBjaGlsZHJlbiA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICA/IChjaGlsZHJlbiBhcyBhbnkpKHByb3BzKVxuICAgICAgICA6ICFpc0VtcHR5Q2hpbGRyZW4oY2hpbGRyZW4pXG4gICAgICAgID8gUmVhY3QuQ2hpbGRyZW4ub25seShjaGlsZHJlbilcbiAgICAgICAgOiBudWxsXG4gICAgICA6IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEZpZWxkQXJyYXkgPSBjb25uZWN0PEZpZWxkQXJyYXlDb25maWcsIGFueT4oRmllbGRBcnJheUlubmVyKTtcbiIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IEZvcm1pa0NvbnRleHRUeXBlIH0gZnJvbSAnLi90eXBlcyc7XG5pbXBvcnQgeyBnZXRJbiwgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgY29ubmVjdCB9IGZyb20gJy4vY29ubmVjdCc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRXJyb3JNZXNzYWdlUHJvcHMge1xuICBuYW1lOiBzdHJpbmc7XG4gIGNsYXNzTmFtZT86IHN0cmluZztcbiAgY29tcG9uZW50Pzogc3RyaW5nIHwgUmVhY3QuQ29tcG9uZW50VHlwZTtcbiAgY2hpbGRyZW4/OiAoZXJyb3JNZXNzYWdlOiBzdHJpbmcpID0+IFJlYWN0LlJlYWN0Tm9kZTtcbiAgcmVuZGVyPzogKGVycm9yTWVzc2FnZTogc3RyaW5nKSA9PiBSZWFjdC5SZWFjdE5vZGU7XG59XG5cbmNsYXNzIEVycm9yTWVzc2FnZUltcGwgZXh0ZW5kcyBSZWFjdC5Db21wb25lbnQ8XG4gIEVycm9yTWVzc2FnZVByb3BzICYgeyBmb3JtaWs6IEZvcm1pa0NvbnRleHRUeXBlPGFueT4gfVxuPiB7XG4gIHNob3VsZENvbXBvbmVudFVwZGF0ZShcbiAgICBwcm9wczogRXJyb3JNZXNzYWdlUHJvcHMgJiB7IGZvcm1pazogRm9ybWlrQ29udGV4dFR5cGU8YW55PiB9XG4gICkge1xuICAgIGlmIChcbiAgICAgIGdldEluKHRoaXMucHJvcHMuZm9ybWlrLmVycm9ycywgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLmVycm9ycywgdGhpcy5wcm9wcy5uYW1lKSB8fFxuICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudG91Y2hlZCwgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLnRvdWNoZWQsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgIE9iamVjdC5rZXlzKHRoaXMucHJvcHMpLmxlbmd0aCAhPT0gT2JqZWN0LmtleXMocHJvcHMpLmxlbmd0aFxuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICByZW5kZXIoKSB7XG4gICAgbGV0IHsgY29tcG9uZW50LCBmb3JtaWssIHJlbmRlciwgY2hpbGRyZW4sIG5hbWUsIC4uLnJlc3QgfSA9IHRoaXMucHJvcHM7XG5cbiAgICBjb25zdCB0b3VjaCA9IGdldEluKGZvcm1pay50b3VjaGVkLCBuYW1lKTtcbiAgICBjb25zdCBlcnJvciA9IGdldEluKGZvcm1pay5lcnJvcnMsIG5hbWUpO1xuXG4gICAgcmV0dXJuICEhdG91Y2ggJiYgISFlcnJvclxuICAgICAgPyByZW5kZXJcbiAgICAgICAgPyBpc0Z1bmN0aW9uKHJlbmRlcilcbiAgICAgICAgICA/IHJlbmRlcihlcnJvcilcbiAgICAgICAgICA6IG51bGxcbiAgICAgICAgOiBjaGlsZHJlblxuICAgICAgICA/IGlzRnVuY3Rpb24oY2hpbGRyZW4pXG4gICAgICAgICAgPyBjaGlsZHJlbihlcnJvcilcbiAgICAgICAgICA6IG51bGxcbiAgICAgICAgOiBjb21wb25lbnRcbiAgICAgICAgPyBSZWFjdC5jcmVhdGVFbGVtZW50KGNvbXBvbmVudCwgcmVzdCBhcyBhbnksIGVycm9yKVxuICAgICAgICA6IGVycm9yXG4gICAgICA6IG51bGw7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IEVycm9yTWVzc2FnZSA9IGNvbm5lY3Q8XG4gIEVycm9yTWVzc2FnZVByb3BzLFxuICBFcnJvck1lc3NhZ2VQcm9wcyAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxhbnk+IH1cbj4oRXJyb3JNZXNzYWdlSW1wbCk7XG4iLCJpbXBvcnQgKiBhcyBSZWFjdCBmcm9tICdyZWFjdCc7XG5cbmltcG9ydCB7XG4gIEZvcm1pa1Byb3BzLFxuICBHZW5lcmljRmllbGRIVE1MQXR0cmlidXRlcyxcbiAgRm9ybWlrQ29udGV4dFR5cGUsXG4gIEZpZWxkTWV0YVByb3BzLFxuICBGaWVsZElucHV0UHJvcHMsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IGludmFyaWFudCBmcm9tICd0aW55LXdhcm5pbmcnO1xuaW1wb3J0IHsgZ2V0SW4sIGlzRW1wdHlDaGlsZHJlbiwgaXNGdW5jdGlvbiB9IGZyb20gJy4vdXRpbHMnO1xuaW1wb3J0IHsgRmllbGRDb25maWcgfSBmcm9tICcuL0ZpZWxkJztcbmltcG9ydCB7IGNvbm5lY3QgfSBmcm9tICcuL2Nvbm5lY3QnO1xuXG50eXBlICRGaXhNZSA9IGFueTtcblxuZXhwb3J0IGludGVyZmFjZSBGYXN0RmllbGRQcm9wczxWID0gYW55PiB7XG4gIGZpZWxkOiBGaWVsZElucHV0UHJvcHM8Vj47XG4gIG1ldGE6IEZpZWxkTWV0YVByb3BzPFY+O1xuICBmb3JtOiBGb3JtaWtQcm9wczxWPjsgLy8gaWYgcHBsIHdhbnQgdG8gcmVzdHJpY3QgdGhpcyBmb3IgYSBnaXZlbiBmb3JtLCBsZXQgdGhlbS5cbn1cblxuZXhwb3J0IHR5cGUgRmFzdEZpZWxkQ29uZmlnPFQ+ID0gRmllbGRDb25maWcgJiB7XG4gIC8qKiBPdmVycmlkZSBGYXN0RmllbGQncyBkZWZhdWx0IHNob3VsZENvbXBvbmVudFVwZGF0ZSAqL1xuICBzaG91bGRVcGRhdGU/OiAoXG4gICAgbmV4dFByb3BzOiBUICYgR2VuZXJpY0ZpZWxkSFRNTEF0dHJpYnV0ZXMsXG4gICAgcHJvcHM6IHt9XG4gICkgPT4gYm9vbGVhbjtcbn07XG5cbmV4cG9ydCB0eXBlIEZhc3RGaWVsZEF0dHJpYnV0ZXM8VD4gPSBHZW5lcmljRmllbGRIVE1MQXR0cmlidXRlcyAmXG4gIEZhc3RGaWVsZENvbmZpZzxUPiAmXG4gIFQ7XG5cbnR5cGUgRmFzdEZpZWxkSW5uZXJQcm9wczxWYWx1ZXMgPSB7fSwgUHJvcHMgPSB7fT4gPSBGYXN0RmllbGRBdHRyaWJ1dGVzPFxuICBQcm9wc1xuPiAmIHsgZm9ybWlrOiBGb3JtaWtDb250ZXh0VHlwZTxWYWx1ZXM+IH07XG5cbi8qKlxuICogQ3VzdG9tIEZpZWxkIGNvbXBvbmVudCBmb3IgcXVpY2tseSBob29raW5nIGludG8gRm9ybWlrXG4gKiBjb250ZXh0IGFuZCB3aXJpbmcgdXAgZm9ybXMuXG4gKi9cbmNsYXNzIEZhc3RGaWVsZElubmVyPFZhbHVlcyA9IHt9LCBQcm9wcyA9IHt9PiBleHRlbmRzIFJlYWN0LkNvbXBvbmVudDxcbiAgRmFzdEZpZWxkSW5uZXJQcm9wczxWYWx1ZXMsIFByb3BzPixcbiAge31cbj4ge1xuICBjb25zdHJ1Y3Rvcihwcm9wczogRmFzdEZpZWxkSW5uZXJQcm9wczxWYWx1ZXMsIFByb3BzPikge1xuICAgIHN1cGVyKHByb3BzKTtcbiAgICBjb25zdCB7IHJlbmRlciwgY2hpbGRyZW4sIGNvbXBvbmVudCwgYXM6IGlzLCBuYW1lIH0gPSBwcm9wcztcbiAgICBpbnZhcmlhbnQoXG4gICAgICAhcmVuZGVyLFxuICAgICAgYDxGYXN0RmllbGQgcmVuZGVyPiBoYXMgYmVlbiBkZXByZWNhdGVkLiBQbGVhc2UgdXNlIGEgY2hpbGQgY2FsbGJhY2sgZnVuY3Rpb24gaW5zdGVhZDogPEZhc3RGaWVsZCBuYW1lPXske25hbWV9fT57cHJvcHMgPT4gLi4ufTwvRmFzdEZpZWxkPiBpbnN0ZWFkLmBcbiAgICApO1xuICAgIGludmFyaWFudChcbiAgICAgICEoY29tcG9uZW50ICYmIHJlbmRlciksXG4gICAgICAnWW91IHNob3VsZCBub3QgdXNlIDxGYXN0RmllbGQgY29tcG9uZW50PiBhbmQgPEZhc3RGaWVsZCByZW5kZXI+IGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjb21wb25lbnQ+IHdpbGwgYmUgaWdub3JlZCdcbiAgICApO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgIShpcyAmJiBjaGlsZHJlbiAmJiBpc0Z1bmN0aW9uKGNoaWxkcmVuKSksXG4gICAgICAnWW91IHNob3VsZCBub3QgdXNlIDxGYXN0RmllbGQgYXM+IGFuZCA8RmFzdEZpZWxkIGNoaWxkcmVuPiBhcyBhIGZ1bmN0aW9uIGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBhcz4gd2lsbCBiZSBpZ25vcmVkLidcbiAgICApO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgIShjb21wb25lbnQgJiYgY2hpbGRyZW4gJiYgaXNGdW5jdGlvbihjaGlsZHJlbikpLFxuICAgICAgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIGNvbXBvbmVudD4gYW5kIDxGYXN0RmllbGQgY2hpbGRyZW4+IGFzIGEgZnVuY3Rpb24gaW4gdGhlIHNhbWUgPEZhc3RGaWVsZD4gY29tcG9uZW50OyA8RmFzdEZpZWxkIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkLidcbiAgICApO1xuXG4gICAgaW52YXJpYW50KFxuICAgICAgIShyZW5kZXIgJiYgY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpLFxuICAgICAgJ1lvdSBzaG91bGQgbm90IHVzZSA8RmFzdEZpZWxkIHJlbmRlcj4gYW5kIDxGYXN0RmllbGQgY2hpbGRyZW4+IGluIHRoZSBzYW1lIDxGYXN0RmllbGQ+IGNvbXBvbmVudDsgPEZhc3RGaWVsZCBjaGlsZHJlbj4gd2lsbCBiZSBpZ25vcmVkJ1xuICAgICk7XG4gIH1cblxuICBzaG91bGRDb21wb25lbnRVcGRhdGUocHJvcHM6IEZhc3RGaWVsZElubmVyUHJvcHM8VmFsdWVzLCBQcm9wcz4pIHtcbiAgICBpZiAodGhpcy5wcm9wcy5zaG91bGRVcGRhdGUpIHtcbiAgICAgIHJldHVybiB0aGlzLnByb3BzLnNob3VsZFVwZGF0ZShwcm9wcywgdGhpcy5wcm9wcyk7XG4gICAgfSBlbHNlIGlmIChcbiAgICAgIHByb3BzLm5hbWUgIT09IHRoaXMucHJvcHMubmFtZSB8fFxuICAgICAgZ2V0SW4ocHJvcHMuZm9ybWlrLnZhbHVlcywgdGhpcy5wcm9wcy5uYW1lKSAhPT1cbiAgICAgICAgZ2V0SW4odGhpcy5wcm9wcy5mb3JtaWsudmFsdWVzLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICBnZXRJbihwcm9wcy5mb3JtaWsuZXJyb3JzLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay5lcnJvcnMsIHRoaXMucHJvcHMubmFtZSkgfHxcbiAgICAgIGdldEluKHByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpICE9PVxuICAgICAgICBnZXRJbih0aGlzLnByb3BzLmZvcm1pay50b3VjaGVkLCB0aGlzLnByb3BzLm5hbWUpIHx8XG4gICAgICBPYmplY3Qua2V5cyh0aGlzLnByb3BzKS5sZW5ndGggIT09IE9iamVjdC5rZXlzKHByb3BzKS5sZW5ndGggfHxcbiAgICAgIHByb3BzLmZvcm1pay5pc1N1Ym1pdHRpbmcgIT09IHRoaXMucHJvcHMuZm9ybWlrLmlzU3VibWl0dGluZ1xuICAgICkge1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnREaWRNb3VudCgpIHtcbiAgICAvLyBSZWdpc3RlciB0aGUgRmllbGQgd2l0aCB0aGUgcGFyZW50IEZvcm1pay4gUGFyZW50IHdpbGwgY3ljbGUgdGhyb3VnaFxuICAgIC8vIHJlZ2lzdGVyZWQgRmllbGQncyB2YWxpZGF0ZSBmbnMgcmlnaHQgcHJpb3IgdG8gc3VibWl0XG4gICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHtcbiAgICAgIHZhbGlkYXRlOiB0aGlzLnByb3BzLnZhbGlkYXRlLFxuICAgIH0pO1xuICB9XG5cbiAgY29tcG9uZW50RGlkVXBkYXRlKHByZXZQcm9wczogRmFzdEZpZWxkQXR0cmlidXRlczxQcm9wcz4pIHtcbiAgICBpZiAodGhpcy5wcm9wcy5uYW1lICE9PSBwcmV2UHJvcHMubmFtZSkge1xuICAgICAgdGhpcy5wcm9wcy5mb3JtaWsudW5yZWdpc3RlckZpZWxkKHByZXZQcm9wcy5uYW1lKTtcbiAgICAgIHRoaXMucHJvcHMuZm9ybWlrLnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lLCB7XG4gICAgICAgIHZhbGlkYXRlOiB0aGlzLnByb3BzLnZhbGlkYXRlLFxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMucHJvcHMudmFsaWRhdGUgIT09IHByZXZQcm9wcy52YWxpZGF0ZSkge1xuICAgICAgdGhpcy5wcm9wcy5mb3JtaWsucmVnaXN0ZXJGaWVsZCh0aGlzLnByb3BzLm5hbWUsIHtcbiAgICAgICAgdmFsaWRhdGU6IHRoaXMucHJvcHMudmFsaWRhdGUsXG4gICAgICB9KTtcbiAgICB9XG4gIH1cblxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLnByb3BzLmZvcm1pay51bnJlZ2lzdGVyRmllbGQodGhpcy5wcm9wcy5uYW1lKTtcbiAgfVxuXG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCB7XG4gICAgICB2YWxpZGF0ZSxcbiAgICAgIG5hbWUsXG4gICAgICByZW5kZXIsXG4gICAgICBhczogaXMsXG4gICAgICBjaGlsZHJlbixcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIHNob3VsZFVwZGF0ZSxcbiAgICAgIGZvcm1payxcbiAgICAgIC4uLnByb3BzXG4gICAgfSA9IHRoaXMucHJvcHMgYXMgRmFzdEZpZWxkSW5uZXJQcm9wczxWYWx1ZXMsIFByb3BzPjtcblxuICAgIGNvbnN0IHtcbiAgICAgIHZhbGlkYXRlOiBfdmFsaWRhdGUsXG4gICAgICB2YWxpZGF0aW9uU2NoZW1hOiBfdmFsaWRhdGlvblNjaGVtYSxcbiAgICAgIC4uLnJlc3RPZkZvcm1pa1xuICAgIH0gPSBmb3JtaWs7XG4gICAgY29uc3QgZmllbGQgPSB7XG4gICAgICB2YWx1ZTpcbiAgICAgICAgcHJvcHMudHlwZSA9PT0gJ3JhZGlvJyB8fCBwcm9wcy50eXBlID09PSAnY2hlY2tib3gnXG4gICAgICAgICAgPyBwcm9wcy52YWx1ZSAvLyBSZWFjdCB1c2VzIGNoZWNrZWQ9e30gZm9yIHRoZXNlIGlucHV0c1xuICAgICAgICAgIDogZ2V0SW4oZm9ybWlrLnZhbHVlcywgbmFtZSksXG4gICAgICBuYW1lLFxuICAgICAgb25DaGFuZ2U6IGZvcm1pay5oYW5kbGVDaGFuZ2UsXG4gICAgICBvbkJsdXI6IGZvcm1pay5oYW5kbGVCbHVyLFxuICAgIH07XG4gICAgY29uc3QgbWV0YSA9IHtcbiAgICAgIHZhbHVlOiBnZXRJbihmb3JtaWsudmFsdWVzLCBuYW1lKSxcbiAgICAgIGVycm9yOiBnZXRJbihmb3JtaWsuZXJyb3JzLCBuYW1lKSxcbiAgICAgIHRvdWNoZWQ6ICEhZ2V0SW4oZm9ybWlrLnRvdWNoZWQsIG5hbWUpLFxuICAgICAgaW5pdGlhbFZhbHVlOiBnZXRJbihmb3JtaWsuaW5pdGlhbFZhbHVlcywgbmFtZSksXG4gICAgICBpbml0aWFsVG91Y2hlZDogISFnZXRJbihmb3JtaWsuaW5pdGlhbFRvdWNoZWQsIG5hbWUpLFxuICAgICAgaW5pdGlhbEVycm9yOiBnZXRJbihmb3JtaWsuaW5pdGlhbEVycm9ycywgbmFtZSksXG4gICAgfTtcblxuICAgIGNvbnN0IGJhZyA9IHsgZmllbGQsIG1ldGEsIGZvcm06IHJlc3RPZkZvcm1payB9O1xuXG4gICAgaWYgKHJlbmRlcikge1xuICAgICAgcmV0dXJuIChyZW5kZXIgYXMgYW55KShiYWcpO1xuICAgIH1cblxuICAgIGlmIChpc0Z1bmN0aW9uKGNoaWxkcmVuKSkge1xuICAgICAgcmV0dXJuIChjaGlsZHJlbiBhcyAocHJvcHM6IEZhc3RGaWVsZFByb3BzPGFueT4pID0+IFJlYWN0LlJlYWN0Tm9kZSkoYmFnKTtcbiAgICB9XG5cbiAgICBpZiAoY29tcG9uZW50KSB7XG4gICAgICAvLyBUaGlzIGJlaGF2aW9yIGlzIGJhY2t3YXJkcyBjb21wYXQgd2l0aCBlYXJsaWVyIEZvcm1payAwLjkgdG8gMS54XG4gICAgICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgY29uc3QgeyBpbm5lclJlZiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgICB7IHJlZjogaW5uZXJSZWYsIC4uLmZpZWxkLCAuLi4ocmVzdCBhcyAkRml4TWUpIH0sXG4gICAgICAgICAgY2hpbGRyZW5cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8vIFdlIGRvbid0IHBhc3MgYG1ldGFgIGZvciBiYWNrd2FyZHMgY29tcGF0XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgY29tcG9uZW50IGFzIFJlYWN0LkNvbXBvbmVudENsYXNzPCRGaXhNZT4sXG4gICAgICAgIHsgZmllbGQsIGZvcm06IGZvcm1paywgLi4ucHJvcHMgfSxcbiAgICAgICAgY2hpbGRyZW5cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gZGVmYXVsdCB0byBpbnB1dCBoZXJlIHNvIHdlIGNhbiBjaGVjayBmb3IgYm90aCBgYXNgIGFuZCBgY2hpbGRyZW5gIGFib3ZlXG4gICAgY29uc3QgYXNFbGVtZW50ID0gaXMgfHwgJ2lucHV0JztcblxuICAgIGlmICh0eXBlb2YgYXNFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgICAgY29uc3QgeyBpbm5lclJlZiwgLi4ucmVzdCB9ID0gcHJvcHM7XG4gICAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgICAgYXNFbGVtZW50LFxuICAgICAgICB7IHJlZjogaW5uZXJSZWYsIC4uLmZpZWxkLCAuLi4ocmVzdCBhcyAkRml4TWUpIH0sXG4gICAgICAgIGNoaWxkcmVuXG4gICAgICApO1xuICAgIH1cblxuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgYXNFbGVtZW50IGFzIFJlYWN0LkNvbXBvbmVudENsYXNzLFxuICAgICAgeyAuLi5maWVsZCwgLi4ucHJvcHMgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgRmFzdEZpZWxkID0gY29ubmVjdDxGYXN0RmllbGRBdHRyaWJ1dGVzPGFueT4sIGFueT4oRmFzdEZpZWxkSW5uZXIpO1xuIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IHMgZnJvbSAnLi9jc3MvZm9ybUhlYWRlci5zY3NzJ1xuXG5cbmZ1bmN0aW9uIEZvcm1IZWFkZXIocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHRhZyA9ICdoMicsXG4gICAgICAgIHR5cGUgPSAnaDInLFxuICAgICAgICB0ZXh0XG4gICAgfSA9IHByb3BzXG4gICAgXG4gICAgLy8g0KLQtdCzXG4gICAgY29uc3QgVGFnID0gdGFnXG4gICAgXG4gICAgLy8g0JrQu9Cw0YHRgdGLXG4gICAgbGV0IGNscyA9ICcnXG4gICAgaWYodHlwZSA9PT0gJ2gyJykgY2xzICs9IHMuaDJcbiAgICBpZih0eXBlID09PSAnaDMnKSBjbHMgKz0gcy5oM1xuICAgIFxuICAgIHJldHVybiA8VGFnIGNsYXNzTmFtZT17Y2xzfT57dGV4dH08L1RhZz5cbn1cblxuZXhwb3J0IGRlZmF1bHQgRm9ybUhlYWRlciIsImltcG9ydCBGb3JtSGVhZGVyIGZyb20gJy4vZm9ybUhlYWRlcidcbmV4cG9ydCBkZWZhdWx0IEZvcm1IZWFkZXIiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgJy4vY3NzL2Vycm9yLnNjc3MnXG5cblxuZnVuY3Rpb24gRXJyb3IocHJvcHMpIHtcbiAgICBjb25zdCB7XG4gICAgICAgIHRleHQgPSBgRXJyb3IgbWVzc2FnZSBkaWRuJ3QgcGFzc2VkYCwgLy8g0KLQtdC60YHRgiDQvtGI0LjQsdC60LhcbiAgICAgICAgaW5kZW50LFxuICAgIH0gPSBwcm9wc1xuICAgIFxuICAgIGxldCBjbHMgPSAnZXJyb3InXG4gICAgaWYoaW5kZW50ICogMSA9PT0gMSkgY2xzICs9ICcgZXJyb3ItLXBhZGRpbmctMSdcbiAgICBpZihpbmRlbnQgKiAxID09PSAyKSBjbHMgKz0gJyBlcnJvci0tcGFkZGluZy0yJ1xuICAgIGlmKGluZGVudCAqIDEgPT09IDMpIGNscyArPSAnIGVycm9yLS1wYWRkaW5nLTMnXG4gICAgXG4gICAgcmV0dXJuIDxwIGNsYXNzTmFtZT17Y2xzfT57dGV4dH08L3A+XG59XG5cblxuZXhwb3J0IGRlZmF1bHQgRXJyb3IiLCJpbXBvcnQgRXJyb3IgZnJvbSAnLi9lcnJvcidcbmV4cG9ydCBkZWZhdWx0IEVycm9yIiwiZnVuY3Rpb24gX2RlZmluZVByb3BlcnRpZXModGFyZ2V0LCBwcm9wcykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGRlc2NyaXB0b3IgPSBwcm9wc1tpXTtcbiAgICBkZXNjcmlwdG9yLmVudW1lcmFibGUgPSBkZXNjcmlwdG9yLmVudW1lcmFibGUgfHwgZmFsc2U7XG4gICAgZGVzY3JpcHRvci5jb25maWd1cmFibGUgPSB0cnVlO1xuICAgIGlmIChcInZhbHVlXCIgaW4gZGVzY3JpcHRvcikgZGVzY3JpcHRvci53cml0YWJsZSA9IHRydWU7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwgZGVzY3JpcHRvci5rZXksIGRlc2NyaXB0b3IpO1xuICB9XG59XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF9jcmVhdGVDbGFzcyhDb25zdHJ1Y3RvciwgcHJvdG9Qcm9wcywgc3RhdGljUHJvcHMpIHtcbiAgaWYgKHByb3RvUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLnByb3RvdHlwZSwgcHJvdG9Qcm9wcyk7XG4gIGlmIChzdGF0aWNQcm9wcykgX2RlZmluZVByb3BlcnRpZXMoQ29uc3RydWN0b3IsIHN0YXRpY1Byb3BzKTtcbiAgcmV0dXJuIENvbnN0cnVjdG9yO1xufSIsIi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzYCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb2JqZWN0XSBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IGtleSBUaGUga2V5IHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBrZXlgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBiYXNlSGFzKG9iamVjdCwga2V5KSB7XG4gIHJldHVybiBvYmplY3QgIT0gbnVsbCAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iamVjdCwga2V5KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUhhcztcbiIsImltcG9ydCBpc0FycmF5IGZyb20gJy4vaXNBcnJheS5qcyc7XG5pbXBvcnQgaXNTeW1ib2wgZnJvbSAnLi9pc1N5bWJvbC5qcyc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIHByb3BlcnR5IG5hbWVzIHdpdGhpbiBwcm9wZXJ0eSBwYXRocy4gKi9cbnZhciByZUlzRGVlcFByb3AgPSAvXFwufFxcWyg/OlteW1xcXV0qfChbXCInXSkoPzooPyFcXDEpW15cXFxcXXxcXFxcLikqP1xcMSlcXF0vLFxuICAgIHJlSXNQbGFpblByb3AgPSAvXlxcdyokLztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBhIHByb3BlcnR5IG5hbWUgYW5kIG5vdCBhIHByb3BlcnR5IHBhdGguXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkga2V5cyBvbi5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgcHJvcGVydHkgbmFtZSwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc0tleSh2YWx1ZSwgb2JqZWN0KSB7XG4gIGlmIChpc0FycmF5KHZhbHVlKSkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICB2YXIgdHlwZSA9IHR5cGVvZiB2YWx1ZTtcbiAgaWYgKHR5cGUgPT0gJ251bWJlcicgfHwgdHlwZSA9PSAnc3ltYm9sJyB8fCB0eXBlID09ICdib29sZWFuJyB8fFxuICAgICAgdmFsdWUgPT0gbnVsbCB8fCBpc1N5bWJvbCh2YWx1ZSkpIHtcbiAgICByZXR1cm4gdHJ1ZTtcbiAgfVxuICByZXR1cm4gcmVJc1BsYWluUHJvcC50ZXN0KHZhbHVlKSB8fCAhcmVJc0RlZXBQcm9wLnRlc3QodmFsdWUpIHx8XG4gICAgKG9iamVjdCAhPSBudWxsICYmIHZhbHVlIGluIE9iamVjdChvYmplY3QpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNLZXk7XG4iLCJpbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzS2V5IGZyb20gJy4vX2lzS2V5LmpzJztcbmltcG9ydCBzdHJpbmdUb1BhdGggZnJvbSAnLi9fc3RyaW5nVG9QYXRoLmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcblxuLyoqXG4gKiBDYXN0cyBgdmFsdWVgIHRvIGEgcGF0aCBhcnJheSBpZiBpdCdzIG5vdCBvbmUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gW29iamVjdF0gVGhlIG9iamVjdCB0byBxdWVyeSBrZXlzIG9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHByb3BlcnR5IHBhdGggYXJyYXkuXG4gKi9cbmZ1bmN0aW9uIGNhc3RQYXRoKHZhbHVlLCBvYmplY3QpIHtcbiAgaWYgKGlzQXJyYXkodmFsdWUpKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9XG4gIHJldHVybiBpc0tleSh2YWx1ZSwgb2JqZWN0KSA/IFt2YWx1ZV0gOiBzdHJpbmdUb1BhdGgodG9TdHJpbmcodmFsdWUpKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2FzdFBhdGg7XG4iLCJpbXBvcnQgY2FzdFBhdGggZnJvbSAnLi9fY2FzdFBhdGguanMnO1xuaW1wb3J0IGlzQXJndW1lbnRzIGZyb20gJy4vaXNBcmd1bWVudHMuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc0luZGV4IGZyb20gJy4vX2lzSW5kZXguanMnO1xuaW1wb3J0IGlzTGVuZ3RoIGZyb20gJy4vaXNMZW5ndGguanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGV4aXN0cyBvbiBgb2JqZWN0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYXNGdW5jIFRoZSBmdW5jdGlvbiB0byBjaGVjayBwcm9wZXJ0aWVzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGBwYXRoYCBleGlzdHMsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzUGF0aChvYmplY3QsIHBhdGgsIGhhc0Z1bmMpIHtcbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIHJlc3VsdCA9IGZhbHNlO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdmFyIGtleSA9IHRvS2V5KHBhdGhbaW5kZXhdKTtcbiAgICBpZiAoIShyZXN1bHQgPSBvYmplY3QgIT0gbnVsbCAmJiBoYXNGdW5jKG9iamVjdCwga2V5KSkpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgICBvYmplY3QgPSBvYmplY3Rba2V5XTtcbiAgfVxuICBpZiAocmVzdWx0IHx8ICsraW5kZXggIT0gbGVuZ3RoKSB7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBsZW5ndGggPSBvYmplY3QgPT0gbnVsbCA/IDAgOiBvYmplY3QubGVuZ3RoO1xuICByZXR1cm4gISFsZW5ndGggJiYgaXNMZW5ndGgobGVuZ3RoKSAmJiBpc0luZGV4KGtleSwgbGVuZ3RoKSAmJlxuICAgIChpc0FycmF5KG9iamVjdCkgfHwgaXNBcmd1bWVudHMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGhhc1BhdGg7XG4iLCJpbXBvcnQgYmFzZUhhcyBmcm9tICcuL19iYXNlSGFzLmpzJztcbmltcG9ydCBoYXNQYXRoIGZyb20gJy4vX2hhc1BhdGguanMnO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgcGF0aGAgaXMgYSBkaXJlY3QgcHJvcGVydHkgb2YgYG9iamVjdGAuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHBhdGhgIGV4aXN0cywgZWxzZSBgZmFsc2VgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IHsgJ2InOiAyIH0gfTtcbiAqIHZhciBvdGhlciA9IF8uY3JlYXRlKHsgJ2EnOiBfLmNyZWF0ZSh7ICdiJzogMiB9KSB9KTtcbiAqXG4gKiBfLmhhcyhvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXMob2JqZWN0LCAnYS5iJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXMob2JqZWN0LCBbJ2EnLCAnYiddKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhcyhvdGhlciwgJ2EnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGhhcyhvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzO1xuIiwiaW1wb3J0IGJhc2VDbG9uZSBmcm9tICcuL19iYXNlQ2xvbmUuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciBjbG9uaW5nLiAqL1xudmFyIENMT05FX0RFRVBfRkxBRyA9IDEsXG4gICAgQ0xPTkVfU1lNQk9MU19GTEFHID0gNDtcblxuLyoqXG4gKiBUaGlzIG1ldGhvZCBpcyBsaWtlIGBfLmNsb25lV2l0aGAgZXhjZXB0IHRoYXQgaXQgcmVjdXJzaXZlbHkgY2xvbmVzIGB2YWx1ZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHJlY3Vyc2l2ZWx5IGNsb25lLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gW2N1c3RvbWl6ZXJdIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY2xvbmluZy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBkZWVwIGNsb25lZCB2YWx1ZS5cbiAqIEBzZWUgXy5jbG9uZVdpdGhcbiAqIEBleGFtcGxlXG4gKlxuICogZnVuY3Rpb24gY3VzdG9taXplcih2YWx1ZSkge1xuICogICBpZiAoXy5pc0VsZW1lbnQodmFsdWUpKSB7XG4gKiAgICAgcmV0dXJuIHZhbHVlLmNsb25lTm9kZSh0cnVlKTtcbiAqICAgfVxuICogfVxuICpcbiAqIHZhciBlbCA9IF8uY2xvbmVEZWVwV2l0aChkb2N1bWVudC5ib2R5LCBjdXN0b21pemVyKTtcbiAqXG4gKiBjb25zb2xlLmxvZyhlbCA9PT0gZG9jdW1lbnQuYm9keSk7XG4gKiAvLyA9PiBmYWxzZVxuICogY29uc29sZS5sb2coZWwubm9kZU5hbWUpO1xuICogLy8gPT4gJ0JPRFknXG4gKiBjb25zb2xlLmxvZyhlbC5jaGlsZE5vZGVzLmxlbmd0aCk7XG4gKiAvLyA9PiAyMFxuICovXG5mdW5jdGlvbiBjbG9uZURlZXBXaXRoKHZhbHVlLCBjdXN0b21pemVyKSB7XG4gIGN1c3RvbWl6ZXIgPSB0eXBlb2YgY3VzdG9taXplciA9PSAnZnVuY3Rpb24nID8gY3VzdG9taXplciA6IHVuZGVmaW5lZDtcbiAgcmV0dXJuIGJhc2VDbG9uZSh2YWx1ZSwgQ0xPTkVfREVFUF9GTEFHIHwgQ0xPTkVfU1lNQk9MU19GTEFHLCBjdXN0b21pemVyKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgY2xvbmVEZWVwV2l0aDtcbiIsImltcG9ydCBiYXNlR2V0VGFnIGZyb20gJy4vX2Jhc2VHZXRUYWcuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBpc09iamVjdExpa2UgZnJvbSAnLi9pc09iamVjdExpa2UuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXSc7XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgY2xhc3NpZmllZCBhcyBhIGBTdHJpbmdgIHByaW1pdGl2ZSBvciBvYmplY3QuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgYSBzdHJpbmcsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc1N0cmluZygnYWJjJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc1N0cmluZygxKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N0cmluZycgfHxcbiAgICAoIWlzQXJyYXkodmFsdWUpICYmIGlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgYmFzZUdldFRhZyh2YWx1ZSkgPT0gc3RyaW5nVGFnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXNTdHJpbmc7XG4iLCIvKipcbiAqIENvbnZlcnRzIGBpdGVyYXRvcmAgdG8gYW4gYXJyYXkuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBpdGVyYXRvciBUaGUgaXRlcmF0b3IgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBpdGVyYXRvclRvQXJyYXkoaXRlcmF0b3IpIHtcbiAgdmFyIGRhdGEsXG4gICAgICByZXN1bHQgPSBbXTtcblxuICB3aGlsZSAoIShkYXRhID0gaXRlcmF0b3IubmV4dCgpKS5kb25lKSB7XG4gICAgcmVzdWx0LnB1c2goZGF0YS52YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaXRlcmF0b3JUb0FycmF5O1xuIiwiLyoqXG4gKiBDb252ZXJ0cyBgbWFwYCB0byBpdHMga2V5LXZhbHVlIHBhaXJzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gbWFwIFRoZSBtYXAgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUga2V5LXZhbHVlIHBhaXJzLlxuICovXG5mdW5jdGlvbiBtYXBUb0FycmF5KG1hcCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIHJlc3VsdCA9IEFycmF5KG1hcC5zaXplKTtcblxuICBtYXAuZm9yRWFjaChmdW5jdGlvbih2YWx1ZSwga2V5KSB7XG4gICAgcmVzdWx0WysraW5kZXhdID0gW2tleSwgdmFsdWVdO1xuICB9KTtcbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgbWFwVG9BcnJheTtcbiIsIi8qKlxuICogQ29udmVydHMgYHNldGAgdG8gYW4gYXJyYXkgb2YgaXRzIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IHNldCBUaGUgc2V0IHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gc2V0VG9BcnJheShzZXQpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSBBcnJheShzZXQuc2l6ZSk7XG5cbiAgc2V0LmZvckVhY2goZnVuY3Rpb24odmFsdWUpIHtcbiAgICByZXN1bHRbKytpbmRleF0gPSB2YWx1ZTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldFRvQXJyYXk7XG4iLCIvKipcbiAqIENvbnZlcnRzIGFuIEFTQ0lJIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiBhc2NpaVRvQXJyYXkoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcuc3BsaXQoJycpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhc2NpaVRvQXJyYXk7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNWYXJSYW5nZSA9ICdcXFxcdWZlMGVcXFxcdWZlMGYnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IHN0cmluZ3Mgd2l0aCBbemVyby13aWR0aCBqb2luZXJzIG9yIGNvZGUgcG9pbnRzIGZyb20gdGhlIGFzdHJhbCBwbGFuZXNdKGh0dHA6Ly9lZXYuZWUvYmxvZy8yMDE1LzA5LzEyL2RhcmstY29ybmVycy1vZi11bmljb2RlLykuICovXG52YXIgcmVIYXNVbmljb2RlID0gUmVnRXhwKCdbJyArIHJzWldKICsgcnNBc3RyYWxSYW5nZSAgKyByc0NvbWJvUmFuZ2UgKyByc1ZhclJhbmdlICsgJ10nKTtcblxuLyoqXG4gKiBDaGVja3MgaWYgYHN0cmluZ2AgY29udGFpbnMgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHN5bWJvbCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBoYXNVbmljb2RlKHN0cmluZykge1xuICByZXR1cm4gcmVIYXNVbmljb2RlLnRlc3Qoc3RyaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzVW5pY29kZTtcbiIsIi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0FzdHJhbFJhbmdlID0gJ1xcXFx1ZDgwMC1cXFxcdWRmZmYnLFxuICAgIHJzQ29tYm9NYXJrc1JhbmdlID0gJ1xcXFx1MDMwMC1cXFxcdTAzNmYnLFxuICAgIHJlQ29tYm9IYWxmTWFya3NSYW5nZSA9ICdcXFxcdWZlMjAtXFxcXHVmZTJmJyxcbiAgICByc0NvbWJvU3ltYm9sc1JhbmdlID0gJ1xcXFx1MjBkMC1cXFxcdTIwZmYnLFxuICAgIHJzQ29tYm9SYW5nZSA9IHJzQ29tYm9NYXJrc1JhbmdlICsgcmVDb21ib0hhbGZNYXJrc1JhbmdlICsgcnNDb21ib1N5bWJvbHNSYW5nZSxcbiAgICByc1ZhclJhbmdlID0gJ1xcXFx1ZmUwZVxcXFx1ZmUwZic7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0FzdHJhbCA9ICdbJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNDb21ibyA9ICdbJyArIHJzQ29tYm9SYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNaV0ogPSAnXFxcXHUyMDBkJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSB1bmljb2RlIHJlZ2V4ZXMuICovXG52YXIgcmVPcHRNb2QgPSByc01vZGlmaWVyICsgJz8nLFxuICAgIHJzT3B0VmFyID0gJ1snICsgcnNWYXJSYW5nZSArICddPycsXG4gICAgcnNPcHRKb2luID0gJyg/OicgKyByc1pXSiArICcoPzonICsgW3JzTm9uQXN0cmFsLCByc1JlZ2lvbmFsLCByc1N1cnJQYWlyXS5qb2luKCd8JykgKyAnKScgKyByc09wdFZhciArIHJlT3B0TW9kICsgJykqJyxcbiAgICByc1NlcSA9IHJzT3B0VmFyICsgcmVPcHRNb2QgKyByc09wdEpvaW4sXG4gICAgcnNTeW1ib2wgPSAnKD86JyArIFtyc05vbkFzdHJhbCArIHJzQ29tYm8gKyAnPycsIHJzQ29tYm8sIHJzUmVnaW9uYWwsIHJzU3VyclBhaXIsIHJzQXN0cmFsXS5qb2luKCd8JykgKyAnKSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIFtzdHJpbmcgc3ltYm9sc10oaHR0cHM6Ly9tYXRoaWFzYnluZW5zLmJlL25vdGVzL2phdmFzY3JpcHQtdW5pY29kZSkuICovXG52YXIgcmVVbmljb2RlID0gUmVnRXhwKHJzRml0eiArICcoPz0nICsgcnNGaXR6ICsgJyl8JyArIHJzU3ltYm9sICsgcnNTZXEsICdnJyk7XG5cbi8qKlxuICogQ29udmVydHMgYSBVbmljb2RlIGBzdHJpbmdgIHRvIGFuIGFycmF5LlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgY29udmVydGVkIGFycmF5LlxuICovXG5mdW5jdGlvbiB1bmljb2RlVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZVVuaWNvZGUpIHx8IFtdO1xufVxuXG5leHBvcnQgZGVmYXVsdCB1bmljb2RlVG9BcnJheTtcbiIsImltcG9ydCBhc2NpaVRvQXJyYXkgZnJvbSAnLi9fYXNjaWlUb0FycmF5LmpzJztcbmltcG9ydCBoYXNVbmljb2RlIGZyb20gJy4vX2hhc1VuaWNvZGUuanMnO1xuaW1wb3J0IHVuaWNvZGVUb0FycmF5IGZyb20gJy4vX3VuaWNvZGVUb0FycmF5LmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyBgc3RyaW5nYCB0byBhbiBhcnJheS5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IHN0cmluZyBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqL1xuZnVuY3Rpb24gc3RyaW5nVG9BcnJheShzdHJpbmcpIHtcbiAgcmV0dXJuIGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgID8gdW5pY29kZVRvQXJyYXkoc3RyaW5nKVxuICAgIDogYXNjaWlUb0FycmF5KHN0cmluZyk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHN0cmluZ1RvQXJyYXk7XG4iLCJpbXBvcnQgYXJyYXlNYXAgZnJvbSAnLi9fYXJyYXlNYXAuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnZhbHVlc2AgYW5kIGBfLnZhbHVlc0luYCB3aGljaCBjcmVhdGVzIGFuXG4gKiBhcnJheSBvZiBgb2JqZWN0YCBwcm9wZXJ0eSB2YWx1ZXMgY29ycmVzcG9uZGluZyB0byB0aGUgcHJvcGVydHkgbmFtZXNcbiAqIG9mIGBwcm9wc2AuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl9IHByb3BzIFRoZSBwcm9wZXJ0eSBuYW1lcyB0byBnZXQgdmFsdWVzIGZvci5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIGFycmF5IG9mIHByb3BlcnR5IHZhbHVlcy5cbiAqL1xuZnVuY3Rpb24gYmFzZVZhbHVlcyhvYmplY3QsIHByb3BzKSB7XG4gIHJldHVybiBhcnJheU1hcChwcm9wcywgZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdFtrZXldO1xuICB9KTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVZhbHVlcztcbiIsImltcG9ydCBiYXNlVmFsdWVzIGZyb20gJy4vX2Jhc2VWYWx1ZXMuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBDcmVhdGVzIGFuIGFycmF5IG9mIHRoZSBvd24gZW51bWVyYWJsZSBzdHJpbmcga2V5ZWQgcHJvcGVydHkgdmFsdWVzIG9mIGBvYmplY3RgLlxuICpcbiAqICoqTm90ZToqKiBOb24tb2JqZWN0IHZhbHVlcyBhcmUgY29lcmNlZCB0byBvYmplY3RzLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBzaW5jZSAwLjEuMFxuICogQG1lbWJlck9mIF9cbiAqIEBjYXRlZ29yeSBPYmplY3RcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgYXJyYXkgb2YgcHJvcGVydHkgdmFsdWVzLlxuICogQGV4YW1wbGVcbiAqXG4gKiBmdW5jdGlvbiBGb28oKSB7XG4gKiAgIHRoaXMuYSA9IDE7XG4gKiAgIHRoaXMuYiA9IDI7XG4gKiB9XG4gKlxuICogRm9vLnByb3RvdHlwZS5jID0gMztcbiAqXG4gKiBfLnZhbHVlcyhuZXcgRm9vKTtcbiAqIC8vID0+IFsxLCAyXSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIF8udmFsdWVzKCdoaScpO1xuICogLy8gPT4gWydoJywgJ2knXVxuICovXG5mdW5jdGlvbiB2YWx1ZXMob2JqZWN0KSB7XG4gIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IFtdIDogYmFzZVZhbHVlcyhvYmplY3QsIGtleXMob2JqZWN0KSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHZhbHVlcztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBjb3B5QXJyYXkgZnJvbSAnLi9fY29weUFycmF5LmpzJztcbmltcG9ydCBnZXRUYWcgZnJvbSAnLi9fZ2V0VGFnLmpzJztcbmltcG9ydCBpc0FycmF5TGlrZSBmcm9tICcuL2lzQXJyYXlMaWtlLmpzJztcbmltcG9ydCBpc1N0cmluZyBmcm9tICcuL2lzU3RyaW5nLmpzJztcbmltcG9ydCBpdGVyYXRvclRvQXJyYXkgZnJvbSAnLi9faXRlcmF0b3JUb0FycmF5LmpzJztcbmltcG9ydCBtYXBUb0FycmF5IGZyb20gJy4vX21hcFRvQXJyYXkuanMnO1xuaW1wb3J0IHNldFRvQXJyYXkgZnJvbSAnLi9fc2V0VG9BcnJheS5qcyc7XG5pbXBvcnQgc3RyaW5nVG9BcnJheSBmcm9tICcuL19zdHJpbmdUb0FycmF5LmpzJztcbmltcG9ydCB2YWx1ZXMgZnJvbSAnLi92YWx1ZXMuanMnO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XSc7XG5cbi8qKiBCdWlsdC1pbiB2YWx1ZSByZWZlcmVuY2VzLiAqL1xudmFyIHN5bUl0ZXJhdG9yID0gU3ltYm9sID8gU3ltYm9sLml0ZXJhdG9yIDogdW5kZWZpbmVkO1xuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYW4gYXJyYXkuXG4gKlxuICogQHN0YXRpY1xuICogQHNpbmNlIDAuMS4wXG4gKiBAbWVtYmVyT2YgX1xuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBhcnJheS5cbiAqIEBleGFtcGxlXG4gKlxuICogXy50b0FycmF5KHsgJ2EnOiAxLCAnYic6IDIgfSk7XG4gKiAvLyA9PiBbMSwgMl1cbiAqXG4gKiBfLnRvQXJyYXkoJ2FiYycpO1xuICogLy8gPT4gWydhJywgJ2InLCAnYyddXG4gKlxuICogXy50b0FycmF5KDEpO1xuICogLy8gPT4gW11cbiAqXG4gKiBfLnRvQXJyYXkobnVsbCk7XG4gKiAvLyA9PiBbXVxuICovXG5mdW5jdGlvbiB0b0FycmF5KHZhbHVlKSB7XG4gIGlmICghdmFsdWUpIHtcbiAgICByZXR1cm4gW107XG4gIH1cbiAgaWYgKGlzQXJyYXlMaWtlKHZhbHVlKSkge1xuICAgIHJldHVybiBpc1N0cmluZyh2YWx1ZSkgPyBzdHJpbmdUb0FycmF5KHZhbHVlKSA6IGNvcHlBcnJheSh2YWx1ZSk7XG4gIH1cbiAgaWYgKHN5bUl0ZXJhdG9yICYmIHZhbHVlW3N5bUl0ZXJhdG9yXSkge1xuICAgIHJldHVybiBpdGVyYXRvclRvQXJyYXkodmFsdWVbc3ltSXRlcmF0b3JdKCkpO1xuICB9XG4gIHZhciB0YWcgPSBnZXRUYWcodmFsdWUpLFxuICAgICAgZnVuYyA9IHRhZyA9PSBtYXBUYWcgPyBtYXBUb0FycmF5IDogKHRhZyA9PSBzZXRUYWcgPyBzZXRUb0FycmF5IDogdmFsdWVzKTtcblxuICByZXR1cm4gZnVuYyh2YWx1ZSk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHRvQXJyYXk7XG4iLCJ2YXIgdG9TdHJpbmcgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIGVycm9yVG9TdHJpbmcgPSBFcnJvci5wcm90b3R5cGUudG9TdHJpbmc7XG52YXIgcmVnRXhwVG9TdHJpbmcgPSBSZWdFeHAucHJvdG90eXBlLnRvU3RyaW5nO1xudmFyIHN5bWJvbFRvU3RyaW5nID0gdHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgPyBTeW1ib2wucHJvdG90eXBlLnRvU3RyaW5nIDogZnVuY3Rpb24gKCkge1xuICByZXR1cm4gJyc7XG59O1xudmFyIFNZTUJPTF9SRUdFWFAgPSAvXlN5bWJvbFxcKCguKilcXCkoLiopJC87XG5cbmZ1bmN0aW9uIHByaW50TnVtYmVyKHZhbCkge1xuICBpZiAodmFsICE9ICt2YWwpIHJldHVybiAnTmFOJztcbiAgdmFyIGlzTmVnYXRpdmVaZXJvID0gdmFsID09PSAwICYmIDEgLyB2YWwgPCAwO1xuICByZXR1cm4gaXNOZWdhdGl2ZVplcm8gPyAnLTAnIDogJycgKyB2YWw7XG59XG5cbmZ1bmN0aW9uIHByaW50U2ltcGxlVmFsdWUodmFsLCBxdW90ZVN0cmluZ3MpIHtcbiAgaWYgKHF1b3RlU3RyaW5ncyA9PT0gdm9pZCAwKSB7XG4gICAgcXVvdGVTdHJpbmdzID0gZmFsc2U7XG4gIH1cblxuICBpZiAodmFsID09IG51bGwgfHwgdmFsID09PSB0cnVlIHx8IHZhbCA9PT0gZmFsc2UpIHJldHVybiAnJyArIHZhbDtcbiAgdmFyIHR5cGVPZiA9IHR5cGVvZiB2YWw7XG4gIGlmICh0eXBlT2YgPT09ICdudW1iZXInKSByZXR1cm4gcHJpbnROdW1iZXIodmFsKTtcbiAgaWYgKHR5cGVPZiA9PT0gJ3N0cmluZycpIHJldHVybiBxdW90ZVN0cmluZ3MgPyBcIlxcXCJcIiArIHZhbCArIFwiXFxcIlwiIDogdmFsO1xuICBpZiAodHlwZU9mID09PSAnZnVuY3Rpb24nKSByZXR1cm4gJ1tGdW5jdGlvbiAnICsgKHZhbC5uYW1lIHx8ICdhbm9ueW1vdXMnKSArICddJztcbiAgaWYgKHR5cGVPZiA9PT0gJ3N5bWJvbCcpIHJldHVybiBzeW1ib2xUb1N0cmluZy5jYWxsKHZhbCkucmVwbGFjZShTWU1CT0xfUkVHRVhQLCAnU3ltYm9sKCQxKScpO1xuICB2YXIgdGFnID0gdG9TdHJpbmcuY2FsbCh2YWwpLnNsaWNlKDgsIC0xKTtcbiAgaWYgKHRhZyA9PT0gJ0RhdGUnKSByZXR1cm4gaXNOYU4odmFsLmdldFRpbWUoKSkgPyAnJyArIHZhbCA6IHZhbC50b0lTT1N0cmluZyh2YWwpO1xuICBpZiAodGFnID09PSAnRXJyb3InIHx8IHZhbCBpbnN0YW5jZW9mIEVycm9yKSByZXR1cm4gJ1snICsgZXJyb3JUb1N0cmluZy5jYWxsKHZhbCkgKyAnXSc7XG4gIGlmICh0YWcgPT09ICdSZWdFeHAnKSByZXR1cm4gcmVnRXhwVG9TdHJpbmcuY2FsbCh2YWwpO1xuICByZXR1cm4gbnVsbDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcHJpbnRWYWx1ZSh2YWx1ZSwgcXVvdGVTdHJpbmdzKSB7XG4gIHZhciByZXN1bHQgPSBwcmludFNpbXBsZVZhbHVlKHZhbHVlLCBxdW90ZVN0cmluZ3MpO1xuICBpZiAocmVzdWx0ICE9PSBudWxsKSByZXR1cm4gcmVzdWx0O1xuICByZXR1cm4gSlNPTi5zdHJpbmdpZnkodmFsdWUsIGZ1bmN0aW9uIChrZXksIHZhbHVlKSB7XG4gICAgdmFyIHJlc3VsdCA9IHByaW50U2ltcGxlVmFsdWUodGhpc1trZXldLCBxdW90ZVN0cmluZ3MpO1xuICAgIGlmIChyZXN1bHQgIT09IG51bGwpIHJldHVybiByZXN1bHQ7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9LCAyKTtcbn0iLCJpbXBvcnQgcHJpbnRWYWx1ZSBmcm9tICcuL3V0aWwvcHJpbnRWYWx1ZSc7XG5leHBvcnQgdmFyIG1peGVkID0ge1xuICBkZWZhdWx0OiAnJHtwYXRofSBpcyBpbnZhbGlkJyxcbiAgcmVxdWlyZWQ6ICcke3BhdGh9IGlzIGEgcmVxdWlyZWQgZmllbGQnLFxuICBvbmVPZjogJyR7cGF0aH0gbXVzdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6ICR7dmFsdWVzfScsXG4gIG5vdE9uZU9mOiAnJHtwYXRofSBtdXN0IG5vdCBiZSBvbmUgb2YgdGhlIGZvbGxvd2luZyB2YWx1ZXM6ICR7dmFsdWVzfScsXG4gIG5vdFR5cGU6IGZ1bmN0aW9uIG5vdFR5cGUoX3JlZikge1xuICAgIHZhciBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgICB0eXBlID0gX3JlZi50eXBlLFxuICAgICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICAgIG9yaWdpbmFsVmFsdWUgPSBfcmVmLm9yaWdpbmFsVmFsdWU7XG4gICAgdmFyIGlzQ2FzdCA9IG9yaWdpbmFsVmFsdWUgIT0gbnVsbCAmJiBvcmlnaW5hbFZhbHVlICE9PSB2YWx1ZTtcbiAgICB2YXIgbXNnID0gcGF0aCArIFwiIG11c3QgYmUgYSBgXCIgKyB0eXBlICsgXCJgIHR5cGUsIFwiICsgKFwiYnV0IHRoZSBmaW5hbCB2YWx1ZSB3YXM6IGBcIiArIHByaW50VmFsdWUodmFsdWUsIHRydWUpICsgXCJgXCIpICsgKGlzQ2FzdCA/IFwiIChjYXN0IGZyb20gdGhlIHZhbHVlIGBcIiArIHByaW50VmFsdWUob3JpZ2luYWxWYWx1ZSwgdHJ1ZSkgKyBcImApLlwiIDogJy4nKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gbnVsbCkge1xuICAgICAgbXNnICs9IFwiXFxuIElmIFxcXCJudWxsXFxcIiBpcyBpbnRlbmRlZCBhcyBhbiBlbXB0eSB2YWx1ZSBiZSBzdXJlIHRvIG1hcmsgdGhlIHNjaGVtYSBhcyBgLm51bGxhYmxlKClgXCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIG1zZztcbiAgfSxcbiAgZGVmaW5lZDogJyR7cGF0aH0gbXVzdCBiZSBkZWZpbmVkJ1xufTtcbmV4cG9ydCB2YXIgc3RyaW5nID0ge1xuICBsZW5ndGg6ICcke3BhdGh9IG11c3QgYmUgZXhhY3RseSAke2xlbmd0aH0gY2hhcmFjdGVycycsXG4gIG1pbjogJyR7cGF0aH0gbXVzdCBiZSBhdCBsZWFzdCAke21pbn0gY2hhcmFjdGVycycsXG4gIG1heDogJyR7cGF0aH0gbXVzdCBiZSBhdCBtb3N0ICR7bWF4fSBjaGFyYWN0ZXJzJyxcbiAgbWF0Y2hlczogJyR7cGF0aH0gbXVzdCBtYXRjaCB0aGUgZm9sbG93aW5nOiBcIiR7cmVnZXh9XCInLFxuICBlbWFpbDogJyR7cGF0aH0gbXVzdCBiZSBhIHZhbGlkIGVtYWlsJyxcbiAgdXJsOiAnJHtwYXRofSBtdXN0IGJlIGEgdmFsaWQgVVJMJyxcbiAgdHJpbTogJyR7cGF0aH0gbXVzdCBiZSBhIHRyaW1tZWQgc3RyaW5nJyxcbiAgbG93ZXJjYXNlOiAnJHtwYXRofSBtdXN0IGJlIGEgbG93ZXJjYXNlIHN0cmluZycsXG4gIHVwcGVyY2FzZTogJyR7cGF0aH0gbXVzdCBiZSBhIHVwcGVyIGNhc2Ugc3RyaW5nJ1xufTtcbmV4cG9ydCB2YXIgbnVtYmVyID0ge1xuICBtaW46ICcke3BhdGh9IG11c3QgYmUgZ3JlYXRlciB0aGFuIG9yIGVxdWFsIHRvICR7bWlufScsXG4gIG1heDogJyR7cGF0aH0gbXVzdCBiZSBsZXNzIHRoYW4gb3IgZXF1YWwgdG8gJHttYXh9JyxcbiAgbGVzc1RoYW46ICcke3BhdGh9IG11c3QgYmUgbGVzcyB0aGFuICR7bGVzc30nLFxuICBtb3JlVGhhbjogJyR7cGF0aH0gbXVzdCBiZSBncmVhdGVyIHRoYW4gJHttb3JlfScsXG4gIG5vdEVxdWFsOiAnJHtwYXRofSBtdXN0IGJlIG5vdCBlcXVhbCB0byAke25vdEVxdWFsfScsXG4gIHBvc2l0aXZlOiAnJHtwYXRofSBtdXN0IGJlIGEgcG9zaXRpdmUgbnVtYmVyJyxcbiAgbmVnYXRpdmU6ICcke3BhdGh9IG11c3QgYmUgYSBuZWdhdGl2ZSBudW1iZXInLFxuICBpbnRlZ2VyOiAnJHtwYXRofSBtdXN0IGJlIGFuIGludGVnZXInXG59O1xuZXhwb3J0IHZhciBkYXRlID0ge1xuICBtaW46ICcke3BhdGh9IGZpZWxkIG11c3QgYmUgbGF0ZXIgdGhhbiAke21pbn0nLFxuICBtYXg6ICcke3BhdGh9IGZpZWxkIG11c3QgYmUgYXQgZWFybGllciB0aGFuICR7bWF4fSdcbn07XG5leHBvcnQgdmFyIGJvb2xlYW4gPSB7fTtcbmV4cG9ydCB2YXIgb2JqZWN0ID0ge1xuICBub1Vua25vd246ICcke3BhdGh9IGZpZWxkIGhhcyB1bnNwZWNpZmllZCBrZXlzOiAke3Vua25vd259J1xufTtcbmV4cG9ydCB2YXIgYXJyYXkgPSB7XG4gIG1pbjogJyR7cGF0aH0gZmllbGQgbXVzdCBoYXZlIGF0IGxlYXN0ICR7bWlufSBpdGVtcycsXG4gIG1heDogJyR7cGF0aH0gZmllbGQgbXVzdCBoYXZlIGxlc3MgdGhhbiBvciBlcXVhbCB0byAke21heH0gaXRlbXMnXG59O1xuZXhwb3J0IGRlZmF1bHQge1xuICBtaXhlZDogbWl4ZWQsXG4gIHN0cmluZzogc3RyaW5nLFxuICBudW1iZXI6IG51bWJlcixcbiAgZGF0ZTogZGF0ZSxcbiAgb2JqZWN0OiBvYmplY3QsXG4gIGFycmF5OiBhcnJheSxcbiAgYm9vbGVhbjogYm9vbGVhblxufTsiLCJleHBvcnQgZGVmYXVsdCAoZnVuY3Rpb24gKG9iaikge1xuICByZXR1cm4gb2JqICYmIG9iai5fX2lzWXVwU2NoZW1hX187XG59KTsiLCJpbXBvcnQgaGFzIGZyb20gXCJsb2Rhc2gtZXMvaGFzXCI7XG5pbXBvcnQgaXNTY2hlbWEgZnJvbSAnLi91dGlsL2lzU2NoZW1hJztcblxudmFyIENvbmRpdGlvbiA9IC8qI19fUFVSRV9fKi9mdW5jdGlvbiAoKSB7XG4gIGZ1bmN0aW9uIENvbmRpdGlvbihyZWZzLCBvcHRpb25zKSB7XG4gICAgdGhpcy5yZWZzID0gcmVmcztcblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgdGhpcy5mbiA9IG9wdGlvbnM7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgaWYgKCFoYXMob3B0aW9ucywgJ2lzJykpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BpczpgIGlzIHJlcXVpcmVkIGZvciBgd2hlbigpYCBjb25kaXRpb25zJyk7XG4gICAgaWYgKCFvcHRpb25zLnRoZW4gJiYgIW9wdGlvbnMub3RoZXJ3aXNlKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdlaXRoZXIgYHRoZW46YCBvciBgb3RoZXJ3aXNlOmAgaXMgcmVxdWlyZWQgZm9yIGB3aGVuKClgIGNvbmRpdGlvbnMnKTtcbiAgICB2YXIgaXMgPSBvcHRpb25zLmlzLFxuICAgICAgICB0aGVuID0gb3B0aW9ucy50aGVuLFxuICAgICAgICBvdGhlcndpc2UgPSBvcHRpb25zLm90aGVyd2lzZTtcbiAgICB2YXIgY2hlY2sgPSB0eXBlb2YgaXMgPT09ICdmdW5jdGlvbicgPyBpcyA6IGZ1bmN0aW9uICgpIHtcbiAgICAgIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBuZXcgQXJyYXkoX2xlbiksIF9rZXkgPSAwOyBfa2V5IDwgX2xlbjsgX2tleSsrKSB7XG4gICAgICAgIHZhbHVlc1tfa2V5XSA9IGFyZ3VtZW50c1tfa2V5XTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHZhbHVlcy5ldmVyeShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlID09PSBpcztcbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICB0aGlzLmZuID0gZnVuY3Rpb24gKCkge1xuICAgICAgZm9yICh2YXIgX2xlbjIgPSBhcmd1bWVudHMubGVuZ3RoLCBhcmdzID0gbmV3IEFycmF5KF9sZW4yKSwgX2tleTIgPSAwOyBfa2V5MiA8IF9sZW4yOyBfa2V5MisrKSB7XG4gICAgICAgIGFyZ3NbX2tleTJdID0gYXJndW1lbnRzW19rZXkyXTtcbiAgICAgIH1cblxuICAgICAgdmFyIG9wdGlvbnMgPSBhcmdzLnBvcCgpO1xuICAgICAgdmFyIHNjaGVtYSA9IGFyZ3MucG9wKCk7XG4gICAgICB2YXIgYnJhbmNoID0gY2hlY2suYXBwbHkodm9pZCAwLCBhcmdzKSA/IHRoZW4gOiBvdGhlcndpc2U7XG4gICAgICBpZiAoIWJyYW5jaCkgcmV0dXJuIHVuZGVmaW5lZDtcbiAgICAgIGlmICh0eXBlb2YgYnJhbmNoID09PSAnZnVuY3Rpb24nKSByZXR1cm4gYnJhbmNoKHNjaGVtYSk7XG4gICAgICByZXR1cm4gc2NoZW1hLmNvbmNhdChicmFuY2gucmVzb2x2ZShvcHRpb25zKSk7XG4gICAgfTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBDb25kaXRpb24ucHJvdG90eXBlO1xuXG4gIF9wcm90by5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZShiYXNlLCBvcHRpb25zKSB7XG4gICAgdmFyIHZhbHVlcyA9IHRoaXMucmVmcy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgcmV0dXJuIHJlZi5nZXRWYWx1ZShvcHRpb25zKTtcbiAgICB9KTtcbiAgICB2YXIgc2NoZW1hID0gdGhpcy5mbi5hcHBseShiYXNlLCB2YWx1ZXMuY29uY2F0KGJhc2UsIG9wdGlvbnMpKTtcbiAgICBpZiAoc2NoZW1hID09PSB1bmRlZmluZWQgfHwgc2NoZW1hID09PSBiYXNlKSByZXR1cm4gYmFzZTtcbiAgICBpZiAoIWlzU2NoZW1hKHNjaGVtYSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2NvbmRpdGlvbnMgbXVzdCByZXR1cm4gYSBzY2hlbWEgb2JqZWN0Jyk7XG4gICAgcmV0dXJuIHNjaGVtYS5yZXNvbHZlKG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBDb25kaXRpb247XG59KCk7XG5cbmV4cG9ydCBkZWZhdWx0IENvbmRpdGlvbjsiLCJpbXBvcnQgcHJpbnRWYWx1ZSBmcm9tICcuL3V0aWwvcHJpbnRWYWx1ZSc7XG52YXIgc3RyUmVnID0gL1xcJFxce1xccyooXFx3KylcXHMqXFx9L2c7XG5cbnZhciByZXBsYWNlID0gZnVuY3Rpb24gcmVwbGFjZShzdHIpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uIChwYXJhbXMpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2Uoc3RyUmVnLCBmdW5jdGlvbiAoXywga2V5KSB7XG4gICAgICByZXR1cm4gcHJpbnRWYWx1ZShwYXJhbXNba2V5XSk7XG4gICAgfSk7XG4gIH07XG59O1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBWYWxpZGF0aW9uRXJyb3IoZXJyb3JzLCB2YWx1ZSwgZmllbGQsIHR5cGUpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICB0aGlzLm5hbWUgPSAnVmFsaWRhdGlvbkVycm9yJztcbiAgdGhpcy52YWx1ZSA9IHZhbHVlO1xuICB0aGlzLnBhdGggPSBmaWVsZDtcbiAgdGhpcy50eXBlID0gdHlwZTtcbiAgdGhpcy5lcnJvcnMgPSBbXTtcbiAgdGhpcy5pbm5lciA9IFtdO1xuICBpZiAoZXJyb3JzKSBbXS5jb25jYXQoZXJyb3JzKS5mb3JFYWNoKGZ1bmN0aW9uIChlcnIpIHtcbiAgICBfdGhpcy5lcnJvcnMgPSBfdGhpcy5lcnJvcnMuY29uY2F0KGVyci5lcnJvcnMgfHwgZXJyKTtcbiAgICBpZiAoZXJyLmlubmVyKSBfdGhpcy5pbm5lciA9IF90aGlzLmlubmVyLmNvbmNhdChlcnIuaW5uZXIubGVuZ3RoID8gZXJyLmlubmVyIDogZXJyKTtcbiAgfSk7XG4gIHRoaXMubWVzc2FnZSA9IHRoaXMuZXJyb3JzLmxlbmd0aCA+IDEgPyB0aGlzLmVycm9ycy5sZW5ndGggKyBcIiBlcnJvcnMgb2NjdXJyZWRcIiA6IHRoaXMuZXJyb3JzWzBdO1xuICBpZiAoRXJyb3IuY2FwdHVyZVN0YWNrVHJhY2UpIEVycm9yLmNhcHR1cmVTdGFja1RyYWNlKHRoaXMsIFZhbGlkYXRpb25FcnJvcik7XG59XG5WYWxpZGF0aW9uRXJyb3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShFcnJvci5wcm90b3R5cGUpO1xuVmFsaWRhdGlvbkVycm9yLnByb3RvdHlwZS5jb25zdHJ1Y3RvciA9IFZhbGlkYXRpb25FcnJvcjtcblxuVmFsaWRhdGlvbkVycm9yLmlzRXJyb3IgPSBmdW5jdGlvbiAoZXJyKSB7XG4gIHJldHVybiBlcnIgJiYgZXJyLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InO1xufTtcblxuVmFsaWRhdGlvbkVycm9yLmZvcm1hdEVycm9yID0gZnVuY3Rpb24gKG1lc3NhZ2UsIHBhcmFtcykge1xuICBpZiAodHlwZW9mIG1lc3NhZ2UgPT09ICdzdHJpbmcnKSBtZXNzYWdlID0gcmVwbGFjZShtZXNzYWdlKTtcblxuICB2YXIgZm4gPSBmdW5jdGlvbiBmbihwYXJhbXMpIHtcbiAgICBwYXJhbXMucGF0aCA9IHBhcmFtcy5sYWJlbCB8fCBwYXJhbXMucGF0aCB8fCAndGhpcyc7XG4gICAgcmV0dXJuIHR5cGVvZiBtZXNzYWdlID09PSAnZnVuY3Rpb24nID8gbWVzc2FnZShwYXJhbXMpIDogbWVzc2FnZTtcbiAgfTtcblxuICByZXR1cm4gYXJndW1lbnRzLmxlbmd0aCA9PT0gMSA/IGZuIDogZm4ocGFyYW1zKTtcbn07IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgeyBTeW5jaHJvbm91c1Byb21pc2UgfSBmcm9tICdzeW5jaHJvbm91cy1wcm9taXNlJztcbmltcG9ydCBWYWxpZGF0aW9uRXJyb3IgZnJvbSAnLi4vVmFsaWRhdGlvbkVycm9yJztcblxudmFyIHByb21pc2UgPSBmdW5jdGlvbiBwcm9taXNlKHN5bmMpIHtcbiAgcmV0dXJuIHN5bmMgPyBTeW5jaHJvbm91c1Byb21pc2UgOiBQcm9taXNlO1xufTtcblxudmFyIHVud3JhcEVycm9yID0gZnVuY3Rpb24gdW53cmFwRXJyb3IoZXJyb3JzKSB7XG4gIGlmIChlcnJvcnMgPT09IHZvaWQgMCkge1xuICAgIGVycm9ycyA9IFtdO1xuICB9XG5cbiAgcmV0dXJuIGVycm9ycy5pbm5lciAmJiBlcnJvcnMuaW5uZXIubGVuZ3RoID8gZXJyb3JzLmlubmVyIDogW10uY29uY2F0KGVycm9ycyk7XG59O1xuXG5mdW5jdGlvbiBzY29wZVRvVmFsdWUocHJvbWlzZXMsIHZhbHVlLCBzeW5jKSB7XG4gIC8vY29uc29sZS5sb2coJ3Njb3BlVG9WYWx1ZScsIHByb21pc2VzLCB2YWx1ZSlcbiAgdmFyIHAgPSBwcm9taXNlKHN5bmMpLmFsbChwcm9taXNlcyk7IC8vY29uc29sZS5sb2coJ3Njb3BlVG9WYWx1ZSBCJywgcClcblxuICB2YXIgYiA9IHAuY2F0Y2goZnVuY3Rpb24gKGVycikge1xuICAgIGlmIChlcnIubmFtZSA9PT0gJ1ZhbGlkYXRpb25FcnJvcicpIGVyci52YWx1ZSA9IHZhbHVlO1xuICAgIHRocm93IGVycjtcbiAgfSk7IC8vY29uc29sZS5sb2coJ3Njb3BlVG9WYWx1ZSBjJywgYilcblxuICB2YXIgYyA9IGIudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHZhbHVlO1xuICB9KTsgLy9jb25zb2xlLmxvZygnc2NvcGVUb1ZhbHVlIGQnLCBjKVxuXG4gIHJldHVybiBjO1xufVxuLyoqXG4gKiBJZiBub3QgZmFpbGluZyBvbiB0aGUgZmlyc3QgZXJyb3IsIGNhdGNoIHRoZSBlcnJvcnNcbiAqIGFuZCBjb2xsZWN0IHRoZW0gaW4gYW4gYXJyYXlcbiAqL1xuXG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9wYWdhdGVFcnJvcnMoZW5kRWFybHksIGVycm9ycykge1xuICByZXR1cm4gZW5kRWFybHkgPyBudWxsIDogZnVuY3Rpb24gKGVycikge1xuICAgIGVycm9ycy5wdXNoKGVycik7XG4gICAgcmV0dXJuIGVyci52YWx1ZTtcbiAgfTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBzZXR0bGVkKHByb21pc2VzLCBzeW5jKSB7XG4gIHZhciBQcm9taXNlID0gcHJvbWlzZShzeW5jKTtcbiAgcmV0dXJuIFByb21pc2UuYWxsKHByb21pc2VzLm1hcChmdW5jdGlvbiAocCkge1xuICAgIHJldHVybiBQcm9taXNlLnJlc29sdmUocCkudGhlbihmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiB7XG4gICAgICAgIGZ1bGZpbGxlZDogdHJ1ZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9O1xuICAgIH0sIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgZnVsZmlsbGVkOiBmYWxzZSxcbiAgICAgICAgdmFsdWU6IHZhbHVlXG4gICAgICB9O1xuICAgIH0pO1xuICB9KSk7XG59XG5leHBvcnQgZnVuY3Rpb24gY29sbGVjdEVycm9ycyhfcmVmKSB7XG4gIHZhciB2YWxpZGF0aW9ucyA9IF9yZWYudmFsaWRhdGlvbnMsXG4gICAgICB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICBwYXRoID0gX3JlZi5wYXRoLFxuICAgICAgc3luYyA9IF9yZWYuc3luYyxcbiAgICAgIGVycm9ycyA9IF9yZWYuZXJyb3JzLFxuICAgICAgc29ydCA9IF9yZWYuc29ydDtcbiAgZXJyb3JzID0gdW53cmFwRXJyb3IoZXJyb3JzKTtcbiAgcmV0dXJuIHNldHRsZWQodmFsaWRhdGlvbnMsIHN5bmMpLnRoZW4oZnVuY3Rpb24gKHJlc3VsdHMpIHtcbiAgICB2YXIgbmVzdGVkRXJyb3JzID0gcmVzdWx0cy5maWx0ZXIoZnVuY3Rpb24gKHIpIHtcbiAgICAgIHJldHVybiAhci5mdWxmaWxsZWQ7XG4gICAgfSkucmVkdWNlKGZ1bmN0aW9uIChhcnIsIF9yZWYyKSB7XG4gICAgICB2YXIgZXJyb3IgPSBfcmVmMi52YWx1ZTtcblxuICAgICAgLy8gd2UgYXJlIG9ubHkgY29sbGVjdGluZyB2YWxpZGF0aW9uIGVycm9yc1xuICAgICAgaWYgKCFWYWxpZGF0aW9uRXJyb3IuaXNFcnJvcihlcnJvcikpIHtcbiAgICAgICAgdGhyb3cgZXJyb3I7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBhcnIuY29uY2F0KGVycm9yKTtcbiAgICB9LCBbXSk7XG4gICAgaWYgKHNvcnQpIG5lc3RlZEVycm9ycy5zb3J0KHNvcnQpOyAvL3Nob3cgcGFyZW50IGVycm9ycyBhZnRlciB0aGUgbmVzdGVkIG9uZXM6IG5hbWUuZmlyc3QsIG5hbWVcblxuICAgIGVycm9ycyA9IG5lc3RlZEVycm9ycy5jb25jYXQoZXJyb3JzKTtcbiAgICBpZiAoZXJyb3JzLmxlbmd0aCkgdGhyb3cgbmV3IFZhbGlkYXRpb25FcnJvcihlcnJvcnMsIHZhbHVlLCBwYXRoKTtcbiAgICByZXR1cm4gdmFsdWU7XG4gIH0pO1xufVxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gcnVuVmFsaWRhdGlvbnMoX3JlZjMpIHtcbiAgdmFyIGVuZEVhcmx5ID0gX3JlZjMuZW5kRWFybHksXG4gICAgICBvcHRpb25zID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UoX3JlZjMsIFtcImVuZEVhcmx5XCJdKTtcblxuICBpZiAoZW5kRWFybHkpIHJldHVybiBzY29wZVRvVmFsdWUob3B0aW9ucy52YWxpZGF0aW9ucywgb3B0aW9ucy52YWx1ZSwgb3B0aW9ucy5zeW5jKTtcbiAgcmV0dXJuIGNvbGxlY3RFcnJvcnMob3B0aW9ucyk7XG59IiwiaW1wb3J0IGhhcyBmcm9tIFwibG9kYXNoLWVzL2hhc1wiO1xuaW1wb3J0IGlzU2NoZW1hIGZyb20gJy4vaXNTY2hlbWEnO1xuXG52YXIgaXNPYmplY3QgPSBmdW5jdGlvbiBpc09iamVjdChvYmopIHtcbiAgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvYmopID09PSAnW29iamVjdCBPYmplY3RdJztcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHByZXBlbmREZWVwKHRhcmdldCwgc291cmNlKSB7XG4gIGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHtcbiAgICBpZiAoaGFzKHNvdXJjZSwga2V5KSkge1xuICAgICAgdmFyIHNvdXJjZVZhbCA9IHNvdXJjZVtrZXldLFxuICAgICAgICAgIHRhcmdldFZhbCA9IHRhcmdldFtrZXldO1xuXG4gICAgICBpZiAodGFyZ2V0VmFsID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdGFyZ2V0W2tleV0gPSBzb3VyY2VWYWw7XG4gICAgICB9IGVsc2UgaWYgKHRhcmdldFZhbCA9PT0gc291cmNlVmFsKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfSBlbHNlIGlmIChpc1NjaGVtYSh0YXJnZXRWYWwpKSB7XG4gICAgICAgIGlmIChpc1NjaGVtYShzb3VyY2VWYWwpKSB0YXJnZXRba2V5XSA9IHNvdXJjZVZhbC5jb25jYXQodGFyZ2V0VmFsKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNPYmplY3QodGFyZ2V0VmFsKSkge1xuICAgICAgICBpZiAoaXNPYmplY3Qoc291cmNlVmFsKSkgdGFyZ2V0W2tleV0gPSBwcmVwZW5kRGVlcCh0YXJnZXRWYWwsIHNvdXJjZVZhbCk7XG4gICAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodGFyZ2V0VmFsKSkge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheShzb3VyY2VWYWwpKSB0YXJnZXRba2V5XSA9IHNvdXJjZVZhbC5jb25jYXQodGFyZ2V0VmFsKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICByZXR1cm4gdGFyZ2V0O1xufSIsIi8qKlxuICogQ3JlYXRlcyBhIGJhc2UgZnVuY3Rpb24gZm9yIG1ldGhvZHMgbGlrZSBgXy5mb3JJbmAgYW5kIGBfLmZvck93bmAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gW2Zyb21SaWdodF0gU3BlY2lmeSBpdGVyYXRpbmcgZnJvbSByaWdodCB0byBsZWZ0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYmFzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQmFzZUZvcihmcm9tUmlnaHQpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCwgaXRlcmF0ZWUsIGtleXNGdW5jKSB7XG4gICAgdmFyIGluZGV4ID0gLTEsXG4gICAgICAgIGl0ZXJhYmxlID0gT2JqZWN0KG9iamVjdCksXG4gICAgICAgIHByb3BzID0ga2V5c0Z1bmMob2JqZWN0KSxcbiAgICAgICAgbGVuZ3RoID0gcHJvcHMubGVuZ3RoO1xuXG4gICAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgICB2YXIga2V5ID0gcHJvcHNbZnJvbVJpZ2h0ID8gbGVuZ3RoIDogKytpbmRleF07XG4gICAgICBpZiAoaXRlcmF0ZWUoaXRlcmFibGVba2V5XSwga2V5LCBpdGVyYWJsZSkgPT09IGZhbHNlKSB7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gb2JqZWN0O1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVCYXNlRm9yO1xuIiwiaW1wb3J0IGNyZWF0ZUJhc2VGb3IgZnJvbSAnLi9fY3JlYXRlQmFzZUZvci5qcyc7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYGJhc2VGb3JPd25gIHdoaWNoIGl0ZXJhdGVzIG92ZXIgYG9iamVjdGBcbiAqIHByb3BlcnRpZXMgcmV0dXJuZWQgYnkgYGtleXNGdW5jYCBhbmQgaW52b2tlcyBgaXRlcmF0ZWVgIGZvciBlYWNoIHByb3BlcnR5LlxuICogSXRlcmF0ZWUgZnVuY3Rpb25zIG1heSBleGl0IGl0ZXJhdGlvbiBlYXJseSBieSBleHBsaWNpdGx5IHJldHVybmluZyBgZmFsc2VgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gaXRlcmF0ZWUgVGhlIGZ1bmN0aW9uIGludm9rZWQgcGVyIGl0ZXJhdGlvbi5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGtleXNGdW5jIFRoZSBmdW5jdGlvbiB0byBnZXQgdGhlIGtleXMgb2YgYG9iamVjdGAuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG52YXIgYmFzZUZvciA9IGNyZWF0ZUJhc2VGb3IoKTtcblxuZXhwb3J0IGRlZmF1bHQgYmFzZUZvcjtcbiIsImltcG9ydCBiYXNlRm9yIGZyb20gJy4vX2Jhc2VGb3IuanMnO1xuaW1wb3J0IGtleXMgZnJvbSAnLi9rZXlzLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5mb3JPd25gIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGl0ZXJhdGVlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIGBvYmplY3RgLlxuICovXG5mdW5jdGlvbiBiYXNlRm9yT3duKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgcmV0dXJuIG9iamVjdCAmJiBiYXNlRm9yKG9iamVjdCwgaXRlcmF0ZWUsIGtleXMpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlRm9yT3duO1xuIiwiLyoqIFVzZWQgdG8gc3RhbmQtaW4gZm9yIGB1bmRlZmluZWRgIGhhc2ggdmFsdWVzLiAqL1xudmFyIEhBU0hfVU5ERUZJTkVEID0gJ19fbG9kYXNoX2hhc2hfdW5kZWZpbmVkX18nO1xuXG4vKipcbiAqIEFkZHMgYHZhbHVlYCB0byB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGFkZFxuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAYWxpYXMgcHVzaFxuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2FjaGUuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjYWNoZSBpbnN0YW5jZS5cbiAqL1xuZnVuY3Rpb24gc2V0Q2FjaGVBZGQodmFsdWUpIHtcbiAgdGhpcy5fX2RhdGFfXy5zZXQodmFsdWUsIEhBU0hfVU5ERUZJTkVEKTtcbiAgcmV0dXJuIHRoaXM7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHNldENhY2hlQWRkO1xuIiwiLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBpbiB0aGUgYXJyYXkgY2FjaGUuXG4gKlxuICogQHByaXZhdGVcbiAqIEBuYW1lIGhhc1xuICogQG1lbWJlck9mIFNldENhY2hlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZWFyY2ggZm9yLlxuICogQHJldHVybnMge251bWJlcn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBmb3VuZCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBzZXRDYWNoZUhhcyh2YWx1ZSkge1xuICByZXR1cm4gdGhpcy5fX2RhdGFfXy5oYXModmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBzZXRDYWNoZUhhcztcbiIsImltcG9ydCBNYXBDYWNoZSBmcm9tICcuL19NYXBDYWNoZS5qcyc7XG5pbXBvcnQgc2V0Q2FjaGVBZGQgZnJvbSAnLi9fc2V0Q2FjaGVBZGQuanMnO1xuaW1wb3J0IHNldENhY2hlSGFzIGZyb20gJy4vX3NldENhY2hlSGFzLmpzJztcblxuLyoqXG4gKlxuICogQ3JlYXRlcyBhbiBhcnJheSBjYWNoZSBvYmplY3QgdG8gc3RvcmUgdW5pcXVlIHZhbHVlcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQGNvbnN0cnVjdG9yXG4gKiBAcGFyYW0ge0FycmF5fSBbdmFsdWVzXSBUaGUgdmFsdWVzIHRvIGNhY2hlLlxuICovXG5mdW5jdGlvbiBTZXRDYWNoZSh2YWx1ZXMpIHtcbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSB2YWx1ZXMgPT0gbnVsbCA/IDAgOiB2YWx1ZXMubGVuZ3RoO1xuXG4gIHRoaXMuX19kYXRhX18gPSBuZXcgTWFwQ2FjaGU7XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgdGhpcy5hZGQodmFsdWVzW2luZGV4XSk7XG4gIH1cbn1cblxuLy8gQWRkIG1ldGhvZHMgdG8gYFNldENhY2hlYC5cblNldENhY2hlLnByb3RvdHlwZS5hZGQgPSBTZXRDYWNoZS5wcm90b3R5cGUucHVzaCA9IHNldENhY2hlQWRkO1xuU2V0Q2FjaGUucHJvdG90eXBlLmhhcyA9IHNldENhY2hlSGFzO1xuXG5leHBvcnQgZGVmYXVsdCBTZXRDYWNoZTtcbiIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnNvbWVgIGZvciBhcnJheXMgd2l0aG91dCBzdXBwb3J0IGZvciBpdGVyYXRlZVxuICogc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gW2FycmF5XSBUaGUgYXJyYXkgdG8gaXRlcmF0ZSBvdmVyLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBpdGVyYXRpb24uXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYW55IGVsZW1lbnQgcGFzc2VzIHRoZSBwcmVkaWNhdGUgY2hlY2ssXG4gKiAgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBhcnJheVNvbWUoYXJyYXksIHByZWRpY2F0ZSkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5ID09IG51bGwgPyAwIDogYXJyYXkubGVuZ3RoO1xuXG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgaWYgKHByZWRpY2F0ZShhcnJheVtpbmRleF0sIGluZGV4LCBhcnJheSkpIHtcbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFycmF5U29tZTtcbiIsIi8qKlxuICogQ2hlY2tzIGlmIGEgYGNhY2hlYCB2YWx1ZSBmb3IgYGtleWAgZXhpc3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gY2FjaGUgVGhlIGNhY2hlIHRvIHF1ZXJ5LlxuICogQHBhcmFtIHtzdHJpbmd9IGtleSBUaGUga2V5IG9mIHRoZSBlbnRyeSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhbiBlbnRyeSBmb3IgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGNhY2hlSGFzKGNhY2hlLCBrZXkpIHtcbiAgcmV0dXJuIGNhY2hlLmhhcyhrZXkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYWNoZUhhcztcbiIsImltcG9ydCBTZXRDYWNoZSBmcm9tICcuL19TZXRDYWNoZS5qcyc7XG5pbXBvcnQgYXJyYXlTb21lIGZyb20gJy4vX2FycmF5U29tZS5qcyc7XG5pbXBvcnQgY2FjaGVIYXMgZnJvbSAnLi9fY2FjaGVIYXMuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIGJpdG1hc2tzIGZvciB2YWx1ZSBjb21wYXJpc29ucy4gKi9cbnZhciBDT01QQVJFX1BBUlRJQUxfRkxBRyA9IDEsXG4gICAgQ09NUEFSRV9VTk9SREVSRURfRkxBRyA9IDI7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbERlZXBgIGZvciBhcnJheXMgd2l0aCBzdXBwb3J0IGZvclxuICogcGFydGlhbCBkZWVwIGNvbXBhcmlzb25zLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBhcnJheSBUaGUgYXJyYXkgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7QXJyYXl9IG90aGVyIFRoZSBvdGhlciBhcnJheSB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gc3RhY2sgVHJhY2tzIHRyYXZlcnNlZCBgYXJyYXlgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIGFycmF5cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbEFycmF5cyhhcnJheSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRyxcbiAgICAgIGFyckxlbmd0aCA9IGFycmF5Lmxlbmd0aCxcbiAgICAgIG90aExlbmd0aCA9IG90aGVyLmxlbmd0aDtcblxuICBpZiAoYXJyTGVuZ3RoICE9IG90aExlbmd0aCAmJiAhKGlzUGFydGlhbCAmJiBvdGhMZW5ndGggPiBhcnJMZW5ndGgpKSB7XG4gICAgcmV0dXJuIGZhbHNlO1xuICB9XG4gIC8vIEFzc3VtZSBjeWNsaWMgdmFsdWVzIGFyZSBlcXVhbC5cbiAgdmFyIHN0YWNrZWQgPSBzdGFjay5nZXQoYXJyYXkpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICByZXN1bHQgPSB0cnVlLFxuICAgICAgc2VlbiA9IChiaXRtYXNrICYgQ09NUEFSRV9VTk9SREVSRURfRkxBRykgPyBuZXcgU2V0Q2FjaGUgOiB1bmRlZmluZWQ7XG5cbiAgc3RhY2suc2V0KGFycmF5LCBvdGhlcik7XG4gIHN0YWNrLnNldChvdGhlciwgYXJyYXkpO1xuXG4gIC8vIElnbm9yZSBub24taW5kZXggcHJvcGVydGllcy5cbiAgd2hpbGUgKCsraW5kZXggPCBhcnJMZW5ndGgpIHtcbiAgICB2YXIgYXJyVmFsdWUgPSBhcnJheVtpbmRleF0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJbaW5kZXhdO1xuXG4gICAgaWYgKGN1c3RvbWl6ZXIpIHtcbiAgICAgIHZhciBjb21wYXJlZCA9IGlzUGFydGlhbFxuICAgICAgICA/IGN1c3RvbWl6ZXIob3RoVmFsdWUsIGFyclZhbHVlLCBpbmRleCwgb3RoZXIsIGFycmF5LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKGFyclZhbHVlLCBvdGhWYWx1ZSwgaW5kZXgsIGFycmF5LCBvdGhlciwgc3RhY2spO1xuICAgIH1cbiAgICBpZiAoY29tcGFyZWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWYgKGNvbXBhcmVkKSB7XG4gICAgICAgIGNvbnRpbnVlO1xuICAgICAgfVxuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgLy8gUmVjdXJzaXZlbHkgY29tcGFyZSBhcnJheXMgKHN1c2NlcHRpYmxlIHRvIGNhbGwgc3RhY2sgbGltaXRzKS5cbiAgICBpZiAoc2Vlbikge1xuICAgICAgaWYgKCFhcnJheVNvbWUob3RoZXIsIGZ1bmN0aW9uKG90aFZhbHVlLCBvdGhJbmRleCkge1xuICAgICAgICAgICAgaWYgKCFjYWNoZUhhcyhzZWVuLCBvdGhJbmRleCkgJiZcbiAgICAgICAgICAgICAgICAoYXJyVmFsdWUgPT09IG90aFZhbHVlIHx8IGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKSkpIHtcbiAgICAgICAgICAgICAgcmV0dXJuIHNlZW4ucHVzaChvdGhJbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSkpIHtcbiAgICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICAgIGJyZWFrO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIShcbiAgICAgICAgICBhcnJWYWx1ZSA9PT0gb3RoVmFsdWUgfHxcbiAgICAgICAgICAgIGVxdWFsRnVuYyhhcnJWYWx1ZSwgb3RoVmFsdWUsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIHN0YWNrKVxuICAgICAgICApKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICBzdGFja1snZGVsZXRlJ10oYXJyYXkpO1xuICBzdGFja1snZGVsZXRlJ10ob3RoZXIpO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBlcXVhbEFycmF5cztcbiIsImltcG9ydCBTeW1ib2wgZnJvbSAnLi9fU3ltYm9sLmpzJztcbmltcG9ydCBVaW50OEFycmF5IGZyb20gJy4vX1VpbnQ4QXJyYXkuanMnO1xuaW1wb3J0IGVxIGZyb20gJy4vZXEuanMnO1xuaW1wb3J0IGVxdWFsQXJyYXlzIGZyb20gJy4vX2VxdWFsQXJyYXlzLmpzJztcbmltcG9ydCBtYXBUb0FycmF5IGZyb20gJy4vX21hcFRvQXJyYXkuanMnO1xuaW1wb3J0IHNldFRvQXJyYXkgZnJvbSAnLi9fc2V0VG9BcnJheS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGJvb2xUYWcgPSAnW29iamVjdCBCb29sZWFuXScsXG4gICAgZGF0ZVRhZyA9ICdbb2JqZWN0IERhdGVdJyxcbiAgICBlcnJvclRhZyA9ICdbb2JqZWN0IEVycm9yXScsXG4gICAgbWFwVGFnID0gJ1tvYmplY3QgTWFwXScsXG4gICAgbnVtYmVyVGFnID0gJ1tvYmplY3QgTnVtYmVyXScsXG4gICAgcmVnZXhwVGFnID0gJ1tvYmplY3QgUmVnRXhwXScsXG4gICAgc2V0VGFnID0gJ1tvYmplY3QgU2V0XScsXG4gICAgc3RyaW5nVGFnID0gJ1tvYmplY3QgU3RyaW5nXScsXG4gICAgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbnZhciBhcnJheUJ1ZmZlclRhZyA9ICdbb2JqZWN0IEFycmF5QnVmZmVyXScsXG4gICAgZGF0YVZpZXdUYWcgPSAnW29iamVjdCBEYXRhVmlld10nO1xuXG4vKiogVXNlZCB0byBjb252ZXJ0IHN5bWJvbHMgdG8gcHJpbWl0aXZlcyBhbmQgc3RyaW5ncy4gKi9cbnZhciBzeW1ib2xQcm90byA9IFN5bWJvbCA/IFN5bWJvbC5wcm90b3R5cGUgOiB1bmRlZmluZWQsXG4gICAgc3ltYm9sVmFsdWVPZiA9IHN5bWJvbFByb3RvID8gc3ltYm9sUHJvdG8udmFsdWVPZiA6IHVuZGVmaW5lZDtcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VJc0VxdWFsRGVlcGAgZm9yIGNvbXBhcmluZyBvYmplY3RzIG9mXG4gKiB0aGUgc2FtZSBgdG9TdHJpbmdUYWdgLlxuICpcbiAqICoqTm90ZToqKiBUaGlzIGZ1bmN0aW9uIG9ubHkgc3VwcG9ydHMgY29tcGFyaW5nIHZhbHVlcyB3aXRoIHRhZ3Mgb2ZcbiAqIGBCb29sZWFuYCwgYERhdGVgLCBgRXJyb3JgLCBgTnVtYmVyYCwgYFJlZ0V4cGAsIG9yIGBTdHJpbmdgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvdGhlciBUaGUgb3RoZXIgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge3N0cmluZ30gdGFnIFRoZSBgdG9TdHJpbmdUYWdgIG9mIHRoZSBvYmplY3RzIHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge251bWJlcn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy4gU2VlIGBiYXNlSXNFcXVhbGAgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGN1c3RvbWl6ZXIgVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGVxdWFsRnVuYyBUaGUgZnVuY3Rpb24gdG8gZGV0ZXJtaW5lIGVxdWl2YWxlbnRzIG9mIHZhbHVlcy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBzdGFjayBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCB0YWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgc3dpdGNoICh0YWcpIHtcbiAgICBjYXNlIGRhdGFWaWV3VGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgIChvYmplY3QuYnl0ZU9mZnNldCAhPSBvdGhlci5ieXRlT2Zmc2V0KSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICBvYmplY3QgPSBvYmplY3QuYnVmZmVyO1xuICAgICAgb3RoZXIgPSBvdGhlci5idWZmZXI7XG5cbiAgICBjYXNlIGFycmF5QnVmZmVyVGFnOlxuICAgICAgaWYgKChvYmplY3QuYnl0ZUxlbmd0aCAhPSBvdGhlci5ieXRlTGVuZ3RoKSB8fFxuICAgICAgICAgICFlcXVhbEZ1bmMobmV3IFVpbnQ4QXJyYXkob2JqZWN0KSwgbmV3IFVpbnQ4QXJyYXkob3RoZXIpKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZTtcblxuICAgIGNhc2UgYm9vbFRhZzpcbiAgICBjYXNlIGRhdGVUYWc6XG4gICAgY2FzZSBudW1iZXJUYWc6XG4gICAgICAvLyBDb2VyY2UgYm9vbGVhbnMgdG8gYDFgIG9yIGAwYCBhbmQgZGF0ZXMgdG8gbWlsbGlzZWNvbmRzLlxuICAgICAgLy8gSW52YWxpZCBkYXRlcyBhcmUgY29lcmNlZCB0byBgTmFOYC5cbiAgICAgIHJldHVybiBlcSgrb2JqZWN0LCArb3RoZXIpO1xuXG4gICAgY2FzZSBlcnJvclRhZzpcbiAgICAgIHJldHVybiBvYmplY3QubmFtZSA9PSBvdGhlci5uYW1lICYmIG9iamVjdC5tZXNzYWdlID09IG90aGVyLm1lc3NhZ2U7XG5cbiAgICBjYXNlIHJlZ2V4cFRhZzpcbiAgICBjYXNlIHN0cmluZ1RhZzpcbiAgICAgIC8vIENvZXJjZSByZWdleGVzIHRvIHN0cmluZ3MgYW5kIHRyZWF0IHN0cmluZ3MsIHByaW1pdGl2ZXMgYW5kIG9iamVjdHMsXG4gICAgICAvLyBhcyBlcXVhbC4gU2VlIGh0dHA6Ly93d3cuZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1yZWdleHAucHJvdG90eXBlLnRvc3RyaW5nXG4gICAgICAvLyBmb3IgbW9yZSBkZXRhaWxzLlxuICAgICAgcmV0dXJuIG9iamVjdCA9PSAob3RoZXIgKyAnJyk7XG5cbiAgICBjYXNlIG1hcFRhZzpcbiAgICAgIHZhciBjb252ZXJ0ID0gbWFwVG9BcnJheTtcblxuICAgIGNhc2Ugc2V0VGFnOlxuICAgICAgdmFyIGlzUGFydGlhbCA9IGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRztcbiAgICAgIGNvbnZlcnQgfHwgKGNvbnZlcnQgPSBzZXRUb0FycmF5KTtcblxuICAgICAgaWYgKG9iamVjdC5zaXplICE9IG90aGVyLnNpemUgJiYgIWlzUGFydGlhbCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgICAvLyBBc3N1bWUgY3ljbGljIHZhbHVlcyBhcmUgZXF1YWwuXG4gICAgICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICAgICAgaWYgKHN0YWNrZWQpIHtcbiAgICAgICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gICAgICB9XG4gICAgICBiaXRtYXNrIHw9IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUc7XG5cbiAgICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgICAgc3RhY2suc2V0KG9iamVjdCwgb3RoZXIpO1xuICAgICAgdmFyIHJlc3VsdCA9IGVxdWFsQXJyYXlzKGNvbnZlcnQob2JqZWN0KSwgY29udmVydChvdGhlciksIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICAgICAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gICAgICByZXR1cm4gcmVzdWx0O1xuXG4gICAgY2FzZSBzeW1ib2xUYWc6XG4gICAgICBpZiAoc3ltYm9sVmFsdWVPZikge1xuICAgICAgICByZXR1cm4gc3ltYm9sVmFsdWVPZi5jYWxsKG9iamVjdCkgPT0gc3ltYm9sVmFsdWVPZi5jYWxsKG90aGVyKTtcbiAgICAgIH1cbiAgfVxuICByZXR1cm4gZmFsc2U7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxdWFsQnlUYWc7XG4iLCJpbXBvcnQgZ2V0QWxsS2V5cyBmcm9tICcuL19nZXRBbGxLZXlzLmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKiogVXNlZCB0byBjaGVjayBvYmplY3RzIGZvciBvd24gcHJvcGVydGllcy4gKi9cbnZhciBoYXNPd25Qcm9wZXJ0eSA9IG9iamVjdFByb3RvLmhhc093blByb3BlcnR5O1xuXG4vKipcbiAqIEEgc3BlY2lhbGl6ZWQgdmVyc2lvbiBvZiBgYmFzZUlzRXF1YWxEZWVwYCBmb3Igb2JqZWN0cyB3aXRoIHN1cHBvcnQgZm9yXG4gKiBwYXJ0aWFsIGRlZXAgY29tcGFyaXNvbnMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtPYmplY3R9IG90aGVyIFRoZSBvdGhlciBvYmplY3QgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBiaXRtYXNrIFRoZSBiaXRtYXNrIGZsYWdzLiBTZWUgYGJhc2VJc0VxdWFsYCBmb3IgbW9yZSBkZXRhaWxzLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gY3VzdG9taXplciBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIGNvbXBhcmlzb25zLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZXF1YWxGdW5jIFRoZSBmdW5jdGlvbiB0byBkZXRlcm1pbmUgZXF1aXZhbGVudHMgb2YgdmFsdWVzLlxuICogQHBhcmFtIHtPYmplY3R9IHN0YWNrIFRyYWNrcyB0cmF2ZXJzZWQgYG9iamVjdGAgYW5kIGBvdGhlcmAgb2JqZWN0cy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiB0aGUgb2JqZWN0cyBhcmUgZXF1aXZhbGVudCwgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBlcXVhbE9iamVjdHMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaykge1xuICB2YXIgaXNQYXJ0aWFsID0gYml0bWFzayAmIENPTVBBUkVfUEFSVElBTF9GTEFHLFxuICAgICAgb2JqUHJvcHMgPSBnZXRBbGxLZXlzKG9iamVjdCksXG4gICAgICBvYmpMZW5ndGggPSBvYmpQcm9wcy5sZW5ndGgsXG4gICAgICBvdGhQcm9wcyA9IGdldEFsbEtleXMob3RoZXIpLFxuICAgICAgb3RoTGVuZ3RoID0gb3RoUHJvcHMubGVuZ3RoO1xuXG4gIGlmIChvYmpMZW5ndGggIT0gb3RoTGVuZ3RoICYmICFpc1BhcnRpYWwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgdmFyIGluZGV4ID0gb2JqTGVuZ3RoO1xuICB3aGlsZSAoaW5kZXgtLSkge1xuICAgIHZhciBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgaWYgKCEoaXNQYXJ0aWFsID8ga2V5IGluIG90aGVyIDogaGFzT3duUHJvcGVydHkuY2FsbChvdGhlciwga2V5KSkpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gIH1cbiAgLy8gQXNzdW1lIGN5Y2xpYyB2YWx1ZXMgYXJlIGVxdWFsLlxuICB2YXIgc3RhY2tlZCA9IHN0YWNrLmdldChvYmplY3QpO1xuICBpZiAoc3RhY2tlZCAmJiBzdGFjay5nZXQob3RoZXIpKSB7XG4gICAgcmV0dXJuIHN0YWNrZWQgPT0gb3RoZXI7XG4gIH1cbiAgdmFyIHJlc3VsdCA9IHRydWU7XG4gIHN0YWNrLnNldChvYmplY3QsIG90aGVyKTtcbiAgc3RhY2suc2V0KG90aGVyLCBvYmplY3QpO1xuXG4gIHZhciBza2lwQ3RvciA9IGlzUGFydGlhbDtcbiAgd2hpbGUgKCsraW5kZXggPCBvYmpMZW5ndGgpIHtcbiAgICBrZXkgPSBvYmpQcm9wc1tpbmRleF07XG4gICAgdmFyIG9ialZhbHVlID0gb2JqZWN0W2tleV0sXG4gICAgICAgIG90aFZhbHVlID0gb3RoZXJba2V5XTtcblxuICAgIGlmIChjdXN0b21pemVyKSB7XG4gICAgICB2YXIgY29tcGFyZWQgPSBpc1BhcnRpYWxcbiAgICAgICAgPyBjdXN0b21pemVyKG90aFZhbHVlLCBvYmpWYWx1ZSwga2V5LCBvdGhlciwgb2JqZWN0LCBzdGFjaylcbiAgICAgICAgOiBjdXN0b21pemVyKG9ialZhbHVlLCBvdGhWYWx1ZSwga2V5LCBvYmplY3QsIG90aGVyLCBzdGFjayk7XG4gICAgfVxuICAgIC8vIFJlY3Vyc2l2ZWx5IGNvbXBhcmUgb2JqZWN0cyAoc3VzY2VwdGlibGUgdG8gY2FsbCBzdGFjayBsaW1pdHMpLlxuICAgIGlmICghKGNvbXBhcmVkID09PSB1bmRlZmluZWRcbiAgICAgICAgICA/IChvYmpWYWx1ZSA9PT0gb3RoVmFsdWUgfHwgZXF1YWxGdW5jKG9ialZhbHVlLCBvdGhWYWx1ZSwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spKVxuICAgICAgICAgIDogY29tcGFyZWRcbiAgICAgICAgKSkge1xuICAgICAgcmVzdWx0ID0gZmFsc2U7XG4gICAgICBicmVhaztcbiAgICB9XG4gICAgc2tpcEN0b3IgfHwgKHNraXBDdG9yID0ga2V5ID09ICdjb25zdHJ1Y3RvcicpO1xuICB9XG4gIGlmIChyZXN1bHQgJiYgIXNraXBDdG9yKSB7XG4gICAgdmFyIG9iakN0b3IgPSBvYmplY3QuY29uc3RydWN0b3IsXG4gICAgICAgIG90aEN0b3IgPSBvdGhlci5jb25zdHJ1Y3RvcjtcblxuICAgIC8vIE5vbiBgT2JqZWN0YCBvYmplY3QgaW5zdGFuY2VzIHdpdGggZGlmZmVyZW50IGNvbnN0cnVjdG9ycyBhcmUgbm90IGVxdWFsLlxuICAgIGlmIChvYmpDdG9yICE9IG90aEN0b3IgJiZcbiAgICAgICAgKCdjb25zdHJ1Y3RvcicgaW4gb2JqZWN0ICYmICdjb25zdHJ1Y3RvcicgaW4gb3RoZXIpICYmXG4gICAgICAgICEodHlwZW9mIG9iakN0b3IgPT0gJ2Z1bmN0aW9uJyAmJiBvYmpDdG9yIGluc3RhbmNlb2Ygb2JqQ3RvciAmJlxuICAgICAgICAgIHR5cGVvZiBvdGhDdG9yID09ICdmdW5jdGlvbicgJiYgb3RoQ3RvciBpbnN0YW5jZW9mIG90aEN0b3IpKSB7XG4gICAgICByZXN1bHQgPSBmYWxzZTtcbiAgICB9XG4gIH1cbiAgc3RhY2tbJ2RlbGV0ZSddKG9iamVjdCk7XG4gIHN0YWNrWydkZWxldGUnXShvdGhlcik7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGVxdWFsT2JqZWN0cztcbiIsImltcG9ydCBTdGFjayBmcm9tICcuL19TdGFjay5qcyc7XG5pbXBvcnQgZXF1YWxBcnJheXMgZnJvbSAnLi9fZXF1YWxBcnJheXMuanMnO1xuaW1wb3J0IGVxdWFsQnlUYWcgZnJvbSAnLi9fZXF1YWxCeVRhZy5qcyc7XG5pbXBvcnQgZXF1YWxPYmplY3RzIGZyb20gJy4vX2VxdWFsT2JqZWN0cy5qcyc7XG5pbXBvcnQgZ2V0VGFnIGZyb20gJy4vX2dldFRhZy5qcyc7XG5pbXBvcnQgaXNBcnJheSBmcm9tICcuL2lzQXJyYXkuanMnO1xuaW1wb3J0IGlzQnVmZmVyIGZyb20gJy4vaXNCdWZmZXIuanMnO1xuaW1wb3J0IGlzVHlwZWRBcnJheSBmcm9tICcuL2lzVHlwZWRBcnJheS5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMTtcblxuLyoqIGBPYmplY3QjdG9TdHJpbmdgIHJlc3VsdCByZWZlcmVuY2VzLiAqL1xudmFyIGFyZ3NUYWcgPSAnW29iamVjdCBBcmd1bWVudHNdJyxcbiAgICBhcnJheVRhZyA9ICdbb2JqZWN0IEFycmF5XScsXG4gICAgb2JqZWN0VGFnID0gJ1tvYmplY3QgT2JqZWN0XSc7XG5cbi8qKiBVc2VkIGZvciBidWlsdC1pbiBtZXRob2QgcmVmZXJlbmNlcy4gKi9cbnZhciBvYmplY3RQcm90byA9IE9iamVjdC5wcm90b3R5cGU7XG5cbi8qKiBVc2VkIHRvIGNoZWNrIG9iamVjdHMgZm9yIG93biBwcm9wZXJ0aWVzLiAqL1xudmFyIGhhc093blByb3BlcnR5ID0gb2JqZWN0UHJvdG8uaGFzT3duUHJvcGVydHk7XG5cbi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBiYXNlSXNFcXVhbGAgZm9yIGFycmF5cyBhbmQgb2JqZWN0cyB3aGljaCBwZXJmb3Jtc1xuICogZGVlcCBjb21wYXJpc29ucyBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzIGVuYWJsaW5nIG9iamVjdHMgd2l0aCBjaXJjdWxhclxuICogcmVmZXJlbmNlcyB0byBiZSBjb21wYXJlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGNvbXBhcmUuXG4gKiBAcGFyYW0ge09iamVjdH0gb3RoZXIgVGhlIG90aGVyIG9iamVjdCB0byBjb21wYXJlLlxuICogQHBhcmFtIHtudW1iZXJ9IGJpdG1hc2sgVGhlIGJpdG1hc2sgZmxhZ3MuIFNlZSBgYmFzZUlzRXF1YWxgIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBjdXN0b21pemVyIFRoZSBmdW5jdGlvbiB0byBjdXN0b21pemUgY29tcGFyaXNvbnMuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBlcXVhbEZ1bmMgVGhlIGZ1bmN0aW9uIHRvIGRldGVybWluZSBlcXVpdmFsZW50cyBvZiB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIGBvYmplY3RgIGFuZCBgb3RoZXJgIG9iamVjdHMuXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgdGhlIG9iamVjdHMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWxEZWVwKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spIHtcbiAgdmFyIG9iaklzQXJyID0gaXNBcnJheShvYmplY3QpLFxuICAgICAgb3RoSXNBcnIgPSBpc0FycmF5KG90aGVyKSxcbiAgICAgIG9ialRhZyA9IG9iaklzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob2JqZWN0KSxcbiAgICAgIG90aFRhZyA9IG90aElzQXJyID8gYXJyYXlUYWcgOiBnZXRUYWcob3RoZXIpO1xuXG4gIG9ialRhZyA9IG9ialRhZyA9PSBhcmdzVGFnID8gb2JqZWN0VGFnIDogb2JqVGFnO1xuICBvdGhUYWcgPSBvdGhUYWcgPT0gYXJnc1RhZyA/IG9iamVjdFRhZyA6IG90aFRhZztcblxuICB2YXIgb2JqSXNPYmogPSBvYmpUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgb3RoSXNPYmogPSBvdGhUYWcgPT0gb2JqZWN0VGFnLFxuICAgICAgaXNTYW1lVGFnID0gb2JqVGFnID09IG90aFRhZztcblxuICBpZiAoaXNTYW1lVGFnICYmIGlzQnVmZmVyKG9iamVjdCkpIHtcbiAgICBpZiAoIWlzQnVmZmVyKG90aGVyKSkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgICBvYmpJc0FyciA9IHRydWU7XG4gICAgb2JqSXNPYmogPSBmYWxzZTtcbiAgfVxuICBpZiAoaXNTYW1lVGFnICYmICFvYmpJc09iaikge1xuICAgIHN0YWNrIHx8IChzdGFjayA9IG5ldyBTdGFjayk7XG4gICAgcmV0dXJuIChvYmpJc0FyciB8fCBpc1R5cGVkQXJyYXkob2JqZWN0KSlcbiAgICAgID8gZXF1YWxBcnJheXMob2JqZWN0LCBvdGhlciwgYml0bWFzaywgY3VzdG9taXplciwgZXF1YWxGdW5jLCBzdGFjaylcbiAgICAgIDogZXF1YWxCeVRhZyhvYmplY3QsIG90aGVyLCBvYmpUYWcsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xuICB9XG4gIGlmICghKGJpdG1hc2sgJiBDT01QQVJFX1BBUlRJQUxfRkxBRykpIHtcbiAgICB2YXIgb2JqSXNXcmFwcGVkID0gb2JqSXNPYmogJiYgaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsICdfX3dyYXBwZWRfXycpLFxuICAgICAgICBvdGhJc1dyYXBwZWQgPSBvdGhJc09iaiAmJiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG90aGVyLCAnX193cmFwcGVkX18nKTtcblxuICAgIGlmIChvYmpJc1dyYXBwZWQgfHwgb3RoSXNXcmFwcGVkKSB7XG4gICAgICB2YXIgb2JqVW53cmFwcGVkID0gb2JqSXNXcmFwcGVkID8gb2JqZWN0LnZhbHVlKCkgOiBvYmplY3QsXG4gICAgICAgICAgb3RoVW53cmFwcGVkID0gb3RoSXNXcmFwcGVkID8gb3RoZXIudmFsdWUoKSA6IG90aGVyO1xuXG4gICAgICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICAgICAgcmV0dXJuIGVxdWFsRnVuYyhvYmpVbndyYXBwZWQsIG90aFVud3JhcHBlZCwgYml0bWFzaywgY3VzdG9taXplciwgc3RhY2spO1xuICAgIH1cbiAgfVxuICBpZiAoIWlzU2FtZVRhZykge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBzdGFjayB8fCAoc3RhY2sgPSBuZXcgU3RhY2spO1xuICByZXR1cm4gZXF1YWxPYmplY3RzKG9iamVjdCwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGVxdWFsRnVuYywgc3RhY2spO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNFcXVhbERlZXA7XG4iLCJpbXBvcnQgYmFzZUlzRXF1YWxEZWVwIGZyb20gJy4vX2Jhc2VJc0VxdWFsRGVlcC5qcyc7XG5pbXBvcnQgaXNPYmplY3RMaWtlIGZyb20gJy4vaXNPYmplY3RMaWtlLmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc0VxdWFsYCB3aGljaCBzdXBwb3J0cyBwYXJ0aWFsIGNvbXBhcmlzb25zXG4gKiBhbmQgdHJhY2tzIHRyYXZlcnNlZCBvYmplY3RzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjb21wYXJlLlxuICogQHBhcmFtIHsqfSBvdGhlciBUaGUgb3RoZXIgdmFsdWUgdG8gY29tcGFyZS5cbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYml0bWFzayBUaGUgYml0bWFzayBmbGFncy5cbiAqICAxIC0gVW5vcmRlcmVkIGNvbXBhcmlzb25cbiAqICAyIC0gUGFydGlhbCBjb21wYXJpc29uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbc3RhY2tdIFRyYWNrcyB0cmF2ZXJzZWQgYHZhbHVlYCBhbmQgYG90aGVyYCBvYmplY3RzLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIHRoZSB2YWx1ZXMgYXJlIGVxdWl2YWxlbnQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gYmFzZUlzRXF1YWwodmFsdWUsIG90aGVyLCBiaXRtYXNrLCBjdXN0b21pemVyLCBzdGFjaykge1xuICBpZiAodmFsdWUgPT09IG90aGVyKSB7XG4gICAgcmV0dXJuIHRydWU7XG4gIH1cbiAgaWYgKHZhbHVlID09IG51bGwgfHwgb3RoZXIgPT0gbnVsbCB8fCAoIWlzT2JqZWN0TGlrZSh2YWx1ZSkgJiYgIWlzT2JqZWN0TGlrZShvdGhlcikpKSB7XG4gICAgcmV0dXJuIHZhbHVlICE9PSB2YWx1ZSAmJiBvdGhlciAhPT0gb3RoZXI7XG4gIH1cbiAgcmV0dXJuIGJhc2VJc0VxdWFsRGVlcCh2YWx1ZSwgb3RoZXIsIGJpdG1hc2ssIGN1c3RvbWl6ZXIsIGJhc2VJc0VxdWFsLCBzdGFjayk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VJc0VxdWFsO1xuIiwiaW1wb3J0IFN0YWNrIGZyb20gJy4vX1N0YWNrLmpzJztcbmltcG9ydCBiYXNlSXNFcXVhbCBmcm9tICcuL19iYXNlSXNFcXVhbC5qcyc7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgYml0bWFza3MgZm9yIHZhbHVlIGNvbXBhcmlzb25zLiAqL1xudmFyIENPTVBBUkVfUEFSVElBTF9GTEFHID0gMSxcbiAgICBDT01QQVJFX1VOT1JERVJFRF9GTEFHID0gMjtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pc01hdGNoYCB3aXRob3V0IHN1cHBvcnQgZm9yIGl0ZXJhdGVlIHNob3J0aGFuZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBpbnNwZWN0LlxuICogQHBhcmFtIHtPYmplY3R9IHNvdXJjZSBUaGUgb2JqZWN0IG9mIHByb3BlcnR5IHZhbHVlcyB0byBtYXRjaC5cbiAqIEBwYXJhbSB7QXJyYXl9IG1hdGNoRGF0YSBUaGUgcHJvcGVydHkgbmFtZXMsIHZhbHVlcywgYW5kIGNvbXBhcmUgZmxhZ3MgdG8gbWF0Y2guXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBjb21wYXJpc29ucy5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgb2JqZWN0YCBpcyBhIG1hdGNoLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VJc01hdGNoKG9iamVjdCwgc291cmNlLCBtYXRjaERhdGEsIGN1c3RvbWl6ZXIpIHtcbiAgdmFyIGluZGV4ID0gbWF0Y2hEYXRhLmxlbmd0aCxcbiAgICAgIGxlbmd0aCA9IGluZGV4LFxuICAgICAgbm9DdXN0b21pemVyID0gIWN1c3RvbWl6ZXI7XG5cbiAgaWYgKG9iamVjdCA9PSBudWxsKSB7XG4gICAgcmV0dXJuICFsZW5ndGg7XG4gIH1cbiAgb2JqZWN0ID0gT2JqZWN0KG9iamVjdCk7XG4gIHdoaWxlIChpbmRleC0tKSB7XG4gICAgdmFyIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIGlmICgobm9DdXN0b21pemVyICYmIGRhdGFbMl0pXG4gICAgICAgICAgPyBkYXRhWzFdICE9PSBvYmplY3RbZGF0YVswXV1cbiAgICAgICAgICA6ICEoZGF0YVswXSBpbiBvYmplY3QpXG4gICAgICAgICkge1xuICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbiAgfVxuICB3aGlsZSAoKytpbmRleCA8IGxlbmd0aCkge1xuICAgIGRhdGEgPSBtYXRjaERhdGFbaW5kZXhdO1xuICAgIHZhciBrZXkgPSBkYXRhWzBdLFxuICAgICAgICBvYmpWYWx1ZSA9IG9iamVjdFtrZXldLFxuICAgICAgICBzcmNWYWx1ZSA9IGRhdGFbMV07XG5cbiAgICBpZiAobm9DdXN0b21pemVyICYmIGRhdGFbMl0pIHtcbiAgICAgIGlmIChvYmpWYWx1ZSA9PT0gdW5kZWZpbmVkICYmICEoa2V5IGluIG9iamVjdCkpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgc3RhY2sgPSBuZXcgU3RhY2s7XG4gICAgICBpZiAoY3VzdG9taXplcikge1xuICAgICAgICB2YXIgcmVzdWx0ID0gY3VzdG9taXplcihvYmpWYWx1ZSwgc3JjVmFsdWUsIGtleSwgb2JqZWN0LCBzb3VyY2UsIHN0YWNrKTtcbiAgICAgIH1cbiAgICAgIGlmICghKHJlc3VsdCA9PT0gdW5kZWZpbmVkXG4gICAgICAgICAgICA/IGJhc2VJc0VxdWFsKHNyY1ZhbHVlLCBvYmpWYWx1ZSwgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgfCBDT01QQVJFX1VOT1JERVJFRF9GTEFHLCBjdXN0b21pemVyLCBzdGFjaylcbiAgICAgICAgICAgIDogcmVzdWx0XG4gICAgICAgICAgKSkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJldHVybiB0cnVlO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSXNNYXRjaDtcbiIsImltcG9ydCBpc09iamVjdCBmcm9tICcuL2lzT2JqZWN0LmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyBzdWl0YWJsZSBmb3Igc3RyaWN0IGVxdWFsaXR5IGNvbXBhcmlzb25zLCBpLmUuIGA9PT1gLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlmIHN1aXRhYmxlIGZvciBzdHJpY3RcbiAqICBlcXVhbGl0eSBjb21wYXJpc29ucywgZWxzZSBgZmFsc2VgLlxuICovXG5mdW5jdGlvbiBpc1N0cmljdENvbXBhcmFibGUodmFsdWUpIHtcbiAgcmV0dXJuIHZhbHVlID09PSB2YWx1ZSAmJiAhaXNPYmplY3QodmFsdWUpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBpc1N0cmljdENvbXBhcmFibGU7XG4iLCJpbXBvcnQgaXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyc7XG5pbXBvcnQga2V5cyBmcm9tICcuL2tleXMuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIHByb3BlcnR5IG5hbWVzLCB2YWx1ZXMsIGFuZCBjb21wYXJlIGZsYWdzIG9mIGBvYmplY3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIG1hdGNoIGRhdGEgb2YgYG9iamVjdGAuXG4gKi9cbmZ1bmN0aW9uIGdldE1hdGNoRGF0YShvYmplY3QpIHtcbiAgdmFyIHJlc3VsdCA9IGtleXMob2JqZWN0KSxcbiAgICAgIGxlbmd0aCA9IHJlc3VsdC5sZW5ndGg7XG5cbiAgd2hpbGUgKGxlbmd0aC0tKSB7XG4gICAgdmFyIGtleSA9IHJlc3VsdFtsZW5ndGhdLFxuICAgICAgICB2YWx1ZSA9IG9iamVjdFtrZXldO1xuXG4gICAgcmVzdWx0W2xlbmd0aF0gPSBba2V5LCB2YWx1ZSwgaXNTdHJpY3RDb21wYXJhYmxlKHZhbHVlKV07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZ2V0TWF0Y2hEYXRhO1xuIiwiLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYG1hdGNoZXNQcm9wZXJ0eWAgZm9yIHNvdXJjZSB2YWx1ZXMgc3VpdGFibGVcbiAqIGZvciBzdHJpY3QgZXF1YWxpdHkgY29tcGFyaXNvbnMsIGkuZS4gYD09PWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShrZXksIHNyY1ZhbHVlKSB7XG4gIHJldHVybiBmdW5jdGlvbihvYmplY3QpIHtcbiAgICBpZiAob2JqZWN0ID09IG51bGwpIHtcbiAgICAgIHJldHVybiBmYWxzZTtcbiAgICB9XG4gICAgcmV0dXJuIG9iamVjdFtrZXldID09PSBzcmNWYWx1ZSAmJlxuICAgICAgKHNyY1ZhbHVlICE9PSB1bmRlZmluZWQgfHwgKGtleSBpbiBPYmplY3Qob2JqZWN0KSkpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZTtcbiIsImltcG9ydCBiYXNlSXNNYXRjaCBmcm9tICcuL19iYXNlSXNNYXRjaC5qcyc7XG5pbXBvcnQgZ2V0TWF0Y2hEYXRhIGZyb20gJy4vX2dldE1hdGNoRGF0YS5qcyc7XG5pbXBvcnQgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgZnJvbSAnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMnO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNgIHdoaWNoIGRvZXNuJ3QgY2xvbmUgYHNvdXJjZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBzb3VyY2UgVGhlIG9iamVjdCBvZiBwcm9wZXJ0eSB2YWx1ZXMgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlcyhzb3VyY2UpIHtcbiAgdmFyIG1hdGNoRGF0YSA9IGdldE1hdGNoRGF0YShzb3VyY2UpO1xuICBpZiAobWF0Y2hEYXRhLmxlbmd0aCA9PSAxICYmIG1hdGNoRGF0YVswXVsyXSkge1xuICAgIHJldHVybiBtYXRjaGVzU3RyaWN0Q29tcGFyYWJsZShtYXRjaERhdGFbMF1bMF0sIG1hdGNoRGF0YVswXVsxXSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT09IHNvdXJjZSB8fCBiYXNlSXNNYXRjaChvYmplY3QsIHNvdXJjZSwgbWF0Y2hEYXRhKTtcbiAgfTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZU1hdGNoZXM7XG4iLCJpbXBvcnQgY2FzdFBhdGggZnJvbSAnLi9fY2FzdFBhdGguanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5nZXRgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVmYXVsdCB2YWx1ZXMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7T2JqZWN0fSBvYmplY3QgVGhlIG9iamVjdCB0byBxdWVyeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBnZXQuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyB0aGUgcmVzb2x2ZWQgdmFsdWUuXG4gKi9cbmZ1bmN0aW9uIGJhc2VHZXQob2JqZWN0LCBwYXRoKSB7XG4gIHBhdGggPSBjYXN0UGF0aChwYXRoLCBvYmplY3QpO1xuXG4gIHZhciBpbmRleCA9IDAsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aDtcblxuICB3aGlsZSAob2JqZWN0ICE9IG51bGwgJiYgaW5kZXggPCBsZW5ndGgpIHtcbiAgICBvYmplY3QgPSBvYmplY3RbdG9LZXkocGF0aFtpbmRleCsrXSldO1xuICB9XG4gIHJldHVybiAoaW5kZXggJiYgaW5kZXggPT0gbGVuZ3RoKSA/IG9iamVjdCA6IHVuZGVmaW5lZDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUdldDtcbiIsImltcG9ydCBiYXNlR2V0IGZyb20gJy4vX2Jhc2VHZXQuanMnO1xuXG4vKipcbiAqIEdldHMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBgb2JqZWN0YC4gSWYgdGhlIHJlc29sdmVkIHZhbHVlIGlzXG4gKiBgdW5kZWZpbmVkYCwgdGhlIGBkZWZhdWx0VmFsdWVgIGlzIHJldHVybmVkIGluIGl0cyBwbGFjZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuNy4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBbZGVmYXVsdFZhbHVlXSBUaGUgdmFsdWUgcmV0dXJuZWQgZm9yIGB1bmRlZmluZWRgIHJlc29sdmVkIHZhbHVlcy5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSByZXNvbHZlZCB2YWx1ZS5cbiAqIEBleGFtcGxlXG4gKlxuICogdmFyIG9iamVjdCA9IHsgJ2EnOiBbeyAnYic6IHsgJ2MnOiAzIH0gfV0gfTtcbiAqXG4gKiBfLmdldChvYmplY3QsICdhWzBdLmIuYycpO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgWydhJywgJzAnLCAnYicsICdjJ10pO1xuICogLy8gPT4gM1xuICpcbiAqIF8uZ2V0KG9iamVjdCwgJ2EuYi5jJywgJ2RlZmF1bHQnKTtcbiAqIC8vID0+ICdkZWZhdWx0J1xuICovXG5mdW5jdGlvbiBnZXQob2JqZWN0LCBwYXRoLCBkZWZhdWx0VmFsdWUpIHtcbiAgdmFyIHJlc3VsdCA9IG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogYmFzZUdldChvYmplY3QsIHBhdGgpO1xuICByZXR1cm4gcmVzdWx0ID09PSB1bmRlZmluZWQgPyBkZWZhdWx0VmFsdWUgOiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IGdldDtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uaGFzSW5gIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IFtvYmplY3RdIFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30ga2V5IFRoZSBrZXkgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYGtleWAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VIYXNJbihvYmplY3QsIGtleSkge1xuICByZXR1cm4gb2JqZWN0ICE9IG51bGwgJiYga2V5IGluIE9iamVjdChvYmplY3QpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlSGFzSW47XG4iLCJpbXBvcnQgYmFzZUhhc0luIGZyb20gJy4vX2Jhc2VIYXNJbi5qcyc7XG5pbXBvcnQgaGFzUGF0aCBmcm9tICcuL19oYXNQYXRoLmpzJztcblxuLyoqXG4gKiBDaGVja3MgaWYgYHBhdGhgIGlzIGEgZGlyZWN0IG9yIGluaGVyaXRlZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDQuMC4wXG4gKiBAY2F0ZWdvcnkgT2JqZWN0XG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBvYmplY3QgdG8gcXVlcnkuXG4gKiBAcGFyYW0ge0FycmF5fHN0cmluZ30gcGF0aCBUaGUgcGF0aCB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgcGF0aGAgZXhpc3RzLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIHZhciBvYmplY3QgPSBfLmNyZWF0ZSh7ICdhJzogXy5jcmVhdGUoeyAnYic6IDIgfSkgfSk7XG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhJyk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdhLmInKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmhhc0luKG9iamVjdCwgWydhJywgJ2InXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5oYXNJbihvYmplY3QsICdiJyk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBoYXNJbihvYmplY3QsIHBhdGgpIHtcbiAgcmV0dXJuIG9iamVjdCAhPSBudWxsICYmIGhhc1BhdGgob2JqZWN0LCBwYXRoLCBiYXNlSGFzSW4pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBoYXNJbjtcbiIsImltcG9ydCBiYXNlSXNFcXVhbCBmcm9tICcuL19iYXNlSXNFcXVhbC5qcyc7XG5pbXBvcnQgZ2V0IGZyb20gJy4vZ2V0LmpzJztcbmltcG9ydCBoYXNJbiBmcm9tICcuL2hhc0luLmpzJztcbmltcG9ydCBpc0tleSBmcm9tICcuL19pc0tleS5qcyc7XG5pbXBvcnQgaXNTdHJpY3RDb21wYXJhYmxlIGZyb20gJy4vX2lzU3RyaWN0Q29tcGFyYWJsZS5qcyc7XG5pbXBvcnQgbWF0Y2hlc1N0cmljdENvbXBhcmFibGUgZnJvbSAnLi9fbWF0Y2hlc1N0cmljdENvbXBhcmFibGUuanMnO1xuaW1wb3J0IHRvS2V5IGZyb20gJy4vX3RvS2V5LmpzJztcblxuLyoqIFVzZWQgdG8gY29tcG9zZSBiaXRtYXNrcyBmb3IgdmFsdWUgY29tcGFyaXNvbnMuICovXG52YXIgQ09NUEFSRV9QQVJUSUFMX0ZMQUcgPSAxLFxuICAgIENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcgPSAyO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLm1hdGNoZXNQcm9wZXJ0eWAgd2hpY2ggZG9lc24ndCBjbG9uZSBgc3JjVmFsdWVgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gcGF0aCBUaGUgcGF0aCBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHBhcmFtIHsqfSBzcmNWYWx1ZSBUaGUgdmFsdWUgdG8gbWF0Y2guXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBzcGVjIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlTWF0Y2hlc1Byb3BlcnR5KHBhdGgsIHNyY1ZhbHVlKSB7XG4gIGlmIChpc0tleShwYXRoKSAmJiBpc1N0cmljdENvbXBhcmFibGUoc3JjVmFsdWUpKSB7XG4gICAgcmV0dXJuIG1hdGNoZXNTdHJpY3RDb21wYXJhYmxlKHRvS2V5KHBhdGgpLCBzcmNWYWx1ZSk7XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHZhciBvYmpWYWx1ZSA9IGdldChvYmplY3QsIHBhdGgpO1xuICAgIHJldHVybiAob2JqVmFsdWUgPT09IHVuZGVmaW5lZCAmJiBvYmpWYWx1ZSA9PT0gc3JjVmFsdWUpXG4gICAgICA/IGhhc0luKG9iamVjdCwgcGF0aClcbiAgICAgIDogYmFzZUlzRXF1YWwoc3JjVmFsdWUsIG9ialZhbHVlLCBDT01QQVJFX1BBUlRJQUxfRkxBRyB8IENPTVBBUkVfVU5PUkRFUkVEX0ZMQUcpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlTWF0Y2hlc1Byb3BlcnR5O1xuIiwiLyoqXG4gKiBUaGlzIG1ldGhvZCByZXR1cm5zIHRoZSBmaXJzdCBhcmd1bWVudCBpdCByZWNlaXZlcy5cbiAqXG4gKiBAc3RhdGljXG4gKiBAc2luY2UgMC4xLjBcbiAqIEBtZW1iZXJPZiBfXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHsqfSB2YWx1ZSBBbnkgdmFsdWUuXG4gKiBAcmV0dXJucyB7Kn0gUmV0dXJucyBgdmFsdWVgLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0ID0geyAnYSc6IDEgfTtcbiAqXG4gKiBjb25zb2xlLmxvZyhfLmlkZW50aXR5KG9iamVjdCkgPT09IG9iamVjdCk7XG4gKiAvLyA9PiB0cnVlXG4gKi9cbmZ1bmN0aW9uIGlkZW50aXR5KHZhbHVlKSB7XG4gIHJldHVybiB2YWx1ZTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaWRlbnRpdHk7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5YCB3aXRob3V0IHN1cHBvcnQgZm9yIGRlZXAgcGF0aHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBvZiB0aGUgcHJvcGVydHkgdG8gZ2V0LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eShrZXkpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBvYmplY3QgPT0gbnVsbCA/IHVuZGVmaW5lZCA6IG9iamVjdFtrZXldO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBiYXNlUHJvcGVydHk7XG4iLCJpbXBvcnQgYmFzZUdldCBmcm9tICcuL19iYXNlR2V0LmpzJztcblxuLyoqXG4gKiBBIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgYGJhc2VQcm9wZXJ0eWAgd2hpY2ggc3VwcG9ydHMgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICovXG5mdW5jdGlvbiBiYXNlUHJvcGVydHlEZWVwKHBhdGgpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKG9iamVjdCkge1xuICAgIHJldHVybiBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VQcm9wZXJ0eURlZXA7XG4iLCJpbXBvcnQgYmFzZVByb3BlcnR5IGZyb20gJy4vX2Jhc2VQcm9wZXJ0eS5qcyc7XG5pbXBvcnQgYmFzZVByb3BlcnR5RGVlcCBmcm9tICcuL19iYXNlUHJvcGVydHlEZWVwLmpzJztcbmltcG9ydCBpc0tleSBmcm9tICcuL19pc0tleS5qcyc7XG5pbXBvcnQgdG9LZXkgZnJvbSAnLi9fdG9LZXkuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiB0aGF0IHJldHVybnMgdGhlIHZhbHVlIGF0IGBwYXRoYCBvZiBhIGdpdmVuIG9iamVjdC5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDIuNC4wXG4gKiBAY2F0ZWdvcnkgVXRpbFxuICogQHBhcmFtIHtBcnJheXxzdHJpbmd9IHBhdGggVGhlIHBhdGggb2YgdGhlIHByb3BlcnR5IHRvIGdldC5cbiAqIEByZXR1cm5zIHtGdW5jdGlvbn0gUmV0dXJucyB0aGUgbmV3IGFjY2Vzc29yIGZ1bmN0aW9uLlxuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgb2JqZWN0cyA9IFtcbiAqICAgeyAnYSc6IHsgJ2InOiAyIH0gfSxcbiAqICAgeyAnYSc6IHsgJ2InOiAxIH0gfVxuICogXTtcbiAqXG4gKiBfLm1hcChvYmplY3RzLCBfLnByb3BlcnR5KCdhLmInKSk7XG4gKiAvLyA9PiBbMiwgMV1cbiAqXG4gKiBfLm1hcChfLnNvcnRCeShvYmplY3RzLCBfLnByb3BlcnR5KFsnYScsICdiJ10pKSwgJ2EuYicpO1xuICogLy8gPT4gWzEsIDJdXG4gKi9cbmZ1bmN0aW9uIHByb3BlcnR5KHBhdGgpIHtcbiAgcmV0dXJuIGlzS2V5KHBhdGgpID8gYmFzZVByb3BlcnR5KHRvS2V5KHBhdGgpKSA6IGJhc2VQcm9wZXJ0eURlZXAocGF0aCk7XG59XG5cbmV4cG9ydCBkZWZhdWx0IHByb3BlcnR5O1xuIiwiaW1wb3J0IGJhc2VNYXRjaGVzIGZyb20gJy4vX2Jhc2VNYXRjaGVzLmpzJztcbmltcG9ydCBiYXNlTWF0Y2hlc1Byb3BlcnR5IGZyb20gJy4vX2Jhc2VNYXRjaGVzUHJvcGVydHkuanMnO1xuaW1wb3J0IGlkZW50aXR5IGZyb20gJy4vaWRlbnRpdHkuanMnO1xuaW1wb3J0IGlzQXJyYXkgZnJvbSAnLi9pc0FycmF5LmpzJztcbmltcG9ydCBwcm9wZXJ0eSBmcm9tICcuL3Byb3BlcnR5LmpzJztcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5pdGVyYXRlZWAuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7Kn0gW3ZhbHVlPV8uaWRlbnRpdHldIFRoZSB2YWx1ZSB0byBjb252ZXJ0IHRvIGFuIGl0ZXJhdGVlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBpdGVyYXRlZS5cbiAqL1xuZnVuY3Rpb24gYmFzZUl0ZXJhdGVlKHZhbHVlKSB7XG4gIC8vIERvbid0IHN0b3JlIHRoZSBgdHlwZW9mYCByZXN1bHQgaW4gYSB2YXJpYWJsZSB0byBhdm9pZCBhIEpJVCBidWcgaW4gU2FmYXJpIDkuXG4gIC8vIFNlZSBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTU2MDM0IGZvciBtb3JlIGRldGFpbHMuXG4gIGlmICh0eXBlb2YgdmFsdWUgPT0gJ2Z1bmN0aW9uJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAodmFsdWUgPT0gbnVsbCkge1xuICAgIHJldHVybiBpZGVudGl0eTtcbiAgfVxuICBpZiAodHlwZW9mIHZhbHVlID09ICdvYmplY3QnKSB7XG4gICAgcmV0dXJuIGlzQXJyYXkodmFsdWUpXG4gICAgICA/IGJhc2VNYXRjaGVzUHJvcGVydHkodmFsdWVbMF0sIHZhbHVlWzFdKVxuICAgICAgOiBiYXNlTWF0Y2hlcyh2YWx1ZSk7XG4gIH1cbiAgcmV0dXJuIHByb3BlcnR5KHZhbHVlKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZUl0ZXJhdGVlO1xuIiwiaW1wb3J0IGJhc2VBc3NpZ25WYWx1ZSBmcm9tICcuL19iYXNlQXNzaWduVmFsdWUuanMnO1xuaW1wb3J0IGJhc2VGb3JPd24gZnJvbSAnLi9fYmFzZUZvck93bi5qcyc7XG5pbXBvcnQgYmFzZUl0ZXJhdGVlIGZyb20gJy4vX2Jhc2VJdGVyYXRlZS5qcyc7XG5cbi8qKlxuICogQ3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGUgc2FtZSBrZXlzIGFzIGBvYmplY3RgIGFuZCB2YWx1ZXMgZ2VuZXJhdGVkXG4gKiBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGUgc3RyaW5nIGtleWVkIHByb3BlcnR5IG9mIGBvYmplY3RgIHRocnVcbiAqIGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkIHdpdGggdGhyZWUgYXJndW1lbnRzOlxuICogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gKiBAc2VlIF8ubWFwS2V5c1xuICogQGV4YW1wbGVcbiAqXG4gKiB2YXIgdXNlcnMgPSB7XG4gKiAgICdmcmVkJzogICAgeyAndXNlcic6ICdmcmVkJywgICAgJ2FnZSc6IDQwIH0sXG4gKiAgICdwZWJibGVzJzogeyAndXNlcic6ICdwZWJibGVzJywgJ2FnZSc6IDEgfVxuICogfTtcbiAqXG4gKiBfLm1hcFZhbHVlcyh1c2VycywgZnVuY3Rpb24obykgeyByZXR1cm4gby5hZ2U7IH0pO1xuICogLy8gPT4geyAnZnJlZCc6IDQwLCAncGViYmxlcyc6IDEgfSAoaXRlcmF0aW9uIG9yZGVyIGlzIG5vdCBndWFyYW50ZWVkKVxuICpcbiAqIC8vIFRoZSBgXy5wcm9wZXJ0eWAgaXRlcmF0ZWUgc2hvcnRoYW5kLlxuICogXy5tYXBWYWx1ZXModXNlcnMsICdhZ2UnKTtcbiAqIC8vID0+IHsgJ2ZyZWQnOiA0MCwgJ3BlYmJsZXMnOiAxIH0gKGl0ZXJhdGlvbiBvcmRlciBpcyBub3QgZ3VhcmFudGVlZClcbiAqL1xuZnVuY3Rpb24gbWFwVmFsdWVzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGtleSwgaXRlcmF0ZWUodmFsdWUsIGtleSwgb2JqZWN0KSk7XG4gIH0pO1xuICByZXR1cm4gcmVzdWx0O1xufVxuXG5leHBvcnQgZGVmYXVsdCBtYXBWYWx1ZXM7XG4iLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCB7IGdldHRlciB9IGZyb20gJ3Byb3BlcnR5LWV4cHInO1xudmFyIHByZWZpeGVzID0ge1xuICBjb250ZXh0OiAnJCcsXG4gIHZhbHVlOiAnLidcbn07XG5cbnZhciBSZWZlcmVuY2UgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWZlcmVuY2Uoa2V5LCBvcHRpb25zKSB7XG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Yga2V5ICE9PSAnc3RyaW5nJykgdGhyb3cgbmV3IFR5cGVFcnJvcigncmVmIG11c3QgYmUgYSBzdHJpbmcsIGdvdDogJyArIGtleSk7XG4gICAgdGhpcy5rZXkgPSBrZXkudHJpbSgpO1xuICAgIGlmIChrZXkgPT09ICcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdyZWYgbXVzdCBiZSBhIG5vbi1lbXB0eSBzdHJpbmcnKTtcbiAgICB0aGlzLmlzQ29udGV4dCA9IHRoaXMua2V5WzBdID09PSBwcmVmaXhlcy5jb250ZXh0O1xuICAgIHRoaXMuaXNWYWx1ZSA9IHRoaXMua2V5WzBdID09PSBwcmVmaXhlcy52YWx1ZTtcbiAgICB0aGlzLmlzU2libGluZyA9ICF0aGlzLmlzQ29udGV4dCAmJiAhdGhpcy5pc1ZhbHVlO1xuICAgIHZhciBwcmVmaXggPSB0aGlzLmlzQ29udGV4dCA/IHByZWZpeGVzLmNvbnRleHQgOiB0aGlzLmlzVmFsdWUgPyBwcmVmaXhlcy52YWx1ZSA6ICcnO1xuICAgIHRoaXMucGF0aCA9IHRoaXMua2V5LnNsaWNlKHByZWZpeC5sZW5ndGgpO1xuICAgIHRoaXMuZ2V0dGVyID0gdGhpcy5wYXRoICYmIGdldHRlcih0aGlzLnBhdGgsIHRydWUpO1xuICAgIHRoaXMubWFwID0gb3B0aW9ucy5tYXA7XG4gIH1cblxuICB2YXIgX3Byb3RvID0gUmVmZXJlbmNlLnByb3RvdHlwZTtcblxuICBfcHJvdG8uZ2V0VmFsdWUgPSBmdW5jdGlvbiBnZXRWYWx1ZShvcHRpb25zKSB7XG4gICAgdmFyIHJlc3VsdCA9IHRoaXMuaXNDb250ZXh0ID8gb3B0aW9ucy5jb250ZXh0IDogdGhpcy5pc1ZhbHVlID8gb3B0aW9ucy52YWx1ZSA6IG9wdGlvbnMucGFyZW50O1xuICAgIGlmICh0aGlzLmdldHRlcikgcmVzdWx0ID0gdGhpcy5nZXR0ZXIocmVzdWx0IHx8IHt9KTtcbiAgICBpZiAodGhpcy5tYXApIHJlc3VsdCA9IHRoaXMubWFwKHJlc3VsdCk7XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfTtcblxuICBfcHJvdG8uY2FzdCA9IGZ1bmN0aW9uIGNhc3QodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5nZXRWYWx1ZShfZXh0ZW5kcyh7fSwgb3B0aW9ucywge1xuICAgICAgdmFsdWU6IHZhbHVlXG4gICAgfSkpO1xuICB9O1xuXG4gIF9wcm90by5yZXNvbHZlID0gZnVuY3Rpb24gcmVzb2x2ZSgpIHtcbiAgICByZXR1cm4gdGhpcztcbiAgfTtcblxuICBfcHJvdG8uZGVzY3JpYmUgPSBmdW5jdGlvbiBkZXNjcmliZSgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogJ3JlZicsXG4gICAgICBrZXk6IHRoaXMua2V5XG4gICAgfTtcbiAgfTtcblxuICBfcHJvdG8udG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gXCJSZWYoXCIgKyB0aGlzLmtleSArIFwiKVwiO1xuICB9O1xuXG4gIFJlZmVyZW5jZS5pc1JlZiA9IGZ1bmN0aW9uIGlzUmVmKHZhbHVlKSB7XG4gICAgcmV0dXJuIHZhbHVlICYmIHZhbHVlLl9faXNZdXBSZWY7XG4gIH07XG5cbiAgcmV0dXJuIFJlZmVyZW5jZTtcbn0oKTtcblxuZXhwb3J0IHsgUmVmZXJlbmNlIGFzIGRlZmF1bHQgfTtcblJlZmVyZW5jZS5wcm90b3R5cGUuX19pc1l1cFJlZiA9IHRydWU7IiwiaW1wb3J0IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIGZyb20gXCJAYmFiZWwvcnVudGltZS9oZWxwZXJzL2VzbS9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBtYXBWYWx1ZXMgZnJvbSBcImxvZGFzaC1lcy9tYXBWYWx1ZXNcIjtcbmltcG9ydCBWYWxpZGF0aW9uRXJyb3IgZnJvbSAnLi4vVmFsaWRhdGlvbkVycm9yJztcbmltcG9ydCBSZWYgZnJvbSAnLi4vUmVmZXJlbmNlJztcbmltcG9ydCB7IFN5bmNocm9ub3VzUHJvbWlzZSB9IGZyb20gJ3N5bmNocm9ub3VzLXByb21pc2UnO1xudmFyIGZvcm1hdEVycm9yID0gVmFsaWRhdGlvbkVycm9yLmZvcm1hdEVycm9yO1xuXG52YXIgdGhlbmFibGUgPSBmdW5jdGlvbiB0aGVuYWJsZShwKSB7XG4gIHJldHVybiBwICYmIHR5cGVvZiBwLnRoZW4gPT09ICdmdW5jdGlvbicgJiYgdHlwZW9mIHAuY2F0Y2ggPT09ICdmdW5jdGlvbic7XG59O1xuXG5mdW5jdGlvbiBydW5UZXN0KHRlc3RGbiwgY3R4LCB2YWx1ZSwgc3luYykge1xuICB2YXIgcmVzdWx0ID0gdGVzdEZuLmNhbGwoY3R4LCB2YWx1ZSk7XG4gIGlmICghc3luYykgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyZXN1bHQpO1xuXG4gIGlmICh0aGVuYWJsZShyZXN1bHQpKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKFwiVmFsaWRhdGlvbiB0ZXN0IG9mIHR5cGU6IFxcXCJcIiArIGN0eC50eXBlICsgXCJcXFwiIHJldHVybmVkIGEgUHJvbWlzZSBkdXJpbmcgYSBzeW5jaHJvbm91cyB2YWxpZGF0ZS4gXCIgKyBcIlRoaXMgdGVzdCB3aWxsIGZpbmlzaCBhZnRlciB0aGUgdmFsaWRhdGUgY2FsbCBoYXMgcmV0dXJuZWRcIik7XG4gIH1cblxuICByZXR1cm4gU3luY2hyb25vdXNQcm9taXNlLnJlc29sdmUocmVzdWx0KTtcbn1cblxuZnVuY3Rpb24gcmVzb2x2ZVBhcmFtcyhvbGRQYXJhbXMsIG5ld1BhcmFtcywgcmVzb2x2ZSkge1xuICByZXR1cm4gbWFwVmFsdWVzKF9leHRlbmRzKHt9LCBvbGRQYXJhbXMsIHt9LCBuZXdQYXJhbXMpLCByZXNvbHZlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUVycm9yRmFjdG9yeShfcmVmKSB7XG4gIHZhciB2YWx1ZSA9IF9yZWYudmFsdWUsXG4gICAgICBsYWJlbCA9IF9yZWYubGFiZWwsXG4gICAgICByZXNvbHZlID0gX3JlZi5yZXNvbHZlLFxuICAgICAgb3JpZ2luYWxWYWx1ZSA9IF9yZWYub3JpZ2luYWxWYWx1ZSxcbiAgICAgIG9wdHMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmLCBbXCJ2YWx1ZVwiLCBcImxhYmVsXCIsIFwicmVzb2x2ZVwiLCBcIm9yaWdpbmFsVmFsdWVcIl0pO1xuXG4gIHJldHVybiBmdW5jdGlvbiBjcmVhdGVFcnJvcihfdGVtcCkge1xuICAgIHZhciBfcmVmMiA9IF90ZW1wID09PSB2b2lkIDAgPyB7fSA6IF90ZW1wLFxuICAgICAgICBfcmVmMiRwYXRoID0gX3JlZjIucGF0aCxcbiAgICAgICAgcGF0aCA9IF9yZWYyJHBhdGggPT09IHZvaWQgMCA/IG9wdHMucGF0aCA6IF9yZWYyJHBhdGgsXG4gICAgICAgIF9yZWYyJG1lc3NhZ2UgPSBfcmVmMi5tZXNzYWdlLFxuICAgICAgICBtZXNzYWdlID0gX3JlZjIkbWVzc2FnZSA9PT0gdm9pZCAwID8gb3B0cy5tZXNzYWdlIDogX3JlZjIkbWVzc2FnZSxcbiAgICAgICAgX3JlZjIkdHlwZSA9IF9yZWYyLnR5cGUsXG4gICAgICAgIHR5cGUgPSBfcmVmMiR0eXBlID09PSB2b2lkIDAgPyBvcHRzLm5hbWUgOiBfcmVmMiR0eXBlLFxuICAgICAgICBwYXJhbXMgPSBfcmVmMi5wYXJhbXM7XG5cbiAgICBwYXJhbXMgPSBfZXh0ZW5kcyh7XG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZSxcbiAgICAgIGxhYmVsOiBsYWJlbFxuICAgIH0sIHJlc29sdmVQYXJhbXMob3B0cy5wYXJhbXMsIHBhcmFtcywgcmVzb2x2ZSkpO1xuICAgIHJldHVybiBfZXh0ZW5kcyhuZXcgVmFsaWRhdGlvbkVycm9yKGZvcm1hdEVycm9yKG1lc3NhZ2UsIHBhcmFtcyksIHZhbHVlLCBwYXRoLCB0eXBlKSwge1xuICAgICAgcGFyYW1zOiBwYXJhbXNcbiAgICB9KTtcbiAgfTtcbn1cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZVZhbGlkYXRpb24ob3B0aW9ucykge1xuICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSxcbiAgICAgIG1lc3NhZ2UgPSBvcHRpb25zLm1lc3NhZ2UsXG4gICAgICB0ZXN0ID0gb3B0aW9ucy50ZXN0LFxuICAgICAgcGFyYW1zID0gb3B0aW9ucy5wYXJhbXM7XG5cbiAgZnVuY3Rpb24gdmFsaWRhdGUoX3JlZjMpIHtcbiAgICB2YXIgdmFsdWUgPSBfcmVmMy52YWx1ZSxcbiAgICAgICAgcGF0aCA9IF9yZWYzLnBhdGgsXG4gICAgICAgIGxhYmVsID0gX3JlZjMubGFiZWwsXG4gICAgICAgIG9wdGlvbnMgPSBfcmVmMy5vcHRpb25zLFxuICAgICAgICBvcmlnaW5hbFZhbHVlID0gX3JlZjMub3JpZ2luYWxWYWx1ZSxcbiAgICAgICAgc3luYyA9IF9yZWYzLnN5bmMsXG4gICAgICAgIHJlc3QgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShfcmVmMywgW1widmFsdWVcIiwgXCJwYXRoXCIsIFwibGFiZWxcIiwgXCJvcHRpb25zXCIsIFwib3JpZ2luYWxWYWx1ZVwiLCBcInN5bmNcIl0pO1xuXG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuXG4gICAgdmFyIHJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKGl0ZW0pIHtcbiAgICAgIHJldHVybiBSZWYuaXNSZWYoaXRlbSkgPyBpdGVtLmdldFZhbHVlKHtcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgICAgY29udGV4dDogb3B0aW9ucy5jb250ZXh0XG4gICAgICB9KSA6IGl0ZW07XG4gICAgfTtcblxuICAgIHZhciBjcmVhdGVFcnJvciA9IGNyZWF0ZUVycm9yRmFjdG9yeSh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgIG9yaWdpbmFsVmFsdWU6IG9yaWdpbmFsVmFsdWUsXG4gICAgICBwYXJhbXM6IHBhcmFtcyxcbiAgICAgIGxhYmVsOiBsYWJlbCxcbiAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICBuYW1lOiBuYW1lXG4gICAgfSk7XG5cbiAgICB2YXIgY3R4ID0gX2V4dGVuZHMoe1xuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgdHlwZTogbmFtZSxcbiAgICAgIGNyZWF0ZUVycm9yOiBjcmVhdGVFcnJvcixcbiAgICAgIHJlc29sdmU6IHJlc29sdmUsXG4gICAgICBvcHRpb25zOiBvcHRpb25zXG4gICAgfSwgcmVzdCk7XG5cbiAgICByZXR1cm4gcnVuVGVzdCh0ZXN0LCBjdHgsIHZhbHVlLCBzeW5jKS50aGVuKGZ1bmN0aW9uICh2YWxpZE9yRXJyb3IpIHtcbiAgICAgIGlmIChWYWxpZGF0aW9uRXJyb3IuaXNFcnJvcih2YWxpZE9yRXJyb3IpKSB0aHJvdyB2YWxpZE9yRXJyb3I7ZWxzZSBpZiAoIXZhbGlkT3JFcnJvcikgdGhyb3cgY3JlYXRlRXJyb3IoKTtcbiAgICB9KTtcbiAgfVxuXG4gIHZhbGlkYXRlLk9QVElPTlMgPSBvcHRpb25zO1xuICByZXR1cm4gdmFsaWRhdGU7XG59IiwiaW1wb3J0IHsgZm9yRWFjaCB9IGZyb20gJ3Byb3BlcnR5LWV4cHInO1xuXG52YXIgdHJpbSA9IGZ1bmN0aW9uIHRyaW0ocGFydCkge1xuICByZXR1cm4gcGFydC5zdWJzdHIoMCwgcGFydC5sZW5ndGggLSAxKS5zdWJzdHIoMSk7XG59O1xuXG5leHBvcnQgZnVuY3Rpb24gZ2V0SW4oc2NoZW1hLCBwYXRoLCB2YWx1ZSwgY29udGV4dCkge1xuICBpZiAoY29udGV4dCA9PT0gdm9pZCAwKSB7XG4gICAgY29udGV4dCA9IHZhbHVlO1xuICB9XG5cbiAgdmFyIHBhcmVudCwgbGFzdFBhcnQsIGxhc3RQYXJ0RGVidWc7IC8vIHJvb3QgcGF0aDogJydcblxuICBpZiAoIXBhdGgpIHJldHVybiB7XG4gICAgcGFyZW50OiBwYXJlbnQsXG4gICAgcGFyZW50UGF0aDogcGF0aCxcbiAgICBzY2hlbWE6IHNjaGVtYVxuICB9O1xuICBmb3JFYWNoKHBhdGgsIGZ1bmN0aW9uIChfcGFydCwgaXNCcmFja2V0LCBpc0FycmF5KSB7XG4gICAgdmFyIHBhcnQgPSBpc0JyYWNrZXQgPyB0cmltKF9wYXJ0KSA6IF9wYXJ0O1xuICAgIHNjaGVtYSA9IHNjaGVtYS5yZXNvbHZlKHtcbiAgICAgIGNvbnRleHQ6IGNvbnRleHQsXG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIHZhbHVlOiB2YWx1ZVxuICAgIH0pO1xuXG4gICAgaWYgKHNjaGVtYS5pbm5lclR5cGUpIHtcbiAgICAgIHZhciBpZHggPSBpc0FycmF5ID8gcGFyc2VJbnQocGFydCwgMTApIDogMDtcblxuICAgICAgaWYgKHZhbHVlICYmIGlkeCA+PSB2YWx1ZS5sZW5ndGgpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKFwiWXVwLnJlYWNoIGNhbm5vdCByZXNvbHZlIGFuIGFycmF5IGl0ZW0gYXQgaW5kZXg6IFwiICsgX3BhcnQgKyBcIiwgaW4gdGhlIHBhdGg6IFwiICsgcGF0aCArIFwiLiBcIiArIFwiYmVjYXVzZSB0aGVyZSBpcyBubyB2YWx1ZSBhdCB0aGF0IGluZGV4LiBcIik7XG4gICAgICB9XG5cbiAgICAgIHBhcmVudCA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSB2YWx1ZSAmJiB2YWx1ZVtpZHhdO1xuICAgICAgc2NoZW1hID0gc2NoZW1hLmlubmVyVHlwZTtcbiAgICB9IC8vIHNvbWV0aW1lcyB0aGUgYXJyYXkgaW5kZXggcGFydCBvZiBhIHBhdGggZG9lc24ndCBleGlzdDogXCJuZXN0ZWQuYXJyLmNoaWxkXCJcbiAgICAvLyBpbiB0aGVzZSBjYXNlcyB0aGUgY3VycmVudCBwYXJ0IGlzIHRoZSBuZXh0IHNjaGVtYSBhbmQgc2hvdWxkIGJlIHByb2Nlc3NlZFxuICAgIC8vIGluIHRoaXMgaXRlcmF0aW9uLiBGb3IgY2FzZXMgd2hlcmUgdGhlIGluZGV4IHNpZ25hdHVyZSBpcyBpbmNsdWRlZCB0aGlzXG4gICAgLy8gY2hlY2sgd2lsbCBmYWlsIGFuZCB3ZSdsbCBoYW5kbGUgdGhlIGBjaGlsZGAgcGFydCBvbiB0aGUgbmV4dCBpdGVyYXRpb24gbGlrZSBub3JtYWxcblxuXG4gICAgaWYgKCFpc0FycmF5KSB7XG4gICAgICBpZiAoIXNjaGVtYS5maWVsZHMgfHwgIXNjaGVtYS5maWVsZHNbcGFydF0pIHRocm93IG5ldyBFcnJvcihcIlRoZSBzY2hlbWEgZG9lcyBub3QgY29udGFpbiB0aGUgcGF0aDogXCIgKyBwYXRoICsgXCIuIFwiICsgKFwiKGZhaWxlZCBhdDogXCIgKyBsYXN0UGFydERlYnVnICsgXCIgd2hpY2ggaXMgYSB0eXBlOiBcXFwiXCIgKyBzY2hlbWEuX3R5cGUgKyBcIlxcXCIpXCIpKTtcbiAgICAgIHBhcmVudCA9IHZhbHVlO1xuICAgICAgdmFsdWUgPSB2YWx1ZSAmJiB2YWx1ZVtwYXJ0XTtcbiAgICAgIHNjaGVtYSA9IHNjaGVtYS5maWVsZHNbcGFydF07XG4gICAgfVxuXG4gICAgbGFzdFBhcnQgPSBwYXJ0O1xuICAgIGxhc3RQYXJ0RGVidWcgPSBpc0JyYWNrZXQgPyAnWycgKyBfcGFydCArICddJyA6ICcuJyArIF9wYXJ0O1xuICB9KTtcbiAgcmV0dXJuIHtcbiAgICBzY2hlbWE6IHNjaGVtYSxcbiAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICBwYXJlbnRQYXRoOiBsYXN0UGFydFxuICB9O1xufVxuXG52YXIgcmVhY2ggPSBmdW5jdGlvbiByZWFjaChvYmosIHBhdGgsIHZhbHVlLCBjb250ZXh0KSB7XG4gIHJldHVybiBnZXRJbihvYmosIHBhdGgsIHZhbHVlLCBjb250ZXh0KS5zY2hlbWE7XG59O1xuXG5leHBvcnQgZGVmYXVsdCByZWFjaDsiLCJpbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcbmltcG9ydCBfY3JlYXRlQ2xhc3MgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2NyZWF0ZUNsYXNzXCI7XG5pbXBvcnQgaGFzIGZyb20gXCJsb2Rhc2gtZXMvaGFzXCI7XG5pbXBvcnQgY2xvbmVEZWVwV2l0aCBmcm9tIFwibG9kYXNoLWVzL2Nsb25lRGVlcFdpdGhcIjtcbmltcG9ydCBfdG9BcnJheSBmcm9tIFwibG9kYXNoLWVzL3RvQXJyYXlcIjtcbmltcG9ydCB7IG1peGVkIGFzIGxvY2FsZSB9IGZyb20gJy4vbG9jYWxlJztcbmltcG9ydCBDb25kaXRpb24gZnJvbSAnLi9Db25kaXRpb24nO1xuaW1wb3J0IHJ1blZhbGlkYXRpb25zIGZyb20gJy4vdXRpbC9ydW5WYWxpZGF0aW9ucyc7XG5pbXBvcnQgcHJlcGVuZERlZXAgZnJvbSAnLi91dGlsL3ByZXBlbmREZWVwJztcbmltcG9ydCBpc1NjaGVtYSBmcm9tICcuL3V0aWwvaXNTY2hlbWEnO1xuaW1wb3J0IGNyZWF0ZVZhbGlkYXRpb24gZnJvbSAnLi91dGlsL2NyZWF0ZVZhbGlkYXRpb24nO1xuaW1wb3J0IHByaW50VmFsdWUgZnJvbSAnLi91dGlsL3ByaW50VmFsdWUnO1xuaW1wb3J0IFJlZiBmcm9tICcuL1JlZmVyZW5jZSc7XG5pbXBvcnQgeyBnZXRJbiB9IGZyb20gJy4vdXRpbC9yZWFjaCc7XG5cbnZhciBSZWZTZXQgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBSZWZTZXQoKSB7XG4gICAgdGhpcy5saXN0ID0gbmV3IFNldCgpO1xuICAgIHRoaXMucmVmcyA9IG5ldyBNYXAoKTtcbiAgfVxuXG4gIHZhciBfcHJvdG8gPSBSZWZTZXQucHJvdG90eXBlO1xuXG4gIF9wcm90by5kZXNjcmliZSA9IGZ1bmN0aW9uIGRlc2NyaWJlKCkge1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IFtdO1xuXG4gICAgZm9yICh2YXIgX2l0ZXJhdG9yID0gdGhpcy5saXN0LCBfaXNBcnJheSA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yKSwgX2kgPSAwLCBfaXRlcmF0b3IgPSBfaXNBcnJheSA/IF9pdGVyYXRvciA6IF9pdGVyYXRvcltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWY7XG5cbiAgICAgIGlmIChfaXNBcnJheSkge1xuICAgICAgICBpZiAoX2kgPj0gX2l0ZXJhdG9yLmxlbmd0aCkgYnJlYWs7XG4gICAgICAgIF9yZWYgPSBfaXRlcmF0b3JbX2krK107XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBfaSA9IF9pdGVyYXRvci5uZXh0KCk7XG4gICAgICAgIGlmIChfaS5kb25lKSBicmVhaztcbiAgICAgICAgX3JlZiA9IF9pLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgaXRlbSA9IF9yZWY7XG4gICAgICBkZXNjcmlwdGlvbi5wdXNoKGl0ZW0pO1xuICAgIH1cblxuICAgIGZvciAodmFyIF9pdGVyYXRvcjIgPSB0aGlzLnJlZnMsIF9pc0FycmF5MiA9IEFycmF5LmlzQXJyYXkoX2l0ZXJhdG9yMiksIF9pMiA9IDAsIF9pdGVyYXRvcjIgPSBfaXNBcnJheTIgPyBfaXRlcmF0b3IyIDogX2l0ZXJhdG9yMltTeW1ib2wuaXRlcmF0b3JdKCk7Oykge1xuICAgICAgdmFyIF9yZWYyO1xuXG4gICAgICBpZiAoX2lzQXJyYXkyKSB7XG4gICAgICAgIGlmIChfaTIgPj0gX2l0ZXJhdG9yMi5sZW5ndGgpIGJyZWFrO1xuICAgICAgICBfcmVmMiA9IF9pdGVyYXRvcjJbX2kyKytdO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2kyID0gX2l0ZXJhdG9yMi5uZXh0KCk7XG4gICAgICAgIGlmIChfaTIuZG9uZSkgYnJlYWs7XG4gICAgICAgIF9yZWYyID0gX2kyLnZhbHVlO1xuICAgICAgfVxuXG4gICAgICB2YXIgX3JlZjMgPSBfcmVmMixcbiAgICAgICAgICByZWYgPSBfcmVmM1sxXTtcbiAgICAgIGRlc2NyaXB0aW9uLnB1c2gocmVmLmRlc2NyaWJlKCkpO1xuICAgIH1cblxuICAgIHJldHVybiBkZXNjcmlwdGlvbjtcbiAgfTtcblxuICBfcHJvdG8udG9BcnJheSA9IGZ1bmN0aW9uIHRvQXJyYXkoKSB7XG4gICAgcmV0dXJuIF90b0FycmF5KHRoaXMubGlzdCkuY29uY2F0KF90b0FycmF5KHRoaXMucmVmcy52YWx1ZXMoKSkpO1xuICB9O1xuXG4gIF9wcm90by5hZGQgPSBmdW5jdGlvbiBhZGQodmFsdWUpIHtcbiAgICBSZWYuaXNSZWYodmFsdWUpID8gdGhpcy5yZWZzLnNldCh2YWx1ZS5rZXksIHZhbHVlKSA6IHRoaXMubGlzdC5hZGQodmFsdWUpO1xuICB9O1xuXG4gIF9wcm90by5kZWxldGUgPSBmdW5jdGlvbiBfZGVsZXRlKHZhbHVlKSB7XG4gICAgUmVmLmlzUmVmKHZhbHVlKSA/IHRoaXMucmVmcy5kZWxldGUodmFsdWUua2V5KSA6IHRoaXMubGlzdC5kZWxldGUodmFsdWUpO1xuICB9O1xuXG4gIF9wcm90by5oYXMgPSBmdW5jdGlvbiBoYXModmFsdWUsIHJlc29sdmUpIHtcbiAgICBpZiAodGhpcy5saXN0Lmhhcyh2YWx1ZSkpIHJldHVybiB0cnVlO1xuICAgIHZhciBpdGVtLFxuICAgICAgICB2YWx1ZXMgPSB0aGlzLnJlZnMudmFsdWVzKCk7XG5cbiAgICB3aGlsZSAoaXRlbSA9IHZhbHVlcy5uZXh0KCksICFpdGVtLmRvbmUpIHtcbiAgICAgIGlmIChyZXNvbHZlKGl0ZW0udmFsdWUpID09PSB2YWx1ZSkgcmV0dXJuIHRydWU7XG4gICAgfVxuXG4gICAgcmV0dXJuIGZhbHNlO1xuICB9O1xuXG4gIF9wcm90by5jbG9uZSA9IGZ1bmN0aW9uIGNsb25lKCkge1xuICAgIHZhciBuZXh0ID0gbmV3IFJlZlNldCgpO1xuICAgIG5leHQubGlzdCA9IG5ldyBTZXQodGhpcy5saXN0KTtcbiAgICBuZXh0LnJlZnMgPSBuZXcgTWFwKHRoaXMucmVmcyk7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH07XG5cbiAgX3Byb3RvLm1lcmdlID0gZnVuY3Rpb24gbWVyZ2UobmV3SXRlbXMsIHJlbW92ZUl0ZW1zKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV3SXRlbXMubGlzdC5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5leHQuYWRkKHZhbHVlKTtcbiAgICB9KTtcbiAgICBuZXdJdGVtcy5yZWZzLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gbmV4dC5hZGQodmFsdWUpO1xuICAgIH0pO1xuICAgIHJlbW92ZUl0ZW1zLmxpc3QuZm9yRWFjaChmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiBuZXh0LmRlbGV0ZSh2YWx1ZSk7XG4gICAgfSk7XG4gICAgcmVtb3ZlSXRlbXMucmVmcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIG5leHQuZGVsZXRlKHZhbHVlKTtcbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfTtcblxuICBfY3JlYXRlQ2xhc3MoUmVmU2V0LCBbe1xuICAgIGtleTogXCJzaXplXCIsXG4gICAgZ2V0OiBmdW5jdGlvbiBnZXQoKSB7XG4gICAgICByZXR1cm4gdGhpcy5saXN0LnNpemUgKyB0aGlzLnJlZnMuc2l6ZTtcbiAgICB9XG4gIH1dKTtcblxuICByZXR1cm4gUmVmU2V0O1xufSgpO1xuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBTY2hlbWFUeXBlKG9wdGlvbnMpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCEodGhpcyBpbnN0YW5jZW9mIFNjaGVtYVR5cGUpKSByZXR1cm4gbmV3IFNjaGVtYVR5cGUoKTtcbiAgdGhpcy5fZGVwcyA9IFtdO1xuICB0aGlzLl9jb25kaXRpb25zID0gW107XG4gIHRoaXMuX29wdGlvbnMgPSB7XG4gICAgYWJvcnRFYXJseTogdHJ1ZSxcbiAgICByZWN1cnNpdmU6IHRydWVcbiAgfTtcbiAgdGhpcy5fZXhjbHVzaXZlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgdGhpcy5fd2hpdGVsaXN0ID0gbmV3IFJlZlNldCgpO1xuICB0aGlzLl9ibGFja2xpc3QgPSBuZXcgUmVmU2V0KCk7XG4gIHRoaXMudGVzdHMgPSBbXTtcbiAgdGhpcy50cmFuc2Zvcm1zID0gW107XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50eXBlRXJyb3IobG9jYWxlLm5vdFR5cGUpO1xuICB9KTtcbiAgaWYgKGhhcyhvcHRpb25zLCAnZGVmYXVsdCcpKSB0aGlzLl9kZWZhdWx0RGVmYXVsdCA9IG9wdGlvbnMuZGVmYXVsdDtcbiAgdGhpcy50eXBlID0gb3B0aW9ucy50eXBlIHx8ICdtaXhlZCc7IC8vIFRPRE86IHJlbW92ZVxuXG4gIHRoaXMuX3R5cGUgPSBvcHRpb25zLnR5cGUgfHwgJ21peGVkJztcbn1cbnZhciBwcm90byA9IFNjaGVtYVR5cGUucHJvdG90eXBlID0ge1xuICBfX2lzWXVwU2NoZW1hX186IHRydWUsXG4gIGNvbnN0cnVjdG9yOiBTY2hlbWFUeXBlLFxuICBjbG9uZTogZnVuY3Rpb24gY2xvbmUoKSB7XG4gICAgdmFyIF90aGlzMiA9IHRoaXM7XG5cbiAgICBpZiAodGhpcy5fbXV0YXRlKSByZXR1cm4gdGhpczsgLy8gaWYgdGhlIG5lc3RlZCB2YWx1ZSBpcyBhIHNjaGVtYSB3ZSBjYW4gc2tpcCBjbG9uaW5nLCBzaW5jZVxuICAgIC8vIHRoZXkgYXJlIGFscmVhZHkgaW1tdXRhYmxlXG5cbiAgICByZXR1cm4gY2xvbmVEZWVwV2l0aCh0aGlzLCBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmIChpc1NjaGVtYSh2YWx1ZSkgJiYgdmFsdWUgIT09IF90aGlzMikgcmV0dXJuIHZhbHVlO1xuICAgIH0pO1xuICB9LFxuICBsYWJlbDogZnVuY3Rpb24gbGFiZWwoX2xhYmVsKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC5fbGFiZWwgPSBfbGFiZWw7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIG1ldGE6IGZ1bmN0aW9uIG1ldGEob2JqKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDApIHJldHVybiB0aGlzLl9tZXRhO1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX21ldGEgPSBfZXh0ZW5kcyhuZXh0Ll9tZXRhIHx8IHt9LCBvYmopO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICB3aXRoTXV0YXRpb246IGZ1bmN0aW9uIHdpdGhNdXRhdGlvbihmbikge1xuICAgIHZhciBiZWZvcmUgPSB0aGlzLl9tdXRhdGU7XG4gICAgdGhpcy5fbXV0YXRlID0gdHJ1ZTtcbiAgICB2YXIgcmVzdWx0ID0gZm4odGhpcyk7XG4gICAgdGhpcy5fbXV0YXRlID0gYmVmb3JlO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIGNvbmNhdDogZnVuY3Rpb24gY29uY2F0KHNjaGVtYSkge1xuICAgIGlmICghc2NoZW1hIHx8IHNjaGVtYSA9PT0gdGhpcykgcmV0dXJuIHRoaXM7XG4gICAgaWYgKHNjaGVtYS5fdHlwZSAhPT0gdGhpcy5fdHlwZSAmJiB0aGlzLl90eXBlICE9PSAnbWl4ZWQnKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiWW91IGNhbm5vdCBgY29uY2F0KClgIHNjaGVtYSdzIG9mIGRpZmZlcmVudCB0eXBlczogXCIgKyB0aGlzLl90eXBlICsgXCIgYW5kIFwiICsgc2NoZW1hLl90eXBlKTtcbiAgICB2YXIgbmV4dCA9IHByZXBlbmREZWVwKHNjaGVtYS5jbG9uZSgpLCB0aGlzKTsgLy8gbmV3IHVuZGVmaW5lZCBkZWZhdWx0IGlzIG92ZXJyaWRkZW4gYnkgb2xkIG5vbi11bmRlZmluZWQgb25lLCByZXZlcnRcblxuICAgIGlmIChoYXMoc2NoZW1hLCAnX2RlZmF1bHQnKSkgbmV4dC5fZGVmYXVsdCA9IHNjaGVtYS5fZGVmYXVsdDtcbiAgICBuZXh0LnRlc3RzID0gdGhpcy50ZXN0cztcbiAgICBuZXh0Ll9leGNsdXNpdmUgPSB0aGlzLl9leGNsdXNpdmU7IC8vIG1hbnVhbGx5IG1lcmdlIHRoZSBibGFja2xpc3Qvd2hpdGVsaXN0ICh0aGUgb3RoZXIgYHNjaGVtYWAgdGFrZXNcbiAgICAvLyBwcmVjZWRlbmNlIGluIGNhc2Ugb2YgY29uZmxpY3RzKVxuXG4gICAgbmV4dC5fd2hpdGVsaXN0ID0gdGhpcy5fd2hpdGVsaXN0Lm1lcmdlKHNjaGVtYS5fd2hpdGVsaXN0LCBzY2hlbWEuX2JsYWNrbGlzdCk7XG4gICAgbmV4dC5fYmxhY2tsaXN0ID0gdGhpcy5fYmxhY2tsaXN0Lm1lcmdlKHNjaGVtYS5fYmxhY2tsaXN0LCBzY2hlbWEuX3doaXRlbGlzdCk7IC8vIG1hbnVhbGx5IGFkZCB0aGUgbmV3IHRlc3RzIHRvIGVuc3VyZVxuICAgIC8vIHRoZSBkZWR1cGluZyBsb2dpYyBpcyBjb25zaXN0ZW50XG5cbiAgICBuZXh0LndpdGhNdXRhdGlvbihmdW5jdGlvbiAobmV4dCkge1xuICAgICAgc2NoZW1hLnRlc3RzLmZvckVhY2goZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgIG5leHQudGVzdChmbi5PUFRJT05TKTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBpc1R5cGU6IGZ1bmN0aW9uIGlzVHlwZSh2KSB7XG4gICAgaWYgKHRoaXMuX251bGxhYmxlICYmIHYgPT09IG51bGwpIHJldHVybiB0cnVlO1xuICAgIHJldHVybiAhdGhpcy5fdHlwZUNoZWNrIHx8IHRoaXMuX3R5cGVDaGVjayh2KTtcbiAgfSxcbiAgcmVzb2x2ZTogZnVuY3Rpb24gcmVzb2x2ZShvcHRpb25zKSB7XG4gICAgdmFyIHNjaGVtYSA9IHRoaXM7XG5cbiAgICBpZiAoc2NoZW1hLl9jb25kaXRpb25zLmxlbmd0aCkge1xuICAgICAgdmFyIGNvbmRpdGlvbnMgPSBzY2hlbWEuX2NvbmRpdGlvbnM7XG4gICAgICBzY2hlbWEgPSBzY2hlbWEuY2xvbmUoKTtcbiAgICAgIHNjaGVtYS5fY29uZGl0aW9ucyA9IFtdO1xuICAgICAgc2NoZW1hID0gY29uZGl0aW9ucy5yZWR1Y2UoZnVuY3Rpb24gKHNjaGVtYSwgY29uZGl0aW9uKSB7XG4gICAgICAgIHJldHVybiBjb25kaXRpb24ucmVzb2x2ZShzY2hlbWEsIG9wdGlvbnMpO1xuICAgICAgfSwgc2NoZW1hKTtcbiAgICAgIHNjaGVtYSA9IHNjaGVtYS5yZXNvbHZlKG9wdGlvbnMpO1xuICAgIH1cblxuICAgIHJldHVybiBzY2hlbWE7XG4gIH0sXG4gIGNhc3Q6IGZ1bmN0aW9uIGNhc3QodmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHJlc29sdmVkU2NoZW1hID0gdGhpcy5yZXNvbHZlKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KSk7XG5cbiAgICB2YXIgcmVzdWx0ID0gcmVzb2x2ZWRTY2hlbWEuX2Nhc3QodmFsdWUsIG9wdGlvbnMpO1xuXG4gICAgaWYgKHZhbHVlICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5hc3NlcnQgIT09IGZhbHNlICYmIHJlc29sdmVkU2NoZW1hLmlzVHlwZShyZXN1bHQpICE9PSB0cnVlKSB7XG4gICAgICB2YXIgZm9ybWF0dGVkVmFsdWUgPSBwcmludFZhbHVlKHZhbHVlKTtcbiAgICAgIHZhciBmb3JtYXR0ZWRSZXN1bHQgPSBwcmludFZhbHVlKHJlc3VsdCk7XG4gICAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiVGhlIHZhbHVlIG9mIFwiICsgKG9wdGlvbnMucGF0aCB8fCAnZmllbGQnKSArIFwiIGNvdWxkIG5vdCBiZSBjYXN0IHRvIGEgdmFsdWUgXCIgKyAoXCJ0aGF0IHNhdGlzZmllcyB0aGUgc2NoZW1hIHR5cGU6IFxcXCJcIiArIHJlc29sdmVkU2NoZW1hLl90eXBlICsgXCJcXFwiLiBcXG5cXG5cIikgKyAoXCJhdHRlbXB0ZWQgdmFsdWU6IFwiICsgZm9ybWF0dGVkVmFsdWUgKyBcIiBcXG5cIikgKyAoZm9ybWF0dGVkUmVzdWx0ICE9PSBmb3JtYXR0ZWRWYWx1ZSA/IFwicmVzdWx0IG9mIGNhc3Q6IFwiICsgZm9ybWF0dGVkUmVzdWx0IDogJycpKTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBfY2FzdDogZnVuY3Rpb24gX2Nhc3QocmF3VmFsdWUpIHtcbiAgICB2YXIgX3RoaXMzID0gdGhpcztcblxuICAgIHZhciB2YWx1ZSA9IHJhd1ZhbHVlID09PSB1bmRlZmluZWQgPyByYXdWYWx1ZSA6IHRoaXMudHJhbnNmb3Jtcy5yZWR1Y2UoZnVuY3Rpb24gKHZhbHVlLCBmbikge1xuICAgICAgcmV0dXJuIGZuLmNhbGwoX3RoaXMzLCB2YWx1ZSwgcmF3VmFsdWUpO1xuICAgIH0sIHJhd1ZhbHVlKTtcblxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkICYmIGhhcyh0aGlzLCAnX2RlZmF1bHQnKSkge1xuICAgICAgdmFsdWUgPSB0aGlzLmRlZmF1bHQoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdmFsdWU7XG4gIH0sXG4gIF92YWxpZGF0ZTogZnVuY3Rpb24gX3ZhbGlkYXRlKF92YWx1ZSwgb3B0aW9ucykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0aW9ucyA9IHt9O1xuICAgIH1cblxuICAgIHZhciB2YWx1ZSA9IF92YWx1ZTtcbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IG9wdGlvbnMub3JpZ2luYWxWYWx1ZSAhPSBudWxsID8gb3B0aW9ucy5vcmlnaW5hbFZhbHVlIDogX3ZhbHVlO1xuXG4gICAgdmFyIGlzU3RyaWN0ID0gdGhpcy5fb3B0aW9uKCdzdHJpY3QnLCBvcHRpb25zKTtcblxuICAgIHZhciBlbmRFYXJseSA9IHRoaXMuX29wdGlvbignYWJvcnRFYXJseScsIG9wdGlvbnMpO1xuXG4gICAgdmFyIHN5bmMgPSBvcHRpb25zLnN5bmM7XG4gICAgdmFyIHBhdGggPSBvcHRpb25zLnBhdGg7XG4gICAgdmFyIGxhYmVsID0gdGhpcy5fbGFiZWw7XG5cbiAgICBpZiAoIWlzU3RyaWN0KSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuX2Nhc3QodmFsdWUsIF9leHRlbmRzKHtcbiAgICAgICAgYXNzZXJ0OiBmYWxzZVxuICAgICAgfSwgb3B0aW9ucykpO1xuICAgIH0gLy8gdmFsdWUgaXMgY2FzdCwgd2UgY2FuIGNoZWNrIGlmIGl0IG1lZXRzIHR5cGUgcmVxdWlyZW1lbnRzXG5cblxuICAgIHZhciB2YWxpZGF0aW9uUGFyYW1zID0ge1xuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgcGF0aDogcGF0aCxcbiAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnMsXG4gICAgICBsYWJlbDogbGFiZWwsXG4gICAgICBvcmlnaW5hbFZhbHVlOiBvcmlnaW5hbFZhbHVlLFxuICAgICAgc3luYzogc3luY1xuICAgIH07XG5cbiAgICBpZiAob3B0aW9ucy5mcm9tKSB7XG4gICAgICB2YWxpZGF0aW9uUGFyYW1zLmZyb20gPSBvcHRpb25zLmZyb207XG4gICAgfVxuXG4gICAgdmFyIGluaXRpYWxUZXN0cyA9IFtdO1xuICAgIGlmICh0aGlzLl90eXBlRXJyb3IpIGluaXRpYWxUZXN0cy5wdXNoKHRoaXMuX3R5cGVFcnJvcih2YWxpZGF0aW9uUGFyYW1zKSk7XG4gICAgaWYgKHRoaXMuX3doaXRlbGlzdEVycm9yKSBpbml0aWFsVGVzdHMucHVzaCh0aGlzLl93aGl0ZWxpc3RFcnJvcih2YWxpZGF0aW9uUGFyYW1zKSk7XG4gICAgaWYgKHRoaXMuX2JsYWNrbGlzdEVycm9yKSBpbml0aWFsVGVzdHMucHVzaCh0aGlzLl9ibGFja2xpc3RFcnJvcih2YWxpZGF0aW9uUGFyYW1zKSk7XG4gICAgcmV0dXJuIHJ1blZhbGlkYXRpb25zKHtcbiAgICAgIHZhbGlkYXRpb25zOiBpbml0aWFsVGVzdHMsXG4gICAgICBlbmRFYXJseTogZW5kRWFybHksXG4gICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICBwYXRoOiBwYXRoLFxuICAgICAgc3luYzogc3luY1xuICAgIH0pLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gcnVuVmFsaWRhdGlvbnMoe1xuICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICBzeW5jOiBzeW5jLFxuICAgICAgICB2YWx1ZTogdmFsdWUsXG4gICAgICAgIGVuZEVhcmx5OiBlbmRFYXJseSxcbiAgICAgICAgdmFsaWRhdGlvbnM6IF90aGlzNC50ZXN0cy5tYXAoZnVuY3Rpb24gKGZuKSB7XG4gICAgICAgICAgcmV0dXJuIGZuKHZhbGlkYXRpb25QYXJhbXMpO1xuICAgICAgICB9KVxuICAgICAgfSk7XG4gICAgfSk7XG4gIH0sXG4gIHZhbGlkYXRlOiBmdW5jdGlvbiB2YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc2NoZW1hID0gdGhpcy5yZXNvbHZlKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KSk7XG4gICAgcmV0dXJuIHNjaGVtYS5fdmFsaWRhdGUodmFsdWUsIG9wdGlvbnMpO1xuICB9LFxuICB2YWxpZGF0ZVN5bmM6IGZ1bmN0aW9uIHZhbGlkYXRlU3luYyh2YWx1ZSwgb3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc2NoZW1hID0gdGhpcy5yZXNvbHZlKF9leHRlbmRzKHt9LCBvcHRpb25zLCB7XG4gICAgICB2YWx1ZTogdmFsdWVcbiAgICB9KSk7XG4gICAgdmFyIHJlc3VsdCwgZXJyO1xuXG4gICAgc2NoZW1hLl92YWxpZGF0ZSh2YWx1ZSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHN5bmM6IHRydWVcbiAgICB9KSkudGhlbihmdW5jdGlvbiAocikge1xuICAgICAgcmV0dXJuIHJlc3VsdCA9IHI7XG4gICAgfSkuY2F0Y2goZnVuY3Rpb24gKGUpIHtcbiAgICAgIHJldHVybiBlcnIgPSBlO1xuICAgIH0pO1xuXG4gICAgaWYgKGVycikgdGhyb3cgZXJyO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH0sXG4gIGlzVmFsaWQ6IGZ1bmN0aW9uIGlzVmFsaWQodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy52YWxpZGF0ZSh2YWx1ZSwgb3B0aW9ucykudGhlbihmdW5jdGlvbiAoKSB7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9KS5jYXRjaChmdW5jdGlvbiAoZXJyKSB7XG4gICAgICBpZiAoZXJyLm5hbWUgPT09ICdWYWxpZGF0aW9uRXJyb3InKSByZXR1cm4gZmFsc2U7XG4gICAgICB0aHJvdyBlcnI7XG4gICAgfSk7XG4gIH0sXG4gIGlzVmFsaWRTeW5jOiBmdW5jdGlvbiBpc1ZhbGlkU3luYyh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHRyeSB7XG4gICAgICB0aGlzLnZhbGlkYXRlU3luYyh2YWx1ZSwgb3B0aW9ucyk7XG4gICAgICByZXR1cm4gdHJ1ZTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIGlmIChlcnIubmFtZSA9PT0gJ1ZhbGlkYXRpb25FcnJvcicpIHJldHVybiBmYWxzZTtcbiAgICAgIHRocm93IGVycjtcbiAgICB9XG4gIH0sXG4gIGdldERlZmF1bHQ6IGZ1bmN0aW9uIGdldERlZmF1bHQob3B0aW9ucykge1xuICAgIGlmIChvcHRpb25zID09PSB2b2lkIDApIHtcbiAgICAgIG9wdGlvbnMgPSB7fTtcbiAgICB9XG5cbiAgICB2YXIgc2NoZW1hID0gdGhpcy5yZXNvbHZlKG9wdGlvbnMpO1xuICAgIHJldHVybiBzY2hlbWEuZGVmYXVsdCgpO1xuICB9LFxuICBkZWZhdWx0OiBmdW5jdGlvbiBfZGVmYXVsdChkZWYpIHtcbiAgICBpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgdmFyIGRlZmF1bHRWYWx1ZSA9IGhhcyh0aGlzLCAnX2RlZmF1bHQnKSA/IHRoaXMuX2RlZmF1bHQgOiB0aGlzLl9kZWZhdWx0RGVmYXVsdDtcbiAgICAgIHJldHVybiB0eXBlb2YgZGVmYXVsdFZhbHVlID09PSAnZnVuY3Rpb24nID8gZGVmYXVsdFZhbHVlLmNhbGwodGhpcykgOiBjbG9uZURlZXBXaXRoKGRlZmF1bHRWYWx1ZSk7XG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC5fZGVmYXVsdCA9IGRlZjtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgc3RyaWN0OiBmdW5jdGlvbiBzdHJpY3QoaXNTdHJpY3QpIHtcbiAgICBpZiAoaXNTdHJpY3QgPT09IHZvaWQgMCkge1xuICAgICAgaXNTdHJpY3QgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX29wdGlvbnMuc3RyaWN0ID0gaXNTdHJpY3Q7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIF9pc1ByZXNlbnQ6IGZ1bmN0aW9uIF9pc1ByZXNlbnQodmFsdWUpIHtcbiAgICByZXR1cm4gdmFsdWUgIT0gbnVsbDtcbiAgfSxcbiAgcmVxdWlyZWQ6IGZ1bmN0aW9uIHJlcXVpcmVkKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLnJlcXVpcmVkO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdyZXF1aXJlZCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjaGVtYS5faXNQcmVzZW50KHZhbHVlKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbm90UmVxdWlyZWQ6IGZ1bmN0aW9uIG5vdFJlcXVpcmVkKCkge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQudGVzdHMgPSBuZXh0LnRlc3RzLmZpbHRlcihmdW5jdGlvbiAodGVzdCkge1xuICAgICAgcmV0dXJuIHRlc3QuT1BUSU9OUy5uYW1lICE9PSAncmVxdWlyZWQnO1xuICAgIH0pO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBudWxsYWJsZTogZnVuY3Rpb24gbnVsbGFibGUoaXNOdWxsYWJsZSkge1xuICAgIGlmIChpc051bGxhYmxlID09PSB2b2lkIDApIHtcbiAgICAgIGlzTnVsbGFibGUgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX251bGxhYmxlID0gaXNOdWxsYWJsZTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgdHJhbnNmb3JtOiBmdW5jdGlvbiB0cmFuc2Zvcm0oZm4pIHtcbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBuZXh0LnRyYW5zZm9ybXMucHVzaChmbik7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG5cbiAgLyoqXG4gICAqIEFkZHMgYSB0ZXN0IGZ1bmN0aW9uIHRvIHRoZSBzY2hlbWEncyBxdWV1ZSBvZiB0ZXN0cy5cbiAgICogdGVzdHMgY2FuIGJlIGV4Y2x1c2l2ZSBvciBub24tZXhjbHVzaXZlLlxuICAgKlxuICAgKiAtIGV4Y2x1c2l2ZSB0ZXN0cywgd2lsbCByZXBsYWNlIGFueSBleGlzdGluZyB0ZXN0cyBvZiB0aGUgc2FtZSBuYW1lLlxuICAgKiAtIG5vbi1leGNsdXNpdmU6IGNhbiBiZSBzdGFja2VkXG4gICAqXG4gICAqIElmIGEgbm9uLWV4Y2x1c2l2ZSB0ZXN0IGlzIGFkZGVkIHRvIGEgc2NoZW1hIHdpdGggYW4gZXhjbHVzaXZlIHRlc3Qgb2YgdGhlIHNhbWUgbmFtZVxuICAgKiB0aGUgZXhjbHVzaXZlIHRlc3QgaXMgcmVtb3ZlZCBhbmQgZnVydGhlciB0ZXN0cyBvZiB0aGUgc2FtZSBuYW1lIHdpbGwgYmUgc3RhY2tlZC5cbiAgICpcbiAgICogSWYgYW4gZXhjbHVzaXZlIHRlc3QgaXMgYWRkZWQgdG8gYSBzY2hlbWEgd2l0aCBub24tZXhjbHVzaXZlIHRlc3RzIG9mIHRoZSBzYW1lIG5hbWVcbiAgICogdGhlIHByZXZpb3VzIHRlc3RzIGFyZSByZW1vdmVkIGFuZCBmdXJ0aGVyIHRlc3RzIG9mIHRoZSBzYW1lIG5hbWUgd2lsbCByZXBsYWNlIGVhY2ggb3RoZXIuXG4gICAqL1xuICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KCkge1xuICAgIHZhciBvcHRzO1xuXG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIGlmICh0eXBlb2YgKGFyZ3VtZW50cy5sZW5ndGggPD0gMCA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1swXSkgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgb3B0cyA9IHtcbiAgICAgICAgICB0ZXN0OiBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF1cbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG9wdHMgPSBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAyKSB7XG4gICAgICBvcHRzID0ge1xuICAgICAgICBuYW1lOiBhcmd1bWVudHMubGVuZ3RoIDw9IDAgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMF0sXG4gICAgICAgIHRlc3Q6IGFyZ3VtZW50cy5sZW5ndGggPD0gMSA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1sxXVxuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgb3B0cyA9IHtcbiAgICAgICAgbmFtZTogYXJndW1lbnRzLmxlbmd0aCA8PSAwID8gdW5kZWZpbmVkIDogYXJndW1lbnRzWzBdLFxuICAgICAgICBtZXNzYWdlOiBhcmd1bWVudHMubGVuZ3RoIDw9IDEgPyB1bmRlZmluZWQgOiBhcmd1bWVudHNbMV0sXG4gICAgICAgIHRlc3Q6IGFyZ3VtZW50cy5sZW5ndGggPD0gMiA/IHVuZGVmaW5lZCA6IGFyZ3VtZW50c1syXVxuICAgICAgfTtcbiAgICB9XG5cbiAgICBpZiAob3B0cy5tZXNzYWdlID09PSB1bmRlZmluZWQpIG9wdHMubWVzc2FnZSA9IGxvY2FsZS5kZWZhdWx0O1xuICAgIGlmICh0eXBlb2Ygb3B0cy50ZXN0ICE9PSAnZnVuY3Rpb24nKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdgdGVzdGAgaXMgYSByZXF1aXJlZCBwYXJhbWV0ZXJzJyk7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgdmFyIHZhbGlkYXRlID0gY3JlYXRlVmFsaWRhdGlvbihvcHRzKTtcbiAgICB2YXIgaXNFeGNsdXNpdmUgPSBvcHRzLmV4Y2x1c2l2ZSB8fCBvcHRzLm5hbWUgJiYgbmV4dC5fZXhjbHVzaXZlW29wdHMubmFtZV0gPT09IHRydWU7XG5cbiAgICBpZiAob3B0cy5leGNsdXNpdmUgJiYgIW9wdHMubmFtZSkge1xuICAgICAgdGhyb3cgbmV3IFR5cGVFcnJvcignRXhjbHVzaXZlIHRlc3RzIG11c3QgcHJvdmlkZSBhIHVuaXF1ZSBgbmFtZWAgaWRlbnRpZnlpbmcgdGhlIHRlc3QnKTtcbiAgICB9XG5cbiAgICBuZXh0Ll9leGNsdXNpdmVbb3B0cy5uYW1lXSA9ICEhb3B0cy5leGNsdXNpdmU7XG4gICAgbmV4dC50ZXN0cyA9IG5leHQudGVzdHMuZmlsdGVyKGZ1bmN0aW9uIChmbikge1xuICAgICAgaWYgKGZuLk9QVElPTlMubmFtZSA9PT0gb3B0cy5uYW1lKSB7XG4gICAgICAgIGlmIChpc0V4Y2x1c2l2ZSkgcmV0dXJuIGZhbHNlO1xuICAgICAgICBpZiAoZm4uT1BUSU9OUy50ZXN0ID09PSB2YWxpZGF0ZS5PUFRJT05TLnRlc3QpIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfSk7XG4gICAgbmV4dC50ZXN0cy5wdXNoKHZhbGlkYXRlKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgd2hlbjogZnVuY3Rpb24gd2hlbihrZXlzLCBvcHRpb25zKSB7XG4gICAgaWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgIG9wdGlvbnMgPSBrZXlzO1xuICAgICAga2V5cyA9ICcuJztcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKSxcbiAgICAgICAgZGVwcyA9IFtdLmNvbmNhdChrZXlzKS5tYXAoZnVuY3Rpb24gKGtleSkge1xuICAgICAgcmV0dXJuIG5ldyBSZWYoa2V5KTtcbiAgICB9KTtcbiAgICBkZXBzLmZvckVhY2goZnVuY3Rpb24gKGRlcCkge1xuICAgICAgaWYgKGRlcC5pc1NpYmxpbmcpIG5leHQuX2RlcHMucHVzaChkZXAua2V5KTtcbiAgICB9KTtcblxuICAgIG5leHQuX2NvbmRpdGlvbnMucHVzaChuZXcgQ29uZGl0aW9uKGRlcHMsIG9wdGlvbnMpKTtcblxuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICB0eXBlRXJyb3I6IGZ1bmN0aW9uIHR5cGVFcnJvcihtZXNzYWdlKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgbmV4dC5fdHlwZUVycm9yID0gY3JlYXRlVmFsaWRhdGlvbih7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ3R5cGVFcnJvcicsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmICF0aGlzLnNjaGVtYS5pc1R5cGUodmFsdWUpKSByZXR1cm4gdGhpcy5jcmVhdGVFcnJvcih7XG4gICAgICAgICAgcGFyYW1zOiB7XG4gICAgICAgICAgICB0eXBlOiB0aGlzLnNjaGVtYS5fdHlwZVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBvbmVPZjogZnVuY3Rpb24gb25lT2YoZW51bXMsIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLm9uZU9mO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIGVudW1zLmZvckVhY2goZnVuY3Rpb24gKHZhbCkge1xuICAgICAgbmV4dC5fd2hpdGVsaXN0LmFkZCh2YWwpO1xuXG4gICAgICBuZXh0Ll9ibGFja2xpc3QuZGVsZXRlKHZhbCk7XG4gICAgfSk7XG4gICAgbmV4dC5fd2hpdGVsaXN0RXJyb3IgPSBjcmVhdGVWYWxpZGF0aW9uKHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnb25lT2YnLFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT09IHVuZGVmaW5lZCkgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciB2YWxpZHMgPSB0aGlzLnNjaGVtYS5fd2hpdGVsaXN0O1xuICAgICAgICByZXR1cm4gdmFsaWRzLmhhcyh2YWx1ZSwgdGhpcy5yZXNvbHZlKSA/IHRydWUgOiB0aGlzLmNyZWF0ZUVycm9yKHtcbiAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHZhbHVlczogdmFsaWRzLnRvQXJyYXkoKS5qb2luKCcsICcpXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgbm90T25lT2Y6IGZ1bmN0aW9uIG5vdE9uZU9mKGVudW1zLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5ub3RPbmVPZjtcbiAgICB9XG5cbiAgICB2YXIgbmV4dCA9IHRoaXMuY2xvbmUoKTtcbiAgICBlbnVtcy5mb3JFYWNoKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIG5leHQuX2JsYWNrbGlzdC5hZGQodmFsKTtcblxuICAgICAgbmV4dC5fd2hpdGVsaXN0LmRlbGV0ZSh2YWwpO1xuICAgIH0pO1xuICAgIG5leHQuX2JsYWNrbGlzdEVycm9yID0gY3JlYXRlVmFsaWRhdGlvbih7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ25vdE9uZU9mJyxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgdmFyIGludmFsaWRzID0gdGhpcy5zY2hlbWEuX2JsYWNrbGlzdDtcbiAgICAgICAgaWYgKGludmFsaWRzLmhhcyh2YWx1ZSwgdGhpcy5yZXNvbHZlKSkgcmV0dXJuIHRoaXMuY3JlYXRlRXJyb3Ioe1xuICAgICAgICAgIHBhcmFtczoge1xuICAgICAgICAgICAgdmFsdWVzOiBpbnZhbGlkcy50b0FycmF5KCkuam9pbignLCAnKVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBzdHJpcDogZnVuY3Rpb24gc3RyaXAoX3N0cmlwKSB7XG4gICAgaWYgKF9zdHJpcCA9PT0gdm9pZCAwKSB7XG4gICAgICBfc3RyaXAgPSB0cnVlO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIG5leHQuX3N0cmlwID0gX3N0cmlwO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBfb3B0aW9uOiBmdW5jdGlvbiBfb3B0aW9uKGtleSwgb3ZlcnJpZGVzKSB7XG4gICAgcmV0dXJuIGhhcyhvdmVycmlkZXMsIGtleSkgPyBvdmVycmlkZXNba2V5XSA6IHRoaXMuX29wdGlvbnNba2V5XTtcbiAgfSxcbiAgZGVzY3JpYmU6IGZ1bmN0aW9uIGRlc2NyaWJlKCkge1xuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuICAgIHZhciBkZXNjcmlwdGlvbiA9IHtcbiAgICAgIHR5cGU6IG5leHQuX3R5cGUsXG4gICAgICBtZXRhOiBuZXh0Ll9tZXRhLFxuICAgICAgbGFiZWw6IG5leHQuX2xhYmVsLFxuICAgICAgdGVzdHM6IG5leHQudGVzdHMubWFwKGZ1bmN0aW9uIChmbikge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIG5hbWU6IGZuLk9QVElPTlMubmFtZSxcbiAgICAgICAgICBwYXJhbXM6IGZuLk9QVElPTlMucGFyYW1zXG4gICAgICAgIH07XG4gICAgICB9KS5maWx0ZXIoZnVuY3Rpb24gKG4sIGlkeCwgbGlzdCkge1xuICAgICAgICByZXR1cm4gbGlzdC5maW5kSW5kZXgoZnVuY3Rpb24gKGMpIHtcbiAgICAgICAgICByZXR1cm4gYy5uYW1lID09PSBuLm5hbWU7XG4gICAgICAgIH0pID09PSBpZHg7XG4gICAgICB9KVxuICAgIH07XG4gICAgaWYgKG5leHQuX3doaXRlbGlzdC5zaXplKSBkZXNjcmlwdGlvbi5vbmVPZiA9IG5leHQuX3doaXRlbGlzdC5kZXNjcmliZSgpO1xuICAgIGlmIChuZXh0Ll9ibGFja2xpc3Quc2l6ZSkgZGVzY3JpcHRpb24ubm90T25lT2YgPSBuZXh0Ll9ibGFja2xpc3QuZGVzY3JpYmUoKTtcbiAgICByZXR1cm4gZGVzY3JpcHRpb247XG4gIH0sXG4gIGRlZmluZWQ6IGZ1bmN0aW9uIGRlZmluZWQobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUuZGVmaW5lZDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5udWxsYWJsZSgpLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdkZWZpbmVkJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlICE9PSB1bmRlZmluZWQ7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn07XG5cbnZhciBfbG9vcCA9IGZ1bmN0aW9uIF9sb29wKCkge1xuICB2YXIgbWV0aG9kID0gX2FycltfaTNdO1xuXG4gIHByb3RvW21ldGhvZCArIFwiQXRcIl0gPSBmdW5jdGlvbiAocGF0aCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIF9nZXRJbiA9IGdldEluKHRoaXMsIHBhdGgsIHZhbHVlLCBvcHRpb25zLmNvbnRleHQpLFxuICAgICAgICBwYXJlbnQgPSBfZ2V0SW4ucGFyZW50LFxuICAgICAgICBwYXJlbnRQYXRoID0gX2dldEluLnBhcmVudFBhdGgsXG4gICAgICAgIHNjaGVtYSA9IF9nZXRJbi5zY2hlbWE7XG5cbiAgICByZXR1cm4gc2NoZW1hW21ldGhvZF0ocGFyZW50ICYmIHBhcmVudFtwYXJlbnRQYXRoXSwgX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogcGFyZW50LFxuICAgICAgcGF0aDogcGF0aFxuICAgIH0pKTtcbiAgfTtcbn07XG5cbmZvciAodmFyIF9pMyA9IDAsIF9hcnIgPSBbJ3ZhbGlkYXRlJywgJ3ZhbGlkYXRlU3luYyddOyBfaTMgPCBfYXJyLmxlbmd0aDsgX2kzKyspIHtcbiAgX2xvb3AoKTtcbn1cblxuZm9yICh2YXIgX2k0ID0gMCwgX2FycjIgPSBbJ2VxdWFscycsICdpcyddOyBfaTQgPCBfYXJyMi5sZW5ndGg7IF9pNCsrKSB7XG4gIHZhciBhbGlhcyA9IF9hcnIyW19pNF07XG4gIHByb3RvW2FsaWFzXSA9IHByb3RvLm9uZU9mO1xufVxuXG5mb3IgKHZhciBfaTUgPSAwLCBfYXJyMyA9IFsnbm90JywgJ25vcGUnXTsgX2k1IDwgX2FycjMubGVuZ3RoOyBfaTUrKykge1xuICB2YXIgX2FsaWFzID0gX2FycjNbX2k1XTtcbiAgcHJvdG9bX2FsaWFzXSA9IHByb3RvLm5vdE9uZU9mO1xufVxuXG5wcm90by5vcHRpb25hbCA9IHByb3RvLm5vdFJlcXVpcmVkOyIsImltcG9ydCBfZXh0ZW5kcyBmcm9tIFwiQGJhYmVsL3J1bnRpbWUvaGVscGVycy9lc20vZXh0ZW5kc1wiO1xuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gaW5oZXJpdHMoY3Rvciwgc3VwZXJDdG9yLCBzcGVjKSB7XG4gIGN0b3IucHJvdG90eXBlID0gT2JqZWN0LmNyZWF0ZShzdXBlckN0b3IucHJvdG90eXBlLCB7XG4gICAgY29uc3RydWN0b3I6IHtcbiAgICAgIHZhbHVlOiBjdG9yLFxuICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICB3cml0YWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH1cbiAgfSk7XG5cbiAgX2V4dGVuZHMoY3Rvci5wcm90b3R5cGUsIHNwZWMpO1xufSIsImltcG9ydCBpbmhlcml0cyBmcm9tICcuL3V0aWwvaW5oZXJpdHMnO1xuaW1wb3J0IE1peGVkU2NoZW1hIGZyb20gJy4vbWl4ZWQnO1xuZXhwb3J0IGRlZmF1bHQgQm9vbGVhblNjaGVtYTtcblxuZnVuY3Rpb24gQm9vbGVhblNjaGVtYSgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgQm9vbGVhblNjaGVtYSkpIHJldHVybiBuZXcgQm9vbGVhblNjaGVtYSgpO1xuICBNaXhlZFNjaGVtYS5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnYm9vbGVhbidcbiAgfSk7XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoIXRoaXMuaXNUeXBlKHZhbHVlKSkge1xuICAgICAgICBpZiAoL14odHJ1ZXwxKSQvaS50ZXN0KHZhbHVlKSkgcmV0dXJuIHRydWU7XG4gICAgICAgIGlmICgvXihmYWxzZXwwKSQvaS50ZXN0KHZhbHVlKSkgcmV0dXJuIGZhbHNlO1xuICAgICAgfVxuXG4gICAgICByZXR1cm4gdmFsdWU7XG4gICAgfSk7XG4gIH0pO1xufVxuXG5pbmhlcml0cyhCb29sZWFuU2NoZW1hLCBNaXhlZFNjaGVtYSwge1xuICBfdHlwZUNoZWNrOiBmdW5jdGlvbiBfdHlwZUNoZWNrKHYpIHtcbiAgICBpZiAodiBpbnN0YW5jZW9mIEJvb2xlYW4pIHYgPSB2LnZhbHVlT2YoKTtcbiAgICByZXR1cm4gdHlwZW9mIHYgPT09ICdib29sZWFuJztcbiAgfVxufSk7IiwiZXhwb3J0IGRlZmF1bHQgKGZ1bmN0aW9uICh2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgPT0gbnVsbDtcbn0pOyIsImltcG9ydCBpbmhlcml0cyBmcm9tICcuL3V0aWwvaW5oZXJpdHMnO1xuaW1wb3J0IE1peGVkU2NoZW1hIGZyb20gJy4vbWl4ZWQnO1xuaW1wb3J0IHsgc3RyaW5nIGFzIGxvY2FsZSB9IGZyb20gJy4vbG9jYWxlJztcbmltcG9ydCBpc0Fic2VudCBmcm9tICcuL3V0aWwvaXNBYnNlbnQnOyAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmVcblxudmFyIHJFbWFpbCA9IC9eKCgoW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKyhcXC4oW2Etel18XFxkfFshI1xcJCUmJ1xcKlxcK1xcLVxcLz1cXD9cXF5fYHtcXHx9fl18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKykqKXwoKFxceDIyKSgoKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KChbXFx4MDEtXFx4MDhcXHgwYlxceDBjXFx4MGUtXFx4MWZcXHg3Zl18XFx4MjF8W1xceDIzLVxceDViXXxbXFx4NWQtXFx4N2VdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoXFxcXChbXFx4MDEtXFx4MDlcXHgwYlxceDBjXFx4MGQtXFx4N2ZdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpKSooKChcXHgyMHxcXHgwOSkqKFxceDBkXFx4MGEpKT8oXFx4MjB8XFx4MDkpKyk/KFxceDIyKSkpQCgoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxcXGR8W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKSlcXC4pKygoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCgoW2Etel18W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pKihbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKSQvaTsgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lXG5cbnZhciByVXJsID0gL14oKGh0dHBzP3xmdHApOik/XFwvXFwvKCgoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDopKkApPygoKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKVxcLihcXGR8WzEtOV1cXGR8MVxcZFxcZHwyWzAtNF1cXGR8MjVbMC01XSlcXC4oXFxkfFsxLTldXFxkfDFcXGRcXGR8MlswLTRdXFxkfDI1WzAtNV0pXFwuKFxcZHxbMS05XVxcZHwxXFxkXFxkfDJbMC00XVxcZHwyNVswLTVdKSl8KCgoW2Etel18XFxkfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkqKFthLXpdfFxcZHxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkpKVxcLikrKChbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KChbYS16XXxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSkqKFthLXpdfFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKSkpXFwuPykoOlxcZCopPykoXFwvKCgoW2Etel18XFxkfC18XFwufF98fnxbXFx1MDBBMC1cXHVEN0ZGXFx1RjkwMC1cXHVGRENGXFx1RkRGMC1cXHVGRkVGXSl8KCVbXFxkYS1mXXsyfSl8WyFcXCQmJ1xcKFxcKVxcKlxcKyw7PV18OnxAKSsoXFwvKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApKikqKT8pPyhcXD8oKChbYS16XXxcXGR8LXxcXC58X3x+fFtcXHUwMEEwLVxcdUQ3RkZcXHVGOTAwLVxcdUZEQ0ZcXHVGREYwLVxcdUZGRUZdKXwoJVtcXGRhLWZdezJ9KXxbIVxcJCYnXFwoXFwpXFwqXFwrLDs9XXw6fEApfFtcXHVFMDAwLVxcdUY4RkZdfFxcL3xcXD8pKik/KFxcIygoKFthLXpdfFxcZHwtfFxcLnxffH58W1xcdTAwQTAtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZFRl0pfCglW1xcZGEtZl17Mn0pfFshXFwkJidcXChcXClcXCpcXCssOz1dfDp8QCl8XFwvfFxcPykqKT8kL2k7XG5cbnZhciBpc1RyaW1tZWQgPSBmdW5jdGlvbiBpc1RyaW1tZWQodmFsdWUpIHtcbiAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZSA9PT0gdmFsdWUudHJpbSgpO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gU3RyaW5nU2NoZW1hKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBTdHJpbmdTY2hlbWEpKSByZXR1cm4gbmV3IFN0cmluZ1NjaGVtYSgpO1xuICBNaXhlZFNjaGVtYS5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnc3RyaW5nJ1xuICB9KTtcbiAgdGhpcy53aXRoTXV0YXRpb24oZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIGlmICh0aGlzLmlzVHlwZSh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICAgIHJldHVybiB2YWx1ZSAhPSBudWxsICYmIHZhbHVlLnRvU3RyaW5nID8gdmFsdWUudG9TdHJpbmcoKSA6IHZhbHVlO1xuICAgIH0pO1xuICB9KTtcbn1cbmluaGVyaXRzKFN0cmluZ1NjaGVtYSwgTWl4ZWRTY2hlbWEsIHtcbiAgX3R5cGVDaGVjazogZnVuY3Rpb24gX3R5cGVDaGVjayh2YWx1ZSkge1xuICAgIGlmICh2YWx1ZSBpbnN0YW5jZW9mIFN0cmluZykgdmFsdWUgPSB2YWx1ZS52YWx1ZU9mKCk7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZyc7XG4gIH0sXG4gIF9pc1ByZXNlbnQ6IGZ1bmN0aW9uIF9pc1ByZXNlbnQodmFsdWUpIHtcbiAgICByZXR1cm4gTWl4ZWRTY2hlbWEucHJvdG90eXBlLl9pc1ByZXNlbnQuY2FsbCh0aGlzLCB2YWx1ZSkgJiYgdmFsdWUubGVuZ3RoID4gMDtcbiAgfSxcbiAgbGVuZ3RoOiBmdW5jdGlvbiBsZW5ndGgoX2xlbmd0aCwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubGVuZ3RoO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdsZW5ndGgnLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGxlbmd0aDogX2xlbmd0aFxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPT09IHRoaXMucmVzb2x2ZShfbGVuZ3RoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbWluOiBmdW5jdGlvbiBtaW4oX21pbiwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubWluO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtaW4nLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1pbjogX21pblxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPj0gdGhpcy5yZXNvbHZlKF9taW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtYXg6IGZ1bmN0aW9uIG1heChfbWF4LCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5tYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBuYW1lOiAnbWF4JyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlLmxlbmd0aCA8PSB0aGlzLnJlc29sdmUoX21heCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG1hdGNoZXM6IGZ1bmN0aW9uIG1hdGNoZXMocmVnZXgsIG9wdGlvbnMpIHtcbiAgICB2YXIgZXhjbHVkZUVtcHR5U3RyaW5nID0gZmFsc2U7XG4gICAgdmFyIG1lc3NhZ2U7XG4gICAgdmFyIG5hbWU7XG5cbiAgICBpZiAob3B0aW9ucykge1xuICAgICAgaWYgKHR5cGVvZiBvcHRpb25zID09PSAnb2JqZWN0Jykge1xuICAgICAgICBleGNsdWRlRW1wdHlTdHJpbmcgPSBvcHRpb25zLmV4Y2x1ZGVFbXB0eVN0cmluZztcbiAgICAgICAgbWVzc2FnZSA9IG9wdGlvbnMubWVzc2FnZTtcbiAgICAgICAgbmFtZSA9IG9wdGlvbnMubmFtZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG1lc3NhZ2UgPSBvcHRpb25zO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbmFtZTogbmFtZSB8fCAnbWF0Y2hlcycsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlIHx8IGxvY2FsZS5tYXRjaGVzLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIHJlZ2V4OiByZWdleFxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZSA9PT0gJycgJiYgZXhjbHVkZUVtcHR5U3RyaW5nIHx8IHZhbHVlLnNlYXJjaChyZWdleCkgIT09IC0xO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBlbWFpbDogZnVuY3Rpb24gZW1haWwobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUuZW1haWw7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubWF0Y2hlcyhyRW1haWwsIHtcbiAgICAgIG5hbWU6ICdlbWFpbCcsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgZXhjbHVkZUVtcHR5U3RyaW5nOiB0cnVlXG4gICAgfSk7XG4gIH0sXG4gIHVybDogZnVuY3Rpb24gdXJsKG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLnVybDtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy5tYXRjaGVzKHJVcmwsIHtcbiAgICAgIG5hbWU6ICd1cmwnLFxuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIGV4Y2x1ZGVFbXB0eVN0cmluZzogdHJ1ZVxuICAgIH0pO1xuICB9LFxuICAvLy0tIHRyYW5zZm9ybXMgLS1cbiAgZW5zdXJlOiBmdW5jdGlvbiBlbnN1cmUoKSB7XG4gICAgcmV0dXJuIHRoaXMuZGVmYXVsdCgnJykudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgIHJldHVybiB2YWwgPT09IG51bGwgPyAnJyA6IHZhbDtcbiAgICB9KTtcbiAgfSxcbiAgdHJpbTogZnVuY3Rpb24gdHJpbShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS50cmltO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsKSB7XG4gICAgICByZXR1cm4gdmFsICE9IG51bGwgPyB2YWwudHJpbSgpIDogdmFsO1xuICAgIH0pLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICd0cmltJyxcbiAgICAgIHRlc3Q6IGlzVHJpbW1lZFxuICAgIH0pO1xuICB9LFxuICBsb3dlcmNhc2U6IGZ1bmN0aW9uIGxvd2VyY2FzZShtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5sb3dlcmNhc2U7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuICFpc0Fic2VudCh2YWx1ZSkgPyB2YWx1ZS50b0xvd2VyQ2FzZSgpIDogdmFsdWU7XG4gICAgfSkudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ3N0cmluZ19jYXNlJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZSA9PT0gdmFsdWUudG9Mb3dlckNhc2UoKTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgdXBwZXJjYXNlOiBmdW5jdGlvbiB1cHBlcmNhc2UobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUudXBwZXJjYXNlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHJldHVybiAhaXNBYnNlbnQodmFsdWUpID8gdmFsdWUudG9VcHBlckNhc2UoKSA6IHZhbHVlO1xuICAgIH0pLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdzdHJpbmdfY2FzZScsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUgPT09IHZhbHVlLnRvVXBwZXJDYXNlKCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pOyIsImltcG9ydCBpbmhlcml0cyBmcm9tICcuL3V0aWwvaW5oZXJpdHMnO1xuaW1wb3J0IE1peGVkU2NoZW1hIGZyb20gJy4vbWl4ZWQnO1xuaW1wb3J0IHsgbnVtYmVyIGFzIGxvY2FsZSB9IGZyb20gJy4vbG9jYWxlJztcbmltcG9ydCBpc0Fic2VudCBmcm9tICcuL3V0aWwvaXNBYnNlbnQnO1xuXG52YXIgaXNOYU4gPSBmdW5jdGlvbiBpc05hTih2YWx1ZSkge1xuICByZXR1cm4gdmFsdWUgIT0gK3ZhbHVlO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gTnVtYmVyU2NoZW1hKCkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBOdW1iZXJTY2hlbWEpKSByZXR1cm4gbmV3IE51bWJlclNjaGVtYSgpO1xuICBNaXhlZFNjaGVtYS5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnbnVtYmVyJ1xuICB9KTtcbiAgdGhpcy53aXRoTXV0YXRpb24oZnVuY3Rpb24gKCkge1xuICAgIF90aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgIHZhciBwYXJzZWQgPSB2YWx1ZTtcblxuICAgICAgaWYgKHR5cGVvZiBwYXJzZWQgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgIHBhcnNlZCA9IHBhcnNlZC5yZXBsYWNlKC9cXHMvZywgJycpO1xuICAgICAgICBpZiAocGFyc2VkID09PSAnJykgcmV0dXJuIE5hTjsgLy8gZG9uJ3QgdXNlIHBhcnNlRmxvYXQgdG8gYXZvaWQgcG9zaXRpdmVzIG9uIGFscGhhLW51bWVyaWMgc3RyaW5nc1xuXG4gICAgICAgIHBhcnNlZCA9ICtwYXJzZWQ7XG4gICAgICB9XG5cbiAgICAgIGlmICh0aGlzLmlzVHlwZShwYXJzZWQpKSByZXR1cm4gcGFyc2VkO1xuICAgICAgcmV0dXJuIHBhcnNlRmxvYXQocGFyc2VkKTtcbiAgICB9KTtcbiAgfSk7XG59XG5pbmhlcml0cyhOdW1iZXJTY2hlbWEsIE1peGVkU2NoZW1hLCB7XG4gIF90eXBlQ2hlY2s6IGZ1bmN0aW9uIF90eXBlQ2hlY2sodmFsdWUpIHtcbiAgICBpZiAodmFsdWUgaW5zdGFuY2VvZiBOdW1iZXIpIHZhbHVlID0gdmFsdWUudmFsdWVPZigpO1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInICYmICFpc05hTih2YWx1ZSk7XG4gIH0sXG4gIG1pbjogZnVuY3Rpb24gbWluKF9taW4sIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLm1pbjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtaW46IF9taW5cbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUgPj0gdGhpcy5yZXNvbHZlKF9taW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtYXg6IGZ1bmN0aW9uIG1heChfbWF4LCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5tYXg7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlIDw9IHRoaXMucmVzb2x2ZShfbWF4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgbGVzc1RoYW46IGZ1bmN0aW9uIGxlc3NUaGFuKGxlc3MsIG1lc3NhZ2UpIHtcbiAgICBpZiAobWVzc2FnZSA9PT0gdm9pZCAwKSB7XG4gICAgICBtZXNzYWdlID0gbG9jYWxlLmxlc3NUaGFuO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtYXgnLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIGxlc3M6IGxlc3NcbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUgPCB0aGlzLnJlc29sdmUobGVzcyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIG1vcmVUaGFuOiBmdW5jdGlvbiBtb3JlVGhhbihtb3JlLCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5tb3JlVGhhbjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWluJyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtb3JlOiBtb3JlXG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlID4gdGhpcy5yZXNvbHZlKG1vcmUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBwb3NpdGl2ZTogZnVuY3Rpb24gcG9zaXRpdmUobXNnKSB7XG4gICAgaWYgKG1zZyA9PT0gdm9pZCAwKSB7XG4gICAgICBtc2cgPSBsb2NhbGUucG9zaXRpdmU7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubW9yZVRoYW4oMCwgbXNnKTtcbiAgfSxcbiAgbmVnYXRpdmU6IGZ1bmN0aW9uIG5lZ2F0aXZlKG1zZykge1xuICAgIGlmIChtc2cgPT09IHZvaWQgMCkge1xuICAgICAgbXNnID0gbG9jYWxlLm5lZ2F0aXZlO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLmxlc3NUaGFuKDAsIG1zZyk7XG4gIH0sXG4gIGludGVnZXI6IGZ1bmN0aW9uIGludGVnZXIobWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUuaW50ZWdlcjtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG5hbWU6ICdpbnRlZ2VyJyxcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbCkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsKSB8fCBOdW1iZXIuaXNJbnRlZ2VyKHZhbCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0sXG4gIHRydW5jYXRlOiBmdW5jdGlvbiB0cnVuY2F0ZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICByZXR1cm4gIWlzQWJzZW50KHZhbHVlKSA/IHZhbHVlIHwgMCA6IHZhbHVlO1xuICAgIH0pO1xuICB9LFxuICByb3VuZDogZnVuY3Rpb24gcm91bmQobWV0aG9kKSB7XG4gICAgdmFyIGF2YWlsID0gWydjZWlsJywgJ2Zsb29yJywgJ3JvdW5kJywgJ3RydW5jJ107XG4gICAgbWV0aG9kID0gbWV0aG9kICYmIG1ldGhvZC50b0xvd2VyQ2FzZSgpIHx8ICdyb3VuZCc7IC8vIHRoaXMgZXhpc3RzIGZvciBzeW1lbXRyeSB3aXRoIHRoZSBuZXcgTWF0aC50cnVuY1xuXG4gICAgaWYgKG1ldGhvZCA9PT0gJ3RydW5jJykgcmV0dXJuIHRoaXMudHJ1bmNhdGUoKTtcbiAgICBpZiAoYXZhaWwuaW5kZXhPZihtZXRob2QudG9Mb3dlckNhc2UoKSkgPT09IC0xKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdPbmx5IHZhbGlkIG9wdGlvbnMgZm9yIHJvdW5kKCkgYXJlOiAnICsgYXZhaWwuam9pbignLCAnKSk7XG4gICAgcmV0dXJuIHRoaXMudHJhbnNmb3JtKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuICFpc0Fic2VudCh2YWx1ZSkgPyBNYXRoW21ldGhvZF0odmFsdWUpIDogdmFsdWU7XG4gICAgfSk7XG4gIH1cbn0pOyIsIi8qIGVzbGludC1kaXNhYmxlICovXG5cbi8qKlxuICpcbiAqIERhdGUucGFyc2Ugd2l0aCBwcm9ncmVzc2l2ZSBlbmhhbmNlbWVudCBmb3IgSVNPIDg2MDEgPGh0dHBzOi8vZ2l0aHViLmNvbS9jc25vdmVyL2pzLWlzbzg2MDE+XG4gKiBOT04tQ09ORk9STUFOVCBFRElUSU9OLlxuICogwqkgMjAxMSBDb2xpbiBTbm92ZXIgPGh0dHA6Ly96ZXRhZmxlZXQuY29tPlxuICogUmVsZWFzZWQgdW5kZXIgTUlUIGxpY2Vuc2UuXG4gKi9cbi8vICAgICAgICAgICAgICAxIFlZWVkgICAgICAgICAgICAgICAgIDIgTU0gICAgICAgIDMgREQgICAgICAgICAgICAgIDQgSEggICAgIDUgbW0gICAgICAgIDYgc3MgICAgICAgICAgICA3IG1zZWMgICAgICAgICA4IFogOSDCsSAgICAxMCB0ekhIICAgIDExIHR6bW1cbnZhciBpc29SZWcgPSAvXihcXGR7NH18WytcXC1dXFxkezZ9KSg/Oi0/KFxcZHsyfSkoPzotPyhcXGR7Mn0pKT8pPyg/OlsgVF0/KFxcZHsyfSk6PyhcXGR7Mn0pKD86Oj8oXFxkezJ9KSg/OlssXFwuXShcXGR7MSx9KSk/KT8oPzooWil8KFsrXFwtXSkoXFxkezJ9KSg/Ojo/KFxcZHsyfSkpPyk/KT8kLztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHBhcnNlSXNvRGF0ZShkYXRlKSB7XG4gIHZhciBudW1lcmljS2V5cyA9IFsxLCA0LCA1LCA2LCA3LCAxMCwgMTFdLFxuICAgICAgbWludXRlc09mZnNldCA9IDAsXG4gICAgICB0aW1lc3RhbXAsXG4gICAgICBzdHJ1Y3Q7XG5cbiAgaWYgKHN0cnVjdCA9IGlzb1JlZy5leGVjKGRhdGUpKSB7XG4gICAgLy8gYXZvaWQgTmFOIHRpbWVzdGFtcHMgY2F1c2VkIGJ5IOKAnHVuZGVmaW5lZOKAnSB2YWx1ZXMgYmVpbmcgcGFzc2VkIHRvIERhdGUuVVRDXG4gICAgZm9yICh2YXIgaSA9IDAsIGs7IGsgPSBudW1lcmljS2V5c1tpXTsgKytpKSB7XG4gICAgICBzdHJ1Y3Rba10gPSArc3RydWN0W2tdIHx8IDA7XG4gICAgfSAvLyBhbGxvdyB1bmRlZmluZWQgZGF5cyBhbmQgbW9udGhzXG5cblxuICAgIHN0cnVjdFsyXSA9ICgrc3RydWN0WzJdIHx8IDEpIC0gMTtcbiAgICBzdHJ1Y3RbM10gPSArc3RydWN0WzNdIHx8IDE7IC8vIGFsbG93IGFyYml0cmFyeSBzdWItc2Vjb25kIHByZWNpc2lvbiBiZXlvbmQgbWlsbGlzZWNvbmRzXG5cbiAgICBzdHJ1Y3RbN10gPSBzdHJ1Y3RbN10gPyBTdHJpbmcoc3RydWN0WzddKS5zdWJzdHIoMCwgMykgOiAwOyAvLyB0aW1lc3RhbXBzIHdpdGhvdXQgdGltZXpvbmUgaWRlbnRpZmllcnMgc2hvdWxkIGJlIGNvbnNpZGVyZWQgbG9jYWwgdGltZVxuXG4gICAgaWYgKChzdHJ1Y3RbOF0gPT09IHVuZGVmaW5lZCB8fCBzdHJ1Y3RbOF0gPT09ICcnKSAmJiAoc3RydWN0WzldID09PSB1bmRlZmluZWQgfHwgc3RydWN0WzldID09PSAnJykpIHRpbWVzdGFtcCA9ICtuZXcgRGF0ZShzdHJ1Y3RbMV0sIHN0cnVjdFsyXSwgc3RydWN0WzNdLCBzdHJ1Y3RbNF0sIHN0cnVjdFs1XSwgc3RydWN0WzZdLCBzdHJ1Y3RbN10pO2Vsc2Uge1xuICAgICAgaWYgKHN0cnVjdFs4XSAhPT0gJ1onICYmIHN0cnVjdFs5XSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG1pbnV0ZXNPZmZzZXQgPSBzdHJ1Y3RbMTBdICogNjAgKyBzdHJ1Y3RbMTFdO1xuICAgICAgICBpZiAoc3RydWN0WzldID09PSAnKycpIG1pbnV0ZXNPZmZzZXQgPSAwIC0gbWludXRlc09mZnNldDtcbiAgICAgIH1cblxuICAgICAgdGltZXN0YW1wID0gRGF0ZS5VVEMoc3RydWN0WzFdLCBzdHJ1Y3RbMl0sIHN0cnVjdFszXSwgc3RydWN0WzRdLCBzdHJ1Y3RbNV0gKyBtaW51dGVzT2Zmc2V0LCBzdHJ1Y3RbNl0sIHN0cnVjdFs3XSk7XG4gICAgfVxuICB9IGVsc2UgdGltZXN0YW1wID0gRGF0ZS5wYXJzZSA/IERhdGUucGFyc2UoZGF0ZSkgOiBOYU47XG5cbiAgcmV0dXJuIHRpbWVzdGFtcDtcbn0iLCJpbXBvcnQgTWl4ZWRTY2hlbWEgZnJvbSAnLi9taXhlZCc7XG5pbXBvcnQgaW5oZXJpdHMgZnJvbSAnLi91dGlsL2luaGVyaXRzJztcbmltcG9ydCBpc29QYXJzZSBmcm9tICcuL3V0aWwvaXNvZGF0ZSc7XG5pbXBvcnQgeyBkYXRlIGFzIGxvY2FsZSB9IGZyb20gJy4vbG9jYWxlJztcbmltcG9ydCBpc0Fic2VudCBmcm9tICcuL3V0aWwvaXNBYnNlbnQnO1xuaW1wb3J0IFJlZiBmcm9tICcuL1JlZmVyZW5jZSc7XG52YXIgaW52YWxpZERhdGUgPSBuZXcgRGF0ZSgnJyk7XG5cbnZhciBpc0RhdGUgPSBmdW5jdGlvbiBpc0RhdGUob2JqKSB7XG4gIHJldHVybiBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwob2JqKSA9PT0gJ1tvYmplY3QgRGF0ZV0nO1xufTtcblxuZXhwb3J0IGRlZmF1bHQgRGF0ZVNjaGVtYTtcblxuZnVuY3Rpb24gRGF0ZVNjaGVtYSgpIHtcbiAgdmFyIF90aGlzID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgRGF0ZVNjaGVtYSkpIHJldHVybiBuZXcgRGF0ZVNjaGVtYSgpO1xuICBNaXhlZFNjaGVtYS5jYWxsKHRoaXMsIHtcbiAgICB0eXBlOiAnZGF0ZSdcbiAgfSk7XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAodGhpcy5pc1R5cGUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICB2YWx1ZSA9IGlzb1BhcnNlKHZhbHVlKTsgLy8gMCBpcyBhIHZhbGlkIHRpbWVzdGFtcCBlcXVpdmFsZW50IHRvIDE5NzAtMDEtMDFUMDA6MDA6MDBaKHVuaXggZXBvY2gpIG9yIGJlZm9yZS5cblxuICAgICAgcmV0dXJuICFpc05hTih2YWx1ZSkgPyBuZXcgRGF0ZSh2YWx1ZSkgOiBpbnZhbGlkRGF0ZTtcbiAgICB9KTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKERhdGVTY2hlbWEsIE1peGVkU2NoZW1hLCB7XG4gIF90eXBlQ2hlY2s6IGZ1bmN0aW9uIF90eXBlQ2hlY2sodikge1xuICAgIHJldHVybiBpc0RhdGUodikgJiYgIWlzTmFOKHYuZ2V0VGltZSgpKTtcbiAgfSxcbiAgbWluOiBmdW5jdGlvbiBtaW4oX21pbiwgbWVzc2FnZSkge1xuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubWluO1xuICAgIH1cblxuICAgIHZhciBsaW1pdCA9IF9taW47XG5cbiAgICBpZiAoIVJlZi5pc1JlZihsaW1pdCkpIHtcbiAgICAgIGxpbWl0ID0gdGhpcy5jYXN0KF9taW4pO1xuICAgICAgaWYgKCF0aGlzLl90eXBlQ2hlY2sobGltaXQpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdgbWluYCBtdXN0IGJlIGEgRGF0ZSBvciBhIHZhbHVlIHRoYXQgY2FuIGJlIGBjYXN0KClgIHRvIGEgRGF0ZScpO1xuICAgIH1cblxuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtaW4nLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1pbjogX21pblxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZSA+PSB0aGlzLnJlc29sdmUobGltaXQpO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtYXg6IGZ1bmN0aW9uIG1heChfbWF4LCBtZXNzYWdlKSB7XG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5tYXg7XG4gICAgfVxuXG4gICAgdmFyIGxpbWl0ID0gX21heDtcblxuICAgIGlmICghUmVmLmlzUmVmKGxpbWl0KSkge1xuICAgICAgbGltaXQgPSB0aGlzLmNhc3QoX21heCk7XG4gICAgICBpZiAoIXRoaXMuX3R5cGVDaGVjayhsaW1pdCkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BtYXhgIG11c3QgYmUgYSBEYXRlIG9yIGEgdmFsdWUgdGhhdCBjYW4gYmUgYGNhc3QoKWAgdG8gYSBEYXRlJyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMudGVzdCh7XG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgbmFtZTogJ21heCcsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBwYXJhbXM6IHtcbiAgICAgICAgbWF4OiBfbWF4XG4gICAgICB9LFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICByZXR1cm4gaXNBYnNlbnQodmFsdWUpIHx8IHZhbHVlIDw9IHRoaXMucmVzb2x2ZShsaW1pdCk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cbn0pOyIsImV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIF90YWdnZWRUZW1wbGF0ZUxpdGVyYWxMb29zZShzdHJpbmdzLCByYXcpIHtcbiAgaWYgKCFyYXcpIHtcbiAgICByYXcgPSBzdHJpbmdzLnNsaWNlKDApO1xuICB9XG5cbiAgc3RyaW5ncy5yYXcgPSByYXc7XG4gIHJldHVybiBzdHJpbmdzO1xufSIsIi8qKlxuICogQSBzcGVjaWFsaXplZCB2ZXJzaW9uIG9mIGBfLnJlZHVjZWAgZm9yIGFycmF5cyB3aXRob3V0IHN1cHBvcnQgZm9yXG4gKiBpdGVyYXRlZSBzaG9ydGhhbmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge0FycmF5fSBbYXJyYXldIFRoZSBhcnJheSB0byBpdGVyYXRlIG92ZXIuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBpdGVyYXRlZSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHBhcmFtIHsqfSBbYWNjdW11bGF0b3JdIFRoZSBpbml0aWFsIHZhbHVlLlxuICogQHBhcmFtIHtib29sZWFufSBbaW5pdEFjY3VtXSBTcGVjaWZ5IHVzaW5nIHRoZSBmaXJzdCBlbGVtZW50IG9mIGBhcnJheWAgYXNcbiAqICB0aGUgaW5pdGlhbCB2YWx1ZS5cbiAqIEByZXR1cm5zIHsqfSBSZXR1cm5zIHRoZSBhY2N1bXVsYXRlZCB2YWx1ZS5cbiAqL1xuZnVuY3Rpb24gYXJyYXlSZWR1Y2UoYXJyYXksIGl0ZXJhdGVlLCBhY2N1bXVsYXRvciwgaW5pdEFjY3VtKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gYXJyYXkgPT0gbnVsbCA/IDAgOiBhcnJheS5sZW5ndGg7XG5cbiAgaWYgKGluaXRBY2N1bSAmJiBsZW5ndGgpIHtcbiAgICBhY2N1bXVsYXRvciA9IGFycmF5WysraW5kZXhdO1xuICB9XG4gIHdoaWxlICgrK2luZGV4IDwgbGVuZ3RoKSB7XG4gICAgYWNjdW11bGF0b3IgPSBpdGVyYXRlZShhY2N1bXVsYXRvciwgYXJyYXlbaW5kZXhdLCBpbmRleCwgYXJyYXkpO1xuICB9XG4gIHJldHVybiBhY2N1bXVsYXRvcjtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXJyYXlSZWR1Y2U7XG4iLCIvKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mIGBfLnByb3BlcnR5T2ZgIHdpdGhvdXQgc3VwcG9ydCBmb3IgZGVlcCBwYXRocy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIHF1ZXJ5LlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgYWNjZXNzb3IgZnVuY3Rpb24uXG4gKi9cbmZ1bmN0aW9uIGJhc2VQcm9wZXJ0eU9mKG9iamVjdCkge1xuICByZXR1cm4gZnVuY3Rpb24oa2V5KSB7XG4gICAgcmV0dXJuIG9iamVjdCA9PSBudWxsID8gdW5kZWZpbmVkIDogb2JqZWN0W2tleV07XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGJhc2VQcm9wZXJ0eU9mO1xuIiwiaW1wb3J0IGJhc2VQcm9wZXJ0eU9mIGZyb20gJy4vX2Jhc2VQcm9wZXJ0eU9mLmpzJztcblxuLyoqIFVzZWQgdG8gbWFwIExhdGluIFVuaWNvZGUgbGV0dGVycyB0byBiYXNpYyBMYXRpbiBsZXR0ZXJzLiAqL1xudmFyIGRlYnVycmVkTGV0dGVycyA9IHtcbiAgLy8gTGF0aW4tMSBTdXBwbGVtZW50IGJsb2NrLlxuICAnXFx4YzAnOiAnQScsICAnXFx4YzEnOiAnQScsICdcXHhjMic6ICdBJywgJ1xceGMzJzogJ0EnLCAnXFx4YzQnOiAnQScsICdcXHhjNSc6ICdBJyxcbiAgJ1xceGUwJzogJ2EnLCAgJ1xceGUxJzogJ2EnLCAnXFx4ZTInOiAnYScsICdcXHhlMyc6ICdhJywgJ1xceGU0JzogJ2EnLCAnXFx4ZTUnOiAnYScsXG4gICdcXHhjNyc6ICdDJywgICdcXHhlNyc6ICdjJyxcbiAgJ1xceGQwJzogJ0QnLCAgJ1xceGYwJzogJ2QnLFxuICAnXFx4YzgnOiAnRScsICAnXFx4YzknOiAnRScsICdcXHhjYSc6ICdFJywgJ1xceGNiJzogJ0UnLFxuICAnXFx4ZTgnOiAnZScsICAnXFx4ZTknOiAnZScsICdcXHhlYSc6ICdlJywgJ1xceGViJzogJ2UnLFxuICAnXFx4Y2MnOiAnSScsICAnXFx4Y2QnOiAnSScsICdcXHhjZSc6ICdJJywgJ1xceGNmJzogJ0knLFxuICAnXFx4ZWMnOiAnaScsICAnXFx4ZWQnOiAnaScsICdcXHhlZSc6ICdpJywgJ1xceGVmJzogJ2knLFxuICAnXFx4ZDEnOiAnTicsICAnXFx4ZjEnOiAnbicsXG4gICdcXHhkMic6ICdPJywgICdcXHhkMyc6ICdPJywgJ1xceGQ0JzogJ08nLCAnXFx4ZDUnOiAnTycsICdcXHhkNic6ICdPJywgJ1xceGQ4JzogJ08nLFxuICAnXFx4ZjInOiAnbycsICAnXFx4ZjMnOiAnbycsICdcXHhmNCc6ICdvJywgJ1xceGY1JzogJ28nLCAnXFx4ZjYnOiAnbycsICdcXHhmOCc6ICdvJyxcbiAgJ1xceGQ5JzogJ1UnLCAgJ1xceGRhJzogJ1UnLCAnXFx4ZGInOiAnVScsICdcXHhkYyc6ICdVJyxcbiAgJ1xceGY5JzogJ3UnLCAgJ1xceGZhJzogJ3UnLCAnXFx4ZmInOiAndScsICdcXHhmYyc6ICd1JyxcbiAgJ1xceGRkJzogJ1knLCAgJ1xceGZkJzogJ3knLCAnXFx4ZmYnOiAneScsXG4gICdcXHhjNic6ICdBZScsICdcXHhlNic6ICdhZScsXG4gICdcXHhkZSc6ICdUaCcsICdcXHhmZSc6ICd0aCcsXG4gICdcXHhkZic6ICdzcycsXG4gIC8vIExhdGluIEV4dGVuZGVkLUEgYmxvY2suXG4gICdcXHUwMTAwJzogJ0EnLCAgJ1xcdTAxMDInOiAnQScsICdcXHUwMTA0JzogJ0EnLFxuICAnXFx1MDEwMSc6ICdhJywgICdcXHUwMTAzJzogJ2EnLCAnXFx1MDEwNSc6ICdhJyxcbiAgJ1xcdTAxMDYnOiAnQycsICAnXFx1MDEwOCc6ICdDJywgJ1xcdTAxMGEnOiAnQycsICdcXHUwMTBjJzogJ0MnLFxuICAnXFx1MDEwNyc6ICdjJywgICdcXHUwMTA5JzogJ2MnLCAnXFx1MDEwYic6ICdjJywgJ1xcdTAxMGQnOiAnYycsXG4gICdcXHUwMTBlJzogJ0QnLCAgJ1xcdTAxMTAnOiAnRCcsICdcXHUwMTBmJzogJ2QnLCAnXFx1MDExMSc6ICdkJyxcbiAgJ1xcdTAxMTInOiAnRScsICAnXFx1MDExNCc6ICdFJywgJ1xcdTAxMTYnOiAnRScsICdcXHUwMTE4JzogJ0UnLCAnXFx1MDExYSc6ICdFJyxcbiAgJ1xcdTAxMTMnOiAnZScsICAnXFx1MDExNSc6ICdlJywgJ1xcdTAxMTcnOiAnZScsICdcXHUwMTE5JzogJ2UnLCAnXFx1MDExYic6ICdlJyxcbiAgJ1xcdTAxMWMnOiAnRycsICAnXFx1MDExZSc6ICdHJywgJ1xcdTAxMjAnOiAnRycsICdcXHUwMTIyJzogJ0cnLFxuICAnXFx1MDExZCc6ICdnJywgICdcXHUwMTFmJzogJ2cnLCAnXFx1MDEyMSc6ICdnJywgJ1xcdTAxMjMnOiAnZycsXG4gICdcXHUwMTI0JzogJ0gnLCAgJ1xcdTAxMjYnOiAnSCcsICdcXHUwMTI1JzogJ2gnLCAnXFx1MDEyNyc6ICdoJyxcbiAgJ1xcdTAxMjgnOiAnSScsICAnXFx1MDEyYSc6ICdJJywgJ1xcdTAxMmMnOiAnSScsICdcXHUwMTJlJzogJ0knLCAnXFx1MDEzMCc6ICdJJyxcbiAgJ1xcdTAxMjknOiAnaScsICAnXFx1MDEyYic6ICdpJywgJ1xcdTAxMmQnOiAnaScsICdcXHUwMTJmJzogJ2knLCAnXFx1MDEzMSc6ICdpJyxcbiAgJ1xcdTAxMzQnOiAnSicsICAnXFx1MDEzNSc6ICdqJyxcbiAgJ1xcdTAxMzYnOiAnSycsICAnXFx1MDEzNyc6ICdrJywgJ1xcdTAxMzgnOiAnaycsXG4gICdcXHUwMTM5JzogJ0wnLCAgJ1xcdTAxM2InOiAnTCcsICdcXHUwMTNkJzogJ0wnLCAnXFx1MDEzZic6ICdMJywgJ1xcdTAxNDEnOiAnTCcsXG4gICdcXHUwMTNhJzogJ2wnLCAgJ1xcdTAxM2MnOiAnbCcsICdcXHUwMTNlJzogJ2wnLCAnXFx1MDE0MCc6ICdsJywgJ1xcdTAxNDInOiAnbCcsXG4gICdcXHUwMTQzJzogJ04nLCAgJ1xcdTAxNDUnOiAnTicsICdcXHUwMTQ3JzogJ04nLCAnXFx1MDE0YSc6ICdOJyxcbiAgJ1xcdTAxNDQnOiAnbicsICAnXFx1MDE0Nic6ICduJywgJ1xcdTAxNDgnOiAnbicsICdcXHUwMTRiJzogJ24nLFxuICAnXFx1MDE0Yyc6ICdPJywgICdcXHUwMTRlJzogJ08nLCAnXFx1MDE1MCc6ICdPJyxcbiAgJ1xcdTAxNGQnOiAnbycsICAnXFx1MDE0Zic6ICdvJywgJ1xcdTAxNTEnOiAnbycsXG4gICdcXHUwMTU0JzogJ1InLCAgJ1xcdTAxNTYnOiAnUicsICdcXHUwMTU4JzogJ1InLFxuICAnXFx1MDE1NSc6ICdyJywgICdcXHUwMTU3JzogJ3InLCAnXFx1MDE1OSc6ICdyJyxcbiAgJ1xcdTAxNWEnOiAnUycsICAnXFx1MDE1Yyc6ICdTJywgJ1xcdTAxNWUnOiAnUycsICdcXHUwMTYwJzogJ1MnLFxuICAnXFx1MDE1Yic6ICdzJywgICdcXHUwMTVkJzogJ3MnLCAnXFx1MDE1Zic6ICdzJywgJ1xcdTAxNjEnOiAncycsXG4gICdcXHUwMTYyJzogJ1QnLCAgJ1xcdTAxNjQnOiAnVCcsICdcXHUwMTY2JzogJ1QnLFxuICAnXFx1MDE2Myc6ICd0JywgICdcXHUwMTY1JzogJ3QnLCAnXFx1MDE2Nyc6ICd0JyxcbiAgJ1xcdTAxNjgnOiAnVScsICAnXFx1MDE2YSc6ICdVJywgJ1xcdTAxNmMnOiAnVScsICdcXHUwMTZlJzogJ1UnLCAnXFx1MDE3MCc6ICdVJywgJ1xcdTAxNzInOiAnVScsXG4gICdcXHUwMTY5JzogJ3UnLCAgJ1xcdTAxNmInOiAndScsICdcXHUwMTZkJzogJ3UnLCAnXFx1MDE2Zic6ICd1JywgJ1xcdTAxNzEnOiAndScsICdcXHUwMTczJzogJ3UnLFxuICAnXFx1MDE3NCc6ICdXJywgICdcXHUwMTc1JzogJ3cnLFxuICAnXFx1MDE3Nic6ICdZJywgICdcXHUwMTc3JzogJ3knLCAnXFx1MDE3OCc6ICdZJyxcbiAgJ1xcdTAxNzknOiAnWicsICAnXFx1MDE3Yic6ICdaJywgJ1xcdTAxN2QnOiAnWicsXG4gICdcXHUwMTdhJzogJ3onLCAgJ1xcdTAxN2MnOiAneicsICdcXHUwMTdlJzogJ3onLFxuICAnXFx1MDEzMic6ICdJSicsICdcXHUwMTMzJzogJ2lqJyxcbiAgJ1xcdTAxNTInOiAnT2UnLCAnXFx1MDE1Myc6ICdvZScsXG4gICdcXHUwMTQ5JzogXCInblwiLCAnXFx1MDE3Zic6ICdzJ1xufTtcblxuLyoqXG4gKiBVc2VkIGJ5IGBfLmRlYnVycmAgdG8gY29udmVydCBMYXRpbi0xIFN1cHBsZW1lbnQgYW5kIExhdGluIEV4dGVuZGVkLUFcbiAqIGxldHRlcnMgdG8gYmFzaWMgTGF0aW4gbGV0dGVycy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtzdHJpbmd9IGxldHRlciBUaGUgbWF0Y2hlZCBsZXR0ZXIgdG8gZGVidXJyLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgZGVidXJyZWQgbGV0dGVyLlxuICovXG52YXIgZGVidXJyTGV0dGVyID0gYmFzZVByb3BlcnR5T2YoZGVidXJyZWRMZXR0ZXJzKTtcblxuZXhwb3J0IGRlZmF1bHQgZGVidXJyTGV0dGVyO1xuIiwiaW1wb3J0IGRlYnVyckxldHRlciBmcm9tICcuL19kZWJ1cnJMZXR0ZXIuanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKiogVXNlZCB0byBtYXRjaCBMYXRpbiBVbmljb2RlIGxldHRlcnMgKGV4Y2x1ZGluZyBtYXRoZW1hdGljYWwgb3BlcmF0b3JzKS4gKi9cbnZhciByZUxhdGluID0gL1tcXHhjMC1cXHhkNlxceGQ4LVxceGY2XFx4ZjgtXFx4ZmZcXHUwMTAwLVxcdTAxN2ZdL2c7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjaGFyYWN0ZXIgY2xhc3Nlcy4gKi9cbnZhciByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2U7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0NvbWJvID0gJ1snICsgcnNDb21ib1JhbmdlICsgJ10nO1xuXG4vKipcbiAqIFVzZWQgdG8gbWF0Y2ggW2NvbWJpbmluZyBkaWFjcml0aWNhbCBtYXJrc10oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tYmluaW5nX0RpYWNyaXRpY2FsX01hcmtzKSBhbmRcbiAqIFtjb21iaW5pbmcgZGlhY3JpdGljYWwgbWFya3MgZm9yIHN5bWJvbHNdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0NvbWJpbmluZ19EaWFjcml0aWNhbF9NYXJrc19mb3JfU3ltYm9scykuXG4gKi9cbnZhciByZUNvbWJvTWFyayA9IFJlZ0V4cChyc0NvbWJvLCAnZycpO1xuXG4vKipcbiAqIERlYnVycnMgYHN0cmluZ2AgYnkgY29udmVydGluZ1xuICogW0xhdGluLTEgU3VwcGxlbWVudF0oaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvTGF0aW4tMV9TdXBwbGVtZW50XyhVbmljb2RlX2Jsb2NrKSNDaGFyYWN0ZXJfdGFibGUpXG4gKiBhbmQgW0xhdGluIEV4dGVuZGVkLUFdKGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0xhdGluX0V4dGVuZGVkLUEpXG4gKiBsZXR0ZXJzIHRvIGJhc2ljIExhdGluIGxldHRlcnMgYW5kIHJlbW92aW5nXG4gKiBbY29tYmluaW5nIGRpYWNyaXRpY2FsIG1hcmtzXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db21iaW5pbmdfRGlhY3JpdGljYWxfTWFya3MpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGRlYnVyci5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGRlYnVycmVkIHN0cmluZy5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWJ1cnIoJ2TDqWrDoCB2dScpO1xuICogLy8gPT4gJ2RlamEgdnUnXG4gKi9cbmZ1bmN0aW9uIGRlYnVycihzdHJpbmcpIHtcbiAgc3RyaW5nID0gdG9TdHJpbmcoc3RyaW5nKTtcbiAgcmV0dXJuIHN0cmluZyAmJiBzdHJpbmcucmVwbGFjZShyZUxhdGluLCBkZWJ1cnJMZXR0ZXIpLnJlcGxhY2UocmVDb21ib01hcmssICcnKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZGVidXJyO1xuIiwiLyoqIFVzZWQgdG8gbWF0Y2ggd29yZHMgY29tcG9zZWQgb2YgYWxwaGFudW1lcmljIGNoYXJhY3RlcnMuICovXG52YXIgcmVBc2NpaVdvcmQgPSAvW15cXHgwMC1cXHgyZlxceDNhLVxceDQwXFx4NWItXFx4NjBcXHg3Yi1cXHg3Zl0rL2c7XG5cbi8qKlxuICogU3BsaXRzIGFuIEFTQ0lJIGBzdHJpbmdgIGludG8gYW4gYXJyYXkgb2YgaXRzIHdvcmRzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gVGhlIHN0cmluZyB0byBpbnNwZWN0LlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSB3b3JkcyBvZiBgc3RyaW5nYC5cbiAqL1xuZnVuY3Rpb24gYXNjaWlXb3JkcyhzdHJpbmcpIHtcbiAgcmV0dXJuIHN0cmluZy5tYXRjaChyZUFzY2lpV29yZCkgfHwgW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IGFzY2lpV29yZHM7XG4iLCIvKiogVXNlZCB0byBkZXRlY3Qgc3RyaW5ncyB0aGF0IG5lZWQgYSBtb3JlIHJvYnVzdCByZWdleHAgdG8gbWF0Y2ggd29yZHMuICovXG52YXIgcmVIYXNVbmljb2RlV29yZCA9IC9bYS16XVtBLVpdfFtBLVpdezJ9W2Etel18WzAtOV1bYS16QS1aXXxbYS16QS1aXVswLTldfFteYS16QS1aMC05IF0vO1xuXG4vKipcbiAqIENoZWNrcyBpZiBgc3RyaW5nYCBjb250YWlucyBhIHdvcmQgY29tcG9zZWQgb2YgVW5pY29kZSBzeW1ib2xzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyaW5nIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBhIHdvcmQgaXMgZm91bmQsIGVsc2UgYGZhbHNlYC5cbiAqL1xuZnVuY3Rpb24gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSB7XG4gIHJldHVybiByZUhhc1VuaWNvZGVXb3JkLnRlc3Qoc3RyaW5nKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgaGFzVW5pY29kZVdvcmQ7XG4iLCIvKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2hhcmFjdGVyIGNsYXNzZXMuICovXG52YXIgcnNBc3RyYWxSYW5nZSA9ICdcXFxcdWQ4MDAtXFxcXHVkZmZmJyxcbiAgICByc0NvbWJvTWFya3NSYW5nZSA9ICdcXFxcdTAzMDAtXFxcXHUwMzZmJyxcbiAgICByZUNvbWJvSGFsZk1hcmtzUmFuZ2UgPSAnXFxcXHVmZTIwLVxcXFx1ZmUyZicsXG4gICAgcnNDb21ib1N5bWJvbHNSYW5nZSA9ICdcXFxcdTIwZDAtXFxcXHUyMGZmJyxcbiAgICByc0NvbWJvUmFuZ2UgPSByc0NvbWJvTWFya3NSYW5nZSArIHJlQ29tYm9IYWxmTWFya3NSYW5nZSArIHJzQ29tYm9TeW1ib2xzUmFuZ2UsXG4gICAgcnNEaW5nYmF0UmFuZ2UgPSAnXFxcXHUyNzAwLVxcXFx1MjdiZicsXG4gICAgcnNMb3dlclJhbmdlID0gJ2EtelxcXFx4ZGYtXFxcXHhmNlxcXFx4ZjgtXFxcXHhmZicsXG4gICAgcnNNYXRoT3BSYW5nZSA9ICdcXFxceGFjXFxcXHhiMVxcXFx4ZDdcXFxceGY3JyxcbiAgICByc05vbkNoYXJSYW5nZSA9ICdcXFxceDAwLVxcXFx4MmZcXFxceDNhLVxcXFx4NDBcXFxceDViLVxcXFx4NjBcXFxceDdiLVxcXFx4YmYnLFxuICAgIHJzUHVuY3R1YXRpb25SYW5nZSA9ICdcXFxcdTIwMDAtXFxcXHUyMDZmJyxcbiAgICByc1NwYWNlUmFuZ2UgPSAnIFxcXFx0XFxcXHgwYlxcXFxmXFxcXHhhMFxcXFx1ZmVmZlxcXFxuXFxcXHJcXFxcdTIwMjhcXFxcdTIwMjlcXFxcdTE2ODBcXFxcdTE4MGVcXFxcdTIwMDBcXFxcdTIwMDFcXFxcdTIwMDJcXFxcdTIwMDNcXFxcdTIwMDRcXFxcdTIwMDVcXFxcdTIwMDZcXFxcdTIwMDdcXFxcdTIwMDhcXFxcdTIwMDlcXFxcdTIwMGFcXFxcdTIwMmZcXFxcdTIwNWZcXFxcdTMwMDAnLFxuICAgIHJzVXBwZXJSYW5nZSA9ICdBLVpcXFxceGMwLVxcXFx4ZDZcXFxceGQ4LVxcXFx4ZGUnLFxuICAgIHJzVmFyUmFuZ2UgPSAnXFxcXHVmZTBlXFxcXHVmZTBmJyxcbiAgICByc0JyZWFrUmFuZ2UgPSByc01hdGhPcFJhbmdlICsgcnNOb25DaGFyUmFuZ2UgKyByc1B1bmN0dWF0aW9uUmFuZ2UgKyByc1NwYWNlUmFuZ2U7XG5cbi8qKiBVc2VkIHRvIGNvbXBvc2UgdW5pY29kZSBjYXB0dXJlIGdyb3Vwcy4gKi9cbnZhciByc0Fwb3MgPSBcIlsnXFx1MjAxOV1cIixcbiAgICByc0JyZWFrID0gJ1snICsgcnNCcmVha1JhbmdlICsgJ10nLFxuICAgIHJzQ29tYm8gPSAnWycgKyByc0NvbWJvUmFuZ2UgKyAnXScsXG4gICAgcnNEaWdpdHMgPSAnXFxcXGQrJyxcbiAgICByc0RpbmdiYXQgPSAnWycgKyByc0RpbmdiYXRSYW5nZSArICddJyxcbiAgICByc0xvd2VyID0gJ1snICsgcnNMb3dlclJhbmdlICsgJ10nLFxuICAgIHJzTWlzYyA9ICdbXicgKyByc0FzdHJhbFJhbmdlICsgcnNCcmVha1JhbmdlICsgcnNEaWdpdHMgKyByc0RpbmdiYXRSYW5nZSArIHJzTG93ZXJSYW5nZSArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc0ZpdHogPSAnXFxcXHVkODNjW1xcXFx1ZGZmYi1cXFxcdWRmZmZdJyxcbiAgICByc01vZGlmaWVyID0gJyg/OicgKyByc0NvbWJvICsgJ3wnICsgcnNGaXR6ICsgJyknLFxuICAgIHJzTm9uQXN0cmFsID0gJ1teJyArIHJzQXN0cmFsUmFuZ2UgKyAnXScsXG4gICAgcnNSZWdpb25hbCA9ICcoPzpcXFxcdWQ4M2NbXFxcXHVkZGU2LVxcXFx1ZGRmZl0pezJ9JyxcbiAgICByc1N1cnJQYWlyID0gJ1tcXFxcdWQ4MDAtXFxcXHVkYmZmXVtcXFxcdWRjMDAtXFxcXHVkZmZmXScsXG4gICAgcnNVcHBlciA9ICdbJyArIHJzVXBwZXJSYW5nZSArICddJyxcbiAgICByc1pXSiA9ICdcXFxcdTIwMGQnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgcmVnZXhlcy4gKi9cbnZhciByc01pc2NMb3dlciA9ICcoPzonICsgcnNMb3dlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc01pc2NVcHBlciA9ICcoPzonICsgcnNVcHBlciArICd8JyArIHJzTWlzYyArICcpJyxcbiAgICByc09wdENvbnRyTG93ZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpkfGxsfG18cmV8c3x0fHZlKSk/JyxcbiAgICByc09wdENvbnRyVXBwZXIgPSAnKD86JyArIHJzQXBvcyArICcoPzpEfExMfE18UkV8U3xUfFZFKSk/JyxcbiAgICByZU9wdE1vZCA9IHJzTW9kaWZpZXIgKyAnPycsXG4gICAgcnNPcHRWYXIgPSAnWycgKyByc1ZhclJhbmdlICsgJ10/JyxcbiAgICByc09wdEpvaW4gPSAnKD86JyArIHJzWldKICsgJyg/OicgKyBbcnNOb25Bc3RyYWwsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzT3B0VmFyICsgcmVPcHRNb2QgKyAnKSonLFxuICAgIHJzT3JkTG93ZXIgPSAnXFxcXGQqKD86MXN0fDJuZHwzcmR8KD8hWzEyM10pXFxcXGR0aCkoPz1cXFxcYnxbQS1aX10pJyxcbiAgICByc09yZFVwcGVyID0gJ1xcXFxkKig/OjFTVHwyTkR8M1JEfCg/IVsxMjNdKVxcXFxkVEgpKD89XFxcXGJ8W2Etel9dKScsXG4gICAgcnNTZXEgPSByc09wdFZhciArIHJlT3B0TW9kICsgcnNPcHRKb2luLFxuICAgIHJzRW1vamkgPSAnKD86JyArIFtyc0RpbmdiYXQsIHJzUmVnaW9uYWwsIHJzU3VyclBhaXJdLmpvaW4oJ3wnKSArICcpJyArIHJzU2VxO1xuXG4vKiogVXNlZCB0byBtYXRjaCBjb21wbGV4IG9yIGNvbXBvdW5kIHdvcmRzLiAqL1xudmFyIHJlVW5pY29kZVdvcmQgPSBSZWdFeHAoW1xuICByc1VwcGVyICsgJz8nICsgcnNMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIsICckJ10uam9pbignfCcpICsgJyknLFxuICByc01pc2NVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlciArICcoPz0nICsgW3JzQnJlYWssIHJzVXBwZXIgKyByc01pc2NMb3dlciwgJyQnXS5qb2luKCd8JykgKyAnKScsXG4gIHJzVXBwZXIgKyAnPycgKyByc01pc2NMb3dlciArICcrJyArIHJzT3B0Q29udHJMb3dlcixcbiAgcnNVcHBlciArICcrJyArIHJzT3B0Q29udHJVcHBlcixcbiAgcnNPcmRVcHBlcixcbiAgcnNPcmRMb3dlcixcbiAgcnNEaWdpdHMsXG4gIHJzRW1vamlcbl0uam9pbignfCcpLCAnZycpO1xuXG4vKipcbiAqIFNwbGl0cyBhIFVuaWNvZGUgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHByaXZhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBUaGUgc3RyaW5nIHRvIGluc3BlY3QuXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHdvcmRzIG9mIGBzdHJpbmdgLlxuICovXG5mdW5jdGlvbiB1bmljb2RlV29yZHMoc3RyaW5nKSB7XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocmVVbmljb2RlV29yZCkgfHwgW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHVuaWNvZGVXb3JkcztcbiIsImltcG9ydCBhc2NpaVdvcmRzIGZyb20gJy4vX2FzY2lpV29yZHMuanMnO1xuaW1wb3J0IGhhc1VuaWNvZGVXb3JkIGZyb20gJy4vX2hhc1VuaWNvZGVXb3JkLmpzJztcbmltcG9ydCB0b1N0cmluZyBmcm9tICcuL3RvU3RyaW5nLmpzJztcbmltcG9ydCB1bmljb2RlV29yZHMgZnJvbSAnLi9fdW5pY29kZVdvcmRzLmpzJztcblxuLyoqXG4gKiBTcGxpdHMgYHN0cmluZ2AgaW50byBhbiBhcnJheSBvZiBpdHMgd29yZHMuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gaW5zcGVjdC5cbiAqIEBwYXJhbSB7UmVnRXhwfHN0cmluZ30gW3BhdHRlcm5dIFRoZSBwYXR0ZXJuIHRvIG1hdGNoIHdvcmRzLlxuICogQHBhcmFtLSB7T2JqZWN0fSBbZ3VhcmRdIEVuYWJsZXMgdXNlIGFzIGFuIGl0ZXJhdGVlIGZvciBtZXRob2RzIGxpa2UgYF8ubWFwYC5cbiAqIEByZXR1cm5zIHtBcnJheX0gUmV0dXJucyB0aGUgd29yZHMgb2YgYHN0cmluZ2AuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJyk7XG4gKiAvLyA9PiBbJ2ZyZWQnLCAnYmFybmV5JywgJ3BlYmJsZXMnXVxuICpcbiAqIF8ud29yZHMoJ2ZyZWQsIGJhcm5leSwgJiBwZWJibGVzJywgL1teLCBdKy9nKTtcbiAqIC8vID0+IFsnZnJlZCcsICdiYXJuZXknLCAnJicsICdwZWJibGVzJ11cbiAqL1xuZnVuY3Rpb24gd29yZHMoc3RyaW5nLCBwYXR0ZXJuLCBndWFyZCkge1xuICBzdHJpbmcgPSB0b1N0cmluZyhzdHJpbmcpO1xuICBwYXR0ZXJuID0gZ3VhcmQgPyB1bmRlZmluZWQgOiBwYXR0ZXJuO1xuXG4gIGlmIChwYXR0ZXJuID09PSB1bmRlZmluZWQpIHtcbiAgICByZXR1cm4gaGFzVW5pY29kZVdvcmQoc3RyaW5nKSA/IHVuaWNvZGVXb3JkcyhzdHJpbmcpIDogYXNjaWlXb3JkcyhzdHJpbmcpO1xuICB9XG4gIHJldHVybiBzdHJpbmcubWF0Y2gocGF0dGVybikgfHwgW107XG59XG5cbmV4cG9ydCBkZWZhdWx0IHdvcmRzO1xuIiwiaW1wb3J0IGFycmF5UmVkdWNlIGZyb20gJy4vX2FycmF5UmVkdWNlLmpzJztcbmltcG9ydCBkZWJ1cnIgZnJvbSAnLi9kZWJ1cnIuanMnO1xuaW1wb3J0IHdvcmRzIGZyb20gJy4vd29yZHMuanMnO1xuXG4vKiogVXNlZCB0byBjb21wb3NlIHVuaWNvZGUgY2FwdHVyZSBncm91cHMuICovXG52YXIgcnNBcG9zID0gXCJbJ1xcdTIwMTldXCI7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGFwb3N0cm9waGVzLiAqL1xudmFyIHJlQXBvcyA9IFJlZ0V4cChyc0Fwb3MsICdnJyk7XG5cbi8qKlxuICogQ3JlYXRlcyBhIGZ1bmN0aW9uIGxpa2UgYF8uY2FtZWxDYXNlYC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgVGhlIGZ1bmN0aW9uIHRvIGNvbWJpbmUgZWFjaCB3b3JkLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY29tcG91bmRlciBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ29tcG91bmRlcihjYWxsYmFjaykge1xuICByZXR1cm4gZnVuY3Rpb24oc3RyaW5nKSB7XG4gICAgcmV0dXJuIGFycmF5UmVkdWNlKHdvcmRzKGRlYnVycihzdHJpbmcpLnJlcGxhY2UocmVBcG9zLCAnJykpLCBjYWxsYmFjaywgJycpO1xuICB9O1xufVxuXG5leHBvcnQgZGVmYXVsdCBjcmVhdGVDb21wb3VuZGVyO1xuIiwiaW1wb3J0IGNyZWF0ZUNvbXBvdW5kZXIgZnJvbSAnLi9fY3JlYXRlQ29tcG91bmRlci5qcyc7XG5cbi8qKlxuICogQ29udmVydHMgYHN0cmluZ2AgdG9cbiAqIFtzbmFrZSBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9TbmFrZV9jYXNlKS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgc25ha2UgY2FzZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLnNuYWtlQ2FzZSgnRm9vIEJhcicpO1xuICogLy8gPT4gJ2Zvb19iYXInXG4gKlxuICogXy5zbmFrZUNhc2UoJ2Zvb0JhcicpO1xuICogLy8gPT4gJ2Zvb19iYXInXG4gKlxuICogXy5zbmFrZUNhc2UoJy0tRk9PLUJBUi0tJyk7XG4gKiAvLyA9PiAnZm9vX2JhcidcbiAqL1xudmFyIHNuYWtlQ2FzZSA9IGNyZWF0ZUNvbXBvdW5kZXIoZnVuY3Rpb24ocmVzdWx0LCB3b3JkLCBpbmRleCkge1xuICByZXR1cm4gcmVzdWx0ICsgKGluZGV4ID8gJ18nIDogJycpICsgd29yZC50b0xvd2VyQ2FzZSgpO1xufSk7XG5cbmV4cG9ydCBkZWZhdWx0IHNuYWtlQ2FzZTtcbiIsIi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2xpY2VgIHdpdGhvdXQgYW4gaXRlcmF0ZWUgY2FsbCBndWFyZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIHNsaWNlLlxuICogQHBhcmFtIHtudW1iZXJ9IFtzdGFydD0wXSBUaGUgc3RhcnQgcG9zaXRpb24uXG4gKiBAcGFyYW0ge251bWJlcn0gW2VuZD1hcnJheS5sZW5ndGhdIFRoZSBlbmQgcG9zaXRpb24uXG4gKiBAcmV0dXJucyB7QXJyYXl9IFJldHVybnMgdGhlIHNsaWNlIG9mIGBhcnJheWAuXG4gKi9cbmZ1bmN0aW9uIGJhc2VTbGljZShhcnJheSwgc3RhcnQsIGVuZCkge1xuICB2YXIgaW5kZXggPSAtMSxcbiAgICAgIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcblxuICBpZiAoc3RhcnQgPCAwKSB7XG4gICAgc3RhcnQgPSAtc3RhcnQgPiBsZW5ndGggPyAwIDogKGxlbmd0aCArIHN0YXJ0KTtcbiAgfVxuICBlbmQgPSBlbmQgPiBsZW5ndGggPyBsZW5ndGggOiBlbmQ7XG4gIGlmIChlbmQgPCAwKSB7XG4gICAgZW5kICs9IGxlbmd0aDtcbiAgfVxuICBsZW5ndGggPSBzdGFydCA+IGVuZCA/IDAgOiAoKGVuZCAtIHN0YXJ0KSA+Pj4gMCk7XG4gIHN0YXJ0ID4+Pj0gMDtcblxuICB2YXIgcmVzdWx0ID0gQXJyYXkobGVuZ3RoKTtcbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICByZXN1bHRbaW5kZXhdID0gYXJyYXlbaW5kZXggKyBzdGFydF07XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYmFzZVNsaWNlO1xuIiwiaW1wb3J0IGJhc2VTbGljZSBmcm9tICcuL19iYXNlU2xpY2UuanMnO1xuXG4vKipcbiAqIENhc3RzIGBhcnJheWAgdG8gYSBzbGljZSBpZiBpdCdzIG5lZWRlZC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtBcnJheX0gYXJyYXkgVGhlIGFycmF5IHRvIGluc3BlY3QuXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgVGhlIHN0YXJ0IHBvc2l0aW9uLlxuICogQHBhcmFtIHtudW1iZXJ9IFtlbmQ9YXJyYXkubGVuZ3RoXSBUaGUgZW5kIHBvc2l0aW9uLlxuICogQHJldHVybnMge0FycmF5fSBSZXR1cm5zIHRoZSBjYXN0IHNsaWNlLlxuICovXG5mdW5jdGlvbiBjYXN0U2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpIHtcbiAgdmFyIGxlbmd0aCA9IGFycmF5Lmxlbmd0aDtcbiAgZW5kID0gZW5kID09PSB1bmRlZmluZWQgPyBsZW5ndGggOiBlbmQ7XG4gIHJldHVybiAoIXN0YXJ0ICYmIGVuZCA+PSBsZW5ndGgpID8gYXJyYXkgOiBiYXNlU2xpY2UoYXJyYXksIHN0YXJ0LCBlbmQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYXN0U2xpY2U7XG4iLCJpbXBvcnQgY2FzdFNsaWNlIGZyb20gJy4vX2Nhc3RTbGljZS5qcyc7XG5pbXBvcnQgaGFzVW5pY29kZSBmcm9tICcuL19oYXNVbmljb2RlLmpzJztcbmltcG9ydCBzdHJpbmdUb0FycmF5IGZyb20gJy4vX3N0cmluZ1RvQXJyYXkuanMnO1xuaW1wb3J0IHRvU3RyaW5nIGZyb20gJy4vdG9TdHJpbmcuanMnO1xuXG4vKipcbiAqIENyZWF0ZXMgYSBmdW5jdGlvbiBsaWtlIGBfLmxvd2VyRmlyc3RgLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gbWV0aG9kTmFtZSBUaGUgbmFtZSBvZiB0aGUgYFN0cmluZ2AgY2FzZSBtZXRob2QgdG8gdXNlLlxuICogQHJldHVybnMge0Z1bmN0aW9ufSBSZXR1cm5zIHRoZSBuZXcgY2FzZSBmdW5jdGlvbi5cbiAqL1xuZnVuY3Rpb24gY3JlYXRlQ2FzZUZpcnN0KG1ldGhvZE5hbWUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uKHN0cmluZykge1xuICAgIHN0cmluZyA9IHRvU3RyaW5nKHN0cmluZyk7XG5cbiAgICB2YXIgc3RyU3ltYm9scyA9IGhhc1VuaWNvZGUoc3RyaW5nKVxuICAgICAgPyBzdHJpbmdUb0FycmF5KHN0cmluZylcbiAgICAgIDogdW5kZWZpbmVkO1xuXG4gICAgdmFyIGNociA9IHN0clN5bWJvbHNcbiAgICAgID8gc3RyU3ltYm9sc1swXVxuICAgICAgOiBzdHJpbmcuY2hhckF0KDApO1xuXG4gICAgdmFyIHRyYWlsaW5nID0gc3RyU3ltYm9sc1xuICAgICAgPyBjYXN0U2xpY2Uoc3RyU3ltYm9scywgMSkuam9pbignJylcbiAgICAgIDogc3RyaW5nLnNsaWNlKDEpO1xuXG4gICAgcmV0dXJuIGNoclttZXRob2ROYW1lXSgpICsgdHJhaWxpbmc7XG4gIH07XG59XG5cbmV4cG9ydCBkZWZhdWx0IGNyZWF0ZUNhc2VGaXJzdDtcbiIsImltcG9ydCBjcmVhdGVDYXNlRmlyc3QgZnJvbSAnLi9fY3JlYXRlQ2FzZUZpcnN0LmpzJztcblxuLyoqXG4gKiBDb252ZXJ0cyB0aGUgZmlyc3QgY2hhcmFjdGVyIG9mIGBzdHJpbmdgIHRvIHVwcGVyIGNhc2UuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IFN0cmluZ1xuICogQHBhcmFtIHtzdHJpbmd9IFtzdHJpbmc9JyddIFRoZSBzdHJpbmcgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtzdHJpbmd9IFJldHVybnMgdGhlIGNvbnZlcnRlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udXBwZXJGaXJzdCgnZnJlZCcpO1xuICogLy8gPT4gJ0ZyZWQnXG4gKlxuICogXy51cHBlckZpcnN0KCdGUkVEJyk7XG4gKiAvLyA9PiAnRlJFRCdcbiAqL1xudmFyIHVwcGVyRmlyc3QgPSBjcmVhdGVDYXNlRmlyc3QoJ3RvVXBwZXJDYXNlJyk7XG5cbmV4cG9ydCBkZWZhdWx0IHVwcGVyRmlyc3Q7XG4iLCJpbXBvcnQgdG9TdHJpbmcgZnJvbSAnLi90b1N0cmluZy5qcyc7XG5pbXBvcnQgdXBwZXJGaXJzdCBmcm9tICcuL3VwcGVyRmlyc3QuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgYHN0cmluZ2AgdG8gdXBwZXIgY2FzZSBhbmQgdGhlIHJlbWFpbmluZ1xuICogdG8gbG93ZXIgY2FzZS5cbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDMuMC4wXG4gKiBAY2F0ZWdvcnkgU3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gW3N0cmluZz0nJ10gVGhlIHN0cmluZyB0byBjYXBpdGFsaXplLlxuICogQHJldHVybnMge3N0cmluZ30gUmV0dXJucyB0aGUgY2FwaXRhbGl6ZWQgc3RyaW5nLlxuICogQGV4YW1wbGVcbiAqXG4gKiBfLmNhcGl0YWxpemUoJ0ZSRUQnKTtcbiAqIC8vID0+ICdGcmVkJ1xuICovXG5mdW5jdGlvbiBjYXBpdGFsaXplKHN0cmluZykge1xuICByZXR1cm4gdXBwZXJGaXJzdCh0b1N0cmluZyhzdHJpbmcpLnRvTG93ZXJDYXNlKCkpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjYXBpdGFsaXplO1xuIiwiaW1wb3J0IGNhcGl0YWxpemUgZnJvbSAnLi9jYXBpdGFsaXplLmpzJztcbmltcG9ydCBjcmVhdGVDb21wb3VuZGVyIGZyb20gJy4vX2NyZWF0ZUNvbXBvdW5kZXIuanMnO1xuXG4vKipcbiAqIENvbnZlcnRzIGBzdHJpbmdgIHRvIFtjYW1lbCBjYXNlXShodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DYW1lbENhc2UpLlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgMy4wLjBcbiAqIEBjYXRlZ29yeSBTdHJpbmdcbiAqIEBwYXJhbSB7c3RyaW5nfSBbc3RyaW5nPScnXSBUaGUgc3RyaW5nIHRvIGNvbnZlcnQuXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBSZXR1cm5zIHRoZSBjYW1lbCBjYXNlZCBzdHJpbmcuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uY2FtZWxDYXNlKCdGb28gQmFyJyk7XG4gKiAvLyA9PiAnZm9vQmFyJ1xuICpcbiAqIF8uY2FtZWxDYXNlKCctLWZvby1iYXItLScpO1xuICogLy8gPT4gJ2Zvb0JhcidcbiAqXG4gKiBfLmNhbWVsQ2FzZSgnX19GT09fQkFSX18nKTtcbiAqIC8vID0+ICdmb29CYXInXG4gKi9cbnZhciBjYW1lbENhc2UgPSBjcmVhdGVDb21wb3VuZGVyKGZ1bmN0aW9uKHJlc3VsdCwgd29yZCwgaW5kZXgpIHtcbiAgd29yZCA9IHdvcmQudG9Mb3dlckNhc2UoKTtcbiAgcmV0dXJuIHJlc3VsdCArIChpbmRleCA/IGNhcGl0YWxpemUod29yZCkgOiB3b3JkKTtcbn0pO1xuXG5leHBvcnQgZGVmYXVsdCBjYW1lbENhc2U7XG4iLCJpbXBvcnQgYmFzZUFzc2lnblZhbHVlIGZyb20gJy4vX2Jhc2VBc3NpZ25WYWx1ZS5qcyc7XG5pbXBvcnQgYmFzZUZvck93biBmcm9tICcuL19iYXNlRm9yT3duLmpzJztcbmltcG9ydCBiYXNlSXRlcmF0ZWUgZnJvbSAnLi9fYmFzZUl0ZXJhdGVlLmpzJztcblxuLyoqXG4gKiBUaGUgb3Bwb3NpdGUgb2YgYF8ubWFwVmFsdWVzYDsgdGhpcyBtZXRob2QgY3JlYXRlcyBhbiBvYmplY3Qgd2l0aCB0aGVcbiAqIHNhbWUgdmFsdWVzIGFzIGBvYmplY3RgIGFuZCBrZXlzIGdlbmVyYXRlZCBieSBydW5uaW5nIGVhY2ggb3duIGVudW1lcmFibGVcbiAqIHN0cmluZyBrZXllZCBwcm9wZXJ0eSBvZiBgb2JqZWN0YCB0aHJ1IGBpdGVyYXRlZWAuIFRoZSBpdGVyYXRlZSBpcyBpbnZva2VkXG4gKiB3aXRoIHRocmVlIGFyZ3VtZW50czogKHZhbHVlLCBrZXksIG9iamVjdCkuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAzLjguMFxuICogQGNhdGVnb3J5IE9iamVjdFxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIGl0ZXJhdGUgb3Zlci5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtpdGVyYXRlZT1fLmlkZW50aXR5XSBUaGUgZnVuY3Rpb24gaW52b2tlZCBwZXIgaXRlcmF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyB0aGUgbmV3IG1hcHBlZCBvYmplY3QuXG4gKiBAc2VlIF8ubWFwVmFsdWVzXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8ubWFwS2V5cyh7ICdhJzogMSwgJ2InOiAyIH0sIGZ1bmN0aW9uKHZhbHVlLCBrZXkpIHtcbiAqICAgcmV0dXJuIGtleSArIHZhbHVlO1xuICogfSk7XG4gKiAvLyA9PiB7ICdhMSc6IDEsICdiMic6IDIgfVxuICovXG5mdW5jdGlvbiBtYXBLZXlzKG9iamVjdCwgaXRlcmF0ZWUpIHtcbiAgdmFyIHJlc3VsdCA9IHt9O1xuICBpdGVyYXRlZSA9IGJhc2VJdGVyYXRlZShpdGVyYXRlZSwgMyk7XG5cbiAgYmFzZUZvck93bihvYmplY3QsIGZ1bmN0aW9uKHZhbHVlLCBrZXksIG9iamVjdCkge1xuICAgIGJhc2VBc3NpZ25WYWx1ZShyZXN1bHQsIGl0ZXJhdGVlKHZhbHVlLCBrZXksIG9iamVjdCksIHZhbHVlKTtcbiAgfSk7XG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmV4cG9ydCBkZWZhdWx0IG1hcEtleXM7XG4iLCJpbXBvcnQgaGFzIGZyb20gXCJsb2Rhc2gtZXMvaGFzXCI7XG5pbXBvcnQgdG9wb3NvcnQgZnJvbSAndG9wb3NvcnQnO1xuaW1wb3J0IHsgc3BsaXQgfSBmcm9tICdwcm9wZXJ0eS1leHByJztcbmltcG9ydCBSZWYgZnJvbSAnLi4vUmVmZXJlbmNlJztcbmltcG9ydCBpc1NjaGVtYSBmcm9tICcuL2lzU2NoZW1hJztcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIHNvcnRGaWVsZHMoZmllbGRzLCBleGNsdWRlcykge1xuICBpZiAoZXhjbHVkZXMgPT09IHZvaWQgMCkge1xuICAgIGV4Y2x1ZGVzID0gW107XG4gIH1cblxuICB2YXIgZWRnZXMgPSBbXSxcbiAgICAgIG5vZGVzID0gW107XG5cbiAgZnVuY3Rpb24gYWRkTm9kZShkZXBQYXRoLCBrZXkpIHtcbiAgICB2YXIgbm9kZSA9IHNwbGl0KGRlcFBhdGgpWzBdO1xuICAgIGlmICghfm5vZGVzLmluZGV4T2Yobm9kZSkpIG5vZGVzLnB1c2gobm9kZSk7XG4gICAgaWYgKCF+ZXhjbHVkZXMuaW5kZXhPZihrZXkgKyBcIi1cIiArIG5vZGUpKSBlZGdlcy5wdXNoKFtrZXksIG5vZGVdKTtcbiAgfVxuXG4gIGZvciAodmFyIGtleSBpbiBmaWVsZHMpIHtcbiAgICBpZiAoaGFzKGZpZWxkcywga2V5KSkge1xuICAgICAgdmFyIHZhbHVlID0gZmllbGRzW2tleV07XG4gICAgICBpZiAoIX5ub2Rlcy5pbmRleE9mKGtleSkpIG5vZGVzLnB1c2goa2V5KTtcbiAgICAgIGlmIChSZWYuaXNSZWYodmFsdWUpICYmIHZhbHVlLmlzU2libGluZykgYWRkTm9kZSh2YWx1ZS5wYXRoLCBrZXkpO2Vsc2UgaWYgKGlzU2NoZW1hKHZhbHVlKSAmJiB2YWx1ZS5fZGVwcykgdmFsdWUuX2RlcHMuZm9yRWFjaChmdW5jdGlvbiAocGF0aCkge1xuICAgICAgICByZXR1cm4gYWRkTm9kZShwYXRoLCBrZXkpO1xuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHRvcG9zb3J0LmFycmF5KG5vZGVzLCBlZGdlcykucmV2ZXJzZSgpO1xufSIsImZ1bmN0aW9uIGZpbmRJbmRleChhcnIsIGVycikge1xuICB2YXIgaWR4ID0gSW5maW5pdHk7XG4gIGFyci5zb21lKGZ1bmN0aW9uIChrZXksIGlpKSB7XG4gICAgaWYgKGVyci5wYXRoLmluZGV4T2Yoa2V5KSAhPT0gLTEpIHtcbiAgICAgIGlkeCA9IGlpO1xuICAgICAgcmV0dXJuIHRydWU7XG4gICAgfVxuICB9KTtcbiAgcmV0dXJuIGlkeDtcbn1cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gc29ydEJ5S2V5T3JkZXIoZmllbGRzKSB7XG4gIHZhciBrZXlzID0gT2JqZWN0LmtleXMoZmllbGRzKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChhLCBiKSB7XG4gICAgcmV0dXJuIGZpbmRJbmRleChrZXlzLCBhKSAtIGZpbmRJbmRleChrZXlzLCBiKTtcbiAgfTtcbn0iLCJleHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBtYWtlUGF0aChzdHJpbmdzKSB7XG4gIGZvciAodmFyIF9sZW4gPSBhcmd1bWVudHMubGVuZ3RoLCB2YWx1ZXMgPSBuZXcgQXJyYXkoX2xlbiA+IDEgPyBfbGVuIC0gMSA6IDApLCBfa2V5ID0gMTsgX2tleSA8IF9sZW47IF9rZXkrKykge1xuICAgIHZhbHVlc1tfa2V5IC0gMV0gPSBhcmd1bWVudHNbX2tleV07XG4gIH1cblxuICB2YXIgcGF0aCA9IHN0cmluZ3MucmVkdWNlKGZ1bmN0aW9uIChzdHIsIG5leHQpIHtcbiAgICB2YXIgdmFsdWUgPSB2YWx1ZXMuc2hpZnQoKTtcbiAgICByZXR1cm4gc3RyICsgKHZhbHVlID09IG51bGwgPyAnJyA6IHZhbHVlKSArIG5leHQ7XG4gIH0pO1xuICByZXR1cm4gcGF0aC5yZXBsYWNlKC9eXFwuLywgJycpO1xufSIsImltcG9ydCBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcblxuZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MygpIHtcbiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UoW1wiXCIsIFwiW1xcXCJcIiwgXCJcXFwiXVwiXSk7XG5cbiAgX3RlbXBsYXRlT2JqZWN0MyA9IGZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDMoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdDIoKSB7XG4gIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKFtcIlwiLCBcIi5cIiwgXCJcIl0pO1xuXG4gIF90ZW1wbGF0ZU9iamVjdDIgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QyKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7XG4gIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKFtcIlwiLCBcIi5cIiwgXCJcIl0pO1xuXG4gIF90ZW1wbGF0ZU9iamVjdCA9IGZ1bmN0aW9uIF90ZW1wbGF0ZU9iamVjdCgpIHtcbiAgICByZXR1cm4gZGF0YTtcbiAgfTtcblxuICByZXR1cm4gZGF0YTtcbn1cblxuaW1wb3J0IGhhcyBmcm9tIFwibG9kYXNoLWVzL2hhc1wiO1xuaW1wb3J0IF9zbmFrZUNhc2UgZnJvbSBcImxvZGFzaC1lcy9zbmFrZUNhc2VcIjtcbmltcG9ydCBfY2FtZWxDYXNlIGZyb20gXCJsb2Rhc2gtZXMvY2FtZWxDYXNlXCI7XG5pbXBvcnQgbWFwS2V5cyBmcm9tIFwibG9kYXNoLWVzL21hcEtleXNcIjtcbmltcG9ydCBtYXBWYWx1ZXMgZnJvbSBcImxvZGFzaC1lcy9tYXBWYWx1ZXNcIjtcbmltcG9ydCB7IGdldHRlciB9IGZyb20gJ3Byb3BlcnR5LWV4cHInO1xuaW1wb3J0IE1peGVkU2NoZW1hIGZyb20gJy4vbWl4ZWQnO1xuaW1wb3J0IHsgb2JqZWN0IGFzIGxvY2FsZSB9IGZyb20gJy4vbG9jYWxlLmpzJztcbmltcG9ydCBzb3J0RmllbGRzIGZyb20gJy4vdXRpbC9zb3J0RmllbGRzJztcbmltcG9ydCBzb3J0QnlLZXlPcmRlciBmcm9tICcuL3V0aWwvc29ydEJ5S2V5T3JkZXInO1xuaW1wb3J0IGluaGVyaXRzIGZyb20gJy4vdXRpbC9pbmhlcml0cyc7XG5pbXBvcnQgbWFrZVBhdGggZnJvbSAnLi91dGlsL21ha2VQYXRoJztcbmltcG9ydCBydW5WYWxpZGF0aW9ucywgeyBwcm9wYWdhdGVFcnJvcnMgfSBmcm9tICcuL3V0aWwvcnVuVmFsaWRhdGlvbnMnO1xuaW1wb3J0IHsgU3luY2hyb25vdXNQcm9taXNlIH0gZnJvbSAnc3luY2hyb25vdXMtcHJvbWlzZSc7XG5cbnZhciBpc09iamVjdCA9IGZ1bmN0aW9uIGlzT2JqZWN0KG9iaikge1xuICByZXR1cm4gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nO1xufTtcblxudmFyIHByb21pc2UgPSBmdW5jdGlvbiBwcm9taXNlKHN5bmMpIHtcbiAgcmV0dXJuIHN5bmMgPyBTeW5jaHJvbm91c1Byb21pc2UgOiBQcm9taXNlO1xufTtcblxuZnVuY3Rpb24gdW5rbm93bihjdHgsIHZhbHVlKSB7XG4gIHZhciBrbm93biA9IE9iamVjdC5rZXlzKGN0eC5maWVsZHMpO1xuICByZXR1cm4gT2JqZWN0LmtleXModmFsdWUpLmZpbHRlcihmdW5jdGlvbiAoa2V5KSB7XG4gICAgcmV0dXJuIGtub3duLmluZGV4T2Yoa2V5KSA9PT0gLTE7XG4gIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBPYmplY3RTY2hlbWEoc3BlYykge1xuICB2YXIgX3RoaXMyID0gdGhpcztcblxuICBpZiAoISh0aGlzIGluc3RhbmNlb2YgT2JqZWN0U2NoZW1hKSkgcmV0dXJuIG5ldyBPYmplY3RTY2hlbWEoc3BlYyk7XG4gIE1peGVkU2NoZW1hLmNhbGwodGhpcywge1xuICAgIHR5cGU6ICdvYmplY3QnLFxuICAgIGRlZmF1bHQ6IGZ1bmN0aW9uIF9kZWZhdWx0KCkge1xuICAgICAgdmFyIF90aGlzID0gdGhpcztcblxuICAgICAgaWYgKCF0aGlzLl9ub2Rlcy5sZW5ndGgpIHJldHVybiB1bmRlZmluZWQ7XG4gICAgICB2YXIgZGZ0ID0ge307XG5cbiAgICAgIHRoaXMuX25vZGVzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICBkZnRba2V5XSA9IF90aGlzLmZpZWxkc1trZXldLmRlZmF1bHQgPyBfdGhpcy5maWVsZHNba2V5XS5kZWZhdWx0KCkgOiB1bmRlZmluZWQ7XG4gICAgICB9KTtcblxuICAgICAgcmV0dXJuIGRmdDtcbiAgICB9XG4gIH0pO1xuICB0aGlzLmZpZWxkcyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gIHRoaXMuX25vZGVzID0gW107XG4gIHRoaXMuX2V4Y2x1ZGVkRWRnZXMgPSBbXTtcbiAgdGhpcy53aXRoTXV0YXRpb24oZnVuY3Rpb24gKCkge1xuICAgIF90aGlzMi50cmFuc2Zvcm0oZnVuY3Rpb24gY29lcmNlKHZhbHVlKSB7XG4gICAgICBpZiAodHlwZW9mIHZhbHVlID09PSAnc3RyaW5nJykge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHZhbHVlID0gSlNPTi5wYXJzZSh2YWx1ZSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgICAgIHZhbHVlID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5pc1R5cGUodmFsdWUpKSByZXR1cm4gdmFsdWU7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9KTtcblxuICAgIGlmIChzcGVjKSB7XG4gICAgICBfdGhpczIuc2hhcGUoc3BlYyk7XG4gICAgfVxuICB9KTtcbn1cbmluaGVyaXRzKE9iamVjdFNjaGVtYSwgTWl4ZWRTY2hlbWEsIHtcbiAgX3R5cGVDaGVjazogZnVuY3Rpb24gX3R5cGVDaGVjayh2YWx1ZSkge1xuICAgIHJldHVybiBpc09iamVjdCh2YWx1ZSkgfHwgdHlwZW9mIHZhbHVlID09PSAnZnVuY3Rpb24nO1xuICB9LFxuICBfY2FzdDogZnVuY3Rpb24gX2Nhc3QoX3ZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIHZhbHVlID0gTWl4ZWRTY2hlbWEucHJvdG90eXBlLl9jYXN0LmNhbGwodGhpcywgX3ZhbHVlLCBvcHRpb25zKTsgLy9zaG91bGQgaWdub3JlIG51bGxzIGhlcmVcblxuXG4gICAgaWYgKHZhbHVlID09PSB1bmRlZmluZWQpIHJldHVybiB0aGlzLmRlZmF1bHQoKTtcbiAgICBpZiAoIXRoaXMuX3R5cGVDaGVjayh2YWx1ZSkpIHJldHVybiB2YWx1ZTtcbiAgICB2YXIgZmllbGRzID0gdGhpcy5maWVsZHM7XG4gICAgdmFyIHN0cmlwID0gdGhpcy5fb3B0aW9uKCdzdHJpcFVua25vd24nLCBvcHRpb25zKSA9PT0gdHJ1ZTtcblxuICAgIHZhciBwcm9wcyA9IHRoaXMuX25vZGVzLmNvbmNhdChPYmplY3Qua2V5cyh2YWx1ZSkuZmlsdGVyKGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gX3RoaXMzLl9ub2Rlcy5pbmRleE9mKHYpID09PSAtMTtcbiAgICB9KSk7XG5cbiAgICB2YXIgaW50ZXJtZWRpYXRlVmFsdWUgPSB7fTsgLy8gaXMgZmlsbGVkIGR1cmluZyB0aGUgdHJhbnNmb3JtIGJlbG93XG5cbiAgICB2YXIgaW5uZXJPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgIHBhcmVudDogaW50ZXJtZWRpYXRlVmFsdWUsXG4gICAgICBfX3ZhbGlkYXRpbmc6IG9wdGlvbnMuX192YWxpZGF0aW5nIHx8IGZhbHNlXG4gICAgfSk7XG5cbiAgICB2YXIgaXNDaGFuZ2VkID0gZmFsc2U7XG4gICAgcHJvcHMuZm9yRWFjaChmdW5jdGlvbiAocHJvcCkge1xuICAgICAgdmFyIGZpZWxkID0gZmllbGRzW3Byb3BdO1xuICAgICAgdmFyIGV4aXN0cyA9IGhhcyh2YWx1ZSwgcHJvcCk7XG5cbiAgICAgIGlmIChmaWVsZCkge1xuICAgICAgICB2YXIgZmllbGRWYWx1ZTtcbiAgICAgICAgdmFyIHN0cmljdCA9IGZpZWxkLl9vcHRpb25zICYmIGZpZWxkLl9vcHRpb25zLnN0cmljdDsgLy8gc2FmZSB0byBtdXRhdGUgc2luY2UgdGhpcyBpcyBmaXJlZCBpbiBzZXF1ZW5jZVxuXG4gICAgICAgIGlubmVyT3B0aW9ucy5wYXRoID0gbWFrZVBhdGgoX3RlbXBsYXRlT2JqZWN0KCksIG9wdGlvbnMucGF0aCwgcHJvcCk7XG4gICAgICAgIGlubmVyT3B0aW9ucy52YWx1ZSA9IHZhbHVlW3Byb3BdO1xuICAgICAgICBmaWVsZCA9IGZpZWxkLnJlc29sdmUoaW5uZXJPcHRpb25zKTtcblxuICAgICAgICBpZiAoZmllbGQuX3N0cmlwID09PSB0cnVlKSB7XG4gICAgICAgICAgaXNDaGFuZ2VkID0gaXNDaGFuZ2VkIHx8IHByb3AgaW4gdmFsdWU7XG4gICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgZmllbGRWYWx1ZSA9ICFvcHRpb25zLl9fdmFsaWRhdGluZyB8fCAhc3RyaWN0ID8gZmllbGQuY2FzdCh2YWx1ZVtwcm9wXSwgaW5uZXJPcHRpb25zKSA6IHZhbHVlW3Byb3BdO1xuICAgICAgICBpZiAoZmllbGRWYWx1ZSAhPT0gdW5kZWZpbmVkKSBpbnRlcm1lZGlhdGVWYWx1ZVtwcm9wXSA9IGZpZWxkVmFsdWU7XG4gICAgICB9IGVsc2UgaWYgKGV4aXN0cyAmJiAhc3RyaXApIGludGVybWVkaWF0ZVZhbHVlW3Byb3BdID0gdmFsdWVbcHJvcF07XG5cbiAgICAgIGlmIChpbnRlcm1lZGlhdGVWYWx1ZVtwcm9wXSAhPT0gdmFsdWVbcHJvcF0pIGlzQ2hhbmdlZCA9IHRydWU7XG4gICAgfSk7XG4gICAgcmV0dXJuIGlzQ2hhbmdlZCA/IGludGVybWVkaWF0ZVZhbHVlIDogdmFsdWU7XG4gIH0sXG4gIF92YWxpZGF0ZTogZnVuY3Rpb24gX3ZhbGlkYXRlKF92YWx1ZSwgb3B0cykge1xuICAgIHZhciBfdGhpczQgPSB0aGlzO1xuXG4gICAgaWYgKG9wdHMgPT09IHZvaWQgMCkge1xuICAgICAgb3B0cyA9IHt9O1xuICAgIH1cblxuICAgIHZhciBlbmRFYXJseSwgcmVjdXJzaXZlO1xuICAgIHZhciBzeW5jID0gb3B0cy5zeW5jO1xuICAgIHZhciBlcnJvcnMgPSBbXTtcbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IG9wdHMub3JpZ2luYWxWYWx1ZSAhPSBudWxsID8gb3B0cy5vcmlnaW5hbFZhbHVlIDogX3ZhbHVlO1xuICAgIHZhciBmcm9tID0gW3tcbiAgICAgIHNjaGVtYTogdGhpcyxcbiAgICAgIHZhbHVlOiBvcmlnaW5hbFZhbHVlXG4gICAgfV0uY29uY2F0KG9wdHMuZnJvbSB8fCBbXSk7XG4gICAgZW5kRWFybHkgPSB0aGlzLl9vcHRpb24oJ2Fib3J0RWFybHknLCBvcHRzKTtcbiAgICByZWN1cnNpdmUgPSB0aGlzLl9vcHRpb24oJ3JlY3Vyc2l2ZScsIG9wdHMpO1xuICAgIG9wdHMgPSBfZXh0ZW5kcyh7fSwgb3B0cywge1xuICAgICAgX192YWxpZGF0aW5nOiB0cnVlLFxuICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZSxcbiAgICAgIGZyb206IGZyb21cbiAgICB9KTtcbiAgICByZXR1cm4gTWl4ZWRTY2hlbWEucHJvdG90eXBlLl92YWxpZGF0ZS5jYWxsKHRoaXMsIF92YWx1ZSwgb3B0cykuY2F0Y2gocHJvcGFnYXRlRXJyb3JzKGVuZEVhcmx5LCBlcnJvcnMpKS50aGVuKGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgaWYgKCFyZWN1cnNpdmUgfHwgIWlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgICAvLyBvbmx5IGl0ZXJhdGUgdGhvdWdoIGFjdHVhbCBvYmplY3RzXG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoKSB0aHJvdyBlcnJvcnNbMF07XG4gICAgICAgIHJldHVybiB2YWx1ZTtcbiAgICAgIH1cblxuICAgICAgZnJvbSA9IG9yaWdpbmFsVmFsdWUgPyBbXS5jb25jYXQoZnJvbSkgOiBbe1xuICAgICAgICBzY2hlbWE6IF90aGlzNCxcbiAgICAgICAgdmFsdWU6IG9yaWdpbmFsVmFsdWUgfHwgdmFsdWVcbiAgICAgIH1dLmNvbmNhdChvcHRzLmZyb20gfHwgW10pO1xuICAgICAgb3JpZ2luYWxWYWx1ZSA9IG9yaWdpbmFsVmFsdWUgfHwgdmFsdWU7XG5cbiAgICAgIHZhciB2YWxpZGF0aW9ucyA9IF90aGlzNC5fbm9kZXMubWFwKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgICAgdmFyIHBhdGggPSBrZXkuaW5kZXhPZignLicpID09PSAtMSA/IG1ha2VQYXRoKF90ZW1wbGF0ZU9iamVjdDIoKSwgb3B0cy5wYXRoLCBrZXkpIDogbWFrZVBhdGgoX3RlbXBsYXRlT2JqZWN0MygpLCBvcHRzLnBhdGgsIGtleSk7XG4gICAgICAgIHZhciBmaWVsZCA9IF90aGlzNC5maWVsZHNba2V5XTtcblxuICAgICAgICB2YXIgaW5uZXJPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdHMsIHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIGZyb206IGZyb20sXG4gICAgICAgICAgcGFyZW50OiB2YWx1ZSxcbiAgICAgICAgICBvcmlnaW5hbFZhbHVlOiBvcmlnaW5hbFZhbHVlW2tleV1cbiAgICAgICAgfSk7XG5cbiAgICAgICAgaWYgKGZpZWxkICYmIGZpZWxkLnZhbGlkYXRlKSB7XG4gICAgICAgICAgLy8gaW5uZXIgZmllbGRzIGFyZSBhbHdheXMgc3RyaWN0OlxuICAgICAgICAgIC8vIDEuIHRoaXMgaXNuJ3Qgc3RyaWN0IHNvIHRoZSBjYXN0aW5nIHdpbGwgYWxzbyBoYXZlIGNhc3QgaW5uZXIgdmFsdWVzXG4gICAgICAgICAgLy8gMi4gdGhpcyBpcyBzdHJpY3QgaW4gd2hpY2ggY2FzZSB0aGUgbmVzdGVkIHZhbHVlcyB3ZXJlbid0IGNhc3QgZWl0aGVyXG4gICAgICAgICAgaW5uZXJPcHRpb25zLnN0cmljdCA9IHRydWU7XG4gICAgICAgICAgcmV0dXJuIGZpZWxkLnZhbGlkYXRlKHZhbHVlW2tleV0sIGlubmVyT3B0aW9ucyk7XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gcHJvbWlzZShzeW5jKS5yZXNvbHZlKHRydWUpO1xuICAgICAgfSk7XG5cbiAgICAgIHJldHVybiBydW5WYWxpZGF0aW9ucyh7XG4gICAgICAgIHN5bmM6IHN5bmMsXG4gICAgICAgIHZhbGlkYXRpb25zOiB2YWxpZGF0aW9ucyxcbiAgICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgICBlcnJvcnM6IGVycm9ycyxcbiAgICAgICAgZW5kRWFybHk6IGVuZEVhcmx5LFxuICAgICAgICBwYXRoOiBvcHRzLnBhdGgsXG4gICAgICAgIHNvcnQ6IHNvcnRCeUtleU9yZGVyKF90aGlzNC5maWVsZHMpXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgY29uY2F0OiBmdW5jdGlvbiBjb25jYXQoc2NoZW1hKSB7XG4gICAgdmFyIG5leHQgPSBNaXhlZFNjaGVtYS5wcm90b3R5cGUuY29uY2F0LmNhbGwodGhpcywgc2NoZW1hKTtcbiAgICBuZXh0Ll9ub2RlcyA9IHNvcnRGaWVsZHMobmV4dC5maWVsZHMsIG5leHQuX2V4Y2x1ZGVkRWRnZXMpO1xuICAgIHJldHVybiBuZXh0O1xuICB9LFxuICBzaGFwZTogZnVuY3Rpb24gc2hhcGUoc2NoZW1hLCBleGNsdWRlcykge1xuICAgIGlmIChleGNsdWRlcyA9PT0gdm9pZCAwKSB7XG4gICAgICBleGNsdWRlcyA9IFtdO1xuICAgIH1cblxuICAgIHZhciBuZXh0ID0gdGhpcy5jbG9uZSgpO1xuXG4gICAgdmFyIGZpZWxkcyA9IF9leHRlbmRzKG5leHQuZmllbGRzLCBzY2hlbWEpO1xuXG4gICAgbmV4dC5maWVsZHMgPSBmaWVsZHM7XG5cbiAgICBpZiAoZXhjbHVkZXMubGVuZ3RoKSB7XG4gICAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhjbHVkZXNbMF0pKSBleGNsdWRlcyA9IFtleGNsdWRlc107XG4gICAgICB2YXIga2V5cyA9IGV4Y2x1ZGVzLm1hcChmdW5jdGlvbiAoX3JlZikge1xuICAgICAgICB2YXIgZmlyc3QgPSBfcmVmWzBdLFxuICAgICAgICAgICAgc2Vjb25kID0gX3JlZlsxXTtcbiAgICAgICAgcmV0dXJuIGZpcnN0ICsgXCItXCIgKyBzZWNvbmQ7XG4gICAgICB9KTtcbiAgICAgIG5leHQuX2V4Y2x1ZGVkRWRnZXMgPSBuZXh0Ll9leGNsdWRlZEVkZ2VzLmNvbmNhdChrZXlzKTtcbiAgICB9XG5cbiAgICBuZXh0Ll9ub2RlcyA9IHNvcnRGaWVsZHMoZmllbGRzLCBuZXh0Ll9leGNsdWRlZEVkZ2VzKTtcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgZnJvbTogZnVuY3Rpb24gZnJvbShfZnJvbSwgdG8sIGFsaWFzKSB7XG4gICAgdmFyIGZyb21HZXR0ZXIgPSBnZXR0ZXIoX2Zyb20sIHRydWUpO1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAob2JqKSB7XG4gICAgICBpZiAob2JqID09IG51bGwpIHJldHVybiBvYmo7XG4gICAgICB2YXIgbmV3T2JqID0gb2JqO1xuXG4gICAgICBpZiAoaGFzKG9iaiwgX2Zyb20pKSB7XG4gICAgICAgIG5ld09iaiA9IF9leHRlbmRzKHt9LCBvYmopO1xuICAgICAgICBpZiAoIWFsaWFzKSBkZWxldGUgbmV3T2JqW19mcm9tXTtcbiAgICAgICAgbmV3T2JqW3RvXSA9IGZyb21HZXR0ZXIob2JqKTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIG5ld09iajtcbiAgICB9KTtcbiAgfSxcbiAgbm9Vbmtub3duOiBmdW5jdGlvbiBub1Vua25vd24obm9BbGxvdywgbWVzc2FnZSkge1xuICAgIGlmIChub0FsbG93ID09PSB2b2lkIDApIHtcbiAgICAgIG5vQWxsb3cgPSB0cnVlO1xuICAgIH1cblxuICAgIGlmIChtZXNzYWdlID09PSB2b2lkIDApIHtcbiAgICAgIG1lc3NhZ2UgPSBsb2NhbGUubm9Vbmtub3duO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygbm9BbGxvdyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIG1lc3NhZ2UgPSBub0FsbG93O1xuICAgICAgbm9BbGxvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgdmFyIG5leHQgPSB0aGlzLnRlc3Qoe1xuICAgICAgbmFtZTogJ25vVW5rbm93bicsXG4gICAgICBleGNsdXNpdmU6IHRydWUsXG4gICAgICBtZXNzYWdlOiBtZXNzYWdlLFxuICAgICAgdGVzdDogZnVuY3Rpb24gdGVzdCh2YWx1ZSkge1xuICAgICAgICBpZiAodmFsdWUgPT0gbnVsbCkgcmV0dXJuIHRydWU7XG4gICAgICAgIHZhciB1bmtub3duS2V5cyA9IHVua25vd24odGhpcy5zY2hlbWEsIHZhbHVlKTtcbiAgICAgICAgcmV0dXJuICFub0FsbG93IHx8IHVua25vd25LZXlzLmxlbmd0aCA9PT0gMCB8fCB0aGlzLmNyZWF0ZUVycm9yKHtcbiAgICAgICAgICBwYXJhbXM6IHtcbiAgICAgICAgICAgIHVua25vd246IHVua25vd25LZXlzLmpvaW4oJywgJylcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgIH0pO1xuICAgIG5leHQuX29wdGlvbnMuc3RyaXBVbmtub3duID0gbm9BbGxvdztcbiAgICByZXR1cm4gbmV4dDtcbiAgfSxcbiAgdW5rbm93bjogZnVuY3Rpb24gdW5rbm93bihhbGxvdywgbWVzc2FnZSkge1xuICAgIGlmIChhbGxvdyA9PT0gdm9pZCAwKSB7XG4gICAgICBhbGxvdyA9IHRydWU7XG4gICAgfVxuXG4gICAgaWYgKG1lc3NhZ2UgPT09IHZvaWQgMCkge1xuICAgICAgbWVzc2FnZSA9IGxvY2FsZS5ub1Vua25vd247XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXMubm9Vbmtub3duKCFhbGxvdywgbWVzc2FnZSk7XG4gIH0sXG4gIHRyYW5zZm9ybUtleXM6IGZ1bmN0aW9uIHRyYW5zZm9ybUtleXMoZm4pIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKG9iaikge1xuICAgICAgcmV0dXJuIG9iaiAmJiBtYXBLZXlzKG9iaiwgZnVuY3Rpb24gKF8sIGtleSkge1xuICAgICAgICByZXR1cm4gZm4oa2V5KTtcbiAgICAgIH0pO1xuICAgIH0pO1xuICB9LFxuICBjYW1lbENhc2U6IGZ1bmN0aW9uIGNhbWVsQ2FzZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1LZXlzKF9jYW1lbENhc2UpO1xuICB9LFxuICBzbmFrZUNhc2U6IGZ1bmN0aW9uIHNuYWtlQ2FzZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1LZXlzKF9zbmFrZUNhc2UpO1xuICB9LFxuICBjb25zdGFudENhc2U6IGZ1bmN0aW9uIGNvbnN0YW50Q2FzZSgpIHtcbiAgICByZXR1cm4gdGhpcy50cmFuc2Zvcm1LZXlzKGZ1bmN0aW9uIChrZXkpIHtcbiAgICAgIHJldHVybiBfc25ha2VDYXNlKGtleSkudG9VcHBlckNhc2UoKTtcbiAgICB9KTtcbiAgfSxcbiAgZGVzY3JpYmU6IGZ1bmN0aW9uIGRlc2NyaWJlKCkge1xuICAgIHZhciBiYXNlID0gTWl4ZWRTY2hlbWEucHJvdG90eXBlLmRlc2NyaWJlLmNhbGwodGhpcyk7XG4gICAgYmFzZS5maWVsZHMgPSBtYXBWYWx1ZXModGhpcy5maWVsZHMsIGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgcmV0dXJuIHZhbHVlLmRlc2NyaWJlKCk7XG4gICAgfSk7XG4gICAgcmV0dXJuIGJhc2U7XG4gIH1cbn0pOyIsImltcG9ydCBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlXCI7XG5pbXBvcnQgX2V4dGVuZHMgZnJvbSBcIkBiYWJlbC9ydW50aW1lL2hlbHBlcnMvZXNtL2V4dGVuZHNcIjtcblxuZnVuY3Rpb24gX3RlbXBsYXRlT2JqZWN0MigpIHtcbiAgdmFyIGRhdGEgPSBfdGFnZ2VkVGVtcGxhdGVMaXRlcmFsTG9vc2UoW1wiXCIsIFwiW1wiLCBcIl1cIl0pO1xuXG4gIF90ZW1wbGF0ZU9iamVjdDIgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QyKCkge1xuICAgIHJldHVybiBkYXRhO1xuICB9O1xuXG4gIHJldHVybiBkYXRhO1xufVxuXG5mdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7XG4gIHZhciBkYXRhID0gX3RhZ2dlZFRlbXBsYXRlTGl0ZXJhbExvb3NlKFtcIlwiLCBcIltcIiwgXCJdXCJdKTtcblxuICBfdGVtcGxhdGVPYmplY3QgPSBmdW5jdGlvbiBfdGVtcGxhdGVPYmplY3QoKSB7XG4gICAgcmV0dXJuIGRhdGE7XG4gIH07XG5cbiAgcmV0dXJuIGRhdGE7XG59XG5cbmltcG9ydCBpbmhlcml0cyBmcm9tICcuL3V0aWwvaW5oZXJpdHMnO1xuaW1wb3J0IGlzQWJzZW50IGZyb20gJy4vdXRpbC9pc0Fic2VudCc7XG5pbXBvcnQgaXNTY2hlbWEgZnJvbSAnLi91dGlsL2lzU2NoZW1hJztcbmltcG9ydCBtYWtlUGF0aCBmcm9tICcuL3V0aWwvbWFrZVBhdGgnO1xuaW1wb3J0IHByaW50VmFsdWUgZnJvbSAnLi91dGlsL3ByaW50VmFsdWUnO1xuaW1wb3J0IE1peGVkU2NoZW1hIGZyb20gJy4vbWl4ZWQnO1xuaW1wb3J0IHsgYXJyYXkgYXMgbG9jYWxlIH0gZnJvbSAnLi9sb2NhbGUnO1xuaW1wb3J0IHJ1blZhbGlkYXRpb25zLCB7IHByb3BhZ2F0ZUVycm9ycyB9IGZyb20gJy4vdXRpbC9ydW5WYWxpZGF0aW9ucyc7XG5leHBvcnQgZGVmYXVsdCBBcnJheVNjaGVtYTtcblxuZnVuY3Rpb24gQXJyYXlTY2hlbWEodHlwZSkge1xuICB2YXIgX3RoaXMgPSB0aGlzO1xuXG4gIGlmICghKHRoaXMgaW5zdGFuY2VvZiBBcnJheVNjaGVtYSkpIHJldHVybiBuZXcgQXJyYXlTY2hlbWEodHlwZSk7XG4gIE1peGVkU2NoZW1hLmNhbGwodGhpcywge1xuICAgIHR5cGU6ICdhcnJheSdcbiAgfSk7IC8vIGB1bmRlZmluZWRgIHNwZWNpZmljYWxseSBtZWFucyB1bmluaXRpYWxpemVkLCBhcyBvcHBvc2VkIHRvXG4gIC8vIFwibm8gc3VidHlwZVwiXG5cbiAgdGhpcy5fc3ViVHlwZSA9IHVuZGVmaW5lZDtcbiAgdGhpcy5pbm5lclR5cGUgPSB1bmRlZmluZWQ7XG4gIHRoaXMud2l0aE11dGF0aW9uKGZ1bmN0aW9uICgpIHtcbiAgICBfdGhpcy50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgaWYgKHR5cGVvZiB2YWx1ZXMgPT09ICdzdHJpbmcnKSB0cnkge1xuICAgICAgICB2YWx1ZXMgPSBKU09OLnBhcnNlKHZhbHVlcyk7XG4gICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgdmFsdWVzID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0aGlzLmlzVHlwZSh2YWx1ZXMpID8gdmFsdWVzIDogbnVsbDtcbiAgICB9KTtcblxuICAgIGlmICh0eXBlKSBfdGhpcy5vZih0eXBlKTtcbiAgfSk7XG59XG5cbmluaGVyaXRzKEFycmF5U2NoZW1hLCBNaXhlZFNjaGVtYSwge1xuICBfdHlwZUNoZWNrOiBmdW5jdGlvbiBfdHlwZUNoZWNrKHYpIHtcbiAgICByZXR1cm4gQXJyYXkuaXNBcnJheSh2KTtcbiAgfSxcbiAgX2Nhc3Q6IGZ1bmN0aW9uIF9jYXN0KF92YWx1ZSwgX29wdHMpIHtcbiAgICB2YXIgX3RoaXMyID0gdGhpcztcblxuICAgIHZhciB2YWx1ZSA9IE1peGVkU2NoZW1hLnByb3RvdHlwZS5fY2FzdC5jYWxsKHRoaXMsIF92YWx1ZSwgX29wdHMpOyAvL3Nob3VsZCBpZ25vcmUgbnVsbHMgaGVyZVxuXG5cbiAgICBpZiAoIXRoaXMuX3R5cGVDaGVjayh2YWx1ZSkgfHwgIXRoaXMuaW5uZXJUeXBlKSByZXR1cm4gdmFsdWU7XG4gICAgdmFyIGlzQ2hhbmdlZCA9IGZhbHNlO1xuICAgIHZhciBjYXN0QXJyYXkgPSB2YWx1ZS5tYXAoZnVuY3Rpb24gKHYsIGlkeCkge1xuICAgICAgdmFyIGNhc3RFbGVtZW50ID0gX3RoaXMyLmlubmVyVHlwZS5jYXN0KHYsIF9leHRlbmRzKHt9LCBfb3B0cywge1xuICAgICAgICBwYXRoOiBtYWtlUGF0aChfdGVtcGxhdGVPYmplY3QoKSwgX29wdHMucGF0aCwgaWR4KVxuICAgICAgfSkpO1xuXG4gICAgICBpZiAoY2FzdEVsZW1lbnQgIT09IHYpIHtcbiAgICAgICAgaXNDaGFuZ2VkID0gdHJ1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGNhc3RFbGVtZW50O1xuICAgIH0pO1xuICAgIHJldHVybiBpc0NoYW5nZWQgPyBjYXN0QXJyYXkgOiB2YWx1ZTtcbiAgfSxcbiAgX3ZhbGlkYXRlOiBmdW5jdGlvbiBfdmFsaWRhdGUoX3ZhbHVlLCBvcHRpb25zKSB7XG4gICAgdmFyIF90aGlzMyA9IHRoaXM7XG5cbiAgICBpZiAob3B0aW9ucyA9PT0gdm9pZCAwKSB7XG4gICAgICBvcHRpb25zID0ge307XG4gICAgfVxuXG4gICAgdmFyIGVycm9ycyA9IFtdO1xuICAgIHZhciBzeW5jID0gb3B0aW9ucy5zeW5jO1xuICAgIHZhciBwYXRoID0gb3B0aW9ucy5wYXRoO1xuICAgIHZhciBpbm5lclR5cGUgPSB0aGlzLmlubmVyVHlwZTtcblxuICAgIHZhciBlbmRFYXJseSA9IHRoaXMuX29wdGlvbignYWJvcnRFYXJseScsIG9wdGlvbnMpO1xuXG4gICAgdmFyIHJlY3Vyc2l2ZSA9IHRoaXMuX29wdGlvbigncmVjdXJzaXZlJywgb3B0aW9ucyk7XG5cbiAgICB2YXIgb3JpZ2luYWxWYWx1ZSA9IG9wdGlvbnMub3JpZ2luYWxWYWx1ZSAhPSBudWxsID8gb3B0aW9ucy5vcmlnaW5hbFZhbHVlIDogX3ZhbHVlO1xuICAgIHJldHVybiBNaXhlZFNjaGVtYS5wcm90b3R5cGUuX3ZhbGlkYXRlLmNhbGwodGhpcywgX3ZhbHVlLCBvcHRpb25zKS5jYXRjaChwcm9wYWdhdGVFcnJvcnMoZW5kRWFybHksIGVycm9ycykpLnRoZW4oZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICBpZiAoIXJlY3Vyc2l2ZSB8fCAhaW5uZXJUeXBlIHx8ICFfdGhpczMuX3R5cGVDaGVjayh2YWx1ZSkpIHtcbiAgICAgICAgaWYgKGVycm9ycy5sZW5ndGgpIHRocm93IGVycm9yc1swXTtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgICAgfVxuXG4gICAgICBvcmlnaW5hbFZhbHVlID0gb3JpZ2luYWxWYWx1ZSB8fCB2YWx1ZTtcbiAgICAgIHZhciB2YWxpZGF0aW9ucyA9IHZhbHVlLm1hcChmdW5jdGlvbiAoaXRlbSwgaWR4KSB7XG4gICAgICAgIHZhciBwYXRoID0gbWFrZVBhdGgoX3RlbXBsYXRlT2JqZWN0MigpLCBvcHRpb25zLnBhdGgsIGlkeCk7IC8vIG9iamVjdC5fdmFsaWRhdGUgbm90ZSBmb3IgaXNTdHJpY3QgZXhwbGFuYXRpb25cblxuICAgICAgICB2YXIgaW5uZXJPcHRpb25zID0gX2V4dGVuZHMoe30sIG9wdGlvbnMsIHtcbiAgICAgICAgICBwYXRoOiBwYXRoLFxuICAgICAgICAgIHN0cmljdDogdHJ1ZSxcbiAgICAgICAgICBwYXJlbnQ6IHZhbHVlLFxuICAgICAgICAgIGluZGV4OiBpZHgsXG4gICAgICAgICAgb3JpZ2luYWxWYWx1ZTogb3JpZ2luYWxWYWx1ZVtpZHhdXG4gICAgICAgIH0pO1xuXG4gICAgICAgIGlmIChpbm5lclR5cGUudmFsaWRhdGUpIHJldHVybiBpbm5lclR5cGUudmFsaWRhdGUoaXRlbSwgaW5uZXJPcHRpb25zKTtcbiAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICB9KTtcbiAgICAgIHJldHVybiBydW5WYWxpZGF0aW9ucyh7XG4gICAgICAgIHN5bmM6IHN5bmMsXG4gICAgICAgIHBhdGg6IHBhdGgsXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgZXJyb3JzOiBlcnJvcnMsXG4gICAgICAgIGVuZEVhcmx5OiBlbmRFYXJseSxcbiAgICAgICAgdmFsaWRhdGlvbnM6IHZhbGlkYXRpb25zXG4gICAgICB9KTtcbiAgICB9KTtcbiAgfSxcbiAgX2lzUHJlc2VudDogZnVuY3Rpb24gX2lzUHJlc2VudCh2YWx1ZSkge1xuICAgIHJldHVybiBNaXhlZFNjaGVtYS5wcm90b3R5cGUuX2lzUHJlc2VudC5jYWxsKHRoaXMsIHZhbHVlKSAmJiB2YWx1ZS5sZW5ndGggPiAwO1xuICB9LFxuICBvZjogZnVuY3Rpb24gb2Yoc2NoZW1hKSB7XG4gICAgdmFyIG5leHQgPSB0aGlzLmNsb25lKCk7XG4gICAgaWYgKHNjaGVtYSAhPT0gZmFsc2UgJiYgIWlzU2NoZW1hKHNjaGVtYSkpIHRocm93IG5ldyBUeXBlRXJyb3IoJ2BhcnJheS5vZigpYCBzdWItc2NoZW1hIG11c3QgYmUgYSB2YWxpZCB5dXAgc2NoZW1hLCBvciBgZmFsc2VgIHRvIG5lZ2F0ZSBhIGN1cnJlbnQgc3ViLXNjaGVtYS4gJyArICdub3Q6ICcgKyBwcmludFZhbHVlKHNjaGVtYSkpO1xuICAgIG5leHQuX3N1YlR5cGUgPSBzY2hlbWE7XG4gICAgbmV4dC5pbm5lclR5cGUgPSBzY2hlbWE7XG4gICAgcmV0dXJuIG5leHQ7XG4gIH0sXG4gIG1pbjogZnVuY3Rpb24gbWluKF9taW4sIG1lc3NhZ2UpIHtcbiAgICBtZXNzYWdlID0gbWVzc2FnZSB8fCBsb2NhbGUubWluO1xuICAgIHJldHVybiB0aGlzLnRlc3Qoe1xuICAgICAgbWVzc2FnZTogbWVzc2FnZSxcbiAgICAgIG5hbWU6ICdtaW4nLFxuICAgICAgZXhjbHVzaXZlOiB0cnVlLFxuICAgICAgcGFyYW1zOiB7XG4gICAgICAgIG1pbjogX21pblxuICAgICAgfSxcbiAgICAgIHRlc3Q6IGZ1bmN0aW9uIHRlc3QodmFsdWUpIHtcbiAgICAgICAgcmV0dXJuIGlzQWJzZW50KHZhbHVlKSB8fCB2YWx1ZS5sZW5ndGggPj0gdGhpcy5yZXNvbHZlKF9taW4pO1xuICAgICAgfVxuICAgIH0pO1xuICB9LFxuICBtYXg6IGZ1bmN0aW9uIG1heChfbWF4LCBtZXNzYWdlKSB7XG4gICAgbWVzc2FnZSA9IG1lc3NhZ2UgfHwgbG9jYWxlLm1heDtcbiAgICByZXR1cm4gdGhpcy50ZXN0KHtcbiAgICAgIG1lc3NhZ2U6IG1lc3NhZ2UsXG4gICAgICBuYW1lOiAnbWF4JyxcbiAgICAgIGV4Y2x1c2l2ZTogdHJ1ZSxcbiAgICAgIHBhcmFtczoge1xuICAgICAgICBtYXg6IF9tYXhcbiAgICAgIH0sXG4gICAgICB0ZXN0OiBmdW5jdGlvbiB0ZXN0KHZhbHVlKSB7XG4gICAgICAgIHJldHVybiBpc0Fic2VudCh2YWx1ZSkgfHwgdmFsdWUubGVuZ3RoIDw9IHRoaXMucmVzb2x2ZShfbWF4KTtcbiAgICAgIH1cbiAgICB9KTtcbiAgfSxcbiAgZW5zdXJlOiBmdW5jdGlvbiBlbnN1cmUoKSB7XG4gICAgdmFyIF90aGlzNCA9IHRoaXM7XG5cbiAgICByZXR1cm4gdGhpcy5kZWZhdWx0KGZ1bmN0aW9uICgpIHtcbiAgICAgIHJldHVybiBbXTtcbiAgICB9KS50cmFuc2Zvcm0oZnVuY3Rpb24gKHZhbCwgb3JpZ2luYWwpIHtcbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdG8gcmV0dXJuIGBudWxsYCBmb3IgbnVsbGFibGUgc2NoZW1hXG4gICAgICBpZiAoX3RoaXM0Ll90eXBlQ2hlY2sodmFsKSkgcmV0dXJuIHZhbDtcbiAgICAgIHJldHVybiBvcmlnaW5hbCA9PSBudWxsID8gW10gOiBbXS5jb25jYXQob3JpZ2luYWwpO1xuICAgIH0pO1xuICB9LFxuICBjb21wYWN0OiBmdW5jdGlvbiBjb21wYWN0KHJlamVjdG9yKSB7XG4gICAgdmFyIHJlamVjdCA9ICFyZWplY3RvciA/IGZ1bmN0aW9uICh2KSB7XG4gICAgICByZXR1cm4gISF2O1xuICAgIH0gOiBmdW5jdGlvbiAodiwgaSwgYSkge1xuICAgICAgcmV0dXJuICFyZWplY3Rvcih2LCBpLCBhKTtcbiAgICB9O1xuICAgIHJldHVybiB0aGlzLnRyYW5zZm9ybShmdW5jdGlvbiAodmFsdWVzKSB7XG4gICAgICByZXR1cm4gdmFsdWVzICE9IG51bGwgPyB2YWx1ZXMuZmlsdGVyKHJlamVjdCkgOiB2YWx1ZXM7XG4gICAgfSk7XG4gIH0sXG4gIGRlc2NyaWJlOiBmdW5jdGlvbiBkZXNjcmliZSgpIHtcbiAgICB2YXIgYmFzZSA9IE1peGVkU2NoZW1hLnByb3RvdHlwZS5kZXNjcmliZS5jYWxsKHRoaXMpO1xuICAgIGlmICh0aGlzLmlubmVyVHlwZSkgYmFzZS5pbm5lclR5cGUgPSB0aGlzLmlubmVyVHlwZS5kZXNjcmliZSgpO1xuICAgIHJldHVybiBiYXNlO1xuICB9XG59KTsiLCJpbXBvcnQgaXNTY2hlbWEgZnJvbSAnLi91dGlsL2lzU2NoZW1hJztcblxudmFyIExhenkgPSAvKiNfX1BVUkVfXyovZnVuY3Rpb24gKCkge1xuICBmdW5jdGlvbiBMYXp5KG1hcEZuKSB7XG4gICAgdGhpcy5fcmVzb2x2ZSA9IGZ1bmN0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICAgICAgdmFyIHNjaGVtYSA9IG1hcEZuKHZhbHVlLCBvcHRpb25zKTtcbiAgICAgIGlmICghaXNTY2hlbWEoc2NoZW1hKSkgdGhyb3cgbmV3IFR5cGVFcnJvcignbGF6eSgpIGZ1bmN0aW9ucyBtdXN0IHJldHVybiBhIHZhbGlkIHNjaGVtYScpO1xuICAgICAgcmV0dXJuIHNjaGVtYS5yZXNvbHZlKG9wdGlvbnMpO1xuICAgIH07XG4gIH1cblxuICB2YXIgX3Byb3RvID0gTGF6eS5wcm90b3R5cGU7XG5cbiAgX3Byb3RvLnJlc29sdmUgPSBmdW5jdGlvbiByZXNvbHZlKG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZShvcHRpb25zLnZhbHVlLCBvcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8uY2FzdCA9IGZ1bmN0aW9uIGNhc3QodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZSh2YWx1ZSwgb3B0aW9ucykuY2FzdCh2YWx1ZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLnZhbGlkYXRlID0gZnVuY3Rpb24gdmFsaWRhdGUodmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZSh2YWx1ZSwgb3B0aW9ucykudmFsaWRhdGUodmFsdWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIF9wcm90by52YWxpZGF0ZVN5bmMgPSBmdW5jdGlvbiB2YWxpZGF0ZVN5bmModmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZSh2YWx1ZSwgb3B0aW9ucykudmFsaWRhdGVTeW5jKHZhbHVlLCBvcHRpb25zKTtcbiAgfTtcblxuICBfcHJvdG8udmFsaWRhdGVBdCA9IGZ1bmN0aW9uIHZhbGlkYXRlQXQocGF0aCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZSh2YWx1ZSwgb3B0aW9ucykudmFsaWRhdGVBdChwYXRoLCB2YWx1ZSwgb3B0aW9ucyk7XG4gIH07XG5cbiAgX3Byb3RvLnZhbGlkYXRlU3luY0F0ID0gZnVuY3Rpb24gdmFsaWRhdGVTeW5jQXQocGF0aCwgdmFsdWUsIG9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5fcmVzb2x2ZSh2YWx1ZSwgb3B0aW9ucykudmFsaWRhdGVTeW5jQXQocGF0aCwgdmFsdWUsIG9wdGlvbnMpO1xuICB9O1xuXG4gIHJldHVybiBMYXp5O1xufSgpO1xuXG5MYXp5LnByb3RvdHlwZS5fX2lzWXVwU2NoZW1hX18gPSB0cnVlO1xuZXhwb3J0IGRlZmF1bHQgTGF6eTsiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgcyBmcm9tICcuL2Nzcy9maWVsZHNEZXZpZGVyV3JhcHBlci5zY3NzJ1xuXG5cbmZ1bmN0aW9uIEZpZWxkc0RpdmlkZXJXcmFwcGVyKHByb3BzKSB7XG4gICAgXG4gICAgY29uc3Qge1xuICAgICAgICBjaGlsZHJlbixcbiAgICAgICAgaW5kZW50XG4gICAgfSA9IHByb3BzO1xuICAgIFxuICAgIGxldCBjbHMgPSAnJ1xuICAgIGlmIChpbmRlbnQgKiAxID09PSAyKSBjbHMgKz0gcy5pbmRlbnRfMlxuICAgIGlmIChpbmRlbnQgKiAxID09PSAzKSBjbHMgKz0gcy5pbmRlbnRfM1xuICAgIFxuICAgIHJldHVybiA8ZGl2IGNsYXNzTmFtZT17Y2xzfT57Y2hpbGRyZW59PC9kaXY+XG59XG5cbmV4cG9ydCBkZWZhdWx0IEZpZWxkc0RpdmlkZXJXcmFwcGVyIiwiaW1wb3J0IEZpZWxkc0RpdmlkZXJXcmFwcGVyIGZyb20gJy4vZmllbGRzRGl2aWRlcldyYXBwZXInXG5leHBvcnQgZGVmYXVsdCBGaWVsZHNEaXZpZGVyV3JhcHBlciIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEZvcm1paywgRm9ybSwgdXNlRmllbGQgfSBmcm9tICdmb3JtaWsnO1xuaW1wb3J0IEVycm9yIGZyb20gXCIuLi9lcnJvclwiO1xuaW1wb3J0ICcuL2Nzcy90ZXh0SW5wdXQuc2NzcydcblxuXG5mdW5jdGlvbiBUZXh0SW5wdXQoeyBsYWJlbCwgLi4ucHJvcHMgfSkge1xuICAgIFxuICAgIGNvbnN0IFtmaWVsZCwgbWV0YV0gPSB1c2VGaWVsZChwcm9wcyk7XG4gICAgXG4gICAgbGV0IFtsYWJlbEVsLCBpZF0gPSBjcmVhdGVMYWJlbChsYWJlbCk7XG4gICAgXG4gICAgbGV0IGNscyA9ICd0ZXh0LWlucHV0J1xuICAgIGlmKHByb3BzLnR5cGUgPT09ICdzZWFyY2gnKSBjbHMgKz0gJyB0ZXh0LWlucHV0LS1zZWFyY2gnXG4gICAgXG4gICAgXG4gICAgcmV0dXJuIDw+XG4gICAgICAgIHtsYWJlbEVsfVxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICAgIGNsYXNzTmFtZT17Y2xzfVxuICAgICAgICAgICAgey4uLmZpZWxkfVxuICAgICAgICAgICAgdHlwZT17cHJvcHMudHlwZX1cbiAgICAgICAgICAgIGlkPXtpZH1cbiAgICAgICAgICAgIHBsYWNlaG9sZGVyPXtwcm9wcy5wbGFjZWhvbGRlcn1cbiAgICAgICAgICAgIGF1dG9Db21wbGV0ZT17cHJvcHMuYXV0b0NvbXBsZXRlfVxuICAgICAgICAgICAgZGlzYWJsZWQ9e3Byb3BzLmRpc2FibGVkfVxuICAgICAgICAvPlxuICAgICAgICB7bWV0YS50b3VjaGVkICYmIG1ldGEuZXJyb3JcbiAgICAgICAgICAgID8gPEVycm9yIHRleHQ9e21ldGEuZXJyb3J9IGluZGVudD17MX0gLz5cbiAgICAgICAgICAgIDogbnVsbH1cbiAgICA8Lz5cbn1cblxuZnVuY3Rpb24gY3JlYXRlTGFiZWwobGFiZWwpIHtcbiAgICBpZighbGFiZWwpIHJldHVybiBbbnVsbCwgdW5kZWZpbmVkXVxuICAgIFxuICAgIGNvbnN0IHJhbmRvbVN0ciA9ICdrZXktJyArIE1hdGgucm91bmQoIChNYXRoLnJhbmRvbSgpICogMTAwMDApIClcbiAgICBcbiAgICBjb25zdCBsYWJlbEVsID0gPGxhYmVsIGNsYXNzTmFtZT0naW5wdXQtbGFiZWwnIGh0bWxGb3I9e3JhbmRvbVN0cn0+e2xhYmVsfTwvbGFiZWw+XG4gICAgXG4gICAgcmV0dXJuIFtsYWJlbEVsLCByYW5kb21TdHJdXG59XG5cblxuZXhwb3J0IGRlZmF1bHQgVGV4dElucHV0IiwiaW1wb3J0IFRleHRJbnB1dCBmcm9tICcuL3RleHRJbnB1dCdcbmV4cG9ydCBkZWZhdWx0IFRleHRJbnB1dCIsImltcG9ydCAqIGFzIFJlYWN0IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7XG4gIEZvcm1pa1Byb3BzLFxuICBHZW5lcmljRmllbGRIVE1MQXR0cmlidXRlcyxcbiAgRmllbGRNZXRhUHJvcHMsXG4gIEZpZWxkSGVscGVyUHJvcHMsXG4gIEZpZWxkSW5wdXRQcm9wcyxcbiAgRmllbGRWYWxpZGF0b3IsXG59IGZyb20gJy4vdHlwZXMnO1xuaW1wb3J0IHsgdXNlRm9ybWlrQ29udGV4dCB9IGZyb20gJy4vRm9ybWlrQ29udGV4dCc7XG5pbXBvcnQgeyBpc0Z1bmN0aW9uLCBpc0VtcHR5Q2hpbGRyZW4sIGlzT2JqZWN0IH0gZnJvbSAnLi91dGlscyc7XG5pbXBvcnQgaW52YXJpYW50IGZyb20gJ3Rpbnktd2FybmluZyc7XG5cbmV4cG9ydCBpbnRlcmZhY2UgRmllbGRQcm9wczxWID0gYW55LCBGb3JtVmFsdWVzID0gYW55PiB7XG4gIGZpZWxkOiBGaWVsZElucHV0UHJvcHM8Vj47XG4gIGZvcm06IEZvcm1pa1Byb3BzPEZvcm1WYWx1ZXM+OyAvLyBpZiBwcGwgd2FudCB0byByZXN0cmljdCB0aGlzIGZvciBhIGdpdmVuIGZvcm0sIGxldCB0aGVtLlxuICBtZXRhOiBGaWVsZE1ldGFQcm9wczxWPjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBGaWVsZENvbmZpZzxWID0gYW55PiB7XG4gIC8qKlxuICAgKiBGaWVsZCBjb21wb25lbnQgdG8gcmVuZGVyLiBDYW4gZWl0aGVyIGJlIGEgc3RyaW5nIGxpa2UgJ3NlbGVjdCcgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBjb21wb25lbnQ/OlxuICAgIHwgc3RyaW5nXG4gICAgfCBSZWFjdC5Db21wb25lbnRUeXBlPEZpZWxkUHJvcHM8Vj4+XG4gICAgfCBSZWFjdC5Db21wb25lbnRUeXBlXG4gICAgfCBSZWFjdC5Gb3J3YXJkUmVmRXhvdGljQ29tcG9uZW50PGFueT47XG5cbiAgLyoqXG4gICAqIENvbXBvbmVudCB0byByZW5kZXIuIENhbiBlaXRoZXIgYmUgYSBzdHJpbmcgZS5nLiAnc2VsZWN0JywgJ2lucHV0Jywgb3IgJ3RleHRhcmVhJywgb3IgYSBjb21wb25lbnQuXG4gICAqL1xuICBhcz86XG4gICAgfCBSZWFjdC5Db21wb25lbnRUeXBlPEZpZWxkUHJvcHM8Vj5bJ2ZpZWxkJ10+XG4gICAgfCBzdHJpbmdcbiAgICB8IFJlYWN0LkNvbXBvbmVudFR5cGVcbiAgICB8IFJlYWN0LkZvcndhcmRSZWZFeG90aWNDb21wb25lbnQ8YW55PjtcblxuICAvKipcbiAgICogUmVuZGVyIHByb3AgKHdvcmtzIGxpa2UgUmVhY3Qgcm91dGVyJ3MgPFJvdXRlIHJlbmRlcj17cHJvcHMgPT59IC8+KVxuICAgKiBAZGVwcmVjYXRlZFxuICAgKi9cbiAgcmVuZGVyPzogKHByb3BzOiBGaWVsZFByb3BzPFY+KSA9PiBSZWFjdC5SZWFjdE5vZGU7XG5cbiAgLyoqXG4gICAqIENoaWxkcmVuIHJlbmRlciBmdW5jdGlvbiA8RmllbGQgbmFtZT57cHJvcHMgPT4gLi4ufTwvRmllbGQ+KVxuICAgKi9cbiAgY2hpbGRyZW4/OiAoKHByb3BzOiBGaWVsZFByb3BzPFY+KSA9PiBSZWFjdC5SZWFjdE5vZGUpIHwgUmVhY3QuUmVhY3ROb2RlO1xuXG4gIC8qKlxuICAgKiBWYWxpZGF0ZSBhIHNpbmdsZSBmaWVsZCB2YWx1ZSBpbmRlcGVuZGVudGx5XG4gICAqL1xuICB2YWxpZGF0ZT86IEZpZWxkVmFsaWRhdG9yO1xuXG4gIC8qKlxuICAgKiBGaWVsZCBuYW1lXG4gICAqL1xuICBuYW1lOiBzdHJpbmc7XG5cbiAgLyoqIEhUTUwgaW5wdXQgdHlwZSAqL1xuICB0eXBlPzogc3RyaW5nO1xuXG4gIC8qKiBGaWVsZCB2YWx1ZSAqL1xuICB2YWx1ZT86IGFueTtcblxuICAvKiogSW5uZXIgcmVmICovXG4gIGlubmVyUmVmPzogKGluc3RhbmNlOiBhbnkpID0+IHZvaWQ7XG59XG5cbmV4cG9ydCB0eXBlIEZpZWxkQXR0cmlidXRlczxUPiA9IEdlbmVyaWNGaWVsZEhUTUxBdHRyaWJ1dGVzICZcbiAgRmllbGRDb25maWc8VD4gJlxuICBUICYgeyBuYW1lOiBzdHJpbmcgfTtcblxuZXhwb3J0IHR5cGUgRmllbGRIb29rQ29uZmlnPFQ+ID0gR2VuZXJpY0ZpZWxkSFRNTEF0dHJpYnV0ZXMgJiBGaWVsZENvbmZpZzxUPjtcblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUZpZWxkPFZhbCA9IGFueT4oXG4gIHByb3BzT3JGaWVsZE5hbWU6IHN0cmluZyB8IEZpZWxkSG9va0NvbmZpZzxWYWw+XG4pOiBbRmllbGRJbnB1dFByb3BzPFZhbD4sIEZpZWxkTWV0YVByb3BzPFZhbD4sIEZpZWxkSGVscGVyUHJvcHM8VmFsPl0ge1xuICBjb25zdCBmb3JtaWsgPSB1c2VGb3JtaWtDb250ZXh0KCk7XG4gIGNvbnN0IHtcbiAgICBnZXRGaWVsZFByb3BzLFxuICAgIGdldEZpZWxkTWV0YSxcbiAgICBnZXRGaWVsZEhlbHBlcnMsXG4gICAgcmVnaXN0ZXJGaWVsZCxcbiAgICB1bnJlZ2lzdGVyRmllbGQsXG4gIH0gPSBmb3JtaWs7XG5cbiAgY29uc3QgaXNBbk9iamVjdCA9IGlzT2JqZWN0KHByb3BzT3JGaWVsZE5hbWUpO1xuXG4gIC8vIE5vcm1hbGl6ZSBwcm9wc09yRmllbGROYW1lIHRvIEZpZWxkSG9va0NvbmZpZzxWYWw+XG4gIGNvbnN0IHByb3BzOiBGaWVsZEhvb2tDb25maWc8VmFsPiA9IGlzQW5PYmplY3RcbiAgICA/IChwcm9wc09yRmllbGROYW1lIGFzIEZpZWxkSG9va0NvbmZpZzxWYWw+KVxuICAgIDogeyBuYW1lOiBwcm9wc09yRmllbGROYW1lIGFzIHN0cmluZyB9O1xuXG4gIGNvbnN0IHsgbmFtZTogZmllbGROYW1lLCB2YWxpZGF0ZTogdmFsaWRhdGVGbiB9ID0gcHJvcHM7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoZmllbGROYW1lKSB7XG4gICAgICByZWdpc3RlckZpZWxkKGZpZWxkTmFtZSwge1xuICAgICAgICB2YWxpZGF0ZTogdmFsaWRhdGVGbixcbiAgICAgIH0pO1xuICAgIH1cbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgaWYgKGZpZWxkTmFtZSkge1xuICAgICAgICB1bnJlZ2lzdGVyRmllbGQoZmllbGROYW1lKTtcbiAgICAgIH1cbiAgICB9O1xuICB9LCBbcmVnaXN0ZXJGaWVsZCwgdW5yZWdpc3RlckZpZWxkLCBmaWVsZE5hbWUsIHZhbGlkYXRlRm5dKTtcblxuICBpZiAoX19ERVZfXykge1xuICAgIGludmFyaWFudChcbiAgICAgIGZvcm1payxcbiAgICAgICd1c2VGaWVsZCgpIC8gPEZpZWxkIC8+IG11c3QgYmUgdXNlZCB1bmRlcm5lYXRoIGEgPEZvcm1paz4gY29tcG9uZW50IG9yIHdpdGhGb3JtaWsoKSBoaWdoZXIgb3JkZXIgY29tcG9uZW50J1xuICAgICk7XG4gIH1cblxuICBpbnZhcmlhbnQoXG4gICAgZmllbGROYW1lLFxuICAgICdJbnZhbGlkIGZpZWxkIG5hbWUuIEVpdGhlciBwYXNzIGB1c2VGaWVsZGAgYSBzdHJpbmcgb3IgYW4gb2JqZWN0IGNvbnRhaW5pbmcgYSBgbmFtZWAga2V5LidcbiAgKTtcblxuICByZXR1cm4gW1xuICAgIGdldEZpZWxkUHJvcHMocHJvcHMpLFxuICAgIGdldEZpZWxkTWV0YShmaWVsZE5hbWUpLFxuICAgIGdldEZpZWxkSGVscGVycyhmaWVsZE5hbWUpLFxuICBdO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gRmllbGQoe1xuICB2YWxpZGF0ZSxcbiAgbmFtZSxcbiAgcmVuZGVyLFxuICBjaGlsZHJlbixcbiAgYXM6IGlzLCAvLyBgYXNgIGlzIHJlc2VydmVkIGluIHR5cGVzY3JpcHQgbG9sXG4gIGNvbXBvbmVudCxcbiAgLi4ucHJvcHNcbn06IEZpZWxkQXR0cmlidXRlczxhbnk+KSB7XG4gIGNvbnN0IHtcbiAgICB2YWxpZGF0ZTogX3ZhbGlkYXRlLFxuICAgIHZhbGlkYXRpb25TY2hlbWE6IF92YWxpZGF0aW9uU2NoZW1hLFxuXG4gICAgLi4uZm9ybWlrXG4gIH0gPSB1c2VGb3JtaWtDb250ZXh0KCk7XG5cbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICBpZiAoX19ERVZfXykge1xuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhcmVuZGVyLFxuICAgICAgICBgPEZpZWxkIHJlbmRlcj4gaGFzIGJlZW4gZGVwcmVjYXRlZCBhbmQgd2lsbCBiZSByZW1vdmVkIGluIGZ1dHVyZSB2ZXJzaW9ucyBvZiBGb3JtaWsuIFBsZWFzZSB1c2UgYSBjaGlsZCBjYWxsYmFjayBmdW5jdGlvbiBpbnN0ZWFkLiBUbyBnZXQgcmlkIG9mIHRoaXMgd2FybmluZywgcmVwbGFjZSA8RmllbGQgbmFtZT1cIiR7bmFtZX1cIiByZW5kZXI9eyh7ZmllbGQsIGZvcm19KSA9PiAuLi59IC8+IHdpdGggPEZpZWxkIG5hbWU9XCIke25hbWV9XCI+eyh7ZmllbGQsIGZvcm0sIG1ldGF9KSA9PiAuLi59PC9GaWVsZD5gXG4gICAgICApO1xuXG4gICAgICBpbnZhcmlhbnQoXG4gICAgICAgICEoaXMgJiYgY2hpbGRyZW4gJiYgaXNGdW5jdGlvbihjaGlsZHJlbikpLFxuICAgICAgICAnWW91IHNob3VsZCBub3QgdXNlIDxGaWVsZCBhcz4gYW5kIDxGaWVsZCBjaGlsZHJlbj4gYXMgYSBmdW5jdGlvbiBpbiB0aGUgc2FtZSA8RmllbGQ+IGNvbXBvbmVudDsgPEZpZWxkIGFzPiB3aWxsIGJlIGlnbm9yZWQuJ1xuICAgICAgKTtcblxuICAgICAgaW52YXJpYW50KFxuICAgICAgICAhKGNvbXBvbmVudCAmJiBjaGlsZHJlbiAmJiBpc0Z1bmN0aW9uKGNoaWxkcmVuKSksXG4gICAgICAgICdZb3Ugc2hvdWxkIG5vdCB1c2UgPEZpZWxkIGNvbXBvbmVudD4gYW5kIDxGaWVsZCBjaGlsZHJlbj4gYXMgYSBmdW5jdGlvbiBpbiB0aGUgc2FtZSA8RmllbGQ+IGNvbXBvbmVudDsgPEZpZWxkIGNvbXBvbmVudD4gd2lsbCBiZSBpZ25vcmVkLidcbiAgICAgICk7XG5cbiAgICAgIGludmFyaWFudChcbiAgICAgICAgIShyZW5kZXIgJiYgY2hpbGRyZW4gJiYgIWlzRW1wdHlDaGlsZHJlbihjaGlsZHJlbikpLFxuICAgICAgICAnWW91IHNob3VsZCBub3QgdXNlIDxGaWVsZCByZW5kZXI+IGFuZCA8RmllbGQgY2hpbGRyZW4+IGluIHRoZSBzYW1lIDxGaWVsZD4gY29tcG9uZW50OyA8RmllbGQgY2hpbGRyZW4+IHdpbGwgYmUgaWdub3JlZCdcbiAgICAgICk7XG4gICAgfVxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZVxuICB9LCBbXSk7XG5cbiAgLy8gUmVnaXN0ZXIgZmllbGQgYW5kIGZpZWxkLWxldmVsIHZhbGlkYXRpb24gd2l0aCBwYXJlbnQgPEZvcm1paz5cbiAgY29uc3QgeyByZWdpc3RlckZpZWxkLCB1bnJlZ2lzdGVyRmllbGQgfSA9IGZvcm1paztcbiAgUmVhY3QudXNlRWZmZWN0KCgpID0+IHtcbiAgICByZWdpc3RlckZpZWxkKG5hbWUsIHtcbiAgICAgIHZhbGlkYXRlOiB2YWxpZGF0ZSxcbiAgICB9KTtcbiAgICByZXR1cm4gKCkgPT4ge1xuICAgICAgdW5yZWdpc3RlckZpZWxkKG5hbWUpO1xuICAgIH07XG4gIH0sIFtyZWdpc3RlckZpZWxkLCB1bnJlZ2lzdGVyRmllbGQsIG5hbWUsIHZhbGlkYXRlXSk7XG4gIGNvbnN0IGZpZWxkID0gZm9ybWlrLmdldEZpZWxkUHJvcHMoeyBuYW1lLCAuLi5wcm9wcyB9KTtcbiAgY29uc3QgbWV0YSA9IGZvcm1pay5nZXRGaWVsZE1ldGEobmFtZSk7XG4gIGNvbnN0IGxlZ2FjeUJhZyA9IHsgZmllbGQsIGZvcm06IGZvcm1payB9O1xuXG4gIGlmIChyZW5kZXIpIHtcbiAgICByZXR1cm4gcmVuZGVyKHsgLi4ubGVnYWN5QmFnLCBtZXRhIH0pO1xuICB9XG5cbiAgaWYgKGlzRnVuY3Rpb24oY2hpbGRyZW4pKSB7XG4gICAgcmV0dXJuIGNoaWxkcmVuKHsgLi4ubGVnYWN5QmFnLCBtZXRhIH0pO1xuICB9XG5cbiAgaWYgKGNvbXBvbmVudCkge1xuICAgIC8vIFRoaXMgYmVoYXZpb3IgaXMgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGVhcmxpZXIgRm9ybWlrIDAuOSB0byAxLnhcbiAgICBpZiAodHlwZW9mIGNvbXBvbmVudCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIGNvbnN0IHsgaW5uZXJSZWYsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgICAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoXG4gICAgICAgIGNvbXBvbmVudCxcbiAgICAgICAgeyByZWY6IGlubmVyUmVmLCAuLi5maWVsZCwgLi4ucmVzdCB9LFxuICAgICAgICBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9XG4gICAgLy8gV2UgZG9uJ3QgcGFzcyBgbWV0YWAgZm9yIGJhY2t3YXJkcyBjb21wYXRcbiAgICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChcbiAgICAgIGNvbXBvbmVudCxcbiAgICAgIHsgZmllbGQsIGZvcm06IGZvcm1paywgLi4ucHJvcHMgfSxcbiAgICAgIGNoaWxkcmVuXG4gICAgKTtcbiAgfVxuXG4gIC8vIGRlZmF1bHQgdG8gaW5wdXQgaGVyZSBzbyB3ZSBjYW4gY2hlY2sgZm9yIGJvdGggYGFzYCBhbmQgYGNoaWxkcmVuYCBhYm92ZVxuICBjb25zdCBhc0VsZW1lbnQgPSBpcyB8fCAnaW5wdXQnO1xuXG4gIGlmICh0eXBlb2YgYXNFbGVtZW50ID09PSAnc3RyaW5nJykge1xuICAgIGNvbnN0IHsgaW5uZXJSZWYsIC4uLnJlc3QgfSA9IHByb3BzO1xuICAgIHJldHVybiBSZWFjdC5jcmVhdGVFbGVtZW50KFxuICAgICAgYXNFbGVtZW50LFxuICAgICAgeyByZWY6IGlubmVyUmVmLCAuLi5maWVsZCwgLi4ucmVzdCB9LFxuICAgICAgY2hpbGRyZW5cbiAgICApO1xuICB9XG5cbiAgcmV0dXJuIFJlYWN0LmNyZWF0ZUVsZW1lbnQoYXNFbGVtZW50LCB7IC4uLmZpZWxkLCAuLi5wcm9wcyB9LCBjaGlsZHJlbik7XG59XG4iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgcyBmcm9tICcuL2Nzcy9ub3RpZmljYXRpb24uc2NzcydcblxuXG5mdW5jdGlvbiBOb3RpZmljYXRpb24oe2NoaWxkcmVufSkge1xuICAgIHJldHVybiA8cCBjbGFzc05hbWU9e3Mud3JhcHBlcn0+XG4gICAgICAgIHtjaGlsZHJlbn1cbiAgICA8L3A+XG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vdGlmaWNhdGlvbiIsImltcG9ydCBOb3RpZmljYXRpb24gZnJvbSAnLi9ub3RpZmljYXRpb24nXG5leHBvcnQgZGVmYXVsdCBOb3RpZmljYXRpb24iLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBZdXAgZnJvbSBcInl1cFwiO1xuaW1wb3J0IGJyb3dzZXJDb25maWcgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYnJvd3NlckNvbmZpZydcbmltcG9ydCB7Rm9ybX0gZnJvbSBcImZvcm1pa1wiO1xuaW1wb3J0IEZpZWxkc0RpdmlkZXJXcmFwcGVyIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1Db250YWluZXJzL2ZpZWxkc0RpdmlkZXJXcmFwcGVyXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy90ZXh0SW5wdXRcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2J1dHRvblwiO1xuaW1wb3J0IHtzZXRVc2VyfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9uc1wiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbiBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy92YXJpb3VzL25vdGlmaWNhdGlvblwiO1xuXG5cbi8vINCd0LDRh9Cw0LvRjNC90YvQtSDQt9C90LDRh9C10L3QuNGPINC/0L7Qu9C10Lkg0YTQvtGA0LzRi1xuZXhwb3J0IGNvbnN0IGluaXRpYWxWYWx1ZXMgPSB7XG4gICAgbmFtZTogJycsXG4gICAgZW1haWw6ICcnLFxuICAgIHBhc3N3b3JkOiAnJyxcbiAgICBwYXNzd29yZENvbmZpcm06ICcnXG59XG5cbi8vINCf0YDQvtCy0LXRgNC60LAg0L/QvtC70LXQuSDRhNC+0YDQvNGLXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvblNjaGVtYSA9IFl1cC5vYmplY3Qoe1xuICAgIG5hbWU6IFl1cC5zdHJpbmcoKVxuICAgICAgICAucmVxdWlyZWQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnKVxuICAgICAgICAubWluKDEsICdNdXN0IGJlIDEgY2hhcmFjdGVycyBvciBtb3JlJyksXG4gICAgZW1haWw6IFl1cC5zdHJpbmcoKVxuICAgICAgICAucmVxdWlyZWQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnKVxuICAgICAgICAuZW1haWwoJ0ludmFsaWQgZW1haWwgYWRkcmVzcycpLFxuICAgIHBhc3N3b3JkOiBZdXAuc3RyaW5nKClcbiAgICAgICAgLnJlcXVpcmVkKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkJylcbiAgICAgICAgLm1pbig0LCAnTXVzdCBiZSA0IGNoYXJhY3RlcnMgb3IgbW9yZScpLFxuICAgIHBhc3N3b3JkQ29uZmlybTogWXVwLnN0cmluZygpXG4gICAgICAgIC5vbmVPZihcbiAgICAgICAgICAgIFtZdXAucmVmKFwicGFzc3dvcmRcIildLFxuICAgICAgICAgICAgXCJCb3RoIHBhc3N3b3JkIG5lZWQgdG8gYmUgdGhlIHNhbWVcIlxuICAgICAgICApXG59KVxuXG5cbi8qKlxuICog0KTRg9C90LrRhtC40Y8g0LLQvtC30LLRgNCw0YnQsNC10YIg0L7RgtGA0LjRgdC+0LLRi9Cy0LDQtdC80YPRjiDRhNC+0YDQvNGDXG4gKiBAcGFyYW0ge09iamVjdH0gZm9ybWlrIOKAlCDQvtCx0YrQtdC60YIg0YEg0YHQviDRgdCy0L7QudGB0YLQstCw0LzQuCDQuCDQvNC10YLQvtC00LDQvNC4INCy0L7Qt9Cw0YDQsNGJ0LDQtdC80YvQvNC4INCx0LjQsdC70LjQvtGC0LXQutC+0LkgRm9ybWlrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXRTZXJ2ZXJFcnIg4oCUINGE0YPQvdC60YbQuNGPINC/0L7QutCw0LfRi9Cy0LDRjtGJ0LDRjyDQuCDRgdC60YDRi9Cy0LDRjtGJ0LDRjyDRgtC10LrRgdGCINC+0YjQuNCx0LrQuCDQvtGCINGB0LXRgNCy0LXRgNCwLlxuICog0JIg0Y3RgtC+0Lkg0YTRg9C90LrRhtC40Lgg0L7QvdCwINC/0L7RgdGC0L7Rj9C90L3QviDQsdGD0LTQtdGCINC30LDQv9GD0YHQutCw0YLRjNGB0Y8g0LIg0LfQvdCw0YfQtdC90LjQuCBudWxsXG4gKiDRh9GC0L7QsdGLINC/0L7RgdC70LUg0LvRjtCx0L7Qs9C+INC40LfQvNC10L3QtdC90LjRjyDRhNC+0YDQvNGLINGC0LXQutGB0YIg0L7RiNC40LHQutC4INGB0LXRgNCy0LXRgNCwINCx0Ysg0YHQutGA0YvQstCw0LvRgdGPLlxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtKGZvcm1paywgc2V0U2VydmVyRXJyKSB7XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0YTQvtGA0LzRgyDQvtGC0L/RgNCw0LLQuNC70LgsINGC0L4g0LfQsNCx0LvQvtC60LjRgNC+0LLQsNGC0Ywg0L/QvtC70Y8g0LLQstC+0LTQsFxuICAgIGxldCBpc0Rpc2FibGVkID0gZm9ybWlrLmlzU3VibWl0dGluZ1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtIG9uQ2hhbmdlPXsoKSA9PiBzZXRTZXJ2ZXJFcnIobnVsbCl9PlxuICAgICAgICAgICAgPEZpZWxkc0RpdmlkZXJXcmFwcGVyIGluZGVudD0nMic+XG4gICAgICAgICAgICAgICAgPFRleHRJbnB1dFxuICAgICAgICAgICAgICAgICAgICBsYWJlbD0nTmFtZSdcbiAgICAgICAgICAgICAgICAgICAgdHlwZT0ndGV4dCdcbiAgICAgICAgICAgICAgICAgICAgbmFtZT0nbmFtZSdcbiAgICAgICAgICAgICAgICAgICAgZGlzYWJsZWQ9e2lzRGlzYWJsZWR9XG4gICAgICAgICAgICAgICAgICAgIGF1dG9Db21wbGV0ZT1cInVzZXJuYW1lXCIgLz5cbiAgICAgICAgICAgIDwvRmllbGRzRGl2aWRlcldyYXBwZXI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxGaWVsZHNEaXZpZGVyV3JhcHBlciBpbmRlbnQ9JzInPlxuICAgICAgICAgICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9J0VtYWlsJ1xuICAgICAgICAgICAgICAgICAgICB0eXBlPSdlbWFpbCdcbiAgICAgICAgICAgICAgICAgICAgbmFtZT0nZW1haWwnXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJlbWFpbFwiIC8+XG4gICAgICAgICAgICA8L0ZpZWxkc0RpdmlkZXJXcmFwcGVyPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8RmllbGRzRGl2aWRlcldyYXBwZXIgaW5kZW50PScyJz5cbiAgICAgICAgICAgICAgICA8VGV4dElucHV0XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsPSdQYXNzd29yZCdcbiAgICAgICAgICAgICAgICAgICAgdHlwZT0ncGFzc3dvcmQnXG4gICAgICAgICAgICAgICAgICAgIG5hbWU9J3Bhc3N3b3JkJ1xuICAgICAgICAgICAgICAgICAgICBkaXNhYmxlZD17aXNEaXNhYmxlZH1cbiAgICAgICAgICAgICAgICAgICAgYXV0b0NvbXBsZXRlPVwibmV3LXBhc3N3b3JkXCIgLz5cbiAgICAgICAgICAgIDwvRmllbGRzRGl2aWRlcldyYXBwZXI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxGaWVsZHNEaXZpZGVyV3JhcHBlciBpbmRlbnQ9JzInPlxuICAgICAgICAgICAgICAgIDxUZXh0SW5wdXRcbiAgICAgICAgICAgICAgICAgICAgbGFiZWw9J0NvbmZpcm0gUGFzc3dvcmQnXG4gICAgICAgICAgICAgICAgICAgIHR5cGU9J3Bhc3N3b3JkJ1xuICAgICAgICAgICAgICAgICAgICBuYW1lPSdwYXNzd29yZENvbmZpcm0nXG4gICAgICAgICAgICAgICAgICAgIGRpc2FibGVkPXtpc0Rpc2FibGVkfVxuICAgICAgICAgICAgICAgICAgICBhdXRvQ29tcGxldGU9XCJuZXctcGFzc3dvcmRcIiAvPlxuICAgICAgICAgICAgPC9GaWVsZHNEaXZpZGVyV3JhcHBlcj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPFN1Ym1pdEJ0biBmb3JtaWs9e2Zvcm1pa30gLz5cbiAgICAgICAgPC9Gb3JtPlxuICAgIClcbn1cblxuLyoqXG4gKiDQpNGD0L3QutGG0LjRjyDQstC+0LfQstGA0LDRidCw0LXRgiDQutC90L7Qv9C60YMg0L7RgtC/0YDQsNCy0LrQuCDRhNC+0YDQvNGLXG4gKiBAcGFyYW0ge09iamVjdH0gZm9ybWlrIOKAlCDQvtCx0YrQtdC60YIg0YEg0YHQviDRgdCy0L7QudGB0YLQstCw0LzQuCDQuCDQvNC10YLQvtC00LDQvNC4INCy0L7Qt9Cw0YDQsNGJ0LDQtdC80YvQvNC4INCx0LjQsdC70LjQvtGC0LXQutC+0LkgRm9ybWlrXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gU3VibWl0QnRuKHtmb3JtaWt9KSB7XG4gICAgXG4gICAgLy8g0JDRgtGA0LjQsdGD0YLRiyDQutC90L7Qv9C60LhcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgICAgdGV4dDogJ1N1Ym1pdCcsXG4gICAgICAgIHR5cGU6ICdzdWJtaXQnXG4gICAgfVxuICAgIFxuICAgIC8vINCV0YHQu9C4INCyINGE0L7RgNC80LUg0LXRgdGC0Ywg0L7RiNC40LHQutC4INC40LvQuFxuICAgIC8vINGE0L7RgNC80YMg0LXRidC1INC90LUg0LfQsNC/0L7Qu9C90Y/Qu9C4INC40LvQuFxuICAgIC8vINGE0L7RgNC80YMg0YPQttC1INC+0YLQv9GA0LDQstC40LvQuCxcbiAgICAvLyDRgtC+INCx0LvQvtC60LjRgNC+0LLQsNGC0Ywg0LrQvdC+0L/QutGDINC+0YLQv9GA0LDQstC60LhcbiAgICBpZighZm9ybWlrLmlzVmFsaWQgfHwgIWZvcm1pay5kaXJ0eSB8fCBmb3JtaWsuaXNTdWJtaXR0aW5nKSB7XG4gICAgICAgIGF0dHJzLmRpc2FibGVkID0gdHJ1ZVxuICAgIH1cbiAgICBcbiAgICAvLyDQldGB0LvQuCDRhNC+0YDQvNGDINC+0YLQv9GA0LDQstC40LvQuCwg0YLQviDQv9C+0LrQsNC30LDRgtGMINC60YDRg9GC0LjQu9C60YNcbiAgICAvLyDRh9GC0L7QsdGLINGD0LLQtdC00L7QvNC40YLRjCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L7QsSDQvtC20LjQtNCw0L3QuNC4INC+0YLQstC10YLQsCDRgdC10YDQstC10YDQsFxuICAgIGlmKGZvcm1pay5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgYXR0cnMuc2lnbiA9ICdzcGlubmVyJ1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gPEJ1dHRvbiB7Li4uYXR0cnN9IC8+XG59XG5cbi8qKlxuICog0J7QsdGA0LDQsdC+0YLRh9C40Log0L7RgtC/0YDQsNCy0LrQuCDRhNC+0YDQvNGLXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIOKAlCDQvtCx0YrQtdC60YIg0YEg0LLQstC10LTRkdC90L3Ri9C80Lgg0LfQvdCw0YfQtdC90LjRj9C80Lgg0LIg0L/QvtC70Y8g0YTQvtGA0LzRi1xuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0U2VydmVyRXJyIOKAlCDRhNGD0L3QutGG0LjRjyDQutGD0LTQsCDQvdGD0LbQvdC+INC/0LXRgNC10LTQsNGC0Ywg0YLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0L7RgtC00LDQvdC90L7QuSDRgdC10YDQstC10YDQvtC8LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2gg4oCUINC00LjRgdC/0LDRgtGH0LXRgCDRjdC60YjQtdC9LdGE0YPQvdC60YbQuNC4LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb25TdWJtaXRIYW5kbGVyKHZhbHVlcywgc2V0U2VydmVyRXJyLCBzZXROb3RpZmljYXRpb24sIGRpc3BhdGNoKSB7XG4gICAgXG4gICAgLy8g0J/QviDQutCw0LrQvtC80YMg0LDQtNGA0LXRgdGDINCx0YPQtNGDINC00LXQu9Cw0YLRjCDQt9Cw0L/RgNC+0YEg0L3QsCDQstGF0L7QtCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICBjb25zdCB7c2VydmVyT3JpZ2luLCBpc0RldmVsb3BtZW50fSA9IGJyb3dzZXJDb25maWdcbiAgICBjb25zdCBhcGlVcmwgPSBzZXJ2ZXJPcmlnaW4gKyAnL2FwaS92MS91c2Vycy9zaWdudXAnXG4gICAgXG4gICAgLy8g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpXG4gICAgfVxuICAgIFxuICAgIC8vINCh0LTQtdC70LDRjiDQt9Cw0L/RgNC+0YEg0L3QsCDRgdC10YDQstC10YAg0Lgg0L/QvtC70YPRh9C10L3QvdGL0LUg0LTQsNC90L3Ri9C1INC/0L7QvNC10YnRgyDQsiBzZXJ2ZXJSZXNcbiAgICBjb25zdCBzZXJ2ZXJSZXMgPSBhd2FpdCBmZXRjaChhcGlVcmwsIG9wdGlvbnMpXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAudGhlbihyZXMgPT4gcmVzKVxuICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXG4gICAgXG4gICAgY29uc29sZS5sb2coc2VydmVyUmVzKTtcbiAgICBcbiAgICAvKiDQldGB0LvQuCDQsiBzZXJ2ZXJSZXMg0LHRg9C00LXRgiDQvtCx0YrQtdC60YIg0YEg0L7RiNC40LHQutC+0Lkg0L/RgNC+INC90LXQstC10YDQvdGL0LUg0LTQsNC90L3Ri9C1INC+0YIg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC10YHQu9C4INGD0LrQsNC30LDQvSDQvdC1INCy0LXRgNC90LDRjyDQv9C+0YfRgtCwINC40LvQuCDQv9Cw0YDQvtC70Ywg0LjQu9C4INC+0L3QuCDQstC+0L7QsdGJ0LUg0L3QtSDQv9C10YDQtdC00LDQvdGLLFxuICAgINGC0L4g0L/QvtC60LDQt9Cw0YLRjCDRgdC+0L7QsdGJ0LXQvdC40LUg0L7QsSDQvtGI0LjQsdC60LU6XG4gICAge1xuICAgICAgICBcInN0YXR1c1wiOiBcImZhaWxcIixcbiAgICAgICAgXCJlcnJvclwiOiB7XG4gICAgICAgICAgICBcInN0YXR1c0NvZGVcIjogNDAwLFxuICAgICAgICAgICAgXCJpc09wZXJhdGlvbmFsXCI6IHRydWUsXG4gICAgICAgICAgICBcIm1lc3NhZ2VcIjogXCJJbmNvcnJlY3QgZW1haWwgb3IgcGFzc3dvcmRcIlxuICAgICAgICB9LFxuICAgICAgICBcIm1lc3NhZ2VcIjogXCJQbGVhc2UgcHJvdmlkZSBlbWFpbCBhbmQgcGFzc3dvcmQuXCIsXG4gICAgfSovXG4gICAgaWYoc2VydmVyUmVzLnN0YXR1cyA9PT0gJ2Vycm9yJyAmJiBzZXJ2ZXJSZXMuZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAwKSB7XG4gICAgICAgIHNldFNlcnZlckVycihzZXJ2ZXJSZXMuZXJyb3IubWVzc2FnZSlcbiAgICB9XG4gICAgXG4gICAgLyog0JXRgdC70Lgg0LIgc2VydmVyUmVzINCx0YPQtNC10YIg0L7QsdGK0LXQutGCINGBINGD0YHQv9C10YjQvdGL0Lwg0YHRgtCw0YLRg9GB0L7QvCwg0YLQviDQv9C+0LrQsNC30LDRgtGMINGD0LLQtdC00L7QvNC70LXQvdC40LUg0YEg0L/RgNC+0YHRjNCx0L7QuSDQv9C+0LTRgtCy0LXRgNC00LjRgtGMINC/0L7Rh9GC0YM6XG4gICAge1xuICAgICAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgXCJ0b2tlblwiOiBcImV5SmhiR2NpT2lKSVV6STFOaUlzSW5SNWNDSTZJa3BYVkNKOS5leUpwWkNJNi4uLlwiLFxuICAgICAgICBcImRhdGFcIjoge1xuICAgICAgICAgICAgXCJ1c2VyXCI6IHtcbiAgICAgICAgICAgICAgICBcIm5hbWVcIjogXCJBbmRyZXcgS296aW5za3lcIixcbiAgICAgICAgICAgICAgICBcImVtYWlsXCI6IFwiYW5ka296aW5za2l5QHlhbmRleC5ydVwiLFxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSovXG4gICAgaWYoc2VydmVyUmVzLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgIGNvbnN0IG1haWxTZXJ2aWNlID0gJ2h0dHBzOi8vJyArIHZhbHVlcy5lbWFpbC5zcGxpdCgnQCcpWzFdXG4gICAgICAgIHNldE5vdGlmaWNhdGlvbihcbiAgICAgICAgICAgIDxOb3RpZmljYXRpb24+QSBsZXR0ZXIgd2l0aCBhIGxpbmsgaGFzIGJlZW4gc2VudCB0byB5b3VyIDxhIGhyZWY9e21haWxTZXJ2aWNlfT5lbWFpbDwvYT4uIENsaWNrIG9uIGl0IHRvIGxvZyBpbiB5b3VyIGFjY291bnQuPC9Ob3RpZmljYXRpb24+XG4gICAgICAgIClcbiAgICB9XG59IiwiaW1wb3J0IG1peGVkIGZyb20gJy4vbWl4ZWQnO1xuaW1wb3J0IGJvb2wgZnJvbSAnLi9ib29sZWFuJztcbmltcG9ydCBzdHJpbmcgZnJvbSAnLi9zdHJpbmcnO1xuaW1wb3J0IG51bWJlciBmcm9tICcuL251bWJlcic7XG5pbXBvcnQgZGF0ZSBmcm9tICcuL2RhdGUnO1xuaW1wb3J0IG9iamVjdCBmcm9tICcuL29iamVjdCc7XG5pbXBvcnQgYXJyYXkgZnJvbSAnLi9hcnJheSc7XG5pbXBvcnQgUmVmIGZyb20gJy4vUmVmZXJlbmNlJztcbmltcG9ydCBMYXp5IGZyb20gJy4vTGF6eSc7XG5pbXBvcnQgVmFsaWRhdGlvbkVycm9yIGZyb20gJy4vVmFsaWRhdGlvbkVycm9yJztcbmltcG9ydCByZWFjaCBmcm9tICcuL3V0aWwvcmVhY2gnO1xuaW1wb3J0IGlzU2NoZW1hIGZyb20gJy4vdXRpbC9pc1NjaGVtYSc7XG5pbXBvcnQgc2V0TG9jYWxlIGZyb20gJy4vc2V0TG9jYWxlJztcbnZhciBib29sZWFuID0gYm9vbDtcblxudmFyIHJlZiA9IGZ1bmN0aW9uIHJlZihrZXksIG9wdGlvbnMpIHtcbiAgcmV0dXJuIG5ldyBSZWYoa2V5LCBvcHRpb25zKTtcbn07XG5cbnZhciBsYXp5ID0gZnVuY3Rpb24gbGF6eShmbikge1xuICByZXR1cm4gbmV3IExhenkoZm4pO1xufTtcblxuZnVuY3Rpb24gYWRkTWV0aG9kKHNjaGVtYVR5cGUsIG5hbWUsIGZuKSB7XG4gIGlmICghc2NoZW1hVHlwZSB8fCAhaXNTY2hlbWEoc2NoZW1hVHlwZS5wcm90b3R5cGUpKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdZb3UgbXVzdCBwcm92aWRlIGEgeXVwIHNjaGVtYSBjb25zdHJ1Y3RvciBmdW5jdGlvbicpO1xuICBpZiAodHlwZW9mIG5hbWUgIT09ICdzdHJpbmcnKSB0aHJvdyBuZXcgVHlwZUVycm9yKCdBIE1ldGhvZCBuYW1lIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgaWYgKHR5cGVvZiBmbiAhPT0gJ2Z1bmN0aW9uJykgdGhyb3cgbmV3IFR5cGVFcnJvcignTWV0aG9kIGZ1bmN0aW9uIG11c3QgYmUgcHJvdmlkZWQnKTtcbiAgc2NoZW1hVHlwZS5wcm90b3R5cGVbbmFtZV0gPSBmbjtcbn1cblxuZXhwb3J0IHsgbWl4ZWQsIHN0cmluZywgbnVtYmVyLCBib29sLCBib29sZWFuLCBkYXRlLCBvYmplY3QsIGFycmF5LCByZWYsIGxhenksIHJlYWNoLCBpc1NjaGVtYSwgYWRkTWV0aG9kLCBzZXRMb2NhbGUsIFZhbGlkYXRpb25FcnJvciB9OyIsImltcG9ydCBSZWFjdCwge3VzZVN0YXRlfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEZvcm1pa30gZnJvbSBcImZvcm1pa1wiO1xuaW1wb3J0IHtMaW5rLCBSZWRpcmVjdH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBzIGZyb20gJy4vY3NzL2Zvcm0uc2NzcydcbmltcG9ydCBGb3JtSGVhZGVyIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy9mb3JtSGVhZGVyXCI7XG5pbXBvcnQgRXJyb3IgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2Vycm9yXCI7XG5pbXBvcnQge3VzZURpc3BhdGNoLCB1c2VTZWxlY3Rvcn0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQge1xuICAgIGluaXRpYWxWYWx1ZXMsXG4gICAgdmFsaWRhdGlvblNjaGVtYSxcbiAgICBjcmVhdGVGb3JtLFxuICAgIG9uU3VibWl0SGFuZGxlclxufSBmcm9tIFwiLi9qcy9yZXNvdXJjZXNcIjtcbmltcG9ydCB7Y2hlY2tUb2tlbn0gZnJvbSBcIi4uLy4uLy4uL21haW4vanMvY2hlY2tUb2tlblwiO1xuaW1wb3J0IHtzZXRBdXRoVG9rZW5TdGF0dXN9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS9hY3Rpb25zXCI7XG5cblxuLy8g0KTQvtGA0LzQsCDRgNC10LPQuNGB0YLRgNCw0YbQuNC4INC90L7QstC+0LPQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbmZ1bmN0aW9uIFJlZ0Zvcm0oKSB7XG4gICAgXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gICAgXG4gICAgLy8g0J/QvtC70YPRh9GDINC40LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0Lgg0YHRgtCw0YLRg9GBINGC0L7QutC10L3QsCDQsNCy0YLQvtGA0LjQt9Cw0YbQuNC4XG4gICAgY29uc3Qge25hbWUsIGF1dGhUb2tlblN0YXR1c30gPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS51c2VyKVxuICAgIFxuICAgIC8vINCf0LXRgNC10LzQtdC90L3QsNGPINCz0LTQtSDQsdGD0LTQtdGCINGF0YDQsNC90LjRgtGB0Y8g0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1INGBINGB0LXRgNCy0LXRgNCwXG4gICAgbGV0IFtzZXJ2ZXJFcnJUZXh0LCBzZXRTZXJ2ZXJFcnJdID0gdXNlU3RhdGUobnVsbClcbiAgICBcbiAgICAvLyDQn9C10YDQtdC80LXQvdC90LDRjyDQs9C00LUg0LHRg9C00LXRgiDRhdGA0LDQvdC40YLRjNGB0Y8g0YPQstC10LTQvtC80LvQtdC90LjQtVxuICAgIGNvbnN0IFtub3RpZmljYXRpb24sIHNldE5vdGlmaWNhdGlvbl0gPSB1c2VTdGF0ZShudWxsKVxuICAgIFxuICAgIC8vINCV0YHQu9C4INGB0LXRgNCy0LXRgCDRgdC+0L7QsdGJ0LjRgiDQvtCxINC+0YjQuNCx0LrQtSwg0YLQviDQsdGD0LTQtdGCINCy0YvQt9Cy0LDQvSBzZXRTZXJ2ZXJFcnIoKSDQuCDQsiBzZXJ2ZXJFcnJUZXh0INC30LDQvdC10ZHRgtGB0Y8g0YLQtdC60YHRgiDQvtGI0LjQsdC60LguXG4gICAgLy8g0JAg0L7RiNC40LHQutCwINC10YHRgtGMLCDRgtC+INC+0L3QsCDQsdGD0LTQtdGCINC+0YLRgNC40YHQvtCy0LDQvdCwXG4gICAgbGV0IHNlcnZlckVycm9yID0gc2VydmVyRXJyVGV4dFxuICAgICAgICA/IDxFcnJvciB0ZXh0PXtzZXJ2ZXJFcnJUZXh0fSBpbmRlbnQ9JzMnIC8+XG4gICAgICAgIDogbnVsbFxuICAgIFxuICAgIC8vINCV0YHQu9C4IGF1dGhUb2tlblN0YXR1cyDRgNCw0LLQtdC9INC90YPQu9GOLCDRgtC+INC90LUg0L/QvtC90Y/RgtC90L4g0LXRgdGC0Ywg0LvQuCDQsiDQsdGA0LDRg9C30LXRgNC1INGC0L7QutC10L0g0Lgg0LLQtdGA0LXQvSDQu9C4INC+0L0uINCf0L7RjdGC0L7QvNGDINC/0YDQvtCy0LXRgNGOLlxuICAgIGlmKGF1dGhUb2tlblN0YXR1cyA9PT0gMCkge1xuICAgICAgICBjaGVja1Rva2VuKCkudGhlbigoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaCggc2V0QXV0aFRva2VuU3RhdHVzKHN0YXR1cykgKVxuICAgICAgICB9KVxuICAgIH1cbiAgICBcbiAgICAvLyDQldGB0LvQuCDRgtC+0LrQtdC9INC00LXQudGB0YLQstC40YLQtdC70LXQvSDQuNC70Lgg0LIg0KXRgNCw0L3QuNC70LjRidC1INC10YHRgtGMINC40LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8sINGC0L4g0YHQtNC10LvQsNGC0Ywg0L/QtdGA0LXQsNC00YDQtdGB0LDRhtC40Y4g0L3QsCDRgdGC0YDQsNC90LjRhtGDINC30LDQvNC10YLQvtC6LlxuICAgIGlmKGF1dGhUb2tlblN0YXR1cyA9PT0gMiB8fCBuYW1lKSByZXR1cm4gPFJlZGlyZWN0IHRvPScvbm90ZXMnLz5cbiAgICBcbiAgICAvLyDQldGB0LvQuCDQtdGB0YLRjCDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1LCDRgtC+INC+0YLRgNC40YHQvtCy0LDRgtGMINGD0LLQtdC00L7QvNC70LXQvdC40L0uXG4gICAgaWYobm90aWZpY2F0aW9uKSByZXR1cm4gbm90aWZpY2F0aW9uXG4gICAgXG4gICAgXG4gICAgLy8g0J7RgtGA0LjRgdC+0LLRi9Cy0LDQtdC80LDRjyDRhNC+0YDQvNCwXG4gICAgcmV0dXJuIChcbiAgICAgICAgPGRpdj5cbiAgICAgICAgICAgIDxGb3JtSGVhZGVyIHRleHQ9J1NpZ24gdXAnIC8+XG4gICAgICAgICAgICA8Rm9ybWlrXG4gICAgICAgICAgICAgICAgaW5pdGlhbFZhbHVlcz17aW5pdGlhbFZhbHVlc31cbiAgICAgICAgICAgICAgICB2YWxpZGF0aW9uU2NoZW1hPXt2YWxpZGF0aW9uU2NoZW1hfVxuICAgICAgICAgICAgICAgIG9uU3VibWl0PXsodmFsdWVzKSA9PiBvblN1Ym1pdEhhbmRsZXIodmFsdWVzLCBzZXRTZXJ2ZXJFcnIsIHNldE5vdGlmaWNhdGlvbiwgZGlzcGF0Y2gpfVxuICAgICAgICAgICAgPlxuICAgICAgICAgICAgICAgIHsgZm9ybWlrID0+IGNyZWF0ZUZvcm0oZm9ybWlrLCBzZXRTZXJ2ZXJFcnIpIH1cbiAgICAgICAgICAgIDwvRm9ybWlrPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICB7c2VydmVyRXJyb3J9XG4gICAgXG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cy5ib3R0b21QYXJ0fT5cbiAgICAgICAgICAgICAgICA8cD5EbyB5b3UgaGF2ZSBhbiBhY2NvdW50PyA8TGluayB0bz0nL2VudGVyJz5TaWduIGluLjwvTGluaz48L3A+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IFJlZ0Zvcm0iLCJpbXBvcnQgUmVnRm9ybSBmcm9tICcuL3JlZ0Zvcm0nXG5leHBvcnQgZGVmYXVsdCBSZWdGb3JtIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFRvcE5hdmlnYXRpb24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdG9wTmF2RW50cmFuY2VcIjtcbmltcG9ydCBBdXRoU3BsaXRDb250YWluZXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvY29udGFpbmVycy9hdXRoU3BsaXRDb250YWluZXJcIjtcbmltcG9ydCBSZWdGb3JtIGZyb20gXCIuL2NvbXBvbmVudHMvcmVnRm9ybVwiO1xuXG5cblxuZnVuY3Rpb24gUmVnUGFnZSgpIHtcbiAgICByZXR1cm4gKFxuICAgICAgICA8PlxuICAgICAgICAgICAgPFRvcE5hdmlnYXRpb24gLz5cbiAgICAgICAgICAgIDxBdXRoU3BsaXRDb250YWluZXI+XG4gICAgICAgICAgICAgICAgPFJlZ0Zvcm0gLz5cbiAgICAgICAgICAgIDwvQXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICA8Lz5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlZ1BhZ2UiLCJpbXBvcnQgUmVnUGFnZSBmcm9tICcuL3JlZ1BhZ2UnXG5leHBvcnQgZGVmYXVsdCBSZWdQYWdlIiwiaW1wb3J0IFJlYWN0IGZyb20gXCJyZWFjdFwiO1xuaW1wb3J0ICogYXMgWXVwIGZyb20gXCJ5dXBcIjtcbmltcG9ydCBicm93c2VyQ29uZmlnIGZyb20gJy4uLy4uLy4uLy4uLy4uL2Jyb3dzZXJDb25maWcnXG5pbXBvcnQge0Zvcm19IGZyb20gXCJmb3JtaWtcIjtcbmltcG9ydCBGaWVsZHNEaXZpZGVyV3JhcHBlciBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy9mb3JtQ29udGFpbmVycy9maWVsZHNEaXZpZGVyV3JhcHBlclwiO1xuaW1wb3J0IFRleHRJbnB1dCBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy9mb3JtRWxlbWVudHMvdGV4dElucHV0XCI7XG5pbXBvcnQgQnV0dG9uIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy9idXR0b25cIjtcbmltcG9ydCB7c2V0VXNlcn0gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL3N0b3JlL2FjdGlvbnNcIjtcbmltcG9ydCBOb3RpZmljYXRpb24gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvdmFyaW91cy9ub3RpZmljYXRpb25cIjtcblxuXG4vLyDQndCw0YfQsNC70YzQvdGL0LUg0LfQvdCw0YfQtdC90LjRjyDQv9C+0LvQtdC5INGE0L7RgNC80YtcbmV4cG9ydCBjb25zdCBpbml0aWFsVmFsdWVzID0ge1xuICAgIGVtYWlsOiAnJyxcbiAgICBwYXNzd29yZDogJydcbn1cblxuLy8g0J/RgNC+0LLQtdGA0LrQsCDQv9C+0LvQtdC5INGE0L7RgNC80YtcbmV4cG9ydCBjb25zdCB2YWxpZGF0aW9uU2NoZW1hID0gWXVwLm9iamVjdCh7XG4gICAgZW1haWw6IFl1cC5zdHJpbmcoKVxuICAgICAgICAucmVxdWlyZWQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnKVxuICAgICAgICAuZW1haWwoJ0ludmFsaWQgZW1haWwgYWRkcmVzcycpLFxuICAgIHBhc3N3b3JkOiBZdXAuc3RyaW5nKClcbiAgICAgICAgLnJlcXVpcmVkKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkJylcbiAgICAgICAgLm1pbig0LCAnTXVzdCBiZSA0IGNoYXJhY3RlcnMgb3IgbW9yZScpXG59KVxuXG5cbi8qKlxuICog0KTRg9C90LrRhtC40Y8g0LLQvtC30LLRgNCw0YnQsNC10YIg0L7RgtGA0LjRgdC+0LLRi9Cy0LDQtdC80YPRjiDRhNC+0YDQvNGDXG4gKiBAcGFyYW0ge09iamVjdH0gZm9ybWlrIOKAlCDQvtCx0YrQtdC60YIg0YEg0YHQviDRgdCy0L7QudGB0YLQstCw0LzQuCDQuCDQvNC10YLQvtC00LDQvNC4INCy0L7Qt9Cw0YDQsNGJ0LDQtdC80YvQvNC4INCx0LjQsdC70LjQvtGC0LXQutC+0LkgRm9ybWlrXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXRTZXJ2ZXJFcnIg4oCUINGE0YPQvdC60YbQuNGPINC/0L7QutCw0LfRi9Cy0LDRjtGJ0LDRjyDQuCDRgdC60YDRi9Cy0LDRjtGJ0LDRjyDRgtC10LrRgdGCINC+0YjQuNCx0LrQuCDQvtGCINGB0LXRgNCy0LXRgNCwLlxuICog0JIg0Y3RgtC+0Lkg0YTRg9C90LrRhtC40Lgg0L7QvdCwINC/0L7RgdGC0L7Rj9C90L3QviDQsdGD0LTQtdGCINC30LDQv9GD0YHQutCw0YLRjNGB0Y8g0LIg0LfQvdCw0YfQtdC90LjQuCBudWxsXG4gKiDRh9GC0L7QsdGLINC/0L7RgdC70LUg0LvRjtCx0L7Qs9C+INC40LfQvNC10L3QtdC90LjRjyDRhNC+0YDQvNGLINGC0LXQutGB0YIg0L7RiNC40LHQutC4INGB0LXRgNCy0LXRgNCwINCx0Ysg0YHQutGA0YvQstCw0LvRgdGPLlxuICogQHJldHVybnMgeyp9XG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVGb3JtKGZvcm1paywgc2V0U2VydmVyRXJyKSB7XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0YTQvtGA0LzRgyDQvtGC0L/RgNCw0LLQuNC70LgsINGC0L4g0LfQsNCx0LvQvtC60LjRgNC+0LLQsNGC0Ywg0L/QvtC70Y8g0LLQstC+0LTQsFxuICAgIGxldCBpc0Rpc2FibGVkID0gZm9ybWlrLmlzU3VibWl0dGluZ1xuICAgIFxuICAgIHJldHVybiAoXG4gICAgICAgIDxGb3JtIG9uQ2hhbmdlPXsoKSA9PiBzZXRTZXJ2ZXJFcnIobnVsbCl9PlxuICAgICAgICAgICAgPEZpZWxkc0RpdmlkZXJXcmFwcGVyIGluZGVudD0nMic+XG4gICAgICAgICAgICAgICAgPFRleHRJbnB1dCBsYWJlbD0nRW1haWwnIHR5cGU9J2VtYWlsJyBuYW1lPSdlbWFpbCcgZGlzYWJsZWQ9e2lzRGlzYWJsZWR9IGF1dG9Db21wbGV0ZT1cImVtYWlsXCIgLz5cbiAgICAgICAgICAgIDwvRmllbGRzRGl2aWRlcldyYXBwZXI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxGaWVsZHNEaXZpZGVyV3JhcHBlciBpbmRlbnQ9JzInPlxuICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgbGFiZWw9J1Bhc3N3b3JkJyB0eXBlPSdwYXNzd29yZCcgbmFtZT0ncGFzc3dvcmQnIGRpc2FibGVkPXtpc0Rpc2FibGVkfSBhdXRvQ29tcGxldGU9XCJjdXJyZW50LXBhc3N3b3JkXCIgLz5cbiAgICAgICAgICAgIDwvRmllbGRzRGl2aWRlcldyYXBwZXI+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIDxTdWJtaXRCdG4gZm9ybWlrPXtmb3JtaWt9IC8+XG4gICAgICAgIDwvRm9ybT5cbiAgICApXG59XG5cbi8qKlxuICog0KTRg9C90LrRhtC40Y8g0LLQvtC30LLRgNCw0YnQsNC10YIg0LrQvdC+0L/QutGDINC+0YLQv9GA0LDQstC60Lgg0YTQvtGA0LzRi1xuICogQHBhcmFtIHtPYmplY3R9IGZvcm1payDigJQg0L7QsdGK0LXQutGCINGBINGB0L4g0YHQstC+0LnRgdGC0LLQsNC80Lgg0Lgg0LzQtdGC0L7QtNCw0LzQuCDQstC+0LfQsNGA0LDRidCw0LXQvNGL0LzQuCDQsdC40LHQu9C40L7RgtC10LrQvtC5IEZvcm1pa1xuICogQHJldHVybnMgeyp9XG4gKi9cbmZ1bmN0aW9uIFN1Ym1pdEJ0bih7Zm9ybWlrfSkge1xuICAgIFxuICAgIC8vINCQ0YLRgNC40LHRg9GC0Ysg0LrQvdC+0L/QutC4XG4gICAgY29uc3QgYXR0cnMgPSB7XG4gICAgICAgIHRleHQ6ICdTdWJtaXQnLFxuICAgICAgICB0eXBlOiAnc3VibWl0J1xuICAgIH1cbiAgICBcbiAgICAvLyDQldGB0LvQuCDQsiDRhNC+0YDQvNC1INC10YHRgtGMINC+0YjQuNCx0LrQuCDQuNC70LhcbiAgICAvLyDRhNC+0YDQvNGDINC10YnQtSDQvdC1INC30LDQv9C+0LvQvdGP0LvQuCDQuNC70LhcbiAgICAvLyDRhNC+0YDQvNGDINGD0LbQtSDQvtGC0L/RgNCw0LLQuNC70LgsXG4gICAgLy8g0YLQviDQsdC70L7QutC40YDQvtCy0LDRgtGMINC60L3QvtC/0LrRgyDQvtGC0L/RgNCw0LLQutC4XG4gICAgaWYoIWZvcm1pay5pc1ZhbGlkIHx8ICFmb3JtaWsuZGlydHkgfHwgZm9ybWlrLmlzU3VibWl0dGluZykge1xuICAgICAgICBhdHRycy5kaXNhYmxlZCA9IHRydWVcbiAgICB9XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0YTQvtGA0LzRgyDQvtGC0L/RgNCw0LLQuNC70LgsINGC0L4g0L/QvtC60LDQt9Cw0YLRjCDQutGA0YPRgtC40LvQutGDXG4gICAgLy8g0YfRgtC+0LHRiyDRg9Cy0LXQtNC+0LzQuNGC0Ywg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPINC+0LEg0L7QttC40LTQsNC90LjQuCDQvtGC0LLQtdGC0LAg0YHQtdGA0LLQtdGA0LBcbiAgICBpZihmb3JtaWsuaXNTdWJtaXR0aW5nKSB7XG4gICAgICAgIGF0dHJzLnNpZ24gPSAnc3Bpbm5lcidcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuIDxCdXR0b24gey4uLmF0dHJzfSAvPlxufVxuXG4vKipcbiAqINCe0LHRgNCw0LHQvtGC0YfQuNC6INC+0YLQv9GA0LDQstC60Lgg0YTQvtGA0LzRi1xuICogQHBhcmFtIHtPYmplY3R9IHZhbHVlcyDigJQg0L7QsdGK0LXQutGCINGBINCy0LLQtdC00ZHQvdC90YvQvNC4INC30L3QsNGH0LXQvdC40Y/QvNC4INCyINC/0L7Qu9GPINGE0L7RgNC80YsuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXRTZXJ2ZXJFcnIg4oCUINGE0YPQvdC60YbQuNGPINC60YPQtNCwINC90YPQttC90L4g0L/QtdGA0LXQtNCw0YLRjCDRgtC10LrRgdGCINC+0YjQuNCx0LrQuCDQvtGC0LTQsNC90L3QvtC5INGB0LXRgNCy0LXRgNC+0LwuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBzZXROb3RpZmljYXRpb24g4oCUINGE0YPQvdC60YbQuNGPINC+0YLRgNC40YHQvtCy0YvQstCw0Y7RidCw0Y8g0YPQstC10LTQvtC80LvQtdC90LjQtS5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IGRpc3BhdGNoIOKAlCDQtNC40YHQv9Cw0YLRh9C10YAg0Y3QutGI0LXQvS3RhNGD0L3QutGG0LjQuC5cbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIG9uU3VibWl0SGFuZGxlcih2YWx1ZXMsIHNldFNlcnZlckVyciwgc2V0Tm90aWZpY2F0aW9uLCBkaXNwYXRjaCkge1xuICAgIFxuICAgIC8vINCf0L4g0LrQsNC60L7QvNGDINCw0LTRgNC10YHRgyDQsdGD0LTRgyDQtNC10LvQsNGC0Ywg0LfQsNC/0YDQvtGBINC90LAg0LLRhdC+0LQg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAgY29uc3Qge3NlcnZlck9yaWdpbiwgaXNEZXZlbG9wbWVudH0gPSBicm93c2VyQ29uZmlnXG4gICAgY29uc3QgYXBpVXJsID0gc2VydmVyT3JpZ2luICsgJy9hcGkvdjEvdXNlcnMvbG9naW4nXG4gICAgXG4gICAgLy8g0J/QsNGA0LDQvNC10YLRgNGLINC30LDQv9GA0L7RgdCwXG4gICAgY29uc3Qgb3B0aW9ucyA9IHtcbiAgICAgICAgbWV0aG9kOiAnUE9TVCcsXG4gICAgICAgIGhlYWRlcnM6IHsgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJyB9LFxuICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeSh2YWx1ZXMpXG4gICAgfVxuICAgIFxuICAgIC8vINCh0LTQtdC70LDRjiDQt9Cw0L/RgNC+0YEg0L3QsCDRgdC10YDQstC10YAg0Lgg0L/QvtC70YPRh9C10L3QvdGL0LUg0LTQsNC90L3Ri9C1INC/0L7QvNC10YnRgyDQsiBzZXJ2ZXJSZXNcbiAgICBjb25zdCBzZXJ2ZXJSZXMgPSBhd2FpdCBmZXRjaChhcGlVcmwsIG9wdGlvbnMpXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMuanNvbigpKVxuICAgICAgICAudGhlbihyZXMgPT4gcmVzKVxuICAgICAgICAuY2F0Y2goZXJyID0+IGNvbnNvbGUubG9nKGVycikpXG4gICAgLypcbiAgICDQldGB0LvQuCDQsiBzZXJ2ZXJSZXMg0LHRg9C00LXRgiDQvtCx0YrQtdC60YIg0YHQviDRgdGC0LDRgtGD0YHQvtC8IDQwMyDQuCDQv9GA0L7RgdGM0LHQvtC5INC/0L7QtNGC0LLQtdGA0LTQuNGC0Ywg0L/QvtGH0YLRgywg0YLQviDQv9C+0LrQsNC30LDRgtGMINGB0L7QvtGC0LLQtdGC0YHRgtCy0YPRjtGJ0LXQtSDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1OlxuICAgIHtcbiAgICAgICAgXCJzdGF0dXNcIjogXCJmYWlsXCIsXG4gICAgICAgIFwiZXJyb3JcIjoge1xuICAgICAgICAgICAgc3RhdHVzQ29kZTogNDAzXG4gICAgICAgICAgICBpc09wZXJhdGlvbmFsOiB0cnVlXG4gICAgICAgICAgICBtZXNzYWdlOiBcIlBsZWFzZSwgY29uZmlybSB5b3VyIGVtYWlsLlwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWVzc2FnZVwiOiBcIlBsZWFzZSBwcm92aWRlIGVtYWlsIGFuZCBwYXNzd29yZC5cIixcbiAgICB9Ki9cbiAgICBpZihzZXJ2ZXJSZXMuc3RhdHVzID09PSAnZmFpbCcgJiYgc2VydmVyUmVzLmVycm9yLnN0YXR1c0NvZGUgPT09IDQwMykge1xuICAgICAgICBjb25zdCBtYWlsU2VydmljZSA9ICdodHRwczovLycgKyB2YWx1ZXMuZW1haWwuc3BsaXQoJ0AnKVsxXVxuICAgICAgICBzZXROb3RpZmljYXRpb24oXG4gICAgICAgICAgICA8Tm90aWZpY2F0aW9uPkEgbGV0dGVyIHdpdGggYSBsaW5rIGhhcyBiZWVuIHNlbnQgdG8geW91ciA8YSBocmVmPXttYWlsU2VydmljZX0+ZW1haWw8L2E+LiBDbGljayBvbiBpdCB0byBsb2cgaW4geW91ciBhY2NvdW50LjwvTm90aWZpY2F0aW9uPlxuICAgICAgICApXG4gICAgfVxuICAgIFxuICAgIC8qINCV0YHQu9C4INCyIHNlcnZlclJlcyDQsdGD0LTQtdGCINC+0LHRitC10LrRgiDRgSDQvtGI0LjQsdC60L7QuSDQv9GA0L4g0L3QtdCy0LXRgNC90YvQtSDQtNCw0L3QvdGL0LUg0L7RgiDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0LXRgdC70Lgg0YPQutCw0LfQsNC9INC90LUg0LLQtdGA0L3QsNGPINC/0L7Rh9GC0LAg0LjQu9C4INC/0LDRgNC+0LvRjCDQuNC70Lgg0L7QvdC4INCy0L7QvtCx0YnQtSDQvdC1INC/0LXRgNC10LTQsNC90YssXG4gICAg0YLQviDQv9C+0LrQsNC30LDRgtGMINGB0L7QvtCx0YnQtdC90LjQtSDQvtCxINC+0YjQuNCx0LrQtTpcbiAgICB7XG4gICAgICAgIFwic3RhdHVzXCI6IFwiZmFpbFwiLFxuICAgICAgICBcImVycm9yXCI6IHtcbiAgICAgICAgICAgIFwic3RhdHVzQ29kZVwiOiA0MDAsXG4gICAgICAgICAgICBcImlzT3BlcmF0aW9uYWxcIjogdHJ1ZSxcbiAgICAgICAgICAgIFwibWVzc2FnZVwiOiBcIkluY29ycmVjdCBlbWFpbCBvciBwYXNzd29yZFwiXG4gICAgICAgIH0sXG4gICAgICAgIFwibWVzc2FnZVwiOiBcIlBsZWFzZSBwcm92aWRlIGVtYWlsIGFuZCBwYXNzd29yZC5cIixcbiAgICB9Ki9cbiAgICBpZihzZXJ2ZXJSZXMuc3RhdHVzID09PSAnZmFpbCcgJiYgc2VydmVyUmVzLmVycm9yLnN0YXR1c0NvZGUgPT09IDQwMCkge1xuICAgICAgICBzZXRTZXJ2ZXJFcnIoc2VydmVyUmVzLmVycm9yLm1lc3NhZ2UpXG4gICAgfVxuICAgIFxuICAgIC8qINCV0YHQu9C4INCy0YHRkSDQstC10YDQvdC+LCDRgtC+INCyIHNlcnZlclJlcyDQsdGD0LTQtdGCINC+0LHRitC10LrRgiDRgSDRg9GB0L/QtdGF0L7QvDpcbiAgICB7XG4gICAgICAgIFwic3RhdHVzXCI6IFwic3VjY2Vzc1wiLFxuICAgICAgICBcInRva2VuXCI6IFwiZXlKaGJHY2lPaUpJVXpJMU5pSXNJblI1Y0NJNklrcFhWQ0o5LmV5SnBaQ0k2Li4uXCIsXG4gICAgICAgIFwiZGF0YVwiOiB7XG4gICAgICAgICAgICBcInVzZXJcIjoge1xuICAgICAgICAgICAgICAgIGVtYWlsOiBcImFuZGtvemluc2tpeUB5YW5kZXgucnVcIlxuICAgICAgICAgICAgICAgIG5hbWU6IFwiQW5kcmV3IEtvemluc2t5XCJcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH0qL1xuICAgIGlmKHNlcnZlclJlcy5zdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICBcbiAgICAgICAgLy8g0JXRgdC70Lgg0L3QsNGF0L7QttGD0YHRjCDQsiDRgNC10LbQuNC80LUg0YDQsNC30YDQsNCx0L7RgtC60LUsINGC0L4g0L/QvtGB0YLQsNCy0LjRgtGMINGC0L7QutC10L0g0LIgTG9jYWxTdG9yYWdlXG4gICAgICAgIGlmKGlzRGV2ZWxvcG1lbnQpIHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKCdhdXRoVG9rZW4nLCBzZXJ2ZXJSZXMudG9rZW4pXG4gICAgICAgIH1cbiAgICBcbiAgICAgICAgLy8g0J/QvtC70YPRh9C40YLRjCDQtNCw0L3QvdGL0LUg0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG4gICAgICAgIGNvbnN0IHVzZXJEYXRhID0gc2VydmVyUmVzLmRhdGEudXNlclxuICAgICAgICBcbiAgICAgICAgLy8g0J/QvtGB0YLQsNCy0LjRgtGMINC40YUg0LIg0KXRgNCw0L3QuNC70LjRidC1XG4gICAgICAgIGRpc3BhdGNoKHNldFVzZXIodXNlckRhdGEubmFtZSwgdXNlckRhdGEuZW1haWwpKVxuICAgIH1cbn0iLCJpbXBvcnQgUmVhY3QsIHt1c2VTdGF0ZX0gZnJvbSAncmVhY3QnXG5pbXBvcnQgeyBGb3JtaWt9IGZyb20gXCJmb3JtaWtcIjtcbmltcG9ydCB7TGluaywgUmVkaXJlY3R9IGZyb20gXCJyZWFjdC1yb3V0ZXItZG9tXCI7XG5pbXBvcnQgcyBmcm9tICcuL2Nzcy9mb3JtLnNjc3MnXG5pbXBvcnQgRm9ybUhlYWRlciBmcm9tIFwiLi4vLi4vLi4vLi4vY29tcG9uZW50cy9mb3JtRWxlbWVudHMvZm9ybUhlYWRlclwiO1xuaW1wb3J0IEVycm9yIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy9lcnJvclwiO1xuaW1wb3J0IHt1c2VEaXNwYXRjaCwgdXNlU2VsZWN0b3J9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuaW1wb3J0IHtcbiAgICBpbml0aWFsVmFsdWVzLFxuICAgIHZhbGlkYXRpb25TY2hlbWEsXG4gICAgY3JlYXRlRm9ybSxcbiAgICBvblN1Ym1pdEhhbmRsZXJcbn0gZnJvbSBcIi4vanMvcmVzb3VyY2VzXCI7XG5pbXBvcnQge2NoZWNrVG9rZW59IGZyb20gXCIuLi8uLi8uLi9tYWluL2pzL2NoZWNrVG9rZW5cIjtcbmltcG9ydCB7c2V0QXV0aFRva2VuU3RhdHVzfSBmcm9tIFwiLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9uc1wiO1xuXG5cbi8vINCk0L7RgNC80LAg0YDQtdCz0LjRgdGC0YDQsNGG0LjQuCDQvdC+0LLQvtCz0L4g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPXG5mdW5jdGlvbiBFbnRlckZvcm0oKSB7XG4gICAgXG4gICAgY29uc3QgZGlzcGF0Y2ggPSB1c2VEaXNwYXRjaCgpXG4gICAgXG4gICAgLy8g0J/QvtC70YPRh9GDINC40LzRjyDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0Lgg0YHRgtCw0YLRg9GBINGC0L7QutC10L3QsCDQsNCy0YLQvtGA0LjQt9Cw0YbQuNC4XG4gICAgY29uc3Qge25hbWUsIGF1dGhUb2tlblN0YXR1c30gPSB1c2VTZWxlY3RvcihzdGF0ZSA9PiBzdGF0ZS51c2VyKVxuICAgIFxuICAgIC8vINCf0LXRgNC10LzQtdC90L3QsNGPINCz0LTQtSDQsdGD0LTQtdGCINGF0YDQsNC90LjRgtGB0Y8g0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1INGBINGB0LXRgNCy0LXRgNCwXG4gICAgbGV0IFtzZXJ2ZXJFcnJUZXh0LCBzZXRTZXJ2ZXJFcnJdID0gdXNlU3RhdGUobnVsbClcbiAgICBcbiAgICAvLyDQn9C10YDQtdC80LXQvdC90LDRjyDQs9C00LUg0LHRg9C00LXRgiDRhdGA0LDQvdC40YLRjNGB0Y8g0YPQstC10LTQvtC80LvQtdC90LjQtVxuICAgIGNvbnN0IFtub3RpZmljYXRpb24sIHNldE5vdGlmaWNhdGlvbl0gPSB1c2VTdGF0ZShudWxsKVxuICAgIFxuICAgIFxuICAgIC8vINCV0YHQu9C4INGB0LXRgNCy0LXRgCDRgdC+0L7QsdGJ0LjRgiDQvtCxINC+0YjQuNCx0LrQtSwg0YLQviDQsdGD0LTQtdGCINCy0YvQt9Cy0LDQvSBzZXRTZXJ2ZXJFcnIoKSDQuCDQsiBzZXJ2ZXJFcnJUZXh0INC30LDQvdC10ZHRgtGB0Y8g0YLQtdC60YHRgiDQvtGI0LjQsdC60LguXG4gICAgLy8g0JAg0L7RiNC40LHQutCwINC10YHRgtGMLCDRgtC+INC+0L3QsCDQsdGD0LTQtdGCINC+0YLRgNC40YHQvtCy0LDQvdCwXG4gICAgbGV0IHNlcnZlckVycm9yID0gc2VydmVyRXJyVGV4dFxuICAgICAgICA/IDxFcnJvciB0ZXh0PXtzZXJ2ZXJFcnJUZXh0fSBpbmRlbnQ9JzMnIC8+XG4gICAgICAgIDogbnVsbFxuICAgIFxuICAgIFxuICAgIC8vINCV0YHQu9C4IGF1dGhUb2tlblN0YXR1cyDRgNCw0LLQtdC9INC90YPQu9GOLCDRgtC+INC90LUg0L/QvtC90Y/RgtC90L4g0LXRgdGC0Ywg0LvQuCDQsiDQsdGA0LDRg9C30LXRgNC1INGC0L7QutC10L0g0Lgg0LLQtdGA0LXQvSDQu9C4INC+0L0uINCf0L7RjdGC0L7QvNGDINC/0YDQvtCy0LXRgNGOLlxuICAgIGlmKGF1dGhUb2tlblN0YXR1cyA9PT0gMCkge1xuICAgICAgICBjaGVja1Rva2VuKCkudGhlbigoc3RhdHVzKSA9PiB7XG4gICAgICAgICAgICBkaXNwYXRjaCggc2V0QXV0aFRva2VuU3RhdHVzKHN0YXR1cykgKVxuICAgICAgICB9KVxuICAgIH1cblxuICAgIC8vINCV0YHQu9C4INGC0L7QutC10L0g0LTQtdC50YHRgtCy0LjRgtC10LvQtdC9INC40LvQuCDQsiDQpdGA0LDQvdC40LvQuNGJ0LUg0LXRgdGC0Ywg0LjQvNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjywg0YLQviDRgdC00LXQu9Cw0YLRjCDQv9C10YDQtdCw0LTRgNC10YHQsNGG0LjRjiDQvdCwINGB0YLRgNCw0L3QuNGG0YMg0LfQsNC80LXRgtC+0LouXG4gICAgaWYoYXV0aFRva2VuU3RhdHVzID09PSAyIHx8IG5hbWUpIHJldHVybiA8UmVkaXJlY3QgdG89Jy9ub3RlcycvPlxuICAgIFxuICAgIC8vINCV0YHQu9C4INC10YHRgtGMINGD0LLQtdC00L7QvNC70LXQvdC40LUsINGC0L4g0L7RgtGA0LjRgdC+0LLQsNGC0Ywg0YPQstC10LTQvtC80LvQtdC90LjQvS5cbiAgICBpZihub3RpZmljYXRpb24pIHJldHVybiBub3RpZmljYXRpb25cbiAgICBcbiAgICBcbiAgICAvLyDQntGC0YDQuNGB0L7QstGL0LLQsNC10LzQsNGPINGE0L7RgNC80LBcbiAgICByZXR1cm4gKFxuICAgICAgICA8ZGl2PlxuICAgICAgICAgICAgPEZvcm1IZWFkZXIgdGV4dD0nTG9nIGluJyAvPlxuICAgICAgICAgICAgPEZvcm1pa1xuICAgICAgICAgICAgICAgIGluaXRpYWxWYWx1ZXM9e2luaXRpYWxWYWx1ZXN9XG4gICAgICAgICAgICAgICAgdmFsaWRhdGlvblNjaGVtYT17dmFsaWRhdGlvblNjaGVtYX1cbiAgICAgICAgICAgICAgICBvblN1Ym1pdD17KHZhbHVlcykgPT4gb25TdWJtaXRIYW5kbGVyKHZhbHVlcywgc2V0U2VydmVyRXJyLCBzZXROb3RpZmljYXRpb24sIGRpc3BhdGNoKX1cbiAgICAgICAgICAgID5cbiAgICAgICAgICAgICAgICB7IGZvcm1payA9PiBjcmVhdGVGb3JtKGZvcm1paywgc2V0U2VydmVyRXJyKSB9XG4gICAgICAgICAgICA8L0Zvcm1paz5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAge3NlcnZlckVycm9yfVxuICAgIFxuICAgICAgICAgICAgPGRpdiBjbGFzc05hbWU9e3MuYm90dG9tUGFydH0+XG4gICAgICAgICAgICAgICAgPHA+QXJlIHlvdSBhIG5ldyB1c2VyPyA8TGluayB0bz0nL3JlZyc+U2lnbiB1cC48L0xpbms+PC9wPlxuICAgICAgICAgICAgICAgIDxwPkRvbid0IHJlbWVtYmVyIHBhc3N3b3JkPyA8TGluayB0bz0nL3Bhc3N3b3JkLXJlc2V0Jz5SZXNldCBwYXNzd29yZC48L0xpbms+PC9wPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIClcbn1cblxuXG5leHBvcnQgZGVmYXVsdCBFbnRlckZvcm0iLCJpbXBvcnQgRW50ZXJGb3JtIGZyb20gJy4vZW50ZXJGb3JtJ1xuZXhwb3J0IGRlZmF1bHQgRW50ZXJGb3JtIiwiaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0J1xuaW1wb3J0IFRvcE5hdmlnYXRpb24gZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvdG9wTmF2RW50cmFuY2VcIjtcbmltcG9ydCBBdXRoU3BsaXRDb250YWluZXIgZnJvbSBcIi4uLy4uL2NvbXBvbmVudHMvY29udGFpbmVycy9hdXRoU3BsaXRDb250YWluZXJcIjtcbmltcG9ydCBFbnRlckZvcm0gZnJvbSBcIi4vY29tcG9uZW50cy9lbnRlckZvcm1cIjtcblxuXG5mdW5jdGlvbiBFbnRlclBhZ2UoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUb3BOYXZpZ2F0aW9uIC8+XG4gICAgICAgICAgICA8QXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxFbnRlckZvcm0gLz5cbiAgICAgICAgICAgIDwvQXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICA8Lz5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEVudGVyUGFnZSIsImltcG9ydCBFbnRlclBhZ2UgZnJvbSAnLi9lbnRlclBhZ2UnXG5leHBvcnQgZGVmYXVsdCBFbnRlclBhZ2UiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBZdXAgZnJvbSBcInl1cFwiO1xuaW1wb3J0IGJyb3dzZXJDb25maWcgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYnJvd3NlckNvbmZpZydcbmltcG9ydCB7Rm9ybX0gZnJvbSBcImZvcm1pa1wiO1xuaW1wb3J0IEZpZWxkc0RpdmlkZXJXcmFwcGVyIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1Db250YWluZXJzL2ZpZWxkc0RpdmlkZXJXcmFwcGVyXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy90ZXh0SW5wdXRcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2J1dHRvblwiO1xuaW1wb3J0IHtzZXRVc2VyfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9uc1wiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbiBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy92YXJpb3VzL25vdGlmaWNhdGlvblwiO1xuXG5cbi8vINCd0LDRh9Cw0LvRjNC90YvQtSDQt9C90LDRh9C10L3QuNGPINC/0L7Qu9C10Lkg0YTQvtGA0LzRi1xuZXhwb3J0IGNvbnN0IGluaXRpYWxWYWx1ZXMgPSB7XG4gICAgZW1haWw6ICcnXG59XG5cbi8vINCf0YDQvtCy0LXRgNC60LAg0L/QvtC70LXQuSDRhNC+0YDQvNGLXG5leHBvcnQgY29uc3QgdmFsaWRhdGlvblNjaGVtYSA9IFl1cC5vYmplY3Qoe1xuICAgIGVtYWlsOiBZdXAuc3RyaW5nKClcbiAgICAgICAgLnJlcXVpcmVkKCdUaGlzIGZpZWxkIGlzIHJlcXVpcmVkJylcbiAgICAgICAgLmVtYWlsKCdJbnZhbGlkIGVtYWlsIGFkZHJlc3MnKVxufSlcblxuXG4vKipcbiAqINCk0YPQvdC60YbQuNGPINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC+0YLRgNC40YHQvtCy0YvQstCw0LXQvNGD0Y4g0YTQvtGA0LzRg1xuICogQHBhcmFtIHtPYmplY3R9IGZvcm1payDigJQg0L7QsdGK0LXQutGCINGBINGB0L4g0YHQstC+0LnRgdGC0LLQsNC80Lgg0Lgg0LzQtdGC0L7QtNCw0LzQuCDQstC+0LfQsNGA0LDRidCw0LXQvNGL0LzQuCDQsdC40LHQu9C40L7RgtC10LrQvtC5IEZvcm1pa1xuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0U2VydmVyRXJyIOKAlCDRhNGD0L3QutGG0LjRjyDQv9C+0LrQsNC30YvQstCw0Y7RidCw0Y8g0Lgg0YHQutGA0YvQstCw0Y7RidCw0Y8g0YLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0L7RgiDRgdC10YDQstC10YDQsC5cbiAqINCSINGN0YLQvtC5INGE0YPQvdC60YbQuNC4INC+0L3QsCDQv9C+0YHRgtC+0Y/QvdC90L4g0LHRg9C00LXRgiDQt9Cw0L/Rg9GB0LrQsNGC0YzRgdGPINCyINC30L3QsNGH0LXQvdC40LggbnVsbFxuICog0YfRgtC+0LHRiyDQv9C+0YHQu9C1INC70Y7QsdC+0LPQviDQuNC30LzQtdC90LXQvdC40Y8g0YTQvtGA0LzRiyDRgtC10LrRgdGCINC+0YjQuNCx0LrQuCDRgdC10YDQstC10YDQsCDQsdGLINGB0LrRgNGL0LLQsNC70YHRjy5cbiAqIEByZXR1cm5zIHsqfVxuICovXG5leHBvcnQgZnVuY3Rpb24gY3JlYXRlRm9ybShmb3JtaWssIHNldFNlcnZlckVycikge1xuICAgIFxuICAgIC8vINCV0YHQu9C4INGE0L7RgNC80YMg0L7RgtC/0YDQsNCy0LjQu9C4LCDRgtC+INC30LDQsdC70L7QutC40YDQvtCy0LDRgtGMINC/0L7Qu9GPINCy0LLQvtC00LBcbiAgICBsZXQgaXNEaXNhYmxlZCA9IGZvcm1pay5pc1N1Ym1pdHRpbmdcbiAgICBcbiAgICByZXR1cm4gKFxuICAgICAgICA8Rm9ybSBvbkNoYW5nZT17KCkgPT4gc2V0U2VydmVyRXJyKG51bGwpfT5cbiAgICAgICAgICAgIDxGaWVsZHNEaXZpZGVyV3JhcHBlciBpbmRlbnQ9JzInPlxuICAgICAgICAgICAgICAgIDxUZXh0SW5wdXQgbGFiZWw9J0VtYWlsJyB0eXBlPSdlbWFpbCcgbmFtZT0nZW1haWwnIGRpc2FibGVkPXtpc0Rpc2FibGVkfSBhdXRvQ29tcGxldGU9XCJlbWFpbFwiIC8+XG4gICAgICAgICAgICA8L0ZpZWxkc0RpdmlkZXJXcmFwcGVyPlxuICAgICAgICAgICAgXG4gICAgICAgICAgICA8U3VibWl0QnRuIGZvcm1paz17Zm9ybWlrfSAvPlxuICAgICAgICA8L0Zvcm0+XG4gICAgKVxufVxuXG4vKipcbiAqINCk0YPQvdC60YbQuNGPINCy0L7Qt9Cy0YDQsNGJ0LDQtdGCINC60L3QvtC/0LrRgyDQvtGC0L/RgNCw0LLQutC4INGE0L7RgNC80YtcbiAqIEBwYXJhbSB7T2JqZWN0fSBmb3JtaWsg4oCUINC+0LHRitC10LrRgiDRgSDRgdC+INGB0LLQvtC50YHRgtCy0LDQvNC4INC4INC80LXRgtC+0LTQsNC80Lgg0LLQvtC30LDRgNCw0YnQsNC10LzRi9C80Lgg0LHQuNCx0LvQuNC+0YLQtdC60L7QuSBGb3JtaWtcbiAqIEByZXR1cm5zIHsqfVxuICovXG5mdW5jdGlvbiBTdWJtaXRCdG4oe2Zvcm1pa30pIHtcbiAgICBcbiAgICAvLyDQkNGC0YDQuNCx0YPRgtGLINC60L3QvtC/0LrQuFxuICAgIGNvbnN0IGF0dHJzID0ge1xuICAgICAgICB0ZXh0OiAnU3VibWl0JyxcbiAgICAgICAgdHlwZTogJ3N1Ym1pdCdcbiAgICB9XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0LIg0YTQvtGA0LzQtSDQtdGB0YLRjCDQvtGI0LjQsdC60Lgg0LjQu9C4XG4gICAgLy8g0YTQvtGA0LzRgyDQtdGJ0LUg0L3QtSDQt9Cw0L/QvtC70L3Rj9C70Lgg0LjQu9C4XG4gICAgLy8g0YTQvtGA0LzRgyDRg9C20LUg0L7RgtC/0YDQsNCy0LjQu9C4LFxuICAgIC8vINGC0L4g0LHQu9C+0LrQuNGA0L7QstCw0YLRjCDQutC90L7Qv9C60YMg0L7RgtC/0YDQsNCy0LrQuFxuICAgIGlmKCFmb3JtaWsuaXNWYWxpZCB8fCAhZm9ybWlrLmRpcnR5IHx8IGZvcm1pay5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgYXR0cnMuZGlzYWJsZWQgPSB0cnVlXG4gICAgfVxuICAgIFxuICAgIC8vINCV0YHQu9C4INGE0L7RgNC80YMg0L7RgtC/0YDQsNCy0LjQu9C4LCDRgtC+INC/0L7QutCw0LfQsNGC0Ywg0LrRgNGD0YLQuNC70LrRg1xuICAgIC8vINGH0YLQvtCx0Ysg0YPQstC10LTQvtC80LjRgtGMINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQvtCxINC+0LbQuNC00LDQvdC40Lgg0L7RgtCy0LXRgtCwINGB0LXRgNCy0LXRgNCwXG4gICAgaWYoZm9ybWlrLmlzU3VibWl0dGluZykge1xuICAgICAgICBhdHRycy5zaWduID0gJ3NwaW5uZXInXG4gICAgfVxuICAgIC8vIFRPRE8g0JTRg9C80LDRjiDQv9GA0Lgg0L7RgtC/0YDQsNCy0LrQtSDQvdCwINC60L3QvtC/0LrQtSDQtNC+0LvQttC10L0g0L/QuNGB0LDRgtGM0YHRjyDQvdC+0LLRi9C5INGC0LXQutGB0YIuINCn0YLQvi3RgtC+INCy0YDQvtC00LUgU2VuZGluZy4uLlxuICAgIFxuICAgIHJldHVybiA8QnV0dG9uIHsuLi5hdHRyc30gLz5cbn1cblxuLyoqXG4gKiDQntCx0YDQsNCx0L7RgtGH0LjQuiDQvtGC0L/RgNCw0LLQutC4INGE0L7RgNC80YtcbiAqIEBwYXJhbSB7T2JqZWN0fSB2YWx1ZXMg4oCUINC+0LHRitC10LrRgiDRgSDQstCy0LXQtNGR0L3QvdGL0LzQuCDQt9C90LDRh9C10L3QuNGP0LzQuCDQsiDQv9C+0LvRjyDRhNC+0YDQvNGLLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0U2VydmVyRXJyIOKAlCDRhNGD0L3QutGG0LjRjyDQutGD0LTQsCDQvdGD0LbQvdC+INC/0LXRgNC10LTQsNGC0Ywg0YLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0L7RgtC00LDQvdC90L7QuSDRgdC10YDQstC10YDQvtC8LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gc2V0Tm90aWZpY2F0aW9uIOKAlCDRhNGD0L3QutGG0LjRjyDQvtGC0YDQuNGB0L7QstGL0LLQsNGO0YnQsNGPINGD0LLQtdC00L7QvNC70LXQvdC40LUuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBkaXNwYXRjaCDigJQg0LTQuNGB0L/QsNGC0YfQtdGAINGN0LrRiNC10L0t0YTRg9C90LrRhtC40LguXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBvblN1Ym1pdEhhbmRsZXIodmFsdWVzLCBzZXRTZXJ2ZXJFcnIsIHNldE5vdGlmaWNhdGlvbiwgZGlzcGF0Y2gpIHtcbiAgICBcbiAgICAvLyDQn9C+INC60LDQutC+0LzRgyDQsNC00YDQtdGB0YMg0LHRg9C00YMg0LTQtdC70LDRgtGMINC30LDQv9GA0L7RgSDQvdCwINCy0YXQvtC0INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRj1xuICAgIGNvbnN0IHtzZXJ2ZXJPcmlnaW4sIGlzRGV2ZWxvcG1lbnR9ID0gYnJvd3NlckNvbmZpZ1xuICAgIGNvbnN0IGFwaVVybCA9IHNlcnZlck9yaWdpbiArICcvYXBpL3YxL3VzZXJzL2ZvcmdvdFBhc3N3b3JkJ1xuICAgIFxuICAgIC8vINCf0LDRgNCw0LzQtdGC0YDRiyDQt9Cw0L/RgNC+0YHQsFxuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIG1ldGhvZDogJ1BPU1QnLFxuICAgICAgICBoZWFkZXJzOiB7ICdDb250ZW50LVR5cGUnOiAnYXBwbGljYXRpb24vanNvbicgfSxcbiAgICAgICAgYm9keTogSlNPTi5zdHJpbmdpZnkodmFsdWVzKVxuICAgIH1cbiAgICBcbiAgICAvLyDQodC00LXQu9Cw0Y4g0LfQsNC/0YDQvtGBINC90LAg0YHQtdGA0LLQtdGAINC4INC/0L7Qu9GD0YfQtdC90L3Ri9C1INC00LDQvdC90YvQtSDQv9C+0LzQtdGJ0YMg0LIgc2VydmVyUmVzXG4gICAgY29uc3Qgc2VydmVyUmVzID0gYXdhaXQgZmV0Y2goYXBpVXJsLCBvcHRpb25zKVxuICAgICAgICAudGhlbihyZXMgPT4gcmVzLmpzb24oKSlcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlcylcbiAgICAgICAgLmNhdGNoKGVyciA9PiBjb25zb2xlLmxvZyhlcnIpKVxuICAgIFxuICAgIGNvbnNvbGUubG9nKHNlcnZlclJlcyk7XG4gICAgXG4gICAgLyog0JXRgdC70Lgg0LIgc2VydmVyUmVzINCx0YPQtNC10YIg0L7QsdGK0LXQutGCINGBINC+0YjQuNCx0LrQvtC5IDQwNCDQt9C90LDRh9C40YIg0LLQstC10LvQuCDQvdC10LfQsNGA0LXQs9C40YHRgtGA0LjRgNC+0LLQsNC90L3Rg9GOINCyINCx0LDQt9C1INC00LDQvdC90YvRhSDQv9C+0YfRgtGDLlxuICAgINCb0LjQsdC+INC/0LXRgNC10LTQsNC70Lgg0L/QvtGH0YLRgyDQsiDQvdC10L/RgNCw0LLQuNC70YzQvdC+0Lwg0YTQvtGA0LzQsNGC0LUuINCf0L7QutCw0LfQsNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1OlxuICAgIHtcbiAgICAgICAgXCJzdGF0dXNcIjogXCJmYWlsXCIsXG4gICAgICAgIFwiZXJyb3JcIjoge1xuICAgICAgICAgICAgXCJzdGF0dXNDb2RlXCI6IDQwNCxcbiAgICAgICAgICAgIFwiaXNPcGVyYXRpb25hbFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtZXNzYWdlXCI6IFwiVGhlcmUgaXMgbm8gdXNlciB3aXRoIHRoaXMgZW1haWwgYWRkcmVzc1wiXG4gICAgICAgIH0sXG4gICAgfSovXG4gICAgaWYoc2VydmVyUmVzLnN0YXR1cyA9PT0gJ2ZhaWwnICYmIHNlcnZlclJlcy5lcnJvci5zdGF0dXNDb2RlID09PSA0MDQpIHtcbiAgICAgICAgc2V0U2VydmVyRXJyKHNlcnZlclJlcy5lcnJvci5tZXNzYWdlKVxuICAgIH1cbiAgICBcbiAgICAvKiDQldGB0LvQuCDQstGB0ZEg0LLQtdGA0L3Qviwg0YLQviDQsiBzZXJ2ZXJSZXMg0LHRg9C00LXRgiDQvtCx0YrQtdC60YIg0YEg0YPRgdC/0LXRhdC+0Lw6XG4gICAge1xuICAgICAgICBcInN0YXR1c1wiOiBcInN1Y2Nlc3NcIixcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwibWVzc2FnZVwiOiBcIkVtYWlsIGhhcyBiZWVuIHNlbnQhXCJcbiAgICAgICAgfVxuICAgIH0qL1xuICAgIGlmKHNlcnZlclJlcy5zdGF0dXMgPT09ICdzdWNjZXNzJykge1xuICAgICAgICBjb25zdCBtYWlsU2VydmljZSA9ICdodHRwczovLycgKyB2YWx1ZXMuZW1haWwuc3BsaXQoJ0AnKVsxXVxuICAgICAgICBzZXROb3RpZmljYXRpb24oXG4gICAgICAgICAgICA8Tm90aWZpY2F0aW9uPkEgbGV0dGVyIHdpdGggYSByZXNldCBwYXNzd29yZCBsaW5rIGhhcyBiZWVuIHNlbnQgdG8geW91ciA8YSBocmVmPXttYWlsU2VydmljZX0+ZW1haWw8L2E+LiBDbGljayBvbiBpdCB0byByZXNldCB5b3VyIHBhc3N3b3JkLjwvTm90aWZpY2F0aW9uPlxuICAgICAgICApXG4gICAgfVxufSIsImltcG9ydCBSZWFjdCwge3VzZVN0YXRlfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IEZvcm1pa30gZnJvbSBcImZvcm1pa1wiO1xuaW1wb3J0IHtMaW5rLCBSZWRpcmVjdH0gZnJvbSBcInJlYWN0LXJvdXRlci1kb21cIjtcbmltcG9ydCBzIGZyb20gJy4vY3NzL2Zvcm0uc2NzcydcbmltcG9ydCBGb3JtSGVhZGVyIGZyb20gXCIuLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy9mb3JtSGVhZGVyXCI7XG5pbXBvcnQgRXJyb3IgZnJvbSBcIi4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2Vycm9yXCI7XG5pbXBvcnQge3VzZURpc3BhdGNoLCB1c2VTZWxlY3Rvcn0gZnJvbSBcInJlYWN0LXJlZHV4XCI7XG5pbXBvcnQge1xuICAgIGluaXRpYWxWYWx1ZXMsXG4gICAgdmFsaWRhdGlvblNjaGVtYSxcbiAgICBjcmVhdGVGb3JtLFxuICAgIG9uU3VibWl0SGFuZGxlclxufSBmcm9tIFwiLi9qcy9yZXNvdXJjZXNcIjtcbmltcG9ydCB7Y2hlY2tUb2tlbn0gZnJvbSBcIi4uLy4uLy4uL21haW4vanMvY2hlY2tUb2tlblwiO1xuaW1wb3J0IHtzZXRBdXRoVG9rZW5TdGF0dXN9IGZyb20gXCIuLi8uLi8uLi8uLi9zdG9yZS9hY3Rpb25zXCI7XG5cblxuLy8g0KTQvtGA0LzQsCDRgNC10LPQuNGB0YLRgNCw0YbQuNC4INC90L7QstC+0LPQviDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbmZ1bmN0aW9uIEZvcmdvdFBhc3N3b3JkRm9ybSgpIHtcbiAgICBcbiAgICBjb25zdCBkaXNwYXRjaCA9IHVzZURpc3BhdGNoKClcbiAgICBcbiAgICAvLyDQn9C+0LvRg9GH0YMg0LjQvNGPINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQuCDRgdGC0LDRgtGD0YEg0YLQvtC60LXQvdCwINCw0LLRgtC+0YDQuNC30LDRhtC40LhcbiAgICBjb25zdCB7bmFtZSwgYXV0aFRva2VuU3RhdHVzfSA9IHVzZVNlbGVjdG9yKHN0YXRlID0+IHN0YXRlLnVzZXIpXG4gICAgXG4gICAgLy8g0J/QtdGA0LXQvNC10L3QvdCw0Y8g0LPQtNC1INCx0YPQtNC10YIg0YXRgNCw0L3QuNGC0YHRjyDRgdC+0L7QsdGJ0LXQvdC40LUg0L7QsSDQvtGI0LjQsdC60LUg0YEg0YHQtdGA0LLQtdGA0LBcbiAgICBsZXQgW3NlcnZlckVyclRleHQsIHNldFNlcnZlckVycl0gPSB1c2VTdGF0ZShudWxsKVxuICAgIFxuICAgIC8vINCf0LXRgNC10LzQtdC90L3QsNGPINCz0LTQtSDQsdGD0LTQtdGCINGF0YDQsNC90LjRgtGM0YHRjyDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1XG4gICAgY29uc3QgW25vdGlmaWNhdGlvbiwgc2V0Tm90aWZpY2F0aW9uXSA9IHVzZVN0YXRlKG51bGwpXG4gICAgXG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0YHQtdGA0LLQtdGAINGB0L7QvtCx0YnQuNGCINC+0LEg0L7RiNC40LHQutC1LCDRgtC+INCx0YPQtNC10YIg0LLRi9C30LLQsNC9IHNldFNlcnZlckVycigpINC4INCyIHNlcnZlckVyclRleHQg0LfQsNC90LXRkdGC0YHRjyDRgtC10LrRgdGCINC+0YjQuNCx0LrQuC5cbiAgICAvLyDQkCDQvtGI0LjQsdC60LAg0LXRgdGC0YwsINGC0L4g0L7QvdCwINCx0YPQtNC10YIg0L7RgtGA0LjRgdC+0LLQsNC90LBcbiAgICBsZXQgc2VydmVyRXJyb3IgPSBzZXJ2ZXJFcnJUZXh0XG4gICAgICAgID8gPEVycm9yIHRleHQ9e3NlcnZlckVyclRleHR9IGluZGVudD0nMycgLz5cbiAgICAgICAgOiBudWxsXG4gICAgXG4gICAgXG4gICAgLy8g0JXRgdC70LggYXV0aFRva2VuU3RhdHVzINGA0LDQstC10L0g0L3Rg9C70Y4sINGC0L4g0L3QtSDQv9C+0L3Rj9GC0L3QviDQtdGB0YLRjCDQu9C4INCyINCx0YDQsNGD0LfQtdGA0LUg0YLQvtC60LXQvSDQuCDQstC10YDQtdC9INC70Lgg0L7QvS4g0J/QvtGN0YLQvtC80YMg0L/RgNC+0LLQtdGA0Y4uXG4gICAgaWYoYXV0aFRva2VuU3RhdHVzID09PSAwKSB7XG4gICAgICAgIGNoZWNrVG9rZW4oKS50aGVuKChzdGF0dXMpID0+IHtcbiAgICAgICAgICAgIGRpc3BhdGNoKCBzZXRBdXRoVG9rZW5TdGF0dXMoc3RhdHVzKSApXG4gICAgICAgIH0pXG4gICAgfVxuXG4gICAgLy8g0JXRgdC70Lgg0YLQvtC60LXQvSDQtNC10LnRgdGC0LLQuNGC0LXQu9C10L0g0LjQu9C4INCyINCl0YDQsNC90LjQu9C40YnQtSDQtdGB0YLRjCDQuNC80Y8g0L/QvtC70YzQt9C+0LLQsNGC0LXQu9GPLCDRgtC+INGB0LTQtdC70LDRgtGMINC/0LXRgNC10LDQtNGA0LXRgdCw0YbQuNGOINC90LAg0YHRgtGA0LDQvdC40YbRgyDQt9Cw0LzQtdGC0L7Qui5cbiAgICBpZihhdXRoVG9rZW5TdGF0dXMgPT09IDIgfHwgbmFtZSkgcmV0dXJuIDxSZWRpcmVjdCB0bz0nL25vdGVzJy8+XG4gICAgXG4gICAgLy8g0JXRgdC70Lgg0LXRgdGC0Ywg0YPQstC10LTQvtC80LvQtdC90LjQtSwg0YLQviDQvtGC0YDQuNGB0L7QstCw0YLRjCDRg9Cy0LXQtNC+0LzQu9C10L3QuNC9LlxuICAgIGlmKG5vdGlmaWNhdGlvbikgcmV0dXJuIG5vdGlmaWNhdGlvblxuICAgIFxuICAgIFxuICAgIC8vINCe0YLRgNC40YHQvtCy0YvQstCw0LXQvNCw0Y8g0YTQvtGA0LzQsFxuICAgIHJldHVybiAoXG4gICAgICAgIDxkaXY+XG4gICAgICAgICAgICA8Rm9ybUhlYWRlciB0ZXh0PSdSZXNldCBQYXNzd29yZCcgLz5cbiAgICAgICAgICAgIDxGb3JtaWtcbiAgICAgICAgICAgICAgICBpbml0aWFsVmFsdWVzPXtpbml0aWFsVmFsdWVzfVxuICAgICAgICAgICAgICAgIHZhbGlkYXRpb25TY2hlbWE9e3ZhbGlkYXRpb25TY2hlbWF9XG4gICAgICAgICAgICAgICAgb25TdWJtaXQ9eyh2YWx1ZXMpID0+IG9uU3VibWl0SGFuZGxlcih2YWx1ZXMsIHNldFNlcnZlckVyciwgc2V0Tm90aWZpY2F0aW9uLCBkaXNwYXRjaCl9XG4gICAgICAgICAgICA+XG4gICAgICAgICAgICAgICAgeyBmb3JtaWsgPT4gY3JlYXRlRm9ybShmb3JtaWssIHNldFNlcnZlckVycikgfVxuICAgICAgICAgICAgPC9Gb3JtaWs+XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHtzZXJ2ZXJFcnJvcn1cbiAgICAgICAgPC9kaXY+XG4gICAgKVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEZvcmdvdFBhc3N3b3JkRm9ybSIsImltcG9ydCBGb3Jnb3RQYXNzd29yZEZvcm0gZnJvbSAnLi9mb3Jnb3RQYXNzd29yZEZvcm0nXG5leHBvcnQgZGVmYXVsdCBGb3Jnb3RQYXNzd29yZEZvcm0iLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5pbXBvcnQgVG9wTmF2aWdhdGlvbiBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy90b3BOYXZFbnRyYW5jZVwiO1xuaW1wb3J0IEF1dGhTcGxpdENvbnRhaW5lciBmcm9tIFwiLi4vLi4vY29tcG9uZW50cy9jb250YWluZXJzL2F1dGhTcGxpdENvbnRhaW5lclwiO1xuaW1wb3J0IEZvcmdvdFBhc3N3b3JkRm9ybSBmcm9tIFwiLi9jb21wb25lbnRzL2ZvcmdvdFBhc3N3b3JkRm9ybVwiO1xuXG5mdW5jdGlvbiBGb3Jnb3RQYXNzd29yZFBhZ2UoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUb3BOYXZpZ2F0aW9uIC8+XG4gICAgICAgICAgICA8QXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxGb3Jnb3RQYXNzd29yZEZvcm0gLz5cbiAgICAgICAgICAgIDwvQXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICA8Lz5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IEZvcmdvdFBhc3N3b3JkUGFnZSIsImltcG9ydCBGb3Jnb3RQYXNzd29yZFBhZ2UgZnJvbSAnLi9mb3Jnb3RQYXNzd29yZFBhZ2UnXG5leHBvcnQgZGVmYXVsdCBGb3Jnb3RQYXNzd29yZFBhZ2UiLCJpbXBvcnQgUmVhY3QgZnJvbSBcInJlYWN0XCI7XG5pbXBvcnQgKiBhcyBZdXAgZnJvbSBcInl1cFwiO1xuaW1wb3J0IGJyb3dzZXJDb25maWcgZnJvbSAnLi4vLi4vLi4vLi4vLi4vYnJvd3NlckNvbmZpZydcbmltcG9ydCB7Rm9ybX0gZnJvbSBcImZvcm1pa1wiO1xuaW1wb3J0IEZpZWxkc0RpdmlkZXJXcmFwcGVyIGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1Db250YWluZXJzL2ZpZWxkc0RpdmlkZXJXcmFwcGVyXCI7XG5pbXBvcnQgVGV4dElucHV0IGZyb20gXCIuLi8uLi8uLi8uLi8uLi9jb21wb25lbnRzL2Zvcm1FbGVtZW50cy90ZXh0SW5wdXRcIjtcbmltcG9ydCBCdXR0b24gZnJvbSBcIi4uLy4uLy4uLy4uLy4uL2NvbXBvbmVudHMvZm9ybUVsZW1lbnRzL2J1dHRvblwiO1xuaW1wb3J0IHtzZXRVc2VyfSBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vc3RvcmUvYWN0aW9uc1wiO1xuaW1wb3J0IE5vdGlmaWNhdGlvbiBmcm9tIFwiLi4vLi4vLi4vLi4vLi4vY29tcG9uZW50cy92YXJpb3VzL25vdGlmaWNhdGlvblwiO1xuXG5cbi8vINCd0LDRh9Cw0LvRjNC90YvQtSDQt9C90LDRh9C10L3QuNGPINC/0L7Qu9C10Lkg0YTQvtGA0LzRi1xuZXhwb3J0IGNvbnN0IGluaXRpYWxWYWx1ZXMgPSB7XG4gICAgZW1haWw6ICcnLFxuICAgIHBhc3N3b3JkOiAnJ1xufVxuXG4vLyDQn9GA0L7QstC10YDQutCwINC/0L7Qu9C10Lkg0YTQvtGA0LzRi1xuZXhwb3J0IGNvbnN0IHZhbGlkYXRpb25TY2hlbWEgPSBZdXAub2JqZWN0KHtcbiAgICBlbWFpbDogWXVwLnN0cmluZygpXG4gICAgICAgIC5yZXF1aXJlZCgnVGhpcyBmaWVsZCBpcyByZXF1aXJlZCcpXG4gICAgICAgIC5lbWFpbCgnSW52YWxpZCBlbWFpbCBhZGRyZXNzJyksXG4gICAgcGFzc3dvcmQ6IFl1cC5zdHJpbmcoKVxuICAgICAgICAucmVxdWlyZWQoJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnKVxuICAgICAgICAubWluKDQsICdNdXN0IGJlIDQgY2hhcmFjdGVycyBvciBtb3JlJylcbn0pXG5cblxuLyoqXG4gKiDQpNGD0L3QutGG0LjRjyDQstC+0LfQstGA0LDRidCw0LXRgiDQvtGC0YDQuNGB0L7QstGL0LLQsNC10LzRg9GOINGE0L7RgNC80YNcbiAqIEBwYXJhbSB7T2JqZWN0fSBmb3JtaWsg4oCUINC+0LHRitC10LrRgiDRgSDRgdC+INGB0LLQvtC50YHRgtCy0LDQvNC4INC4INC80LXRgtC+0LTQsNC80Lgg0LLQvtC30LDRgNCw0YnQsNC10LzRi9C80Lgg0LHQuNCx0LvQuNC+0YLQtdC60L7QuSBGb3JtaWtcbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNldFNlcnZlckVyciDigJQg0YTRg9C90LrRhtC40Y8g0L/QvtC60LDQt9GL0LLQsNGO0YnQsNGPINC4INGB0LrRgNGL0LLQsNGO0YnQsNGPINGC0LXQutGB0YIg0L7RiNC40LHQutC4INC+0YIg0YHQtdGA0LLQtdGA0LAuXG4gKiDQkiDRjdGC0L7QuSDRhNGD0L3QutGG0LjQuCDQvtC90LAg0L/QvtGB0YLQvtGP0L3QvdC+INCx0YPQtNC10YIg0LfQsNC/0YPRgdC60LDRgtGM0YHRjyDQsiDQt9C90LDRh9C10L3QuNC4IG51bGxcbiAqINGH0YLQvtCx0Ysg0L/QvtGB0LvQtSDQu9GO0LHQvtCz0L4g0LjQt9C80LXQvdC10L3QuNGPINGE0L7RgNC80Ysg0YLQtdC60YHRgiDQvtGI0LjQsdC60Lgg0YHQtdGA0LLQtdGA0LAg0LHRiyDRgdC60YDRi9Cy0LDQu9GB0Y8uXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZvcm0oZm9ybWlrLCBzZXRTZXJ2ZXJFcnIpIHtcbiAgICBcbiAgICAvLyDQldGB0LvQuCDRhNC+0YDQvNGDINC+0YLQv9GA0LDQstC40LvQuCwg0YLQviDQt9Cw0LHQu9C+0LrQuNGA0L7QstCw0YLRjCDQv9C+0LvRjyDQstCy0L7QtNCwXG4gICAgbGV0IGlzRGlzYWJsZWQgPSBmb3JtaWsuaXNTdWJtaXR0aW5nXG4gICAgXG4gICAgcmV0dXJuIChcbiAgICAgICAgPEZvcm0gb25DaGFuZ2U9eygpID0+IHNldFNlcnZlckVycihudWxsKX0+XG4gICAgICAgICAgICA8RmllbGRzRGl2aWRlcldyYXBwZXIgaW5kZW50PScyJz5cbiAgICAgICAgICAgICAgICA8VGV4dElucHV0IGxhYmVsPSdFbWFpbCcgdHlwZT0nZW1haWwnIG5hbWU9J2VtYWlsJyBkaXNhYmxlZD17aXNEaXNhYmxlZH0gYXV0b0NvbXBsZXRlPVwiZW1haWxcIiAvPlxuICAgICAgICAgICAgPC9GaWVsZHNEaXZpZGVyV3JhcHBlcj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPEZpZWxkc0RpdmlkZXJXcmFwcGVyIGluZGVudD0nMic+XG4gICAgICAgICAgICAgICAgPFRleHRJbnB1dCBsYWJlbD0nUGFzc3dvcmQnIHR5cGU9J3Bhc3N3b3JkJyBuYW1lPSdwYXNzd29yZCcgZGlzYWJsZWQ9e2lzRGlzYWJsZWR9IGF1dG9Db21wbGV0ZT1cImN1cnJlbnQtcGFzc3dvcmRcIiAvPlxuICAgICAgICAgICAgPC9GaWVsZHNEaXZpZGVyV3JhcHBlcj5cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgPFN1Ym1pdEJ0biBmb3JtaWs9e2Zvcm1pa30gLz5cbiAgICAgICAgPC9Gb3JtPlxuICAgIClcbn1cblxuLyoqXG4gKiDQpNGD0L3QutGG0LjRjyDQstC+0LfQstGA0LDRidCw0LXRgiDQutC90L7Qv9C60YMg0L7RgtC/0YDQsNCy0LrQuCDRhNC+0YDQvNGLXG4gKiBAcGFyYW0ge09iamVjdH0gZm9ybWlrIOKAlCDQvtCx0YrQtdC60YIg0YEg0YHQviDRgdCy0L7QudGB0YLQstCw0LzQuCDQuCDQvNC10YLQvtC00LDQvNC4INCy0L7Qt9Cw0YDQsNGJ0LDQtdC80YvQvNC4INCx0LjQsdC70LjQvtGC0LXQutC+0LkgRm9ybWlrXG4gKiBAcmV0dXJucyB7Kn1cbiAqL1xuZnVuY3Rpb24gU3VibWl0QnRuKHtmb3JtaWt9KSB7XG4gICAgXG4gICAgLy8g0JDRgtGA0LjQsdGD0YLRiyDQutC90L7Qv9C60LhcbiAgICBjb25zdCBhdHRycyA9IHtcbiAgICAgICAgdGV4dDogJ1N1Ym1pdCcsXG4gICAgICAgIHR5cGU6ICdzdWJtaXQnXG4gICAgfVxuICAgIFxuICAgIC8vINCV0YHQu9C4INCyINGE0L7RgNC80LUg0LXRgdGC0Ywg0L7RiNC40LHQutC4INC40LvQuFxuICAgIC8vINGE0L7RgNC80YMg0LXRidC1INC90LUg0LfQsNC/0L7Qu9C90Y/Qu9C4INC40LvQuFxuICAgIC8vINGE0L7RgNC80YMg0YPQttC1INC+0YLQv9GA0LDQstC40LvQuCxcbiAgICAvLyDRgtC+INCx0LvQvtC60LjRgNC+0LLQsNGC0Ywg0LrQvdC+0L/QutGDINC+0YLQv9GA0LDQstC60LhcbiAgICBpZighZm9ybWlrLmlzVmFsaWQgfHwgIWZvcm1pay5kaXJ0eSB8fCBmb3JtaWsuaXNTdWJtaXR0aW5nKSB7XG4gICAgICAgIGF0dHJzLmRpc2FibGVkID0gdHJ1ZVxuICAgIH1cbiAgICBcbiAgICAvLyDQldGB0LvQuCDRhNC+0YDQvNGDINC+0YLQv9GA0LDQstC40LvQuCwg0YLQviDQv9C+0LrQsNC30LDRgtGMINC60YDRg9GC0LjQu9C60YNcbiAgICAvLyDRh9GC0L7QsdGLINGD0LLQtdC00L7QvNC40YLRjCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0L7QsSDQvtC20LjQtNCw0L3QuNC4INC+0YLQstC10YLQsCDRgdC10YDQstC10YDQsFxuICAgIGlmKGZvcm1pay5pc1N1Ym1pdHRpbmcpIHtcbiAgICAgICAgYXR0cnMuc2lnbiA9ICdzcGlubmVyJ1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gPEJ1dHRvbiB7Li4uYXR0cnN9IC8+XG59XG5cbi8qKlxuICog0J7QsdGA0LDQsdC+0YLRh9C40Log0L7RgtC/0YDQsNCy0LrQuCDRhNC+0YDQvNGLXG4gKiBAcGFyYW0ge09iamVjdH0gdmFsdWVzIOKAlCDQvtCx0YrQtdC60YIg0YEg0LLQstC10LTRkdC90L3Ri9C80Lgg0LfQvdCw0YfQtdC90LjRj9C80Lgg0LIg0L/QvtC70Y8g0YTQvtGA0LzRiy5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNldFNlcnZlckVyciDigJQg0YTRg9C90LrRhtC40Y8g0LrRg9C00LAg0L3Rg9C20L3QviDQv9C10YDQtdC00LDRgtGMINGC0LXQutGB0YIg0L7RiNC40LHQutC4INC+0YLQtNCw0L3QvdC+0Lkg0YHQtdGA0LLQtdGA0L7QvC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IHNldE5vdGlmaWNhdGlvbiDigJQg0YTRg9C90LrRhtC40Y8g0L7RgtGA0LjRgdC+0LLRi9Cy0LDRjtGJ0LDRjyDRg9Cy0LXQtNC+0LzQu9C10L3QuNC1LlxuICogQHBhcmFtIHtGdW5jdGlvbn0gZGlzcGF0Y2gg4oCUINC00LjRgdC/0LDRgtGH0LXRgCDRjdC60YjQtdC9LdGE0YPQvdC60YbQuNC4LlxuICovXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gb25TdWJtaXRIYW5kbGVyKHZhbHVlcywgc2V0U2VydmVyRXJyLCBzZXROb3RpZmljYXRpb24sIGRpc3BhdGNoKSB7XG4gICAgXG4gICAgLy8g0J/QviDQutCw0LrQvtC80YMg0LDQtNGA0LXRgdGDINCx0YPQtNGDINC00LXQu9Cw0YLRjCDQt9Cw0L/RgNC+0YEg0L3QsCDQstGF0L7QtCDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICBjb25zdCB7c2VydmVyT3JpZ2luLCBpc0RldmVsb3BtZW50fSA9IGJyb3dzZXJDb25maWdcbiAgICBjb25zdCBhcGlVcmwgPSBzZXJ2ZXJPcmlnaW4gKyAnL2FwaS92MS91c2Vycy9sb2dpbidcbiAgICBcbiAgICAvLyDQn9Cw0YDQsNC80LXRgtGA0Ysg0LfQsNC/0YDQvtGB0LBcbiAgICBjb25zdCBvcHRpb25zID0ge1xuICAgICAgICBtZXRob2Q6ICdQT1NUJyxcbiAgICAgICAgaGVhZGVyczogeyAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nIH0sXG4gICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHZhbHVlcylcbiAgICB9XG4gICAgXG4gICAgLy8g0KHQtNC10LvQsNGOINC30LDQv9GA0L7RgSDQvdCwINGB0LXRgNCy0LXRgCDQuCDQv9C+0LvRg9GH0LXQvdC90YvQtSDQtNCw0L3QvdGL0LUg0L/QvtC80LXRidGDINCyIHNlcnZlclJlc1xuICAgIGNvbnN0IHNlcnZlclJlcyA9IGF3YWl0IGZldGNoKGFwaVVybCwgb3B0aW9ucylcbiAgICAgICAgLnRoZW4ocmVzID0+IHJlcy5qc29uKCkpXG4gICAgICAgIC50aGVuKHJlcyA9PiByZXMpXG4gICAgICAgIC5jYXRjaChlcnIgPT4gY29uc29sZS5sb2coZXJyKSlcbiAgICAvKlxuICAgINCV0YHQu9C4INCyIHNlcnZlclJlcyDQsdGD0LTQtdGCINC+0LHRitC10LrRgiDRgdC+INGB0YLQsNGC0YPRgdC+0LwgNDAzINC4INC/0YDQvtGB0YzQsdC+0Lkg0L/QvtC00YLQstC10YDQtNC40YLRjCDQv9C+0YfRgtGDLCDRgtC+INC/0L7QutCw0LfQsNGC0Ywg0YHQvtC+0YLQstC10YLRgdGC0LLRg9GO0YnQtdC1INGD0LLQtdC00L7QvNC70LXQvdC40LU6XG4gICAge1xuICAgICAgICBcInN0YXR1c1wiOiBcImZhaWxcIixcbiAgICAgICAgXCJlcnJvclwiOiB7XG4gICAgICAgICAgICBzdGF0dXNDb2RlOiA0MDNcbiAgICAgICAgICAgIGlzT3BlcmF0aW9uYWw6IHRydWVcbiAgICAgICAgICAgIG1lc3NhZ2U6IFwiUGxlYXNlLCBjb25maXJtIHlvdXIgZW1haWwuXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXNzYWdlXCI6IFwiUGxlYXNlIHByb3ZpZGUgZW1haWwgYW5kIHBhc3N3b3JkLlwiLFxuICAgIH0qL1xuICAgIGlmKHNlcnZlclJlcy5zdGF0dXMgPT09ICdmYWlsJyAmJiBzZXJ2ZXJSZXMuZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAzKSB7XG4gICAgICAgIGNvbnN0IG1haWxTZXJ2aWNlID0gJ2h0dHBzOi8vJyArIHZhbHVlcy5lbWFpbC5zcGxpdCgnQCcpWzFdXG4gICAgICAgIHNldE5vdGlmaWNhdGlvbihcbiAgICAgICAgICAgIDxOb3RpZmljYXRpb24+QSBsZXR0ZXIgd2l0aCBhIGxpbmsgaGFzIGJlZW4gc2VudCB0byB5b3VyIDxhIGhyZWY9e21haWxTZXJ2aWNlfT5lbWFpbDwvYT4uIENsaWNrIG9uIGl0IHRvIGxvZyBpbiB5b3VyIGFjY291bnQuPC9Ob3RpZmljYXRpb24+XG4gICAgICAgIClcbiAgICB9XG4gICAgXG4gICAgLyog0JXRgdC70Lgg0LIgc2VydmVyUmVzINCx0YPQtNC10YIg0L7QsdGK0LXQutGCINGBINC+0YjQuNCx0LrQvtC5INC/0YDQviDQvdC10LLQtdGA0L3Ri9C1INC00LDQvdC90YvQtSDQvtGCINC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjyDQtdGB0LvQuCDRg9C60LDQt9Cw0L0g0L3QtSDQstC10YDQvdCw0Y8g0L/QvtGH0YLQsCDQuNC70Lgg0L/QsNGA0L7Qu9GMINC40LvQuCDQvtC90Lgg0LLQvtC+0LHRidC1INC90LUg0L/QtdGA0LXQtNCw0L3RiyxcbiAgICDRgtC+INC/0L7QutCw0LfQsNGC0Ywg0YHQvtC+0LHRidC10L3QuNC1INC+0LEg0L7RiNC40LHQutC1OlxuICAgIHtcbiAgICAgICAgXCJzdGF0dXNcIjogXCJmYWlsXCIsXG4gICAgICAgIFwiZXJyb3JcIjoge1xuICAgICAgICAgICAgXCJzdGF0dXNDb2RlXCI6IDQwMCxcbiAgICAgICAgICAgIFwiaXNPcGVyYXRpb25hbFwiOiB0cnVlLFxuICAgICAgICAgICAgXCJtZXNzYWdlXCI6IFwiSW5jb3JyZWN0IGVtYWlsIG9yIHBhc3N3b3JkXCJcbiAgICAgICAgfSxcbiAgICAgICAgXCJtZXNzYWdlXCI6IFwiUGxlYXNlIHByb3ZpZGUgZW1haWwgYW5kIHBhc3N3b3JkLlwiLFxuICAgIH0qL1xuICAgIGlmKHNlcnZlclJlcy5zdGF0dXMgPT09ICdmYWlsJyAmJiBzZXJ2ZXJSZXMuZXJyb3Iuc3RhdHVzQ29kZSA9PT0gNDAwKSB7XG4gICAgICAgIHNldFNlcnZlckVycihzZXJ2ZXJSZXMuZXJyb3IubWVzc2FnZSlcbiAgICB9XG4gICAgXG4gICAgLyog0JXRgdC70Lgg0LLRgdGRINCy0LXRgNC90L4sINGC0L4g0LIgc2VydmVyUmVzINCx0YPQtNC10YIg0L7QsdGK0LXQutGCINGBINGD0YHQv9C10YXQvtC8OlxuICAgIHtcbiAgICAgICAgXCJzdGF0dXNcIjogXCJzdWNjZXNzXCIsXG4gICAgICAgIFwidG9rZW5cIjogXCJleUpoYkdjaU9pSklVekkxTmlJc0luUjVjQ0k2SWtwWFZDSjkuZXlKcFpDSTYuLi5cIixcbiAgICAgICAgXCJkYXRhXCI6IHtcbiAgICAgICAgICAgIFwidXNlclwiOiB7XG4gICAgICAgICAgICAgICAgZW1haWw6IFwiYW5ka296aW5za2l5QHlhbmRleC5ydVwiXG4gICAgICAgICAgICAgICAgbmFtZTogXCJBbmRyZXcgS296aW5za3lcIlxuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfSovXG4gICAgaWYoc2VydmVyUmVzLnN0YXR1cyA9PT0gJ3N1Y2Nlc3MnKSB7XG4gICAgICAgIFxuICAgICAgICAvLyDQldGB0LvQuCDQvdCw0YXQvtC20YPRgdGMINCyINGA0LXQttC40LzQtSDRgNCw0LfRgNCw0LHQvtGC0LrQtSwg0YLQviDQv9C+0YHRgtCw0LLQuNGC0Ywg0YLQvtC60LXQvSDQsiBMb2NhbFN0b3JhZ2VcbiAgICAgICAgaWYoaXNEZXZlbG9wbWVudCkge1xuICAgICAgICAgICAgbG9jYWxTdG9yYWdlLnNldEl0ZW0oJ2F1dGhUb2tlbicsIHNlcnZlclJlcy50b2tlbilcbiAgICAgICAgfVxuICAgIFxuICAgICAgICAvLyDQn9C+0LvRg9GH0LjRgtGMINC00LDQvdC90YvQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y9cbiAgICAgICAgY29uc3QgdXNlckRhdGEgPSBzZXJ2ZXJSZXMuZGF0YS51c2VyXG4gICAgICAgIFxuICAgICAgICAvLyDQn9C+0YHRgtCw0LLQuNGC0Ywg0LjRhSDQsiDQpdGA0LDQvdC40LvQuNGJ0LVcbiAgICAgICAgZGlzcGF0Y2goc2V0VXNlcih1c2VyRGF0YS5uYW1lLCB1c2VyRGF0YS5lbWFpbCkpXG4gICAgfVxufSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCBUb3BOYXZpZ2F0aW9uIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL3RvcE5hdkVudHJhbmNlXCI7XG5pbXBvcnQgQXV0aFNwbGl0Q29udGFpbmVyIGZyb20gXCIuLi8uLi9jb21wb25lbnRzL2NvbnRhaW5lcnMvYXV0aFNwbGl0Q29udGFpbmVyXCI7XG5pbXBvcnQgRW50ZXJGb3JtIGZyb20gXCIuL2NvbXBvbmVudHMvZW50ZXJGb3JtXCI7XG5cblxuZnVuY3Rpb24gUmVzZXRQYXNzd29yZFBhZ2UoKSB7XG4gICAgcmV0dXJuIChcbiAgICAgICAgPD5cbiAgICAgICAgICAgIDxUb3BOYXZpZ2F0aW9uIC8+XG4gICAgICAgICAgICA8QXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICAgICAgICAgIDxwPjU2NzwvcD5cbiAgICAgICAgICAgIDwvQXV0aFNwbGl0Q29udGFpbmVyPlxuICAgICAgICA8Lz5cbiAgICApXG59XG5cbmV4cG9ydCBkZWZhdWx0IFJlc2V0UGFzc3dvcmRQYWdlIiwiaW1wb3J0IFJlc2V0UGFzc3dvcmRQYWdlIGZyb20gJy4vcmVzZXRQYXNzd29yZFBhZ2UnXG5leHBvcnQgZGVmYXVsdCBSZXNldFBhc3N3b3JkUGFnZSIsImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCdcbmltcG9ydCB7dXNlU2VsZWN0b3J9IGZyb20gXCJyZWFjdC1yZWR1eFwiO1xuXG5cbmZ1bmN0aW9uIE5vdGVzUGFnZSgpIHtcbiAgICBcbiAgICBjb25zdCB1c2VyID0gdXNlU2VsZWN0b3Ioc3RvcmUgPT4gc3RvcmUudXNlcilcbiAgICAvLyBjb25zb2xlLmxvZyh1c2VyKTtcbiAgICBcbiAgICByZXR1cm4gdXNlci5uYW1lXG59XG5cbmV4cG9ydCBkZWZhdWx0IE5vdGVzUGFnZSIsImltcG9ydCBOb3Rlc1BhZ2UgZnJvbSAnLi9ub3Rlc1BhZ2UnXG5leHBvcnQgZGVmYXVsdCBOb3Rlc1BhZ2UiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnXG5cblxuZnVuY3Rpb24gVXNlclBhZ2UoKSB7XG4gICAgcmV0dXJuICdVc2VyUGFnZSdcbn1cblxuZXhwb3J0IGRlZmF1bHQgVXNlclBhZ2UiLCJpbXBvcnQgVXNlclBhZ2UgZnJvbSAnLi91c2VyUGFnZSdcbmV4cG9ydCBkZWZhdWx0IFVzZXJQYWdlIiwiaW1wb3J0IFJlYWN0LCB7dXNlRWZmZWN0fSBmcm9tICdyZWFjdCdcbmltcG9ydCAnLi9jc3MvcmVzZXQuY3NzJ1xuaW1wb3J0ICcuL2Nzcy9nZW5lcmFsLnNjc3MnXG5pbXBvcnQgcyBmcm9tICcuL2Nzcy9hcHAuc2NzcydcblxuaW1wb3J0IHtcbiAgICBCcm93c2VyUm91dGVyIGFzIFJvdXRlcixcbiAgICBTd2l0Y2gsXG4gICAgUm91dGUsXG4gICAgTGlua1xufSBmcm9tIFwicmVhY3Qtcm91dGVyLWRvbVwiO1xuXG5pbXBvcnQgTWFpblBhZ2UgZnJvbSBcIi4uLy4uL3BhZ2VzL21haW5cIlxuaW1wb3J0IFJlZ1BhZ2UgZnJvbSBcIi4uLy4uL3BhZ2VzL3JlZ1wiXG5pbXBvcnQgRW50ZXJQYWdlIGZyb20gXCIuLi8uLi9wYWdlcy9lbnRlclwiXG5pbXBvcnQgRm9yZ290UGFzc3dvcmRQYWdlIGZyb20gXCIuLi8uLi9wYWdlcy9mb3Jnb3RQYXNzd29yZFwiXG5pbXBvcnQgUmVzZXRQYXNzd29yZFBhZ2UgZnJvbSBcIi4uLy4uL3BhZ2VzL3Jlc2V0UGFzc3dvcmRcIlxuaW1wb3J0IE5vdGVzUGFnZSBmcm9tIFwiLi4vLi4vcGFnZXMvbm90ZXNcIlxuaW1wb3J0IFVzZXJQYWdlIGZyb20gXCIuLi8uLi9wYWdlcy91c2VyXCJcblxuXG5cbmNvbnN0IEFwcCA9ICgpID0+IHtcbiAgICBcbiAgICBcblxuICAgIHJldHVybiAoXG4gICAgICAgIDxSb3V0ZXI+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzTmFtZT17cy5hcHB9PlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvcmVzZXQtcGFzc3dvcmQvdG9rZW4nPk1haW48L0xpbms+XG4gICAgICAgICAgICAgICAgey8qPExpbmsgdG89Jy8nPk1haW48L0xpbms+XG4gICAgICAgICAgICAgICAgPExpbmsgdG89Jy9yZWcnPlJlZ2lzdHJhdGlvbjwvTGluaz5cbiAgICAgICAgICAgICAgICA8TGluayB0bz0nL2VudGVyJz5FbnRlcjwvTGluaz5cbiAgICAgICAgICAgICAgICA8TGluayB0bz0nL3Bhc3N3b3JkLXJlc2V0Jz5QYXNzd29yZCByZXNldDwvTGluaz5cbiAgICAgICAgICAgICAgICA8TGluayB0bz0nL2NoYW5nZS1wYXNzd29yZCc+Q2hhbmdlIHBhc3N3b3JkPC9MaW5rPlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvbm90ZXMnPk5vdGVzPC9MaW5rPlxuICAgICAgICAgICAgICAgIDxMaW5rIHRvPScvdXNlcic+VXNlcjwvTGluaz4qL31cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICA8U3dpdGNoPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nLycgZXhhY3Q+XG4gICAgICAgICAgICAgICAgICAgICAgICA8TWFpblBhZ2UgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9yZWcnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlZ1BhZ2UgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9lbnRlcic+XG4gICAgICAgICAgICAgICAgICAgICAgICA8RW50ZXJQYWdlIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPScvZm9yZ290LXBhc3N3b3JkJz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxGb3Jnb3RQYXNzd29yZFBhZ2UgLz5cbiAgICAgICAgICAgICAgICAgICAgPC9Sb3V0ZT5cbiAgICAgICAgICAgICAgICAgICAgPFJvdXRlIHBhdGg9Jy9yZXNldC1wYXNzd29yZC86dG9rZW4nPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFJlc2V0UGFzc3dvcmRQYWdlIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgICAgIDxSb3V0ZSBwYXRoPScvbm90ZXMnPlxuICAgICAgICAgICAgICAgICAgICAgICAgPE5vdGVzUGFnZSAvPlxuICAgICAgICAgICAgICAgICAgICA8L1JvdXRlPlxuICAgICAgICAgICAgICAgICAgICA8Um91dGUgcGF0aD0nL3VzZXInPlxuICAgICAgICAgICAgICAgICAgICAgICAgPFVzZXJQYWdlIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvUm91dGU+XG4gICAgICAgICAgICAgICAgPC9Td2l0Y2g+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9Sb3V0ZXI+XG4gICAgKVxufVxuXG5cbmV4cG9ydCBkZWZhdWx0IEFwcCIsImltcG9ydCBBcHAgZnJvbSAnLi9hcHAnXG5leHBvcnQgZGVmYXVsdCBBcHAiLCJpbXBvcnQgUmVhY3QgZnJvbSAncmVhY3QnO1xuaW1wb3J0IFJlYWN0RE9NIGZyb20gJ3JlYWN0LWRvbSc7XG5pbXBvcnQge1Byb3ZpZGVyfSBmcm9tICdyZWFjdC1yZWR1eCdcbmltcG9ydCBzdG9yZSBmcm9tICcuL3N0b3JlL3N0b3JlJ1xuaW1wb3J0IEFwcCBmcm9tICcuL2NvbXBvbmVudHMvYXBwJ1xuXG5cblJlYWN0RE9NLnJlbmRlcihcbiAgICA8UHJvdmlkZXIgc3RvcmU9e3N0b3JlfT5cbiAgICAgICAgPEFwcCAvPlxuICAgIDwvUHJvdmlkZXI+LFxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdyb290JylcbikiXSwic291cmNlUm9vdCI6IiJ9